@USER	O	O:0.997274
Pennington	O	O:0.997222
:	O	O:0.999979
So	O	O:0.999988
I	O	O:0.999987
was	O	O:0.999996
able	O	O:0.999829
convert	O	O:0.999564
my	O	O:0.999931
~	O	O:0.998849
1,000	O	O:0.999592
line	O	O:0.999464
program	O	O:0.999901
easily	O	O:0.999935
to	O	O:0.999994
using	O	O:0.999992
pandas	O	O:0.998111
.	O	O:0.999945
great	O	O:0.998837
call	O	O:0.998610
...	O	O:0.999932
any	O	O:0.999783
idea	O	O:0.999708
how	O	O:0.999901
I	O	O:0.999993
might	O	O:0.999990
get	O	O:0.999857
my	O	O:0.999993
compound	O	O:0.999644
return	O	O:0.999522
series	O	O:0.999644
created	O	O:0.999228
?	O	O:0.999975
	
I	O	O:0.999759
was	O	O:0.999803
was	O	O:0.999951
thinking	O	O:0.999927
of	O	O:0.999995
using	O	O:0.999929
a	O	O:0.999987
lambda	O	O:0.983305
function	O	O:0.999630
in	O	O:0.999965
the	O	O:0.999871
apply	O	B-API:0.676629
method	O	O:0.999259
of	O	O:0.999711
DataMatrix	O	O:0.998448
but	O	O:0.999932
I'm	O	O:0.999970
having	O	O:0.999961
some	O	O:0.999348
challenges	O	O:0.999422
...	O	O:0.999582
	
Thanks	O	O:0.997725
	
I	O	O:0.999925
tested	O	O:0.999885
with	O	O:0.999586
apply	O	B-API:0.768405
,	O	O:0.999946
it	O	O:0.999948
seems	O	O:0.999983
that	O	O:0.999982
when	O	O:0.999985
there	O	O:0.999972
are	O	O:0.999999
many	O	O:0.999966
sub	O	O:0.999911
groups	O	O:0.999325
,	O	O:0.999957
it's	O	O:0.999972
very	O	O:0.999781
slow	O	O:0.999653
.	O	O:0.999987
the	O	O:0.999993
groups	O	O:0.999741
attribute	O	O:0.999970
of	O	O:0.999990
grouped	O	O:0.996359
is	O	O:0.999997
a	O	O:0.999977
dict	O	O:0.999512
,	O	O:0.999997
you	O	O:0.999979
can	O	O:0.999903
choice	O	O:0.999999
index	O	O:0.999990
directly	O	O:0.999862
from	O	O:0.999830
it	O	O:0.999624
:	O	O:0.999985
#CODE	O	O:0.999863
	
Just	O	O:0.999899
as	O	O:0.999998
a	O	O:0.999994
small	O	O:0.998339
addition	O	O:0.999933
,	O	O:0.999995
you	O	O:0.999934
can	O	O:0.999994
also	O	O:0.999999
do	O	O:0.999999
an	O	O:0.999994
apply	O	O:0.637373
if	O	O:0.999934
you	O	O:0.999985
have	O	O:0.999993
a	O	O:0.999999
complex	O	O:0.989553
function	O	O:0.999990
that	O	O:0.999947
you	O	O:0.999998
apply	O	O:0.940666
to	O	O:0.999994
a	O	O:1.000000
single	O	O:0.999187
column	O	O:0.999577
:	O	O:0.999965
	
probably	O	O:0.999438
x	O	O:0.999796
is	O	O:0.999995
a	O	O:0.999992
confusing	O	O:0.999587
name	O	O:0.999916
for	O	O:0.999964
the	O	O:0.999986
column	O	O:0.999677
name	O	O:0.999871
and	O	O:0.999998
the	O	O:0.999989
row	O	O:0.999760
variable	O	O:0.999882
,	O	O:0.999997
though	O	O:0.999958
I	O	O:0.999997
agree	O	O:0.999942
apply	O	B-API:0.930405
is	O	O:0.999746
easiest	O	O:0.997468
way	O	O:0.999963
to	O	O:0.999964
do	O	O:0.999997
it	O	O:0.999962
:)	O	O:0.999813
	
just	O	O:0.999709
to	O	O:0.999997
add	O	O:0.999986
,	O	O:0.999990
`	O	O:0.999991
apply	O	B-API:0.948069
`	O	O:0.999965
can	O	O:0.999866
also	O	O:0.999999
be	O	O:0.999999
applied	O	O:0.999690
to	O	O:0.999986
multiple	O	O:0.999989
columns	O	O:0.999245
:	O	O:0.999971
	
Can	O	O:0.999858
apply	O	O:0.902282
take	O	O:0.999204
in	O	O:0.999996
a	O	O:0.999978
function	O	O:0.999900
defined	O	O:0.999907
elsewhere	O	O:0.999789
in	O	O:0.999976
code	O	O:0.999482
?	O	O:0.999978
	
this	O	O:0.999269
is	O	O:0.999991
so	O	O:0.999993
that	O	O:0.999983
we	O	O:0.999998
can	O	O:0.999990
introduce	O	O:0.999996
a	O	O:0.999999
more	O	O:0.999046
complicated	O	O:0.998254
function	O	O:0.999877
	
How	O	O:0.999879
to	O	O:0.999983
apply	O	O:0.972988
slicing	O	O:0.998324
on	O	O:0.999914
pandas	O	O:0.999967
Series	O	O:0.999987
of	O	O:0.999972
strings	O	O:0.998181
	
I'm	O	O:0.999888
playing	O	O:0.998510
with	O	O:0.999893
pandas	O	O:0.998558
and	O	O:0.999998
trying	O	O:0.999901
to	O	O:0.999945
apply	O	O:0.927753
string	O	O:0.999327
slicing	O	O:0.999457
on	O	O:0.999992
a	O	O:0.999996
Series	O	O:0.999877
of	O	O:0.999979
strings	O	O:0.996714
object	O	O:0.999847
.	O	O:0.999907
	
`	O	O:0.999963
apply	O	B-API:0.980760
`	O	O:0.999968
first	O	O:0.999137
tries	O	O:0.999898
to	O	O:0.999985
apply	O	O:0.941233
the	O	O:0.999778
function	O	O:0.999692
to	O	O:0.999994
the	O	O:1.000000
whole	O	O:0.999724
series	O	O:0.999892
.	O	O:0.999930
	
Only	O	O:0.999738
if	O	O:0.999989
that	O	O:0.999925
fails	O	O:0.999856
it	O	O:0.999993
maps	O	O:0.999787
the	O	O:0.999994
given	O	O:0.992863
function	O	O:0.999962
to	O	O:0.999995
each	O	O:0.999979
element	O	O:0.999638
.	O	O:0.999908
	
`	O	O:0.999783
[:	O	O:0.999754
2	O	O:0.999956
]`	O	O:0.999825
is	O	O:0.999976
a	O	O:0.999989
valid	O	O:0.996892
function	O	O:0.999939
on	O	O:0.999996
a	O	O:0.999996
series	O	O:0.999887
,	O	O:0.999982
`	O	O:0.999985
+	O	O:0.998654
'	O	O:0.999995
qwerty	O	O:0.999383
'`	O	O:0.999958
apparently	O	O:0.999149
isn't	O	O:0.999718
,	O	O:0.999984
that's	O	O:0.999961
why	O	O:0.999991
you	O	O:0.999995
do	O	O:0.999995
get	O	O:0.999979
the	O	O:0.999987
implicit	O	O:0.999904
mapping	O	O:0.999596
on	O	O:0.999962
the	O	O:0.999966
latter	O	O:0.999556
.	O	O:0.999797
	
If	O	O:0.999928
you	O	O:0.999983
always	O	O:0.999996
want	O	O:0.999992
to	O	O:0.999978
do	O	O:1.000000
the	O	O:0.999996
mapping	O	O:0.999696
you	O	O:0.999978
can	O	O:0.999985
use	O	O:0.999997
`	O	O:0.999948
s.map	O	B-API:0.557671
`	O	O:0.999976
.	O	O:0.999135
	
`	O	O:0.999957
apply	O	B-API:0.820191
`'	O	O:0.999796
s	O	O:0.999122
source	O	O:0.999882
code	O	O:0.999316
for	O	O:0.999937
reference	O	O:0.996373
:	O	O:0.999854
#CODE	O	O:0.999847
	
To	O	O:0.999846
clarify	O	O:0.996331
:	O	O:0.999980
The	O	O:0.999942
`	O	O:0.999991
any	O	O:0.999403
(	O	O:0.999986
1	O	O:0.999954
)`	O	O:0.999867
approach	O	O:0.999660
wouldn't	O	O:0.999946
work	O	O:0.999933
if	O	O:0.999998
you	O	O:0.999970
had	O	O:0.999993
other	O	O:0.999992
values	O	O:0.999567
in	O	O:0.999977
the	O	O:0.999999
table	O	O:0.999981
that	O	O:0.999939
you	O	O:0.999993
didn't	O	O:0.999986
want	O	O:0.999976
to	O	O:0.999971
filter	O	O:0.999551
.	O	O:0.999866
	
Suppose	O	O:0.999740
there	O	O:0.999623
are	O	O:0.999996
many	O	O:0.999963
columns	O	O:0.999567
and	O	O:0.999998
you	O	O:0.999998
only	O	O:0.999963
want	O	O:0.999990
the	O	O:0.999959
`	O	O:0.999994
any	O	O:0.999241
`	O	O:0.999996
to	O	O:0.999972
apply	O	O:0.989167
to	O	O:0.999988
a	O	O:1.000000
subset	O	O:0.998988
of	O	O:0.999999
them	O	O:0.997363
(	O	O:0.999998
you	O	O:0.999991
know	O	O:0.999934
the	O	O:0.999998
subset's	O	O:0.998949
labels	O	O:0.999332
)	O	O:0.999972
.	O	O:0.999834
	
Then	O	O:0.999733
,	O	O:0.999999
using	O	O:0.999979
the	O	O:0.999932
ability	O	O:0.999312
to	O	O:0.999973
apply	O	O:0.976927
multiple	O	O:0.999842
aggregation	O	O:0.999014
functions	O	O:0.999971
following	O	O:0.999847
a	O	O:0.999979
groupby	B-API	B-API:0.995184
,	O	O:0.999993
you	O	O:0.999913
can	O	O:0.999967
say	O	O:0.999991
:	O	O:0.999992
#CODE	O	O:0.999816
	
That's	O	O:0.998962
OK	O	O:0.999892
,	O	O:0.999985
although	O	O:0.999914
it	O	O:0.999960
has	O	O:0.999992
the	O	O:0.999987
problem	O	O:0.999903
that	O	O:0.999890
I	O	O:0.999999
don't	O	O:0.999997
even	O	O:0.999737
know	O	O:0.999989
the	O	O:0.999997
number	O	O:0.999871
of	O	O:0.999990
columns	O	O:0.999955
beforehand	O	O:0.999878
.	O	O:0.999947
	
I	O	O:0.999989
think	O	O:0.999904
I	O	O:0.999976
will	O	O:0.999934
continue	O	O:0.999747
converting	O	O:0.999633
the	O	O:0.999990
dataframe	B-API	O:0.995174
after	O	O:0.999967
loading	O	O:0.999352
with	O	O:0.999821
the	O	O:0.999618
apply	O	B-API:0.906337
method	O	O:0.998590
.	O	O:0.999646
	
I	O	O:0.999962
see	O	O:0.999985
that	O	O:0.999543
Pandas	O	O:0.999942
does	O	O:0.999902
not	O	O:0.999984
allow	O	O:0.999953
duplicate	O	O:0.999975
time	O	O:0.999942
series	O	O:0.999990
indexes	O	O:0.999526
yet	O	O:0.999242
(	O	O:0.999985
#URL	O	O:0.999508
)	O	O:0.999923
,	O	O:0.999936
but	O	O:0.999981
will	O	O:0.999862
be	O	O:0.999998
added	O	O:0.999962
soon	O	O:0.996232
.	O	O:0.999880
	
I	O	O:0.999956
am	O	O:0.999996
wondering	O	O:0.998972
if	O	O:0.999993
there	O	O:0.999827
is	O	O:0.999997
a	O	O:0.999990
good	O	O:0.998772
way	O	O:0.999977
to	O	O:0.999981
apply	O	O:0.977656
rolling	O	B-API:0.546303
window	O	O:0.999110
means	O	O:0.999937
to	O	O:0.999999
a	O	O:1.000000
dataset	O	O:0.999842
with	O	O:0.999961
duplicate	O	O:0.999992
times	O	O:0.999974
by	O	O:0.999993
a	O	O:0.999980
multi-index	O	O:0.999059
tag	O	O:0.999909
/	O	O:0.999986
column	O	O:0.999356
	
However	O	O:0.999802
mine	O	O:0.999792
uses	O	O:0.999876
the	O	O:0.999980
apply	O	B-API:0.860243
function	O	O:0.999787
of	O	O:0.999984
a	O	O:0.999995
dataframe	B-API	O:0.999316
instead	O	O:0.999977
of	O	O:0.999997
the	O	O:0.999953
aggregate	O	B-API:0.863079
.	O	O:0.999467
	
and	O	O:0.999970
apply	O	B-API:0.702862
agg()	B-API	B-API:0.999787
with	O	O:0.995816
it	O	O:0.999298
:	O	O:0.999980
#CODE	O	O:0.999871
	
I	O	O:0.999958
tried	O	O:0.999952
all	O	O:0.999948
manner	O	O:0.999841
of	O	O:0.999941
`	O	O:0.999972
strftime	B-API	B-API:0.972301
`	O	O:0.999997
methods	O	O:0.998942
on	O	O:0.999994
cdiff.DATE	O	O:0.997564
with	O	O:0.999975
no	O	O:0.999958
success	O	O:0.999488
.	O	O:0.999904
	
It	O	O:0.999941
wants	O	O:0.999935
to	O	O:0.999991
apply	O	O:0.960431
the	O	O:0.999955
to	O	O:0.999954
strings	O	O:0.999920
,	O	O:0.999992
not	O	O:0.999986
series	O	O:0.999863
object	O	O:0.999811
.	O	O:0.999931
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999782
do	O	O:0.999971
use	O	O:0.999962
a	O	O:0.999872
pandas	O	O:0.999046
multiindex	O	O:0.999988
to	O	O:0.999986
select	O	O:0.999972
a	O	O:0.999998
partial	O	O:0.999539
slice	O	O:0.999548
at	O	O:0.999992
the	O	O:0.999980
top	O	O:0.999709
level	O	O:0.999008
index	O	O:0.999719
(	O	O:0.999993
date	O	O:0.999230
)	O	O:0.999970
,	O	O:0.999964
and	O	O:0.999996
apply	O	O:0.685132
a	O	O:0.999911
list	O	O:0.988819
to	O	O:0.999990
the	O	O:0.999999
second	O	O:0.999488
level	O	O:0.999350
index	O	O:0.999613
(	O	O:0.999979
stock	O	O:0.999859
symbol	O	O:0.999530
)	O	O:0.999967
.	O	O:0.999810
	
I.e.	O	O:0.999666
below	O	O:0.999834
I	O	O:0.999996
want	O	O:0.999990
the	O	O:0.999983
data	O	O:0.999916
for	O	O:0.999958
AAPL	O	O:0.999193
and	O	O:0.999978
MSFT	O	O:0.997402
in	O	O:0.999897
the	O	O:0.999951
range	O	O:0.999313
#URL	O	O:0.998668
	
AttributeError	O	O:0.995253
:	O	O:0.999967
Cannot	O	O:0.999934
access	O	O:0.999862
callable	O	O:0.999731
attribute	O	O:0.999942
'	O	O:0.999874
reset_index	B-API	B-API:0.960986
'	O	O:0.999980
of	O	O:0.999882
'	O	O:0.999934
DataFrameGroupBy	B-API	B-API:0.739816
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954730
'	O	O:0.999052
method	O	O:0.999572
	
I	O	O:0.999979
think	O	O:0.999941
the	O	O:0.999981
same	O	O:0.999912
concepts	O	O:0.999889
apply	O	O:0.908175
to	O	O:0.999880
an	O	O:0.999999
index	O	O:0.999974
of	O	O:0.999979
floats	O	O:0.999369
.	O	O:0.999935
	
You	O	O:0.999967
just	O	O:0.999959
need	O	O:0.999989
to	O	O:0.999988
write	O	O:0.999999
your	O	O:0.998895
own	O	O:0.999954
method	O	O:0.999986
to	O	O:0.999998
group	O	O:0.999975
samples	O	O:0.999870
into	O	O:0.999764
a	O	O:0.999994
period	O	O:0.998278
group	O	O:0.995363
and	O	O:0.999998
time	O	O:0.999978
step	O	O:0.999747
within	O	O:0.999890
the	O	O:0.999983
group	O	O:0.990799
.	O	O:0.999862
	
Hope	O	O:0.999581
that	O	O:0.999716
helps	O	O:0.999664
	
I	O	O:0.999944
don't	O	O:0.999931
think	O	O:0.999745
underlying	O	O:0.999853
mathematics	O	O:0.999719
apply	O	O:0.807104
that	O	O:0.999927
sum	O	O:0.999884
of	O	O:0.999991
interpolation	O	O:0.999939
equal	O	O:0.999894
to	O	O:0.999988
interpolation	O	O:0.999997
of	O	O:0.999987
sum	O	O:0.998429
.	O	O:0.999972
	
it	O	O:0.999950
only	O	O:0.999977
holds	O	O:0.999889
at	O	O:0.999993
special	O	O:0.998913
case	O	O:0.999529
	
Is	O	O:0.999985
there	O	O:0.999969
a	O	O:0.999997
more	O	O:0.998947
performant	O	O:0.998979
and	O	O:0.999985
/	O	O:0.999965
or	O	O:0.999973
more	O	O:0.999718
idiomatic	O	O:0.999887
way	O	O:0.999981
to	O	O:0.999973
do	O	O:0.999999
this	O	O:0.999912
?	O	O:0.999968
	
I	O	O:0.999987
know	O	O:0.999948
about	O	O:0.999639
apply	O	B-API:0.893800
,	O	O:0.999676
but	O	O:0.999886
sometimes	O	O:0.999452
it's	O	O:0.999973
more	O	O:0.999932
convenient	O	O:0.999884
to	O	O:0.999993
use	O	O:0.999999
a	O	O:0.999910
for	O	O:0.999713
loop	O	O:0.998769
.	O	O:0.999551
	
Thanks	O	O:0.998865
in	O	O:0.999930
advance	O	O:0.999490
.	O	O:0.999845
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
Is	O	O:0.999942
apply	O	O:0.884246
more	O	O:0.999127
efficient	O	O:0.999789
than	O	O:0.999556
iterrows	B-API	B-API:0.948336
?	O	O:0.999945
	
Returning	O	O:0.999782
multiple	O	O:0.999757
values	O	O:0.999494
from	O	O:0.999958
pandas	O	O:0.999981
apply	O	O:0.908666
on	O	O:0.999906
a	O	O:0.999959
DataFrame	B-API	O:0.982657
	
Now	O	O:0.999958
,	O	O:0.999999
supposing	O	O:0.999887
I	O	O:0.999997
have	O	O:0.999951
"	O	O:0.999995
a	O	O:0.999951
"	O	O:0.999829
and	O	O:0.999918
"	O	O:0.999984
b	O	O:0.999257
"	O	O:0.999988
as	O	O:0.999956
one	O	O:0.999969
group	O	O:0.996869
,	O	O:0.999984
and	O	O:0.999964
"	O	O:0.999984
c	O	O:0.997413
"	O	O:0.999969
and	O	O:0.999879
"	O	O:0.999989
d	O	O:0.999466
"	O	O:0.999979
at	O	O:0.999973
the	O	O:0.999985
other	O	O:0.999780
,	O	O:0.999977
I'm	O	O:0.999976
performing	O	O:0.999588
the	O	O:0.999933
t-test	O	O:0.999573
row-wise	O	O:0.997099
.	O	O:0.999883
	
This	O	O:0.998977
is	O	O:0.999984
fairly	O	O:0.999756
trivial	O	O:0.999420
with	O	O:0.999944
pandas	O	O:0.999631
,	O	O:0.999999
using	O	O:0.999893
`	O	O:0.999914
apply	O	B-API:0.994108
`	O	O:0.999956
with	O	O:0.996158
axis=1	O	O:0.999107
.	O	O:0.999820
	
However	O	O:0.999857
,	O	O:0.999994
I	O	O:0.999995
can	O	O:0.999968
either	O	O:0.999995
return	O	O:0.999859
a	O	O:0.999996
DataFrame	B-API	O:0.994980
of	O	O:0.999989
the	O	O:0.999990
same	O	O:0.999978
shape	O	O:0.999920
if	O	O:0.999996
my	O	O:0.999898
function	O	O:0.999845
doesn't	O	O:0.999900
aggregate	O	O:0.767667
,	O	O:0.999992
or	O	O:0.999992
a	O	O:0.999982
Series	O	O:0.999243
if	O	O:0.999987
it	O	O:0.999994
aggregates	O	O:0.997872
.	O	O:0.999861
	
Why	O	O:0.999920
are	O	O:0.999988
you	O	O:0.999992
using	O	O:0.999962
`	O	O:0.999974
apply	O	B-API:0.984570
`	O	O:0.999928
in	O	O:0.999767
the	O	O:0.999998
first	O	O:0.999883
place	O	O:0.999508
?	O	O:0.999975
	
Your	O	O:0.999742
result	O	O:0.999695
is	O	O:0.999998
a	O	O:0.999992
new	O	O:0.997489
`	O	O:0.999980
DataFrame	B-API	O:0.895025
`	O	O:0.999997
with	O	O:0.999962
a	O	O:0.999997
shape	O	O:0.999950
different	O	O:0.999942
from	O	O:0.999943
the	O	O:0.999982
input	O	O:0.997811
(	O	O:0.999997
both	O	O:0.999982
rows	O	O:0.999626
and	O	O:0.999997
columns	O	O:0.999978
)	O	O:0.999982
,	O	O:0.999995
therefore	O	O:0.999959
it's	O	O:0.999987
a	O	O:0.999997
completely	O	O:0.999577
new	O	O:0.999868
obj	O	O:0.996475
.	O	O:0.999774
	
You	O	O:0.999838
could	O	O:0.999979
just	O	O:0.999994
have	O	O:0.999979
`	O	O:0.999996
t_test_and_mean	O	O:0.985842
`	O	O:0.999997
accept	O	O:0.999788
your	O	O:0.999904
input	O	O:0.999776
dataframe	B-API	O:0.992817
(	O	O:0.999909
and	O	O:0.999998
the	O	O:0.999997
columns	O	O:0.999539
to	O	O:0.999996
group	O	O:0.999992
by	O	O:0.999975
)	O	O:0.999952
and	O	O:0.999982
return	O	O:0.999743
a	O	O:0.999870
1-row-2-columns	O	O:0.997357
dataframe	B-API	O:0.997986
,	O	O:0.999992
without	O	O:0.999929
using	O	O:0.999421
`	O	O:0.999804
apply	O	B-API:0.997205
`	O	O:0.999792
.	O	O:0.997163
	
Some	O	O:0.999897
of	O	O:0.999992
the	O	O:0.999986
tables	O	O:0.998965
I'm	O	O:0.999973
displaying	O	O:0.999729
would	O	O:0.999895
be	O	O:0.999998
much	O	O:0.999968
easier	O	O:0.999477
to	O	O:0.999991
read	O	O:0.999961
with	O	O:0.999988
a	O	O:0.999996
little	O	O:0.999796
bit	O	O:0.999889
of	O	O:0.999952
formatting	O	O:0.998149
.	O	O:0.999870
	
I'd	O	O:0.999963
really	O	O:0.999949
like	O	O:0.999983
something	O	O:0.999986
like	O	O:0.999642
"	O	O:0.999999
zebra	O	O:0.999798
tables	O	O:0.999227
"	O	O:0.999992
where	O	O:0.999979
every	O	O:0.999938
other	O	O:0.999927
row	O	O:0.999269
is	O	O:0.999929
shaded	O	O:0.996705
.	O	O:0.999801
	
I	O	O:0.999981
read	O	O:0.999810
here	O	O:0.999596
about	O	O:0.999888
how	O	O:0.999979
this	O	O:0.999924
formatting	O	O:0.999962
can	O	O:0.999943
be	O	O:0.999999
implemented	O	O:0.999955
via	O	O:0.999727
css	O	O:0.998588
.	O	O:0.999808
	
Is	O	O:0.999985
there	O	O:0.999985
a	O	O:0.999996
really	O	O:0.999543
straight	O	O:0.999845
forward	O	O:0.999736
way	O	O:0.999971
to	O	O:0.999991
apply	O	O:0.990123
a	O	O:0.999973
css	O	O:0.999229
to	O	O:0.999991
an	O	O:0.999995
IPython	O	O:0.999116
Notebook	O	O:0.999845
and	O	O:0.999997
then	O	O:0.999986
have	O	O:0.999997
tables	O	O:0.999962
rendered	O	O:0.999958
using	O	O:0.999961
the	O	O:0.999849
style	O	O:0.999059
sheet	O	O:0.999365
?	O	O:0.999955
	
If	O	O:0.999957
you	O	O:0.999994
just	O	O:0.999955
stick	O	O:0.999993
that	O	O:0.999909
in	O	O:1.000000
one	O	O:0.999998
of	O	O:0.999999
your	O	O:0.999972
markdown	O	O:0.999931
cells	O	O:0.999903
,	O	O:0.999997
then	O	O:0.999892
it	O	O:0.999999
will	O	O:0.999988
apply	O	O:0.872367
to	O	O:0.999997
everything	O	O:0.999988
on	O	O:0.999988
the	O	O:0.999986
page	O	O:0.999692
.	O	O:0.999867
	
How	O	O:0.999931
to	O	O:0.999988
optimally	O	O:0.999996
apply	O	O:0.901314
a	O	O:0.999853
function	O	O:0.999455
on	O	O:0.999995
all	O	O:0.999998
items	O	O:0.999981
of	O	O:0.999992
a	O	O:0.999997
dataframe	B-API	O:0.999267
using	O	O:0.999909
inputs	O	O:0.999845
from	O	O:0.999761
another	O	O:0.999922
dataframe	B-API	O:0.997798
?	O	O:0.999908
	
I	O	O:0.999968
am	O	O:0.999997
new	O	O:0.998094
in	O	O:0.999966
python	O	O:0.999582
and	O	O:0.999995
I	O	O:0.999983
am	O	O:0.999989
currenlt	O	O:0.999519
struggly	O	O:0.999859
to	O	O:0.999989
do	O	O:0.999999
simple	O	O:0.999910
things	O	O:0.999432
with	O	O:0.999946
pandas	O	O:0.999520
.	O	O:0.999952
	
I	O	O:0.999922
would	O	O:0.999996
like	O	O:0.999956
to	O	O:0.999999
apply	O	O:0.966363
the	O	O:0.999975
same	O	O:0.998960
function	O	O:0.999960
to	O	O:0.999996
each	O	O:0.999998
item	O	O:0.999966
of	O	O:0.999999
a	O	O:0.999997
given	O	O:0.996073
dataset	O	O:0.999948
but	O	O:0.999989
using	O	O:0.999981
a	O	O:0.999947
time-dependent	O	O:0.968385
parameter	O	O:0.999387
.	O	O:0.999714
	
I'm	O	O:0.999904
having	O	O:0.999885
a	O	O:0.999994
bit	O	O:0.999721
of	O	O:0.999989
trouble	O	O:0.999867
altering	O	O:0.999975
a	O	O:0.999953
duplicated	O	O:0.991406
pandas	O	O:0.999461
DataFrame	B-API	O:0.981065
and	O	O:0.999967
not	O	O:0.999969
having	O	O:0.999596
the	O	O:0.999974
edits	O	O:0.999778
apply	O	O:0.553472
to	O	O:0.999940
both	O	O:0.999991
the	O	O:0.999982
duplicate	O	O:0.999639
and	O	O:0.999993
the	O	O:0.999992
original	O	O:0.996765
DataFrame	B-API	O:0.991396
.	O	O:0.999828
	
Then	O	O:0.999820
I	O	O:0.999999
assign	O	O:0.999914
the	O	O:0.999688
'	O	O:0.999952
d	O	O:0.999732
'	O	O:0.999993
dataframe	B-API	O:0.998574
to	O	O:0.999992
variable	O	O:0.999987
'	O	O:0.999979
e	O	O:0.999886
'	O	O:0.999966
and	O	O:0.999994
apply	O	O:0.892470
some	O	O:0.998494
arbitrary	O	O:0.999699
math	O	O:0.999742
to	O	O:0.999976
column	O	O:0.999990
'	O	O:0.999998
a	O	O:0.999988
'	O	O:0.999979
using	O	O:0.999781
apply	O	B-API:0.988802
:	O	O:0.997783
#CODE	O	O:0.998893
	
The	O	O:0.999913
problem	O	O:0.999741
arises	O	O:0.999561
in	O	O:0.999987
that	O	O:0.999944
the	O	O:0.999998
apply	O	B-API:0.789217
function	O	O:0.999688
apparently	O	O:0.999865
applies	O	O:0.999794
to	O	O:0.999976
both	O	O:0.999990
the	O	O:0.999961
duplicate	O	O:0.999893
DataFrame	B-API	O:0.992913
'	O	O:0.999989
e	O	O:0.999919
'	O	O:0.999940
and	O	O:0.999987
original	O	O:0.999771
DataFrame	B-API	O:0.981995
'	O	O:0.999966
d	O	O:0.999888
'	O	O:0.999987
,	O	O:0.999992
which	O	O:0.999948
I	O	O:0.999993
cannot	O	O:0.999978
for	O	O:0.999986
the	O	O:0.999994
life	O	O:0.999704
of	O	O:0.999988
me	O	O:0.999962
figure	O	O:0.999710
out	O	O:0.999393
:	O	O:0.999958
#CODE	O	O:0.999770
	
So	O	O:0.999953
,	O	O:0.999991
apply	O	O:0.921506
this	O	O:0.998061
function	O	O:0.999919
to	O	O:0.999999
each	O	O:0.999993
of	O	O:0.999997
those	O	O:0.999922
3	O	O:0.999982
columns	O	O:0.998708
:	O	O:0.999977
#CODE	O	O:0.999899
	
You	O	O:0.999973
want	O	O:0.999954
to	O	O:0.999957
use	O	O:0.999999
the	O	O:0.999906
apply	O	B-API:0.976936
function	O	O:0.998759
and	O	O:0.999985
a	O	O:0.999985
lambda	O	O:0.905749
:	O	O:0.999903
#CODE	O	O:0.999393
	
I	O	O:0.999943
don't	O	O:0.999965
believe	O	O:0.999833
you	O	O:0.999981
can	O	O:0.999986
avoid	O	O:0.999988
iteration	O	O:0.999976
100%	O	O:0.999596
with	O	O:0.999973
what	O	O:0.999812
you	O	O:0.999979
are	O	O:0.999999
trying	O	O:0.999973
to	O	O:0.999980
do	O	O:0.999988
.	O	O:0.999936
	
You	O	O:0.999938
can	O	O:0.999989
possibly	O	O:0.999995
duplicate	O	O:0.999991
the	O	O:0.999965
`	O	O:0.999993
quote	O	O:0.986342
`	O	O:0.999999
column	O	O:0.999865
twice	O	O:0.999990
shifting	O	O:0.999872
it	O	O:0.999984
by	O	O:0.999987
one	O	O:0.999994
each	O	O:0.998720
direction	O	O:0.999101
and	O	O:0.999994
apply	O	O:0.675984
it	O	O:0.999687
to	O	O:0.999998
your	O	O:0.999996
dataset	O	O:0.999972
to	O	O:0.999998
create	O	O:0.999998
a	O	O:0.999995
pivot	B-API	O:0.961654
table	O	O:0.999994
based	O	O:0.999966
on	O	O:0.999997
entries	O	O:0.999859
where	O	O:0.999952
`	O	O:0.999997
quote	O	O:0.993945
`	O	O:0.999979
is	O	O:0.999735
!	O	O:0.999866
	
=	O	O:0.999697
to	O	O:0.999927
`	O	O:0.999999
quote_next	O	O:0.942131
`	O	O:0.999989
and	O	O:0.999692
`	O	O:0.999995
quote_prev	O	O:0.703600
`	O	O:0.999970
.	O	O:0.999383
	
I'm	O	O:0.999950
using	O	O:0.999953
the	O	O:0.999919
excellent	O	O:0.992035
`	O	O:0.999992
pandas	O	O:0.995150
`	O	O:0.999998
package	O	O:0.999404
to	O	O:0.999998
deal	O	O:0.999989
with	O	O:0.999991
a	O	O:0.999994
large	O	O:0.999778
amount	O	O:0.999815
of	O	O:0.999890
varied	O	O:0.999348
meteorological	O	O:0.999945
diagnostic	O	O:0.999698
data	O	O:0.999362
and	O	O:0.999994
I'm	O	O:0.999986
quickly	O	O:0.999605
running	O	O:0.999903
out	O	O:0.999935
of	O	O:0.999997
dimensions	O	O:0.999911
as	O	O:0.999998
I	O	O:0.999991
stitch	O	O:0.999717
the	O	O:0.999985
data	O	O:0.999894
together	O	O:0.999210
.	O	O:0.999960
	
Looking	O	O:0.999543
at	O	O:0.999982
the	O	O:0.999901
documentation	O	O:0.999516
,	O	O:0.999987
it	O	O:0.999992
may	O	O:0.999993
be	O	O:0.999999
that	O	O:0.999994
using	O	O:0.999974
the	O	O:0.999471
`	O	O:0.999556
MultiIndex	O	B-API:0.675916
`	O	O:0.999993
may	O	O:0.999971
solve	O	O:0.999955
my	O	O:0.999978
problem	O	O:0.998584
,	O	O:0.999967
but	O	O:0.999828
I'm	O	O:0.999950
not	O	O:0.999993
sure	O	O:0.999933
how	O	O:0.999981
to	O	O:0.999992
apply	O	O:0.987977
it	O	O:0.999956
to	O	O:0.999995
my	O	O:0.999999
situation	O	O:0.999786
-	O	O:0.999997
the	O	O:0.999907
documentation	O	O:0.999842
shows	O	O:0.999975
examples	O	O:0.999927
of	O	O:0.999996
creating	O	O:0.999751
MultiIndexes	O	O:0.999653
with	O	O:0.999972
random	O	O:0.999874
data	O	O:0.999809
and	O	O:0.999995
DataFrames	O	O:0.999288
,	O	O:0.999638
but	O	O:0.999952
not	O	O:0.999948
Series	O	O:0.999948
with	O	O:0.999956
pre-existing	O	O:0.999878
timeseries	O	O:0.999942
data	O	O:0.999822
.	O	O:0.999945
	
I've	O	O:0.999618
run	O	O:0.999875
out	O	O:0.999978
of	O	O:0.999989
dimensions	O	O:0.998143
(	O	O:0.999996
up	O	O:0.999967
to	O	O:0.999981
3-D	O	O:0.999996
with	O	O:0.999906
a	O	O:0.999988
Panel	O	O:0.999765
)	O	O:0.999929
and	O	O:0.999965
I'm	O	O:0.999966
also	O	O:0.999667
not	O	O:0.999999
able	O	O:0.999981
to	O	O:0.999994
use	O	O:0.999998
things	O	O:0.999775
like	O	O:0.999837
`	O	O:0.999992
dropna	B-API	B-API:0.997074
`	O	O:0.999996
to	O	O:0.999954
remove	O	O:0.999994
empty	O	O:0.999965
columns	O	O:0.999953
once	O	O:0.999974
everything	O	O:0.999929
is	O	O:0.999997
aligned	O	O:0.999126
in	O	O:0.999937
the	O	O:0.999848
Panel	O	O:0.997981
(	O	O:0.999987
this	O	O:0.999847
has	O	O:0.999946
led	O	O:0.999763
to	O	O:0.999987
several	O	O:0.999992
bugs	O	O:0.999866
when	O	O:0.999919
plotting	O	O:0.999974
summary	O	O:0.999940
statistics	O	O:0.998292
)	O	O:0.999937
.	O	O:0.999858
	
Reading	O	O:0.999602
about	O	O:0.999742
using	O	O:0.999878
pandas	O	O:0.993576
with	O	O:0.999924
higher-dimensional	O	O:0.999485
data	O	O:0.999765
has	O	O:0.999904
led	O	O:0.999930
to	O	O:0.999995
reading	O	O:0.999977
about	O	O:0.999867
the	O	O:0.999759
`	O	O:0.999831
MultiIndex	O	B-API:0.685480
`	O	O:0.999979
and	O	O:0.999995
its	O	O:0.999893
use	O	O:0.998999
.	O	O:0.998557
	
I've	O	O:0.999439
tried	O	O:0.999866
the	O	O:0.999987
examples	O	O:0.999787
given	O	O:0.999069
in	O	O:0.999997
the	O	O:0.999967
documentation	O	O:0.999273
,	O	O:0.999965
but	O	O:0.999964
I'm	O	O:0.999989
still	O	O:0.999971
a	O	O:0.999999
little	O	O:0.998362
unclear	O	O:0.999381
how	O	O:0.999938
to	O	O:0.999984
apply	O	O:0.986984
it	O	O:0.999945
to	O	O:0.999992
my	O	O:0.999998
situation	O	O:0.999518
.	O	O:0.999943
	
Any	O	O:0.999821
direction	O	O:0.997884
would	O	O:0.999947
be	O	O:0.999991
useful	O	O:0.999718
.	O	O:0.999465
	
I'd	O	O:0.999984
like	O	O:0.999957
to	O	O:0.999995
be	O	O:1.000000
able	O	O:0.999934
to	O	O:0.999896
:	O	O:0.999996
	
Once	O	O:0.999882
I	O	O:0.999996
have	O	O:0.999986
the	O	O:0.999989
frame	O	O:0.999999
given	O	O:0.999608
by	O	O:0.999998
this	O	O:0.999890
routine	O	O:0.999923
,	O	O:0.999995
I	O	O:0.999996
can	O	O:0.999990
easily	O	O:0.999981
apply	O	O:0.767866
the	O	O:0.999930
various	O	O:0.998626
operations	O	O:0.999883
suggested	O	O:0.999805
below	O	O:0.999945
-	O	O:0.999995
of	O	O:0.999992
particular	O	O:0.999750
utility	O	O:0.999543
is	O	O:0.999978
being	O	O:0.999829
able	O	O:0.999971
to	O	O:0.999971
use	O	O:0.999997
the	O	O:0.999846
`	O	O:0.999974
names	O	O:0.996060
`	O	O:0.999998
field	O	O:0.999953
when	O	O:0.999834
I	O	O:0.999987
	
How	O	O:0.999859
can	O	O:0.999930
I	O	O:0.999999
iterate	O	O:0.999889
and	O	O:0.999984
apply	O	O:0.900537
a	O	O:0.999479
function	O	O:0.999698
over	O	O:0.999939
a	O	O:0.999998
single	O	O:0.999941
level	O	O:0.999952
of	O	O:0.999994
a	O	O:0.999982
DataFrame	B-API	O:0.985549
with	O	O:0.999641
MultiIndex	O	O:0.916482
?	O	O:0.999959
	
This	O	O:0.999619
works	O	O:0.999908
for	O	O:0.999993
lists	O	O:0.992075
in	O	O:0.999908
general	O	O:0.999107
and	O	O:0.999992
I	O	O:0.999986
am	O	O:0.999980
familiar	O	O:0.997831
with	O	O:0.999836
it	O	O:0.999922
.	O	O:0.999958
	
How	O	O:0.999881
do	O	O:0.999932
I	O	O:0.999994
apply	O	O:0.782205
it	O	O:0.999720
to	O	O:0.999989
a	O	O:0.999999
pandas	O	O:0.999277
DataFrame	B-API	O:0.996735
?	O	O:0.999929
	
I	O	O:0.999936
would	O	O:0.999995
like	O	O:0.999941
to	O	O:0.999999
roll	O	O:0.975112
through	O	O:0.999941
my	O	O:0.999997
data	O	O:0.999994
by	O	O:0.999991
date	O	O:0.999382
and	O	O:0.999986
on	O	O:0.999999
each	O	O:0.999695
date	O	O:0.999958
take	O	O:0.999972
a	O	O:0.999999
time	O	O:0.999970
slice	O	O:0.999259
in	O	O:0.999992
the	O	O:0.999990
past	O	O:0.999801
apply	O	O:0.933693
a	O	O:0.999898
function	O	O:0.999233
to	O	O:0.999995
every	O	O:0.999996
time	O	O:0.999978
series	O	O:0.999989
so	O	O:0.999997
I	O	O:0.999999
get	O	O:0.999999
a	O	O:0.999992
result	O	O:0.999979
such	O	O:0.999939
as	O	O:0.999999
this	O	O:0.999769
where	O	O:0.999959
X	O	O:0.999651
is	O	O:0.999996
the	O	O:0.999986
output	O	O:0.999865
of	O	O:0.999991
the	O	O:0.999916
function	O	O:0.999969
of	O	O:0.999985
timeslice	O	O:0.997946
.	O	O:0.999964
	
#CODE	O	O:0.998453
	
Also	O	O:0.998533
is	O	O:0.999995
there	O	O:0.999974
some	O	O:0.999953
other	O	O:0.999957
way	O	O:0.999979
to	O	O:0.999981
do	O	O:0.999998
the	O	O:0.999990
following.Using	O	O:0.991933
Apply	O	O:0.997743
function	O	O:0.999890
seems	O	O:0.999928
to	O	O:0.999993
be	O	O:1.000000
very	O	O:0.999945
slow	O	O:0.998950
for	O	O:0.999990
large	O	O:0.997917
dataset	O	O:0.998094
.	O	O:0.999604
	
Similar	O	O:0.999070
to	O	O:0.999997
this	O	O:0.999994
R	O	O:0.999929
question	O	O:0.999849
,	O	O:0.999989
I'd	O	O:0.999996
like	O	O:0.999964
to	O	O:0.999998
apply	O	O:0.994398
a	O	O:0.999856
function	O	O:0.999418
to	O	O:0.999994
each	O	O:0.999994
item	O	O:0.999863
in	O	O:0.999996
a	O	O:0.999986
Series	O	O:0.996744
(	O	O:0.999984
or	O	O:0.999999
each	O	O:0.999813
row	O	O:0.999976
in	O	O:0.999992
a	O	O:0.999997
DataFrame	B-API	O:0.993918
)	O	O:0.999990
using	O	O:0.999836
Pandas	O	O:0.996290
,	O	O:0.999803
but	O	O:0.999975
want	O	O:0.999918
to	O	O:0.999991
use	O	O:1.000000
as	O	O:0.999971
an	O	O:0.999925
argument	O	O:0.999949
to	O	O:0.999996
this	O	O:0.999969
function	O	O:0.999872
the	O	O:0.999990
index	O	O:0.999928
or	O	O:0.999994
id	O	O:0.999950
of	O	O:0.999999
that	O	O:0.999559
row	O	O:0.999976
.	O	O:0.999914
	
As	O	O:0.999986
a	O	O:0.999993
trivial	O	O:0.999234
example	O	O:0.999937
,	O	O:0.999994
suppose	O	O:0.999924
one	O	O:0.999980
wants	O	O:0.999971
to	O	O:0.999998
create	O	O:0.999976
a	O	O:0.999999
list	O	O:0.999727
of	O	O:0.999999
tuples	O	O:0.999619
of	O	O:0.999997
the	O	O:0.999975
form	O	O:0.999412
[(	O	O:0.999953
index_i	O	O:0.998168
,	O	O:0.999995
value_i	O	O:0.997771
)	O	O:0.999970
,	O	O:0.999947
...,	O	O:0.980157
(	O	O:0.999960
index_n	O	O:0.986135
,	O	O:0.999995
value_n	O	O:0.996574
)]	O	O:0.999624
.	O	O:0.999674
	
Using	O	O:0.999797
a	O	O:0.999948
simple	O	O:0.999040
Python	O	O:0.999432
for	O	O:0.999982
loop	O	O:0.999646
,	O	O:0.999988
I	O	O:0.999994
can	O	O:0.999943
do	O	O:0.999933
:	O	O:0.999988
	
But	O	O:0.999943
there	O	O:0.999959
must	O	O:0.999960
be	O	O:0.999999
a	O	O:0.999999
more	O	O:0.998524
efficient	O	O:0.999858
way	O	O:0.999978
to	O	O:0.999978
do	O	O:0.999999
this	O	O:0.999913
?	O	O:0.999968
	
Perhaps	O	O:0.999897
something	O	O:0.999929
more	O	O:0.999887
Panda-ish	O	O:0.999888
like	O	O:0.999681
Series.apply	B-API	B-API:0.959852
?	O	O:0.999875
	
In	O	O:0.999930
reality	O	O:0.999445
,	O	O:0.999932
I'm	O	O:0.999941
not	O	O:0.999908
worried	O	O:0.999568
(	O	O:0.999954
in	O	O:0.999996
this	O	O:0.999977
case	O	O:0.999987
)	O	O:0.999997
about	O	O:0.999861
returning	O	O:0.999604
anything	O	O:0.999317
meaningful	O	O:0.995225
,	O	O:0.999943
but	O	O:0.999991
more	O	O:0.999569
for	O	O:0.999987
the	O	O:0.999990
efficiency	O	O:0.999727
of	O	O:0.999995
something	O	O:0.999947
like	O	O:0.999843
'	O	O:0.999990
apply	O	B-API:0.723252
'	O	O:0.999472
.	O	O:0.999589
	
Any	O	O:0.999667
ideas	O	O:0.999166
?	O	O:0.999888
	
If	O	O:0.999983
you	O	O:0.999935
use	O	O:0.999990
the	O	O:0.999622
apply	O	B-API:0.920166
method	O	O:0.999788
with	O	O:0.999965
a	O	O:0.999959
function	O	O:0.999829
what	O	O:0.999810
happens	O	O:0.999563
is	O	O:0.999997
that	O	O:0.999950
every	O	O:0.999988
item	O	O:0.999842
in	O	O:0.999963
the	O	O:0.999973
Series	O	O:0.999776
will	O	O:0.999885
be	O	O:0.999998
mapped	O	O:0.999970
with	O	O:0.999956
such	O	O:0.999981
a	O	O:0.999968
function	O	O:0.996055
.	O	O:0.999838
	
E.g.	O	O:0.996205
	
#CODE	O	O:0.998453
	
A	O	O:0.999977
more	O	O:0.999510
complex	O	O:0.999492
usage	O	O:0.999957
of	O	O:0.999955
apply	O	B-API:0.862353
would	O	O:0.999696
be	O	O:0.999996
this	O	O:0.999975
one	O	O:0.999762
:	O	O:0.999954
#CODE	O	O:0.999850
	
Following	O	O:0.998489
the	O	O:0.999926
OP's	O	O:0.999467
question	O	O:0.999779
for	O	O:0.999939
clarifications	O	O:0.994163
:	O	O:0.999957
Don't	O	O:0.999878
confuse	O	O:0.999329
Series	O	O:0.998728
(	O	O:0.999986
1D	O	O:0.999943
)	O	O:0.999981
with	O	O:0.999790
DataFrames	O	O:0.996463
(	O	O:0.999989
2D	O	O:0.999939
)	O	O:0.999926
#URL	O	O:0.999403
-	O	O:0.999996
as	O	O:0.999987
I	O	O:0.999971
don't	O	O:0.999982
really	O	O:0.999422
see	O	O:0.999978
how	O	O:0.999983
you	O	O:0.999987
can	O	O:0.999998
talk	O	O:0.999999
about	O	O:0.999997
rows	O	O:0.998734
.	O	O:0.999719
	
However	O	O:0.999910
you	O	O:0.999951
can	O	O:0.999992
include	O	O:0.999996
indices	O	O:0.999754
in	O	O:0.999998
your	O	O:0.999872
function	O	O:0.999982
by	O	O:0.999997
creating	O	O:0.999943
a	O	O:0.999964
new	O	O:0.998880
series	O	O:0.999434
(	O	O:0.999981
apply	O	O:0.685035
wont	O	O:0.999755
give	O	O:0.999748
you	O	O:0.999996
any	O	O:0.999992
information	O	O:0.999967
about	O	O:0.999946
the	O	O:0.999905
current	O	O:0.996125
index	O	O:0.997871
):	O	O:0.999951
#CODE	O	O:0.999853
	
grouped	O	O:0.999343
pandas	O	O:0.999519
DataFrames	O	O:0.998667
:	O	O:0.999968
how	O	O:0.999994
do	O	O:0.999990
I	O	O:0.999997
apply	O	O:0.918807
scipy.stats.sem	O	O:0.972662
to	O	O:0.999986
them	O	O:0.999958
?	O	O:0.999973
	
I	O	O:0.999979
know	O	O:0.999976
that	O	O:0.999834
I	O	O:0.999997
can	O	O:0.999995
apply	O	O:0.929021
numpy	O	O:0.999932
methods	O	O:0.999806
by	O	O:0.999981
doing	O	O:0.999893
the	O	O:0.999724
following	O	O:0.979762
:	O	O:0.999849
	
The	O	O:0.999939
trick	O	O:0.999915
here	O	O:0.999547
is	O	O:0.999997
to	O	O:0.999967
use	O	O:0.999998
the	O	O:0.999769
`	O	O:0.999940
axis=1	O	O:0.994220
`	O	O:0.999996
option	O	O:0.999232
in	O	O:0.999994
the	O	O:0.999976
`	O	O:0.999979
apply	O	B-API:0.973443
`	O	O:0.999979
to	O	O:0.999976
pass	O	O:0.999993
elements	O	O:0.999842
to	O	O:0.999992
the	O	O:1.000000
lambda	O	O:0.998903
function	O	O:0.999964
row	O	O:0.999988
by	O	O:0.999984
row	O	O:0.999974
,	O	O:0.999994
as	O	O:0.999997
opposed	O	O:0.999900
to	O	O:0.999998
column	O	O:0.999999
by	O	O:0.999988
column	O	O:0.999850
.	O	O:0.999863
	
Why	O	O:0.999633
map	O	B-API:0.701434
instead	O	O:0.999981
of	O	O:0.999985
apply	O	B-API:0.736477
?	O	O:0.999815
	
Also	O	O:0.999789
,	O	O:0.999995
you	O	O:0.999982
don't	O	O:0.999984
really	O	O:0.999982
need	O	O:0.999969
the	O	O:0.999991
lambda	O	O:0.999836
here	O	O:0.999406
,	O	O:0.999997
just	O	O:0.999969
feeding	O	O:0.999665
`	O	O:0.999883
np.mean	B-API	B-API:0.995475
`	O	O:0.999988
would	O	O:0.999831
work	O	O:0.999978
too	O	O:0.999950
,	O	O:0.999997
but	O	O:0.999968
I	O	O:0.999995
left	O	O:0.999814
the	O	O:0.999930
lambda	O	O:0.998882
in	O	O:0.999968
to	O	O:0.999981
illustrate	O	O:0.999990
how	O	O:0.999984
you	O	O:0.999984
would	O	O:0.999993
solve	O	O:0.999991
this	O	O:0.999993
when	O	O:0.999957
more	O	O:0.999991
general	O	O:0.999856
functions	O	O:0.999972
that	O	O:0.999826
you	O	O:0.999998
want	O	O:0.999990
to	O	O:0.999993
apply	O	O:0.937367
aren't	O	O:0.999782
working	O	O:0.997371
in	O	O:0.999996
their	O	O:0.999561
default	O	O:0.999794
ways	O	O:0.998402
.	O	O:0.999815
	
The	O	O:0.999825
`	O	O:0.999969
.apply	B-API	B-API:0.991081
`	O	O:0.999934
function	O	O:0.996709
is	O	O:0.999997
very	O	O:0.999723
powerful	O	O:0.998605
in	O	O:0.999942
Pandas	O	O:0.999491
.	O	O:0.999840
	
I	O	O:0.999968
went	O	O:0.999722
ahead	O	O:0.997326
and	O	O:0.999981
did	O	O:0.999966
a	O	O:0.999993
tiny	O	O:0.999189
benchmark	O	O:0.996588
in	O	O:0.999921
IPython	O	O:0.999009
.	O	O:0.999893
	
First	O	O:0.999084
is	O	O:0.999971
for	O	O:0.999918
`	O	O:0.999988
vtype	O	O:0.978934
`	O	O:0.999996
above	O	O:0.999463
,	O	O:1.000000
then	O	O:0.999701
for	O	O:0.999999
the	O	O:0.999982
`	O	O:0.999946
apply	O	B-API:0.967532
`	O	O:0.999945
route	O	O:0.995447
.	O	O:0.999906
	
I	O	O:0.999963
repeated	O	O:0.999834
it	O	O:0.999978
a	O	O:0.999999
dozen	O	O:0.998046
or	O	O:0.999995
so	O	O:0.999982
times	O	O:0.999807
,	O	O:0.999977
and	O	O:0.999999
this	O	O:0.999953
example	O	O:0.999736
run	O	O:0.998520
is	O	O:0.999978
pretty	O	O:0.999782
typical	O	O:0.999643
on	O	O:0.999976
my	O	O:0.999891
machine	O	O:0.999794
.	O	O:0.999877
	
I	O	O:0.999968
often	O	O:0.999911
need	O	O:0.999888
to	O	O:0.999996
apply	O	O:0.997503
a	O	O:0.999904
function	O	O:0.999279
to	O	O:0.999995
the	O	O:1.000000
groups	O	O:0.999842
of	O	O:0.999997
a	O	O:0.999997
very	O	O:0.999781
large	O	O:0.998017
`	O	O:0.999888
DataFrame	B-API	O:0.715176
`	O	O:0.999978
(	O	O:0.999941
of	O	O:0.999999
mixed	O	O:0.999411
data	O	O:0.999987
types	O	O:0.998986
)	O	O:0.999984
and	O	O:0.999977
would	O	O:0.999993
like	O	O:0.999939
to	O	O:1.000000
take	O	O:0.999998
advantage	O	O:0.999983
of	O	O:0.999997
multiple	O	O:0.999696
cores	O	O:0.999505
.	O	O:0.999911
	
Thanks	O	O:0.999476
to	O	O:0.999986
the	O	O:1.000000
help	O	O:0.999237
of	O	O:0.999998
this	O	O:0.999829
forum	O	O:0.999977
i	O	O:0.999970
managed	O	O:0.999898
to	O	O:0.999989
solve	O	O:0.999997
a	O	O:0.999997
similar	O	O:0.999600
question	O	O:0.999945
using	O	O:0.999780
groupBy	B-API	B-API:0.999359
and	O	O:0.999926
the	O	O:0.999926
apply	O	B-API:0.996178
function	O	O:0.997094
but	O	O:0.999794
i	O	O:0.999908
would	O	O:0.999983
love	O	O:0.999913
to	O	O:1.000000
also	O	O:0.999995
use	O	O:0.999991
the	O	O:0.999933
cool	O	O:0.997844
resample	O	B-API:0.864125
function	O	O:0.999349
.	O	O:0.999875
	
A	O	O:0.999980
combination	O	O:0.999860
of	O	O:0.999928
boolean	O	O:0.992718
indexing	O	O:0.999696
and	O	O:0.999988
apply	O	O:0.505180
can	O	O:0.998597
do	O	O:0.999993
the	O	O:0.999991
trick	O	O:0.999216
.	O	O:0.999906
	
Quite	O	O:0.999597
neat	O	O:0.998581
.	O	O:0.999914
	
However	O	O:0.999872
,	O	O:0.999992
I	O	O:0.999997
think	O	O:0.999983
that	O	O:0.999898
you	O	O:0.999997
can	O	O:0.999997
get	O	O:1.000000
away	O	O:0.999990
with	O	O:0.999908
`	O	O:0.999804
.max	B-API	B-API:0.998148
(	O	O:0.999984
axis=1	O	O:0.999819
)`	O	O:0.999890
instead	O	O:0.999947
of	O	O:0.999990
`	O	O:0.999965
apply	O	B-API:0.993189
(	O	O:0.999938
...	O	O:0.999241
)`	O	O:0.998510
.	O	O:0.999739
	
`	O	O:0.999928
max()	B-API	B-API:0.999481
`	O	O:0.999962
is	O	O:0.999879
ok	O	O:0.999978
too	O	O:0.999970
of	O	O:0.999996
course	O	O:0.999544
,	O	O:0.999998
i	O	O:0.999943
think	O	O:0.999804
i	O	O:0.999877
got	O	O:0.999906
biased	O	O:0.999723
towards	O	O:0.999391
`	O	O:0.999991
apply	O	B-API:0.936448
`	O	O:0.999983
by	O	O:0.999749
the	O	O:0.999993
way	O	O:0.999860
you	O	O:0.999945
asked	O	O:0.999975
the	O	O:0.999983
question	O	O:0.997877
:-)	O	O:0.999712
	
The	O	O:0.999958
problem	O	O:0.999282
in	O	O:0.999998
your	O	O:0.999960
code	O	O:0.998642
is	O	O:0.999999
that	O	O:0.999861
you	O	O:0.999999
want	O	O:0.999991
to	O	O:0.999992
apply	O	O:0.991141
the	O	O:0.999954
operation	O	O:0.999265
on	O	O:0.999998
every	O	O:0.999843
row	O	O:0.999941
.	O	O:0.999815
	
The	O	O:0.999749
way	O	O:0.999925
you've	O	O:0.999690
written	O	O:0.999474
it	O	O:0.999988
though	O	O:0.999920
takes	O	O:0.999929
the	O	O:0.999993
whole	O	O:0.997485
'	O	O:0.999970
bar	O	O:0.999697
'	O	O:0.999924
and	O	O:0.999913
'	O	O:0.999975
foo	O	O:0.999181
'	O	O:0.999993
columns	O	O:0.999425
,	O	O:0.999993
converts	O	O:0.999992
them	O	O:0.999904
to	O	O:0.999992
strings	O	O:0.999934
and	O	O:0.999992
gives	O	O:0.999982
you	O	O:0.999983
back	O	O:0.999743
one	O	O:0.999990
big	O	O:0.999764
string	O	O:0.999216
.	O	O:0.999500
	
You	O	O:0.999857
can	O	O:0.999895
write	O	O:0.999985
it	O	O:0.999993
like	O	O:0.999645
:	O	O:0.999982
#CODE	O	O:0.999819
	
Most	O	O:0.999816
operations	O	O:0.999701
in	O	O:0.999908
`	O	O:0.999997
pandas	O	O:0.997903
`	O	O:0.999998
can	O	O:0.999858
be	O	O:1.000000
accomplished	O	O:0.999829
with	O	O:0.999288
operator	O	O:0.999705
chaining	O	O:0.997411
(	O	O:0.999921
`	O	O:0.999980
groupby	B-API	B-API:0.999252
`	O	O:0.999990
,	O	O:0.999556
`	O	O:0.999996
aggregate	O	B-API:0.990130
`	O	O:0.999979
,	O	O:0.999794
`	O	O:0.999996
apply	O	B-API:0.981973
`	O	O:0.999967
,	O	O:0.999944
etc	O	O:0.999978
)	O	O:0.999976
,	O	O:0.999954
but	O	O:0.999988
the	O	O:0.999994
only	O	O:0.999694
way	O	O:0.999979
I've	O	O:0.999916
found	O	O:0.999917
to	O	O:0.999990
filter	O	O:0.999976
rows	O	O:0.999259
is	O	O:0.999982
via	O	O:0.999942
normal	O	O:0.996325
bracket	O	O:0.999077
indexing	O	O:0.998962
#CODE	O	O:0.999307
	
If	O	O:0.999961
you	O	O:0.999929
would	O	O:0.999997
like	O	O:0.999995
to	O	O:0.999999
apply	O	O:0.995903
all	O	O:0.999932
of	O	O:0.999983
the	O	O:0.999901
common	O	O:0.999702
boolean	O	O:0.999849
masks	O	O:0.999817
as	O	O:0.999998
well	O	O:0.999942
as	O	O:0.999999
a	O	O:0.999989
general	O	O:0.996147
purpose	O	O:0.999872
mask	O	O:0.944319
you	O	O:0.999982
can	O	O:0.999996
chuck	O	O:0.999983
the	O	O:0.999999
following	O	O:0.999704
in	O	O:0.999986
a	O	O:0.999994
file	O	O:0.999458
and	O	O:0.999999
then	O	O:0.999987
simply	O	O:0.999988
assign	O	O:0.999993
them	O	O:0.999896
all	O	O:0.999995
as	O	O:0.999977
follows	O	O:0.981123
:	O	O:0.999963
#CODE	O	O:0.999749
	
and	O	O:0.999978
than	O	O:0.999754
apply	O	O:0.596929
it	O	O:0.999973
by	O	O:0.999955
passing	O	O:0.999771
the	O	O:0.998773
function	O	O:0.999524
and	O	O:0.999993
the	O	O:0.999995
args	O	O:0.998549
to	O	O:0.999948
`	O	O:0.999997
agg	O	B-API:0.998849
`	O	O:0.999899
:	O	O:0.999645
#CODE	O	O:0.999908
	
Should	O	O:0.999884
I	O	O:0.999994
use	O	O:0.999996
a	O	O:0.999815
lambda	O	O:0.997031
with	O	O:0.999741
`	O	O:0.999958
apply	O	B-API:0.970695
`	O	O:0.999917
?	O	O:0.999221
	
(	O	O:0.999925
If	O	O:0.999992
so	O	O:0.999981
,	O	O:0.999997
how	O	O:0.999993
do	O	O:0.999982
I	O	O:0.999999
get	O	O:0.999996
a	O	O:0.999994
reference	O	O:0.999842
to	O	O:0.999994
the	O	O:1.000000
given	O	O:0.999582
column	O	O:0.999977
,	O	O:0.999999
as	O	O:0.999998
opposed	O	O:0.999916
to	O	O:0.999999
a	O	O:1.000000
whole	O	O:0.999588
row	O	O:0.999937
)	O	O:0.999970
.	O	O:0.999818
	
python	O	O:0.998258
pandas	O	O:0.998986
:	O	O:0.999995
apply	O	O:0.912011
a	O	O:0.999905
function	O	O:0.999362
with	O	O:0.999943
arguments	O	O:0.999906
to	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999266
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999969
apply	O	O:0.996602
a	O	O:0.999832
function	O	O:0.999461
with	O	O:0.999955
arguments	O	O:0.999908
to	O	O:0.999998
a	O	O:1.000000
series	O	O:0.999525
in	O	O:0.999976
python	O	O:0.999872
pandas	O	O:0.998155
:	O	O:0.999960
#CODE	O	O:0.999685
	
The	O	O:0.999773
documentation	O	O:0.999741
describes	O	O:0.999846
support	O	O:0.999203
for	O	O:0.999988
an	O	O:0.999230
apply	O	B-API:0.906228
method	O	O:0.995868
,	O	O:0.999834
but	O	O:0.999973
it	O	O:0.999963
doesn't	O	O:0.999884
accept	O	O:0.999892
any	O	O:0.999956
arguments	O	O:0.998403
.	O	O:0.999615
	
Is	O	O:0.999985
there	O	O:0.999985
a	O	O:0.999984
different	O	O:0.998956
method	O	O:0.999958
that	O	O:0.999914
accepts	O	O:0.999967
arguments	O	O:0.999710
?	O	O:0.999869
	
Alternatively	O	O:0.999694
,	O	O:0.999990
am	O	O:0.999989
I	O	O:0.999996
missing	O	O:0.999967
a	O	O:0.999952
simple	O	O:0.995825
workaround	O	O:0.999652
?	O	O:0.999931
	
The	O	O:0.999759
documentation	O	O:0.999125
explains	O	O:0.999961
this	O	O:0.999878
clearly	O	O:0.999240
.	O	O:0.999913
	
The	O	O:0.999230
apply	O	B-API:0.756195
method	O	O:0.999747
accept	O	O:0.999125
a	O	O:0.999995
python	O	O:0.994899
function	O	O:0.999833
which	O	O:0.999843
should	O	O:0.999989
have	O	O:0.999996
a	O	O:1.000000
single	O	O:0.998982
parameter	O	O:0.999741
.	O	O:0.999802
	
If	O	O:0.999965
you	O	O:0.999989
want	O	O:0.999981
to	O	O:0.999998
pass	O	O:0.999993
more	O	O:0.999956
parameters	O	O:0.999625
you	O	O:0.999986
should	O	O:0.999982
use	O	O:0.999980
`	O	O:0.999940
functools.partial	O	O:0.563756
`	O	O:0.999997
as	O	O:0.999973
suggested	O	O:0.999934
by	O	O:0.999951
Joel	O	O:0.999719
Cornett	O	O:0.998549
in	O	O:0.999984
his	O	O:0.999740
comment	O	O:0.999182
.	O	O:0.999846
	
For	O	O:0.999908
a	O	O:0.999982
DataFrame	B-API	O:0.914461
apply	O	B-API:0.779564
method	O	O:0.999652
accepts	O	O:0.995558
`	O	O:0.999993
args	O	O:0.983745
`	O	O:0.999987
argument	O	O:0.999654
,	O	O:0.999990
which	O	O:0.999763
is	O	O:0.999991
a	O	O:0.999992
tuple	O	O:0.999436
holding	O	O:0.999665
additional	O	O:0.999682
positional	O	O:0.999349
arguments	O	O:0.999319
or	O	O:0.999929
**	O	O:0.999996
kwds	O	O:0.999134
for	O	O:0.999985
named	O	O:0.999701
ones	O	O:0.998264
.	O	O:0.999889
	
I	O	O:0.999978
created	O	O:0.999915
an	O	O:0.999955
issue	O	O:0.999930
to	O	O:0.999984
have	O	O:0.999998
this	O	O:0.999995
also	O	O:0.999981
for	O	O:0.999997
Series.apply()	B-API	B-API:0.999425
#URL	O	O:0.996289
	
I	O	O:0.999986
want	O	O:0.999973
to	O	O:0.999960
apply	O	O:0.993586
a	O	O:0.999964
groupby	B-API	B-API:0.998181
operation	O	O:0.999900
that	O	O:0.999330
computes	O	O:0.999954
cap-weighted	O	O:0.999883
average	O	O:0.999752
return	O	O:0.998791
across	O	O:0.999900
everything	O	O:0.999889
,	O	O:0.999991
per	O	O:0.999996
each	O	O:0.999900
date	O	O:0.999293
in	O	O:0.999995
the	O	O:0.999973
"	O	O:0.999973
yearmonth	O	O:0.995527
"	O	O:0.999977
column	O	O:0.998784
.	O	O:0.999893
	
This	O	O:0.999779
still	O	O:0.999874
requires	O	O:0.999942
me	O	O:0.999967
to	O	O:0.999997
save	O	O:0.999957
out	O	O:0.999974
the	O	O:0.999984
groupby	B-API	B-API:0.983918
computation	O	O:0.999862
,	O	O:0.999989
rather	O	O:0.999965
than	O	O:0.999849
having	O	O:0.999754
the	O	O:0.999994
assignment	O	O:0.999899
directly	O	O:0.999745
on	O	O:0.999980
the	O	O:0.999982
LHS	O	O:0.999897
on	O	O:0.999980
the	O	O:0.999994
line	O	O:0.999979
where	O	O:0.999973
I	O	O:0.999995
perform	O	O:0.999878
the	O	O:0.999855
groupby	B-API	B-API:0.990814
operation	O	O:0.998853
.	O	O:0.999691
	
Apply	O	O:0.998963
might	O	O:0.999884
be	O	O:0.999996
a	O	O:0.999999
bit	O	O:0.998754
better	O	O:0.999867
than	O	O:0.999783
the	O	O:0.999991
loop	O	O:0.999738
in	O	O:0.999989
my	O	O:0.999996
hack	O	O:0.999926
at	O	O:0.999995
the	O	O:0.999998
bottom	O	O:0.999730
of	O	O:0.999983
the	O	O:0.999923
question	O	O:0.999576
,	O	O:0.999967
but	O	O:0.999994
they	O	O:0.999956
are	O	O:0.999998
basically	O	O:0.999974
the	O	O:0.999994
same	O	O:0.999816
idea	O	O:0.999122
.	O	O:0.999934
	
While	O	O:0.999656
I'm	O	O:0.999969
still	O	O:0.999961
exploring	O	O:0.999987
all	O	O:0.999967
of	O	O:0.999989
the	O	O:0.999965
incredibly	O	O:0.999870
smart	O	O:0.999756
ways	O	O:0.999927
that	O	O:0.999909
`	O	O:0.999999
apply	O	B-API:0.959936
`	O	O:0.999928
concatenates	O	O:0.995177
the	O	O:0.999993
pieces	O	O:0.997409
it's	O	O:0.999901
given	O	O:0.999748
,	O	O:0.999998
here's	O	O:0.999950
another	O	O:0.999920
way	O	O:0.999987
to	O	O:0.999987
add	O	O:0.999999
a	O	O:0.999997
new	O	O:0.999906
column	O	O:0.999891
in	O	O:0.999990
the	O	O:0.999993
parent	O	O:0.998851
after	O	O:0.999966
a	O	O:0.999981
groupby	B-API	B-API:0.997452
operation	O	O:0.999036
.	O	O:0.999559
	
#CODE	O	O:0.998453
	
Is	O	O:0.999986
there	O	O:0.999969
an	O	O:0.999992
efficient	O	O:0.999897
way	O	O:0.999976
to	O	O:0.999978
apply	O	O:0.989470
this	O	O:0.999893
disaggregation	O	O:0.999271
map	O	O:0.690035
to	O	O:0.999991
get	O	O:1.000000
a	O	O:0.999997
new	O	O:0.999953
dataframe	B-API	O:0.999595
at	O	O:0.999997
a	O	O:0.999993
State	O	O:0.998996
level	O	O:0.998835
?	O	O:0.999912
	
There	O	O:0.999657
might	O	O:0.999964
be	O	O:0.999999
a	O	O:0.999998
slick	O	O:0.997511
vectorized	O	O:0.999849
way	O	O:0.999962
to	O	O:0.999958
do	O	O:0.999999
this	O	O:0.999845
,	O	O:0.999980
but	O	O:0.999974
I'd	O	O:0.999996
just	O	O:0.999953
apply	O	O:0.840939
the	O	O:0.999785
obvious	O	O:0.999410
per-entry	O	O:0.998962
function	O	O:0.999929
to	O	O:0.999997
the	O	O:0.999999
values	O	O:0.999210
and	O	O:0.999997
get	O	O:0.999995
on	O	O:0.999987
with	O	O:0.999991
my	O	O:0.999948
day	O	O:0.999785
:	O	O:0.999963
#CODE	O	O:0.999793
	
The	O	O:0.999604
function	O	O:0.999900
to	O	O:0.999990
apply	O	O:0.817708
is	O	O:0.999907
like	O	O:0.992963
:	O	O:0.999979
#CODE	O	O:0.999749
	
I	O	O:0.999968
don't	O	O:0.999983
suppose	O	O:0.999808
you	O	O:0.999994
have	O	O:0.999986
nny	O	O:0.999990
ideas	O	O:0.999954
on	O	O:0.999990
the	O	O:0.999980
second	O	O:0.999876
part	O	O:0.999867
,	O	O:0.999996
viz	O	O:0.999982
referencing	O	O:0.999967
neighbouring	O	O:0.999912
rows	O	O:0.999063
in	O	O:0.999966
the	O	O:0.999999
dataframe	B-API	O:0.999473
from	O	O:0.999866
within	O	O:0.999926
the	O	O:0.999965
map	O	B-API:0.919622
/	O	O:0.999974
apply	O	B-API:0.827315
function	O	O:0.999088
?	O	O:0.999755
	
The	O	O:0.999958
exact	O	O:0.999904
code	O	O:0.999873
will	O	O:0.999981
vary	O	O:0.999900
for	O	O:0.999999
each	O	O:0.999727
of	O	O:0.999990
the	O	O:0.999995
columns	O	O:0.999948
you	O	O:0.999994
want	O	O:0.999990
to	O	O:0.999995
do	O	O:0.999997
,	O	O:0.999985
but	O	O:0.999874
it's	O	O:0.999856
likely	O	O:0.999731
you'll	O	O:0.999974
want	O	O:0.999937
to	O	O:0.999980
use	O	O:0.999999
the	O	O:0.999838
`	O	O:0.999833
map	O	B-API:0.996065
`	O	O:0.999977
and	O	O:0.999838
`	O	O:0.999994
apply	O	B-API:0.985573
`	O	O:0.999860
functions	O	O:0.994200
.	O	O:0.999898
	
In	O	O:0.999991
some	O	O:0.999950
cases	O	O:0.999932
you	O	O:0.999980
can	O	O:0.999998
just	O	O:0.999999
compute	O	O:0.999962
using	O	O:0.999978
the	O	O:0.999982
existing	O	O:0.999800
columns	O	O:0.999882
directly	O	O:0.999867
,	O	O:0.999997
since	O	O:0.999963
the	O	O:0.999993
columns	O	O:0.999922
are	O	O:0.999976
Pandas	O	O:0.999830
Series	O	O:0.999886
objects	O	O:0.999689
,	O	O:0.999988
which	O	O:0.999987
also	O	O:0.999983
work	O	O:0.999991
as	O	O:0.999995
Numpy	O	O:0.999751
arrays	O	O:0.999690
,	O	O:0.999988
which	O	O:0.999965
automatically	O	O:0.999837
work	O	O:0.999943
element-wise	O	O:0.999729
for	O	O:0.999960
usual	O	O:0.999831
mathematical	O	O:0.994374
operations	O	O:0.998418
.	O	O:0.999609
	
#CODE	O	O:0.998453
	
If	O	O:0.999971
you	O	O:0.999991
need	O	O:0.999991
to	O	O:0.999998
use	O	O:0.999999
operations	O	O:0.999619
like	O	O:0.999296
max	O	O:0.781925
and	O	O:0.999969
min	O	O:0.920665
within	O	O:0.999899
a	O	O:0.999988
row	O	O:0.999767
,	O	O:0.999997
you	O	O:0.999989
can	O	O:0.999974
use	O	O:0.999999
`	O	O:0.999989
apply	O	B-API:0.980232
`	O	O:0.999970
with	O	O:0.992897
`	O	O:0.999990
axis=1	O	O:0.994625
`	O	O:0.999995
to	O	O:0.999958
apply	O	O:0.992588
any	O	O:0.999398
function	O	O:0.999832
you	O	O:0.999993
like	O	O:0.999980
to	O	O:1.000000
each	O	O:0.999977
row	O	O:0.999888
.	O	O:0.999915
	
Here's	O	O:0.999640
an	O	O:0.999972
example	O	O:0.999949
that	O	O:0.999854
computes	O	O:0.999841
`	O	O:0.999990
min	O	B-API:0.891567
(	O	O:0.999974
A	O	O:0.999990
,	O	O:0.999991
B	O	O:0.999885
)	O	O:0.999958
-C	O	O:0.999778
`	O	O:0.999991
,	O	O:0.999907
which	O	O:0.999980
seems	O	O:0.999947
to	O	O:0.999998
be	O	O:1.000000
like	O	O:0.999997
your	O	O:0.999860
"	O	O:0.999984
lower	O	O:0.999782
wick	O	O:0.986569
"	O	O:0.999750
:	O	O:0.999913
#CODE	O	O:0.999774
	
For	O	O:0.999932
the	O	O:0.999948
second	O	O:0.999687
part	O	O:0.999888
,	O	O:0.999994
I	O	O:0.999995
would	O	O:0.999934
recommend	O	O:0.999833
introducing	O	O:0.999988
a	O	O:0.999959
column	O	O:0.999532
indicating	O	O:0.999785
the	O	O:0.999952
pattern	O	O:0.999167
for	O	O:0.999994
each	O	O:0.999454
row	O	O:0.999680
and	O	O:0.999992
writing	O	O:0.999950
a	O	O:0.999955
family	O	O:0.999914
of	O	O:0.999984
functions	O	O:0.999574
which	O	O:0.999986
deal	O	O:0.999677
with	O	O:0.999983
each	O	O:0.998595
pattern	O	O:0.999624
.	O	O:0.999923
	
Then	O	O:0.998584
groupby	B-API	B-API:0.909211
the	O	O:0.999951
pattern	O	O:0.998045
and	O	O:0.999993
apply	O	O:0.893659
the	O	O:0.999868
appropriate	O	O:0.998936
function	O	O:0.999910
to	O	O:0.999995
each	O	O:0.999991
group	O	O:0.997218
.	O	O:0.999937
	
Note	O	O:0.999966
that	O	O:0.999976
a	O	O:0.999999
simple	O	O:0.999240
`	O	O:0.999984
apply	O	B-API:0.984699
`	O	O:0.999845
will	O	O:0.997776
not	O	O:0.999998
work	O	O:0.999972
here	O	O:0.999870
,	O	O:0.999997
since	O	O:0.999937
it	O	O:0.999972
won't	O	O:0.999994
know	O	O:0.999959
how	O	O:0.999992
to	O	O:0.999997
make	O	O:0.999999
sense	O	O:0.999971
of	O	O:0.999996
the	O	O:0.999989
possibly	O	O:0.999990
differently-sized	O	O:0.999489
result	O	O:0.999933
arrays	O	O:0.999881
for	O	O:0.999982
each	O	O:0.999286
group	O	O:0.991364
.	O	O:0.999901
	
What	O	O:0.999735
problems	O	O:0.999816
are	O	O:0.999993
you	O	O:0.999986
running	O	O:0.999927
into	O	O:0.999634
with	O	O:0.999907
`	O	O:0.999974
apply	O	B-API:0.971801
`	O	O:0.999913
?	O	O:0.999221
	
It	O	O:0.999908
works	O	O:0.999677
for	O	O:0.999995
this	O	O:0.999696
toy	O	O:0.999925
example	O	O:0.999906
here	O	O:0.998725
and	O	O:0.999996
the	O	O:0.999997
group	O	O:0.991147
lengths	O	O:0.998787
are	O	O:0.999949
different	O	O:0.999389
:	O	O:0.999911
#CODE	O	O:0.999781
	
Python	O	O:0.997521
Pandas	O	O:0.999349
:	O	O:0.999942
How	O	O:0.999956
to	O	O:0.999997
broadcast	O	O:0.999994
an	O	O:0.999993
operation	O	O:0.999968
using	O	O:0.999957
apply	O	B-API:0.734281
without	O	O:0.995180
writing	O	O:0.998871
a	O	O:0.999950
secondary	O	O:0.992033
function	O	O:0.999730
	
It	O	O:0.999868
seems	O	O:0.999964
logical	O	O:0.999477
to	O	O:0.999966
use	O	O:0.999993
the	O	O:0.999849
`	O	O:0.999952
apply	O	B-API:0.972063
`	O	O:0.999882
function	O	O:0.996989
for	O	O:0.999996
this	O	O:0.998964
,	O	O:0.999940
but	O	O:0.999954
it	O	O:0.999962
doesn't	O	O:0.999967
work	O	O:0.999977
like	O	O:0.999961
expected	O	O:0.999933
.	O	O:0.999910
	
It	O	O:0.999877
does	O	O:0.999769
not	O	O:0.999995
even	O	O:0.999992
seem	O	O:0.999984
to	O	O:0.999997
be	O	O:1.000000
consistent	O	O:0.999884
with	O	O:0.999901
other	O	O:0.999961
uses	O	O:0.999761
of	O	O:0.999937
`	O	O:0.999957
apply	O	B-API:0.973306
`	O	O:0.999846
.	O	O:0.997815
	
See	O	O:0.999606
below	O	O:0.998491
.	O	O:0.999872
	
#CODE	O	O:0.998453
	
Based	O	O:0.998642
on	O	O:0.999992
this	O	O:0.999880
,	O	O:0.999997
it	O	O:0.999978
appears	O	O:0.999976
that	O	O:0.999899
`	O	O:0.999996
apply	O	B-API:0.969291
`	O	O:0.999949
does	O	O:0.996054
nothing	O	O:0.999872
but	O	O:0.999976
perform	O	O:0.999326
the	O	O:0.999984
NumPy	O	O:0.999934
equivalent	O	O:0.999539
of	O	O:0.999980
whatever	O	O:0.999226
is	O	O:0.999987
called	O	O:0.998991
inside	O	O:0.999656
.	O	O:0.999395
	
That	O	O:0.998502
is	O	O:0.999983
,	O	O:0.999982
`	O	O:0.999992
apply	O	B-API:0.987796
`	O	O:0.999981
seems	O	O:0.999580
to	O	O:0.999994
execute	O	O:0.999979
the	O	O:0.999991
same	O	O:0.999981
thing	O	O:0.999973
as	O	O:0.999986
`	O	O:0.999967
arr	O	O:0.998508
+	O	O:0.999967
"	O	O:0.999952
cat	O	O:0.999583
"`	O	O:0.999966
in	O	O:0.999922
the	O	O:0.999989
first	O	O:0.999679
example	O	O:0.999485
.	O	O:0.999858
	
And	O	O:0.999902
if	O	O:0.999975
NumPy	O	O:0.999803
happens	O	O:0.999455
to	O	O:0.999976
broadcast	O	O:0.999979
that	O	O:0.999955
,	O	O:0.999999
then	O	O:0.999940
it	O	O:0.999999
will	O	O:0.999975
work	O	O:0.999940
.	O	O:0.999980
	
If	O	O:0.999915
not	O	O:0.999958
,	O	O:0.999999
then	O	O:0.999834
it	O	O:0.999995
won't	O	O:0.999941
.	O	O:0.999972
	
But	O	O:0.999967
this	O	O:0.999945
seems	O	O:0.999971
to	O	O:0.999998
break	O	O:0.999960
from	O	O:0.999962
what	O	O:0.999829
`	O	O:0.999998
apply	O	B-API:0.936436
`	O	O:0.999981
promises	O	O:0.995348
in	O	O:0.999989
the	O	O:0.999966
docs	O	O:0.999122
.	O	O:0.999860
	
Below	O	O:0.996637
is	O	O:0.999982
the	O	O:0.999977
quotation	O	O:0.998951
for	O	O:0.999972
what	O	O:0.999625
pandas.Series.apply	B-API	O:0.696168
should	O	O:0.999767
expect	O	O:0.999756
:	O	O:0.999982
	
Is	O	O:0.999980
there	O	O:0.999986
some	O	O:0.999975
way	O	O:0.999989
of	O	O:0.999993
using	O	O:0.999811
`	O	O:0.999962
apply	O	B-API:0.997110
`	O	O:0.999987
that	O	O:0.998939
I	O	O:0.999999
am	O	O:0.999998
missing	O	O:0.997599
here	O	O:0.999350
?	O	O:0.999943
	
and	O	O:0.999953
I	O	O:0.999984
verified	O	O:0.999582
that	O	O:0.999866
this	O	O:0.999953
version	O	O:0.999982
does	O	O:0.999934
work	O	O:0.999918
with	O	O:0.999989
Pandas	O	O:0.999881
`	O	O:0.999988
apply	O	B-API:0.991752
`	O	O:0.999874
.	O	O:0.997991
	
But	O	O:0.999984
this	O	O:0.999686
is	O	O:0.999987
beside	O	O:0.999716
the	O	O:0.999948
point	O	O:0.998236
.	O	O:0.999823
	
It	O	O:0.999890
would	O	O:0.999966
be	O	O:0.999998
easier	O	O:0.999980
to	O	O:0.999969
write	O	O:0.999995
something	O	O:0.999930
that	O	O:0.999986
operated	O	O:0.999994
externally	O	O:0.999929
on	O	O:0.999995
top	O	O:0.999969
of	O	O:0.999997
a	O	O:0.999938
Series	O	O:0.998848
object	O	O:0.999961
than	O	O:0.999913
to	O	O:0.999998
have	O	O:0.999998
to	O	O:0.999999
constantly	O	O:0.999995
write	O	O:0.999925
wrappers	O	O:0.999942
that	O	O:0.999851
use	O	O:0.999993
list	O	O:0.998707
comprehensions	O	O:0.999616
to	O	O:0.999998
effectively	O	O:0.999996
loop	O	O:0.999978
over	O	O:0.999845
the	O	O:0.999996
contents	O	O:0.999777
of	O	O:0.999982
the	O	O:0.999943
Series	O	O:0.999620
.	O	O:0.999815
	
Isn't	O	O:0.999936
this	O	O:0.999909
specifically	O	O:0.999969
what	O	O:0.999913
`	O	O:0.999994
apply	O	B-API:0.952071
`	O	O:0.999853
is	O	O:0.999875
supposed	O	O:0.999950
to	O	O:0.999996
abstract	O	O:0.999996
away	O	O:0.999961
from	O	O:0.999965
the	O	O:0.999983
user	O	O:0.998845
?	O	O:0.999844
	
and	O	O:0.999889
use	O	O:0.999983
this	O	O:0.996723
in	O	O:0.999961
`	O	O:0.999985
apply	O	B-API:0.991721
`	O	O:0.999551
:	O	O:0.999300
#CODE	O	O:0.999898
	
This	O	O:0.999253
works	O	O:0.999540
,	O	O:0.999988
but	O	O:0.999966
I	O	O:0.999981
consider	O	O:0.999950
it	O	O:0.999988
a	O	O:0.999996
workaround	O	O:0.999825
as	O	O:0.999995
well	O	O:0.999654
,	O	O:0.999996
since	O	O:0.999888
it	O	O:0.999977
doesn't	O	O:0.999992
address	O	O:0.999847
the	O	O:0.999987
fact	O	O:0.999777
that	O	O:0.999864
`	O	O:0.999997
apply	O	B-API:0.962013
`	O	O:0.999858
isn't	O	O:0.998766
working	O	O:0.999840
as	O	O:0.999966
promised	O	O:0.996938
.	O	O:0.999839
	
Can	O	O:0.999802
you	O	O:0.999968
verify	O	O:0.999964
that	O	O:0.999968
`	O	O:0.999990
map	O	B-API:0.977412
`	O	O:0.999993
will	O	O:0.999887
work	O	O:0.999984
in	O	O:0.999998
all	O	O:0.999991
the	O	O:0.999997
same	O	O:0.999887
situations	O	O:0.999931
where	O	O:0.999951
`	O	O:0.999994
apply	O	B-API:0.960670
`	O	O:0.999961
will	O	O:0.998456
work	O	O:0.999956
?	O	O:0.999987
	
I	O	O:0.999988
also	O	O:0.999972
don't	O	O:0.999974
like	O	O:0.999920
the	O	O:0.999996
inconsistency	O	O:0.999555
in	O	O:0.999985
going	O	O:0.999795
from	O	O:0.999897
`	O	O:0.999931
map	O	B-API:0.972502
`	O	O:0.999994
for	O	O:0.999967
a	O	O:0.999991
Series	O	O:0.998254
to	O	O:0.999969
`	O	O:0.999999
applymap	B-API	B-API:0.993346
`	O	O:0.999991
for	O	O:0.999899
a	O	O:0.999978
DataFrame	B-API	O:0.875675
.	O	O:0.999784
	
That	O	O:0.999361
contradicts	O	O:0.999713
the	O	O:0.999991
docs	O	O:0.999439
for	O	O:0.999962
`	O	O:0.999981
apply	O	B-API:0.987271
`	O	O:0.999969
,	O	O:0.999938
as	O	O:0.999999
well	O	O:0.999826
as	O	O:0.999997
its	O	O:0.999782
0.8.1	O	O:0.999784
behavior	O	O:0.999720
,	O	O:0.999981
in	O	O:0.999814
which	O	O:0.999976
it	O	O:0.999990
successfully	O	O:0.999909
performs	O	O:0.999796
the	O	O:0.999977
elementwise	O	O:0.999761
version	O	O:0.999889
of	O	O:0.999993
my	O	O:0.999988
example	O	O:0.999965
above	O	O:0.999891
,	O	O:0.999990
whereas	O	O:0.999452
version	O	O:0.999320
0.7.3	O	O:0.999948
seems	O	O:0.999977
to	O	O:0.999990
use	O	O:0.999998
the	O	O:0.999851
logic	O	O:0.999675
you	O	O:0.999961
describe	O	O:0.999615
.	O	O:0.999957
	
Since	O	O:0.999569
`	O	O:0.999986
apply	O	B-API:0.977063
`	O	O:0.999927
should	O	O:0.999629
work	O	O:0.999879
in	O	O:0.999995
0.7.3	O	O:0.999905
as	O	O:0.999985
it	O	O:0.999990
does	O	O:0.999397
in	O	O:0.999965
0.8.1	O	O:0.999253
(	O	O:0.999995
according	O	O:0.999792
to	O	O:0.999973
the	O	O:0.999999
docs	O	O:0.999766
)	O	O:0.999983
,	O	O:0.999993
that's	O	O:0.999976
why	O	O:0.999976
I	O	O:0.999995
think	O	O:0.999952
it's	O	O:0.999709
a	O	O:0.999961
workaround	O	O:0.998225
.	O	O:0.999846
	
`	O	O:0.999868
map	O	B-API:0.992631
`	O	O:0.999949
is	O	O:0.999955
fine	O	O:0.999144
,	O	O:0.999985
but	O	O:0.999954
`	O	O:0.999985
apply	O	B-API:0.982251
`	O	O:0.999924
should	O	O:0.998674
work	O	O:0.999924
.	O	O:0.999974
	
I'm	O	O:0.999835
on	O	O:0.999968
github	O	O:0.999464
master	O	O:0.999175
and	O	O:0.999948
it	O	O:0.999964
does	O	O:0.999024
not	O	O:0.999991
work	O	O:0.999941
;	O	O:0.999995
it	O	O:0.999980
probably	O	O:0.999845
worked	O	O:0.999570
in	O	O:0.999959
0.8.1	O	O:0.999937
by	O	O:0.999961
accident	O	O:0.999407
.	O	O:0.999584
	
`	O	O:0.999959
apply	O	B-API:0.981746
`	O	O:0.999856
is	O	O:0.999853
designed	O	O:0.999719
so	O	O:0.999994
that	O	O:0.999950
you	O	O:0.999996
can	O	O:0.999996
apply	O	O:0.993656
a	O	O:0.999982
ufunc	O	O:0.964287
and	O	O:0.999995
get	O	O:0.999976
back	O	O:0.999722
a	O	O:0.999996
Series	O	O:0.999058
with	O	O:0.999643
the	O	O:0.999982
index	O	O:0.999846
intact	O	O:0.998742
.	O	O:0.999957
	
Take	O	O:0.999936
a	O	O:0.999996
look	O	O:0.998808
at	O	O:0.999994
the	O	O:0.999970
source	O	O:0.999543
code	O	O:0.999254
,	O	O:0.999993
it	O	O:0.999996
tries	O	O:0.999720
to	O	O:0.999993
call	O	O:0.999657
func	O	O:0.984770
(	O	O:0.999940
self	O	O:0.998766
)	O	O:0.999932
and	O	O:0.999950
wraps	O	O:0.999953
that	O	O:0.999566
in	O	O:0.999998
a	O	O:0.999995
try	O	O:0.999456
/	O	O:0.999956
except	O	O:0.999841
block	O	O:0.999598
and	O	O:0.999998
then	O	O:0.999819
calls	O	O:0.999954
map_infer	O	O:0.999636
in	O	O:0.999725
the	O	O:0.999964
except	O	O:0.999519
.	O	O:0.999861
	
In	O	O:0.999994
your	O	O:0.999946
example	O	O:0.999852
,	O	O:0.999998
the	O	O:0.999966
function	O	O:0.999840
you	O	O:0.999968
gave	O	O:0.999947
*	O	O:0.999998
can	O	O:0.999935
*	O	O:1.000000
take	O	O:0.999975
a	O	O:0.999991
Series	O	O:0.997676
and	O	O:0.999989
return	O	O:0.999599
a	O	O:0.999554
Series	O	O:0.990805
but	O	O:0.999925
doesn't	O	O:0.999853
do	O	O:0.999993
element-wise	O	O:0.999960
operations	O	O:0.999709
so	O	O:0.999986
the	O	O:0.999993
code	O	O:0.999562
cannot	O	O:0.999989
know	O	O:0.999989
to	O	O:0.999996
trigger	O	O:0.999934
the	O	O:0.999975
element-wise	O	O:0.999201
case	O	O:0.999641
.	O	O:0.999957
	
To	O	O:0.999961
be	O	O:0.999990
explicit	O	O:0.999971
that	O	O:0.999903
you	O	O:0.999996
want	O	O:0.999987
the	O	O:0.999995
input	O	O:0.999748
function	O	O:0.999965
to	O	O:0.999993
be	O	O:1.000000
applied	O	O:0.999950
element-wise	O	O:0.999083
,	O	O:0.999989
you	O	O:0.999994
have	O	O:0.999989
to	O	O:0.999998
use	O	O:0.999996
`	O	O:0.999923
Series.map	B-API	B-API:0.999800
`	O	O:0.999973
.	O	O:0.998998
	
Though	O	O:0.999865
I	O	O:0.999996
do	O	O:0.999996
agree	O	O:0.999673
with	O	O:0.999834
you	O	O:0.999942
the	O	O:0.999995
docstring	O	O:0.999901
for	O	O:0.999968
apply	O	B-API:0.935047
is	O	O:0.999923
very	O	O:0.998492
unclear	O	O:0.999649
about	O	O:0.999922
this	O	O:0.999282
aspect	O	O:0.988503
.	O	O:0.999788
	
We	O	O:0.999963
can	O	O:0.999915
improve	O	O:0.999977
the	O	O:0.999976
documentation	O	O:0.999674
for	O	O:0.999965
apply	O	B-API:0.867717
.	O	O:0.997878
	
In	O	O:0.999947
fact	O	O:0.999898
,	O	O:0.999991
by	O	O:0.999856
saying	O	O:0.999854
that	O	O:0.999623
`	O	O:0.999997
apply	O	B-API:0.904419
`	O	O:0.999962
can	O	O:0.999854
take	O	O:0.999999
any	O	O:0.999956
function	O	O:0.999982
that	O	O:0.999932
expect	O	O:0.999996
a	O	O:0.999995
*	O	O:0.999995
single	O	O:0.999254
*	O	O:0.999981
argument	O	O:0.999811
,	O	O:0.999893
it's	O	O:0.999688
not	O	O:0.999991
just	O	O:0.999967
unclear	O	O:0.999711
,	O	O:0.999918
but	O	O:0.999964
plain	O	O:0.999434
misleading	O	O:0.999304
.	O	O:0.999772
	
I'm	O	O:0.999931
glad	O	O:0.999614
you	O	O:0.999988
confirmed	O	O:0.999977
by	O	O:0.999996
hunch	O	O:0.999891
about	O	O:0.999904
that	O	O:0.999636
try-except	O	O:0.996761
block	O	O:0.999784
.	O	O:0.999861
	
So	O	O:0.999966
to	O	O:0.999996
be	O	O:1.000000
clear	O	O:0.999914
,	O	O:0.999986
we	O	O:0.999989
should	O	O:0.999884
use	O	O:0.999984
`	O	O:0.999979
apply	O	B-API:0.981684
`	O	O:0.999982
whenever	O	O:0.999323
we	O	O:0.999999
have	O	O:0.999993
a	O	O:0.999997
vectorized	O	O:0.997941
/	O	O:0.999944
ufunc	O	O:0.989161
already	O	O:0.999643
,	O	O:0.999934
and	O	O:0.999987
`	O	O:0.999967
map	O	B-API:0.995531
`	O	O:0.999999
when	O	O:0.999046
we	O	O:0.999999
literally	O	O:0.999994
want	O	O:0.999951
to	O	O:0.999987
apply	O	O:0.976426
an	O	O:0.999978
elementwise	O	O:0.999551
operation	O	O:0.999907
to	O	O:0.999997
a	O	O:1.000000
series	O	O:0.999506
?	O	O:0.999966
	
Yup	O	O:0.999262
,	O	O:0.999989
that's	O	O:0.999967
exactly	O	O:0.999976
right	O	O:0.999965
on	O	O:0.999986
`	O	O:0.999994
apply	O	B-API:0.928963
`	O	O:0.999963
vs	O	O:0.997996
`	O	O:0.999967
map	O	B-API:0.995914
`	O	O:0.999971
.	O	O:0.999439
	
The	O	O:0.999825
inner	O	O:0.998161
syntax	O	O:0.998771
`	O	O:0.999807
(	O	O:0.999962
df	O	O:0.999923
!	O	O:0.999960
=0	O	O:0.999847
)	O	O:0.999982
.any()	B-API	B-API:0.998876
`	O	O:0.999953
doesn't	O	O:0.999479
work	O	O:0.999853
.	O	O:0.999971
	
A	O	O:0.999888
DataFrame	B-API	O:0.981385
object	O	O:0.999745
doesn't	O	O:0.999956
have	O	O:0.999972
the	O	O:0.999992
`	O	O:0.999994
any	O	O:0.999395
`	O	O:0.999971
function	O	O:0.999731
,	O	O:0.999998
at	O	O:0.999989
least	O	O:0.999640
not	O	O:0.999936
in	O	O:0.999949
0.7.3	O	O:0.999241
.	O	O:0.999861
	
You'd	O	O:0.999942
have	O	O:0.999965
to	O	O:0.999990
map	O	O:0.983931
that	O	O:0.999959
to	O	O:0.999999
the	O	O:1.000000
columns	O	O:0.999956
using	O	O:0.999933
`	O	O:0.999928
map	O	B-API:0.994953
`	O	O:0.999989
or	O	O:0.999724
`	O	O:0.999994
apply	O	B-API:0.922965
`	O	O:0.999939
or	O	O:0.999938
something	O	O:0.999812
.	O	O:0.999874
	
How	O	O:0.999884
to	O	O:0.999967
groupby	B-API	B-API:0.639543
the	O	O:0.999990
first	O	O:0.998281
level	O	O:0.999364
index	O	O:0.999841
and	O	O:0.999995
apply	O	O:0.578968
function	O	O:0.998399
to	O	O:0.999961
the	O	O:0.999995
second	O	O:0.999704
index	O	O:0.999732
in	O	O:0.999977
Pandas	O	O:0.999854
	
And	O	O:0.999900
I	O	O:0.999996
want	O	O:0.999982
to	O	O:0.999963
apply	O	O:0.996012
a	O	O:0.999809
function	O	O:0.997390
`	O	O:0.999991
func	O	O:0.883037
`	O	O:0.999955
(	O	O:0.999032
exp	O	B-API:0.649069
:	O	O:0.999925
`'	O	O:0.999939
lambda	O	O:0.999408
x	O	O:0.999470
:	O	O:0.999970
x*10	O	O:0.999878
'`)	O	O:0.999966
to	O	O:0.999942
`	O	O:0.999999
second	O	O:0.995146
`	O	O:0.999996
,	O	O:0.999977
somewhat	O	O:0.999853
like	O	O:0.998942
:	O	O:0.999975
#CODE	O	O:0.999857
	
This	O	O:0.999744
way	O	O:0.999938
,	O	O:0.999967
the	O	O:0.999978
index	O	O:0.999918
column	O	O:0.998333
is	O	O:0.999996
not	O	O:0.999961
dropped	O	O:0.998808
and	O	O:0.999991
still	O	O:0.999948
accessible	O	O:0.999449
for	O	O:0.999996
your	O	O:0.999329
`	O	O:0.999957
apply	O	B-API:0.973237
`	O	O:0.999848
.	O	O:0.998019
	
PS	O	O:0.999040
:	O	O:0.999946
but	O	O:0.999988
if	O	O:0.999996
you	O	O:0.999991
really	O	O:0.999980
just	O	O:0.999975
want	O	O:0.999983
the	O	O:0.999991
last	O	O:0.999807
column	O	O:0.999894
,	O	O:0.999990
`	O	O:0.999995
apply	O	B-API:0.981730
`	O	O:0.999948
would	O	O:0.998837
suffice	O	O:0.999813
:	O	O:0.999990
#CODE	O	O:0.999762
	
(	O	O:0.999918
I	O	O:0.999992
think	O	O:0.999962
it	O	O:0.999953
can	O	O:0.999985
be	O	O:1.000000
some	O	O:0.999983
problem	O	O:0.999784
with	O	O:0.999763
`	O	O:0.999987
lambda	O	O:0.994617
`	O	O:0.999993
When	O	O:0.998860
I	O	O:0.999999
want	O	O:0.999987
to	O	O:0.999938
apply	O	O:0.993385
my	O	O:0.999709
function	O	O:0.999806
to	O	O:0.999996
the	O	O:1.000000
column	O	O:0.999896
I	O	O:0.999999
have	O	O:0.999997
an	O	O:0.999942
error	O	O:0.999585
:	O	O:0.999906
`	O	O:0.999954
TypeError	O	O:0.999169
:	O	O:0.999997
only	O	O:0.999889
length-1	O	O:0.999883
arrays	O	O:0.999800
can	O	O:0.999952
be	O	O:1.000000
converted	O	O:0.999910
to	O	O:0.999986
Python	O	O:0.999993
scalars	O	O:0.999620
`)	O	O:0.999931
	
On	O	O:0.999973
top	O	O:0.999947
of	O	O:0.999998
a	O	O:0.999988
dodgy	O	O:0.999512
converter	O	O:0.946639
,	O	O:0.999979
i	O	O:0.999987
think	O	O:0.999961
you	O	O:0.999984
apply	O	O:0.877243
the	O	O:0.999970
converter	O	O:0.821550
to	O	O:0.999993
the	O	O:1.000000
wrong	O	O:0.999801
column	O	O:0.998920
(	O	O:0.999999
look	O	O:0.999889
at	O	O:0.999996
the	O	O:0.999985
exception	O	O:0.999812
you	O	O:0.999983
get	O	O:0.999962
)	O	O:0.999994
.	O	O:0.999890
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999992
`	O	O:0.999975
apply	O	B-API:0.982742
`	O	O:0.999854
for	O	O:0.999900
this	O	O:0.999809
,	O	O:0.999934
and	O	O:0.999987
it's	O	O:0.999946
a	O	O:0.999982
bit	O	O:0.998601
neater	O	O:0.996804
:	O	O:0.999925
#CODE	O	O:0.999822
	
If	O	O:0.999968
you	O	O:0.999976
want	O	O:0.999983
that	O	O:0.999990
done	O	O:0.999990
on	O	O:1.000000
every	O	O:0.999935
row	O	O:0.999959
in	O	O:0.999969
the	O	O:0.999994
dataframe	B-API	O:0.998677
,	O	O:0.999996
you	O	O:0.999992
can	O	O:0.999988
use	O	O:0.999998
apply	O	B-API:0.878083
(	O	O:0.999813
with	O	O:0.999859
axis=1	O	O:0.999877
to	O	O:0.999997
select	O	O:0.999989
rows	O	O:0.999938
instead	O	O:0.999995
of	O	O:0.999999
columns	O	O:0.997528
):	O	O:0.999984
#CODE	O	O:0.999765
	
At	O	O:0.999958
the	O	O:0.999982
moment	O	O:0.999845
for	O	O:0.999977
conversion	O	O:0.999820
I	O	O:0.999994
use	O	O:0.999990
as	O	O:0.999639
below	O	O:0.993737
,	O	O:0.999979
but	O	O:0.999988
need	O	O:0.999919
remove	O	O:0.999883
unwanted	O	O:0.999977
rows	O	O:0.999690
first	O	O:0.999847
to	O	O:0.999996
apply	O	O:0.965549
it	O	O:0.999947
to	O	O:0.999991
all	O	O:0.999999
df	O	O:0.999559
.	O	O:0.999832
	
#CODE	O	O:0.998453
	
is	O	O:0.999983
there	O	O:0.999894
an	O	O:0.999994
existing	O	O:0.999612
built-in	O	O:0.997471
way	O	O:0.999940
to	O	O:0.999968
apply	O	O:0.976547
two	O	O:0.999874
different	O	O:0.999981
aggregating	O	O:0.999761
functions	O	O:0.999719
to	O	O:0.999980
the	O	O:1.000000
same	O	O:0.999972
column	O	O:0.999929
,	O	O:0.999997
without	O	O:0.999930
having	O	O:0.999179
to	O	O:0.999969
call	O	O:0.999804
`	O	O:0.999982
agg	O	B-API:0.999751
`	O	O:0.999997
multiple	O	O:0.998302
times	O	O:0.999740
?	O	O:0.999954
	
N	O	O:0.999717
/	O	O:0.999970
M	O	O:0.999824
I	O	O:0.999984
didn't	O	O:0.999765
see	O	O:0.999883
the	O	O:0.999997
extra	O	O:0.999674
call	O	O:0.998745
to	O	O:0.999967
`	O	O:0.999996
returns	O	O:0.994228
`	O	O:0.999984
in	O	O:0.999951
there	O	O:0.999914
.	O	O:0.999923
	
So	O	O:0.999991
this	O	O:0.999692
is	O	O:0.999991
the	O	O:0.999944
Series	O	O:0.999867
version	O	O:0.999928
of	O	O:0.999984
aggregate	O	B-API:0.827618
?	O	O:0.999924
	
I'm	O	O:0.999955
looking	O	O:0.999916
to	O	O:0.999988
do	O	O:0.999996
the	O	O:0.999988
DataFrame	B-API	O:0.997726
version	O	O:0.999938
of	O	O:0.999990
aggregate	O	B-API:0.831588
,	O	O:0.999979
and	O	O:0.999984
I	O	O:0.999996
want	O	O:0.999941
to	O	O:0.999859
apply	O	O:0.978362
several	O	O:0.999837
different	O	O:0.999868
aggregations	O	O:0.999713
to	O	O:0.999992
each	O	O:0.999993
column	O	O:0.999975
all	O	O:0.999997
at	O	O:0.999999
once	O	O:0.998822
.	O	O:0.999937
	
An	O	O:0.999923
alternative	O	O:0.999924
slightly	O	O:0.999940
more	O	O:0.999874
flexible	O	O:0.999747
way	O	O:0.999927
,	O	O:0.999983
might	O	O:0.999973
be	O	O:0.999995
to	O	O:0.999997
use	O	O:0.999989
`	O	O:0.999940
apply	O	B-API:0.994845
`	O	O:0.999745
(	O	O:0.999465
or	O	O:0.999996
equivalently	O	O:0.999549
`	O	O:0.999971
map	O	B-API:0.982184
`	O	O:0.999995
)	O	O:0.999974
to	O	O:0.999983
do	O	O:0.999998
this	O	O:0.999422
:	O	O:0.999969
#CODE	O	O:0.999889
	
First	O	O:0.999816
,	O	O:0.999991
I	O	O:0.999998
think	O	O:0.999960
you	O	O:0.999980
have	O	O:0.999979
to	O	O:0.999998
either	O	O:0.999999
specify	O	O:0.999796
named	O	O:0.999978
parameters	O	O:0.999682
or	O	O:0.999990
use	O	O:0.999944
`	O	O:0.999974
args	O	O:0.984593
`	O	O:0.999996
to	O	O:0.999947
pass	O	O:0.999995
additional	O	O:0.999775
arguments	O	O:0.999861
to	O	O:0.999915
`	O	O:0.999999
apply	O	B-API:0.982929
`	O	O:0.999904
.	O	O:0.998599
	
Your	O	O:0.999682
second	O	O:0.999094
argument	O	O:0.999623
is	O	O:0.999965
probably	O	O:0.999741
being	O	O:0.999870
interpreted	O	O:0.999733
as	O	O:0.999968
an	O	O:0.999933
axis	O	O:0.999672
.	O	O:0.999802
	
But	O	O:0.999946
if	O	O:0.999994
you	O	O:0.999909
use	O	O:0.999898
#CODE	O	O:0.999093
	
because	O	O:0.999520
`	O	O:0.999986
apply	O	B-API:0.961304
`	O	O:0.999949
doesn't	O	O:0.996987
act	O	O:0.999978
elementwise	O	O:0.999685
,	O	O:0.999903
it	O	O:0.999993
acts	O	O:0.999853
on	O	O:0.999989
entire	O	O:0.998844
Series	O	O:0.999947
objects	O	O:0.999113
.	O	O:0.999885
	
Other	O	O:0.999817
approaches	O	O:0.999839
include	O	O:0.999796
using	O	O:0.999804
`	O	O:0.999852
applymap	B-API	B-API:0.998686
`	O	O:0.999966
or	O	O:0.999587
boolean	O	O:0.998787
indexing	O	O:0.999697
,	O	O:0.999902
i.e.	O	O:0.998989
#CODE	O	O:0.999514
	
One	O	O:0.999900
way	O	O:0.999947
to	O	O:0.999974
do	O	O:0.999999
this	O	O:0.999869
is	O	O:0.999994
to	O	O:0.999980
use	O	O:0.999984
apply	O	B-API:0.983869
:	O	O:0.999098
#CODE	O	O:0.999355
	
If	O	O:0.999965
you	O	O:0.999993
want	O	O:0.999990
to	O	O:0.999997
change	O	O:0.999995
the	O	O:0.999995
values	O	O:0.998661
in	O	O:0.999996
only	O	O:0.999994
one	O	O:0.999999
column	O	O:0.999977
you	O	O:0.999990
can	O	O:0.999996
still	O	O:0.999994
use	O	O:0.999985
`	O	O:0.999949
apply	O	B-API:0.997071
`	O	O:0.999451
:	O	O:0.999171
#CODE	O	O:0.999898
	
Note	O	O:0.999369
:	O	O:0.999990
since	O	O:0.999893
`	O	O:0.999997
my_fun2	O	O:0.992738
`	O	O:0.999996
returns	O	O:0.999743
a	O	O:0.999999
single	O	O:0.999447
value	O	O:0.999895
,	O	O:0.999996
this	O	O:0.999977
time	O	O:0.999955
`	O	O:0.999996
apply	O	B-API:0.964435
`	O	O:0.999973
return	O	O:0.992309
a	O	O:0.999984
Series	O	O:0.998860
,	O	O:0.999996
so	O	O:0.999994
we	O	O:0.999998
need	O	O:0.999990
to	O	O:0.999999
slightly	O	O:0.999998
change	O	O:0.999583
the	O	O:0.999972
way	O	O:0.999861
we	O	O:0.999986
apply	O	O:0.601840
apply	O	B-API:0.839083
.	O	O:0.995320
	
Looks	O	O:0.999828
like	O	O:0.999975
this	O	O:0.999832
is	O	O:0.999996
going	O	O:0.999198
to	O	O:0.999978
work	O	O:0.999940
.	O	O:0.999958
	
Thanks	O	O:0.999108
for	O	O:0.999996
your	O	O:0.999798
help	O	O:0.991984
!	O	O:0.999963
	
In	O	O:0.999941
general	O	O:0.999201
,	O	O:0.999994
though	O	O:0.999800
,	O	O:0.999963
is	O	O:0.999996
there	O	O:0.999971
a	O	O:0.999998
prefered	O	O:0.999767
approach	O	O:0.999858
to	O	O:0.999976
Split-Apply-Combine	O	O:0.999983
where	O	O:0.999896
Apply	O	O:0.999870
returns	O	O:0.999884
a	O	O:0.999995
dataframe	B-API	O:0.997260
of	O	O:0.999990
arbitrary	O	O:0.999570
size	O	O:0.995508
(	O	O:0.999823
but	O	O:0.999988
consistent	O	O:0.999510
for	O	O:0.999991
all	O	O:0.999884
chunks	O	O:0.999161
)	O	O:0.999971
,	O	O:0.999923
and	O	O:0.999987
Combine	O	O:0.999931
just	O	O:0.999466
vstacks	O	O:0.999854
the	O	O:0.999980
returned	O	O:0.999258
DFs	O	O:0.999606
?	O	O:0.999940
	
Pandas	O	O:0.997859
DataFrame	B-API	O:0.971656
:	O	O:0.999980
apply	O	O:0.605793
function	O	O:0.999846
to	O	O:0.999983
all	O	O:0.999999
columns	O	O:0.999762
	
Is	O	O:0.999985
there	O	O:0.999977
a	O	O:0.999998
more	O	O:0.999428
pythonic	O	O:0.999736
way	O	O:0.999979
to	O	O:0.999992
apply	O	O:0.993014
a	O	O:0.999866
function	O	O:0.999325
to	O	O:0.999997
all	O	O:1.000000
columns	O	O:0.999934
or	O	O:0.999997
the	O	O:0.999997
entire	O	O:0.999843
frame	O	O:0.999949
(	O	O:0.999990
without	O	O:0.999960
a	O	O:0.999986
loop	O	O:0.997737
)	O	O:0.999976
?	O	O:0.999903
	
I	O	O:0.999986
have	O	O:0.999968
found	O	O:0.999840
a	O	O:0.999992
workaround	O	O:0.998394
which	O	O:0.999672
is	O	O:0.999993
listed	O	O:0.999572
at	O	O:0.999994
the	O	O:0.999995
end	O	O:0.999850
of	O	O:0.999994
this	O	O:0.999901
post	O	O:0.999446
,	O	O:0.999989
but	O	O:0.999967
its	O	O:0.999938
not	O	O:0.999991
at	O	O:0.999998
all	O	O:0.999655
'	O	O:0.999990
panda-style	O	O:0.994435
'	O	O:0.999936
and	O	O:0.999997
prone	O	O:0.999838
to	O	O:0.999914
errors	O	O:0.999927
.	O	O:0.999865
	
The	O	O:0.999970
apply	O	B-API:0.552933
or	O	O:0.999951
transform	O	B-API:0.870302
function	O	O:0.999960
on	O	O:0.999996
a	O	O:0.999998
group	O	O:0.998339
seems	O	O:0.999981
like	O	O:0.999957
the	O	O:0.999995
right	O	O:0.999751
way	O	O:0.999981
to	O	O:0.999977
go	O	O:0.999998
but	O	O:0.999981
after	O	O:0.999990
hours	O	O:0.999752
of	O	O:0.999985
trying	O	O:0.999576
i	O	O:0.999989
still	O	O:0.999306
do	O	O:0.999953
not	O	O:0.999959
succeed	O	O:0.999009
.	O	O:0.999899
	
I	O	O:0.999917
figured	O	O:0.999940
the	O	O:0.999922
correct	O	O:0.999383
way	O	O:0.999953
should	O	O:0.999951
be	O	O:0.999999
something	O	O:0.999974
like	O	O:0.995972
:	O	O:0.999975
#CODE	O	O:0.999783
	
Having	O	O:0.999799
the	O	O:0.999968
apply	O	B-API:0.766298
/	O	O:0.999430
transform	O	B-API:0.706549
mechanism	O	O:0.999898
be	O	O:0.999997
able	O	O:0.999985
to	O	O:0.999949
output	O	O:0.999995
structured	O	O:0.999720
values	O	O:0.998927
and	O	O:0.999994
those	O	O:0.999981
broadcast	O	O:0.999504
into	O	O:0.999724
colums	O	O:0.995979
(	O	O:0.999969
i.e.	O	O:0.999946
if	O	O:0.999992
a	O	O:0.999995
tuple	O	O:0.994692
is	O	O:0.999996
produced	O	O:0.999723
by	O	O:0.999987
the	O	O:0.999983
applied	O	O:0.996566
function	O	O:0.999796
,	O	O:0.999996
the	O	O:0.999998
components	O	O:0.999705
go	O	O:0.999973
in	O	O:1.000000
separate	O	O:0.999978
columns	O	O:0.999967
instead	O	O:0.999991
of	O	O:0.999994
the	O	O:0.999976
tuple	O	O:0.999929
becoming	O	O:0.999783
an	O	O:0.999978
atomic	O	O:0.999769
element	O	O:0.999685
in	O	O:0.999991
a	O	O:0.999999
single	O	O:0.999849
column	O	O:0.999944
)	O	O:0.999986
would	O	O:0.999968
be	O	O:1.000000
a	O	O:0.999999
fantastic	O	O:0.997303
feature	O	O:0.999913
,	O	O:0.999995
even	O	O:0.999861
if	O	O:0.999995
it	O	O:0.999967
is	O	O:0.999997
only	O	O:0.999916
syntactic	O	O:0.999668
sugar	O	O:0.999556
.	O	O:0.999655
	
Probably	O	O:0.999940
with	O	O:0.999748
another	O	O:0.999544
method	O	O:0.999967
name	O	O:0.999915
,	O	O:0.999997
to	O	O:0.999998
make	O	O:0.999981
intent	O	O:0.999887
clear	O	O:0.998461
(	O	O:0.999997
applyfork	O	O:0.999612
or	O	O:0.999998
something	O	O:0.999958
like	O	O:0.999977
that	O	O:0.999990
,	O	O:0.999999
or	O	O:0.999999
a	O	O:0.999969
keyword	O	O:0.999881
splitseq=True	O	O:0.999271
in	O	O:0.999989
apply	O	B-API:0.647045
)	O	O:0.999809
.	O	O:0.999085
	
It	O	O:0.999761
is	O	O:0.999986
important	O	O:0.999598
to	O	O:0.999988
say	O	O:0.999999
that	O	O:0.999932
I	O	O:0.999997
already	O	O:0.999998
have	O	O:0.999941
a	O	O:0.999958
function	O	O:0.999940
that	O	O:0.999923
returns	O	O:0.999985
a	O	O:0.999994
distance	O	O:0.998725
between	O	O:0.999675
two	O	O:0.999955
points	O	O:0.996120
(	O	O:0.999989
two	O	O:0.999995
coordinate	O	O:0.999990
pairs	O	O:0.999776
)	O	O:0.999979
,	O	O:0.999991
but	O	O:0.999974
I	O	O:0.999984
don't	O	O:0.999981
know	O	O:0.999438
how	O	O:0.999988
to	O	O:0.999986
apply	O	O:0.983784
it	O	O:0.999967
with	O	O:0.999982
a	O	O:0.999999
single	O	O:0.999765
array	O	O:0.999954
operation	O	O:0.999914
instead	O	O:0.999978
of	O	O:0.999996
looping	O	O:0.999829
through	O	O:0.999842
row	O	O:0.999913
pairs	O	O:0.998801
.	O	O:0.999900
	
pandas	O	O:0.997402
:	O	O:0.999992
apply	O	B-API:0.555494
function	O	O:0.999502
to	O	O:0.999920
DataFrame	B-API	O:0.999973
that	O	O:0.999905
can	O	O:0.999994
return	O	O:0.999999
multiple	O	O:0.999980
rows	O	O:0.998879
	
One	O	O:0.999875
possibility	O	O:0.999350
might	O	O:0.999955
be	O	O:0.999996
to	O	O:0.999999
allow	O	O:0.999905
`	O	O:0.999962
DataFrame.applymap	B-API	B-API:0.999457
`	O	O:0.999961
function	O	O:0.999212
return	O	O:0.999966
multiple	O	O:0.999937
rows	O	O:0.994449
(	O	O:0.999992
akin	O	O:0.999915
`	O	O:0.999993
apply	O	B-API:0.997281
`	O	O:0.999968
method	O	O:0.999686
of	O	O:0.999905
`	O	O:0.999982
GroupBy	B-API	B-API:0.672332
`)	O	O:0.999953
.	O	O:0.999510
	
However	O	O:0.999839
,	O	O:0.999992
I	O	O:0.999980
do	O	O:0.999963
not	O	O:0.999932
think	O	O:0.999902
it	O	O:0.999948
is	O	O:0.999997
possible	O	O:0.998889
in	O	O:0.999996
pandas	O	O:0.999748
now	O	O:0.999906
.	O	O:0.999885
	
Thanks	O	O:0.998711
for	O	O:0.999944
reporting	O	O:0.996303
.	O	O:0.999066
	
Is	O	O:0.999972
there	O	O:0.999970
any	O	O:0.999989
work	O	O:0.999704
around	O	O:0.999826
I	O	O:0.999986
could	O	O:0.999931
apply	O	B-API:0.593054
before	O	O:0.999135
it	O	O:0.999670
is	O	O:0.999971
fixed	O	O:0.998892
?	O	O:0.999935
	
I	O	O:0.999942
notice	O	O:0.999954
Pandas	O	O:0.999598
can	O	O:0.999953
apply	O	O:0.988076
different	O	O:0.999307
function	O	O:0.999708
to	O	O:0.999996
different	O	O:0.999999
column	O	O:0.999970
by	O	O:0.999996
passing	O	O:0.999852
a	O	O:0.999881
dict	O	O:0.997618
.	O	O:0.999885
	
But	O	O:0.999924
I	O	O:0.999998
have	O	O:0.999992
a	O	O:0.999993
long	O	O:0.999293
column	O	O:0.999775
list	O	O:0.997623
and	O	O:0.999998
just	O	O:0.999960
want	O	O:0.999958
parameters	O	O:0.999232
to	O	O:0.999998
set	O	O:0.999997
or	O	O:0.999995
tip	O	O:0.999963
to	O	O:0.999996
simply	O	O:0.999997
tell	O	O:0.999875
Pandas	O	O:0.999919
to	O	O:0.999972
bypass	O	O:0.999986
some	O	O:0.999921
columns	O	O:0.999798
and	O	O:0.999997
apply	O	O:0.516786
`	O	O:0.999629
my_func()	O	B-API:0.563740
`	O	O:0.999995
to	O	O:0.999995
rest	O	O:0.999999
of	O	O:0.999996
columns	O	O:0.999803
?	O	O:0.999989
	
(	O	O:0.999943
Otherwise	O	O:0.999964
I	O	O:0.999998
have	O	O:0.999987
to	O	O:0.999983
build	O	O:0.999994
a	O	O:0.999997
long	O	O:0.999609
dict	O	O:0.999716
)	O	O:0.999942
	
One	O	O:0.999750
simple	O	O:0.988357
(	O	O:0.999849
and	O	O:0.999996
general	O	O:0.999569
)	O	O:0.999936
approach	O	O:0.998996
is	O	O:0.999988
to	O	O:0.999988
create	O	O:0.999997
a	O	O:1.000000
view	O	O:0.997492
of	O	O:0.999996
the	O	O:0.999974
dataframe	B-API	O:0.999462
with	O	O:0.999954
the	O	O:0.999996
subset	O	O:0.999223
you	O	O:0.999948
are	O	O:0.999995
interested	O	O:0.999748
in	O	O:0.999898
(	O	O:0.999974
or	O	O:0.999991
,	O	O:0.999991
stated	O	O:0.999647
for	O	O:0.999998
your	O	O:0.999891
case	O	O:0.999904
,	O	O:1.000000
a	O	O:0.999998
view	O	O:0.989598
with	O	O:0.999990
all	O	O:0.999990
columns	O	O:0.999941
except	O	O:0.999972
the	O	O:0.999999
ones	O	O:0.999802
you	O	O:0.999996
want	O	O:0.999995
to	O	O:0.999995
ignore	O	O:0.999915
)	O	O:0.999988
,	O	O:0.999976
and	O	O:0.999999
then	O	O:0.999647
use	O	O:0.999991
APPLY	O	O:0.996195
for	O	O:0.999974
that	O	O:0.999834
view	O	O:0.992007
.	O	O:0.999956
	
#CODE	O	O:0.998453
	
Apply	O	O:0.999954
your	O	O:0.998913
function	O	O:0.999775
to	O	O:0.999998
that	O	O:0.999998
view	O	O:0.997899
.	O	O:0.999972
	
(	O	O:0.999812
Note	O	O:0.999984
this	O	O:0.999915
doesn't	O	O:0.999969
yet	O	O:0.999974
change	O	O:0.999933
anything	O	O:0.999864
in	O	O:0.999895
df	O	O:0.999719
.	O	O:0.999917
)	O	O:0.999963
#CODE	O	O:0.999487
	
Starting	O	O:0.999599
with	O	O:0.999800
row	O	O:0.999959
number	O	O:0.999886
2	O	O:0.999972
,	O	O:0.999998
or	O	O:0.999978
in	O	O:0.999994
this	O	O:0.999984
case	O	O:0.999990
,	O	O:0.999997
I	O	O:0.999994
guess	O	O:0.999826
it's	O	O:0.998185
250	O	O:0.997841
(	O	O:0.999956
PS	O	O:0.999966
-	O	O:0.999924
is	O	O:0.999993
that	O	O:0.999542
the	O	O:0.999991
index	O	O:0.999909
?	O	O:0.999983
)	O	O:0.999997
,	O	O:0.999995
I	O	O:0.999999
want	O	O:0.999990
to	O	O:0.999950
calculate	O	O:0.999988
the	O	O:0.999995
difference	O	O:0.999676
between	O	O:0.997799
2011-01-03	O	O:0.999120
and	O	O:0.999981
2011-01-04	O	O:0.998742
,	O	O:0.999941
for	O	O:0.999996
every	O	O:0.999809
entry	O	O:0.999401
in	O	O:0.999988
this	O	O:0.999924
dataframe	B-API	O:0.996387
.	O	O:0.999893
	
I	O	O:0.999969
believe	O	O:0.999980
the	O	O:0.999955
appropriate	O	O:0.999885
way	O	O:0.999771
is	O	O:0.999993
to	O	O:0.999988
write	O	O:0.999999
a	O	O:0.999956
function	O	O:0.999942
that	O	O:0.999932
takes	O	O:0.999975
the	O	O:0.999998
current	O	O:0.999430
row	O	O:0.999962
,	O	O:1.000000
then	O	O:0.999977
figures	O	O:0.999976
out	O	O:0.999986
the	O	O:0.999997
previous	O	O:0.999292
row	O	O:0.999898
,	O	O:0.999973
and	O	O:0.999992
calculates	O	O:0.999430
the	O	O:0.999979
difference	O	O:0.999745
between	O	O:0.999949
them	O	O:0.999890
,	O	O:0.999999
the	O	O:0.999979
use	O	O:0.999894
the	O	O:0.999604
`	O	O:0.999982
pandas	O	O:0.993374
`	O	O:0.999995
`	O	O:0.999957
apply	O	B-API:0.932319
`	O	O:0.999883
function	O	O:0.999283
to	O	O:0.999993
update	O	O:0.999983
the	O	O:0.999991
dataframe	B-API	O:0.998323
with	O	O:0.999968
the	O	O:0.999989
value	O	O:0.999831
.	O	O:0.999820
	
How	O	O:0.999879
to	O	O:0.999986
apply	O	O:0.985986
condition	O	O:0.999855
on	O	O:0.999997
level	O	O:0.999820
of	O	O:0.999990
pandas.multiindex	B-API	B-API:0.965410
?	O	O:0.999967
	
I.e.	O	O:0.999441
,	O	O:0.999992
I	O	O:0.999986
would	O	O:0.999995
like	O	O:0.999955
to	O	O:0.999999
apply	O	O:0.969242
np.mean	B-API	B-API:0.918301
over	O	O:0.999679
all	O	O:0.999997
counts	O	O:0.999902
of	O	O:0.999997
the	O	O:0.999998
detectors	O	O:0.999983
of	O	O:0.999973
1	O	O:0.999974
channel	O	O:0.999939
at	O	O:0.999990
each	O	O:0.999923
time	O	O:0.999973
separately	O	O:0.999703
.	O	O:0.999924
	
Thank	O	O:0.999430
you	O	O:0.999813
@	O	O:0.999993
root	O	O:0.999816
,	O	O:0.999988
that's	O	O:0.999983
very	O	O:0.999768
helpful	O	O:0.999364
!	O	O:0.999902
	
As	O	O:0.999991
a	O	O:0.999992
follow-up	O	O:0.998713
question	O	O:0.999771
,	O	O:0.999991
how	O	O:0.999949
would	O	O:0.999981
you	O	O:0.999999
go	O	O:0.999999
about	O	O:0.999992
to	O	O:0.999987
apply	O	O:0.919513
the	O	O:0.999967
same	O	O:0.999138
function	O	O:0.999964
on	O	O:0.999992
groups	O	O:0.999647
?	O	O:0.999972
	
(	O	O:0.999868
See	O	O:0.999934
updated	O	O:0.999630
question	O	O:0.999431
)	O	O:0.999963
.	O	O:0.999738
	
Thanks	O	O:0.999321
again	O	O:0.999252
!	O	O:0.999910
	
It	O	O:0.999777
is	O	O:0.999996
only	O	O:0.999940
applied	O	O:0.999966
to	O	O:0.999991
a	O	O:1.000000
time	O	O:0.999864
series	O	O:0.999980
,	O	O:0.999999
so	O	O:0.999996
you	O	O:0.999952
would	O	O:0.999998
have	O	O:0.999997
to	O	O:0.999999
apply	O	O:0.972853
`	O	O:0.999916
reset_index	B-API	B-API:0.999414
`	O	O:0.999994
to	O	O:0.999997
your	O	O:0.999987
`	O	O:0.999985
DataFrame	B-API	O:0.943372
`	O	O:0.999984
	
This	O	O:0.999776
can	O	O:0.999970
be	O	O:1.000000
accomplished	O	O:0.999990
quite	O	O:0.999876
simply	O	O:0.999907
with	O	O:0.999904
the	O	O:0.999559
DataFrame	B-API	O:0.990987
method	O	O:0.999853
`	O	O:0.999994
apply	O	B-API:0.966987
`	O	O:0.999853
.	O	O:0.997852
	
#CODE	O	O:0.998453
	
Now	O	O:0.999980
that	O	O:0.999960
we	O	O:1.000000
have	O	O:0.999989
our	O	O:0.999773
`	O	O:0.999971
DataFrame	B-API	O:0.854186
`	O	O:0.999982
and	O	O:0.999570
`	O	O:0.999992
Series	O	O:0.978119
`	O	O:0.999995
we	O	O:0.999991
need	O	O:0.999997
a	O	O:0.999988
function	O	O:0.999894
to	O	O:0.999996
pass	O	O:0.999949
to	O	O:0.999974
`	O	O:1.000000
apply	O	B-API:0.980072
`	O	O:0.999885
.	O	O:0.998599
	
#CODE	O	O:0.998453
	
`	O	O:0.999936
df.apply	B-API	B-API:0.995998
`	O	O:0.999988
acts	O	O:0.998948
column-wise	O	O:0.999939
by	O	O:0.999900
default	O	O:0.997490
,	O	O:0.999864
but	O	O:0.999980
it	O	O:0.999990
can	O	O:0.999981
can	O	O:1.000000
also	O	O:0.999999
act	O	O:0.999998
row-wise	O	O:0.999660
by	O	O:0.999972
passing	O	O:0.998557
`	O	O:0.999871
axis=1	O	O:0.995885
`	O	O:0.999998
as	O	O:0.999974
an	O	O:0.999977
argument	O	O:0.999941
to	O	O:0.999920
`	O	O:0.999999
apply	O	B-API:0.982752
`	O	O:0.999904
.	O	O:0.998599
	
#CODE	O	O:0.998453
	
This	O	O:0.999776
could	O	O:0.999933
be	O	O:0.999999
done	O	O:0.999994
more	O	O:0.999920
concisely	O	O:0.999923
by	O	O:0.999991
defining	O	O:0.999712
the	O	O:0.999931
anonymous	O	O:0.995049
function	O	O:0.999895
inside	O	O:0.999355
`	O	O:0.999990
apply	O	B-API:0.994245
`	O	O:0.999871
#CODE	O	O:0.993894
	
I	O	O:0.999981
know	O	O:0.999920
no	O	O:0.999987
easy	O	O:0.999714
solution	O	O:0.999963
to	O	O:0.999995
get	O	O:0.999999
to	O	O:0.999998
align	O	O:0.993880
to	O	O:0.999996
the	O	O:0.999998
closest	O	O:0.999634
and	O	O:0.999995
I	O	O:0.999998
find	O	O:0.999915
the	O	O:0.999969
current	O	O:0.999020
version	O	O:0.999785
quite	O	O:0.999813
logical	O	O:0.996189
.	O	O:0.999667
	
But	O	O:0.999925
with	O	O:0.999795
`	O	O:0.999958
label=	O	O:0.999155
'	O	O:0.999996
left	O	O:0.998961
'`	O	O:0.999976
you	O	O:0.999910
can	O	O:0.999979
achieve	O	O:0.999999
what	O	O:0.999986
you	O	O:0.999996
want	O	O:0.999987
with	O	O:0.999986
the	O	O:0.999999
current	O	O:0.999952
data	O	O:0.999933
,	O	O:0.999996
still	O	O:0.999904
it	O	O:0.999991
doesn't	O	O:0.999975
align	O	O:0.917985
to	O	O:0.999997
the	O	O:0.999999
closest	O	O:0.999675
,	O	O:0.999997
so	O	O:0.999997
overall	O	O:0.999700
you	O	O:0.999992
probably	O	O:0.999989
have	O	O:0.999987
to	O	O:0.999996
figure	O	O:0.999992
out	O	O:0.999992
something	O	O:0.999954
else	O	O:0.998674
(	O	O:0.999998
like	O	O:0.999983
using	O	O:0.999980
apply	O	B-API:0.700786
to	O	O:0.999706
change	O	O:0.999961
the	O	O:0.999990
dates	O	O:0.994519
so	O	O:0.999996
they	O	O:0.999951
would	O	O:0.999996
conform	O	O:0.958554
as	O	O:0.999999
you	O	O:0.999974
wish	O	O:0.999934
)	O	O:0.999986
.	O	O:0.999866
	
#CODE	O	O:0.998453
	
Since	O	O:0.998934
resample()	B-API	B-API:0.983265
requires	O	O:0.999626
a	O	O:0.999986
TimeSeries-indexed	O	O:0.999241
frame	O	O:0.999976
/	O	O:0.999986
series	O	O:0.999919
,	O	O:0.999993
setting	O	O:0.998953
the	O	O:0.999819
index	O	O:0.999959
during	O	O:0.999469
creation	O	O:0.999872
eliminates	O	O:0.999682
the	O	O:0.999997
need	O	O:0.999962
to	O	O:0.999996
set	O	O:0.999988
the	O	O:0.999993
index	O	O:0.999839
for	O	O:0.999990
each	O	O:0.999925
group	O	O:0.998398
individually	O	O:0.999562
.	O	O:0.999817
	
GroupBy	B-API	O:0.801317
objects	O	O:0.999804
also	O	O:0.999966
have	O	O:0.999996
an	O	O:0.999877
apply	O	B-API:0.524100
method	O	O:0.999644
,	O	O:0.999954
which	O	O:0.999852
is	O	O:0.999993
basically	O	O:0.999975
syntactic	O	O:0.999878
sugar	O	O:0.999527
around	O	O:0.999788
the	O	O:0.999944
"	O	O:0.999977
combine	O	O:0.991677
"	O	O:0.999996
step	O	O:0.999959
done	O	O:0.999960
with	O	O:0.999965
pd.concat()	B-API	B-API:0.994385
above	O	O:0.999667
.	O	O:0.999904
	
#CODE	O	O:0.998453
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999940
to	O	O:0.999999
apply	O	O:0.993433
a	O	O:0.999866
function	O	O:0.999342
to	O	O:0.999995
a	O	O:1.000000
dataframe	B-API	O:0.990762
and	O	O:0.999995
receive	O	O:0.999954
a	O	O:0.999977
single	O	O:0.999720
dictionary	O	O:0.999980
as	O	O:0.999999
a	O	O:0.999970
result	O	O:0.998805
.	O	O:0.999974
pandas.apply	O	O:0.997451
gives	O	O:0.999840
me	O	O:0.999975
a	O	O:0.999996
Series	O	O:0.999637
of	O	O:0.999990
dicts	O	O:0.999443
,	O	O:0.999992
and	O	O:0.999998
so	O	O:0.999996
currently	O	O:0.999877
I	O	O:0.999999
have	O	O:0.999984
to	O	O:0.999990
combine	O	O:0.999989
keys	O	O:0.999945
from	O	O:0.999957
each	O	O:0.999586
.	O	O:0.999916
	
I'll	O	O:0.999067
use	O	O:0.999934
an	O	O:0.999907
example	O	O:0.999714
to	O	O:0.999967
illustrate	O	O:0.999935
.	O	O:0.999906
	
However	O	O:0.999753
,	O	O:0.999992
my	O	O:0.999992
goal	O	O:0.998291
is	O	O:0.999995
to	O	O:0.999980
be	O	O:1.000000
able	O	O:0.999990
to	O	O:0.999987
use	O	O:0.999999
a	O	O:0.999978
row-wise	O	O:0.977369
function	O	O:0.999856
in	O	O:0.999983
the	O	O:0.999981
`	O	O:0.999939
DataFrame.apply()	B-API	B-API:0.999996
`	O	O:0.999940
method	O	O:0.997908
(	O	O:0.999996
so	O	O:0.999997
I	O	O:0.999995
can	O	O:0.999993
apply	O	O:0.900464
the	O	O:0.999990
desired	O	O:0.999137
functionality	O	O:0.999892
to	O	O:0.999998
other	O	O:0.999998
functions	O	O:0.999903
I	O	O:0.999988
build	O	O:0.999757
)	O	O:0.999844
.	O	O:0.999631
	
I've	O	O:0.998011
tried	O	O:0.996421
:	O	O:0.999895
#CODE	O	O:0.999609
	
Row-wise	O	O:0.999064
functionality	O	O:0.999490
should	O	O:0.999895
be	O	O:0.999997
possible	O	O:0.999971
with	O	O:0.999762
apply	O	B-API:0.840541
.	O	O:0.999207
	
For	O	O:0.999920
example	O	O:0.999669
,	O	O:0.999983
`	O	O:0.999980
df.apply	B-API	B-API:0.997435
(	O	O:0.999980
lambda	O	O:0.998821
x	O	O:0.999581
:	O	O:0.999937
sum	O	O:0.999347
(	O	O:0.999996
x**2	O	O:0.999295
)	O	O:0.999978
,	O	O:0.999988
axis	O	O:0.999944
=	O	O:0.999837
1	O	O:0.999942
)`	O	O:0.999715
	
The	O	O:0.999881
"	O	O:0.999978
problem	O	O:0.999256
"	O	O:0.999905
is	O	O:0.999983
that	O	O:0.999854
the	O	O:0.999993
chaining	O	O:0.999478
breaks	O	O:0.999703
the	O	O:0.999937
fillna	B-API	B-API:0.942973
ability	O	O:0.999883
to	O	O:0.999978
update	O	O:0.999971
the	O	O:0.999982
original	O	O:0.999486
dataframe	B-API	O:0.997980
.	O	O:0.999882
	
I	O	O:0.999980
put	O	O:0.999665
"	O	O:0.999946
problem	O	O:0.999052
"	O	O:0.999973
in	O	O:0.999947
quotes	O	O:0.999289
because	O	O:0.999971
there	O	O:0.999902
are	O	O:0.999999
good	O	O:0.999930
reasons	O	O:0.999729
for	O	O:0.999983
the	O	O:0.999974
design	O	O:0.999346
decisions	O	O:0.999897
that	O	O:0.999821
led	O	O:0.999918
to	O	O:0.999981
not	O	O:0.999997
interpreting	O	O:0.999926
through	O	O:0.999791
these	O	O:0.999954
chains	O	O:0.999573
in	O	O:0.999983
certain	O	O:0.999287
situations	O	O:0.999727
.	O	O:0.999864
	
Also	O	O:0.999439
,	O	O:0.999999
this	O	O:0.999850
is	O	O:0.999997
a	O	O:0.999988
complex	O	O:0.995793
example	O	O:0.998597
(	O	O:0.999988
though	O	O:0.999967
I	O	O:0.999997
really	O	O:0.999858
ran	O	O:0.998880
into	O	O:0.999539
it	O	O:0.999986
)	O	O:0.999960
,	O	O:0.999966
but	O	O:0.999977
the	O	O:0.999984
same	O	O:0.999930
may	O	O:0.999992
apply	O	O:0.871576
to	O	O:0.999983
fewer	O	O:0.999994
levels	O	O:0.999923
of	O	O:0.999991
indexes	O	O:0.999871
depending	O	O:0.999943
on	O	O:0.999987
how	O	O:0.999962
you	O	O:0.999991
slice	O	O:0.999643
.	O	O:0.999966
	
It's	O	O:0.999792
one	O	O:0.999987
line	O	O:0.999693
,	O	O:0.999992
reads	O	O:0.999894
reasonably	O	O:0.999722
well	O	O:0.998879
(	O	O:0.999999
sort	O	O:0.999611
of	O	O:0.999982
)	O	O:0.999884
and	O	O:0.999992
eliminates	O	O:0.999638
any	O	O:0.999933
unnecessary	O	O:0.999611
messing	O	O:0.998604
with	O	O:0.999939
intermediate	O	O:0.999946
variables	O	O:0.999628
or	O	O:0.999994
loops	O	O:0.999938
while	O	O:0.999981
allowing	O	O:0.999801
you	O	O:0.999984
to	O	O:0.999997
apply	O	O:0.981755
fillna	B-API	B-API:0.980782
to	O	O:0.999957
any	O	O:0.999999
multi-level	O	O:0.999772
slice	O	O:0.999419
you	O	O:0.999994
like	O	O:0.999770
!	O	O:0.999976
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.994087
a	O	O:0.999880
function	O	O:0.999014
to	O	O:0.999996
two	O	O:1.000000
columns	O	O:0.999960
of	O	O:0.999985
Pandas	O	O:0.999911
dataframe	B-API	O:0.997291
	
Now	O	O:0.999895
I	O	O:0.999998
want	O	O:0.999989
to	O	O:0.999938
apply	O	O:0.980476
the	O	O:0.999883
`	O	O:0.999947
f	O	O:0.999190
`	O	O:0.999997
to	O	O:0.999845
`	O	O:1.000000
df	O	O:0.999653
`'	O	O:0.999978
s	O	O:0.999918
two	O	O:0.999988
columns	O	O:0.999934
`'	O	O:0.999963
col_1	O	O:0.994980
'	O	O:0.999980
,	O	O:0.999966
'	O	O:0.999982
col_2	O	O:0.999041
'`	O	O:0.999980
to	O	O:0.999986
element-wise	O	O:0.999995
calculate	O	O:0.999907
a	O	O:0.999999
new	O	O:0.999921
column	O	O:0.999889
`'	O	O:0.999965
col_3	O	O:0.996690
'`	O	O:0.999967
,	O	O:0.999976
somewhat	O	O:0.999686
like	O	O:0.999111
:	O	O:0.999979
#CODE	O	O:0.999857
	
can	O	O:0.999905
you	O	O:0.999999
apply	O	O:0.991548
f	O	O:0.999968
directly	O	O:0.999746
to	O	O:0.999984
columns	O	O:0.999972
:	O	O:0.999994
df	O	O:0.999889
[	O	O:0.999984
'	O	O:0.999983
col_3	O	O:0.998872
']	O	O:0.999981
=	O	O:0.999279
f	O	O:0.999563
(	O	O:0.999976
df	O	O:0.999630
[	O	O:0.999939
'	O	O:0.999982
col_1	O	O:0.999164
']	O	O:0.999984
,	O	O:0.999942
df	O	O:0.999262
[	O	O:0.999928
'	O	O:0.999979
col_2	O	O:0.998431
'])	O	O:0.999760
	
Here's	O	O:0.999634
an	O	O:0.999983
example	O	O:0.999959
using	O	O:0.999808
`	O	O:0.999952
apply	O	B-API:0.988794
`	O	O:0.999954
on	O	O:0.999543
the	O	O:0.999995
dataframe	B-API	O:0.998915
,	O	O:0.999991
which	O	O:0.999983
I	O	O:0.999993
am	O	O:0.999999
calling	O	O:0.998370
with	O	O:0.999632
`	O	O:0.999974
axis	O	O:0.999835
=	O	O:0.999943
1	O	O:0.999753
`	O	O:0.999924
.	O	O:0.999502
	
Depending	O	O:0.999514
on	O	O:0.999998
your	O	O:0.999801
use	O	O:0.999960
case	O	O:0.999652
,	O	O:0.999989
it	O	O:0.999957
is	O	O:0.999991
sometimes	O	O:0.999896
helpful	O	O:0.999910
to	O	O:0.999995
create	O	O:0.999984
a	O	O:0.999999
pandas	O	O:0.999496
`	O	O:0.999998
group	O	O:0.916062
`	O	O:0.999983
object	O	O:0.998487
,	O	O:0.999991
and	O	O:0.999999
then	O	O:0.999726
use	O	O:0.999975
`	O	O:0.999982
apply	O	B-API:0.975406
`	O	O:0.999962
on	O	O:0.999774
the	O	O:0.999993
group	O	O:0.994701
.	O	O:0.999849
	
Yes	O	O:0.999475
,	O	O:0.999974
i	O	O:0.999964
tried	O	O:0.999932
to	O	O:0.999978
use	O	O:0.999992
apply	O	B-API:0.937095
,	O	O:0.999653
but	O	O:0.999896
can't	O	O:0.999885
find	O	O:0.999940
the	O	O:0.999992
valid	O	O:0.998148
syntax	O	O:0.999732
expression	O	O:0.999404
.	O	O:0.999941
	
And	O	O:0.999943
if	O	O:0.999998
each	O	O:0.999944
row	O	O:0.999984
of	O	O:0.999992
df	O	O:0.998255
is	O	O:0.999994
unique	O	O:0.516156
,	O	O:0.999995
still	O	O:0.999529
use	O	O:0.999850
groupby	B-API	B-API:0.996718
?	O	O:0.999778
	
i	O	O:0.999937
provide	O	O:0.999914
a	O	O:0.999971
detail	O	O:0.999595
sample	O	O:0.999692
in	O	O:0.999943
question	O	O:0.999310
.	O	O:0.999916
	
How	O	O:0.999932
to	O	O:0.999938
use	O	O:0.999995
Pandas	O	O:0.998498
'	O	O:0.999957
apply	O	B-API:0.602578
'	O	O:0.999436
function	O	O:0.999931
to	O	O:0.999993
create	O	O:0.999912
'	O	O:0.999992
col_3	O	O:0.997835
'	O	O:0.999975
?	O	O:0.999940
	
Use	O	O:0.999951
apply	O	B-API:0.687152
on	O	O:0.999932
the	O	O:0.999980
whole	O	O:0.999922
dataframe	B-API	O:0.999143
,	O	O:0.999999
passing	O	O:0.999888
in	O	O:0.999992
rows	O	O:0.999875
with	O	O:0.999877
df.apply	B-API	B-API:0.894078
(	O	O:0.999980
f	O	O:0.999795
,	O	O:0.999990
axis=1	O	O:0.998862
)	O	O:0.999942
.	O	O:0.999735
	
Then	O	O:0.999549
rewrite	O	O:0.999990
your	O	O:0.999633
function	O	O:0.999677
`	O	O:0.999990
get_sublist	O	O:0.910093
(	O	O:0.999992
x	O	O:0.999978
)`	O	O:0.999601
to	O	O:0.999969
index	O	O:0.999996
the	O	O:0.999994
col	O	O:0.999911
values	O	O:0.999949
like	O	O:0.999972
this	O	O:0.999966
`	O	O:0.999995
start_idx	O	O:0.985335
=	O	O:0.999966
x	O	O:0.999873
[	O	O:0.999963
1	O	O:0.999972
]	O	O:0.999883
,	O	O:0.999973
end_idx	O	O:0.997009
=	O	O:0.999902
x	O	O:0.999891
[	O	O:0.999962
2	O	O:0.999927
]`	O	O:0.999798
.	O	O:0.999622
	
Pandas	O	O:0.999866
rolling	O	O:0.992494
apply	O	B-API:0.828288
with	O	O:0.999807
missing	O	O:0.999260
data	O	O:0.999806
	
I	O	O:0.999988
think	O	O:0.999973
a	O	O:0.999987
partial	O	O:0.994579
answer	O	O:0.999721
to	O	O:0.999995
this	O	O:0.999991
question	O	O:0.999396
is	O	O:0.999998
probably	O	O:0.999899
via	O	O:0.999979
using	O	O:0.999790
the	O	O:0.999567
keyword	O	O:0.996232
argument	O	O:0.999961
min_periods	O	O:0.967431
in	O	O:0.999977
the	O	O:0.999988
rolling	O	O:0.980089
apply	O	B-API:0.942873
function	O	O:0.998437
.	O	O:0.999560
	
Ex	O	O:0.999363
:	O	O:0.999881
pandas.rolling_apply	B-API	B-API:0.996692
(	O	O:0.999970
x2	O	O:0.999884
,	O	O:0.999973
3	O	O:0.999883
,	O	O:0.999985
foo	O	O:0.999791
,	O	O:0.999993
min_periods=1	O	O:0.991879
)	O	O:0.999961
helps	O	O:0.998677
.	O	O:0.999898
	
You	O	O:0.999904
can	O	O:0.999880
use	O	O:0.999977
groupby	B-API	B-API:0.996320
and	O	O:0.999991
then	O	O:0.999753
apply	O	O:0.807490
to	O	O:0.999943
achieve	O	O:0.999980
what	O	O:0.999923
you	O	O:0.999972
want	O	O:0.999835
:	O	O:0.999967
#CODE	O	O:0.999920
	
I've	O	O:0.998984
already	O	O:0.999670
explored	O	O:0.999817
Panda's	O	O:0.999234
fillna	B-API	B-API:0.991532
,	O	O:0.999880
but	O	O:0.999936
it	O	O:0.999958
doesn't	O	O:0.999979
seem	O	O:0.999936
to	O	O:0.999997
meet	O	O:0.999975
my	O	O:0.999966
needs	O	O:0.999768
.	O	O:0.999950
	
I've	O	O:0.999813
also	O	O:0.999886
considered	O	O:0.999967
the	O	O:0.999313
np.where	B-API	B-API:0.983843
method	O	O:0.999579
,	O	O:0.999973
but	O	O:0.999930
I'm	O	O:0.999921
not	O	O:0.999982
sure	O	O:0.999903
how'd	O	O:0.999835
it	O	O:0.999994
work	O	O:0.999745
in	O	O:0.999999
this	O	O:0.999920
situation	O	O:0.999796
.	O	O:0.999919
	
I'm	O	O:0.999914
pretty	O	O:0.999882
new	O	O:0.999858
to	O	O:0.999968
Pandas	O	O:0.999974
,	O	O:0.999982
but	O	O:0.999983
maybe	O	O:0.999975
the	O	O:0.999970
map	O	B-API:0.900070
/	O	O:0.999974
apply	O	B-API:0.772660
function	O	O:0.998999
are	O	O:0.999981
what	O	O:0.999949
I	O	O:0.999995
need	O	O:0.999969
?	O	O:0.999864
	
This	O	O:0.999620
can	O	O:0.999981
probably	O	O:0.999996
be	O	O:0.999998
accomplished	O	O:0.999945
a	O	O:0.999975
thousand	O	O:0.998744
different	O	O:0.999866
ways	O	O:0.997402
,	O	O:0.999975
but	O	O:0.999993
looking	O	O:0.999706
for	O	O:0.999993
something	O	O:0.999853
that	O	O:0.999671
won't	O	O:0.999995
crawl	O	O:0.999858
given	O	O:0.999950
the	O	O:0.999997
size	O	O:0.999868
of	O	O:0.999996
the	O	O:0.999996
data	O	O:0.999914
.	O	O:0.999907
	
The	O	O:0.999913
paired	O	O:0.999036
dict	O	O:0.999784
has	O	O:0.999987
the	O	O:0.999997
city	O	O:0.998185
as	O	O:0.999992
the	O	O:0.999880
key	O	O:0.999825
and	O	O:0.999993
the	O	O:0.999994
borough	O	O:0.996255
as	O	O:0.999990
the	O	O:0.999906
value	O	O:0.999672
.	O	O:0.999779
	
Now	O	O:0.999920
the	O	O:0.999996
last	O	O:0.999666
step	O	O:0.999794
is	O	O:0.999995
to	O	O:0.999989
apply	O	O:0.948437
/	O	O:0.999457
map	O	B-API:0.819891
it	O	O:0.999996
back	O	O:0.999668
to	O	O:0.999997
the	O	O:0.999999
borough	O	O:0.997618
column	O	O:0.999916
...	O	O:0.999926
how	O	O:0.999992
do	O	O:0.999984
I	O	O:0.999997
do	O	O:0.999986
that	O	O:0.999531
?	O	O:0.999978
	
I'm	O	O:0.999967
also	O	O:0.999939
puzzled	O	O:0.999931
why	O	O:0.999960
the	O	O:0.999973
`	O	O:0.999984
apply	O	B-API:0.980703
`	O	O:0.999943
version	O	O:0.999314
along	O	O:0.999676
`	O	O:0.999952
axis=1	O	O:0.980673
`	O	O:0.999977
is	O	O:0.999914
so	O	O:0.999992
much	O	O:0.999459
slower	O	O:0.999314
.	O	O:0.999713
	
It	O	O:0.999866
should	O	O:0.999966
literally	O	O:0.999978
be	O	O:0.999999
just	O	O:0.999974
a	O	O:0.999999
shortening	O	O:0.998829
of	O	O:0.999953
the	O	O:0.999843
syntax	O	O:0.999930
,	O	O:0.999986
no	O	O:0.999978
?	O	O:0.999961
	
Currently	O	O:0.999834
I	O	O:0.999996
think	O	O:0.999972
you	O	O:0.999969
need	O	O:0.999988
to	O	O:0.999999
create	O	O:0.999997
a	O	O:0.999998
custom	O	O:0.997553
subclass	O	O:0.998696
.	O	O:0.999833
	
You'd	O	O:0.999943
need	O	O:0.999959
to	O	O:0.999993
override	O	O:0.999986
the	O	O:0.999960
`	O	O:0.999979
apply	O	B-API:0.986017
`	O	O:0.999909
and	O	O:0.998934
`	O	O:0.999997
onOffset	O	O:0.950678
`	O	O:0.999997
methods	O	O:0.999515
to	O	O:0.999998
take	O	O:0.999999
into	O	O:0.999950
account	O	O:0.999980
your	O	O:0.999831
holiday	O	O:0.999868
calendar	O	O:0.999250
.	O	O:0.999866
	
Update	O	O:0.998756
:	O	O:0.999937
A	O	O:0.999991
useful	O	O:0.999667
workaround	O	O:0.999204
is	O	O:0.999968
to	O	O:0.999994
just	O	O:0.999994
smash	O	O:0.999943
this	O	O:0.999917
with	O	O:0.999930
the	O	O:0.999906
DatetimeIndex	B-API	B-API:0.658489
constructor	O	O:0.997793
(	O	O:0.999985
which	O	O:0.999781
is	O	O:0.999986
usually	O	O:0.999930
much	O	O:0.999322
faster	O	O:0.999834
than	O	O:0.999870
an	O	O:0.999990
apply	O	O:0.592976
)	O	O:0.999914
,	O	O:0.999915
for	O	O:0.999950
example	O	O:0.991471
:	O	O:0.999909
#CODE	O	O:0.999890
	
With	O	O:0.999865
more	O	O:0.999855
complicated	O	O:0.999871
selections	O	O:0.999900
like	O	O:0.999979
this	O	O:0.999992
one	O	O:0.999997
you	O	O:0.999990
can	O	O:0.999985
use	O	O:0.999998
`	O	O:0.999980
apply	O	B-API:0.996233
`	O	O:0.999529
:	O	O:0.999171
#CODE	O	O:0.999898
	
problems	O	O:0.999577
with	O	O:0.999925
apply	O	B-API:0.713786
function	O	O:0.998981
in	O	O:0.999981
pandas	O	O:0.999805
after	O	O:0.999944
update	O	O:0.995682
	
I	O	O:0.999962
tried	O	O:0.999929
to	O	O:0.999944
apply	O	O:0.904523
'	O	O:0.999958
manually	O	O:0.998632
'	O	O:0.999991
the	O	O:0.999965
function	O	O:0.999980
recursively	O	O:0.999866
to	O	O:0.999996
see	O	O:0.999999
if	O	O:1.000000
some	O	O:0.999970
of	O	O:0.999998
the	O	O:0.999987
dates	O	O:0.999827
passed	O	O:0.999670
as	O	O:0.999993
the	O	O:0.999981
x	O	O:0.999915
parameter	O	O:0.999799
in	O	O:0.999988
the	O	O:0.999992
lambda	O	O:0.999508
definition	O	O:0.999889
where	O	O:0.999912
wrong	O	O:0.999514
,	O	O:0.999980
but	O	O:0.999975
managed	O	O:0.999831
to	O	O:0.999996
get	O	O:0.999999
correct	O	O:0.999909
results	O	O:0.999991
any	O	O:0.999990
time	O	O:0.999803
.	O	O:0.999828
	
But	O	O:0.999916
the	O	O:0.999967
`	O	O:0.999971
apply	O	B-API:0.998259
`	O	O:0.999870
method	O	O:0.999786
just	O	O:0.999865
seem	O	O:0.999965
not	O	O:0.999973
to	O	O:0.999999
work	O	O:0.999997
anymore	O	O:0.999978
,	O	O:0.999993
and	O	O:0.999977
cannot	O	O:0.999801
understand	O	O:0.999667
why	O	O:0.999925
.	O	O:0.999640
	
You	O	O:0.999967
need	O	O:0.999962
to	O	O:0.999990
use	O	O:0.999996
`	O	O:0.999822
|	O	O:0.999212
`	O	O:0.999998
instead	O	O:0.999929
of	O	O:0.999996
`	O	O:0.999979
or	O	O:0.999783
`	O	O:0.999980
.	O	O:0.999708
	
The	O	O:0.999433
`	O	O:0.999904
and	O	O:0.999541
`	O	O:0.999988
and	O	O:0.999459
`	O	O:0.999994
or	O	O:0.999395
`	O	O:0.999993
operators	O	O:0.999324
are	O	O:0.999995
special	O	O:0.998630
in	O	O:0.999899
Python	O	O:0.997880
and	O	O:0.999992
don't	O	O:0.999691
interact	O	O:0.999732
well	O	O:0.999937
with	O	O:0.999969
things	O	O:0.999878
like	O	O:0.999953
numpy	O	O:0.999798
and	O	O:0.999992
pandas	O	O:0.999916
that	O	O:0.999835
try	O	O:0.999989
to	O	O:0.999998
apply	O	O:0.974975
to	O	O:0.999992
them	O	O:0.999988
elementwise	O	O:0.999955
across	O	O:0.999942
a	O	O:0.999975
collection	O	O:0.997123
.	O	O:0.999941
	
So	O	O:0.999881
for	O	O:0.999989
these	O	O:0.999894
contexts	O	O:0.998875
,	O	O:0.999996
they've	O	O:0.999813
redefined	O	O:0.999886
the	O	O:0.999891
"	O	O:0.999969
bitwise	O	O:0.997616
"	O	O:0.999979
operators	O	O:0.998607
`	O	O:0.999910
`	O	O:0.999900
and	O	O:0.999888
`	O	O:0.999982
|	O	O:0.998236
`	O	O:0.999988
to	O	O:0.999977
mean	O	O:0.999967
"	O	O:0.999970
and	O	O:0.999914
"	O	O:0.999972
and	O	O:0.999826
"	O	O:0.999974
or	O	O:0.999321
"	O	O:0.999901
.	O	O:0.999755
	
Actually	O	O:0.999488
,	O	O:0.999999
many	O	O:0.999868
of	O	O:0.999956
DataFrameGroupBy	B-API	B-API:0.811926
object	O	O:0.999972
methods	O	O:0.999906
such	O	O:0.999815
as	O	O:0.999963
(	O	O:0.999784
apply	O	B-API:0.520013
,	O	O:0.999921
transform	O	B-API:0.710885
,	O	O:0.999981
aggregate	O	B-API:0.721964
,	O	O:0.999977
head	O	O:0.999752
,	O	O:0.999998
first	O	O:0.999891
,	O	O:0.999998
last	O	O:0.999103
)	O	O:0.999994
return	O	O:0.997958
a	O	O:0.999955
DataFrame	B-API	O:0.922662
object	O	O:0.999474
.	O	O:0.999868
	
I	O	O:0.999970
used	O	O:0.999467
the	O	O:0.999533
method	O	O:0.999860
`	O	O:0.999985
filter	O	O:0.966291
`	O	O:0.999991
in	O	O:0.999749
[	O	O:0.999996
one	O	O:0.999962
]	O	O:0.999496
(	O	O:0.999951
#URL	O	O:0.999919
)	O	O:0.999992
of	O	O:0.999968
my	O	O:0.999963
blog	O	O:0.999925
posts	O	O:0.999296
.	O	O:0.999851
	
Define	O	O:0.999658
the	O	O:0.999798
function	O	O:0.999866
you	O	O:0.999985
want	O	O:0.999986
to	O	O:0.999992
apply	O	O:0.936792
.	O	O:0.999489
	
#CODE	O	O:0.998453
	
Then	O	O:0.999205
,	O	O:0.999997
apply	O	O:0.643680
it	O	O:0.999640
.	O	O:0.999793
	
#CODE	O	O:0.998453
	
Efficient	O	O:0.999359
way	O	O:0.999936
to	O	O:0.999975
apply	O	O:0.996879
multiple	O	O:0.999687
filters	O	O:0.996287
to	O	O:0.999974
pandas	O	O:0.999997
DataFrame	B-API	O:0.996159
or	O	O:0.999965
Series	O	O:0.999603
	
I	O	O:0.999993
have	O	O:0.999994
a	O	O:0.999988
scenario	O	O:0.999888
where	O	O:0.999990
a	O	O:0.999982
user	O	O:0.998403
wants	O	O:0.999802
to	O	O:0.999958
apply	O	O:0.975787
several	O	O:0.999520
filters	O	O:0.998533
to	O	O:0.999995
a	O	O:0.999999
Pandas	O	O:0.999789
DataFrame	B-API	O:0.988520
or	O	O:0.999949
Series	O	O:0.999023
object	O	O:0.999757
.	O	O:0.999876
	
Essentially	O	O:0.999873
,	O	O:0.999991
I	O	O:0.999998
want	O	O:0.999983
to	O	O:0.999973
efficiently	O	O:0.999998
chain	O	O:0.999882
a	O	O:0.999999
bunch	O	O:0.999511
of	O	O:0.999982
filtering	O	O:0.963641
(	O	O:0.999988
comparison	O	O:0.999927
operations	O	O:0.999958
)	O	O:0.999988
together	O	O:0.999782
that	O	O:0.999924
are	O	O:0.999998
specified	O	O:0.999920
at	O	O:0.999992
run-time	O	O:0.999949
by	O	O:0.999964
the	O	O:0.999970
user	O	O:0.991752
.	O	O:0.999596
	
I	O	O:0.999988
want	O	O:0.999972
to	O	O:0.999990
take	O	O:0.999999
a	O	O:1.000000
dictionary	O	O:0.999936
of	O	O:0.999989
the	O	O:0.999950
following	O	O:0.999714
form	O	O:0.999695
and	O	O:0.999993
apply	O	O:0.961079
each	O	O:0.996731
operation	O	O:0.999679
to	O	O:0.999998
a	O	O:0.999999
given	O	O:0.991108
Series	O	O:0.999721
object	O	O:0.999613
and	O	O:0.999992
return	O	O:0.999842
a	O	O:0.999718
'	O	O:0.999934
filtered	O	O:0.998570
'	O	O:0.999931
Series	O	O:0.999501
object	O	O:0.999595
.	O	O:0.999868
	
#CODE	O	O:0.998453
	
Your	O	O:0.999826
right	O	O:0.999431
,	O	O:0.999993
boolean	O	O:0.994570
is	O	O:0.999992
more	O	O:0.999581
efficient	O	O:0.999870
since	O	O:0.999860
it	O	O:0.999970
doesn't	O	O:0.999995
make	O	O:0.999989
a	O	O:1.000000
copy	O	O:0.982598
of	O	O:0.999998
the	O	O:0.999924
data	O	O:0.999868
.	O	O:0.999896
	
However	O	O:0.999753
,	O	O:0.999994
my	O	O:0.999987
scenario	O	O:0.999236
is	O	O:0.999997
a	O	O:0.999965
bit	O	O:0.999876
more	O	O:0.999822
tricky	O	O:0.999762
than	O	O:0.999986
your	O	O:0.999845
example	O	O:0.999545
.	O	O:0.999942
	
The	O	O:0.999974
input	O	O:0.999902
I	O	O:0.999994
receive	O	O:0.998525
is	O	O:0.999967
a	O	O:0.999987
dictionary	O	O:0.999776
defining	O	O:0.999851
what	O	O:0.999655
filters	O	O:0.999515
to	O	O:0.999987
apply	O	O:0.902238
.	O	O:0.999390
	
My	O	O:0.999955
example	O	O:0.999801
could	O	O:0.999946
do	O	O:1.000000
something	O	O:0.999992
like	O	O:0.999759
`	O	O:0.999997
df	O	O:0.998752
[(	O	O:0.999970
ge	O	O:0.695602
(	O	O:0.999970
df	O	O:0.999695
[	O	O:0.999915
'	O	O:0.999982
col1	O	O:0.999668
']	O	O:0.999984
,	O	O:0.999913
1	O	O:0.999855
)	O	O:0.999943
&	O	O:0.999911
le	O	O:0.999485
(	O	O:0.999977
df	O	O:0.999618
[	O	O:0.999914
'	O	O:0.999982
col1	O	O:0.999660
']	O	O:0.999980
,	O	O:0.999811
1	O	O:0.999835
)]`	O	O:0.998902
.	O	O:0.999677
	
The	O	O:0.999924
issue	O	O:0.999731
for	O	O:0.999983
me	O	O:0.999929
really	O	O:0.998007
is	O	O:0.999991
the	O	O:0.999975
dictionary	O	O:0.999897
with	O	O:0.999963
the	O	O:0.999988
filters	O	O:0.998714
could	O	O:0.999616
contain	O	O:0.999990
lots	O	O:0.999990
of	O	O:0.999982
operators	O	O:0.999025
and	O	O:0.999995
chaining	O	O:0.999994
them	O	O:0.999243
together	O	O:0.997446
is	O	O:0.999979
cumbersome	O	O:0.996428
.	O	O:0.999909
	
Maybe	O	O:0.999836
I	O	O:0.999992
could	O	O:0.999989
add	O	O:0.999969
each	O	O:0.999779
intermediate	O	O:0.999589
boolean	O	O:0.999636
array	O	O:0.999965
to	O	O:0.999988
a	O	O:0.999999
big	O	O:0.999073
array	O	O:0.999830
and	O	O:0.999994
then	O	O:0.999976
just	O	O:0.999952
use	O	O:0.999991
`	O	O:0.999651
map	O	B-API:0.991936
`	O	O:0.999997
to	O	O:0.999946
apply	O	O:0.979439
the	O	O:0.999502
`	O	O:0.999794
and	O	O:0.999287
`	O	O:0.999994
operator	O	O:0.998861
to	O	O:0.999998
them	O	O:0.999960
?	O	O:0.999971
	
Similar	O	O:0.999167
to	O	O:0.999970
@USER	O	O:0.999986
suggestion	O	O:0.999809
,	O	O:0.999997
you	O	O:0.999988
can	O	O:0.999990
apply	O	O:0.990238
`	O	O:0.999977
difflib	O	O:0.571507
`	O	O:0.999980
'	O	O:0.999881
s	O	O:0.999919
`	O	O:0.999993
get_closest_matches	O	O:0.947619
`	O	O:0.999996
to	O	O:0.999879
`	O	O:1.000000
df2	O	O:0.999246
`'	O	O:0.999882
s	O	O:0.999141
index	O	O:0.999529
and	O	O:0.999998
then	O	O:0.999968
apply	O	O:0.949125
a	O	O:0.999960
`	O	O:0.999837
join	O	B-API:0.998024
`	O	O:0.999920
:	O	O:0.999851
#CODE	O	O:0.999910
	
If	O	O:0.999898
these	O	O:0.999937
were	O	O:0.999981
columns	O	O:0.999961
,	O	O:0.999994
in	O	O:0.999995
the	O	O:0.999993
same	O	O:0.999970
vein	O	O:0.999829
you	O	O:0.999995
could	O	O:0.999996
apply	O	O:0.968066
to	O	O:0.999986
the	O	O:0.999999
column	O	O:0.999980
then	O	O:0.999866
`	O	O:1.000000
merge	O	B-API:0.969403
`	O	O:0.999873
:	O	O:0.999843
#CODE	O	O:0.999909
	
As	O	O:0.999987
a	O	O:0.999998
heads	O	O:0.998836
up	O	O:0.999887
,	O	O:0.999998
this	O	O:0.999936
basically	O	O:0.999929
works	O	O:0.999970
,	O	O:0.999992
except	O	O:0.999913
if	O	O:0.999980
no	O	O:0.999995
match	O	O:0.998678
is	O	O:0.999984
found	O	O:0.999593
,	O	O:0.999994
or	O	O:0.999994
if	O	O:0.999987
you	O	O:0.999998
have	O	O:0.999987
NaNs	O	O:0.999951
in	O	O:0.999986
either	O	O:0.999981
column	O	O:0.999823
.	O	O:0.999930
	
Instead	O	O:0.999971
of	O	O:0.999993
directly	O	O:0.999896
applying	O	O:0.999842
`	O	O:0.999787
get_close_matches	O	B-API:0.529660
`	O	O:0.999995
,	O	O:0.999973
I	O	O:0.999992
found	O	O:0.999822
it	O	O:0.999948
easier	O	O:0.999919
to	O	O:0.999993
apply	O	O:0.952369
the	O	O:0.999937
following	O	O:0.988139
function	O	O:0.999763
.	O	O:0.999837
	
The	O	O:0.999970
choice	O	O:0.999834
of	O	O:0.999983
NaN	O	O:0.996015
replacements	O	O:0.999768
will	O	O:0.999766
depend	O	O:0.999981
a	O	O:0.999997
lot	O	O:0.999489
on	O	O:0.999998
your	O	O:0.999782
dataset	O	O:0.999846
.	O	O:0.999923
	
#CODE	O	O:0.998453
	
I	O	O:0.999931
used	O	O:0.999957
this	O	O:0.997064
and	O	O:0.999983
DataFrame.apply	B-API	B-API:0.958405
to	O	O:0.999858
apply	O	O:0.926949
it	O	O:0.999939
to	O	O:0.999989
all	O	O:1.000000
major	O	O:0.999983
columns	O	O:0.999547
in	O	O:0.999976
the	O	O:0.999989
dataframe	B-API	O:0.994803
.	O	O:0.999855
	
After	O	O:0.999780
thinking	O	O:0.999599
about	O	O:0.999863
it	O	O:0.999987
a	O	O:0.999980
bit	O	O:0.999889
more	O	O:0.999862
,	O	O:0.999987
I	O	O:0.999994
think	O	O:0.999987
this	O	O:0.998887
is	O	O:0.999992
the	O	O:0.999916
intended	O	O:0.999015
design	O	O:0.999381
,	O	O:0.999922
and	O	O:0.999996
it	O	O:0.999991
perfectly	O	O:0.999279
accomplishes	O	O:0.999855
the	O	O:0.999951
goal	O	O:0.997501
.	O	O:0.999855
	
You	O	O:0.999912
can	O	O:0.999906
either	O	O:0.999997
load	O	O:0.999439
the	O	O:0.999988
file	O	O:0.999612
and	O	O:0.999999
then	O	O:0.999964
filter	O	O:0.999746
using	O	O:0.999944
`	O	O:0.999943
df	O	O:0.995520
[	O	O:0.999991
df	O	O:0.999137
[	O	O:0.999917
'	O	O:0.999988
field	O	O:0.999906
']	O	O:0.999975
constant	O	O:0.999440
]`	O	O:0.999977
,	O	O:0.999992
or	O	O:0.999997
if	O	O:0.999990
you	O	O:0.999998
have	O	O:0.999994
a	O	O:0.999999
very	O	O:0.999398
large	O	O:0.999882
file	O	O:0.998525
and	O	O:0.999986
you	O	O:0.999984
are	O	O:0.999979
worried	O	O:0.999926
about	O	O:0.999827
memory	O	O:0.999849
running	O	O:0.999201
out	O	O:0.999887
,	O	O:0.999999
then	O	O:0.999825
use	O	O:0.999993
an	O	O:0.999931
iterator	O	O:0.999697
and	O	O:0.999985
apply	O	O:0.696637
the	O	O:0.999745
filter	O	O:0.986067
as	O	O:0.999992
you	O	O:0.999971
concatenate	O	O:0.966512
chunks	O	O:0.999948
of	O	O:0.999998
your	O	O:0.999916
file	O	O:0.999597
e.g.	O	O:0.998898
:	O	O:0.999962
#CODE	O	O:0.999822
	
Think	O	O:0.999631
of	O	O:0.999970
np.datetime64	O	O:0.953350
the	O	O:0.999994
same	O	O:0.999872
way	O	O:0.999963
you	O	O:0.999975
would	O	O:0.999984
about	O	O:0.999985
np.int8	O	O:0.997174
,	O	O:0.999959
np.int16	O	O:0.994645
,	O	O:0.999982
etc	O	O:0.999938
and	O	O:0.999996
apply	O	O:0.641595
the	O	O:0.999845
same	O	O:0.999735
methods	O	O:0.999795
to	O	O:0.999990
convert	O	O:0.999892
beetween	O	O:0.999297
Python	O	O:0.999945
objects	O	O:0.999983
such	O	O:0.999860
as	O	O:0.999991
int	O	O:0.989358
,	O	O:0.999971
datetime	O	O:0.971604
and	O	O:0.999978
corresponding	O	O:0.998187
numpy	O	O:0.998943
objects	O	O:0.998018
.	O	O:0.999776
	
In	O	O:0.999986
this	O	O:0.999936
case	O	O:0.999964
they're	O	O:0.999969
equivalent	O	O:0.999166
.	O	O:0.999916
	
Apply	O	O:0.999270
can	O	O:0.999949
also	O	O:0.999990
do	O	O:0.999992
aggregation	O	O:0.997098
and	O	O:0.999992
other	O	O:0.999827
things	O	O:0.997068
	
You	O	O:0.999817
are	O	O:0.999989
looking	O	O:0.999744
for	O	O:0.999943
`	O	O:0.999959
apply	O	B-API:0.995117
`	O	O:0.999347
(	O	O:0.998107
`	O	O:0.999997
merge	O	B-API:0.977499
`	O	O:0.999955
is	O	O:0.999990
like	O	O:0.999978
a	O	O:0.999998
database	O	O:0.999705
join	O	B-API:0.963760
.	O	O:0.999418
):	O	O:0.999954
#CODE	O	O:0.999667
	
Update	O	O:0.999008
:	O	O:0.999976
if	O	O:0.999990
you're	O	O:0.999977
doing	O	O:0.999986
this	O	O:0.999967
to	O	O:0.999982
a	O	O:0.999999
DatetimeIndex	B-API	B-API:0.845310
/	O	O:0.999971
datetime64	O	O:0.999501
column	O	O:0.999952
a	O	O:0.999980
better	O	O:0.999119
way	O	O:0.999882
is	O	O:0.999986
to	O	O:0.999965
use	O	O:0.999990
`	O	O:0.999828
np.round	O	O:0.867678
`	O	O:0.999999
directly	O	O:0.998301
rather	O	O:0.999974
than	O	O:0.999844
via	O	O:0.999950
an	O	O:0.999982
apply	O	B-API:0.553342
/	O	O:0.998086
map	O	B-API:0.995278
:	O	O:0.999909
#CODE	O	O:0.999753
	
Hence	O	O:0.999898
you	O	O:0.999973
can	O	O:0.999993
apply	O	O:0.998594
this	O	O:0.999892
to	O	O:0.999991
the	O	O:0.999999
entire	O	O:0.998739
index	O	O:0.999219
:	O	O:0.999975
#CODE	O	O:0.999928
	
@USER	O	O:0.999253
you're	O	O:0.999960
right	O	O:0.999950
of	O	O:0.999997
course	O	O:0.999435
!	O	O:0.999980
	
I	O	O:0.999955
forgot	O	O:0.999873
about	O	O:0.998513
milli-seconds	O	O:0.998669
...	O	O:0.999412
whoops	O	O:0.998793
!	O	O:0.999905
	
I	O	O:0.999986
have	O	O:0.999905
corrected	O	O:0.999735
this	O	O:0.999904
and	O	O:0.999992
added	O	O:0.999887
how	O	O:0.999903
to	O	O:0.999988
apply	O	O:0.997255
this	O	O:0.999758
to	O	O:0.999991
the	O	O:1.000000
entire	O	O:0.999590
dt_index	O	O:0.978203
.	O	O:0.999893
	
The	O	O:0.999868
`	O	O:0.999960
for	O	O:0.999605
`	O	O:0.999983
loops	O	O:0.993691
and	O	O:0.999991
`	O	O:0.999981
append	O	B-API:0.994232
`	O	O:0.999966
s	O	O:0.997307
will	O	O:0.999917
not	O	O:0.999991
be	O	O:0.999995
efficient	O	O:0.999455
and	O	O:0.999961
should	O	O:0.999953
be	O	O:0.999948
avoided	O	O:0.999762
.	O	O:0.999303
	
Try	O	O:0.999915
rewrting	O	O:0.999513
these	O	O:0.999905
using	O	O:0.999980
numpy	O	O:0.997860
functions	O	O:0.997611
and	O	O:0.999975
/	O	O:0.999965
or	O	O:0.999830
the	O	O:0.999965
DataFrame	B-API	O:0.994082
`	O	O:0.999986
apply	O	B-API:0.995677
`	O	O:0.999632
method	O	O:0.998882
...	O	O:0.999712
	
Also	O	O:0.999724
,	O	O:0.999990
would	O	O:0.999979
you	O	O:0.999996
agree	O	O:0.999997
then	O	O:0.999953
,	O	O:1.000000
using	O	O:0.999999
your	O	O:0.999156
suggestion	O	O:0.999186
,	O	O:0.999999
if	O	O:0.999984
we	O	O:0.999997
want	O	O:0.999972
to	O	O:0.999996
apply	O	O:0.996022
a	O	O:0.999786
function	O	O:0.998467
/	O	O:0.999986
algorithm	O	O:0.999859
restricted	O	O:0.999933
every	O	O:0.999979
unique	O	O:0.943082
date	O	O:0.997546
in	O	O:0.999972
the	O	O:0.999992
file	O	O:0.999846
one	O	O:0.999976
should	O	O:0.999993
just	O	O:0.999960
groupby	B-API	B-API:0.795778
the	O	O:0.999875
'	O	O:0.999884
datetime	O	O:0.996819
'	O	O:0.999874
object	O	O:0.999739
?	O	O:0.999936
	
When	O	O:0.999745
you	O	O:0.999990
do	O	O:0.999993
`	O	O:0.999985
len	O	B-API:0.990699
(	O	O:0.999995
df	O	O:0.997679
[	O	O:0.999904
'	O	O:0.999983
column	O	O:0.999956
name	O	O:0.999986
'])`	O	O:0.999881
you	O	O:0.999925
are	O	O:0.999997
just	O	O:0.999964
getting	O	O:0.999965
one	O	O:0.999958
number	O	O:0.999925
,	O	O:0.999992
namely	O	O:0.999995
the	O	O:0.999995
number	O	O:0.999986
of	O	O:0.999999
rows	O	O:0.999815
in	O	O:0.999989
the	O	O:0.999986
DataFrame	B-API	O:0.949635
(	O	O:0.999977
i.e.	O	O:0.999837
,	O	O:0.999998
the	O	O:0.999995
length	O	O:0.999548
of	O	O:0.999980
the	O	O:0.999996
column	O	O:0.999990
itself	O	O:0.999729
)	O	O:0.999987
.	O	O:0.999768
	
If	O	O:0.999957
you	O	O:0.999988
want	O	O:0.999984
to	O	O:0.999996
apply	O	O:0.979911
`	O	O:0.999894
len	O	B-API:0.983087
`	O	O:0.999997
to	O	O:0.999905
each	O	O:0.999996
element	O	O:0.999805
in	O	O:0.999993
the	O	O:0.999997
column	O	O:0.999943
,	O	O:0.999994
use	O	O:0.999966
`	O	O:0.999957
df	O	O:0.997242
[	O	O:0.999980
'	O	O:0.999976
column	O	O:0.999959
name	O	O:0.999979
']	O	O:0.999875
.map	B-API	B-API:0.997757
(	O	O:0.999811
len	O	O:0.564970
)`	O	O:0.999639
.	O	O:0.998462
	
So	O	O:0.999829
try	O	O:0.999882
#CODE	O	O:0.999744
	
`	O	O:0.999957
transform	O	B-API:0.968194
`	O	O:0.999824
is	O	O:0.999896
not	O	O:0.999985
that	O	O:0.999986
well	O	O:0.999926
documented	O	O:0.999627
,	O	O:0.999944
but	O	O:0.999966
it	O	O:0.999983
seems	O	O:0.999979
that	O	O:0.999974
the	O	O:0.999992
way	O	O:0.999873
it	O	O:0.999944
works	O	O:0.999695
is	O	O:0.999996
that	O	O:0.999839
what	O	O:0.999990
the	O	O:0.999995
transform	O	B-API:0.867858
function	O	O:0.999259
is	O	O:0.999989
passed	O	O:0.986424
is	O	O:0.999975
not	O	O:0.999955
the	O	O:0.999997
entire	O	O:0.999922
group	O	O:0.999688
as	O	O:0.999996
a	O	O:0.999985
dataframe	B-API	O:0.974765
,	O	O:0.999985
but	O	O:0.999996
a	O	O:0.999998
single	O	O:0.999934
column	O	O:0.999989
of	O	O:0.999998
a	O	O:0.999997
single	O	O:0.999633
group	O	O:0.996709
.	O	O:0.999833
	
I	O	O:0.999944
don't	O	O:0.999945
think	O	O:0.999079
it's	O	O:0.999928
really	O	O:0.999893
meant	O	O:0.999752
for	O	O:0.999966
what	O	O:0.999111
you're	O	O:0.999943
trying	O	O:0.999940
to	O	O:0.999994
do	O	O:0.999993
,	O	O:0.999987
and	O	O:0.999999
your	O	O:0.999915
solution	O	O:0.999348
with	O	O:0.999954
`	O	O:0.999982
apply	O	B-API:0.964318
`	O	O:0.999750
is	O	O:0.999749
fine	O	O:0.998976
.	O	O:0.999909
	
So	O	O:0.999982
basically	O	O:0.999964
,	O	O:0.999997
you	O	O:0.999964
don't	O	O:0.999988
need	O	O:0.999994
to	O	O:0.999997
use	O	O:0.999999
transform	O	B-API:0.746958
here	O	O:0.997274
.	O	O:0.999909
	
`	O	O:0.999971
apply	O	B-API:0.974772
`	O	O:0.999807
is	O	O:0.999925
the	O	O:0.999991
appropriate	O	O:0.999579
function	O	O:0.999936
here	O	O:0.999761
,	O	O:0.999997
because	O	O:0.999939
`	O	O:0.999988
apply	O	B-API:0.911441
`	O	O:0.999971
really	O	O:0.997925
does	O	O:0.999951
operate	O	O:0.999877
on	O	O:0.999997
each	O	O:0.999961
group	O	O:0.999878
as	O	O:0.999999
a	O	O:0.999985
single	O	O:0.999029
DataFrame	B-API	O:0.998589
,	O	O:0.999990
while	O	O:0.999958
`	O	O:0.999986
transform	O	B-API:0.900774
`	O	O:0.999998
operates	O	O:0.998765
on	O	O:0.999998
each	O	O:0.999961
column	O	O:0.999980
of	O	O:0.999997
each	O	O:0.999627
group	O	O:0.998436
.	O	O:0.999903
	
If	O	O:0.999874
it's	O	O:0.999845
already	O	O:0.999904
in	O	O:0.999971
the	O	O:0.999981
DataFrame	B-API	O:0.997065
you	O	O:0.999976
could	O	O:0.999979
use	O	O:0.999996
`	O	O:0.999978
apply	O	B-API:0.981678
`	O	O:0.999969
to	O	O:0.999793
convert	O	O:0.999981
those	O	O:0.999983
strings	O	O:0.999363
which	O	O:0.999971
are	O	O:0.999994
numbers	O	O:0.999921
into	O	O:0.999157
integers	O	O:0.999518
(	O	O:0.999985
using	O	O:0.999791
`	O	O:0.999878
str.isdigit	B-API	B-API:0.996935
`	O	O:0.999824
):	O	O:0.999689
#CODE	O	O:0.999812
	
@USER	O	O:0.998798
uncommented	O	O:0.999013
,	O	O:0.999973
and	O	O:0.999987
commented	O	O:0.999811
the	O	O:0.999908
`	O	O:0.999952
to_dict()	B-API	B-API:0.999912
`	O	O:0.999983
.	O	O:0.999540
	
Although	O	O:0.999664
,	O	O:0.999986
`	O	O:0.999994
apply	O	B-API:0.971153
`	O	O:0.999851
is	O	O:0.999888
the	O	O:0.999972
important	O	O:0.999829
bit	O	O:0.999905
of	O	O:0.999993
my	O	O:0.999810
answer	O	O:0.999779
(	O	O:0.999964
weirdly	O	O:0.999806
no	O	O:0.999994
other	O	O:0.999936
answers	O	O:0.999953
seem	O	O:0.999796
to	O	O:0.999974
use	O	O:0.999998
it	O	O:0.999854
)	O	O:0.999954
.	O	O:0.999861
	
Many	O	O:0.999389
thanks	O	O:0.998312
!	O	O:0.999786
	
I	O	O:0.999938
was	O	O:0.999963
under	O	O:0.999744
the	O	O:0.999915
impression	O	O:0.999855
that	O	O:0.999900
apply	O	O:0.617697
was	O	O:0.999930
preferable	O	O:0.999409
to	O	O:0.999983
loops	O	O:0.999958
.	O	O:0.999846
	
Looking	O	O:0.999543
at	O	O:0.999985
the	O	O:0.999970
source	O	O:0.998887
,	O	O:0.999913
I'm	O	O:0.999942
not	O	O:0.999993
that	O	O:0.999991
sure	O	O:0.999982
,	O	O:0.999997
as	O	O:0.999993
it	O	O:0.999705
is	O	O:0.999997
just	O	O:0.999828
regular	O	O:0.999937
python	O	O:0.999218
with	O	O:0.999992
more	O	O:0.999751
functionality	O	O:0.999960
than	O	O:0.999891
the	O	O:0.999995
one	O	O:0.999981
I	O	O:0.999995
need	O	O:0.999953
.	O	O:0.999762
	
Moreover	O	O:0.999870
,	O	O:0.999990
I	O	O:0.999986
assumed	O	O:0.999962
that	O	O:0.999723
Pandas	O	O:0.999984
indexes	O	O:0.999582
provided	O	O:0.999213
enough	O	O:0.999773
performance	O	O:0.999698
.	O	O:0.999668
	
A	O	O:0.999960
dict	O	O:0.998874
is	O	O:0.999995
just	O	O:0.999704
perfect	O	O:0.999849
--	O	O:0.999968
I	O	O:0.999994
just	O	O:0.999997
have	O	O:0.999959
to	O	O:0.999996
find	O	O:0.999997
the	O	O:0.999996
way	O	O:0.999982
to	O	O:0.999990
put	O	O:0.999998
the	O	O:0.999999
data	O	O:0.999865
in	O	O:0.999998
the	O	O:0.999999
files	O	O:0.999928
as	O	O:0.999997
a	O	O:0.999993
dict	O	O:0.999264
instead	O	O:0.999994
than	O	O:0.999980
as	O	O:0.999998
df	O	O:0.999650
,	O	O:0.999984
since	O	O:0.999751
originally	O	O:0.999670
it	O	O:0.999995
was	O	O:0.999989
precisely	O	O:0.999971
a	O	O:0.999994
dict	O	O:0.996188
--	O	O:0.999942
	
apply	O	B-API:0.671790
on	O	O:0.999872
group	O	O:0.998625
replicating	O	O:0.999478
complete	O	O:0.995969
MultiIndex	O	O:0.911846
	
I	O	O:0.999936
would	O	O:0.999995
like	O	O:0.999900
to	O	O:0.999999
fill	O	O:0.999955
gaps	O	O:0.999750
in	O	O:0.999998
a	O	O:0.999999
column	O	O:0.999723
in	O	O:0.999985
my	O	O:0.999988
DataFrame	B-API	O:0.998941
using	O	O:0.999973
a	O	O:0.999952
cubic	O	O:0.946610
spline	O	O:0.999455
.	O	O:0.999536
	
If	O	O:0.999876
I	O	O:0.999989
were	O	O:0.999968
to	O	O:0.999980
export	O	O:0.999985
to	O	O:0.999995
a	O	O:1.000000
list	O	O:0.999769
then	O	O:0.999956
I	O	O:1.000000
could	O	O:0.999987
use	O	O:0.999976
the	O	O:0.999917
numpy's	O	O:0.993593
`	O	O:0.999841
interp1d	O	O:0.843294
`	O	O:0.999935
function	O	O:0.998782
and	O	O:0.999995
apply	O	O:0.926430
this	O	O:0.998258
to	O	O:0.999976
the	O	O:1.000000
missing	O	O:0.998923
values	O	O:0.998948
.	O	O:0.999883
	
OK	O	O:0.999938
thanks	O	O:0.999345
for	O	O:0.999995
your	O	O:0.999696
help	O	O:0.991136
!	O	O:0.999957
and	O	O:0.999985
last	O	O:0.999805
thing	O	O:0.999560
I	O	O:0.999980
hope	O	O:0.998698
.	O	O:0.999411
	
I	O	O:0.999981
have	O	O:0.999995
multiple	O	O:0.999938
columns	O	O:0.999945
each	O	O:0.999871
containing	O	O:0.999833
NaN	O	O:0.999646
data	O	O:0.999772
.	O	O:0.999903
	
Sol	O	O:0.999673
the	O	O:0.999921
df.dropna()	B-API	B-API:0.993606
drops	O	O:0.998036
too	O	O:0.999990
many	O	O:0.999987
rows	O	O:0.998033
.	O	O:0.999899
	
How	O	O:0.999901
do	O	O:0.999966
you	O	O:0.999987
apply	O	O:0.924892
that	O	O:0.999873
to	O	O:0.999996
one	O	O:1.000000
column	O	O:0.999969
only	O	O:0.999665
(	O	O:0.999996
i.e.	O	O:0.999567
'	O	O:0.999981
data1	O	O:0.999585
')	O	O:0.999828
	
Apply	O	O:0.998320
function	O	O:0.999712
on	O	O:0.999933
Pandas	O	O:0.999933
dataframe	B-API	O:0.997017
	
I'm	O	O:0.999955
a	O	O:0.999990
newbie	O	O:0.999524
to	O	O:0.999979
pandas	O	O:0.999997
dataframe	B-API	O:0.998333
,	O	O:0.999984
and	O	O:0.999995
I	O	O:0.999988
wanted	O	O:0.999938
to	O	O:0.999961
apply	O	O:0.993927
a	O	O:0.999877
function	O	O:0.999469
to	O	O:0.999997
each	O	O:0.999996
column	O	O:0.999920
so	O	O:0.999997
that	O	O:0.999961
it	O	O:0.999997
computes	O	O:0.999843
for	O	O:0.999995
each	O	O:0.998331
element	O	O:0.999694
x	O	O:0.999866
,	O	O:0.999991
x	O	O:0.999859
/	O	O:0.999988
max	O	O:0.917746
of	O	O:0.999972
column	O	O:0.999511
.	O	O:0.999963
	
Pandas	O	O:0.997859
DataFrame	B-API	O:0.971656
:	O	O:0.999980
apply	O	O:0.605793
function	O	O:0.999846
to	O	O:0.999983
all	O	O:0.999999
columns	O	O:0.999762
	
How	O	O:0.999898
to	O	O:0.999990
apply	O	O:0.910901
function	O	O:0.999931
to	O	O:0.999954
date	O	O:0.999950
indexed	O	O:0.999810
DataFrame	B-API	O:0.992818
	
Then	O	O:0.999053
`	O	O:0.999998
apply	O	B-API:0.969516
`	O	O:0.999995
this	O	O:0.999380
to	O	O:0.999999
each	O	O:0.999994
state	O	O:0.999821
in	O	O:0.999972
the	O	O:0.999967
DataFrame	B-API	O:0.929497
:	O	O:0.999935
#CODE	O	O:0.999892
	
The	O	O:0.999970
real	O	O:0.995210
issue	O	O:0.999008
is	O	O:0.999789
--	O	O:0.999891
and	O	O:0.999979
now	O	O:0.999986
comes	O	O:0.999626
a	O	O:0.999997
threefold	O	O:0.996192
question	O	O:0.999478
:	O	O:0.999987
how	O	O:0.999966
can	O	O:0.999987
it	O	O:1.000000
be	O	O:0.999999
that	O	O:0.999987
just	O	O:0.999887
importing	O	O:0.999968
pandas	O	O:0.997815
broke	O	O:0.999852
matplotlib's	O	O:0.999844
ability	O	O:0.999180
to	O	O:0.999978
handle	O	O:0.999923
datetime	O	O:0.999660
objects	O	O:0.999765
,	O	O:0.999995
when	O	O:0.999949
just	O	O:0.999976
two	O	O:1.000000
lines	O	O:0.999045
earlier	O	O:0.999785
pandas	O	O:0.999756
was	O	O:0.999828
clearly	O	O:0.999644
not	O	O:0.999996
even	O	O:0.999868
involved	O	O:0.999923
in	O	O:0.999994
that	O	O:0.999974
same	O	O:0.999986
operation	O	O:0.999867
?	O	O:0.999968
	
Does	O	O:0.999688
pandas	O	O:0.999895
upon	O	O:0.999858
import	O	O:0.999689
silently	O	O:0.999706
alter	O	O:0.999880
other	O	O:0.999947
modules	O	O:0.998700
in	O	O:0.999976
the	O	O:0.999995
top	O	O:0.999947
level	O	O:0.999782
namespace	O	O:0.999977
to	O	O:0.999993
force	O	O:1.000000
them	O	O:0.999894
to	O	O:0.999999
make	O	O:0.999997
use	O	O:0.999964
of	O	O:0.999977
pandas	O	O:0.999426
methods	O	O:0.999847
?	O	O:0.999844
	
And	O	O:0.999204
is	O	O:0.999995
this	O	O:0.999946
acceptable	O	O:0.999965
behavour	O	O:0.999879
for	O	O:0.999987
a	O	O:0.999946
python	O	O:0.993548
module	O	O:0.999822
?	O	O:0.999886
	
Because	O	O:0.999848
I	O	O:0.999996
need	O	O:0.999990
to	O	O:0.999980
be	O	O:1.000000
able	O	O:0.999981
to	O	O:0.999997
rely	O	O:0.999984
on	O	O:0.999980
it	O	O:0.999992
that	O	O:0.999988
importing	O	O:0.999945
,	O	O:0.999996
say	O	O:0.999960
,	O	O:0.999999
a	O	O:0.999997
random	O	O:0.994602
number	O	O:0.999820
module	O	O:0.999817
,	O	O:0.999997
won't	O	O:0.999969
silently	O	O:0.999861
change	O	O:0.999804
,	O	O:0.999996
say	O	O:0.999871
,	O	O:0.999997
the	O	O:0.999954
pickle	O	O:0.984013
module	O	O:0.999961
to	O	O:0.999996
apply	O	O:0.995191
a	O	O:0.999977
random	O	O:0.994286
salt	O	O:0.996897
to	O	O:0.999995
everything	O	O:0.999987
it	O	O:0.999957
writes	O	O:0.999691
..	O	O:0.999843
	
I	O	O:0.999992
have	O	O:0.999991
a	O	O:0.999992
time	O	O:0.999827
series	O	O:0.999904
object	O	O:0.999816
`	O	O:0.999995
grouped	O	O:0.998328
`	O	O:0.999997
of	O	O:0.999891
the	O	O:0.999990
type	O	O:0.998331
`	O	O:0.999990
pandas.core.groupby.SeriesGroupBy	B-API	B-API:0.844905
object	O	O:0.999927
at	O	O:0.999987
0x03F1A9F0	O	O:0.995907
`	O	O:0.999953
.	O	O:0.999411
	
`	O	O:0.999964
grouped.sum()	O	B-API:0.656323
`	O	O:0.999992
gives	O	O:0.999573
the	O	O:0.999998
desired	O	O:0.998178
result	O	O:0.999847
but	O	O:0.999969
I	O	O:0.999994
cannot	O	O:0.999984
get	O	O:0.999893
rolling_sum	B-API	B-API:0.970339
to	O	O:0.999995
work	O	O:0.999994
with	O	O:0.999990
the	O	O:0.999983
`	O	O:0.999975
groupby	B-API	B-API:0.999677
`	O	O:0.999961
object	O	O:0.996388
.	O	O:0.999922
	
Is	O	O:0.999974
there	O	O:0.999965
any	O	O:0.999982
way	O	O:0.999957
to	O	O:0.999972
apply	O	O:0.996325
rolling	O	O:0.982097
functions	O	O:0.999067
to	O	O:0.999904
`	O	O:0.999999
groupby	B-API	B-API:0.999698
`	O	O:0.999992
objects	O	O:0.995269
?	O	O:0.999971
	
For	O	O:0.999691
example	O	O:0.996811
:	O	O:0.999957
#CODE	O	O:0.999872
	
I'm	O	O:0.999886
not	O	O:0.999998
sure	O	O:0.999972
of	O	O:0.999993
the	O	O:0.999958
mechanics	O	O:0.999686
,	O	O:0.999917
but	O	O:0.999990
this	O	O:0.999700
works	O	O:0.999844
.	O	O:0.999928
	
Note	O	O:0.999802
,	O	O:0.999994
the	O	O:0.999995
returned	O	O:0.999657
value	O	O:0.999579
is	O	O:0.999997
just	O	O:0.999763
an	O	O:0.999994
ndarray	B-API	B-API:0.554619
.	O	O:0.999667
	
I	O	O:0.999983
think	O	O:0.999948
you	O	O:0.999902
could	O	O:0.999972
apply	O	O:0.968771
any	O	O:0.999987
cumulative	O	O:0.995958
or	O	O:0.999943
"	O	O:0.999991
rolling	O	O:0.982174
"	O	O:0.999796
function	O	O:0.998757
in	O	O:0.999992
this	O	O:0.999896
manner	O	O:0.999449
and	O	O:0.999982
it	O	O:0.999986
should	O	O:0.999942
have	O	O:0.999982
the	O	O:1.000000
same	O	O:0.999914
result	O	O:0.999813
.	O	O:0.999957
	
Pass	O	O:0.999400
the	O	O:0.999863
`	O	O:0.999978
axis	O	O:0.998011
`	O	O:0.999997
option	O	O:0.999780
to	O	O:0.999996
the	O	O:0.999999
`	O	O:0.999976
apply	O	B-API:0.969413
`	O	O:0.999606
function	O	O:0.990680
:	O	O:0.999975
#CODE	O	O:0.999797
	
Great	O	O:0.997335
.	O	O:0.999750
	
Does	O	O:0.999777
apply	O	O:0.878676
pass	O	O:0.996256
the	O	O:0.999955
columns	O	O:0.999915
including	O	O:0.999664
item1	O	O:0.998659
,	O	O:0.999984
item2	O	O:0.999791
when	O	O:0.999846
I	O	O:0.999994
use	O	O:0.999991
axis=0	O	O:0.976271
?	O	O:0.999704
	
What	O	O:0.999583
happens	O	O:0.999926
when	O	O:0.999939
there	O	O:0.999895
is	O	O:0.999998
a	O	O:0.999981
hierarchical	O	O:0.994534
indexing	O	O:0.998822
in	O	O:0.999973
the	O	O:0.999992
columns	O	O:0.999700
and	O	O:0.999999
the	O	O:0.999999
rows	O	O:0.996215
?	O	O:0.999934
	
You	O	O:0.999951
can	O	O:0.999930
use	O	O:0.999987
the	O	O:0.999942
DataFrame	B-API	O:0.981515
`	O	O:0.999984
apply	O	B-API:0.997095
`	O	O:0.999668
method	O	O:0.992526
:	O	O:0.999975
#CODE	O	O:0.999860
	
You	O	O:0.999788
may	O	O:0.999977
find	O	O:0.999920
it	O	O:0.999997
faster	O	O:0.999966
to	O	O:0.999990
extract	O	O:0.999450
the	O	O:0.999993
index	O	O:0.999962
as	O	O:0.999999
a	O	O:0.999995
column	O	O:0.999542
and	O	O:0.999990
use	O	O:0.999890
`	O	O:0.999677
apply	O	B-API:0.996055
`	O	O:0.999816
and	O	O:0.996151
`	O	O:0.999991
bfill	B-API	B-API:0.998973
`	O	O:0.999961
.	O	O:0.998574
	
Here's	O	O:0.999151
one	O	O:0.999773
(	O	O:0.999989
slow	O	O:0.999726
!	O	O:0.999962
)	O	O:0.999962
workaround	O	O:0.999843
to	O	O:0.999986
do	O	O:0.999998
it	O	O:0.999997
using	O	O:0.999927
`	O	O:0.999947
apply	O	B-API:0.995989
`	O	O:0.999626
,	O	O:0.999533
not	O	O:0.999945
ideal	O	O:0.998585
but	O	O:0.999938
it	O	O:0.999870
works	O	O:0.999376
:	O	O:0.999969
#CODE	O	O:0.999681
	
It	O	O:0.999957
seems	O	O:0.999982
like	O	O:0.999980
a	O	O:0.999988
bug	O	O:0.997102
(	O	O:0.999994
that	O	O:0.999923
you	O	O:0.999992
can't	O	O:0.999981
do	O	O:0.999993
`	O	O:0.999993
apply	O	B-API:0.993726
(	O	O:0.999911
lambda	O	O:0.997435
x	O	O:0.998801
:	O	O:0.999908
x.month	O	O:0.999865
)`)	O	O:0.999860
,	O	O:0.999984
perhaps	O	O:0.999766
worth	O	O:0.999958
adding	O	O:0.999937
as	O	O:0.999980
an	O	O:0.999942
issue	O	O:0.999868
on	O	O:0.999938
github	O	O:0.998177
.	O	O:0.999910
	
As	O	O:0.999891
Wes	O	O:0.999690
would	O	O:0.999915
say	O	O:0.999944
:	O	O:0.999991
"	O	O:0.999992
welcome	O	O:0.999487
to	O	O:0.999988
hell	O	O:0.999927
"	O	O:0.999965
.	O	O:0.999805
	
This	O	O:0.999620
happens	O	O:0.999957
when	O	O:0.999954
using	O	O:0.999982
apply	O	O:0.530876
as	O	O:0.999512
well	O	O:0.992105
#CODE	O	O:0.999721
	
How	O	O:0.999897
to	O	O:0.999983
apply	O	O:0.987680
quantile	O	O:0.998856
to	O	O:0.999962
pandas	O	O:0.999986
groupby	B-API	B-API:0.958117
object	O	O:0.999417
?	O	O:0.999838
	
I	O	O:0.999958
ran	O	O:0.999971
a	O	O:0.999970
formula	O	O:0.999494
on	O	O:0.999991
the	O	O:0.999987
price	O	O:0.999842
col	O	O:0.999757
of	O	O:0.999991
the	O	O:0.999934
csv	O	O:0.999922
file	O	O:0.999680
.	O	O:0.999882
	
Indeed	O	O:0.999088
,	O	O:0.999996
they	O	O:0.999932
are	O	O:0.999996
all	O	O:0.999970
"	O	O:0.999987
numbers	O	O:0.990096
"	O	O:0.999973
.	O	O:0.999930
apply	O	B-API:0.924024
(	O	O:0.999913
float	O	O:0.995544
)	O	O:0.999981
for	O	O:0.999990
some	O	O:0.999307
reason	O	O:0.998715
was	O	O:0.999959
rejected	O	O:0.999824
w	O	O:0.999822
/	O	O:0.999820
ValueError	O	O:0.998543
:	O	O:0.999860
could	O	O:0.999912
not	O	O:0.999998
convert	O	O:0.999794
string	O	O:0.999889
to	O	O:0.999907
float	O	O:0.999608
:	O	O:0.999976
price	O	O:0.998209
.	O	O:0.999944
	
`	O	O:0.999889
applymap()	B-API	B-API:0.999469
`	O	O:0.999983
can	O	O:0.999671
be	O	O:1.000000
used	O	O:0.999976
to	O	O:0.999977
apply	O	O:0.990840
a	O	O:0.999837
function	O	O:0.999256
to	O	O:0.999997
every	O	O:0.999997
element	O	O:0.999970
of	O	O:0.999997
a	O	O:0.999970
`	O	O:0.999984
dataframe	B-API	O:0.905384
`	O	O:0.999983
#CODE	O	O:0.998911
	
Have	O	O:0.999830
you	O	O:0.999924
tested	O	O:0.999939
the	O	O:0.999978
`	O	O:0.999987
calcvol	O	O:0.983954
`	O	O:0.999998
function	O	O:0.999861
separately	O	O:0.999832
?	O	O:0.999959
	
It's	O	O:0.999755
good	O	O:0.999858
practice	O	O:0.999966
to	O	O:0.999989
do	O	O:0.999999
that	O	O:0.999974
first	O	O:0.999887
before	O	O:0.999949
you	O	O:0.999889
apply	O	B-API:0.547588
.	O	O:0.999592
	
(	O	O:0.999925
I	O	O:0.999990
don't	O	O:0.999961
suppose	O	O:0.999935
this	O	O:0.999864
is	O	O:0.999997
a	O	O:0.999996
simple	O	O:0.999710
as	O	O:0.999997
a	O	O:0.999929
forgotten	O	O:0.998216
axis	O	O:0.999625
argument	O	O:0.999604
:	O	O:0.999857
`	O	O:0.999992
optionsData.apply	O	O:0.982899
(	O	O:0.999994
calcvol	O	O:0.998397
,	O	O:0.999994
axis=1	O	O:0.999569
)`	O	O:0.999637
?	O	O:0.999856
	
You	O	O:0.999941
could	O	O:0.999977
create	O	O:0.999986
a	O	O:0.999994
function	O	O:0.999344
which	O	O:0.999946
takes	O	O:0.999905
an	O	O:0.999997
entry	O	O:0.999904
in	O	O:0.999899
`	O	O:0.999988
df.D	O	O:0.941007
`	O	O:0.999996
columns	O	O:0.997742
and	O	O:0.999996
returns	O	O:0.999881
a	O	O:0.999816
Series	O	O:0.995074
.	O	O:0.999820
	
Then	O	O:0.999791
you	O	O:0.999996
can	O	O:0.999976
use	O	O:0.999998
Series	O	O:0.999326
`	O	O:0.999985
apply	O	B-API:0.959057
`	O	O:0.999921
with	O	O:0.999803
this	O	O:0.999094
function	O	O:0.999705
:	O	O:0.999959
#CODE	O	O:0.999865
	
Subset	O	O:0.999325
the	O	O:0.999795
`	O	O:0.999981
dataframe	B-API	O:0.967748
`	O	O:0.999997
to	O	O:0.999994
only	O	O:1.000000
those	O	O:0.999995
records	O	O:0.999881
with	O	O:0.999965
the	O	O:0.999986
desired	O	O:0.999448
Status	O	O:0.998778
.	O	O:0.999880
	
`	O	O:0.999953
Groupby	B-API	B-API:0.808830
`	O	O:0.999990
the	O	O:0.999368
ID	O	O:0.999721
and	O	O:0.999977
apply	O	B-API:0.637612
the	O	O:0.999724
lambda	O	O:0.987230
function	O	O:0.999804
`	O	O:0.999976
diff()	B-API	B-API:0.995825
.sum()	B-API	B-API:0.993243
`	O	O:0.999964
to	O	O:0.999964
each	O	O:0.999994
group	O	O:0.996768
.	O	O:0.999926
	
Use	O	O:0.999755
`	O	O:0.999978
transform	O	B-API:0.964536
`	O	O:0.999994
instead	O	O:0.999936
of	O	O:0.999995
`	O	O:0.999983
apply	O	B-API:0.963810
`	O	O:0.999965
because	O	O:0.995361
`	O	O:0.999995
transform	O	B-API:0.933581
`	O	O:0.999991
returns	O	O:0.997860
an	O	O:0.999988
indexed	O	O:0.999966
series	O	O:0.999920
which	O	O:0.999967
you	O	O:0.999994
can	O	O:0.999991
use	O	O:0.999999
to	O	O:0.999993
assign	O	O:0.999968
to	O	O:0.999999
a	O	O:1.000000
new	O	O:0.999907
column	O	O:0.999684
'	O	O:0.999996
diff	O	B-API:0.917428
'	O	O:0.999882
.	O	O:0.999828
	
The	O	O:0.999951
modeling	O	O:0.999369
process	O	O:0.998699
requires	O	O:0.999936
that	O	O:0.999968
I	O	O:0.999999
analyze	O	O:0.999984
every	O	O:0.999545
column	O	O:0.999811
,	O	O:0.999996
look	O	O:0.999623
for	O	O:0.999986
interesting	O	O:0.999552
relationships	O	O:0.999687
with	O	O:0.999957
some	O	O:0.999720
outcome	O	O:0.999965
variable	O	O:0.999873
,	O	O:0.999989
and	O	O:0.999998
create	O	O:0.999674
new	O	O:0.999948
compound	O	O:0.999822
columns	O	O:0.999956
that	O	O:0.999907
describe	O	O:0.999978
those	O	O:0.999942
relationships	O	O:0.999514
.	O	O:0.999844
	
The	O	O:0.999958
columns	O	O:0.999958
that	O	O:0.999968
I	O	O:0.999999
explore	O	O:0.999886
are	O	O:0.999928
usually	O	O:0.999980
done	O	O:0.999452
in	O	O:0.999986
small	O	O:0.999792
sets	O	O:0.999368
.	O	O:0.999819
	
For	O	O:0.999915
example	O	O:0.999806
,	O	O:0.999990
I	O	O:0.999997
will	O	O:0.999982
focus	O	O:0.999662
on	O	O:0.999999
a	O	O:0.999999
set	O	O:0.999879
of	O	O:0.999997
say	O	O:0.999907
20	O	O:0.999992
columns	O	O:0.999940
just	O	O:0.999927
dealing	O	O:0.999627
with	O	O:0.999864
property	O	O:0.999854
values	O	O:0.999522
and	O	O:0.999989
observe	O	O:0.999735
how	O	O:0.999954
they	O	O:0.999939
relate	O	O:0.999932
to	O	O:0.999994
defaulting	O	O:0.999992
on	O	O:0.999996
a	O	O:0.999992
loan	O	O:0.990787
.	O	O:0.999906
	
Once	O	O:0.999809
those	O	O:0.999844
are	O	O:0.999975
explored	O	O:0.999570
and	O	O:0.999994
new	O	O:0.999973
columns	O	O:0.999405
are	O	O:0.999983
created	O	O:0.999842
,	O	O:0.999994
I	O	O:0.999999
then	O	O:0.999994
move	O	O:0.999940
on	O	O:0.999999
to	O	O:0.999998
another	O	O:1.000000
group	O	O:0.999694
of	O	O:0.999995
columns	O	O:0.999807
,	O	O:0.999999
say	O	O:0.999979
college	O	O:0.999619
education	O	O:0.999860
,	O	O:0.999993
and	O	O:0.999996
repeat	O	O:0.998777
the	O	O:0.999903
process	O	O:0.996093
.	O	O:0.999861
	
What	O	O:0.999520
I'm	O	O:0.999986
doing	O	O:0.999657
is	O	O:0.999991
creating	O	O:0.998831
candidate	O	O:0.999956
variables	O	O:0.999947
that	O	O:0.999922
explain	O	O:0.999950
the	O	O:0.999990
relationship	O	O:0.998955
between	O	O:0.999889
my	O	O:0.999994
data	O	O:0.999815
and	O	O:0.999999
some	O	O:0.999879
outcome	O	O:0.999167
.	O	O:0.999833
	
At	O	O:0.999952
the	O	O:0.999989
very	O	O:0.999929
end	O	O:0.999948
of	O	O:0.999997
this	O	O:0.999908
process	O	O:0.999903
,	O	O:0.999997
I	O	O:0.999997
apply	O	O:0.966544
some	O	O:0.998854
learning	O	O:0.998636
techniques	O	O:0.999888
that	O	O:0.999947
create	O	O:0.999962
an	O	O:0.999997
equation	O	O:0.999984
out	O	O:0.999979
of	O	O:0.999993
those	O	O:0.999898
compound	O	O:0.999838
columns	O	O:0.999659
.	O	O:0.999811
	
You	O	O:0.999942
say	O	O:0.999984
that	O	O:0.999931
the	O	O:0.999997
best	O	O:0.999645
way	O	O:0.999889
is	O	O:0.999979
to	O	O:0.999991
plot	O	O:0.999995
each	O	O:0.999618
condition	O	O:0.999513
(	O	O:0.999999
like	O	O:0.999860
`	O	O:0.999992
subset_a	O	O:0.758136
`	O	O:0.999992
,	O	O:0.999809
`	O	O:0.999996
subset_b	O	O:0.993893
`)	O	O:0.999995
separately	O	O:0.998354
.	O	O:0.999912
	
What	O	O:0.999847
if	O	O:0.999991
you	O	O:0.999990
have	O	O:0.999992
many	O	O:0.999982
conditions	O	O:0.999638
,	O	O:0.999997
e.g.	O	O:0.999920
you	O	O:0.999988
want	O	O:0.999990
to	O	O:0.999999
split	O	O:0.999934
up	O	O:0.999989
the	O	O:0.999987
scatters	O	O:0.999819
into	O	O:0.999592
4	O	O:0.999997
types	O	O:0.999486
of	O	O:0.999995
points	O	O:0.999638
or	O	O:0.999998
even	O	O:0.999958
more	O	O:0.999955
,	O	O:0.999996
plotting	O	O:0.999944
each	O	O:0.998989
in	O	O:0.999994
different	O	O:0.999941
shape	O	O:0.999735
/	O	O:0.999945
color	O	O:0.999254
.	O	O:0.999798
	
How	O	O:0.999837
can	O	O:0.999970
you	O	O:0.999999
elegantly	O	O:0.999991
apply	O	O:0.932980
condition	O	O:0.999896
a	O	O:0.999985
,	O	O:0.999969
b	O	O:0.999934
,	O	O:0.999988
c	O	O:0.999863
,	O	O:0.999989
etc	O	O:0.999874
.	O	O:0.999962
and	O	O:0.999998
make	O	O:0.999966
sure	O	O:0.999763
you	O	O:0.999996
then	O	O:0.999981
plot	O	O:0.999974
"	O	O:0.999999
the	O	O:0.999994
rest	O	O:0.997706
"	O	O:0.999863
(	O	O:0.999949
things	O	O:0.999912
not	O	O:0.999936
in	O	O:0.999999
any	O	O:0.999988
of	O	O:0.999994
these	O	O:0.999920
conditions	O	O:0.999924
)	O	O:0.999996
as	O	O:0.999991
the	O	O:0.999993
last	O	O:0.999310
step	O	O:0.999846
?	O	O:0.999969
	
"	O	O:0.999921
AssertionError	O	O:0.999826
when	O	O:0.999882
using	O	O:0.999974
apply	O	B-API:0.916849
after	O	O:0.993878
GroupBy	B-API	B-API:0.929308
"	O	O:0.999615
.	O	O:0.999453
	
It's	O	O:0.999578
since	O	O:0.999935
been	O	O:0.999143
fixed	O	O:0.999936
.	O	O:0.999830
	
Is	O	O:0.999969
there	O	O:0.999953
any	O	O:0.999981
workaround	O	O:0.999659
on	O	O:0.999878
0.10	O	O:0.999674
?	O	O:0.999963
	
In	O	O:0.999990
some	O	O:0.999962
cases	O	O:0.999918
I	O	O:0.999996
can	O	O:0.999984
get	O	O:0.999982
`	O	O:0.999998
apply	O	B-API:0.950775
`	O	O:0.999984
working	O	O:0.988816
after	O	O:0.999791
`	O	O:0.999906
groupby	B-API	B-API:0.999841
`	O	O:0.999979
and	O	O:0.999757
in	O	O:0.999997
other	O	O:0.999006
cases	O	O:0.999043
not	O	O:0.999891
.	O	O:0.999939
	
Now	O	O:0.999398
groupby	B-API	B-API:0.905946
both	O	O:0.999870
columns	O	O:0.999487
and	O	O:0.999993
apply	O	O:0.624552
the	O	O:0.999592
lambda	O	O:0.952732
function	O	O:0.998279
:	O	O:0.999903
#CODE	O	O:0.999890
	
I	O	O:0.999972
actually	O	O:0.999974
think	O	O:0.998644
it	O	O:0.999903
won't	O	O:0.999948
always	O	O:0.999993
make	O	O:0.999975
sense	O	O:0.999895
to	O	O:0.999992
apply	O	O:0.926650
`	O	O:0.999929
reshape	O	B-API:0.976098
`	O	O:0.999993
to	O	O:0.999971
a	O	O:0.999999
Series	O	O:0.992747
(	O	O:0.999994
do	O	O:0.999992
you	O	O:0.999975
ignore	O	O:0.995009
the	O	O:0.999980
index	O	O:0.999829
?	O	O:0.999987
)	O	O:0.999990
,	O	O:0.999972
and	O	O:0.999996
that	O	O:0.999923
you're	O	O:0.999960
correct	O	O:0.999910
in	O	O:0.999996
thinking	O	O:0.999386
it's	O	O:0.999931
just	O	O:0.999767
numpy's	O	O:0.999670
reshape	O	B-API:0.916860
:	O	O:0.999865
	
You	O	O:0.999864
can	O	O:0.999844
groupby	B-API	B-API:0.953046
the	O	O:0.999939
index	O	O:0.998813
and	O	O:0.999996
apply	O	O:0.959601
a	O	O:0.999129
function	O	O:0.999437
that	O	O:0.999842
returns	O	O:0.999965
one	O	O:0.999993
value	O	O:0.999598
per	O	O:0.999833
index	O	O:0.999847
group	O	O:0.997186
.	O	O:0.999938
	
Here	O	O:0.999779
,	O	O:0.999995
I	O	O:0.999999
take	O	O:0.999964
the	O	O:0.999990
first	O	O:0.999718
value	O	O:0.999202
:	O	O:0.999940
#CODE	O	O:0.999893
	
In	O	O:0.999909
SQL	O	O:0.999682
,	O	O:0.999998
this	O	O:0.999253
is	O	O:0.999997
standard	O	O:0.999755
set	O	O:0.999832
logic	O	O:0.999907
,	O	O:0.999992
accomplished	O	O:0.999880
differently	O	O:0.999960
depending	O	O:0.999821
on	O	O:0.999981
the	O	O:0.999978
dialect	O	O:0.999605
,	O	O:0.999984
but	O	O:0.999993
a	O	O:0.999996
standard	O	O:0.988897
function	O	O:0.999863
.	O	O:0.999830
	
How	O	O:0.999914
do	O	O:0.999967
I	O	O:0.999998
elegantly	O	O:0.999910
apply	O	O:0.824444
this	O	O:0.998047
in	O	O:0.999931
Pandas	O	O:0.999763
?	O	O:0.999931
	
I	O	O:0.999891
would	O	O:0.999990
love	O	O:0.999589
to	O	O:0.999998
input	O	O:0.999999
some	O	O:0.999955
code	O	O:0.999379
,	O	O:0.999987
but	O	O:0.999993
nothing	O	O:0.999673
I	O	O:0.999997
have	O	O:0.999927
is	O	O:0.999995
even	O	O:0.999868
remotely	O	O:0.999900
correct	O	O:0.999628
.	O	O:0.999917
	
It's	O	O:0.999960
a	O	O:0.999995
situation	O	O:0.999565
in	O	O:0.999988
which	O	O:0.999881
I	O	O:0.999992
don't	O	O:0.999976
know	O	O:0.999828
what	O	O:0.999933
I	O	O:0.999982
don't	O	O:0.999934
know	O	O:0.998840
.....	O	O:0.998987
	
Pandas	O	O:0.999497
has	O	O:0.999884
set	O	O:0.999620
logic	O	O:0.999828
for	O	O:0.999885
intersection	O	B-API:0.552835
and	O	O:0.999973
union	O	O:0.991594
,	O	O:0.999889
but	O	O:0.999979
nothing	O	O:0.999354
for	O	O:0.999974
disjoint	O	O:0.997442
.	O	O:0.999310
	
The	O	O:0.999612
`	O	O:0.999960
Target	O	O:0.995532
`	O	O:0.999972
is	O	O:0.999986
just	O	O:0.999966
a	O	O:0.999997
constant	O	O:0.999051
,	O	O:0.999995
so	O	O:0.999997
instead	O	O:0.999980
of	O	O:0.999999
trying	O	O:0.999939
to	O	O:0.999996
find	O	O:0.999988
the	O	O:0.999996
root	O	O:0.999771
for	O	O:0.999978
`	O	O:0.999972
f	O	O:0.991798
(	O	O:0.999995
x	O	O:0.999823
)	O	O:0.999989
=	O	O:0.999824
0	O	O:0.999887
`	O	O:0.999971
,	O	O:0.999940
you'd	O	O:0.999986
define	O	O:0.998831
`	O	O:0.999986
g	O	O:0.993627
(	O	O:0.999995
x	O	O:0.999822
)	O	O:0.999983
=	O	O:0.999751
f	O	O:0.999373
(	O	O:0.999979
x	O	O:0.999830
)	O	O:0.999953
-	O	O:0.999969
Target	O	O:0.999035
`	O	O:0.999974
and	O	O:0.999969
apply	O	O:0.723818
`	O	O:0.999110
newton	O	B-API:0.529035
`	O	O:0.999996
to	O	O:0.999635
`	O	O:1.000000
g	O	O:0.996635
`	O	O:0.999984
.	O	O:0.999521
	
EDIT	O	O:0.995529
:	O	O:0.999978
Thanks	O	O:0.999770
for	O	O:0.999988
the	O	O:0.999990
two	O	O:0.999909
responses	O	O:0.999901
,	O	O:0.999996
I	O	O:0.999998
can	O	O:0.999986
reproduce	O	O:0.999967
those	O	O:0.999979
with	O	O:0.999967
no	O	O:0.999963
problem	O	O:0.999524
.	O	O:0.999907
	
However	O	O:0.999972
when	O	O:0.999887
I	O	O:0.999996
use	O	O:0.999997
the	O	O:0.999577
apply	O	B-API:0.961168
function	O	O:0.999399
to	O	O:0.999979
my	O	O:1.000000
case	O	O:0.999954
I	O	O:0.999999
get	O	O:0.999992
an	O	O:0.999707
'	O	O:0.999973
unhashable	O	O:0.999925
type	O	O:0.998769
'	O	O:0.999965
error	O	O:0.999660
.	O	O:0.999816
	
#CODE	O	O:0.998453
	
You	O	O:0.999777
are	O	O:0.999990
just	O	O:0.999848
printing	O	O:0.999802
these	O	O:0.996463
and	O	O:0.999982
not	O	O:0.999969
`	O	O:0.999987
apply	O	B-API:0.969228
`	O	O:0.999939
-ing	O	O:0.999453
them	O	O:0.999788
to	O	O:0.999982
the	O	O:0.999999
DataFrame	B-API	O:0.990356
,	O	O:0.999988
here's	O	O:0.999951
one	O	O:0.999982
way	O	O:0.999987
to	O	O:0.999988
do	O	O:0.999992
it	O	O:0.999936
:	O	O:0.999945
	
If	O	O:0.999930
I	O	O:0.999990
understand	O	O:0.999963
you	O	O:0.999868
right	O	O:0.999807
,	O	O:0.999997
you're	O	O:0.999986
looking	O	O:0.999750
for	O	O:0.999993
the	O	O:0.999940
`	O	O:0.999924
apply	O	B-API:0.998647
`	O	O:0.999628
method	O	O:0.994522
:	O	O:0.999975
#CODE	O	O:0.999860
	
apply	O	O:0.732751
a	O	O:0.999729
function	O	O:0.999337
to	O	O:0.999995
a	O	O:1.000000
pandas	O	O:0.999265
Dataframe	B-API	O:0.997731
whose	O	O:0.999842
retuned	O	O:0.999815
value	O	O:0.999742
is	O	O:0.999994
based	O	O:0.999622
on	O	O:0.999998
other	O	O:0.999981
rows	O	O:0.999445
	
I	O	O:0.999990
want	O	O:0.999981
to	O	O:0.999937
apply	O	O:0.979594
the	O	O:0.999977
same	O	O:0.999929
process	O	O:0.999648
to	O	O:0.999998
the	O	O:1.000000
whole	O	O:0.999882
quantity	O	O:0.999949
column	O	O:0.999779
.	O	O:0.999959
	
I	O	O:0.999951
don't	O	O:0.999973
know	O	O:0.999603
how	O	O:0.999992
to	O	O:0.999975
approach	O	O:1.000000
this	O	O:0.999945
problem	O	O:0.999912
with	O	O:0.999949
the	O	O:0.999989
pandas	O	O:0.999831
library	O	O:0.999945
other	O	O:0.999949
than	O	O:0.999944
looping	O	O:0.999766
through	O	O:0.999029
the	O	O:0.999958
Dataframe	B-API	O:0.990157
row	O	O:0.999981
by	O	O:0.999969
row	O	O:0.999866
.	O	O:0.999608
	
Here	O	O:0.999655
,	O	O:0.999990
we	O	O:0.999987
groupby	B-API	B-API:0.989790
`	O	O:0.999952
[	O	O:0.998988
'	O	O:0.999995
item	O	O:0.999344
'	O	O:0.999977
,	O	O:0.999977
'	O	O:0.999974
price	O	O:0.999222
']`	O	O:0.999883
and	O	O:0.999972
apply	O	O:0.554010
the	O	O:0.998162
function	O	O:0.999291
above	O	O:0.999451
.	O	O:0.999902
	
The	O	O:0.999870
output	O	O:0.998949
is	O	O:0.999997
a	O	O:0.999993
series	O	O:0.999920
of	O	O:0.999995
relative	O	O:0.999865
weights	O	O:0.999870
for	O	O:0.999985
the	O	O:0.999996
unique	O	O:0.872099
combinations	O	O:0.999532
of	O	O:0.999977
item	O	O:0.999628
and	O	O:0.999992
price	O	O:0.996946
.	O	O:0.999252
	
#CODE	O	O:0.998453
	
After	O	O:0.999595
building	O	O:0.999698
basic	O	O:0.999263
class	O	O:0.999884
with	O	O:0.999749
`	O	O:0.999969
__str__	B-API	B-API:0.994003
`	O	O:0.999986
and	O	O:0.999781
plotData()	O	O:0.989814
methods	O	O:0.998763
I	O	O:0.999955
would	O	O:0.999996
like	O	O:0.999934
to	O	O:0.999998
apply	O	O:0.995891
some	O	O:0.999351
filters	O	O:0.993394
and	O	O:0.999992
build	O	O:0.999938
a	O	O:0.999975
new	O	O:0.999509
class	O	O:0.999912
where	O	O:0.999985
additional	O	O:0.999892
column	O	O:0.999613
is	O	O:0.999989
the	O	O:0.999925
filter	O	O:0.971857
.	O	O:0.999778
	
I	O	O:0.999935
would	O	O:0.999996
like	O	O:0.999949
to	O	O:0.999998
do	O	O:1.000000
that	O	O:0.999946
in	O	O:0.999994
`	O	O:0.999987
__init__	O	B-API:0.674399
`	O	O:0.999983
but	O	O:0.999921
keep	O	O:0.999772
everything	O	O:0.999930
what	O	O:0.999608
already	O	O:0.999761
was	O	O:0.999958
done	O	O:0.999309
.	O	O:0.999900
	
In	O	O:0.999981
another	O	O:0.999964
words	O	O:0.999794
I	O	O:0.999976
don't	O	O:0.999995
want	O	O:0.999880
to	O	O:0.999986
re-write	O	O:0.999993
the	O	O:0.999993
whole	O	O:0.999766
`	O	O:0.999975
__init__	O	O:0.635959
`	O	O:0.999999
only	O	O:0.999905
want	O	O:0.999992
to	O	O:0.999993
add	O	O:0.999999
new	O	O:0.999985
column	O	O:0.999882
to	O	O:0.999993
the	O	O:0.999999
basic	O	O:0.999299
dataframe	B-API	O:0.993783
.	O	O:0.999876
	
However	O	O:0.999809
,	O	O:0.999994
when	O	O:0.999718
stored	O	O:0.995183
(	O	O:0.999987
and	O	O:0.999997
retrieved	O	O:0.999902
)	O	O:0.999969
dates	O	O:0.996146
are	O	O:0.999939
`	O	O:0.999996
unicode	O	O:0.995521
`	O	O:0.999988
rather	O	O:0.999775
than	O	O:0.999721
`	O	O:0.999983
Timestamp	O	O:0.906926
`	O	O:0.999976
.	O	O:0.999219
	
To	O	O:0.999982
convert	O	O:0.999672
back	O	O:0.999643
to	O	O:0.999998
what	O	O:0.999997
we	O	O:0.999996
started	O	O:0.999958
with	O	O:0.999973
we	O	O:0.999988
could	O	O:0.999965
`	O	O:0.999999
apply	O	B-API:0.932978
`	O	O:0.999796
`	O	O:0.999843
Timestamp	O	O:0.982863
`	O	O:0.999990
to	O	O:0.999941
the	O	O:1.000000
column	O	O:0.999649
and	O	O:0.999985
`	O	O:0.999982
set_index	B-API	B-API:0.999970
`	O	O:0.999866
:	O	O:0.999826
#CODE	O	O:0.999909
	
I	O	O:0.999966
try	O	O:0.999992
to	O	O:0.999987
apply	O	O:0.987304
exactly	O	O:0.999775
the	O	O:0.999984
same	O	O:0.999895
logic	O	O:0.999910
to	O	O:0.999997
my	O	O:1.000000
original	O	O:0.999810
problem	O	O:0.999916
with	O	O:0.999916
large	O	O:0.999657
dataframe	B-API	O:0.997556
inside	O	O:0.999909
a	O	O:0.999987
class	O	O:0.998043
.	O	O:0.999904
	
The	O	O:0.999942
code	O	O:0.993221
is	O	O:0.999902
:	O	O:0.999903
#CODE	O	O:0.999801
	
I	O	O:0.999971
found	O	O:0.999823
in	O	O:0.999905
here	O	O:0.999797
that	O	O:0.999986
there	O	O:0.999991
could	O	O:0.999991
be	O	O:1.000000
a	O	O:0.999998
problem	O	O:0.997949
with	O	O:0.999989
type	O	O:0.999474
of	O	O:0.999997
the	O	O:0.999972
columns	O	O:0.999633
but	O	O:0.999919
Depth	O	O:0.999256
is	O	O:0.999991
type	O	O:0.986492
`	O	O:0.999986
numpy.float64	O	O:0.798300
`	O	O:0.999991
Hper	O	O:0.982956
is	O	O:0.999994
type	O	O:0.995177
`	O	O:0.999991
float	O	O:0.950328
`	O	O:0.999994
Vper	O	O:0.981084
is	O	O:0.999994
type	O	O:0.995178
`	O	O:0.999992
float	O	O:0.978463
`	O	O:0.999998
so	O	O:0.999855
I	O	O:0.999994
understand	O	O:0.999836
how	O	O:0.999792
it	O	O:0.999982
can	O	O:0.999994
apply	O	O:0.974516
to	O	O:0.999990
my	O	O:0.999991
problem	O	O:0.999370
.	O	O:0.999912
	
Construct	O	O:0.997252
the	O	O:0.999952
index	O	O:0.999876
as	O	O:0.999970
desired	O	O:0.999394
and	O	O:0.999990
apply	O	O:0.689594
it	O	O:0.999595
to	O	O:0.999952
the	O	O:0.999999
dataframe	B-API	O:0.994748
	
Now	O	O:0.999932
create	O	O:0.999614
the	O	O:0.999955
desired	O	O:0.999106
index	O	O:0.999442
and	O	O:0.999988
apply	O	O:0.638079
it	O	O:0.998755
.	O	O:0.999651
	
Here	O	O:0.998179
are	O	O:0.999993
several	O	O:0.999950
approaches	O	O:0.999627
for	O	O:0.999840
the	O	O:0.999886
index	O	O:0.998555
.	O	O:0.999840
	
#CODE	O	O:0.998453
	
Apply	O	O:0.999939
multiple	O	O:0.999700
functions	O	O:0.999710
to	O	O:0.999991
multiple	O	O:0.999993
groupby	B-API	B-API:0.848269
columns	O	O:0.999507
	
The	O	O:0.999950
docs	O	O:0.999849
show	O	O:0.999657
how	O	O:0.999988
to	O	O:0.999991
apply	O	O:0.999070
multiple	O	O:0.999685
functions	O	O:0.999858
on	O	O:0.999996
a	O	O:0.999982
groupby	B-API	B-API:0.987665
object	O	O:0.999898
at	O	O:0.999990
a	O	O:0.999997
time	O	O:0.999955
using	O	O:0.999987
a	O	O:0.999980
dict	O	O:0.997982
with	O	O:0.999963
the	O	O:0.999965
output	O	O:0.999957
column	O	O:0.999979
names	O	O:0.999959
as	O	O:0.999997
the	O	O:0.999971
keys	O	O:0.988723
:	O	O:0.999956
#CODE	O	O:0.999905
	
What	O	O:0.999726
I	O	O:0.999997
want	O	O:0.999981
to	O	O:0.999908
do	O	O:0.999994
is	O	O:0.999990
apply	O	O:0.918993
multiple	O	O:0.999596
functions	O	O:0.998783
to	O	O:0.999984
several	O	O:0.999992
columns	O	O:0.995441
(	O	O:0.999983
but	O	O:0.999996
certain	O	O:0.999748
columns	O	O:0.999942
will	O	O:0.999920
be	O	O:0.999999
operated	O	O:0.999901
on	O	O:0.999987
multiple	O	O:0.999940
times	O	O:0.999738
)	O	O:0.999978
.	O	O:0.999826
	
Also	O	O:0.999746
,	O	O:1.000000
some	O	O:0.999876
functions	O	O:0.999918
will	O	O:0.999903
depend	O	O:0.999961
on	O	O:0.999998
other	O	O:0.999989
columns	O	O:0.999932
in	O	O:0.999987
the	O	O:0.999969
groupby	B-API	B-API:0.996351
object	O	O:0.997334
(	O	O:0.999982
like	O	O:0.999993
sumif	O	O:0.999245
functions	O	O:0.999811
)	O	O:0.999929
.	O	O:0.999822
	
My	O	O:0.999973
current	O	O:0.999469
solution	O	O:0.999633
is	O	O:0.999994
to	O	O:0.999982
go	O	O:1.000000
column	O	O:0.999989
by	O	O:0.999993
column	O	O:0.999919
,	O	O:0.999968
and	O	O:0.999998
doing	O	O:0.999983
something	O	O:0.999771
like	O	O:0.999663
the	O	O:0.999998
code	O	O:0.999814
above	O	O:0.999948
,	O	O:0.999999
using	O	O:0.999968
lambdas	O	O:0.999129
for	O	O:0.999808
functions	O	O:0.999933
that	O	O:0.999769
depend	O	O:0.999950
on	O	O:0.999998
other	O	O:0.999981
rows	O	O:0.999588
.	O	O:0.999836
	
But	O	O:0.999978
this	O	O:0.999457
is	O	O:0.999996
taking	O	O:0.999672
a	O	O:0.999990
long	O	O:0.999426
time	O	O:0.999744
,	O	O:0.999938
(	O	O:0.999988
I	O	O:0.999993
think	O	O:0.999903
it	O	O:0.999971
takes	O	O:0.999906
a	O	O:0.999998
long	O	O:0.999700
time	O	O:0.999964
to	O	O:0.999993
iterate	O	O:0.999995
through	O	O:0.999950
a	O	O:0.999964
groupby	B-API	B-API:0.996465
object	O	O:0.999454
)	O	O:0.999859
.	O	O:0.999799
	
I'll	O	O:0.999629
have	O	O:0.999919
to	O	O:0.999995
change	O	O:0.999983
it	O	O:0.999990
so	O	O:0.999997
that	O	O:0.999990
I	O	O:1.000000
iterate	O	O:0.999968
through	O	O:0.999487
the	O	O:0.999986
whole	O	O:0.998680
groupby	B-API	B-API:0.970109
object	O	O:0.999801
in	O	O:0.999990
a	O	O:0.999999
single	O	O:0.998891
run	O	O:0.998782
,	O	O:0.999963
but	O	O:0.999950
I'm	O	O:0.999976
wondering	O	O:0.999833
if	O	O:0.999989
there's	O	O:0.999975
a	O	O:0.999997
built	O	O:0.998710
in	O	O:0.999984
way	O	O:0.999773
in	O	O:0.999992
pandas	O	O:0.999935
to	O	O:0.999992
do	O	O:0.999999
this	O	O:0.999989
somewhat	O	O:0.999750
cleanly	O	O:0.999751
.	O	O:0.999913
	
@USER	O	O:0.998166
--	O	O:0.999938
My	O	O:0.999978
first	O	O:0.999831
thought	O	O:0.998308
was	O	O:0.999929
also	O	O:0.999948
that	O	O:0.999979
it	O	O:0.999944
worked	O	O:0.999940
the	O	O:0.999991
same	O	O:0.999315
,	O	O:0.999989
but	O	O:0.999990
I	O	O:0.999987
think	O	O:0.999934
DataFrame	B-API	O:0.991238
tries	O	O:0.999387
to	O	O:0.999993
apply	O	O:0.947750
it	O	O:0.999942
to	O	O:0.999993
the	O	O:1.000000
columns	O	O:0.999150
(	O	O:0.999988
without	O	O:0.999943
the	O	O:0.999917
ix	O	B-API:0.977154
)	O	O:0.999938
.	O	O:0.999743
	
I	O	O:0.999988
need	O	O:0.999981
to	O	O:0.999979
apply	O	O:0.997137
some	O	O:0.998217
function	O	O:0.999683
for	O	O:0.999997
every	O	O:0.999838
columns	O	O:0.999753
and	O	O:0.999996
create	O	O:0.999948
new	O	O:0.999982
columns	O	O:0.999825
in	O	O:0.999989
this	O	O:0.999968
DataFrame	B-API	O:0.997024
with	O	O:0.999916
special	O	O:0.999316
name	O	O:0.999853
.	O	O:0.999704
	
#CODE	O	O:0.998453
	
I	O	O:0.999965
would	O	O:0.999993
skip	O	O:0.997376
the	O	O:0.999995
`	O	O:0.999956
apply	O	B-API:0.998672
`	O	O:0.999825
method	O	O:0.998366
and	O	O:0.999999
just	O	O:0.999953
define	O	O:0.999678
the	O	O:0.999996
columns	O	O:0.999813
directly	O	O:0.999605
.	O	O:0.999935
	
#CODE	O	O:0.998453
	
Not	O	O:0.999974
as	O	O:0.999997
elegant	O	O:0.999362
as	O	O:0.999993
DSM's	O	O:0.998467
solution	O	O:0.998687
.	O	O:0.999848
	
But	O	O:0.999890
for	O	O:0.999981
whatever	O	O:0.999900
reason	O	O:0.999655
I	O	O:0.999995
avoid	O	O:0.999866
`	O	O:0.999936
apply	O	B-API:0.991475
`	O	O:0.999974
unless	O	O:0.997733
I	O	O:0.999996
really	O	O:0.999934
need	O	O:0.998962
it	O	O:0.999961
.	O	O:0.999962
	
add	O	O:0.999844
column	O	O:0.999889
with	O	O:0.999974
time	O	O:0.999961
rounded	O	O:0.999789
to	O	O:0.999988
millisec	O	O:0.999817
and	O	O:0.999963
groupby	B-API	B-API:0.976408
it	O	O:0.999910
,	O	O:0.999989
apply	O	B-API:0.732241
cumsum	B-API	B-API:0.988031
within	O	O:0.999639
each	O	O:0.999657
group	O	O:0.995938
	
Apply	O	O:0.999800
a	O	O:0.999982
lambda	O	O:0.990266
function	O	O:0.999988
that	O	O:0.999858
indexes	O	O:0.999971
the	O	O:0.999994
current	O	O:0.999934
time	O	O:0.999984
from	O	O:0.999974
the	O	O:0.999993
ts	O	O:0.999814
series	O	O:0.999822
.	O	O:0.999874
	
The	O	O:0.999607
function	O	O:0.999880
returns	O	O:0.999867
the	O	O:0.999995
sum	O	O:0.999782
of	O	O:0.999994
all	O	O:0.999991
ts	O	O:0.999994
entries	O	O:0.999386
between	O	O:0.996975
`	O	O:0.999991
x	O	O:0.999602
-	O	O:0.999993
ms	O	O:0.999719
and	O	O:0.999986
x	O	O:0.999832
`	O	O:0.999834
.	O	O:0.999659
	
#CODE	O	O:0.998453
	
But	O	O:0.999839
it	O	O:0.999977
seems	O	O:0.999957
inefficient	O	O:0.999938
to	O	O:0.999992
compute	O	O:0.999749
cumsum	B-API	B-API:0.789102
on	O	O:0.999994
each	O	O:0.999691
call	O	O:0.997978
.	O	O:0.999930
	
Is	O	O:0.999986
there	O	O:0.999987
a	O	O:0.999996
way	O	O:0.999920
to	O	O:0.999998
first	O	O:0.999989
compute	O	O:0.999558
the	O	O:0.999986
cumsums	O	O:0.999169
and	O	O:0.999998
then	O	O:0.999943
apply	O	B-API:0.573655
'	O	O:0.999986
ohcl	O	O:0.996958
'	O	O:0.999989
to	O	O:0.999998
the	O	O:1.000000
data	O	O:0.999802
?	O	O:0.999974
	
#CODE	O	O:0.998453
	
Here	O	O:0.999803
I	O	O:0.999995
create	O	O:0.999957
a	O	O:0.999996
dictionary	O	O:0.999961
of	O	O:0.999981
dictionaries	O	O:0.998129
.	O	O:0.999933
	
The	O	O:0.999941
outer	O	O:0.901675
key	O	O:0.999980
references	O	O:0.999797
the	O	O:0.999993
columns	O	O:0.999897
you	O	O:0.999995
want	O	O:0.999994
to	O	O:0.999997
apply	O	O:0.995368
the	O	O:0.999930
functions	O	O:0.999038
to	O	O:0.999952
.	O	O:0.999996
	
The	O	O:0.999914
inner	O	O:0.999232
key	O	O:0.999925
contains	O	O:0.999489
the	O	O:0.999997
names	O	O:0.999819
of	O	O:0.999998
your	O	O:0.999969
aggregation	O	O:0.999775
functions	O	O:0.999819
and	O	O:0.999980
the	O	O:0.999996
inner	O	O:0.998875
values	O	O:0.998755
are	O	O:0.999994
the	O	O:0.999997
functions	O	O:0.999796
you	O	O:0.999981
want	O	O:0.999987
to	O	O:0.999985
apply	O	O:0.768686
:	O	O:0.999801
#CODE	O	O:0.999426
	
@USER	O	O:0.999264
You	O	O:0.999900
can	O	O:0.999989
probably	O	O:0.999998
create	O	O:0.999947
a	O	O:0.999990
two-level	O	O:0.999729
index	O	O:0.999663
`	O	O:0.999946
[	O	O:0.999965
'	O	O:0.999997
date	O	O:0.997950
'	O	O:0.999974
,	O	O:0.999943
'	O	O:0.999987
time	O	O:0.999935
']`	O	O:0.999896
and	O	O:0.999997
then	O	O:0.999805
apply	O	O:0.921489
time	O	O:0.999972
filtering	O	O:0.998056
for	O	O:0.999979
the	O	O:0.999962
second	O	O:0.999630
level	O	O:0.998461
,	O	O:0.999962
but	O	O:0.999992
that	O	O:0.999300
is	O	O:0.999994
beyond	O	O:0.999907
my	O	O:0.999985
current	O	O:0.999926
level	O	O:0.999840
of	O	O:0.999995
pandas-fu	O	O:0.989226
now	O	O:0.999934
.	O	O:0.999936
	
Then	O	O:0.999697
we	O	O:0.999997
apply	O	O:0.953813
this	O	O:0.999866
to	O	O:0.999997
a	O	O:1.000000
slice	O	O:0.998977
of	O	O:0.999996
the	O	O:0.999927
`	O	O:0.999992
_rt	O	O:0.988250
`	O	O:0.999994
columns	O	O:0.997023
:	O	O:0.999987
#CODE	O	O:0.999873
	
All	O	O:0.999955
the	O	O:0.999993
values	O	O:0.997966
which	O	O:0.999819
we're	O	O:0.999971
using	O	O:0.999905
are	O	O:0.999955
within	O	O:0.996965
3	O	O:0.999937
standard	O	O:0.999591
deviations	O	O:0.999931
,	O	O:0.999991
so	O	O:0.999999
this	O	O:0.999860
cut	O	O:0.872239
isn't	O	O:0.999962
very	O	O:0.999636
interesting	O	O:0.999151
,	O	O:0.999969
but	O	O:0.999959
we	O	O:0.999987
can	O	O:0.999973
apply	O	O:0.989513
it	O	O:0.999775
anyhow	O	O:0.985695
:	O	O:0.999962
#CODE	O	O:0.999615
	
I'm	O	O:0.999926
new	O	O:0.999654
to	O	O:0.999976
pandas	O	O:0.999759
(	O	O:0.999939
and	O	O:0.999992
python	O	O:0.999706
)	O	O:0.999918
and	O	O:0.999980
have	O	O:0.999962
been	O	O:0.998919
slowly	O	O:0.999942
working	O	O:0.999819
my	O	O:0.999868
way	O	O:0.999967
trying	O	O:0.999895
to	O	O:0.999993
apply	O	O:0.970024
things	O	O:0.999276
learned	O	O:0.999000
to	O	O:0.999993
my	O	O:0.999998
own	O	O:0.999944
datasets	O	O:0.999782
.	O	O:0.999870
	
How	O	O:0.999884
to	O	O:0.999952
apply	O	O:0.983208
conditional	O	O:0.992564
logic	O	O:0.999826
to	O	O:0.999989
a	O	O:0.999997
Pandas	O	O:0.999143
DataFrame	B-API	O:0.985998
.	O	O:0.999796
	
I	O	O:0.999969
could	O	O:0.999979
apply	O	O:0.827387
a	O	O:0.999952
loop	O	O:0.995569
and	O	O:0.999996
do	O	O:0.999939
re-construct	O	O:0.987984
the	O	O:0.999645
DataFrame	B-API	O:0.981488
...	O	O:0.999322
but	O	O:0.999989
that	O	O:0.999921
would	O	O:0.999993
be	O	O:0.999992
'	O	O:0.999995
un-pythonic	O	O:0.995047
'	O	O:0.999880
	
You	O	O:0.999952
want	O	O:0.999923
to	O	O:0.999991
apply	O	O:0.996390
a	O	O:0.999727
function	O	O:0.999895
that	O	O:0.999959
conditionally	O	O:0.999960
returns	O	O:0.999983
a	O	O:0.999989
value	O	O:0.999939
based	O	O:0.999763
on	O	O:0.999994
the	O	O:0.999961
selected	O	O:0.999853
dataframe	B-API	O:0.998755
column	O	O:0.999755
.	O	O:0.999958
	
#CODE	O	O:0.998453
	
I	O	O:0.999916
thought	O	O:0.999655
it	O	O:0.999894
was	O	O:0.999938
from	O	O:0.999960
the	O	O:0.999942
calculation	O	O:0.999486
.	O	O:0.999929
	
But	O	O:0.999948
if	O	O:0.999988
I	O	O:0.999984
apply	O	B-API:0.858514
(	O	O:0.999178
np.float64	O	O:0.987689
)	O	O:0.999996
it	O	O:0.999990
changes	O	O:0.999950
the	O	O:0.999993
numbers	O	O:0.999025
to	O	O:0.999995
what	O	O:0.999998
I	O	O:0.999997
need	O	O:0.999962
.	O	O:0.999778
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
And	O	O:0.999744
`	O	O:0.999985
apply	O	B-API:0.984784
`	O	O:0.999891
it	O	O:0.996643
(	O	O:0.999986
row-wise	O	O:0.980829
):	O	O:0.999856
#CODE	O	O:0.999573
	
but	O	O:0.999858
now	O	O:0.999947
,	O	O:0.999995
I	O	O:0.999998
need	O	O:0.999980
to	O	O:0.999967
apply	O	O:0.991243
this	O	O:0.989861
(	O	O:0.999994
multiparameters	O	O:0.999740
)	O	O:0.999893
function	O	O:0.999880
along	O	O:0.999321
0-axis	O	O:0.998922
.	O	O:0.999532
	
Then	O	O:0.999238
use	O	O:0.999973
`	O	O:0.999971
apply	O	B-API:0.985376
`	O	O:0.999964
across	O	O:0.999390
each	O	O:0.999833
row	O	O:0.999940
,	O	O:0.999996
to	O	O:0.999996
replace	O	O:0.999926
each	O	O:0.999879
NaN	O	O:0.999640
with	O	O:0.999979
its	O	O:0.999911
groups	O	O:0.999782
mean	O	O:0.996936
:	O	O:0.999983
#CODE	O	O:0.999861
	
How	O	O:0.999897
to	O	O:0.999991
apply	O	O:0.976031
linregress	O	O:0.905003
in	O	O:0.999902
Pandas	O	O:0.999917
bygroup	O	O:0.997319
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999939
to	O	O:0.999999
apply	O	O:0.992452
a	O	O:0.999895
scipy.stats.linregress	O	B-API:0.528398
within	O	O:0.999556
Pandas	O	O:0.999787
ByGroup	O	O:0.996172
.	O	O:0.999699
	
I	O	O:0.999827
had	O	O:0.999939
looked	O	O:0.998910
through	O	O:0.999732
the	O	O:0.999751
documentation	O	O:0.998860
but	O	O:0.999986
all	O	O:0.999983
I	O	O:0.999995
could	O	O:0.999924
see	O	O:0.999840
was	O	O:0.999961
how	O	O:0.999985
to	O	O:0.999995
apply	O	O:0.996841
something	O	O:0.999796
to	O	O:0.999993
a	O	O:1.000000
single	O	O:0.999761
column	O	O:0.999975
like	O	O:0.999851
#CODE	O	O:0.999864
	
But	O	O:0.999893
how	O	O:0.999981
do	O	O:0.999976
I	O	O:0.999999
apply	O	O:0.941501
a	O	O:0.999680
linregress	O	O:0.562500
which	O	O:0.999677
has	O	O:0.999889
TWO	O	O:0.999859
inputs	O	O:0.998932
X	O	O:0.999759
and	O	O:0.999982
Y	O	O:0.999851
?	O	O:0.999750
	
and	O	O:0.999980
if	O	O:0.999996
using	O	O:0.999948
a	O	O:0.999887
groupby	B-API	B-API:0.998110
you	O	O:0.999972
can	O	O:0.999973
similarly	O	O:0.999999
`	O	O:0.999998
apply	O	B-API:0.983007
`	O	O:0.999597
(	O	O:0.999778
to	O	O:0.999997
each	O	O:0.999974
group	O	O:0.982711
):	O	O:0.999975
#CODE	O	O:0.999582
	
Thanks	O	O:0.999263
Andy	O	O:0.999396
,	O	O:0.999964
Yes	O	O:0.999890
it	O	O:0.999964
can	O	O:0.999944
accept	O	O:0.999962
it	O	O:0.999978
.	O	O:0.999915
	
The	O	O:0.999896
question	O	O:0.997942
is	O	O:0.999986
how	O	O:0.999925
to	O	O:0.999987
do	O	O:0.999997
it	O	O:0.999987
BYGROUP	O	O:0.997610
.	O	O:0.999909
	
For	O	O:0.999956
example	O	O:0.999820
I	O	O:0.999998
have	O	O:0.999984
datetime	O	O:0.998936
that	O	O:0.999952
I	O	O:0.999999
have	O	O:0.999988
GROUPED	O	O:0.999205
into	O	O:0.999103
Year	O	O:0.998321
and	O	O:0.999894
month	O	O:0.992981
.	O	O:0.999218
	
I	O	O:0.999991
want	O	O:0.999982
to	O	O:0.999927
do	O	O:0.999999
the	O	O:0.999990
linear	O	O:0.997411
regression	O	O:0.999800
for	O	O:0.999997
each	O	O:0.999811
of	O	O:0.999982
the	O	O:0.999993
groups	O	O:0.999942
then	O	O:0.999767
return	O	O:0.999992
the	O	O:0.999996
values	O	O:0.999784
from	O	O:0.999894
the	O	O:0.999992
lin	O	O:0.998889
regression	O	O:0.999235
.	O	O:0.999859
	
Also	O	O:0.999823
I	O	O:0.999999
have	O	O:0.999990
a	O	O:0.999987
DataFram	O	O:0.999858
so	O	O:0.999988
how	O	O:0.999992
can	O	O:0.999985
I	O	O:1.000000
apply	O	O:0.986215
that	O	O:0.999062
using	O	O:0.999984
two	O	O:0.999986
columns	O	O:0.999428
in	O	O:0.999983
the	O	O:0.999967
DF	O	O:0.999993
?	O	O:0.999926
	
Thanks	O	O:0.998593
Jason	O	O:0.998591
	
but	O	O:0.999928
when	O	O:0.999733
i	O	O:0.999995
apply	O	O:0.990555
a	O	O:0.999725
function	O	O:0.999459
from	O	O:0.999909
scikit-learn	O	O:0.999612
i	O	O:0.999987
loose	O	O:0.999801
the	O	O:0.999969
informations	O	O:0.999933
about	O	O:0.999914
columns	O	O:0.998641
:	O	O:0.999946
#CODE	O	O:0.999890
	
Is	O	O:0.999986
there	O	O:0.999983
a	O	O:0.999995
way	O	O:0.999906
to	O	O:0.999987
apply	O	O:0.987774
scikit	O	O:0.997350
or	O	O:0.999988
numpy	O	O:0.999511
function	O	O:0.999947
to	O	O:0.999994
DataFrames	O	O:0.999994
without	O	O:0.999875
loosing	O	O:0.999493
the	O	O:0.999701
information	O	O:0.998847
?	O	O:0.999954
	
How	O	O:0.999747
to	O	O:0.999984
Apply	O	O:0.999995
an	O	O:0.999970
equation	O	O:0.999925
to	O	O:0.999998
a	O	O:0.999999
Pandas	O	O:0.999591
dataframe	B-API	O:0.998491
ByGroup	O	O:0.997894
	
I	O	O:0.999975
have	O	O:0.999942
been	O	O:0.999360
reading	O	O:0.999972
all	O	O:0.999963
day	O	O:0.999991
by	O	O:0.999966
cant	O	O:0.999677
find	O	O:0.999611
and	O	O:0.999999
exact	O	O:0.999883
solution	O	O:0.997803
.	O	O:0.999873
	
Now	O	O:0.999964
my	O	O:0.999971
question	O	O:0.998693
is	O	O:0.999989
how	O	O:0.999952
do	O	O:0.999971
apply	O	O:0.985596
this	O	O:0.999855
back	O	O:0.999103
to	O	O:0.999996
the	O	O:1.000000
original	O	O:0.999920
data	O	O:0.999974
frame	O	O:0.999993
.	O	O:0.999959
	
I	O	O:0.999938
would	O	O:0.999996
like	O	O:0.999986
a	O	O:1.000000
new	O	O:0.999931
column	O	O:0.999860
in	O	O:0.999988
the	O	O:0.999979
DF	O	O:0.999999
that	O	O:0.999861
applies	O	O:0.999965
the	O	O:0.999989
linear	O	O:0.988384
regression	O	O:0.999840
y=mx+c	O	O:0.999478
to	O	O:0.999996
each	O	O:0.999995
line	O	O:0.999799
in	O	O:0.999994
the	O	O:1.000000
original	O	O:0.999980
data	O	O:0.999986
using	O	O:0.999982
the	O	O:0.999993
column	O	O:0.999595
3	O	O:0.999972
as	O	O:0.999994
the	O	O:0.999991
input	O	O:0.999845
BUT	O	O:0.999934
to	O	O:0.999989
do	O	O:1.000000
that	O	O:0.999986
using	O	O:0.999988
the	O	O:0.999980
specific	O	O:0.997408
coefficients	O	O:0.989514
(	O	O:0.999989
slope	O	O:0.999839
,	O	O:0.999986
intercept	O	O:0.999861
)	O	O:0.999996
that	O	O:0.999890
are	O	O:1.000000
different	O	O:0.999938
for	O	O:0.999971
each	O	O:0.997122
YEAR	O	O:0.995668
and	O	O:0.999955
MONTH	O	O:0.996278
.	O	O:0.999210
	
Any	O	O:0.999705
ideas	O	O:0.999844
most	O	O:0.999303
welcomed	O	O:0.999033
:)	O	O:0.999743
	
So	O	O:0.999949
I	O	O:0.999983
would	O	O:0.999997
like	O	O:0.999941
to	O	O:0.999998
apply	O	O:0.988530
that	O	O:0.999845
relationship	O	O:0.999985
back	O	O:0.999916
to	O	O:0.999995
all	O	O:0.999998
the	O	O:0.999980
Year=2010	O	O:0.993066
and	O	O:0.999994
Month=1	O	O:0.999535
to	O	O:0.999963
look	O	O:0.999985
like	O	O:0.999968
this	O	O:0.999929
.	O	O:0.999954
	
Then	O	O:0.999243
for	O	O:0.999999
the	O	O:0.999999
rest	O	O:0.999578
of	O	O:0.999993
the	O	O:0.999984
DF	O	O:0.999999
apply	O	O:0.546490
the	O	O:0.999977
same	O	O:0.999808
approach	O	O:0.999904
for	O	O:0.999994
each	O	O:0.999758
month	O	O:0.999018
of	O	O:0.999995
each	O	O:0.998457
year	O	O:0.998487
.	O	O:0.999874
	
#CODE	O	O:0.998453
	
I	O	O:0.999944
don't	O	O:0.999945
think	O	O:0.999174
it's	O	O:0.999975
entirely	O	O:0.999783
clear	O	O:0.998860
(	O	O:0.999990
to	O	O:0.999994
me	O	O:0.999996
)	O	O:0.999997
what	O	O:0.999905
you	O	O:0.999986
are	O	O:0.999996
asking	O	O:0.999865
,	O	O:0.999983
perhaps	O	O:0.999837
it	O	O:0.999976
would	O	O:0.999992
help	O	O:0.999921
to	O	O:0.999999
provide	O	O:0.999981
an	O	O:0.999980
example	O	O:0.999812
DF	O	O:0.999985
and	O	O:0.999996
what	O	O:0.999928
you	O	O:0.999951
want	O	O:0.999983
it	O	O:0.999994
to	O	O:0.999997
be	O	O:0.999999
?	O	O:0.999975
	
Perhaps	O	O:0.999802
you	O	O:0.999990
want	O	O:0.999986
an	O	O:0.999988
`	O	O:0.999996
apply	O	B-API:0.957115
`	O	O:0.999921
which	O	O:0.999506
refers	O	O:0.999806
to	O	O:0.999936
`	O	O:0.999999
Corr_grouped	O	O:0.965371
`	O	O:0.999931
(	O	O:0.999957
?	O	O:0.999988
)	O	O:0.999928
	
Okat	O	O:0.999123
,	O	O:0.999991
I	O	O:0.999996
think	O	O:0.999870
I	O	O:0.999817
got	O	O:0.999898
it	O	O:0.999754
.	O	O:0.999900
	
Instead	O	O:0.999826
of	O	O:0.999990
resampling	O	O:0.997529
,	O	O:0.999996
you	O	O:0.999975
can	O	O:0.999963
`	O	O:1.000000
groupby	B-API	B-API:0.993415
`	O	O:0.999997
where	O	O:0.999502
the	O	O:0.999996
group	O	O:0.993597
is	O	O:0.999996
a	O	O:0.999996
unit	O	O:0.999391
of	O	O:0.999979
time	O	O:0.999699
.	O	O:0.999961
	
To	O	O:0.999988
this	O	O:0.999970
group	O	O:0.999652
you	O	O:0.999985
can	O	O:0.999992
apply	O	O:0.997652
a	O	O:0.999982
function	O	O:0.999603
of	O	O:0.999999
your	O	O:0.999790
choice	O	O:0.999923
,	O	O:0.999995
for	O	O:0.999976
example	O	O:0.999923
your	O	O:0.999924
directionAverage	O	O:0.997568
function	O	O:0.999909
.	O	O:0.999835
	
Apply	O	O:0.999750
a	O	O:0.999966
lambda	O	O:0.999109
testing	O	O:0.999461
for	O	O:0.999960
the	O	O:0.999958
conditions	O	O:0.997752
you	O	O:0.999991
want	O	O:0.999990
to	O	O:0.999992
drop	O	O:0.996558
:	O	O:0.999979
#CODE	O	O:0.999853
	
You	O	O:0.999932
can	O	O:0.999938
use	O	O:0.999994
`	O	O:0.999970
applymap	B-API	B-API:0.998172
`	O	O:0.999993
to	O	O:0.999917
apply	O	O:0.999124
your	O	O:0.998699
function	O	O:0.999744
to	O	O:0.999999
the	O	O:1.000000
elements	O	O:0.999891
of	O	O:0.999993
the	O	O:0.999946
`	O	O:0.999991
DataFrame	B-API	O:0.652856
`	O	O:0.999941
:	O	O:0.999902
#CODE	O	O:0.999908
	
`	O	O:0.999965
applymap	B-API	B-API:0.997934
`	O	O:0.999957
was	O	O:0.999157
the	O	O:0.999994
key	O	O:0.999950
to	O	O:0.999982
getting	O	O:0.999989
the	O	O:0.999954
`	O	O:0.999957
re.match	O	O:0.906280
`	O	O:0.999978
function	O	O:0.999682
to	O	O:0.999998
work	O	O:0.999994
for	O	O:0.999989
me	O	O:0.999854
.	O	O:0.999743
	
It	O	O:0.999883
failed	O	O:0.999919
when	O	O:0.999878
using	O	O:0.999983
just	O	O:0.999694
`	O	O:0.999984
apply	O	B-API:0.993725
`	O	O:0.999786
	
One	O	O:0.999949
of	O	O:0.999989
my	O	O:0.999970
favorite	O	O:0.999991
aspects	O	O:0.999961
of	O	O:0.999991
using	O	O:0.999944
the	O	O:0.999838
`	O	O:0.999867
ggplot2	O	O:0.980371
`	O	O:0.999992
library	O	O:0.999550
in	O	O:0.999983
R	O	O:0.998416
is	O	O:0.999990
the	O	O:0.999973
ability	O	O:0.999727
to	O	O:0.999982
easily	O	O:0.999993
specify	O	O:0.999534
aesthetics	O	O:0.999703
.	O	O:0.999790
	
I	O	O:0.999986
can	O	O:0.999983
quickly	O	O:0.999984
make	O	O:0.999955
a	O	O:0.999965
scatterplot	O	O:0.999622
and	O	O:0.999994
apply	O	O:0.741162
color	O	O:0.998660
associated	O	O:0.999533
with	O	O:0.999967
a	O	O:0.999992
specific	O	O:0.999714
column	O	O:0.999849
and	O	O:0.999993
I	O	O:0.999982
would	O	O:0.999968
love	O	O:0.999595
to	O	O:0.999996
be	O	O:1.000000
able	O	O:0.999990
to	O	O:0.999986
do	O	O:1.000000
this	O	O:0.999939
with	O	O:0.999959
python	O	O:0.999234
/	O	O:0.999993
pandas	O	O:0.997770
/	O	O:0.999979
matplotlib	O	O:0.997727
.	O	O:0.999744
	
I'm	O	O:0.999905
wondering	O	O:0.999720
if	O	O:0.999990
there	O	O:0.999924
are	O	O:0.999994
there	O	O:0.999984
any	O	O:0.999993
convenience	O	O:0.999744
functions	O	O:0.999965
that	O	O:0.999952
people	O	O:0.999947
use	O	O:0.999983
to	O	O:0.999921
map	O	O:0.803034
colors	O	O:0.999808
to	O	O:0.999996
values	O	O:0.999992
using	O	O:0.999968
pandas	O	O:0.999843
dataframes	O	O:0.997577
and	O	O:0.999946
Matplotlib	O	O:0.999551
?	O	O:0.999591
	
#CODE	O	O:0.998453
	
I	O	O:0.999974
wondering	O	O:0.999940
if	O	O:0.999952
I	O	O:0.999996
can	O	O:0.999989
apply	O	O:0.872166
the	O	O:0.999887
`	O	O:0.999865
pandas.ols	O	B-API:0.638025
`	O	O:0.999997
model	O	O:0.999538
to	O	O:1.000000
a	O	O:1.000000
data	O	O:0.999978
frame	O	O:0.999999
of	O	O:0.999999
multiple	O	O:0.999923
response	O	O:0.999973
variables	O	O:0.999257
against	O	O:0.999922
one	O	O:0.999972
independent	O	O:0.999877
variable	O	O:0.999953
at	O	O:0.999991
one	O	O:0.999980
time	O	O:0.999831
.	O	O:0.999929
	
@USER	O	O:0.998415
whoops	O	O:0.999432
typo	O	O:0.999501
:)	O	O:0.999893
.	O	O:0.999685
	
Yes	O	O:0.999356
,	O	O:0.999979
it	O	O:0.999992
does	O	O:0.999950
seem	O	O:0.999986
silly	O	O:0.999989
using	O	O:0.999991
a	O	O:0.999930
dummy	O	O:0.924465
(	O	O:0.999982
tbh	O	O:0.999711
I	O	O:0.999966
could've	O	O:0.999864
been	O	O:0.999767
more	O	O:0.999935
clever	O	O:0.999755
with	O	O:0.999981
my	O	O:0.999963
apply	O	O:0.564969
[	O	O:0.999895
12	O	O:0.999750
]	O	O:0.999952
to	O	O:0.999939
do	O	O:0.999999
it	O	O:0.999983
in	O	O:0.999987
one	O	O:0.999980
,	O	O:0.999980
and	O	O:0.999992
it	O	O:0.999982
may	O	O:0.999989
well	O	O:0.999960
be	O	O:0.999999
more	O	O:0.999859
efficient	O	O:0.998175
,	O	O:0.999988
but	O	O:0.999979
I	O	O:0.999987
decided	O	O:0.999839
I	O	O:0.999911
wouldn't	O	O:0.999994
like	O	O:0.999859
to	O	O:0.999998
be	O	O:1.000000
the	O	O:0.999977
person	O	O:0.999360
reading	O	O:0.998337
it	O	O:0.999984
...	O	O:0.999895
)	O	O:0.999961
.	O	O:0.999810
	
Like	O	O:0.999826
I	O	O:0.999996
say	O	O:0.999994
,	O	O:0.999974
I	O	O:0.999991
think	O	O:0.999972
there	O	O:0.999426
is	O	O:0.999998
a	O	O:0.999984
clever	O	O:0.999113
way	O	O:0.999979
to	O	O:0.999967
do	O	O:0.999998
this	O	O:0.999987
kind	O	O:0.999915
of	O	O:0.999994
comlex	O	O:0.997488
sort	O	O:0.999430
:	O	O:0.999982
s	O	O:0.999780
	
I	O	O:0.999988
want	O	O:0.999977
to	O	O:0.999857
replace	O	O:0.999708
df.ix	B-API	B-API:0.897725
[	O	O:0.999979
0	O	O:0.999953
]	O	O:0.999875
[	O	O:0.999807
'	O	O:0.999990
date2	O	O:0.999806
']	O	O:0.999918
with	O	O:0.998621
df.ix	B-API	B-API:0.979047
[	O	O:0.999978
1	O	O:0.999938
]	O	O:0.999898
[	O	O:0.999833
'	O	O:0.999987
date2	O	O:0.999841
']	O	O:0.999939
for	O	O:0.999888
each	O	O:0.998523
symbol	O	O:0.999159
--	O	O:0.999985
the	O	O:0.999990
symbol	O	O:0.999979
changes	O	O:0.999837
through	O	O:0.999822
the	O	O:0.999992
dataframe	B-API	O:0.998699
so	O	O:0.999976
I	O	O:0.999993
can't	O	O:0.999994
just	O	O:0.999834
apply	O	O:0.983903
this	O	O:0.999405
through	O	O:0.999615
the	O	O:0.999981
whole	O	O:0.999490
dataframe	B-API	O:0.997273
.	O	O:0.999892
	
plus	O	O:0.999481
1	O	O:0.999954
for	O	O:0.999995
using	O	O:0.999652
.apply()	B-API	B-API:0.999820
where	O	O:0.999753
my	O	O:0.999902
solution	O	O:0.999927
used	O	O:0.999982
a	O	O:0.999961
for	O	O:0.999810
loop	O	O:0.998533
.	O	O:0.999607
	
I	O	O:0.999976
always	O	O:0.999959
forget	O	O:0.999352
about	O	O:0.999513
apply	O	B-API:0.891281
.	O	O:0.997078
	
1	O	O:0.999698
E.g.	O	O:0.999394
,	O	O:0.999998
any	O	O:0.999989
approach	O	O:0.999921
I	O	O:0.999973
can	O	O:0.999998
think	O	O:0.999983
of	O	O:0.999993
involving	O	O:0.999577
the	O	O:0.999961
`	O	O:0.999922
filter	O	O:0.672869
`	O	O:0.999994
built-in	O	O:0.985746
is	O	O:0.999988
probably	O	O:0.999299
ineffiencient	O	O:0.999528
,	O	O:0.999984
since	O	O:0.999925
it	O	O:0.999980
would	O	O:0.999995
apply	O	O:0.919695
the	O	O:0.999856
criterion	O	O:0.993081
(	O	O:0.999996
some	O	O:0.999959
lambda	O	O:0.999559
function	O	O:0.999960
)	O	O:0.999987
by	O	O:0.999985
iterating	O	O:0.999692
,	O	O:0.999923
"	O	O:0.999942
in	O	O:0.999949
Python	O	O:0.999654
"	O	O:0.999997
,	O	O:0.999988
over	O	O:0.999602
the	O	O:0.999959
panda	O	O:0.998706
(	O	O:0.999985
or	O	O:0.999998
numpy	O	O:0.999799
)	O	O:0.999911
object	O	O:0.999658
...	O	O:0.999410
	
How	O	O:0.999909
to	O	O:0.999990
apply	O	O:0.898618
"	O	O:0.999966
first	O	O:0.995840
"	O	O:0.999964
and	O	O:0.999852
"	O	O:0.999995
last	O	O:0.996322
"	O	O:0.999982
functions	O	O:0.999754
to	O	O:0.999994
columns	O	O:0.999998
while	O	O:0.999988
using	O	O:0.999991
group	O	O:0.999225
by	O	O:0.999644
in	O	O:0.999963
pandas	O	O:0.998821
?	O	O:0.999977
	
In	O	O:0.999987
some	O	O:0.999877
sense	O	O:0.999912
there's	O	O:0.999958
three	O	O:0.999987
types	O	O:0.999684
of	O	O:0.999989
mapping	O	O:0.999327
here	O	O:0.998740
:	O	O:0.999967
aggregation	O	O:0.999703
,	O	O:0.999993
apply	O	B-API:0.755541
and	O	O:0.999779
filter	O	O:0.802161
(	O	O:0.999973
the	O	O:0.999990
above	O	O:0.993789
is	O	O:0.999993
kind	O	O:0.999900
of	O	O:0.999999
a	O	O:0.999962
filter	O	O:0.971610
,	O	O:0.999986
although	O	O:0.999947
it	O	O:0.999985
uses	O	O:0.999830
the	O	O:0.999881
agg	O	B-API:0.921997
verb	O	O:0.987274
)	O	O:0.999929
.	O	O:0.999817
	
This	O	O:0.998871
is	O	O:0.999977
complicated	O	O:0.999685
thing	O	O:0.999783
is	O	O:0.999991
that	O	O:0.999892
you	O	O:0.999997
can	O	O:0.999985
use	O	O:0.999995
**	O	O:0.999963
either	O	O:0.999474
**	O	O:0.999982
agg	O	B-API:0.894967
or	O	O:0.999991
apply	O	O:0.519358
to	O	O:0.999963
get	O	O:0.999994
the	O	O:0.999976
`	O	O:0.999972
.iloc	B-API	B-API:0.989720
[	O	O:0.999988
0	O	O:0.999951
]`	O	O:0.999852
job	O	O:0.999868
done	O	O:0.999388
,	O	O:0.999986
not	O	O:0.999989
sure	O	O:0.999959
why	O	O:0.999982
I	O	O:0.999993
used	O	O:0.999883
agg	O	B-API:0.988270
,	O	O:0.999972
apply	O	B-API:0.941669
is	O	O:0.999939
probably	O	O:0.999695
a	O	O:0.999990
better	O	O:0.995313
description	O	O:0.999509
.	O	O:0.999835
	
Since	O	O:0.999946
this	O	O:0.999975
post	O	O:0.999798
I	O	O:0.999995
fixed	O	O:0.999968
nth	O	O:0.999695
to	O	O:0.999988
work	O	O:0.999991
better	O	O:0.999979
so	O	O:0.999987
IMO	O	O:0.999893
that's	O	O:0.999965
the	O	O:0.999989
preferred	O	O:0.999679
solution	O	O:0.999854
here	O	O:0.999755
.	O	O:0.999927
	
In	O	O:0.999982
the	O	O:0.999990
above	O	O:0.999748
illustration	O	O:0.999981
the	O	O:0.999997
result	O	O:0.999966
of	O	O:0.999994
the	O	O:0.999980
`	O	O:0.999982
apply()	B-API	B-API:0.999741
`	O	O:0.999924
function	O	O:0.998914
is	O	O:0.999996
a	O	O:0.999950
Pandas	O	O:0.998400
Series	O	O:0.998913
.	O	O:0.999665
	
And	O	O:0.999858
it	O	O:0.999976
lacks	O	O:0.999833
the	O	O:0.999987
groupby	B-API	B-API:0.911165
columns	O	O:0.999901
from	O	O:0.999927
the	O	O:0.999988
`	O	O:0.999976
df.groupby	B-API	B-API:0.997025
`	O	O:0.999977
.	O	O:0.999160
	
The	O	O:0.999977
essence	O	O:0.999721
of	O	O:0.999990
what	O	O:0.999536
I'm	O	O:0.999995
struggling	O	O:0.999750
with	O	O:0.999496
is	O	O:0.999978
how	O	O:0.999981
do	O	O:0.999989
I	O	O:0.999999
create	O	O:0.999951
a	O	O:0.999946
function	O	O:0.999766
which	O	O:0.999953
I	O	O:0.999997
apply	O	O:0.914125
to	O	O:0.999887
a	O	O:0.999998
groupby	B-API	B-API:0.997053
which	O	O:0.999743
returns	O	O:0.999560
both	O	O:0.999988
the	O	O:0.999996
result	O	O:0.999939
of	O	O:0.999996
the	O	O:0.999848
function	O	O:0.999878
AND	O	O:0.999955
the	O	O:0.999994
columns	O	O:0.999818
on	O	O:0.999971
which	O	O:0.999965
it	O	O:0.999978
was	O	O:0.999954
grouped	O	O:0.999508
?	O	O:0.999941
	
In	O	O:0.999946
the	O	O:0.999974
example	O	O:0.999842
you've	O	O:0.999937
appended	O	O:0.999927
,	O	O:0.999987
what's	O	O:0.999894
the	O	O:0.999992
purpose	O	O:0.999906
of	O	O:0.999987
the	O	O:0.999787
groupby	B-API	B-API:0.997603
(	O	O:0.999886
it'll	O	O:0.999856
just	O	O:0.999987
find	O	O:0.999985
dupes	O	O:0.999733
)	O	O:0.999994
,	O	O:0.999997
you	O	O:0.999969
can	O	O:0.999994
just	O	O:0.999999
do	O	O:0.999999
an	O	O:0.999996
apply	O	O:0.556387
to	O	O:0.999970
df	O	O:0.999982
itself	O	O:0.999642
and	O	O:0.999993
add	O	O:0.999983
that	O	O:0.999920
as	O	O:0.999999
a	O	O:0.999988
column	O	O:0.998200
:	O	O:0.999986
`	O	O:0.999996
df	O	O:0.999407
[	O	O:0.999980
'	O	O:0.999973
func3	O	O:0.999426
']	O	O:0.999945
=	O	O:0.998805
df.apply	B-API	B-API:0.990148
(	O	O:0.999975
lambda	O	O:0.998850
row	O	O:0.999854
:	O	O:0.999933
row	O	O:0.999926
[	O	O:0.999963
'	O	O:0.999991
col2	O	O:0.999613
']	O	O:0.999958
**	O	O:0.999746
2	O	O:0.999783
,	O	O:0.999984
axis=1	O	O:0.999598
)`	O	O:0.999380
.	O	O:0.999632
	
?	O	O:0.999776
	
I	O	O:0.999921
don't	O	O:0.999937
can't	O	O:0.999777
see	O	O:0.999993
an	O	O:0.999995
example	O	O:0.999929
where	O	O:0.999897
it	O	O:0.999992
makes	O	O:0.999961
sense	O	O:0.999924
to	O	O:0.999970
groupby	B-API	B-API:0.580667
all	O	O:0.999963
columns	O	O:0.999609
and	O	O:0.999995
apply	O	O:0.875770
,	O	O:0.999717
rather	O	O:0.999718
than	O	O:0.999945
just	O	O:0.999780
apply	O	B-API:0.567020
(	O	O:0.999910
DataFrames	O	O:0.999714
apply	O	O:0.599367
can	O	O:0.999778
be	O	O:0.999998
very	O	O:0.999854
non-trivial	O	O:0.995778
and	O	O:0.999995
save	O	O:0.998464
to	O	O:0.999988
multiple	O	O:0.999999
columns	O	O:0.999798
)	O	O:0.999986
.	O	O:0.999903
	
(	O	O:0.999917
Also	O	O:0.999942
you	O	O:0.999980
don't	O	O:0.999993
need	O	O:0.999994
to	O	O:0.999999
create	O	O:0.999997
a	O	O:0.999996
dfout	O	O:0.999784
return	O	O:0.999802
variable	O	O:0.999818
,	O	O:0.999996
you	O	O:0.999980
can	O	O:0.999994
just	O	O:0.999998
return	O	O:0.999964
the	O	O:0.999897
calculation	O	O:0.999563
e.g.	O	O:0.999627
`	O	O:0.999994
return	O	O:0.998661
df	O	O:0.999624
[	O	O:0.999896
'	O	O:0.999976
col3	O	O:0.999449
']	O	O:0.999942
**2	O	O:0.997685
`	O	O:0.999951
:)	O	O:0.999258
)	O	O:0.999954
	
example	O	O:0.997224
updated	O	O:0.999233
...	O	O:0.999697
and	O	O:0.999956
now	O	O:0.999875
it	O	O:0.999894
works	O	O:0.999706
!	O	O:0.999906
	
Geesh	O	O:0.993193
.	O	O:0.999743
	
It	O	O:0.999922
appears	O	O:0.999980
that	O	O:0.999960
when	O	O:0.999936
the	O	O:0.999997
apply	O	B-API:0.699906
is	O	O:0.999811
on	O	O:0.999986
every	O	O:0.999831
row	O	O:0.999939
it	O	O:0.999964
does	O	O:0.999856
not	O	O:0.999991
return	O	O:0.999896
the	O	O:0.999985
keys	O	O:0.998179
,	O	O:0.999986
but	O	O:0.999990
if	O	O:0.999994
the	O	O:0.999998
apply	O	B-API:0.769770
results	O	O:0.997771
in	O	O:0.999887
aggregation	O	O:0.999433
it	O	O:0.999993
does	O	O:0.999821
return	O	O:0.999792
the	O	O:0.999989
keys	O	O:0.997637
	
The	O	O:0.999955
best	O	O:0.999584
way	O	O:0.999965
to	O	O:0.999963
understand	O	O:0.999976
how	O	O:0.999996
your	O	O:0.999903
apply	O	B-API:0.715323
is	O	O:0.999975
going	O	O:0.997040
to	O	O:0.999988
work	O	O:0.999922
is	O	O:0.999998
to	O	O:0.999987
inspect	O	O:0.999998
each	O	O:0.999824
action	O	O:0.999615
group-wise	O	O:0.996328
:	O	O:0.999930
#CODE	O	O:0.999735
	
I	O	O:0.999919
am	O	O:0.999994
interested	O	O:0.996642
in	O	O:0.999998
this	O	O:0.999943
question	O	O:0.999890
in	O	O:0.999995
the	O	O:0.999994
context	O	O:0.999853
of	O	O:0.999992
the	O	O:0.999939
`	O	O:0.999984
groupby	B-API	B-API:0.999080
`	O	O:0.999982
operation	O	O:0.995098
.	O	O:0.999943
	
If	O	O:0.999967
we	O	O:0.999984
apply	O	O:0.939980
this	O	O:0.999772
operation	O	O:0.999828
to	O	O:0.999999
a	O	O:1.000000
data	O	O:0.999941
frame	O	O:0.999999
,	O	O:0.999999
as	O	O:1.000000
a	O	O:0.999988
result	O	O:0.999883
we	O	O:0.999984
do	O	O:0.999979
not	O	O:0.999997
get	O	O:0.999995
another	O	O:0.999991
data	O	O:0.999971
frame	O	O:0.999982
.	O	O:0.999946
	
I	O	O:0.999923
wonder	O	O:0.999384
why	O	O:0.999618
not	O	O:0.999824
.	O	O:0.999968
	
Why	O	O:0.999934
not	O	O:0.999977
to	O	O:0.999999
have	O	O:1.000000
another	O	O:0.999995
data	O	O:0.999990
frame	O	O:0.999997
that	O	O:0.999960
has	O	O:0.999998
lists	O	O:0.999946
as	O	O:0.999994
values	O	O:0.999363
for	O	O:0.999998
some	O	O:0.999922
cells	O	O:0.998962
?	O	O:0.999957
	
The	O	O:0.999848
index	O	O:0.998981
option	O	O:0.999906
has	O	O:0.999993
a	O	O:0.999879
format	O	O:0.998389
method	O	O:0.999957
that	O	O:0.999961
lets	O	O:0.999975
you	O	O:0.999996
apply	O	O:0.947571
a	O	O:0.999981
formatter	O	O:0.998608
in	O	O:0.999984
the	O	O:0.999996
form	O	O:0.999977
of	O	O:0.999997
a	O	O:0.999861
function	O	O:0.998413
:	O	O:0.999950
#CODE	O	O:0.999832
	
how	O	O:0.999922
to	O	O:0.999998
apply	O	O:0.989461
functions	O	O:0.999549
to	O	O:0.999976
grouped	O	O:0.999997
dataframes	O	O:0.999485
in	O	O:0.999941
Python	O	O:0.999940
pandas	O	O:0.999739
?	O	O:0.999953
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999940
to	O	O:0.999999
apply	O	O:0.993186
a	O	O:0.999872
function	O	O:0.999005
per	O	O:0.999958
group	O	O:0.999073
that	O	O:0.999968
does	O	O:0.999987
something	O	O:0.999990
specific	O	O:0.999959
with	O	O:0.999993
a	O	O:0.999999
subset	O	O:0.999123
of	O	O:0.999997
the	O	O:0.999993
columns	O	O:0.999926
in	O	O:0.999875
`	O	O:0.999995
grouped_iris	O	O:0.964391
`	O	O:0.999983
.	O	O:0.999418
	
How	O	O:0.999876
could	O	O:0.999907
I	O	O:1.000000
apply	O	O:0.982510
a	O	O:0.998217
function	O	O:0.999733
that	O	O:0.999906
for	O	O:0.999998
each	O	O:0.999607
group	O	O:0.972812
(	O	O:0.999996
each	O	O:0.999949
value	O	O:0.999976
of	O	O:0.999963
`	O	O:0.999989
Name	O	O:0.999816
`)	O	O:0.999997
sums	O	O:0.991297
`	O	O:0.999992
PetalLength	O	O:0.992992
`	O	O:0.999980
and	O	O:0.999163
`	O	O:0.999994
PetalWidth	O	O:0.884935
`	O	O:0.999902
and	O	O:0.999945
puts	O	O:0.999816
it	O	O:0.999951
in	O	O:0.999998
a	O	O:0.999997
new	O	O:0.999838
column	O	O:0.999918
called	O	O:0.998624
`	O	O:0.999996
SumLengthWidth	O	O:0.963852
`	O	O:0.999986
?	O	O:0.999743
	
I	O	O:0.999979
know	O	O:0.999980
that	O	O:0.999867
I	O	O:0.999998
can	O	O:0.999997
sum	O	O:0.999965
all	O	O:0.999997
the	O	O:0.999998
columns	O	O:0.999787
per	O	O:0.999978
group	O	O:0.999511
with	O	O:0.999893
`	O	O:0.999945
agg	O	B-API:0.994175
`	O	O:0.999993
like	O	O:0.999284
this	O	O:0.999757
:	O	O:0.999974
#CODE	O	O:0.999812
	
and	O	O:0.999979
apply	O	O:0.673045
set	O	O:0.978746
intersection	O	B-API:0.821262
:	O	O:0.999904
#CODE	O	O:0.999638
	
Apply	O	O:0.999905
a	O	O:0.999865
function	O	O:0.999854
that	O	O:0.999874
returns	O	O:0.999951
the	O	O:0.999997
group	O	O:0.997187
row	O	O:0.999968
that	O	O:0.999790
has	O	O:0.999983
the	O	O:0.999997
index	O	O:0.999914
of	O	O:0.999992
the	O	O:0.999991
minimum	O	O:0.999707
'	O	O:0.999964
q	O	O:0.999930
'	O	O:0.999983
value	O	O:0.999839
.	O	O:0.999837
	
I	O	O:0.999991
have	O	O:0.999973
written	O	O:0.999775
a	O	O:0.999955
function	O	O:0.997840
(	O	O:0.999989
below	O	O:0.999737
)	O	O:0.999994
that	O	O:0.999645
works	O	O:0.999984
with	O	O:0.999946
`	O	O:0.999974
apply	O	B-API:0.948889
`	O	O:0.999978
to	O	O:0.999611
perform	O	O:0.999988
this	O	O:0.999331
,	O	O:0.999986
but	O	O:0.999985
it	O	O:0.999883
is	O	O:0.999996
unacceptably	O	O:0.999508
slow	O	O:0.998163
.	O	O:0.999749
	
Instead	O	O:0.999711
,	O	O:0.999929
is	O	O:0.999997
there	O	O:0.999968
a	O	O:0.999997
way	O	O:0.999946
to	O	O:0.999974
use	O	O:0.999992
`	O	O:0.999918
pandas.ols	O	B-API:0.602453
`	O	O:0.999999
to	O	O:0.999974
directly	O	O:0.999992
perform	O	O:0.999853
this	O	O:0.999983
sort	O	O:0.999788
of	O	O:0.999997
cumulative	O	O:0.995092
regression	O	O:0.999784
?	O	O:0.999946
	
Here	O	O:0.997754
is	O	O:0.999988
the	O	O:0.999881
function	O	O:0.999899
I	O	O:0.999983
am	O	O:1.000000
able	O	O:0.999950
to	O	O:0.999993
use	O	O:0.999997
with	O	O:0.999421
`	O	O:0.999981
apply	O	B-API:0.875583
`	O	O:0.999968
on	O	O:0.999746
the	O	O:0.999983
identifier-grouped	O	O:0.991278
object	O	O:0.998312
:	O	O:0.999962
#CODE	O	O:0.999875
	
pandas	O	O:0.999715
does	O	O:0.999923
offer	O	O:0.997101
cumsum	B-API	B-API:0.989800
(	O	O:0.999989
cumulative	O	O:0.999522
sum	O	O:0.999654
)	O	O:0.999983
and	O	O:0.999775
cumprod	B-API	B-API:0.995474
(	O	O:0.999968
cumulative	O	O:0.999262
product	O	O:0.999719
)	O	O:0.999997
that	O	O:0.999947
you	O	O:0.999996
could	O	O:0.999994
apply	O	O:0.965567
to	O	O:0.999993
a	O	O:0.999998
series	O	O:0.999207
.	O	O:0.999906
	
If	O	O:0.999979
you	O	O:0.999972
can	O	O:0.999997
break	O	O:0.999995
down	O	O:0.999913
you	O	O:0.999986
reduce	O	O:0.999980
your	O	O:0.999502
function	O	O:0.999931
into	O	O:0.999813
products	O	O:0.999837
and	O	O:0.999993
sums	O	O:0.999830
you	O	O:0.999919
could	O	O:0.999982
achieve	O	O:0.999995
what	O	O:0.999959
you	O	O:0.999966
are	O	O:0.999999
trying	O	O:0.999976
to	O	O:0.999960
do	O	O:0.999995
...	O	O:0.999743
	
Following	O	O:0.999132
on	O	O:0.999973
the	O	O:0.999991
advice	O	O:0.999830
in	O	O:0.999982
the	O	O:0.999985
comments	O	O:0.999872
,	O	O:0.999995
I	O	O:0.999996
created	O	O:0.999914
my	O	O:0.999940
own	O	O:0.999650
function	O	O:0.999989
that	O	O:0.999952
can	O	O:0.999995
be	O	O:1.000000
used	O	O:0.999969
with	O	O:0.999227
`	O	O:0.999973
apply	O	B-API:0.984424
`	O	O:0.999901
and	O	O:0.999852
which	O	O:0.999983
relies	O	O:0.998596
on	O	O:0.999976
`	O	O:0.999909
cumsum	B-API	B-API:0.993964
`	O	O:0.999999
to	O	O:0.999972
accumulate	O	O:0.997711
all	O	O:0.999911
the	O	O:0.999994
individual	O	O:0.998463
needed	O	O:0.999969
terms	O	O:0.999835
for	O	O:0.999992
expressing	O	O:0.998756
the	O	O:0.999847
coefficient	O	O:0.999946
from	O	O:0.999971
an	O	O:0.999965
OLS	O	O:0.999981
univariate	O	O:0.998642
regression	O	O:0.999788
vectorially	O	O:0.998485
.	O	O:0.999864
	
#CODE	O	O:0.998453
	
Is	O	O:0.999933
it	O	O:0.999994
possible	O	O:0.999947
to	O	O:0.999996
apply	O	O:0.989321
user	O	O:0.999728
defined	O	O:0.998729
functions	O	O:0.999865
to	O	O:0.999979
series	O	O:0.999993
in	O	O:0.999988
pandas	O	O:0.999858
?	O	O:0.999984
	
If	O	O:0.999967
we	O	O:0.999995
have	O	O:0.999977
two	O	O:0.999992
series	O	O:0.999963
`	O	O:0.999982
s1	O	O:0.997133
`	O	O:0.999981
and	O	O:0.999782
`	O	O:0.999993
s2	O	O:0.990353
`	O	O:0.999994
we	O	O:0.999955
can	O	O:0.999989
apply	O	O:0.989537
arithmetic	O	O:0.999897
operations	O	O:0.999491
to	O	O:0.999994
them	O	O:0.999941
:	O	O:0.999989
`	O	O:0.999994
s1	O	O:0.999789
+	O	O:0.999985
s2	O	O:0.999847
`	O	O:0.999978
or	O	O:0.999666
`	O	O:0.999996
s1*s2	O	O:0.985617
`	O	O:0.999981
.	O	O:0.999544
	
The	O	O:0.999936
arithmetic	O	O:0.999765
operation	O	O:0.999885
will	O	O:0.999921
be	O	O:0.999997
applied	O	O:0.999946
pairwise	O	O:0.990788
(	O	O:0.999984
assuming	O	O:0.999979
that	O	O:0.999922
the	O	O:0.999998
two	O	O:0.999984
series	O	O:0.999985
have	O	O:0.999962
the	O	O:0.999999
same	O	O:0.999962
length	O	O:0.999774
)	O	O:0.999996
as	O	O:0.999999
a	O	O:0.999991
result	O	O:0.999869
we	O	O:0.999996
get	O	O:0.999993
a	O	O:0.999998
new	O	O:0.999566
series	O	O:0.999738
.	O	O:0.999831
	
This	O	O:0.999500
feature	O	O:0.999946
makes	O	O:0.999926
a	O	O:0.999997
lot	O	O:0.999891
of	O	O:0.999979
things	O	O:0.999307
much	O	O:0.999963
more	O	O:0.999777
easier	O	O:0.998816
.	O	O:0.999852
	
Now	O	O:0.999938
,	O	O:0.999993
I	O	O:0.999995
try	O	O:0.999988
to	O	O:0.999980
define	O	O:0.999986
my	O	O:0.999816
own	O	O:0.999552
operator	O	O:0.999740
and	O	O:0.999982
apply	O	O:0.717864
it	O	O:0.999485
to	O	O:0.999976
two	O	O:0.999994
series	O	O:0.999598
:	O	O:0.999970
#CODE	O	O:0.999925
	
And	O	O:0.999881
I	O	O:0.999987
try	O	O:0.999989
to	O	O:0.999953
apply	O	O:0.982397
it	O	O:0.999908
to	O	O:0.999988
two	O	O:0.999997
series	O	O:0.999860
:	O	O:0.999985
`	O	O:0.999995
f	O	O:0.999188
(	O	O:0.999990
s1	O	O:0.999768
,	O	O:0.999973
s2	O	O:0.999854
)`	O	O:0.999484
.	O	O:0.999697
	
It	O	O:0.999846
does	O	O:0.999587
not	O	O:0.999985
work	O	O:0.999928
.	O	O:0.999964
	
It	O	O:0.999462
is	O	O:0.999994
expectable	O	O:0.999491
,	O	O:0.999997
to	O	O:0.999998
a	O	O:0.999999
certain	O	O:0.998907
extent	O	O:0.999263
,	O	O:0.999996
since	O	O:0.999876
the	O	O:0.999983
user-defined	O	O:0.998587
function	O	O:0.999803
doers	O	O:0.999267
not	O	O:0.999993
know	O	O:0.999915
how	O	O:0.999975
to	O	O:0.999989
treat	O	O:0.999973
series	O	O:0.999876
.	O	O:0.999930
	
So	O	O:0.999943
,	O	O:0.999997
my	O	O:0.999980
question	O	O:0.998851
is	O	O:0.999990
if	O	O:0.999986
there	O	O:0.999852
is	O	O:0.999993
an	O	O:0.999975
elegant	O	O:0.999851
way	O	O:0.999969
to	O	O:0.999976
do	O	O:0.999999
what	O	O:0.999949
I	O	O:0.999998
want	O	O:0.999993
to	O	O:0.999887
do	O	O:0.999997
?	O	O:0.999971
	
Apply	O	O:0.998158
function	O	O:0.999856
to	O	O:0.999995
each	O	O:0.999996
row	O	O:0.999962
of	O	O:0.999991
pandas	O	O:0.999955
dataframe	B-API	O:0.999875
to	O	O:0.999984
create	O	O:0.999989
two	O	O:0.999996
new	O	O:0.999989
columns	O	O:0.999685
	
I	O	O:0.999989
want	O	O:0.999986
to	O	O:0.999955
create	O	O:0.999991
two	O	O:0.999995
new	O	O:0.999995
columns	O	O:0.999780
for	O	O:0.999992
this	O	O:0.999926
dataframe	B-API	O:0.999503
based	O	O:0.999837
on	O	O:0.999996
applying	O	O:0.999955
a	O	O:0.999930
function	O	O:0.999710
to	O	O:0.999998
each	O	O:0.999997
row	O	O:0.999974
of	O	O:0.999986
the	O	O:0.999974
dataframe	B-API	O:0.997376
.	O	O:0.999836
	
I	O	O:0.999951
don't	O	O:0.999986
want	O	O:0.999807
to	O	O:0.999999
have	O	O:0.999999
to	O	O:0.999997
call	O	O:0.999987
the	O	O:0.999919
function	O	O:0.999851
multiple	O	O:0.999824
times	O	O:0.998152
(	O	O:0.999980
eg	O	O:0.999990
.	O	O:0.999988
by	O	O:0.999984
doing	O	O:0.999925
two	O	O:0.999935
separate	O	O:0.998764
`	O	O:0.999985
apply	O	B-API:0.978011
`	O	O:0.999952
calls	O	O:0.996349
)	O	O:0.999996
as	O	O:0.999782
it	O	O:0.999923
is	O	O:0.999979
rather	O	O:0.999809
computationally	O	O:0.999501
intensive	O	O:0.999357
.	O	O:0.999612
	
I	O	O:0.999985
have	O	O:0.999960
tried	O	O:0.999576
doing	O	O:0.999989
this	O	O:0.999093
in	O	O:0.999952
two	O	O:0.999977
ways	O	O:0.999790
,	O	O:0.999982
and	O	O:0.999998
neither	O	O:0.999966
of	O	O:0.999997
them	O	O:0.999490
work	O	O:0.999603
:	O	O:0.999977
	
Using	O	O:0.998668
`	O	O:0.999940
apply	O	B-API:0.994361
`	O	O:0.999687
:	O	O:0.998890
	
Trying	O	O:0.999661
to	O	O:0.999979
apply	O	O:0.994860
this	O	O:0.999729
to	O	O:0.999963
the	O	O:0.999999
DataFrame	B-API	O:0.995455
gives	O	O:0.999927
an	O	O:0.999985
error	O	O:0.998462
:	O	O:0.999927
#CODE	O	O:0.999722
	
I	O	O:0.999901
was	O	O:0.999989
then	O	O:0.999798
going	O	O:0.999992
to	O	O:0.999992
assign	O	O:0.999981
the	O	O:0.999991
values	O	O:0.999776
returned	O	O:0.999900
from	O	O:0.999940
`	O	O:0.999990
apply	O	B-API:0.931719
`	O	O:0.999955
to	O	O:0.999910
two	O	O:1.000000
new	O	O:0.999991
columns	O	O:0.999950
using	O	O:0.999691
the	O	O:0.999892
method	O	O:0.999787
shown	O	O:0.997709
in	O	O:0.999999
this	O	O:0.999885
question	O	O:0.999663
.	O	O:0.999906
	
However	O	O:0.999855
,	O	O:0.999987
I	O	O:0.999995
can't	O	O:0.999988
even	O	O:0.999913
get	O	O:0.999992
to	O	O:0.999999
this	O	O:0.999997
point	O	O:0.999808
!	O	O:0.999946
	
This	O	O:0.999586
all	O	O:0.999906
works	O	O:0.999971
fine	O	O:0.999924
if	O	O:0.999983
I	O	O:0.999998
just	O	O:0.999957
return	O	O:0.999415
one	O	O:0.999923
value	O	O:0.999814
.	O	O:0.999892
	
To	O	O:0.999978
make	O	O:0.999869
the	O	O:0.999997
first	O	O:0.999754
approach	O	O:0.999953
work	O	O:0.999649
,	O	O:0.999994
try	O	O:0.999994
returning	O	O:0.999826
a	O	O:0.999975
Series	O	O:0.999743
instead	O	O:0.999989
of	O	O:0.999997
a	O	O:0.999977
tuple	O	O:0.994840
(	O	O:0.999982
apply	O	B-API:0.798431
is	O	O:0.999943
throwing	O	O:0.998181
an	O	O:0.999961
exception	O	O:0.999436
because	O	O:0.999886
it	O	O:0.999971
doesn't	O	O:0.999980
know	O	O:0.999938
how	O	O:0.999996
to	O	O:0.999994
glue	O	O:0.999993
the	O	O:0.999999
rows	O	O:0.999971
back	O	O:0.999960
together	O	O:0.999980
as	O	O:0.999998
the	O	O:0.999981
number	O	O:0.999925
of	O	O:0.999986
columns	O	O:0.999935
doesn't	O	O:0.999982
match	O	O:0.999938
the	O	O:0.999996
original	O	O:0.999812
frame	O	O:0.999987
)	O	O:0.999973
.	O	O:0.999875
	
#CODE	O	O:0.998453
	
The	O	O:0.999950
solution	O	O:0.999699
to	O	O:0.999994
the	O	O:0.999999
second	O	O:0.999175
approach	O	O:0.999853
works	O	O:0.999780
-	O	O:0.999984
thanks	O	O:0.997759
:-)	O	O:0.999596
.	O	O:0.999553
	
However	O	O:0.999863
,	O	O:0.999991
I	O	O:0.999997
can't	O	O:0.999951
get	O	O:0.999954
the	O	O:0.999999
first	O	O:0.999840
approach	O	O:0.999924
to	O	O:0.999977
work	O	O:0.999971
.	O	O:0.999965
	
Returning	O	O:0.999682
a	O	O:0.999875
series	O	O:0.998781
works	O	O:0.999821
,	O	O:0.999993
and	O	O:0.999994
I	O	O:0.999996
get	O	O:0.999987
a	O	O:0.999906
'	O	O:0.999955
mini-df	O	O:0.998956
'	O	O:0.999979
returned	O	O:0.999162
,	O	O:0.999982
but	O	O:0.999962
I	O	O:0.999980
can't	O	O:0.999992
seem	O	O:0.999923
to	O	O:0.999996
get	O	O:1.000000
the	O	O:0.999997
values	O	O:0.999932
returned	O	O:0.999888
from	O	O:0.999971
the	O	O:0.999980
`	O	O:0.999989
apply	O	B-API:0.956507
`	O	O:0.999898
function	O	O:0.999525
into	O	O:0.999819
the	O	O:0.999984
original	O	O:0.997982
dataframe	B-API	O:0.996954
.	O	O:0.999878
	
Using	O	O:0.999203
`	O	O:0.999907
st	O	O:0.998568
[	O	O:0.999984
'	O	O:0.999996
a	O	O:0.999989
']	O	O:0.999898
,	O	O:0.999938
st	O	O:0.999480
[	O	O:0.999925
'	O	O:0.999989
b	O	O:0.999963
']	O	O:0.999920
=	O	O:0.999500
st.apply	O	O:0.995752
(	O	O:0.999975
calculate	O	O:0.999091
,	O	O:0.999997
axis=1	O	O:0.999806
)`	O	O:0.999622
doesn't	O	O:0.999755
work	O	O:0.999859
,	O	O:0.999997
and	O	O:0.999994
neither	O	O:0.999962
does	O	O:0.999377
wrapping	O	O:0.999926
the	O	O:0.999953
right-hand	O	O:0.999706
side	O	O:0.999566
in	O	O:0.999962
`	O	O:0.999973
zip	O	O:0.948505
(	O	O:0.999984
*	O	O:0.999979
)`	O	O:0.999171
.	O	O:0.999689
	
Any	O	O:0.999882
ideas	O	O:0.999720
about	O	O:0.999861
what	O	O:0.999601
I'm	O	O:0.999976
doing	O	O:0.999967
wrong	O	O:0.999652
here	O	O:0.997126
?	O	O:0.999958
	
Apply	O	O:0.999757
pandas	O	O:0.998630
function	O	O:0.999860
which	O	O:0.999628
returns	O	O:0.999978
multiple	O	O:0.999880
values	O	O:0.999201
?	O	O:0.999938
	
The	O	O:0.999910
general	O	O:0.999661
idea	O	O:0.999685
now	O	O:0.999586
is	O	O:0.999994
to	O	O:0.999976
apply	O	O:0.975026
these	O	O:0.999937
calibration	O	O:0.999916
data	O	O:0.999982
to	O	O:0.999992
the	O	O:0.999999
measurements	O	O:0.997633
.	O	O:0.999889
	
Pass	O	O:0.997848
`	O	O:0.999936
numpy.argsort	B-API	B-API:0.992052
`	O	O:0.999992
to	O	O:0.999964
the	O	O:0.999999
`	O	O:0.999975
apply	O	B-API:0.997853
`	O	O:0.999935
method	O	O:0.999683
instead	O	O:0.999993
of	O	O:0.999996
using	O	O:0.999958
it	O	O:0.999955
directly	O	O:0.996336
.	O	O:0.999815
	
This	O	O:0.999655
way	O	O:0.999943
,	O	O:0.999989
NaNs	O	O:0.999596
/	O	O:0.999959
NaTs	O	O:0.999861
persist	O	O:0.994055
.	O	O:0.999921
	
For	O	O:0.999987
your	O	O:0.999474
example	O	O:0.997660
:	O	O:0.999981
#CODE	O	O:0.999873
	
@USER	O	O:0.998599
,	O	O:0.999984
The	O	O:0.999987
originals	O	O:0.999713
are	O	O:0.999982
datetime64	O	O:0.997077
[	O	O:0.999966
ns	O	O:0.999184
]	O	O:0.999779
and	O	O:0.999954
the	O	O:0.999954
return	O	O:0.996429
index	O	O:0.999153
after	O	O:0.999965
the	O	O:0.999972
apply	O	B-API:0.971160
are	O	O:0.999739
objects	O	O:0.998408
.	O	O:0.999850
	
I	O	O:0.999974
ma	O	O:0.999978
using	O	O:0.998212
version	O	O:0.998322
0.11.0.dev-3790f16	O	O:0.962627
.	O	O:0.999803
	
To	O	O:0.999932
complement	O	O:0.999698
unutbu's	O	O:0.999780
answer	O	O:0.999099
,	O	O:0.999980
here's	O	O:0.999867
an	O	O:0.999986
approach	O	O:0.999989
using	O	O:0.999723
`	O	O:0.999890
apply	O	B-API:0.988104
`	O	O:0.999955
on	O	O:0.999688
the	O	O:0.999970
groupby	B-API	B-API:0.994878
object	O	O:0.999008
.	O	O:0.999610
	
#CODE	O	O:0.998453
	
Apply	O	O:0.999946
different	O	O:0.999724
functions	O	O:0.999742
to	O	O:0.999997
different	O	O:0.999999
items	O	O:0.999530
in	O	O:0.999980
group	O	O:0.993995
object	O	O:0.999596
:	O	O:0.999932
Python	O	O:0.999906
pandas	O	O:0.999798
	
I	O	O:0.999989
want	O	O:0.999961
to	O	O:0.999971
group	O	O:0.999992
a	O	O:0.999998
duplicate	O	O:0.999984
data	O	O:0.999971
at	O	O:0.999998
time	O	O:0.999877
`	O	O:0.999980
14:42	O	O:0.996270
:	O	O:0.999972
10	O	O:0.999483
`	O	O:0.999973
and	O	O:0.999974
apply	O	O:0.982614
different	O	O:0.997764
functions	O	O:0.999277
to	O	O:0.999822
`	O	O:1.000000
exe_price	O	O:0.955196
`	O	O:0.999990
and	O	O:0.999712
`	O	O:0.999996
exe_vol	O	O:0.621104
`	O	O:0.999881
(	O	O:0.999910
e.g.	O	O:0.999930
,	O	O:0.999991
sum	O	O:0.999883
the	O	O:0.999923
`	O	O:0.999985
exe_vol	O	O:0.902498
`	O	O:0.999995
and	O	O:0.999969
compute	O	O:0.998939
volume	O	O:0.999904
weighted	O	O:0.999860
average	O	O:0.999789
of	O	O:0.999931
`	O	O:0.999987
exe_price	O	O:0.993962
`)	O	O:0.999978
.	O	O:0.999745
	
I	O	O:0.999979
know	O	O:0.999980
that	O	O:0.999851
I	O	O:0.999997
can	O	O:0.999983
do	O	O:0.999963
#CODE	O	O:0.999903
	
Is	O	O:0.999986
there	O	O:0.999987
a	O	O:0.999994
way	O	O:0.999826
to	O	O:0.999974
group	O	O:0.999807
and	O	O:0.999999
then	O	O:0.999875
apply	O	O:0.901384
different	O	O:0.995530
(	O	O:0.999934
written	O	O:0.999882
by	O	O:0.999990
me	O	O:0.999988
)	O	O:0.999980
functions	O	O:0.999932
to	O	O:0.999994
values	O	O:0.999980
in	O	O:0.999994
different	O	O:0.999982
column	O	O:0.999867
?	O	O:0.999963
	
Thank	O	O:0.999687
you	O	O:0.999932
for	O	O:0.999999
your	O	O:0.999950
quick	O	O:0.998194
response	O	O:0.999727
.	O	O:0.999725
	
I	O	O:0.999956
wonder	O	O:0.999921
since	O	O:0.999809
my	O	O:0.999830
'	O	O:0.999995
grouped	O	O:0.999303
'	O	O:0.999956
is	O	O:0.999986
now	O	O:0.999950
a	O	O:0.999995
panda	O	O:0.998890
DataFrameGroupBy	B-API	B-API:0.634230
object	O	O:0.999773
,	O	O:0.999969
I	O	O:0.999989
cannot	O	O:0.999982
really	O	O:0.999903
apply	O	O:0.984296
your	O	O:0.999303
fucntion	O	O:0.999902
directly	O	O:0.999944
can	O	O:0.999907
I	O	O:0.999998
?	O	O:0.999994
	
Apply	O	O:0.999911
your	O	O:0.999586
own	O	O:0.997432
function	O	O:0.999601
:	O	O:0.999954
#CODE	O	O:0.999848
	
I	O	O:0.999870
was	O	O:0.999980
surprised	O	O:0.999626
to	O	O:0.999985
see	O	O:0.999999
that	O	O:0.999974
there	O	O:0.999966
was	O	O:0.999985
no	O	O:0.999958
"	O	O:0.999994
rolling	O	O:0.979053
"	O	O:0.999671
function	O	O:0.999753
built	O	O:0.999545
into	O	O:0.999891
pandas	O	O:0.999239
for	O	O:0.999991
this	O	O:0.998779
,	O	O:0.999983
but	O	O:0.999967
I	O	O:0.999934
was	O	O:0.999985
hoping	O	O:0.999340
somebody	O	O:0.999661
could	O	O:0.999940
help	O	O:0.999948
with	O	O:0.999997
a	O	O:0.999945
function	O	O:0.999974
that	O	O:0.999965
I	O	O:0.999999
can	O	O:0.999999
then	O	O:0.999989
apply	O	O:0.978596
to	O	O:0.999991
the	O	O:0.999998
df	O	O:0.999219
[	O	O:0.999938
'	O	O:0.999990
Alpha	O	O:0.999833
']	O	O:0.999983
column	O	O:0.999787
using	O	O:0.999667
pd.rolling_apply	B-API	B-API:0.996322
.	O	O:0.998380
	
We	O	O:0.999965
can	O	O:0.999951
apply	O	O:0.995896
column	O	O:0.999739
operations	O	O:0.999485
and	O	O:0.999981
get	O	O:0.999810
boolean	O	O:0.990552
Series	O	O:0.999785
objects	O	O:0.994573
:	O	O:0.999958
#CODE	O	O:0.999869
	
Alternative	O	O:0.999581
,	O	O:0.999991
you	O	O:0.999982
could	O	O:0.999954
use	O	O:0.999995
`	O	O:0.999978
apply	O	B-API:0.992964
`	O	O:0.999844
.	O	O:0.997625
	
`	O	O:0.999957
apply	O	B-API:0.826525
`'	O	O:0.999808
s	O	O:0.999352
callable	O	O:0.998255
is	O	O:0.999990
passed	O	O:0.998451
a	O	O:0.999986
sub-DataFrame	O	O:0.998806
which	O	O:0.999886
gives	O	O:0.999957
you	O	O:0.999997
access	O	O:0.999894
to	O	O:0.999997
all	O	O:0.999999
the	O	O:0.999990
columns	O	O:0.997172
:	O	O:0.999979
#CODE	O	O:0.999927
	
Using	O	O:0.996722
`	O	O:0.999756
idxmax	B-API	B-API:0.999450
`	O	O:0.999971
and	O	O:0.999465
`	O	O:0.999991
loc	O	B-API:0.994717
`	O	O:0.999928
is	O	O:0.999952
typically	O	O:0.999870
faster	O	O:0.999898
than	O	O:0.999232
`	O	O:0.999985
apply	O	B-API:0.965743
`	O	O:0.999943
,	O	O:0.999959
especially	O	O:0.999828
for	O	O:0.999975
large	O	O:0.998359
DataFrames	O	O:0.988626
.	O	O:0.999649
	
Using	O	O:0.999227
IPython's	O	O:0.994113
%timeit	O	O:0.872913
:	O	O:0.999917
#CODE	O	O:0.999776
	
Due	O	O:0.999820
to	O	O:0.999981
the	O	O:0.999999
very	O	O:0.999771
large	O	O:0.999960
nature	O	O:0.999864
of	O	O:0.999990
the	O	O:0.999975
problem	O	O:0.999816
,	O	O:0.999992
I'm	O	O:0.999991
using	O	O:0.999948
the	O	O:0.999986
pandas	O	O:0.999468
as	O	O:0.999992
the	O	O:0.999951
main	O	O:0.999620
Database	O	O:0.999851
API	O	O:0.999975
as	O	O:0.999992
its	O	O:0.999906
very	O	O:0.999932
easy	O	O:0.999840
to	O	O:0.999994
apply	O	O:0.878606
function	O	O:0.999721
to	O	O:0.999954
column	O	O:0.999990
.	O	O:0.999929
	
Apply	O	O:0.997944
function	O	O:0.999657
to	O	O:0.999982
pandas	O	O:0.999983
groupby	B-API	B-API:0.945838
	
This	O	O:0.999752
code	O	O:0.999869
throws	O	O:0.999965
an	O	O:0.999991
error	O	O:0.999823
,	O	O:0.999827
'	O	O:0.999952
DataFrame	B-API	O:0.986463
object	O	O:0.999806
has	O	O:0.999975
no	O	O:0.999979
attribute	O	O:0.999816
'	O	O:0.999986
size	O	O:0.999175
'	O	O:0.999925
.	O	O:0.999934
	
How	O	O:0.999877
can	O	O:0.999945
I	O	O:1.000000
apply	O	O:0.986840
a	O	O:0.999251
function	O	O:0.999656
to	O	O:0.999982
calculate	O	O:0.999995
this	O	O:0.999957
in	O	O:0.999993
Pandas	O	O:0.999859
?	O	O:0.999941
	
`	O	O:0.999961
apply	O	B-API:0.989339
`	O	O:0.999971
takes	O	O:0.998966
a	O	O:0.999984
function	O	O:0.999757
to	O	O:0.999993
apply	O	O:0.976150
to	O	O:0.999979
each	O	O:0.999983
value	O	O:0.999896
,	O	O:0.999993
not	O	O:0.999989
the	O	O:0.999989
series	O	O:0.999845
,	O	O:0.999958
and	O	O:0.999995
accepts	O	O:0.999669
kwargs	O	O:0.993963
.	O	O:0.999778
	
I	O	O:0.999992
have	O	O:0.999989
a	O	O:0.999979
pandas	O	O:0.999672
DataFrame	B-API	O:0.998309
that	O	O:0.999861
includes	O	O:0.999973
a	O	O:0.999995
pipe-separated	O	O:0.998152
string	O	O:0.999801
in	O	O:0.999997
one	O	O:0.999994
of	O	O:0.999997
the	O	O:0.999969
fields	O	O:0.999398
.	O	O:0.999796
	
I've	O	O:0.999658
split	O	O:0.998457
this	O	O:0.999948
into	O	O:0.999818
a	O	O:0.999991
list	O	O:0.996457
inside	O	O:0.999927
an	O	O:0.999961
`	O	O:0.999981
apply	O	B-API:0.992146
`	O	O:0.999805
and	O	O:0.999829
added	O	O:0.999959
it	O	O:0.999900
to	O	O:0.999965
the	O	O:0.999998
DataFrame	B-API	O:0.986347
.	O	O:0.999878
	
The	O	O:0.999799
number	O	O:0.999458
and	O	O:0.999996
content	O	O:0.999966
of	O	O:0.999990
the	O	O:0.999992
values	O	O:0.999586
in	O	O:0.999974
the	O	O:0.999992
pipe-separated	O	O:0.999238
string	O	O:0.999871
vary	O	O:0.998961
.	O	O:0.999923
	
#CODE	O	O:0.998453
	
But	O	O:0.999796
A	O	O:0.999973
)	O	O:0.999935
I'm	O	O:0.999851
not	O	O:0.999990
sure	O	O:0.999953
how	O	O:0.999988
to	O	O:0.999994
apply	O	O:0.926334
the	O	O:0.999895
conditional	O	O:0.970395
logic	O	O:0.999816
and	O	O:0.999977
B	O	O:0.999969
)	O	O:0.999958
I	O	O:0.999993
have	O	O:0.999989
to	O	O:0.999979
apply	O	O:0.975184
the	O	O:0.999895
logic	O	O:0.999659
to	O	O:0.999995
each	O	O:0.999997
column	O	O:0.999991
iteratively	O	O:0.999896
rather	O	O:0.999989
than	O	O:0.999825
to	O	O:0.999986
the	O	O:1.000000
dataframe	B-API	O:0.999418
as	O	O:0.999999
a	O	O:0.999997
whole	O	O:0.997665
.	O	O:0.999852
	
How	O	O:0.999861
can	O	O:0.999938
I	O	O:0.999999
apply	O	O:0.980698
conditional	O	O:0.969195
logic	O	O:0.999639
to	O	O:0.999970
the	O	O:0.999999
non-null	O	O:0.999850
values	O	O:0.999941
of	O	O:0.999996
a	O	O:0.999998
dataframe	B-API	O:0.996952
,	O	O:0.999996
preserving	O	O:0.999802
the	O	O:0.999993
nullity	O	O:0.999497
of	O	O:0.999993
the	O	O:0.999992
other	O	O:0.999955
fields	O	O:0.999256
?	O	O:0.999924
	
There	O	O:0.999230
isn't	O	O:0.999567
,	O	O:0.999987
but	O	O:0.999988
if	O	O:0.999989
you	O	O:0.999995
want	O	O:0.999971
to	O	O:0.999999
only	O	O:0.999999
apply	O	O:0.859167
to	O	O:0.999988
unique	O	O:0.987002
values	O	O:0.999482
,	O	O:0.999998
just	O	O:0.999958
do	O	O:0.999997
that	O	O:0.999911
yourself	O	O:0.999856
.	O	O:0.999950
	
Get	O	O:0.998869
`	O	O:0.999982
mySeries.unique()	O	O:0.792712
`	O	O:0.999996
,	O	O:0.999998
then	O	O:0.999918
use	O	O:0.999999
your	O	O:0.999436
function	O	O:0.999953
to	O	O:0.999994
pre-calculate	O	O:0.999959
the	O	O:0.999990
mapped	O	O:0.999904
alternatives	O	O:0.999788
for	O	O:0.999985
those	O	O:0.999973
unique	O	O:0.708987
values	O	O:0.999244
and	O	O:0.999994
create	O	O:0.999971
a	O	O:0.999995
dictionary	O	O:0.999854
with	O	O:0.999959
the	O	O:0.999996
resulting	O	O:0.999806
mappings	O	O:0.997614
.	O	O:0.999874
	
Then	O	O:0.998609
use	O	O:0.999992
pandas	O	O:0.999275
`	O	O:0.999976
map	O	B-API:0.988580
`	O	O:0.999991
with	O	O:0.999674
the	O	O:0.999987
dictionary	O	O:0.999666
.	O	O:0.999788
	
This	O	O:0.999606
should	O	O:0.999965
be	O	O:0.999999
about	O	O:0.999988
as	O	O:0.999990
fast	O	O:0.999039
as	O	O:0.999995
you	O	O:0.999911
can	O	O:0.999960
expect	O	O:0.999993
.	O	O:0.999975
	
In	O	O:0.999984
this	O	O:0.999969
case	O	O:0.999971
,	O	O:0.999998
how	O	O:0.999986
can	O	O:0.999983
we	O	O:1.000000
execute	O	O:0.999926
the	O	O:0.999989
groupby	B-API	B-API:0.955017
on	O	O:0.999993
values	O	O:0.999808
of	O	O:0.999982
A	O	O:0.999991
,	O	O:0.999999
then	O	O:0.999715
apply	O	O:0.980168
this	O	O:0.999858
computation	O	O:0.999838
to	O	O:0.999994
each	O	O:0.999990
individual	O	O:0.999732
group	O	O:0.998846
,	O	O:0.999990
and	O	O:0.999989
finally	O	O:0.999875
plot	O	O:0.999687
the	O	O:0.999990
D	O	O:0.999975
values	O	O:0.999592
for	O	O:0.999970
the	O	O:0.999992
two	O	O:0.999861
groups	O	O:0.999320
?	O	O:0.999943
	
Rolling	O	O:0.609337
apply	O	B-API:0.773914
question	O	O:0.993134
	
For	O	O:0.999962
each	O	O:0.999887
group	O	O:0.998317
in	O	O:0.999990
the	O	O:0.999911
groupby	B-API	B-API:0.992087
object	O	O:0.999783
,	O	O:0.999976
we	O	O:0.999995
will	O	O:0.999969
want	O	O:0.999991
to	O	O:0.999997
apply	O	O:0.995635
a	O	O:0.999272
function	O	O:0.984278
:	O	O:0.999964
#CODE	O	O:0.999829
	
We	O	O:0.999990
want	O	O:0.999932
to	O	O:0.999998
take	O	O:0.999997
the	O	O:0.999983
Times	O	O:0.999899
column	O	O:0.999806
,	O	O:0.999991
and	O	O:0.999994
for	O	O:0.999987
each	O	O:0.998658
time	O	O:0.999891
,	O	O:0.999997
apply	O	O:0.889263
a	O	O:0.999371
function	O	O:0.996858
.	O	O:0.999878
	
That's	O	O:0.999900
done	O	O:0.999883
with	O	O:0.999895
`	O	O:0.999980
applymap	B-API	B-API:0.998593
`	O	O:0.999878
:	O	O:0.999617
#CODE	O	O:0.999910
	
#URL	O	O:0.999088
will	O	O:0.999838
provide	O	O:0.999932
an	O	O:0.999995
error	O	O:0.999845
for	O	O:0.999997
your	O	O:0.999804
code	O	O:0.999275
here	O	O:0.999367
(	O	O:0.999992
because	O	O:0.999964
you	O	O:0.999928
are	O	O:0.999999
trying	O	O:0.999955
to	O	O:0.999989
min_itemsize	O	O:0.999550
with	O	O:0.999981
a	O	O:0.999994
column	O	O:0.999943
that	O	O:0.999352
is	O	O:0.999994
not	O	O:0.999984
queryable	O	O:0.999522
)	O	O:0.999952
.	O	O:0.999691
	
Also	O	O:0.999816
,	O	O:0.999998
you	O	O:0.999990
can	O	O:0.999963
use	O	O:0.999998
lib.max_len_string_array	O	O:0.981378
(	O	O:0.999968
s.values	O	O:0.993799
)	O	O:0.999987
for	O	O:0.999993
a	O	O:0.999984
quick	O	O:0.996167
max	O	O:0.554463
in	O	O:0.999996
your	O	O:0.999738
apply	O	B-API:0.835057
(	O	O:0.999850
faster	O	O:0.997393
and	O	O:0.999984
you	O	O:0.999940
don't	O	O:0.999960
need	O	O:0.999966
to	O	O:0.999999
test	O	O:0.999965
for	O	O:0.999951
object	O	O:0.999938
type	O	O:0.998015
)	O	O:0.999967
	
I	O	O:0.999905
don't	O	O:0.999868
understand	O	O:0.999649
what	O	O:0.999354
is	O	O:0.999998
your	O	O:0.999730
question	O	O:0.999058
.	O	O:0.999936
	
Also	O	O:0.999501
,	O	O:0.999997
what	O	O:0.999421
is	O	O:0.999995
that	O	O:0.999907
`	O	O:0.999998
apply	O	B-API:0.995799
`	O	O:0.999746
method	O	O:0.998201
?	O	O:0.999971
	
and	O	O:0.999977
the	O	O:0.999955
"	O	O:0.999848
reshape	O	B-API:0.849679
"	O	O:0.999849
feature	O	O:0.995292
(	O	O:0.999929
does	O	O:0.999853
not	O	O:0.999992
apply	O	O:0.893677
to	O	O:0.999913
3-d	O	O:0.999981
case	O	O:0.999679
though	O	O:0.999918
...	O	O:0.999018
):	O	O:0.999909
#CODE	O	O:0.999646
	
How	O	O:0.999903
to	O	O:0.999983
apply	O	O:0.987267
custom	O	O:0.998616
column	O	O:0.999881
order	O	O:0.999864
to	O	O:0.999948
boxplot	O	O:0.995977
?	O	O:0.999954
	
How	O	O:0.999880
can	O	O:0.999947
I	O	O:1.000000
apply	O	O:0.952990
my	O	O:0.999529
custom	O	O:0.999118
column	O	O:0.999972
order	O	O:0.999890
to	O	O:0.999990
the	O	O:0.999998
boxplot	O	O:0.988217
columns	O	O:0.999810
?	O	O:0.999983
	
(	O	O:0.999955
other	O	O:0.999973
than	O	O:0.999935
ugly	O	O:0.999911
kludging	O	O:0.999852
the	O	O:0.999983
column	O	O:0.999901
names	O	O:0.999955
with	O	O:0.999988
a	O	O:0.999996
prefix	O	O:0.999803
to	O	O:0.999994
force	O	O:0.999991
ordering	O	O:0.999847
)	O	O:0.999888
	
not	O	O:0.999972
where	O	O:0.999933
I	O	O:0.999944
was	O	O:0.999969
headed	O	O:0.996957
.	O	O:0.999849
	
I	O	O:0.999980
typically	O	O:0.999994
just	O	O:0.999488
use	O	O:0.999965
`	O	O:0.999923
apply	O	B-API:0.985343
`	O	O:0.999977
with	O	O:0.999676
a	O	O:0.999996
hard-coded	O	O:0.994662
lookup	O	O:0.995525
table	O	O:0.999912
.	O	O:0.999975
see	O	O:0.999985
my	O	O:0.999988
edited	O	O:0.999852
response	O	O:0.999918
for	O	O:0.999992
a	O	O:0.999997
different	O	O:0.998556
approach	O	O:0.999836
,	O	O:0.999974
though	O	O:0.999658
.	O	O:0.999918
	
Then	O	O:0.999606
apply	O	O:0.811028
the	O	O:0.999882
groupby	B-API	B-API:0.999522
function	O	O:0.999666
and	O	O:0.999983
add	O	O:0.999988
a	O	O:0.999974
column	O	O:0.997441
City	O	O:0.998211
:	O	O:0.999955
#CODE	O	O:0.999606
	
I	O	O:0.999994
have	O	O:0.999970
finally	O	O:0.999105
decided	O	O:0.999909
to	O	O:0.999972
use	O	O:0.999997
apply	O	B-API:0.787718
which	O	O:0.998244
I	O	O:0.999963
understand	O	O:0.999063
is	O	O:0.999950
more	O	O:0.998739
flexible	O	O:0.999476
.	O	O:0.999829
	
I	O	O:0.999970
finally	O	O:0.999832
decided	O	O:0.999073
to	O	O:0.999965
use	O	O:0.999988
apply	O	B-API:0.923644
.	O	O:0.997991
	
apply	O	B-API:0.927891
is	O	O:0.999930
more	O	O:0.998216
flexible	O	O:0.999897
than	O	O:0.999050
agg	O	B-API:0.948518
and	O	O:0.999984
transform	O	B-API:0.584086
because	O	O:0.999836
you	O	O:0.999968
can	O	O:0.999997
define	O	O:0.999999
your	O	O:0.999958
own	O	O:0.999308
function	O	O:0.999918
.	O	O:0.999859
	
The	O	O:0.999850
`	O	O:0.999981
rename	O	O:0.975553
`	O	O:0.999966
function	O	O:0.999820
should	O	O:0.999973
convert	O	O:0.999395
the	O	O:0.999994
the	O	O:0.999982
dictionary	O	O:0.999901
to	O	O:0.999998
a	O	O:0.999999
mapper	O	O:0.926611
and	O	O:0.999986
apply	O	O:0.707229
it	O	O:0.999627
to	O	O:0.999912
each	O	O:0.999961
index	O	O:0.999707
.	O	O:0.999938
	
However	O	O:0.999880
,	O	O:0.999983
for	O	O:0.999993
the	O	O:0.999608
`	O	O:0.999866
MultiIndex	O	B-API:0.570363
`	O	O:0.999996
case	O	O:0.999725
,	O	O:0.999998
it	O	O:0.999997
only	O	O:0.999971
walk	O	O:0.999846
through	O	O:0.999870
each	O	O:0.999538
tuple	O	O:0.996285
but	O	O:0.999967
not	O	O:0.999919
each	O	O:0.999732
index	O	O:0.999703
.	O	O:0.999911
	
Should	O	O:0.999875
I	O	O:0.999994
apply	O	O:0.873927
the	O	O:0.998680
`	O	O:0.999482
df.sortlevel	B-API	B-API:0.998011
(	O	O:0.999976
level=	O	O:0.998544
'	O	O:0.999920
Transition	O	O:0.995321
')`	O	O:0.999949
after	O	O:0.999931
each	O	O:0.997636
`	O	O:0.999984
df.set_value()	O	O:0.860451
`	O	O:0.999992
call	O	O:0.988245
?	O	O:0.999979
	
Group	O	O:0.999719
by	O	O:0.999947
k1	O	O:0.999921
,	O	O:0.999966
select	O	O:0.998781
column	O	O:0.999748
k2	O	O:0.999912
and	O	O:0.999995
apply	O	O:0.727699
a	O	O:0.999813
lambda	O	O:0.940065
function	O	O:0.999632
.	O	O:0.999589
	
The	O	O:0.999789
lambda	O	O:0.999752
gets	O	O:0.999712
frequency	O	O:0.999965
counts	O	O:0.999027
for	O	O:0.999997
each	O	O:0.999956
level	O	O:0.999660
of	O	O:0.999970
k2	O	O:0.999708
within	O	O:0.999600
k1	O	O:0.999682
and	O	O:0.999998
then	O	O:0.999951
we	O	O:1.000000
divide	O	O:0.999927
by	O	O:0.999993
the	O	O:0.999999
count	O	O:0.998432
of	O	O:0.999958
k1	O	O:0.996559
:	O	O:0.999978
#CODE	O	O:0.999734
	
First	O	O:0.999867
using	O	O:0.999828
`	O	O:0.999930
apply	O	B-API:0.993656
`	O	O:0.999964
you	O	O:0.999641
could	O	O:0.999996
add	O	O:0.999999
a	O	O:0.999999
column	O	O:0.999692
with	O	O:0.999972
the	O	O:0.999973
signed	O	O:0.997776
shares	O	O:0.987133
(	O	O:0.999994
positive	O	O:0.999399
for	O	O:0.999864
Buy	O	O:0.999938
negative	O	O:0.997847
for	O	O:0.999699
Sell	O	O:0.953373
):	O	O:0.999815
#CODE	O	O:0.999116
	
Note	O	O:0.999950
that	O	O:0.999851
`	O	O:0.999996
numpy.rollaxis	B-API	B-API:0.994293
`	O	O:0.999980
brings	O	O:0.999295
the	O	O:0.999993
specified	O	O:0.999732
axis	O	O:0.999893
to	O	O:0.999990
the	O	O:1.000000
first	O	O:0.999626
dimension	O	O:0.999817
and	O	O:0.999997
then	O	O:0.999941
let's	O	O:0.999958
us	O	O:0.999992
iterate	O	O:0.999864
over	O	O:0.999888
arrays	O	O:0.999796
with	O	O:0.999950
the	O	O:0.999998
remaining	O	O:0.999778
dimensions	O	O:0.999257
,	O	O:0.999988
i.e.	O	O:0.999917
,	O	O:0.999996
if	O	O:0.999992
we	O	O:0.999998
want	O	O:0.999980
to	O	O:0.999995
shuffle	O	O:0.999989
along	O	O:0.999744
the	O	O:0.999984
first	O	O:0.999170
dimension	O	O:0.999312
(	O	O:0.999996
columns	O	O:0.999907
)	O	O:0.999995
,	O	O:0.999996
we	O	O:0.999999
need	O	O:0.999979
to	O	O:0.999998
roll	O	O:0.988971
the	O	O:0.999989
second	O	O:0.999860
dimension	O	O:0.999939
to	O	O:0.999995
the	O	O:1.000000
front	O	O:0.999802
,	O	O:0.999994
so	O	O:0.999999
that	O	O:0.999983
we	O	O:0.999999
apply	O	O:0.795928
the	O	O:0.999966
shuffling	O	O:0.999182
to	O	O:0.999993
views	O	O:0.999996
over	O	O:0.999880
the	O	O:0.999993
first	O	O:0.999661
dimension	O	O:0.999626
.	O	O:0.999872
	
Still	O	O:0.999548
not	O	O:0.999979
sure	O	O:0.999958
what	O	O:0.999869
you're	O	O:0.999953
asking	O	O:0.999377
,	O	O:0.999986
but	O	O:0.999975
if	O	O:0.999991
you	O	O:0.999997
have	O	O:0.999996
a	O	O:0.999995
function	O	O:0.999866
for	O	O:0.999995
one	O	O:0.999987
value	O	O:0.999913
,	O	O:0.999997
you	O	O:0.999987
can	O	O:0.999998
then	O	O:0.999993
use	O	O:0.999998
Series	O	O:0.997506
/	O	O:0.999934
DataFrame	B-API	O:0.989241
`	O	O:0.999984
apply	O	B-API:0.925432
`	O	O:0.999841
or	O	O:0.999816
index's	O	O:0.999965
`	O	O:0.999975
map	O	B-API:0.984551
`	O	O:0.999990
,	O	O:0.999958
e.g.	O	O:0.999862
`	O	O:0.999927
df.index.map	O	B-API:0.570956
(	O	O:0.999993
lambda	O	O:0.998951
t	B-API	O:0.637094
:	O	O:0.999978
t.value	O	O:0.999755
)`	O	O:0.999905
?	O	O:0.999910
	
You	O	O:0.999910
can	O	O:0.999993
also	O	O:0.999993
use	O	O:0.999995
the	O	O:0.999841
standard	O	O:0.999830
time	O	O:0.999940
functions	O	O:0.999986
yearmon()	O	O:0.997275
or	O	O:0.999993
yearqtr()	O	O:0.998727
,	O	O:0.999992
or	O	O:0.999999
custom	O	O:0.999230
functions	O	O:0.999710
for	O	O:0.999974
both	O	O:0.999738
split	O	O:0.971849
and	O	O:0.999973
apply	O	B-API:0.766963
.	O	O:0.995716
	
This	O	O:0.999201
method	O	O:0.999891
is	O	O:0.999993
as	O	O:0.999995
syntactically	O	O:0.999804
sweet	O	O:0.999735
as	O	O:0.999997
that	O	O:0.999810
of	O	O:0.999997
pandas	O	O:0.999415
.	O	O:0.999957
	
can	O	O:0.999720
u	O	O:0.999999
give	O	O:0.999969
a	O	O:0.999996
small	O	O:0.999660
example	O	O:0.999806
of	O	O:0.999966
what	O	O:0.999946
kind	O	O:0.999994
of	O	O:0.999994
functions	O	O:0.999888
u	O	O:0.999970
r	O	O:0.999985
going	O	O:0.999782
to	O	O:0.999989
apply	O	O:0.923024
with	O	O:0.999667
the	O	O:0.999936
group	O	O:0.996512
?	O	O:0.999973
and	O	O:0.999996
a	O	O:0.999998
small	O	O:0.992403
example	O	O:0.999833
frame	O	O:0.999945
would	O	O:0.999970
be	O	O:0.999995
helpful	O	O:0.999694
.	O	O:0.999695
	
It	O	O:0.999984
goes	O	O:0.999885
a	O	O:0.999995
bit	O	O:0.999129
against	O	O:0.999887
Pandas	O	O:0.997974
'	O	O:0.999954
philosophy	O	O:0.999897
,	O	O:0.999980
which	O	O:0.999965
seems	O	O:0.999951
to	O	O:0.999996
see	O	O:0.999994
`	O	O:0.999991
Series	O	O:0.998049
`	O	O:0.999999
as	O	O:0.999987
a	O	O:0.999997
one-dimensional	O	O:0.999445
data	O	O:0.999898
structure	O	O:0.999739
.	O	O:0.999937
	
Therefore	O	O:0.999892
you	O	O:0.999996
have	O	O:0.999996
to	O	O:0.999999
create	O	O:0.999993
the	O	O:0.999983
`	O	O:0.999988
Series	O	O:0.997124
`	O	O:0.999998
by	O	O:0.999945
hand	O	O:0.999899
,	O	O:0.999995
tell	O	O:0.999966
them	O	O:0.999909
that	O	O:0.999991
they	O	O:0.999999
have	O	O:0.999995
data	O	O:0.999989
type	O	O:0.999209
`"	O	O:0.999968
object	O	O:0.999388
"`	O	O:0.999878
.	O	O:0.999659
	
This	O	O:0.999623
means	O	O:0.999888
don't	O	O:0.999946
apply	O	O:0.831432
any	O	O:0.999968
automatic	O	O:0.999888
data	O	O:0.999726
conversions	O	O:0.997366
.	O	O:0.999946
	
I'm	O	O:0.999840
not	O	O:0.999982
sure	O	O:0.999965
there's	O	O:0.999961
a	O	O:0.999993
vectorized	O	O:0.999508
hook	O	O:0.994937
,	O	O:0.999988
but	O	O:0.999988
you	O	O:0.999980
can	O	O:0.999984
use	O	O:0.999998
`	O	O:0.999982
apply	O	B-API:0.986404
`	O	O:0.999963
,	O	O:0.998997
anyhow	O	O:0.996611
:	O	O:0.999913
#CODE	O	O:0.999673
	
In	O	O:0.999947
essence	O	O:0.999895
you	O	O:0.999962
are	O	O:0.999995
flattening	O	O:0.999924
the	O	O:0.999906
blink	O	O:0.999926
frame	O	O:0.999994
to	O	O:0.999999
a	O	O:1.000000
series	O	O:0.999952
that	O	O:0.999978
you	O	O:1.000000
then	O	O:0.999984
can	O	O:0.999999
apply	O	O:0.993311
to	O	O:0.999998
each	O	O:0.999980
of	O	O:0.999992
the	O	O:0.999967
trial	O	O:0.997489
	
Group	O	O:0.999860
them	O	O:0.998963
and	O	O:0.999999
then	O	O:0.999937
apply	O	O:0.890031
our	O	O:0.999873
customized	O	O:0.973749
function	O	O:0.999774
	
Then	O	O:0.999763
you	O	O:0.999993
can	O	O:0.999992
`	O	O:1.000000
apply	O	B-API:0.949037
`	O	O:0.999985
this	O	O:0.986215
(	O	O:0.999990
row-wise	O	O:0.979244
):	O	O:0.999857
#CODE	O	O:0.999576
	
apply	O	O:0.808440
changes	O	O:0.998302
to	O	O:0.999984
the	O	O:1.000000
column	O	O:0.999974
names	O	O:0.999979
of	O	O:0.999998
a	O	O:0.999993
dataframe	B-API	O:0.994606
	
There	O	O:0.999824
are	O	O:0.999996
a	O	O:0.999997
few	O	O:0.999415
approaches	O	O:0.999546
.	O	O:0.999651
	
Using	O	O:0.998668
`	O	O:0.999935
apply	O	B-API:0.994754
`	O	O:0.999517
:	O	O:0.999271
#CODE	O	O:0.999898
	
Is	O	O:0.999984
there	O	O:0.999967
a	O	O:0.999901
TimeSeries	O	O:0.998906
method	O	O:0.999966
to	O	O:0.999994
apply	O	O:0.942221
`	O	O:0.999622
.replace	B-API	B-API:0.999518
(	O	O:0.999993
tzinfo=None	O	O:0.999912
)`	O	O:0.999924
to	O	O:0.999998
each	O	O:0.999997
date	O	O:0.999262
in	O	O:0.999968
the	O	O:0.999972
index	O	O:0.999689
?	O	O:0.999942
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999977
apply	O	B-API:0.984785
`	O	O:0.999974
to	O	O:0.999641
do	O	O:0.999999
this	O	O:0.999425
:	O	O:0.999966
#CODE	O	O:0.999889
	
@USER	O	O:0.999506
are	O	O:0.999937
you	O	O:0.999950
saying	O	O:0.999959
the	O	O:0.999977
above	O	O:0.998279
worked	O	O:0.999865
on	O	O:0.999994
newer	O	O:0.999808
or	O	O:0.999985
older	O	O:0.999831
pandas	O	O:0.999383
?	O	O:0.999957
	
There	O	O:0.999824
are	O	O:0.999997
a	O	O:0.999991
few	O	O:0.999811
edge	O	O:0.999956
cases	O	O:0.998523
in	O	O:0.999994
pandas	O	O:0.999429
'	O	O:0.999996
apply	O	O:0.530025
which	O	O:0.999672
have	O	O:0.999755
been	O	O:0.999881
tweaked	O	O:0.999979
over	O	O:0.999932
last	O	O:0.999496
few	O	O:0.999962
releases	O	O:0.999692
so	O	O:0.999995
this	O	O:0.999974
could	O	O:0.999985
be	O	O:1.000000
one	O	O:0.999998
of	O	O:0.999999
them	O	O:0.998661
!	O	O:0.999967
	
You	O	O:0.999899
can	O	O:0.999946
convert	O	O:0.999957
this	O	O:0.999993
column	O	O:0.999961
to	O	O:0.999997
integers	O	O:0.999996
by	O	O:0.999961
`	O	O:0.999992
apply	O	B-API:0.983079
`	O	O:0.999930
-ing	O	O:0.771590
`	O	O:0.999957
int	O	O:0.942178
`	O	O:0.999910
:	O	O:0.999592
#CODE	O	O:0.999906
	
Thanks	O	O:0.999385
I	O	O:0.999996
guess	O	O:0.999914
I	O	O:0.999990
just	O	O:0.999988
have	O	O:0.999967
to	O	O:0.999997
iterate	O	O:0.999998
over	O	O:0.999990
each	O	O:0.999832
of	O	O:0.999987
the	O	O:0.999968
hierarchy	O	O:0.999940
and	O	O:0.999991
apply	O	O:0.708720
pivot_table	B-API	B-API:0.995278
to	O	O:0.999931
get	O	O:0.999997
my	O	O:0.999992
desire	O	O:0.999732
output	O	O:0.999529
.	O	O:0.999805
	
It's	O	O:0.999831
less	O	O:0.998996
complicated	O	O:0.999559
and	O	O:0.999984
faster	O	O:0.999868
than	O	O:0.999718
using	O	O:0.999801
`	O	O:0.999923
apply	O	B-API:0.989765
`	O	O:0.999948
or	O	O:0.999123
`	O	O:0.999977
map	O	B-API:0.992226
`	O	O:0.999973
.	O	O:0.999477
	
Something	O	O:0.999892
like	O	O:0.999618
`	O	O:0.999973
np.dstack	B-API	B-API:0.997383
`	O	O:0.999982
is	O	O:0.999993
twice	O	O:0.999976
as	O	O:0.999999
fast	O	O:0.999447
as	O	O:0.999980
`	O	O:0.999900
zip	O	O:0.953057
`	O	O:0.999978
,	O	O:0.999745
but	O	O:0.999941
wouldn't	O	O:0.999943
give	O	O:0.999893
you	O	O:0.999988
tuples	O	O:0.999463
.	O	O:0.999949
	
The	O	O:0.999939
midpoint	O	O:0.999091
formula	O	O:0.999970
that	O	O:0.999941
I	O	O:0.999999
wish	O	O:0.999991
to	O	O:0.999955
apply	O	O:0.905432
is	O	O:0.999977
dependent	O	O:0.998711
on	O	O:0.999991
the	O	O:0.999936
bid	O	O:0.999397
/	O	O:0.999978
ask	O	O:0.999929
spread	O	O:0.999669
of	O	O:0.999970
the	O	O:0.999878
instrument	O	O:0.999673
.	O	O:0.999790
	
If	O	O:0.999977
the	O	O:0.999989
current	O	O:0.999605
spread	O	O:0.998617
is	O	O:0.999990
wider	O	O:0.999791
than	O	O:0.999829
the	O	O:0.999981
minimum	O	O:0.999937
tick	O	O:0.999734
increment	O	O:0.999541
,	O	O:0.999993
the	O	O:0.999989
midpoint	O	O:0.999774
will	O	O:0.999876
be	O	O:0.999998
the	O	O:0.999998
simple	O	O:0.999712
average	O	O:0.999501
of	O	O:0.999937
bid	O	O:0.998629
and	O	O:0.999995
ask	O	O:0.999904
prices	O	O:0.994468
at	O	O:0.999991
that	O	O:0.999862
moment	O	O:0.999948
.	O	O:0.999945
	
If	O	O:0.999966
the	O	O:0.999976
spread	O	O:0.996442
is	O	O:0.999996
equal	O	O:0.999606
to	O	O:0.999997
the	O	O:0.999999
minimum	O	O:0.999597
,	O	O:0.999994
the	O	O:0.999995
midpoint	O	O:0.996650
is	O	O:0.999979
weighted	O	O:0.999865
based	O	O:0.999699
on	O	O:0.999982
the	O	O:0.999872
bid	O	O:0.999198
and	O	O:0.999981
ask	O	O:0.999782
quantity	O	O:0.998976
.	O	O:0.999601
	
I'm	O	O:0.999839
not	O	O:0.999979
sure	O	O:0.999981
this	O	O:0.999973
used	O	O:0.999925
to	O	O:0.999980
work	O	O:0.999968
.	O	O:0.999965
	
If	O	O:0.999908
I'm	O	O:0.999976
reading	O	O:0.999791
the	O	O:0.999987
code	O	O:0.999812
right	O	O:0.999905
,	O	O:0.999998
the	O	O:0.999977
intent	O	O:0.997828
is	O	O:0.999987
to	O	O:0.999971
apply	O	O:0.994661
this	O	O:0.998545
function	O	O:0.999883
to	O	O:0.999998
corresponding	O	O:0.999998
elements	O	O:0.999901
of	O	O:0.999990
the	O	O:0.999996
four	O	O:0.999608
`	O	O:0.999982
DataFrames	O	O:0.984227
`	O	O:0.999986
.	O	O:0.999705
	
But	O	O:0.999437
that's	O	O:0.999654
not	O	O:0.999981
what	O	O:0.999948
it	O	O:0.999990
did	O	O:0.999955
in	O	O:0.999997
olden	O	O:0.999632
times	O	O:0.999749
--	O	O:0.999987
previously	O	O:0.999256
,	O	O:0.999995
I'm	O	O:0.999983
pretty	O	O:0.999869
sure	O	O:0.999926
the	O	O:0.999990
first	O	O:0.999423
branch	O	O:0.999649
would	O	O:0.999946
have	O	O:0.999976
been	O	O:0.999973
taken	O	O:0.999835
,	O	O:0.999996
because	O	O:0.999746
`	O	O:0.999800
(	O	O:0.999979
ask_price	O	O:0.999685
-	O	O:0.999983
bid_price	O	O:0.997461
)	O	O:0.999965
>	O	O:0.999906
tick_increment	O	O:0.992308
`	O	O:0.999833
was	O	O:0.999656
non-empty	O	O:0.999513
,	O	O:0.999954
and	O	O:0.999997
thus	O	O:0.999871
truthlike	O	O:0.999011
.	O	O:0.999916
	
So	O	O:0.999968
I	O	O:0.999981
suspect	O	O:0.999976
this	O	O:0.999652
code	O	O:0.999652
was	O	O:0.999991
buggy	O	O:0.999621
in	O	O:0.999978
the	O	O:0.999932
past	O	O:0.998115
.	O	O:0.999883
	
We	O	O:0.999965
can	O	O:0.999957
write	O	O:0.999997
a	O	O:0.999997
vectorized	O	O:0.999785
version	O	O:0.999820
of	O	O:0.999998
this	O	O:0.999884
which	O	O:0.999983
can	O	O:0.999988
work	O	O:0.999999
,	O	O:0.999999
at	O	O:0.999998
the	O	O:0.999997
cost	O	O:0.999554
of	O	O:0.999999
doing	O	O:0.999918
twice	O	O:0.999972
the	O	O:0.999979
work	O	O:0.998962
,	O	O:0.999992
but	O	O:0.999988
if	O	O:0.999992
there's	O	O:0.999971
a	O	O:0.999996
multi-DataFrame	O	O:0.999744
version	O	O:0.999936
of	O	O:0.999983
`	O	O:0.999976
applymap	B-API	B-API:0.995982
`	O	O:0.999922
I'm	O	O:0.999589
not	O	O:0.999987
sure	O	O:0.999795
I've	O	O:0.999820
used	O	O:0.999634
it	O	O:0.999835
.	O	O:0.999906
	
@USER	O	O:0.998977
it	O	O:0.999988
definitely	O	O:0.999803
ran	O	O:0.999810
without	O	O:0.999821
errors	O	O:0.999328
,	O	O:0.999978
though	O	O:0.999472
I'm	O	O:0.999966
not	O	O:0.999978
certain	O	O:0.999746
it	O	O:0.999963
was	O	O:0.999962
getting	O	O:0.999867
the	O	O:0.999992
right	O	O:0.999431
result	O	O:0.999774
.	O	O:0.999947
	
I	O	O:0.999944
may	O	O:0.999963
try	O	O:0.999937
installing	O	O:0.999847
an	O	O:0.999980
older	O	O:0.999838
version	O	O:0.999712
to	O	O:0.999995
find	O	O:0.999983
out	O	O:0.999981
what	O	O:0.999817
was	O	O:0.999938
actually	O	O:0.999970
getting	O	O:0.999524
calculated	O	O:0.996883
.	O	O:0.999890
	
I	O	O:0.999986
think	O	O:0.999941
you	O	O:0.999847
are	O	O:0.999990
understanding	O	O:0.999949
what	O	O:0.999793
I	O	O:0.999989
am	O	O:0.999999
aiming	O	O:0.999241
to	O	O:0.999977
do	O	O:0.999994
-	O	O:0.999999
essentially	O	O:0.999913
apply	O	O:0.705318
the	O	O:0.999861
midpoint	O	O:0.997924
formula	O	O:0.999728
for	O	O:0.999977
each	O	O:0.998925
symbol	O	O:0.999045
,	O	O:0.999990
and	O	O:0.999994
at	O	O:0.999998
each	O	O:0.999316
timestamp	O	O:0.999355
,	O	O:0.999985
in	O	O:0.999982
the	O	O:0.999994
same	O	O:0.999916
way	O	O:0.999993
that	O	O:0.999967
I	O	O:0.999999
could	O	O:0.999994
get	O	O:0.999974
a	O	O:0.999999
DataFrame	B-API	O:0.996625
of	O	O:0.999966
bid	O	O:0.999170
/	O	O:0.999987
ask	O	O:0.999783
spreads	O	O:0.999835
using	O	O:0.999543
`	O	O:0.999923
spread	O	O:0.982879
=	O	O:0.999956
ap	O	O:0.999581
-	O	O:0.999965
bp	O	O:0.998588
`	O	O:0.999965
.	O	O:0.999279
	
You	O	O:0.999877
need	O	O:0.999976
this	O	O:0.999960
odd	O	O:0.999996
apply	O	O:0.699243
at	O	O:0.999935
the	O	O:0.999928
end	O	O:0.999216
because	O	O:0.999907
not	O	O:0.999948
yet	O	O:0.999996
full	O	O:0.999863
support	O	O:0.998014
for	O	O:0.999953
timedelta64	O	O:0.972224
[	O	O:0.999943
ns	O	O:0.999702
]	O	O:0.999917
scalars	O	O:0.987438
(	O	O:0.999984
e.g.	O	O:0.999961
like	O	O:0.999911
how	O	O:0.999996
we	O	O:0.999992
use	O	O:0.999986
Timestamps	O	O:0.998077
now	O	O:0.999702
for	O	O:0.999987
datetime64	O	O:0.987684
[	O	O:0.999926
ns	O	O:0.999378
]	O	O:0.999926
,	O	O:0.999977
coming	O	O:0.997018
in	O	O:0.999981
0.12	O	O:0.998401
)	O	O:0.999949
	
PS	O	O:0.999662
:	O	O:0.999979
the	O	O:0.999993
same	O	O:0.999966
dict-based	O	O:0.999338
approach	O	O:0.999973
will	O	O:0.999944
work	O	O:0.999971
if	O	O:0.999998
you	O	O:0.999997
only	O	O:0.999993
want	O	O:0.999994
to	O	O:0.999992
apply	O	O:0.990753
the	O	O:0.999949
replace	O	O:0.980995
to	O	O:0.999995
certain	O	O:0.999993
columns	O	O:0.999822
,	O	O:0.999991
but	O	O:0.999987
you'd	O	O:0.999986
have	O	O:0.999988
to	O	O:0.999998
restrict	O	O:0.999996
the	O	O:0.999957
application	O	O:0.999593
.	O	O:0.999860
	
For	O	O:0.999929
example	O	O:0.999756
,	O	O:0.999996
if	O	O:0.999994
you	O	O:0.999982
wanted	O	O:0.999989
to	O	O:0.999994
go	O	O:1.000000
the	O	O:0.999998
other	O	O:0.999884
way	O	O:0.999968
,	O	O:0.999989
you	O	O:0.999990
probably	O	O:0.999832
wouldn't	O	O:0.999990
want	O	O:0.999968
the	O	O:0.999993
`	O	O:0.999985
2	O	O:0.999208
`	O	O:0.999993
in	O	O:0.999970
the	O	O:0.999986
weight	O	O:0.999926
column	O	O:0.999888
to	O	O:0.999999
become	O	O:0.999982
`	O	O:0.999993
fou	O	O:0.994745
`	O	O:0.999989
.	O	O:0.999333
	
But	O	O:0.999928
,	O	O:0.999996
to	O	O:0.999985
answer	O	O:0.999999
your	O	O:0.999883
question	O	O:0.999786
,	O	O:0.999999
you	O	O:0.999981
can	O	O:0.999990
apply	O	O:0.925779
`	O	O:0.999980
list	O	O:0.556728
`	O	O:0.999985
.	O	O:0.999381
	
#CODE	O	O:0.998453
	
Pass	O	O:0.999858
a	O	O:0.999922
function	O	O:0.999697
to	O	O:0.999958
`	O	O:0.999999
apply	O	B-API:0.984488
`	O	O:0.999948
and	O	O:0.999963
specify	O	O:0.999296
`	O	O:0.999900
axis=1	O	O:0.964507
`	O	O:0.999969
.	O	O:0.999236
	
This	O	O:0.999760
still	O	O:0.999462
does	O	O:0.999883
not	O	O:0.999982
work	O	O:0.999932
.	O	O:0.999965
	
I	O	O:0.999979
think	O	O:0.999943
the	O	O:0.999924
na_values	O	O:0.864013
option	O	O:0.999600
does	O	O:0.999912
not	O	O:0.999997
apply	O	O:0.921895
to	O	O:0.999980
the	O	O:0.999999
columns	O	O:0.999950
that	O	O:0.999682
is	O	O:0.999999
being	O	O:0.999850
parsed	O	O:0.999892
as	O	O:0.999969
dates	O	O:0.986920
.	O	O:0.999810
	
The	O	O:0.999917
problem	O	O:0.998122
is	O	O:0.999987
really	O	O:0.999422
parse_dates	O	O:0.948512
does	O	O:0.999411
not	O	O:0.999994
work	O	O:0.999989
for	O	O:0.999999
columns	O	O:0.999908
with	O	O:0.999960
missing	O	O:0.999547
values	O	O:0.999120
.	O	O:0.999802
	
Apply	O	O:0.999793
pandas	O	O:0.998704
function	O	O:0.999951
to	O	O:0.999991
column	O	O:0.999999
to	O	O:0.999995
create	O	O:0.999998
multiple	O	O:0.999991
new	O	O:0.999981
columns	O	O:0.999817
?	O	O:0.999950
	
However	O	O:0.999886
an	O	O:0.999973
apply	O	O:0.809327
within	O	O:0.998962
an	O	O:0.999935
apply	O	B-API:0.542760
still	O	O:0.993470
isn't	O	O:0.999928
going	O	O:0.999650
to	O	O:0.999982
be	O	O:0.999999
particularly	O	O:0.999598
efficient	O	O:0.999618
...	O	O:0.999371
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.993435
a	O	O:0.999867
function	O	O:0.998333
to	O	O:0.999995
several	O	O:0.999999
columns	O	O:0.999963
of	O	O:0.999997
a	O	O:0.999983
GroupBy	B-API	B-API:0.684324
object	O	O:0.999490
?	O	O:0.999889
	
If	O	O:0.999960
you	O	O:0.999989
dont	O	O:0.999994
specify	O	O:0.999982
a	O	O:0.999989
function	O	O:0.999653
per	O	O:0.999955
column	O	O:0.999851
,	O	O:0.999998
all	O	O:0.999993
columns	O	O:0.999926
will	O	O:0.999951
be	O	O:0.999999
passed	O	O:0.999865
to	O	O:0.999979
the	O	O:0.999984
function	O	O:0.998858
(	O	O:0.999917
for	O	O:0.999996
both	O	O:0.999454
apply	O	B-API:0.919041
and	O	O:0.999749
agg	O	B-API:0.991322
)	O	O:0.999577
.	O	O:0.999093
	
So	O	O:0.999376
:	O	O:0.999958
#CODE	O	O:0.999838
	
This	O	O:0.999723
can	O	O:0.999988
also	O	O:0.999998
be	O	O:1.000000
done	O	O:0.999961
using	O	O:0.999879
apply	O	B-API:0.889805
,	O	O:0.999721
no	O	O:0.999967
need	O	O:0.999888
to	O	O:0.999998
sort	O	O:0.999925
.	O	O:0.999936
	
#CODE	O	O:0.998453
	
As	O	O:0.999986
a	O	O:0.999984
workaround	O	O:0.999730
,	O	O:0.999994
in	O	O:0.999967
earlier	O	O:0.999930
pandas	O	O:0.999940
you	O	O:0.999986
can	O	O:0.999970
use	O	O:0.999994
apply	O	B-API:0.949885
:	O	O:0.999305
#CODE	O	O:0.999212
	
@USER	O	O:0.998689
tranform	O	O:0.998213
expects	O	O:0.999927
one	O	O:0.999991
result	O	O:0.999979
to	O	O:0.999996
all	O	O:1.000000
the	O	O:0.999996
things	O	O:0.999364
in	O	O:0.999991
the	O	O:0.999995
group	O	O:0.997580
,	O	O:0.999992
whereas	O	O:0.999752
apply	O	O:0.746961
expects	O	O:0.999781
a	O	O:0.999991
value	O	O:0.999733
for	O	O:0.999996
each	O	O:0.999777
row	O	O:0.999748
in	O	O:0.999984
the	O	O:0.999985
group	O	O:0.993381
.	O	O:0.999865
	
Although	O	O:0.999924
both	O	O:0.999983
act	O	O:0.999953
of	O	O:0.999993
the	O	O:0.999920
groups	O	O:0.997626
(	O	O:0.999988
sub	O	O:0.999975
DataFrames	O	O:0.999685
)	O	O:0.999984
so	O	O:0.999988
it	O	O:0.999966
is	O	O:0.999998
a	O	O:0.999988
little	O	O:0.998538
confusing	O	O:0.998183
.	O	O:0.999745
	
That	O	O:0.999656
makes	O	O:0.999859
sense	O	O:0.999681
,	O	O:0.999955
but	O	O:0.999935
doesn't	O	O:0.999942
seem	O	O:0.999944
to	O	O:0.999997
be	O	O:1.000000
very	O	O:0.999860
clearly	O	O:0.999137
documented	O	O:0.999305
.	O	O:0.999593
	
For	O	O:0.999892
example	O	O:0.999045
[	O	O:0.999992
here	O	O:0.999711
]	O	O:0.999581
(	O	O:0.999911
#URL	O	O:0.999514
)	O	O:0.999977
it	O	O:0.999992
starts	O	O:0.999865
by	O	O:0.999996
describing	O	O:0.999908
transform	O	O:0.584847
as	O	O:0.999993
a	O	O:0.999995
form	O	O:0.999883
of	O	O:0.999982
apply	O	B-API:0.791103
,	O	O:0.999979
and	O	O:0.999915
later	O	O:0.999746
makes	O	O:0.999967
them	O	O:0.999796
sound	O	O:0.999787
almost	O	O:0.999829
equivalent	O	O:0.999151
:	O	O:0.999717
"	O	O:0.999986
...	O	O:0.999389
	
For	O	O:0.999951
these	O	O:0.999933
,	O	O:0.999985
use	O	O:0.999970
the	O	O:0.999891
apply	O	B-API:0.959017
function	O	O:0.999526
,	O	O:0.999973
which	O	O:0.999964
can	O	O:0.999958
be	O	O:1.000000
substituted	O	O:0.999742
for	O	O:0.999967
both	O	O:0.999310
aggregate	O	B-API:0.919749
and	O	O:0.999974
transform	O	B-API:0.743597
in	O	O:0.999901
many	O	O:0.999943
standard	O	O:0.999753
use	O	O:0.999929
cases	O	O:0.992502
.	O	O:0.999782
	
However	O	O:0.999805
,	O	O:0.999995
apply	O	O:0.612025
can	O	O:0.999606
handle	O	O:0.999980
some	O	O:0.999989
exceptional	O	O:0.999532
use	O	O:0.999943
cases	O	O:0.997377
,	O	O:0.999982
for	O	O:0.999907
example	O	O:0.999025
...	O	O:0.998972
	
"	O	O:0.999739
	
But	O	O:0.999880
I	O	O:0.999988
can't	O	O:0.999929
see	O	O:0.999973
any	O	O:0.999997
easy	O	O:0.999927
way	O	O:0.999984
of	O	O:0.999991
doing	O	O:0.999880
the	O	O:0.999992
same	O	O:0.999747
thing	O	O:0.999930
with	O	O:0.999976
my	O	O:0.999890
'	O	O:0.999989
recd	O	O:0.999200
'	O	O:0.999982
or	O	O:0.999968
'	O	O:0.999990
ship	O	O:0.999705
'	O	O:0.999995
date	O	O:0.999584
fields	O	O:0.999338
.	O	O:0.999801
	
For	O	O:0.999919
example	O	O:0.999819
,	O	O:0.999998
generate	O	O:0.999973
a	O	O:0.999991
similar	O	O:0.999992
table	O	O:0.999988
of	O	O:0.999995
counts	O	O:0.999729
broken	O	O:0.999968
down	O	O:0.999809
by	O	O:0.999691
(	O	O:0.999991
say	O	O:0.999889
)	O	O:0.999997
monthly	O	O:0.999671
buckets	O	O:0.999874
of	O	O:0.999947
recd	O	O:0.994632
and	O	O:0.999994
ship	O	O:0.995939
.	O	O:0.999573
	
It	O	O:0.999957
seems	O	O:0.999988
like	O	O:0.999636
resample()	B-API	B-API:0.988872
has	O	O:0.999980
all	O	O:0.999985
of	O	O:0.999991
the	O	O:0.999960
machinery	O	O:0.999970
to	O	O:0.999981
bucket	O	O:0.999992
into	O	O:0.999905
periods	O	O:0.999021
,	O	O:0.999979
but	O	O:0.999983
I	O	O:0.999985
can't	O	O:0.999979
figure	O	O:0.999577
out	O	O:0.999961
how	O	O:0.999975
to	O	O:0.999986
apply	O	O:0.976276
it	O	O:0.999919
here	O	O:0.998241
.	O	O:0.999941
	
The	O	O:0.999866
buckets	O	O:0.997628
(	O	O:0.999990
or	O	O:0.999999
levels	O	O:0.999950
)	O	O:0.999991
in	O	O:0.999988
the	O	O:0.999980
'	O	O:0.999983
date	O	O:0.999502
cut	O	O:0.851112
'	O	O:0.999981
would	O	O:0.999973
be	O	O:0.999998
equivalent	O	O:0.999977
to	O	O:0.999987
a	O	O:0.999998
pandas.PeriodIndex	O	B-API:0.828895
,	O	O:0.999978
and	O	O:0.999999
then	O	O:0.999869
I	O	O:0.999999
want	O	O:0.999990
to	O	O:0.999917
label	O	O:0.999999
each	O	O:0.999965
value	O	O:0.999988
of	O	O:0.999993
df	O	O:0.999236
[	O	O:0.999980
'	O	O:0.999991
recd	O	O:0.999506
']	O	O:0.999965
with	O	O:0.999288
the	O	O:0.999898
period	O	O:0.999803
it	O	O:0.999990
falls	O	O:0.999907
into	O	O:0.999553
?	O	O:0.999924
	
The	O	O:0.999909
second	O	O:0.999527
line	O	O:0.999860
uses	O	O:0.999467
the	O	O:0.999954
`	O	O:0.999951
apply	O	B-API:0.998539
`	O	O:0.999950
method	O	O:0.999511
on	O	O:0.999993
groupby	B-API	B-API:0.915321
to	O	O:0.999987
replace	O	O:0.998664
the	O	O:0.999998
dataframe	B-API	O:0.999432
of	O	O:0.999998
near-duplicate	O	O:0.999978
rows	O	O:0.999919
,	O	O:0.999990
`	O	O:0.999998
g	O	O:0.998259
`	O	O:0.999996
,	O	O:0.999984
with	O	O:0.999996
a	O	O:0.999988
new	O	O:0.999858
dataframe	B-API	O:0.998034
`	O	O:0.999954
g.apply	O	O:0.598343
(	O	O:0.999994
lambda	O	O:0.998355
row	O	O:0.999235
:	O	O:0.999918
g.irow	O	O:0.998451
(	O	O:0.999991
0	O	O:0.999927
)	O	O:0.999982
,	O	O:0.999969
axis=1	O	O:0.999675
)`	O	O:0.999313
.	O	O:0.999602
	
That	O	O:0.999655
uses	O	O:0.999584
the	O	O:0.999957
`	O	O:0.999950
apply	O	B-API:0.998515
`	O	O:0.999951
method	O	O:0.999796
on	O	O:0.999998
dataframes	O	O:0.999952
to	O	O:0.999996
replace	O	O:0.999987
each	O	O:0.999922
row	O	O:0.999977
with	O	O:0.999976
the	O	O:0.999998
first	O	O:0.999965
row	O	O:0.999965
of	O	O:0.999986
the	O	O:0.999978
group	O	O:0.996670
.	O	O:0.999853
	
You	O	O:0.999946
can	O	O:0.999989
create	O	O:0.999995
a	O	O:1.000000
column	O	O:0.999792
in	O	O:0.999999
your	O	O:0.999675
`	O	O:0.999987
DataFrame	B-API	O:0.964365
`	O	O:0.999998
based	O	O:0.999291
on	O	O:0.999999
your	O	O:0.999664
Days	O	O:0.999049
Late	O	O:0.999990
column	O	O:0.999977
by	O	O:0.999993
using	O	O:0.999959
the	O	O:0.999664
`	O	O:0.999636
map	O	B-API:0.988969
`	O	O:0.999992
or	O	O:0.999868
`	O	O:0.999994
apply	O	B-API:0.867922
`	O	O:0.999971
functions	O	O:0.999214
as	O	O:0.999989
follows	O	O:0.996863
.	O	O:0.999854
	
Let's	O	O:0.999920
first	O	O:0.999932
create	O	O:0.999844
some	O	O:0.999984
sample	O	O:0.999957
data	O	O:0.999837
.	O	O:0.999930
	
#CODE	O	O:0.998453
	
Group	O	O:0.999928
your	O	O:0.998579
`	O	O:0.999972
DataFrame	B-API	O:0.981707
`	O	O:0.999998
by	O	O:0.999435
`	O	O:0.999992
country	O	O:0.870774
`	O	O:0.999984
and	O	O:0.998807
`	O	O:0.999997
countrycode	O	O:0.892128
`	O	O:0.999989
and	O	O:0.999991
then	O	O:0.999954
apply	O	O:0.966001
your	O	O:0.999571
own	O	O:0.993957
function	O	O:0.999612
:	O	O:0.999949
#CODE	O	O:0.999848
	
Pandas	O	O:0.997741
:	O	O:0.999940
How	O	O:0.999978
to	O	O:0.999992
use	O	O:0.999997
apply	O	B-API:0.890999
function	O	O:0.998672
to	O	O:0.999990
multiple	O	O:0.999997
columns	O	O:0.999679
	
I	O	O:0.999991
have	O	O:0.999997
some	O	O:0.999897
problems	O	O:0.999913
with	O	O:0.999911
the	O	O:0.999988
Pandas	O	O:0.999915
apply	O	B-API:0.717156
function	O	O:0.999444
,	O	O:0.999995
when	O	O:0.999929
using	O	O:0.999996
multiple	O	O:0.999975
columns	O	O:0.999589
with	O	O:0.999943
the	O	O:0.999968
following	O	O:0.999549
dataframe	B-API	O:0.991782
#CODE	O	O:0.999655
	
When	O	O:0.999347
I	O	O:0.999996
try	O	O:0.999995
to	O	O:0.999954
apply	O	O:0.995364
this	O	O:0.998308
function	O	O:0.999707
with	O	O:0.999504
:	O	O:0.999938
#CODE	O	O:0.999883
	
If	O	O:0.999954
you	O	O:0.999991
just	O	O:0.999989
want	O	O:0.999997
to	O	O:0.999961
compute	O	O:0.999746
(	O	O:0.999998
column	O	O:0.999992
a	O	O:0.999996
)	O	O:0.999788
%	O	O:0.999587
(	O	O:0.999988
column	O	O:0.999958
b	O	O:0.999965
)	O	O:0.999994
,	O	O:0.999984
you	O	O:0.999970
don't	O	O:0.999979
need	O	O:0.999978
`	O	O:0.999997
apply	O	B-API:0.934789
`	O	O:0.999890
,	O	O:0.999963
just	O	O:0.999915
do	O	O:0.999995
it	O	O:0.999979
directly	O	O:0.997668
:	O	O:0.999954
#CODE	O	O:0.999651
	
@USER	O	O:0.999406
following	O	O:0.997638
[	O	O:0.999980
53-54	O	O:0.999840
]	O	O:0.999974
allow	O	O:0.999364
you	O	O:0.999977
to	O	O:0.999991
apply	O	O:0.994114
more	O	O:0.999789
complex	O	O:0.996242
functions	O	O:0.999810
.	O	O:0.999659
	
This	O	O:0.999094
is	O	O:0.999996
obviously	O	O:0.999957
using	O	O:0.999990
the	O	O:0.999961
data	O	O:0.999745
generated	O	O:0.999818
below	O	O:0.999550
,	O	O:0.999991
but	O	O:0.999984
you	O	O:0.999957
can	O	O:0.999993
easily	O	O:0.999999
apply	O	O:0.786486
to	O	O:0.999987
your	O	O:0.999973
example	O	O:0.999391
.	O	O:0.999953
	
You	O	O:0.999929
probably	O	O:0.999908
need	O	O:0.999912
`	O	O:0.999991
apply	O	B-API:0.947020
`	O	O:0.999960
,	O	O:0.999917
so	O	O:0.999999
something	O	O:0.999890
like	O	O:0.999037
:	O	O:0.999985
#CODE	O	O:0.999830
	
Wrapping	O	O:0.999111
it	O	O:0.999925
in	O	O:0.999994
a	O	O:0.999996
Series	O	O:0.998806
in	O	O:0.999990
the	O	O:0.999986
apply	O	O:0.540374
returns	O	O:0.997533
a	O	O:0.999803
DataFrame	B-API	O:0.823490
:	O	O:0.999935
#CODE	O	O:0.999852
	
You	O	O:0.999841
could	O	O:0.999967
also	O	O:0.999985
`	O	O:0.999999
apply	O	B-API:0.983896
`	O	O:0.999872
`	O	O:0.998986
np.prod	B-API	B-API:0.989412
`	O	O:0.999991
,	O	O:0.999940
which	O	O:0.999734
is	O	O:0.999988
what	O	O:0.999535
I'd	O	O:0.999978
originally	O	O:0.999959
done	O	O:0.999181
,	O	O:0.999981
but	O	O:0.999988
usually	O	O:0.999966
when	O	O:0.999916
available	O	O:0.999951
the	O	O:0.999995
direct	O	O:0.998389
methods	O	O:0.999594
are	O	O:0.999934
faster	O	O:0.999486
.	O	O:0.999755
	
#CODE	O	O:0.998453
	
I've	O	O:0.999853
seen	O	O:0.999796
a	O	O:0.999995
few	O	O:0.999805
solutions	O	O:0.999833
which	O	O:0.999616
map	O	B-API:0.760531
/	O	O:0.999943
do	O	O:0.999954
list	O	O:0.999605
comprehension	O	O:0.999643
to	O	O:0.999989
'	O	O:0.999999
manually	O	O:0.999807
'	O	O:0.999990
put	O	O:0.999358
the	O	O:0.999993
dataframe	B-API	O:0.998572
together	O	O:0.998492
.	O	O:0.999942
	
Is	O	O:0.999979
that	O	O:0.999952
the	O	O:0.999999
only	O	O:0.999862
way	O	O:0.999952
?	O	O:0.999946
	
I	O	O:0.999788
was	O	O:0.999935
hoping	O	O:0.998913
pandas	O	O:0.999400
had	O	O:0.999975
some	O	O:0.999913
basic	O	O:0.999060
function	O	O:0.999899
to	O	O:0.999993
magically	O	O:0.999996
do	O	O:0.999987
this	O	O:0.999989
kind	O	O:0.999920
of	O	O:0.999971
thing	O	O:0.999843
...	O	O:0.999917
apply	O	B-API:0.649045
?	O	O:0.999611
	
join	O	B-API:0.966152
?	O	O:0.999893
	
To	O	O:0.999971
restrict	O	O:0.999801
to	O	O:0.999991
Business	O	O:0.999986
days	O	O:0.999742
within	O	O:0.999930
business	O	O:0.999336
hours	O	O:0.998294
(	O	O:0.999979
apply	O	O:0.850606
these	O	O:0.999374
in	O	O:0.999937
either	O	O:0.999985
order	O	O:0.999766
)	O	O:0.999969
.	O	O:0.999712
	
I	O	O:0.999933
am	O	O:0.999998
generating	O	O:0.999647
some	O	O:0.999894
delimited	O	O:0.999968
files	O	O:0.999894
from	O	O:0.999990
hive	O	O:0.999940
queries	O	O:0.999860
into	O	O:0.999767
multiple	O	O:0.999982
HDFS	O	O:0.999037
directories	O	O:0.998793
.	O	O:0.999748
	
As	O	O:0.999959
the	O	O:0.999996
next	O	O:0.999870
step	O	O:0.999964
,	O	O:0.999997
I	O	O:0.999995
would	O	O:0.999997
like	O	O:0.999906
to	O	O:1.000000
read	O	O:0.999983
the	O	O:0.999994
files	O	O:0.999929
into	O	O:0.999940
a	O	O:0.999998
single	O	O:0.998754
pandas	O	O:0.999977
dataframe	B-API	O:0.998390
in	O	O:0.999986
order	O	O:0.999945
to	O	O:0.999989
apply	O	O:0.926750
standard	O	O:0.999175
non-distributed	O	O:0.998687
algorithms	O	O:0.999685
.	O	O:0.999851
	
You	O	O:0.999848
could	O	O:0.999984
just	O	O:0.999978
apply	O	O:0.818779
the	O	O:0.999550
Series	O	O:0.999132
constructor	O	O:0.999845
to	O	O:0.999997
that	O	O:0.999995
column	O	O:0.999814
:	O	O:0.999992
#CODE	O	O:0.999891
	
Hmmm	O	O:0.999487
,	O	O:0.999996
a	O	O:0.999995
simple	O	O:0.993340
is	O	O:0.999980
to	O	O:0.999993
just	O	O:0.999994
apply	O	O:0.963514
something	O	O:0.999814
like	O	O:0.999308
`	O	O:0.999997
make_series	O	O:0.986221
=	O	O:0.999963
lambda	O	O:0.999417
x	O	O:0.999482
:	O	O:0.999822
pd.Series	B-API	B-API:0.991327
(	O	O:0.999992
x	O	O:0.999888
)	O	O:0.999987
if	O	O:0.999979
x	O	O:0.999876
==	O	O:0.999946
nan	O	O:0.998764
else	O	O:0.999921
x	O	O:0.999872
`	O	O:0.999981
,	O	O:0.999979
there's	O	O:0.999984
probably	O	O:0.999955
a	O	O:0.999999
more	O	O:0.999303
efficient	O	O:0.999796
way	O	O:0.999951
though	O	O:0.999628
.	O	O:0.999934
	
Have	O	O:0.999908
a	O	O:0.999994
look	O	O:0.998963
at	O	O:0.999973
#URL	O	O:0.999917
more	O	O:0.999918
specifically	O	O:0.999721
at	O	O:0.999995
the	O	O:0.999947
apply	O	B-API:0.910516
and	O	O:0.999932
transform	O	B-API:0.693106
sections	O	O:0.996903
	
After	O	O:0.999402
you've	O	O:0.999952
read	O	O:0.997342
in	O	O:0.999972
the	O	O:0.999969
DataFrame	B-API	O:0.965117
(	O	O:0.999968
without	O	O:0.999965
restricting	O	O:0.999701
dtype	B-API	B-API:0.991381
)	O	O:0.999994
you	O	O:0.999692
can	O	O:0.999997
then	O	O:0.999997
convert	O	O:0.999826
it	O	O:0.999982
(	O	O:0.999987
using	O	O:0.999969
technique	O	O:0.999696
from	O	O:0.999942
this	O	O:0.999982
post	O	O:0.999726
)	O	O:0.999996
with	O	O:0.999862
`	O	O:0.999984
apply	O	B-API:0.990240
`	O	O:0.999530
:	O	O:0.999364
#CODE	O	O:0.999898
	
You	O	O:0.999812
shouldn't	O	O:0.999930
edit	O	O:0.999735
the	O	O:0.999990
question	O	O:0.998508
,	O	O:0.999993
but	O	O:0.999980
rather	O	O:0.999946
ask	O	O:0.999981
a	O	O:0.999989
new	O	O:0.999323
one	O	O:0.999875
:)	O	O:0.999726
.	O	O:0.999748
	
It's	O	O:0.999860
essentially	O	O:0.999950
the	O	O:0.999997
same	O	O:0.999944
trick	O	O:0.999708
in	O	O:0.999998
both	O	O:0.999911
cases	O	O:0.997304
(	O	O:0.999996
just	O	O:0.999942
define	O	O:0.999973
a	O	O:0.999952
function	O	O:0.998597
which	O	O:0.999937
does	O	O:0.999900
it	O	O:0.999998
to	O	O:0.999999
a	O	O:1.000000
single	O	O:0.998333
string	O	O:0.999648
and	O	O:0.999997
then	O	O:0.999893
apply	O	O:0.801588
it	O	O:0.999968
the	O	O:0.999984
column	O	O:0.999769
)	O	O:0.999976
.	O	O:0.999876
	
You	O	O:0.999659
do	O	O:0.999949
not	O	O:0.999980
need	O	O:0.999866
groupby	B-API	B-API:0.959627
/	O	O:0.999993
apply	O	O:0.531839
to	O	O:0.999900
compute	O	O:0.999815
the	O	O:0.999997
diff	O	B-API:0.703373
column	O	O:0.999649
.	O	O:0.999902
	
df4	O	O:0.995831
[	O	O:0.999867
'	O	O:0.999964
Diff	O	O:0.999777
']	O	O:0.999950
=	O	O:0.997348
abs	O	B-API:0.934153
(	O	O:0.999925
df4	O	O:0.997693
[(	O	O:0.999785
'	O	O:0.999982
acctual	O	O:0.998625
'	O	O:0.999975
,	O	O:0.999950
'	O	O:0.999983
Quantity	O	O:0.999612
')]	O	O:0.999778
-	O	O:0.999891
df4	O	O:0.993068
[(	O	O:0.999831
'	O	O:0.999947
trend	O	O:0.999722
'	O	O:0.999985
,	O	O:0.999961
'	O	O:0.999978
Quantity	O	O:0.999580
')])	O	O:0.998957
.	O	O:0.999419
	
From	O	O:0.999874
this	O	O:0.999982
aggregated	O	O:0.999993
data	O	O:0.999952
can	O	O:0.999986
be	O	O:1.000000
computed	O	O:0.999928
with	O	O:0.999641
groupby	B-API	B-API:0.994246
e.g	O	O:0.999869
df4.groupby	O	O:0.963302
([	O	O:0.999917
df4	O	O:0.991088
[	O	O:0.999791
'	O	O:0.999939
Start	O	O:0.999886
']	O	O:0.999813
.map	B-API	B-API:0.999682
(	O	O:0.999909
lambda	O	O:0.999194
x	O	O:0.999522
:	O	O:0.999974
x.year	O	O:0.999553
)	O	O:0.999987
,	O	O:0.999972
df4	O	O:0.999243
[	O	O:0.999790
'	O	O:0.999951
Start	O	O:0.999917
']	O	O:0.999813
.map	B-API	B-API:0.999682
(	O	O:0.999909
lambda	O	O:0.999194
x	O	O:0.998806
:	O	O:0.999959
x.week	O	O:0.999842
)	O	O:0.999991
,	O	O:0.999983
df4	O	O:0.999148
[	O	O:0.999797
'	O	O:0.999914
Product	O	O:0.999955
']])	O	O:0.999235
.sum()	B-API	B-API:0.999545
.	O	O:0.999480
	
Not	O	O:0.999977
that	O	O:0.999941
the	O	O:0.999989
latter	O	O:0.999675
does	O	O:0.999651
not	O	O:0.999996
have	O	O:0.999999
a	O	O:0.999995
Trader	O	O:0.999014
column	O	O:0.999596
.	O	O:0.999859
	
Are	O	O:0.999963
you	O	O:0.999989
sure	O	O:0.999983
that	O	O:0.999982
the	O	O:0.999996
groupby	B-API	B-API:0.967037
you	O	O:0.999919
are	O	O:0.999995
doing	O	O:0.999755
is	O	O:0.999988
what	O	O:0.999329
you	O	O:0.999987
want	O	O:0.999949
?	O	O:0.999961
	
Some	O	O:0.999831
funky	O	O:0.999829
mapping	O	O:0.999353
Trader	O	O:0.992637
<->	O	O:0.999870
week	O	O:0.998803
.	O	O:0.999821
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999919
to	O	O:0.999976
do	O	O:0.999999
this	O	O:0.999912
?	O	O:0.999968
	
I	O	O:0.999980
think	O	O:0.999950
the	O	O:0.999946
easiest	O	O:0.998950
way	O	O:0.999821
is	O	O:0.999988
to	O	O:0.999992
apply	O	O:0.992795
a	O	O:0.999927
function	O	O:0.999435
of	O	O:0.999997
dividing	O	O:0.999557
by	O	O:0.999979
index1	O	O:0.999603
values	O	O:0.999775
by	O	O:0.999902
3	O	O:0.999849
,	O	O:0.999779
but	O	O:0.999973
not	O	O:0.999985
sure	O	O:0.999953
how	O	O:0.999990
you	O	O:0.999992
apply	O	O:0.978766
a	O	O:0.999922
function	O	O:0.999427
to	O	O:0.999966
an	O	O:0.999998
index	O	O:0.999808
.	O	O:0.999896
	
Perhaps	O	O:0.999617
though	O	O:0.999890
pandas	O	O:0.999615
has	O	O:0.999898
it's	O	O:0.999518
own	O	O:0.999968
methods	O	O:0.999604
for	O	O:0.999910
redefining	O	O:0.999565
index	O	O:0.999660
values	O	O:0.999854
to	O	O:0.999997
have	O	O:0.999999
groupings	O	O:0.999948
like	O	O:0.999995
this	O	O:0.999968
which	O	O:0.999959
are	O	O:0.999994
still	O	O:0.999970
unique	O	O:0.973526
when	O	O:0.999794
you	O	O:0.999970
consider	O	O:0.999995
both	O	O:0.999963
indexes	O	O:0.999427
?	O	O:0.999939
	
your	O	O:0.999907
data	O	O:0.999127
is	O	O:0.999993
2-d	O	O:0.999791
,	O	O:0.999990
how	O	O:0.999978
do	O	O:0.999972
you	O	O:0.999997
want	O	O:0.999951
to	O	O:0.999996
make	O	O:0.999993
it	O	O:0.999983
1-d	O	O:0.999863
?	O	O:0.999944
	
e.g.	O	O:0.999879
take	O	O:0.999966
a	O	O:0.999999
single	O	O:0.999863
column	O	O:0.999934
for	O	O:0.999984
example	O	O:0.999838
,	O	O:0.999986
or	O	O:0.999998
apply	O	O:0.835715
a	O	O:0.999936
function	O	O:0.999625
across	O	O:0.999908
all	O	O:0.999987
the	O	O:0.999997
columns	O	O:0.999755
in	O	O:0.999998
a	O	O:0.999998
reduction	O	O:0.999728
operation	O	O:0.999966
,	O	O:0.999997
or	O	O:0.999995
concatenate	O	O:0.858762
the	O	O:0.999996
data	O	O:0.999762
	
Hmm	O	O:0.999829
...	O	O:0.999825
why	O	O:0.999985
the	O	O:0.999987
downvote	O	O:0.999611
,	O	O:0.999994
gang	O	O:0.998520
?	O	O:0.999947
	
This	O	O:0.999812
seems	O	O:0.999986
like	O	O:0.999990
a	O	O:0.999999
well	O	O:0.999582
stated	O	O:0.999687
use	O	O:0.999915
case	O	O:0.999678
that	O	O:0.999925
may	O	O:0.999996
apply	O	O:0.850587
to	O	O:0.999920
others	O	O:0.999925
.	O	O:0.999911
	
However	O	O:0.999495
,	O	O:0.999996
this	O	O:0.999967
doesn't	O	O:0.999988
carry	O	O:0.999985
over	O	O:0.999985
directly	O	O:0.998897
to	O	O:0.999980
pandas	O	O:0.999967
Series	O	O:0.999746
.	O	O:0.999835
	
I	O	O:0.999945
seems	O	O:0.999988
that	O	O:0.999182
map	O	B-API:0.544907
/	O	O:0.999986
apply	O	B-API:0.738120
/	O	O:0.999819
lambda	O	O:0.997778
seems	O	O:0.999886
the	O	O:0.999960
way	O	O:0.999962
to	O	O:0.999970
go	O	O:0.999995
.	O	O:0.999961
	
I've	O	O:0.999536
arrived	O	O:0.999633
at	O	O:0.999993
this	O	O:0.999974
piece	O	O:0.999971
of	O	O:0.999991
code	O	O:0.998805
,	O	O:0.999992
but	O	O:0.999984
getting	O	O:0.999487
an	O	O:0.999902
invalid	O	O:0.998969
syntax	O	O:0.999740
error	O	O:0.998892
.	O	O:0.999860
	
#CODE	O	O:0.998453
	
You	O	O:0.999815
can	O	O:0.999989
just	O	O:0.999992
use	O	O:0.999998
an	O	O:0.999947
apply	O	B-API:0.644791
with	O	O:0.999484
the	O	O:0.999620
same	O	O:0.999875
method	O	O:0.999936
suggested	O	O:0.999860
there	O	O:0.999727
:	O	O:0.999958
#CODE	O	O:0.999825
	
Hmm	O	O:0.999585
not	O	O:0.999944
too	O	O:0.999985
sure	O	O:0.999928
,	O	O:0.999996
think	O	O:0.999891
you	O	O:0.999972
may	O	O:0.999996
be	O	O:0.999999
better	O	O:0.999951
off	O	O:0.999975
just	O	O:0.999762
with	O	O:0.999989
the	O	O:0.999964
apply	O	B-API:0.856063
,	O	O:0.999816
but	O	O:0.999988
something	O	O:0.999962
using	O	O:0.999954
match	O	O:0.999000
could	O	O:0.999778
be	O	O:0.999996
possible	O	O:0.999670
:	O	O:0.999898
`	O	O:0.999990
s.str.findall	O	O:0.981371
(	O	O:0.999994
r	O	O:0.999687
'	O	O:0.999369
(	O	O:0.999966
?	O	O:0.999967
	
<=	O	O:0.999131
\	O	O:0.999738
(	O	O:0.999962
)	O	O:0.999960
[	O	O:0.999652
^	O	O:0.999907
(	O	O:0.999951
]	O	O:0.999847
*	O	O:0.999469
(	O	O:0.999980
?	O	O:0.999959
=\	O	O:0.999922
))')`	O	O:0.998817
	
The	O	O:0.999890
issue	O	O:0.999953
came	O	O:0.999789
up	O	O:0.999973
with	O	O:0.999930
apply	O	B-API:0.819046
in	O	O:0.999870
fact	O	O:0.997943
.	O	O:0.999907
	
Findall	B-API	B-API:0.763742
works	O	O:0.999072
!	O	O:0.999839
	
Last	O	O:0.999376
thing	O	O:0.999809
-	O	O:0.999986
how	O	O:0.999982
do	O	O:0.999987
I	O	O:0.999998
get	O	O:0.999991
rid	O	O:0.999927
of	O	O:0.999991
the	O	O:0.999980
square	O	O:0.999855
brackets	O	O:0.999392
around	O	O:0.999980
the	O	O:0.999969
results	O	O:0.999881
other	O	O:0.999959
than	O	O:0.999968
stripping	O	O:0.999995
them	O	O:0.999409
after	O	O:0.999985
the	O	O:0.999957
fact	O	O:0.998150
?	O	O:0.999940
	
pandas	O	O:0.999020
-	O	O:0.999994
apply	O	B-API:0.772547
function	O	O:0.999782
to	O	O:0.999985
current	O	O:0.999986
row	O	O:0.999969
against	O	O:0.999953
all	O	O:0.999996
other	O	O:0.999987
rows	O	O:0.998456
	
Interesting	O	O:0.996897
.	O	O:0.999635
	
I	O	O:0.999962
replaced	O	O:0.999704
my	O	O:0.999937
list	O	O:0.998961
comprehension	O	O:0.999893
with	O	O:0.999993
a	O	O:0.999993
slightly	O	O:0.998695
nicer	O	O:0.999840
nested	O	O:0.998759
apply	O	B-API:0.701541
.	O	O:0.998540
	
But	O	O:0.999977
this	O	O:0.999765
is	O	O:0.999994
even	O	O:0.999923
more	O	O:0.999925
compact	O	O:0.999010
.	O	O:0.999900
	
I	O	O:0.999959
wonder	O	O:0.999898
if	O	O:0.999281
``	O	O:0.999692
np.equal	B-API	B-API:0.996887
``	O	O:0.999948
can	O	O:0.999253
be	O	O:0.999994
worked	O	O:0.999962
into	O	O:0.990509
it	O	O:0.999958
....	O	O:0.996543
	
When	O	O:0.999600
subsequently	O	O:0.999932
doing	O	O:0.999962
an	O	O:0.999937
apply	O	B-API:0.774419
/	O	O:0.999353
map	O	B-API:0.968889
,	O	O:0.999984
you'll	O	O:0.999897
usually	O	O:0.999944
want	O	O:0.999964
the	O	O:0.999845
function	O	O:0.999911
to	O	O:0.999986
return	O	O:0.999985
a	O	O:0.999924
Series	O	O:0.998624
...	O	O:0.999574
	
When	O	O:0.999661
I	O	O:0.999997
do	O	O:0.999972
'	O	O:0.999941
g	O	O:0.999873
=	O	O:0.999719
df.groupby	B-API	B-API:0.987395
(	O	O:0.999800
'	O	O:0.999929
author_id	O	O:0.998179
')'	O	O:0.999941
g	O	O:0.999665
is	O	O:0.999993
then	O	O:0.999770
just	O	O:0.999936
'	O	O:0.999979
'	O	O:0.999955
and	O	O:0.999994
I	O	O:0.999994
cant	O	O:0.999866
seem	O	O:0.999816
to	O	O:0.999995
be	O	O:1.000000
able	O	O:0.999990
to	O	O:0.999991
apply	O	O:0.974193
the	O	O:0.997849
function	O	O:0.999410
...	O	O:0.999469
	
Yes	O	O:0.999360
,	O	O:0.999983
it	O	O:0.999992
returns	O	O:0.999892
a	O	O:0.999969
groupby	B-API	B-API:0.998528
object	O	O:0.999247
.	O	O:0.999420
	
You	O	O:0.999904
apply	O	O:0.634829
the	O	O:0.999438
function	O	O:0.999775
using	O	O:0.999573
`	O	O:0.999779
g.apply	O	B-API:0.760360
(	O	O:0.999967
some_function	O	O:0.989506
)`	O	O:0.999897
,	O	O:0.999984
whether	O	O:0.999928
you	O	O:0.999949
can	O	O:0.999983
apply	O	O:0.994821
it	O	O:0.999993
depends	O	O:0.999568
on	O	O:0.999994
the	O	O:0.999446
function	O	O:0.999908
...	O	O:0.999372
	
The	O	O:0.999973
output	O	O:0.999828
of	O	O:0.999991
the	O	O:0.999979
unique	O	O:0.580061
function	O	O:0.999578
is	O	O:0.999995
a	O	O:0.999994
numpy	O	O:0.999499
array	O	O:0.999936
,	O	O:0.999968
which	O	O:0.999861
doesn't	O	O:0.999828
provide	O	O:0.999874
the	O	O:0.999879
apply	O	B-API:0.941686
method	O	O:0.998411
.	O	O:0.999611
	
You	O	O:0.999943
can	O	O:0.999987
create	O	O:0.999994
a	O	O:0.999995
`	O	O:0.999970
Series	O	O:0.997593
`	O	O:0.999996
by	O	O:0.999952
that	O	O:0.999913
array	O	O:0.999913
and	O	O:0.999999
then	O	O:0.999853
apply	O	O:0.978828
your	O	O:0.994634
function	O	O:0.995250
:	O	O:0.999979
#CODE	O	O:0.999831
	
Error	O	O:0.999561
when	O	O:0.999729
trying	O	O:0.999936
to	O	O:0.999995
apply	O	B-API:0.551918
log	O	O:0.712088
method	O	O:0.999622
to	O	O:0.999998
pandas	O	O:1.000000
data	O	O:0.999990
frame	O	O:0.999999
column	O	O:0.999938
in	O	O:0.999981
Python	O	O:0.999386
	
Pandas	O	O:0.999356
doesn't	O	O:0.999679
complain	O	O:0.999096
,	O	O:0.999999
because	O	O:0.999957
now	O	O:0.999940
you	O	O:0.999999
have	O	O:0.999992
an	O	O:0.999999
array	O	O:0.999986
of	O	O:0.999917
Python	O	O:0.999334
objects	O	O:0.999789
.	O	O:0.999761
	
[	O	O:0.999539
but	O	O:0.999991
this	O	O:0.999566
is	O	O:0.999994
really	O	O:0.999903
just	O	O:0.999930
cheating	O	O:0.999641
around	O	O:0.999668
the	O	O:0.999981
typecheck	O	O:0.997343
]	O	O:0.999933
.	O	O:0.999711
	
And	O	O:0.999953
if	O	O:0.999991
you	O	O:0.999995
want	O	O:0.999973
to	O	O:0.999998
convert	O	O:0.999992
back	O	O:0.999832
to	O	O:0.999992
array	O	O:0.999996
,	O	O:0.999998
just	O	O:0.999931
apply	O	O:0.707153
`	O	O:0.999782
np.array	B-API	B-API:0.999619
`	O	O:0.999985
to	O	O:0.999862
it	O	O:0.999999
.	O	O:0.999931
	
#CODE	O	O:0.998453
	
Apply	O	O:0.999734
iterates	O	O:0.998510
through	O	O:0.999910
every	O	O:0.999933
item	O	O:0.999548
in	O	O:0.999964
the	O	O:0.999983
dataframe	B-API	O:0.994529
.	O	O:0.999846
	
Then	O	O:0.999911
just	O	O:0.999976
apply	O	O:0.828627
the	O	O:0.999752
aggregation	O	O:0.958087
function	O	O:0.999604
and	O	O:0.999983
boom	O	O:0.999350
you're	O	O:0.999655
done	O	O:0.998044
:	O	O:0.999981
#CODE	O	O:0.999792
	
I	O	O:0.999962
wonder	O	O:0.999875
whether	O	O:0.998791
`	O	O:0.999935
to_datetime	B-API	B-API:0.998243
`	O	O:0.999980
is	O	O:0.999826
faster	O	O:0.999792
that	O	O:0.999783
`	O	O:0.999984
apply	O	B-API:0.966862
(	O	O:0.999900
pd.Timestamp	O	O:0.730870
)`	O	O:0.999540
?	O	O:0.999867
	
Certainly	O	O:0.999836
that'll	O	O:0.999714
be	O	O:0.999995
the	O	O:0.999998
only	O	O:0.999574
choice	O	O:0.999924
come	O	O:0.999802
0.11.1	O	O:0.998801
:)	O	O:0.999643
	
``	O	O:0.999639
pd.to_datetime	B-API	B-API:0.998987
``	O	O:0.999876
should	O	O:0.999816
be	O	O:0.999998
faster	O	O:0.999933
if	O	O:0.999959
the	O	O:0.999944
cython	O	O:0.997781
doesn't	O	O:0.999823
raise	O	O:0.997375
(	O	O:0.999981
in	O	O:0.999960
which	O	O:0.999928
case	O	O:0.999960
it	O	O:0.999998
essentially	O	O:0.999985
falls	O	O:0.999970
back	O	O:0.999613
on	O	O:0.999927
``	O	O:0.999874
apply	O	B-API:0.980647
(	O	O:0.999839
Timestamp	O	O:0.979976
)``	O	O:0.999048
.	O	O:0.999279
	
Apply	O	O:0.998143
`	O	O:0.999939
histogram	O	O:0.997561
`	O	O:0.999996
to	O	O:0.999982
each	O	O:0.999993
group	O	O:0.996762
.	O	O:0.999926
	
#CODE	O	O:0.998453
	
Here	O	O:0.997750
is	O	O:0.999981
the	O	O:0.999980
canonical	O	O:0.999553
way	O	O:0.999977
of	O	O:0.999983
doing	O	O:0.999777
it	O	O:0.999986
,	O	O:0.999910
while	O	O:0.999929
not	O	O:0.999963
necessarily	O	O:0.999994
more	O	O:0.999910
concise	O	O:0.999344
,	O	O:0.999966
is	O	O:0.999995
more	O	O:0.999348
flexible	O	O:0.999450
(	O	O:0.999972
in	O	O:0.999995
that	O	O:0.999965
you	O	O:0.999997
can	O	O:0.999993
apply	O	O:0.997941
this	O	O:0.999891
to	O	O:0.999996
arbitrary	O	O:0.999999
columns	O	O:0.999382
)	O	O:0.999962
#CODE	O	O:0.999722
	
I	O	O:0.999973
am	O	O:0.999994
on	O	O:0.999255
window	O	O:0.999931
7	O	O:0.999934
,	O	O:0.999990
python	O	O:0.999626
2.7.2	O	O:0.998539
,	O	O:0.999979
pandas	O	O:0.999683
0.11.0	O	O:0.999786
,	O	O:0.999981
django	O	O:0.999605
1.4	O	O:0.997029
,	O	O:0.999964
wsgi	O	O:0.998026
and	O	O:0.999974
apache	O	O:0.999685
2.2	O	O:0.987823
.	O	O:0.999542
	
I	O	O:0.999992
have	O	O:0.999989
a	O	O:0.999991
pandas	O	O:0.998634
script	O	O:0.999946
that	O	O:0.999674
works	O	O:0.999993
fine	O	O:0.999968
if	O	O:0.999984
I	O	O:0.999987
run	O	O:0.999955
it	O	O:0.999962
directly	O	O:0.999736
with	O	O:0.999876
python	O	O:0.998723
and	O	O:0.999996
also	O	O:0.999899
works	O	O:0.999890
in	O	O:0.999937
ipython	O	O:0.999524
with	O	O:0.999810
%run	O	O:0.949454
.	O	O:0.999920
	
However	O	O:0.999816
,	O	O:0.999998
when	O	O:0.999929
I	O	O:0.999989
run	O	O:0.999995
pandas	O	O:0.998965
in	O	O:0.999994
my	O	O:0.999985
view	O	O:0.999350
i	O	O:0.999987
get	O	O:0.999539
"	O	O:0.999955
LookupError	O	O:0.999056
:	O	O:0.999972
unknown	O	O:0.999222
encoding	O	O:0.999068
:	O	O:0.999974
cp0	O	O:0.999200
"	O	O:0.999980
.	O	O:0.999665
	
This	O	O:0.999901
only	O	O:0.999914
happens	O	O:0.999990
when	O	O:0.999965
using	O	O:0.999950
ols	O	O:0.980775
in	O	O:0.999938
pandas	O	O:0.999784
within	O	O:0.999858
the	O	O:0.999968
view	O	O:0.980373
.	O	O:0.999905
	
I'm	O	O:0.999971
also	O	O:0.999980
a	O	O:0.999999
little	O	O:0.996913
confused	O	O:0.999406
why	O	O:0.999990
py3compat.py	O	O:0.977998
is	O	O:0.999991
entering	O	O:0.998922
the	O	O:0.999975
picture	O	O:0.999808
as	O	O:0.999973
i'm	O	O:0.999896
using	O	O:0.999878
python	O	O:0.992720
2.7	O	O:0.995614
.	O	O:0.999511
	
Also	O	O:0.999849
,	O	O:0.999996
I	O	O:0.999998
have	O	O:0.999986
seen	O	O:0.999818
some	O	O:0.999993
posts	O	O:0.999896
about	O	O:0.999957
wrapping	O	O:0.999928
a	O	O:0.999898
printed	O	O:0.999501
variable	O	O:0.999925
in	O	O:0.999996
a	O	O:0.999989
str()	B-API	O:0.623703
,	O	O:0.999942
but	O	O:0.999826
I'm	O	O:0.999954
not	O	O:0.999994
sure	O	O:0.999901
how	O	O:0.999990
that	O	O:0.999889
would	O	O:0.999995
apply	O	O:0.936452
here	O	O:0.998831
.	O	O:0.999583
	
The	O	O:0.999953
whole	O	O:0.999461
traceback	O	O:0.998448
is	O	O:0.999798
:	O	O:0.999935
#CODE	O	O:0.999814
	
I	O	O:0.999987
kind	O	O:0.999979
of	O	O:0.999973
think	O	O:0.999874
that	O	O:0.999980
the	O	O:0.999997
first	O	O:0.999926
one	O	O:0.999922
is	O	O:0.999984
incorrect	O	O:0.999749
behaviour	O	O:0.999890
here	O	O:0.998608
.	O	O:0.999609
	
It's	O	O:0.999920
like	O	O:0.999951
the	O	O:0.999983
popular	O	O:0.995696
saying	O	O:0.998351
:	O	O:0.999862
"	O	O:0.999975
Writing	O	O:0.999856
aggregation	O	O:0.999101
functions	O	O:0.999319
is	O	O:0.999849
hard	O	O:0.998719
...	O	O:0.999655
	
let's	O	O:0.999186
go	O	O:0.999952
write	O	O:0.999967
apply	O	B-API:0.541016
functions	O	O:0.998946
.	O	O:0.999234
	
"	O	O:0.999739
	
If	O	O:0.999969
you	O	O:0.999995
pass	O	O:0.999926
a	O	O:0.999984
`	O	O:0.999978
dict	O	O:0.997551
`	O	O:0.999996
or	O	O:0.999489
`	O	O:0.999993
list	O	O:0.917738
`	O	O:0.999997
to	O	O:0.999972
apply	O	O:0.985228
,	O	O:0.999962
you	O	O:0.999946
will	O	O:0.999992
have	O	O:0.999988
item-by-item	O	O:0.999881
agg	O	B-API:0.811227
,	O	O:0.999926
IOW	O	O:0.999337
,	O	O:0.999988
you	O	O:0.999983
will	O	O:0.999983
get	O	O:0.999999
a	O	O:0.999996
`	O	O:0.999967
Series	O	O:0.988453
`	O	O:0.999979
	
I	O	O:0.999976
know	O	O:0.999776
i	O	O:0.999720
should	O	O:0.999936
do	O	O:0.999929
df.groupby	B-API	B-API:0.947294
(	O	O:0.999752
'	O	O:0.999964
channel	O	O:0.999552
')	O	O:0.999923
and	O	O:0.999995
then	O	O:0.999892
apply	O	O:0.588785
function	O	O:0.999807
to	O	O:0.999962
each	O	O:0.999989
group	O	O:0.996908
.	O	O:0.999937
	
In	O	O:0.999985
this	O	O:0.999956
case	O	O:0.999985
the	O	O:0.999996
apply	O	B-API:0.527177
value	O	O:0.999454
already	O	O:0.999577
returns	O	O:0.999874
the	O	O:0.999978
exact	O	O:0.999973
same	O	O:0.999985
df	O	O:0.999936
with	O	O:0.999990
only	O	O:0.999961
different	O	O:0.999995
cost	O	O:0.998924
values	O	O:0.999750
.	O	O:0.999765
	
So	O	O:0.999976
you	O	O:0.999981
can	O	O:0.999973
do	O	O:0.999997
:	O	O:0.999996
`	O	O:0.999995
df	O	O:0.999797
=	O	O:0.999912
df.groupby	B-API	B-API:0.987696
(	O	O:0.999830
'	O	O:0.999976
channel	O	O:0.999819
')	O	O:0.999909
.apply	B-API	B-API:0.998284
(	O	O:0.999935
myfunc	O	O:0.995484
)`	O	O:0.999564
.	O	O:0.999544
	
But	O	O:0.999940
if	O	O:0.999978
you	O	O:0.999978
insist	O	O:0.999935
on	O	O:0.999999
only	O	O:0.999982
modifying	O	O:0.999978
the	O	O:0.999979
cost	O	O:0.998368
column	O	O:0.999992
this	O	O:0.999894
would	O	O:0.999994
also	O	O:0.999979
work	O	O:0.999973
:	O	O:0.999990
`	O	O:0.999998
df	O	O:0.999461
[	O	O:0.999980
'	O	O:0.999992
cost	O	O:0.999026
']	O	O:0.999987
=	O	O:0.998492
df.groupby	B-API	B-API:0.989613
(	O	O:0.999839
'	O	O:0.999973
channel	O	O:0.999819
')	O	O:0.999912
.apply	B-API	B-API:0.997665
(	O	O:0.999966
myfunc	O	O:0.990640
)	O	O:0.999937
[	O	O:0.999717
'	O	O:0.999990
cost	O	O:0.998541
']`	O	O:0.999917
.	O	O:0.999509
	
But	O	O:0.999864
i	O	O:0.999961
wouldnt	O	O:0.999789
use	O	O:0.999938
the	O	O:0.999908
latter	O	O:0.999632
since	O	O:0.999985
a	O	O:0.999998
change	O	O:0.998990
in	O	O:0.999924
the	O	O:0.999919
index	O	O:0.999765
might	O	O:0.999941
cause	O	O:0.999924
misalignment	O	O:0.999979
,	O	O:0.999994
even	O	O:0.999824
though	O	O:0.999972
it	O	O:0.999989
would	O	O:0.999990
work	O	O:0.999911
in	O	O:0.999999
this	O	O:0.999963
case	O	O:0.999906
.	O	O:0.999960
	
(	O	O:0.999866
Some	O	O:0.999965
operating	O	O:0.999665
systems	O	O:0.999815
provide	O	O:0.999735
record-oriented	O	O:0.999931
files	O	O:0.999900
that	O	O:0.999978
have	O	O:0.999995
more	O	O:0.999906
complex	O	O:0.999737
internal	O	O:0.999763
structure	O	O:0.999889
than	O	O:0.999787
the	O	O:0.999988
common	O	O:0.999655
flat	O	O:0.999523
file	O	O:0.999399
.	O	O:0.999977
The	O	O:0.999989
above	O	O:0.999616
does	O	O:0.999833
not	O	O:0.999991
apply	O	O:0.887248
to	O	O:0.999990
them	O	O:0.999937
.	O	O:0.999979
)	O	O:0.999977
	
@USER	O	O:0.999781
give	O	O:0.998833
an	O	O:0.999987
index	O	O:0.999953
to	O	O:0.999987
the	O	O:0.999999
Series	O	O:0.999905
when	O	O:0.999912
you	O	O:0.999998
apply	O	O:0.919058
;	O	O:0.999987
they	O	O:0.999652
will	O	O:0.999995
become	O	O:0.999975
column	O	O:0.999967
names	O	O:0.999696
	
I'm	O	O:0.999903
having	O	O:0.999901
a	O	O:0.999992
little	O	O:0.999330
trouble	O	O:0.999864
with	O	O:0.999944
the	O	O:0.999994
amount	O	O:0.999927
of	O	O:0.999958
memory	O	O:0.999859
that	O	O:0.999914
this	O	O:0.999925
method	O	O:0.999966
consumes	O	O:0.997733
and	O	O:0.999994
I'm	O	O:0.999978
wondering	O	O:0.999558
if	O	O:0.999985
you	O	O:0.999961
could	O	O:0.999991
give	O	O:0.999993
me	O	O:0.999996
a	O	O:0.999993
little	O	O:0.997524
advice	O	O:0.999522
.	O	O:0.999698
	
I	O	O:0.999993
have	O	O:0.999982
a	O	O:0.999976
DataFrame	B-API	O:0.995852
that	O	O:0.999948
contains	O	O:0.999961
about	O	O:0.999989
8000	O	O:0.999921
rows	O	O:0.999062
,	O	O:0.999996
each	O	O:0.999962
with	O	O:0.999978
a	O	O:0.999985
string	O	O:0.999558
containing	O	O:0.998879
9216	O	O:0.999899
space	O	O:0.999826
delimited	O	O:0.999555
8-b	O	O:0.999815
it	O	O:0.999950
integers	O	O:0.999059
.	O	O:0.999886
	
This	O	O:0.999408
is	O	O:0.999977
roughly	O	O:0.999542
75MB	O	O:0.997660
,	O	O:0.999954
but	O	O:0.999994
when	O	O:0.999893
I	O	O:0.999998
apply	O	O:0.960650
the	O	O:0.999805
last	O	O:0.997467
solution	O	O:0.999866
verbatim	O	O:0.999667
,	O	O:0.999991
Python	O	O:0.999900
eats	O	O:0.999822
2GB	O	O:0.999980
of	O	O:0.999987
my	O	O:0.999892
memory	O	O:0.999707
.	O	O:0.999854
	
Can	O	O:0.999792
you	O	O:0.999983
point	O	O:0.999989
me	O	O:0.999982
in	O	O:0.999996
the	O	O:0.999997
direction	O	O:0.999773
of	O	O:0.999998
some	O	O:0.999762
source	O	O:0.999974
that	O	O:0.999615
would	O	O:0.999995
tell	O	O:0.999956
me	O	O:0.999988
why	O	O:0.999988
this	O	O:0.999549
is	O	O:0.999988
,	O	O:0.999910
and	O	O:0.999998
what	O	O:0.999926
I	O	O:0.999984
can	O	O:0.999996
do	O	O:0.999993
to	O	O:0.999997
get	O	O:0.999975
around	O	O:0.999851
it	O	O:0.999969
?	O	O:0.999965
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
Now	O	O:0.999965
you	O	O:0.999985
can	O	O:0.999992
apply	O	O:0.983541
the	O	O:0.999988
respective	O	O:0.997947
`	O	O:0.999949
fillna	B-API	B-API:0.996612
`	O	O:0.999995
s	O	O:0.999443
,	O	O:0.999998
one	O	O:0.999983
cheeky	O	O:0.998536
way	O	O:0.999821
:	O	O:0.999910
#CODE	O	O:0.999803
	
You	O	O:0.999916
get	O	O:0.999943
one	O	O:0.999987
string	O	O:0.999859
per	O	O:0.999900
line	O	O:0.998983
and	O	O:0.999993
the	O	O:0.999998
other	O	O:0.999750
cells	O	O:0.999603
are	O	O:0.999966
`	O	O:0.999995
NaN	O	O:0.980498
`	O	O:0.999997
,	O	O:0.999992
then	O	O:0.999947
the	O	O:0.999999
math	O	O:0.999941
to	O	O:0.999993
apply	O	O:0.868303
is	O	O:0.999972
to	O	O:0.999959
ask	O	O:0.999991
for	O	O:0.999978
the	O	O:0.999828
`	O	O:0.999923
max	O	B-API:0.905124
`	O	O:0.999978
value	O	O:0.998340
:	O	O:0.999973
#CODE	O	O:0.999826
	
I	O	O:0.999959
knew	O	O:0.999780
there	O	O:0.998932
was	O	O:0.999968
something	O	O:0.999949
,	O	O:0.999987
I	O	O:0.999996
just	O	O:0.999844
couldn't	O	O:0.999698
find	O	O:0.999821
it	O	O:0.999968
!	O	O:0.999940
	
FWIW	O	O:0.999558
the	O	O:0.999923
`	O	O:0.999954
isin	B-API	B-API:0.999791
`	O	O:0.999989
method	O	O:0.999483
is	O	O:0.999997
about	O	O:0.999830
10	O	O:0.999942
times	O	O:0.998686
faster	O	O:0.999901
than	O	O:0.999945
using	O	O:0.999825
`	O	O:0.999934
apply	O	B-API:0.991039
`	O	O:0.999965
on	O	O:0.999752
my	O	O:0.999997
particular	O	O:0.999838
dataset	O	O:0.999804
.	O	O:0.999826
	
then	O	O:0.999239
apply	O	O:0.982253
this	O	O:0.999303
function	O	O:0.999929
across	O	O:0.999938
each	O	O:0.999503
group	O	O:0.986986
:	O	O:0.999971
#CODE	O	O:0.999708
	
Awesome	O	O:0.999464
,	O	O:0.999968
thanks	O	O:0.999185
@USER	O	O:0.999050
.	O	O:0.999779
	
Knew	O	O:0.998807
it	O	O:0.999887
was	O	O:0.999973
going	O	O:0.999848
to	O	O:0.999991
be	O	O:1.000000
a	O	O:0.999991
groupby	B-API	B-API:0.999297
,	O	O:0.999938
but	O	O:0.999801
couldn't	O	O:0.999758
figure	O	O:0.999891
out	O	O:0.999954
how	O	O:0.999975
to	O	O:0.999986
apply	O	O:0.990161
it	O	O:0.999951
properly	O	O:0.999638
.	O	O:0.999966
	
here	O	O:0.999677
cols	O	O:0.998699
is	O	O:0.999994
df	O	O:0.998418
[	O	O:0.999946
'	O	O:0.999959
C	O	O:0.999694
']	O	O:0.999948
and	O	O:0.999934
values	O	O:0.998368
is	O	O:0.999936
df	O	O:0.999470
[	O	O:0.999952
'	O	O:0.999964
D	O	O:0.999897
']	O	O:0.999891
.	O	O:0.998671
	
We	O	O:0.999965
group	O	O:0.998596
those	O	O:0.999980
two	O	O:0.999979
things	O	O:0.999938
by	O	O:0.999976
cols	O	O:0.999106
and	O	O:0.999998
then	O	O:0.999831
apply	O	O:0.660032
the	O	O:0.999968
aggregating	O	O:0.969411
function	O	O:0.999834
,	O	O:0.999988
which	O	O:0.999890
in	O	O:0.999995
this	O	O:0.999975
case	O	O:0.999840
is	O	O:0.999980
np.size	O	O:0.812555
.	O	O:0.999804
	
Each	O	O:0.998001
row	O	O:0.999890
looks	O	O:0.999800
like	O	O:0.999777
#CODE	O	O:0.999772
	
How	O	O:0.999911
can	O	O:0.999960
I	O	O:1.000000
apply	O	O:0.877169
the	O	O:0.999337
testfunction	O	O:0.998528
on	O	O:0.999993
x	O	O:0.999935
which	O	O:0.999964
returns	O	O:0.999805
the	O	O:0.999991
two	O	O:0.999916
c	O	O:0.999917
[	O	O:0.999990
1	O	O:0.999981
]	O	O:0.999966
values	O	O:0.998193
?	O	O:0.999937
	
Do	O	O:0.999934
you	O	O:0.999994
mean	O	O:0.999968
to	O	O:0.999999
say	O	O:0.999999
,	O	O:0.999997
you	O	O:0.999993
need	O	O:0.999986
to	O	O:0.999997
apply	O	O:0.988190
testfunction	O	O:0.999427
on	O	O:0.999934
df1	O	O:0.999529
and	O	O:0.999994
df2	O	O:0.999920
individually	O	O:0.998193
and	O	O:0.999994
store	O	O:0.999758
the	O	O:0.999967
result	O	O:0.999890
somewhere	O	O:0.999695
?	O	O:0.999974
	
Like	O	O:0.999610
`	O	O:0.999991
y	O	O:0.999873
=	O	O:0.999823
map	O	B-API:0.983443
(	O	O:0.999898
testfunction	O	O:0.999599
,	O	O:0.999995
x	O	O:0.999937
)`	O	O:0.999754
?	O	O:0.999938
	
This	O	O:0.999810
will	O	O:0.999848
apply	O	O:0.866431
testfunction	O	O:0.999567
to	O	O:0.999991
every	O	O:0.999998
item	O	O:0.999936
of	O	O:0.999988
the	O	O:0.999986
iterable	O	O:0.999684
you	O	O:0.999963
pass	O	O:0.997143
and	O	O:0.999997
return	O	O:0.999782
a	O	O:0.999986
list	O	O:0.996777
of	O	O:0.999998
the	O	O:0.999895
results	O	O:0.999860
.	O	O:0.999877
	
Thank	O	O:0.999262
you	O	O:0.999966
very	O	O:0.999946
much	O	O:0.999926
Brian	O	O:0.999731
for	O	O:0.999999
your	O	O:0.999501
answer	O	O:0.998313
!	O	O:0.999897
	
I	O	O:0.999992
just	O	O:0.999946
spent	O	O:0.999469
2.5	O	O:0.999688
hours	O	O:0.999570
on	O	O:0.999998
this	O	O:0.999929
problem	O	O:0.999815
.	O	O:0.999902
	
I	O	O:0.999936
thought	O	O:0.999946
that	O	O:0.999742
I	O	O:0.999999
need	O	O:0.999994
to	O	O:0.999985
apply	O	O:0.995416
a	O	O:0.999937
"	O	O:0.999669
for	O	O:0.999971
loop	O	O:0.993660
"	O	O:0.999926
...	O	O:0.998498
	
This	O	O:0.999864
will	O	O:0.999908
apply	O	O:0.890637
the	O	O:0.999710
function	O	O:0.998477
`	O	O:0.999971
testfunction	O	O:0.997882
`	O	O:0.999998
to	O	O:0.999987
every	O	O:0.999998
item	O	O:0.999809
in	O	O:0.999913
`	O	O:0.999992
x	O	O:0.997280
`	O	O:0.999975
and	O	O:0.999981
return	O	O:0.999826
a	O	O:0.999982
list	O	O:0.996780
of	O	O:0.999998
the	O	O:0.999895
results	O	O:0.999860
.	O	O:0.999877
	
Is	O	O:0.999978
there	O	O:0.999975
any	O	O:0.999991
equivalent	O	O:0.998503
function	O	O:0.999967
like	O	O:0.999802
"	O	O:0.999995
apply	O	B-API:0.758408
"	O	O:0.999932
for	O	O:0.999951
rows	O	O:0.996124
.	O	O:0.999601
	
Since	O	O:0.999727
apply	O	O:0.547299
seems	O	O:0.999680
to	O	O:0.999989
work	O	O:0.999997
on	O	O:0.999994
"	O	O:0.999999
columns	O	O:0.999762
"	O	O:0.999995
only	O	O:0.999673
.	O	O:0.999944
	
@USER	O	O:0.998608
`	O	O:0.999976
apply	O	B-API:0.989911
`	O	O:0.999972
takes	O	O:0.997460
an	O	O:0.999979
`	O	O:0.999990
axis	O	O:0.995854
`	O	O:0.999996
kwarg	O	O:0.999525
to	O	O:0.999990
toggle	O	O:0.999978
between	O	O:0.999914
rows	O	O:0.999517
and	O	O:0.999995
columns	O	O:0.999918
	
The	O	O:0.999942
result	O	O:0.999936
you	O	O:0.999992
currently	O	O:0.999993
have	O	O:0.999957
is	O	O:0.999999
a	O	O:0.999980
`	O	O:0.999946
Series	O	O:0.994253
`	O	O:0.999997
with	O	O:0.999964
a	O	O:0.999972
`	O	O:0.999908
MultiIndex	O	O:0.543822
`	O	O:0.999996
,	O	O:0.999993
so	O	O:0.999996
all	O	O:0.999980
the	O	O:0.999998
usual	O	O:0.999587
rules	O	O:0.999700
will	O	O:0.999662
apply	O	O:0.688910
.	O	O:0.999515
	
If	O	O:0.999999
your	O	O:0.999868
result	O	O:0.999391
is	O	O:0.999996
called	O	O:0.997899
`	O	O:0.999994
res	O	O:0.974067
`	O	O:0.999996
,	O	O:0.999993
then	O	O:0.999836
`	O	O:0.999999
res.ix	O	O:0.974576
[	O	O:0.999994
False	O	O:0.999757
]`	O	O:0.999936
gives	O	O:0.999697
you	O	O:0.999993
just	O	O:0.999972
the	O	O:0.999998
Falses	O	O:0.997678
,	O	O:0.999995
indexed	O	O:0.999988
now	O	O:0.999986
by	O	O:0.999996
only	O	O:0.999909
`	O	O:0.999970
user_id	O	O:0.914103
`	O	O:0.999956
.	O	O:0.998999
	
Likewise	O	O:0.999776
for	O	O:0.999905
`	O	O:0.999975
res.ix	O	O:0.778816
[	O	O:0.999986
True	O	O:0.999620
]`	O	O:0.999738
.	O	O:0.999610
	
See	O	O:0.999759
the	O	O:0.999907
docs	O	O:0.998784
.	O	O:0.999861
	
Hmm	O	O:0.999602
...	O	O:0.999081
	
I'm	O	O:0.999859
running	O	O:0.999882
into	O	O:0.999769
a	O	O:0.999997
bit	O	O:0.999426
of	O	O:0.999987
trouble	O	O:0.999412
here	O	O:0.999715
.	O	O:0.999915
	
The	O	O:0.999587
matrix	O	O:0.999539
includes	O	O:0.999669
1.00	O	O:0.998176
identities	O	O:0.994028
(	O	O:0.999970
perfect	O	O:0.999943
matches	O	O:0.999796
)	O	O:0.999986
across	O	O:0.999501
the	O	O:0.999939
diagonal	O	O:0.593671
.	O	O:0.999713
	
However	O	O:0.999774
,	O	O:0.999998
when	O	O:0.999956
I	O	O:0.999997
apply	O	O:0.975397
the	O	O:0.999182
"	O	O:0.999843
unpack	O	O:0.974224
"	O	O:0.999811
function	O	O:0.999811
,	O	O:0.999998
all	O	O:0.999988
of	O	O:0.999996
those	O	O:0.999975
turn	O	O:0.999924
into	O	O:0.999973
a	O	O:0.999994
value	O	O:0.999427
0.939085	O	O:0.999575
,	O	O:0.999994
for	O	O:0.999949
which	O	O:0.998573
I'm	O	O:0.999927
not	O	O:0.999995
sure	O	O:0.999846
how	O	O:0.999945
it's	O	O:0.999808
happening	O	O:0.999575
.	O	O:0.999851
	
In	O	O:0.999960
less	O	O:0.999771
than	O	O:0.999979
a	O	O:0.999995
few	O	O:0.999804
minutes	O	O:0.999828
,	O	O:0.999991
I	O	O:0.999998
will	O	O:0.999956
update	O	O:0.999782
the	O	O:0.999998
original	O	O:0.999594
question	O	O:0.999882
with	O	O:0.999990
the	O	O:0.999999
data	O	O:0.999975
set	O	O:0.999840
I'm	O	O:0.999991
working	O	O:0.999589
with	O	O:0.999748
.	O	O:0.999831
	
Well	O	O:0.999463
I	O	O:0.999982
don't	O	O:0.999959
know	O	O:0.999913
anything	O	O:0.999979
about	O	O:0.999321
robot_detection	O	O:0.991218
module	O	O:0.999183
,	O	O:0.999986
but	O	O:0.999987
a	O	O:0.999991
DataFrame	B-API	O:0.993481
with	O	O:0.999942
50000	O	O:0.999601
lines	O	O:0.999407
doesn't	O	O:0.999707
sound	O	O:0.999908
that	O	O:0.999968
much	O	O:0.999848
,	O	O:0.999996
really	O	O:0.999174
.	O	O:0.999837
	
And	O	O:0.999973
looking	O	O:0.999788
at	O	O:0.999997
your	O	O:0.999410
for-loop	O	O:0.999729
it	O	O:0.999992
seems	O	O:0.999984
like	O	O:0.999976
the	O	O:0.999967
function	O	O:0.999564
`	O	O:0.999982
is_robot	O	O:0.981967
`	O	O:0.999927
is	O	O:0.999958
not	O	O:0.999990
applied	O	O:0.999930
to	O	O:0.999981
the	O	O:0.999999
whole	O	O:0.999320
DataFrame	B-API	O:0.996484
but	O	O:0.999984
to	O	O:0.999996
each	O	O:0.999988
line	O	O:0.999896
,	O	O:0.999996
which	O	O:0.999975
I	O	O:0.999997
assume	O	O:0.999990
to	O	O:0.999960
contain	O	O:0.999972
one	O	O:0.999999
entry	O	O:0.999972
of	O	O:0.999991
the	O	O:0.999885
log	O	O:0.913754
.	O	O:0.999738
	
Thus	O	O:0.999822
I	O	O:0.999995
suggested	O	O:0.999978
to	O	O:0.999912
use	O	O:0.999993
`	O	O:0.999938
apply	O	B-API:0.989431
`	O	O:0.999894
instead	O	O:0.998258
.	O	O:0.999956
	
I	O	O:0.999970
see	O	O:0.999989
,	O	O:0.999968
I	O	O:0.999998
guess	O	O:0.999990
then	O	O:0.999865
you	O	O:0.999999
can	O	O:0.999998
split	O	O:0.999823
the	O	O:0.999993
DataFrame	B-API	O:0.996300
,	O	O:0.999994
apply	O	O:0.652779
`	O	O:0.999836
value_counts()	B-API	B-API:0.999981
`	O	O:0.999993
to	O	O:0.999967
each	O	O:0.999997
split	O	O:0.990511
,	O	O:0.999990
and	O	O:0.999999
then	O	O:0.999934
sum	O	O:0.999972
all	O	O:0.999990
the	O	O:0.999992
splits	O	O:0.999363
to	O	O:0.999991
get	O	O:0.999997
the	O	O:1.000000
final	O	O:0.999436
result	O	O:0.999867
.	O	O:0.999892
	
Thanks	O	O:0.998521
Very	O	O:0.999449
Much	O	O:0.999057
!	O	O:0.999797
	
In	O	O:0.999955
addition	O	O:0.999935
to	O	O:0.999999
this	O	O:0.999989
I	O	O:0.999999
want	O	O:0.999989
to	O	O:0.999965
apply	O	O:0.997306
some	O	O:0.998209
function	O	O:0.999887
to	O	O:0.999995
each	O	O:0.999990
group	O	O:0.998275
?	O	O:0.999975
	
How	O	O:0.999936
to	O	O:0.999992
access	O	O:0.999988
groups	O	O:0.999944
one	O	O:0.999994
by	O	O:0.999991
one	O	O:0.999971
?	O	O:0.999895
	
I'm	O	O:0.999922
splitting	O	O:0.998655
the	O	O:0.999950
dataframe	B-API	O:0.996234
since	O	O:0.999907
it	O	O:0.999952
is	O	O:0.999997
too	O	O:0.999843
large	O	O:0.999494
.	O	O:0.998556
	
I	O	O:0.999992
want	O	O:0.999981
to	O	O:0.999985
take	O	O:0.999998
the	O	O:0.999994
first	O	O:0.999886
group	O	O:0.998355
and	O	O:0.999991
apply	O	O:0.651084
the	O	O:0.998176
function	O	O:0.999619
,	O	O:0.999997
then	O	O:0.999937
the	O	O:0.999998
second	O	O:0.999836
group	O	O:0.997988
and	O	O:0.999993
apply	O	B-API:0.721969
function	O	O:0.996633
etc	O	O:0.999336
.	O	O:0.999930
	
so	O	O:0.999952
how	O	O:0.999987
do	O	O:0.999991
I	O	O:0.999999
access	O	O:0.999902
each	O	O:0.999200
group	O	O:0.997046
?	O	O:0.999963
	
subset	O	O:0.996435
before	O	O:0.999883
you	O	O:0.999852
apply	O	B-API:0.522402
#CODE	O	O:0.998857
	
2nd	O	O:0.999746
part	O	O:0.999641
,	O	O:0.999995
row-wise	O	O:0.999712
apply	O	B-API:0.648414
,	O	O:0.999964
returning	O	O:0.998126
'	O	O:0.999937
sum	O	O:0.999898
'	O	O:0.999996
of	O	O:0.999997
elements	O	O:0.999457
in	O	O:0.999949
A	O	O:0.999988
and	O	O:0.999991
B	O	O:0.999960
columns	O	O:0.998521
.	O	O:0.999796
	
You	O	O:0.999759
can	O	O:0.999786
	
pretty	O	O:0.998811
much	O	O:0.999654
what	O	O:0.999959
what	O	O:0.999909
you	O	O:0.999996
want	O	O:0.999973
in	O	O:0.999982
apply	O	B-API:0.561347
.	O	O:0.999426
	
#CODE	O	O:0.998453
	
This	O	O:0.998622
is	O	O:0.999989
cool	O	O:0.997075
-	O	O:0.999994
how	O	O:0.999924
would	O	O:0.999970
I	O	O:0.999999
do	O	O:0.999999
a	O	O:0.999984
row-wise	O	O:0.987880
apply	O	O:0.670610
taking	O	O:0.999141
two	O	O:0.999855
values	O	O:0.999881
from	O	O:0.999976
different	O	O:0.999977
columns	O	O:0.999908
but	O	O:0.999962
in	O	O:0.999994
the	O	O:0.999999
same	O	O:0.999937
row	O	O:0.999971
into	O	O:0.999902
the	O	O:0.999993
apply	O	B-API:0.980569
function	O	O:0.998687
?	O	O:0.999815
	
Say	O	O:0.999924
two	O	O:0.999941
columns	O	O:0.999899
were	O	O:0.999949
first	O	O:0.999759
/	O	O:0.999980
name	O	O:0.999549
and	O	O:0.999983
family	O	O:0.999740
/	O	O:0.999931
name	O	O:0.999837
strings	O	O:0.999202
and	O	O:0.999994
I	O	O:0.999996
wanted	O	O:0.999886
to	O	O:0.999963
take	O	O:0.999981
value1	O	O:0.999138
and	O	O:0.999983
value2	O	O:0.999134
and	O	O:0.999997
do	O	O:0.999967
stuff	O	O:0.998973
to	O	O:0.999994
them	O	O:0.999949
.	O	O:0.999942
	
neat	O	O:0.999377
apply	O	O:0.653866
tricks	O	O:0.997553
#CODE	O	O:0.998172
	
To	O	O:0.999989
select	O	O:0.999879
rows	O	O:0.999881
with	O	O:0.999959
one	O	O:0.999994
item	O	O:0.999710
you're	O	O:0.999958
interested	O	O:0.999751
in	O	O:0.999993
,	O	O:0.999994
you	O	O:0.999983
can	O	O:0.999980
`	O	O:1.000000
apply	O	B-API:0.827619
`	O	O:0.999995
a	O	O:0.999000
`	O	O:0.999973
lambda	O	O:0.992862
`	O	O:0.999898
function	O	O:0.998037
.	O	O:0.999931
	
For	O	O:0.999691
example	O	O:0.996811
:	O	O:0.999957
#CODE	O	O:0.999872
	
thanks	O	O:0.997340
for	O	O:0.999974
mentioning	O	O:0.996293
`	O	O:0.999841
grouper	B-API	B-API:0.960199
`	O	O:0.999989
,	O	O:0.999956
as	O	O:0.999996
it	O	O:0.998952
is	O	O:0.999985
not	O	O:0.999937
documented	O	O:0.999607
!	O	O:0.999882
	
I	O	O:0.999958
finally	O	O:0.999917
found	O	O:0.999850
a	O	O:0.999987
solution	O	O:0.999565
to	O	O:0.999998
change	O	O:0.999998
rows	O	O:0.999649
in	O	O:0.999975
original	O	O:0.999979
dataframe	B-API	O:0.999420
while	O	O:0.999977
iterating	O	O:0.999932
over	O	O:0.999785
its	O	O:0.999729
grouped	O	O:0.999055
object	O	O:0.999887
,	O	O:0.999995
using	O	O:0.999690
`	O	O:0.999914
grouped.grouper.indices	O	O:0.620747
`	O	O:0.999978
.	O	O:0.999215
	
I	O	O:0.999904
had	O	O:0.999968
to	O	O:0.999867
use	O	O:0.999993
it	O	O:0.999965
because	O	O:0.999939
I	O	O:0.999998
have	O	O:0.999989
duplicate	O	O:0.999918
DateTime	O	O:0.999876
indices	O	O:0.999065
in	O	O:0.999943
the	O	O:0.999985
dataframe	B-API	O:0.994510
.	O	O:0.999847
	
Also	O	O:0.999760
the	O	O:0.999982
transformation	O	O:0.998651
is	O	O:0.999987
too	O	O:0.999919
complicated	O	O:0.999946
to	O	O:0.999987
fit	O	O:0.999995
a	O	O:0.999983
`	O	O:0.999965
grouped	O	O:0.995067
`	O	O:0.999999
then	O	O:0.995132
`	O	O:1.000000
apply	O	B-API:0.986007
`	O	O:0.999930
paradigm	O	O:0.996897
,	O	O:0.999986
it	O	O:0.999968
involves	O	O:0.999515
clustering	O	O:0.999336
and	O	O:0.999992
filling	O	O:0.997506
in	O	O:0.999947
multiple	O	O:0.999978
dataframes	O	O:0.999948
at	O	O:0.999999
once	O	O:0.999864
while	O	O:0.999986
going	O	O:0.999795
through	O	O:0.999819
each	O	O:0.999355
group	O	O:0.995227
.	O	O:0.999912
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999982
`	O	O:0.999970
apply	O	B-API:0.990756
`	O	O:0.999894
,	O	O:0.999315
e.g.	O	O:0.998555
:	O	O:0.999902
#CODE	O	O:0.999834
	
Essentially	O	O:0.999890
an	O	O:0.999983
apply	O	B-API:0.700852
,	O	O:0.999843
but	O	O:0.999933
with	O	O:0.999974
control	O	O:0.999494
over	O	O:0.999917
how	O	O:0.999934
exactly	O	O:0.999983
its	O	O:0.999975
combined	O	O:0.998721
.	O	O:0.999902
	
#CODE	O	O:0.998453
	
You	O	O:0.999931
can	O	O:0.999937
use	O	O:0.999988
`	O	O:0.999958
groupby	B-API	B-API:0.999704
`	O	O:0.999986
,	O	O:0.999374
`	O	O:0.999996
apply	O	B-API:0.981579
`	O	O:0.999953
,	O	O:0.999500
`	O	O:0.999990
reset_index	B-API	B-API:0.999174
`	O	O:0.999997
to	O	O:0.999992
create	O	O:0.999992
a	O	O:0.999988
multiindex	O	O:0.999815
Series	O	O:0.999771
,	O	O:0.999989
and	O	O:0.999999
then	O	O:0.999904
call	O	O:0.999608
`	O	O:0.999995
unstack	O	B-API:0.999912
`	O	O:0.999802
:	O	O:0.999770
#CODE	O	O:0.999909
	
I	O	O:0.999994
have	O	O:0.999981
a	O	O:0.999982
DataFrame	B-API	O:0.996996
with	O	O:0.999779
an	O	O:0.999980
index	O	O:0.999973
called	O	O:0.999037
`	O	O:0.999997
city_id	O	O:0.899707
`	O	O:1.000000
of	O	O:0.999987
cities	O	O:0.999444
in	O	O:0.999994
the	O	O:0.999980
format	O	O:0.999467
`	O	O:0.999947
[	O	O:0.999985
city	O	O:0.999757
]	O	O:0.999947
,	O	O:0.999772
[	O	O:0.999988
state	O	O:0.999660
]`	O	O:0.999257
(	O	O:0.999974
e.g.	O	O:0.999747
,	O	O:0.999984
`	O	O:0.999994
new	O	O:0.999856
york	O	O:0.999955
,	O	O:0.999993
ny	O	O:0.999842
`	O	O:0.999977
containing	O	O:0.998950
integer	O	O:0.999979
counts	O	O:0.998415
in	O	O:0.999988
the	O	O:0.999995
columns	O	O:0.999629
.	O	O:0.999900
	
The	O	O:0.999925
problem	O	O:0.997518
is	O	O:0.999997
that	O	O:0.999858
I	O	O:0.999999
have	O	O:0.999999
multiple	O	O:0.999986
rows	O	O:0.999749
for	O	O:0.999988
the	O	O:0.999994
same	O	O:0.999815
city	O	O:0.996984
,	O	O:0.999994
and	O	O:0.999990
I	O	O:0.999998
want	O	O:0.999971
to	O	O:0.999945
collapse	O	O:0.999994
the	O	O:0.999999
rows	O	O:0.999830
sharing	O	O:0.999954
a	O	O:0.999989
`	O	O:0.999958
city_id	O	O:0.933275
`	O	O:0.999998
by	O	O:0.999954
adding	O	O:0.999961
their	O	O:0.999471
column	O	O:0.999788
values	O	O:0.999315
.	O	O:0.999871
	
I	O	O:0.999953
looked	O	O:0.999900
at	O	O:0.999821
`	O	O:0.999947
groupby()	B-API	B-API:0.999950
`	O	O:0.999931
but	O	O:0.999490
it	O	O:0.999978
wasn't	O	O:0.999791
immediately	O	O:0.999836
obvious	O	O:0.999688
how	O	O:0.999951
to	O	O:0.999990
apply	O	O:0.986248
it	O	O:0.999886
to	O	O:0.999996
this	O	O:0.999996
problem	O	O:0.999617
.	O	O:0.999923
	
So	O	O:0.999900
its	O	O:0.999919
not	O	O:0.999994
necessary	O	O:0.999975
to	O	O:0.999994
groupby	B-API	B-API:0.587250
month	O	O:0.999607
first	O	O:0.999386
,	O	O:0.999993
unless	O	O:0.999916
you	O	O:0.999990
have	O	O:0.999995
other	O	O:0.999993
reasons	O	O:0.999921
to	O	O:0.999989
do	O	O:0.999998
so	O	O:0.999978
.	O	O:0.999898
	
If	O	O:0.999974
so	O	O:0.999986
,	O	O:0.999998
you	O	O:0.999987
can	O	O:0.999997
also	O	O:0.999999
apply	O	O:0.965055
the	O	O:0.999936
last	O	O:0.997890
groupby	B-API	B-API:0.939814
on	O	O:0.999980
the	O	O:0.999989
monthly	O	O:0.999821
df	O	O:0.999856
as	O	O:0.999990
well	O	O:0.998972
.	O	O:0.999950
	
Ah	O	O:0.999757
.	O	O:0.999934
thanks	O	O:0.999879
tshauck	O	O:0.999729
,	O	O:0.999992
I	O	O:0.999996
guess	O	O:0.999950
that	O	O:0.999277
was	O	O:0.999957
actually	O	O:0.999984
what	O	O:0.999824
i	O	O:0.999749
was	O	O:0.999985
trying	O	O:0.999865
to	O	O:0.999981
do	O	O:0.999986
.	O	O:0.999935
	
The	O	O:0.999949
result	O	O:0.999873
to	O	O:0.999995
that	O	O:0.999999
test	O	O:0.999929
actually	O	O:0.999992
printed	O	O:0.999937
the	O	O:0.999993
count	O	O:0.998156
for	O	O:0.999996
each	O	O:0.999098
field	O	O:0.999785
i.e.Field1	O	O:0.997969
=	O	O:0.999768
10	O	O:0.999609
and	O	O:0.999983
next	O	O:0.999616
line	O	O:0.999536
Field2	O	O:0.999594
=	O	O:0.999774
10	O	O:0.999677
.	O	O:0.999641
	
I	O	O:0.999987
guess	O	O:0.999937
you	O	O:0.999906
could	O	O:0.999994
also	O	O:0.999997
apply	O	O:0.977846
the	O	O:0.999966
count	O	O:0.996524
to	O	O:0.999996
one	O	O:1.000000
particular	O	O:0.999792
Field	O	O:0.999127
?	O	O:0.999936
	
How	O	O:0.999890
to	O	O:0.999991
apply	O	O:0.978723
to_datetime	B-API	B-API:0.981242
or	O	O:0.999974
with	O	O:0.999891
sort_index	B-API	B-API:0.982554
so	O	O:0.999994
that	O	O:0.999994
the	O	O:0.999999
dates	O	O:0.998633
are	O	O:0.999957
sorted	O	O:0.999748
?	O	O:0.999948
	
I	O	O:0.999951
don't	O	O:0.999967
know	O	O:0.999505
how	O	O:0.999990
to	O	O:0.999992
apply	O	O:0.976886
to_datetime	B-API	B-API:0.987895
,	O	O:0.999969
because	O	O:0.999983
the	O	O:0.999993
output	O	O:0.999959
of	O	O:0.999998
the	O	O:0.999978
dates	O	O:0.995572
are	O	O:0.999969
not	O	O:0.999977
sorted	O	O:0.999623
.	O	O:0.999880
	
#CODE	O	O:0.998453
	
At	O	O:0.999969
the	O	O:0.999982
moment	O	O:0.999965
you	O	O:0.999984
can	O	O:0.999990
do	O	O:1.000000
this	O	O:0.999991
with	O	O:0.999988
an	O	O:0.999997
apply	O	O:0.618966
or	O	O:0.999952
the	O	O:0.999966
delta	O	O:0.980416
attribute	O	O:0.999261
:	O	O:0.999931
#CODE	O	O:0.999819
	
`	O	O:0.999912
copy()	B-API	B-API:0.690476
`	O	O:0.999994
doesnt	O	O:0.999172
prevent	O	O:0.999754
that	O	O:0.999821
.	O	O:0.999965
	
Using	O	O:0.998583
`	O	O:0.999985
copy	O	O:0.871137
`	O	O:0.999998
seems	O	O:0.997746
to	O	O:0.999999
only	O	O:0.999999
apply	O	O:0.824918
on	O	O:0.999988
the	O	O:0.999997
data	O	O:0.999846
,	O	O:0.999989
not	O	O:0.999962
the	O	O:0.999983
index	O	O:0.999675
.	O	O:0.999898
	
Which	O	O:0.999226
is	O	O:0.999994
a	O	O:0.999986
bit	O	O:0.999669
strange	O	O:0.999217
,	O	O:0.999987
reading	O	O:0.999923
your	O	O:0.999865
spreadsheet	O	O:0.999932
twice	O	O:0.999984
might	O	O:0.999986
be	O	O:0.999992
the	O	O:0.999998
best	O	O:0.996590
option	O	O:0.999808
,	O	O:0.999965
altough	O	O:0.999790
not	O	O:0.999965
terribly	O	O:0.999861
efficient	O	O:0.999710
.	O	O:0.999828
	
@USER	O	O:0.996104
It's	O	O:0.999821
not	O	O:0.999993
really	O	O:0.999941
clear	O	O:0.999931
what	O	O:0.999945
you	O	O:0.999965
expect	O	O:0.999996
that	O	O:0.999987
to	O	O:0.999999
do	O	O:0.999997
,	O	O:0.999992
but	O	O:0.999982
using	O	O:0.999745
groupby	B-API	B-API:0.988407
ensures	O	O:0.998894
each	O	O:0.999383
groups	O	O:0.996578
is	O	O:0.999988
a	O	O:0.999969
DataFrame	B-API	O:0.976092
and	O	O:0.999996
then	O	O:0.999915
,	O	O:0.999998
for	O	O:0.999995
example	O	O:0.999555
,	O	O:0.999994
you	O	O:0.999991
can	O	O:0.999992
apply	O	O:0.998123
a	O	O:0.999959
function	O	O:0.998952
to	O	O:0.999993
that	O	O:0.999988
.	O	O:0.999978
	
@USER	O	O:0.999626
if	O	O:0.999978
you	O	O:0.999980
really	O	O:0.999854
wanted	O	O:0.999964
to	O	O:0.999971
do	O	O:1.000000
it	O	O:0.999998
manually	O	O:0.999866
you	O	O:0.999991
could	O	O:0.999815
use	O	O:0.999982
:	O	O:0.999926
`	O	O:0.999989
g	O	O:0.999612
=	O	O:0.999970
df1.groupy	O	O:0.992416
(	O	O:0.999812
'	O	O:0.999993
time	O	O:0.999966
')	O	O:0.999954
;	O	O:0.999946
[	O	O:0.999752
g.get_group	O	O:0.895547
(	O	O:0.999975
x	O	O:0.999889
)	O	O:0.999974
for	O	O:0.999986
x	O	O:0.999446
in	O	O:0.999968
g.groups	O	O:0.997196
]`	O	O:0.999861
,	O	O:0.999965
but	O	O:0.999975
I	O	O:0.999985
recommend	O	O:0.999894
apply	O	B-API:0.886915
.	O	O:0.998872
	
Thanks	O	O:0.999675
falsetrue	O	O:0.998735
!	O	O:0.999869
	
this	O	O:0.998829
has	O	O:0.999955
been	O	O:0.999605
SOO	O	O:0.999962
helpful	O	O:0.999662
I	O	O:0.999991
can	O	O:0.999975
apply	O	O:0.977971
this	O	O:0.999769
to	O	O:0.999997
everything	O	O:0.999995
now	O	O:0.999791
!	O	O:0.999970
	
:)	O	O:0.999770
I	O	O:0.999928
can't	O	O:0.999988
tell	O	O:0.999512
you	O	O:0.999982
how	O	O:0.999989
long	O	O:0.999970
this	O	O:0.999926
has	O	O:0.999994
taken	O	O:0.999681
me	O	O:0.999934
!	O	O:0.999854
	
I	O	O:0.999978
have	O	O:0.999965
been	O	O:0.998799
doing	O	O:0.999969
Pandas	O	O:0.999751
,	O	O:0.999931
in	O	O:0.999965
which	O	O:0.999941
I	O	O:0.999998
apply	O	O:0.976262
a	O	O:0.999465
`	O	O:0.998967
.groupby	B-API	B-API:0.997771
(	O	O:0.999859
'	O	O:0.999972
Subtype	O	O:0.999662
')`	O	O:0.999966
on	O	O:0.999933
the	O	O:0.999987
dataframe	B-API	O:0.995647
,	O	O:0.999989
but	O	O:0.999985
after	O	O:0.999965
I	O	O:0.999983
do	O	O:0.999990
that	O	O:0.999541
,	O	O:0.999979
I'm	O	O:0.999981
not	O	O:0.999989
sure	O	O:0.999961
how	O	O:0.999986
to	O	O:0.999996
proceed	O	O:0.999979
further	O	O:0.999377
.	O	O:0.999929
	
Any	O	O:0.999875
help	O	O:0.997810
would	O	O:0.999946
be	O	O:0.999995
appreciated	O	O:0.999880
!	O	O:0.999627
	
Then	O	O:0.999813
you	O	O:0.999997
can	O	O:0.999983
use	O	O:1.000000
this	O	O:0.999878
in	O	O:0.999995
a	O	O:0.999988
groupby	B-API	B-API:0.996509
`	O	O:0.999978
apply	O	B-API:0.998155
`	O	O:0.999536
:	O	O:0.999303
#CODE	O	O:0.999898
	
@USER	O	O:0.997737
it	O	O:0.999960
looks	O	O:0.999944
like	O	O:0.999906
you've	O	O:0.999921
tried	O	O:0.999878
to	O	O:0.999995
apply	O	O:0.975475
shift	O	B-API:0.703680
to	O	O:0.999962
a	O	O:1.000000
Timestamp	O	O:0.977326
rather	O	O:0.999974
than	O	O:0.999973
a	O	O:0.999996
column	O	O:0.998803
/	O	O:0.999952
Series	O	O:0.990769
(	O	O:0.999973
not	O	O:0.999993
sure	O	O:0.999937
how	O	O:0.999979
you	O	O:0.999943
did	O	O:0.999995
that	O	O:0.999989
though	O	O:0.999978
)	O	O:0.999992
.	O	O:0.999708
	
[	O	O:0.999795
Using	O	O:0.999857
Python3	O	O:0.997819
]	O	O:0.999955
I'm	O	O:0.999889
using	O	O:0.999977
pandas	O	O:0.998205
to	O	O:0.999987
read	O	O:0.999963
a	O	O:0.999991
csv	O	O:0.999917
file	O	O:0.999942
,	O	O:0.999994
group	O	O:0.998710
the	O	O:0.999981
dataframe	B-API	O:0.997424
,	O	O:0.999997
apply	O	O:0.951760
a	O	O:0.999892
function	O	O:0.999207
to	O	O:0.999988
the	O	O:1.000000
grouped	O	O:0.999788
data	O	O:0.999903
and	O	O:0.999994
add	O	O:0.999994
these	O	O:0.999917
results	O	O:0.999980
back	O	O:0.999493
to	O	O:0.999996
the	O	O:0.999999
original	O	O:0.999519
dataframe	B-API	O:0.997985
.	O	O:0.999917
	
Basically	O	O:0.999460
I'm	O	O:0.999981
trying	O	O:0.999918
to	O	O:0.999997
group	O	O:0.999971
by	O	O:0.999971
`	O	O:0.999976
cc	O	O:0.994315
`	O	O:0.999996
and	O	O:0.999958
calculate	O	O:0.999802
the	O	O:0.999986
percentile	O	O:0.999918
rank	O	O:0.998645
for	O	O:0.999999
each	O	O:0.999835
value	O	O:0.999822
in	O	O:0.999931
`	O	O:0.999995
total_value	O	O:0.982787
`	O	O:0.999991
within	O	O:0.999335
that	O	O:0.999950
group	O	O:0.998360
.	O	O:0.999931
	
Secondly	O	O:0.999757
I	O	O:0.999995
want	O	O:0.999984
to	O	O:0.999960
apply	O	O:0.994954
a	O	O:0.999711
flow	O	O:0.995643
statement	O	O:0.999932
to	O	O:0.999998
these	O	O:0.999994
results	O	O:0.999850
.	O	O:0.999933
	
I	O	O:0.999976
need	O	O:0.999996
these	O	O:0.999857
results	O	O:0.999981
to	O	O:0.999993
be	O	O:1.000000
added	O	O:0.999992
back	O	O:0.999190
to	O	O:0.999995
the	O	O:1.000000
original	O	O:0.998625
/	O	O:0.999939
parent	O	O:0.999052
DataFrame	B-API	O:0.987274
.	O	O:0.999826
	
Such	O	O:0.999773
that	O	O:0.999900
it	O	O:0.999989
would	O	O:0.999979
look	O	O:0.999986
something	O	O:0.999986
like	O	O:0.999906
this	O	O:0.999566
:	O	O:0.999975
#CODE	O	O:0.999846
	
Another	O	O:0.999417
option	O	O:0.999392
is	O	O:0.999990
to	O	O:0.999968
use	O	O:0.999998
an	O	O:0.999717
apply	O	B-API:0.967932
:	O	O:0.999604
#CODE	O	O:0.999107
	
Another	O	O:0.999559
option	O	O:0.999629
is	O	O:0.999992
promote	O	O:0.994812
the	O	O:0.999976
'	O	O:0.999965
day	O	O:0.999954
'	O	O:0.999995
level	O	O:0.999869
to	O	O:0.999998
a	O	O:1.000000
column	O	O:0.999427
and	O	O:0.999999
then	O	O:0.999912
use	O	O:0.999991
an	O	O:0.999923
apply	O	B-API:0.881795
.	O	O:0.998672
	
Note	O	O:0.999920
you	O	O:0.999977
can	O	O:0.999995
apply	O	O:0.998352
strftime	B-API	O:0.583442
directly	O	O:0.999792
from	O	O:0.999946
a	O	O:0.999963
Timestamp	O	O:0.969005
object	O	O:0.999812
e.g.	O	O:0.998251
`	O	O:0.999982
rng.map	O	O:0.889305
(	O	O:0.999993
lambda	O	O:0.999422
t	B-API	O:0.750715
:	O	O:0.999913
t.strftime	O	O:0.984936
(	O	O:0.999948
'	O	O:0.999961
%Y-%m-%d	O	O:0.998383
'))`	O	O:0.999414
.	O	O:0.999665
	
2	O	O:0.999870
)	O	O:0.999979
I	O	O:0.999981
tried	O	O:0.999984
filtering	O	O:0.998411
using	O	O:0.999719
the	O	O:0.999788
apply	O	B-API:0.996002
function	O	O:0.990318
:	O	O:0.999803
#CODE	O	O:0.999876
	
How	O	O:0.999879
to	O	O:0.999986
apply	O	O:0.985986
condition	O	O:0.999855
on	O	O:0.999997
level	O	O:0.999820
of	O	O:0.999990
pandas.multiindex	B-API	B-API:0.965410
?	O	O:0.999967
	
You	O	O:0.999835
should	O	O:0.999972
check	O	O:0.999931
out	O	O:0.999982
`	O	O:0.999969
scipy.sparse	O	B-API:0.679347
`	O	O:0.999827
(	O	O:0.999933
link	O	O:0.999766
)	O	O:0.999954
.	O	O:0.999837
	
You	O	O:0.999879
can	O	O:0.999980
apply	O	O:0.986071
operations	O	O:0.999725
on	O	O:0.999954
those	O	O:0.999984
sparse	O	O:0.999883
matrices	O	O:0.999944
just	O	O:0.999952
like	O	O:0.999988
how	O	O:0.999992
you	O	O:0.999986
use	O	O:0.999995
a	O	O:0.999971
normal	O	O:0.988772
matrix	O	O:0.999550
.	O	O:0.999780
	
Here's	O	O:0.999655
one	O	O:0.999871
way	O	O:0.999485
(	O	O:0.999980
though	O	O:0.999885
it	O	O:0.999977
feels	O	O:0.999906
this	O	O:0.999920
should	O	O:0.999979
work	O	O:0.999961
in	O	O:0.999999
one	O	O:0.999995
go	O	O:0.999992
with	O	O:0.999992
an	O	O:0.999988
apply	O	O:0.775347
,	O	O:0.999912
I	O	O:0.999967
can't	O	O:0.999889
get	O	O:0.999935
it	O	O:0.999994
)	O	O:0.999984
.	O	O:0.999837
	
#CODE	O	O:0.998453
	
but	O	O:0.999214
I'm	O	O:0.999912
not	O	O:0.999996
able	O	O:0.999988
to	O	O:0.999992
apply	O	O:0.994880
this	O	O:0.999831
on	O	O:0.999995
each	O	O:0.999623
"	O	O:0.999996
name	O	O:0.999738
"	O	O:0.999997
group	O	O:0.999200
of	O	O:0.999985
my	O	O:0.999896
dataframe	B-API	O:0.996479
	
Your	O	O:0.999953
desired	O	O:0.999252
result	O	O:0.999860
suggests	O	O:0.999933
that	O	O:0.999958
you	O	O:0.999993
actually	O	O:0.999998
want	O	O:0.999980
to	O	O:0.999988
normalize	O	O:0.997853
the	O	O:0.999994
values	O	O:0.999668
in	O	O:0.999991
each	O	O:0.999951
name	O	O:0.999990
group	O	O:0.999520
with	O	O:0.999984
reference	O	O:0.999891
to	O	O:0.999996
the	O	O:1.000000
elements	O	O:0.999697
in	O	O:0.999940
`	O	O:0.999996
value1	O	O:0.989867
`	O	O:0.999980
and	O	O:0.999455
`	O	O:0.999992
value2	O	O:0.905826
`	O	O:0.999966
.	O	O:0.999031
	
For	O	O:0.999984
something	O	O:0.999937
like	O	O:0.999962
that	O	O:0.999980
,	O	O:0.999999
you	O	O:0.999992
can	O	O:0.999993
apply	O	O:0.997824
a	O	O:0.999965
function	O	O:0.999446
to	O	O:0.999994
each	O	O:0.999996
group	O	O:0.999514
individually	O	O:0.999856
,	O	O:0.999989
and	O	O:0.999995
reassemble	O	O:0.999816
the	O	O:0.999877
result	O	O:0.999682
.	O	O:0.999856
	
#CODE	O	O:0.998453
	
I	O	O:0.999991
read	O	O:0.999648
about	O	O:0.999733
the	O	O:0.998971
.stack	B-API	B-API:0.999300
method	O	O:0.999477
but	O	O:0.999934
couldn't	O	O:0.999920
figure	O	O:0.999848
out	O	O:0.999936
how	O	O:0.999972
to	O	O:0.999988
apply	O	O:0.986606
it	O	O:0.999803
for	O	O:0.999988
this	O	O:0.999882
case	O	O:0.999608
.	O	O:0.999955
	
I'm	O	O:0.999877
not	O	O:0.999994
aware	O	O:0.999981
of	O	O:0.999960
a	O	O:0.999970
method	O	O:0.999836
on	O	O:0.999986
DataFrame	B-API	O:0.999280
to	O	O:0.999988
do	O	O:0.999999
this	O	O:0.999894
.	O	O:0.999927
	
Do	O	O:0.999966
you	O	O:0.999979
expect	O	O:0.999980
things	O	O:0.999992
like	O	O:0.999979
count	O	O:0.999383
and	O	O:0.999999
the	O	O:0.999995
quantiles	O	O:0.998676
to	O	O:0.999981
change	O	O:0.999950
?	O	O:0.999961
	
Or	O	O:0.999978
just	O	O:0.999699
the	O	O:0.999997
mean	O	O:0.997510
and	O	O:0.999997
standard	O	O:0.999749
deviation	O	O:0.999281
?	O	O:0.999945
	
Can	O	O:0.999874
you	O	O:0.999973
apply	O	O:0.739741
the	O	O:0.999914
weighting	O	O:0.998955
first	O	O:0.999532
and	O	O:0.999998
then	O	O:0.999940
call	O	O:0.999911
describe	O	O:0.999938
on	O	O:0.999945
the	O	O:0.999997
resulting	O	O:0.999733
series	O	O:0.999833
?	O	O:0.999957
	
Thanks	O	O:0.998265
TomAuspurger	O	O:0.999201
...	O	O:0.999903
that	O	O:0.999681
was	O	O:0.999992
my	O	O:0.999985
suspicion	O	O:0.999184
,	O	O:0.999990
but	O	O:0.999954
I	O	O:0.999941
was	O	O:0.999989
hoping	O	O:0.999049
to	O	O:0.999972
avoid	O	O:0.999981
that	O	O:0.999960
extra	O	O:0.999573
coding	O	O:0.999702
...	O	O:0.998526
	
I'd	O	O:0.999843
expect	O	O:0.999926
it	O	O:0.999993
to	O	O:0.999998
apply	O	O:0.981709
to	O	O:0.999992
all	O	O:0.999998
of	O	O:0.999997
the	O	O:0.999936
metrics	O	O:0.999540
.	O	O:0.999813
	
Assume	O	O:0.999803
you	O	O:0.999987
have	O	O:0.999988
70%	O	O:0.999996
of	O	O:0.999996
the	O	O:0.999979
population	O	O:0.999940
with	O	O:0.999957
revenue	O	O:0.999839
0	O	O:0.999932
,	O	O:0.999974
and	O	O:0.999974
30%	O	O:0.999953
with	O	O:0.999748
revenue	O	O:0.999491
1	O	O:0.999797
.	O	O:0.999884
	
You'd	O	O:0.999878
want	O	O:0.999912
median	O	B-API:0.654519
revenue	O	O:0.999981
weighted	O	O:0.999803
by	O	O:0.999980
population	O	O:0.999878
to	O	O:0.999992
be	O	O:0.999999
0	O	O:0.999890
.	O	O:0.999688
	
If	O	O:0.999968
you	O	O:0.999989
multiply	O	O:0.999919
revenue	O	O:0.999960
by	O	O:0.999883
weight	O	O:0.999786
and	O	O:0.999977
apply	O	O:0.583054
describe	O	O:0.995838
...	O	O:0.999447
you	O	O:0.999984
probably	O	O:0.999978
get	O	O:0.999997
a	O	O:0.999999
median	O	B-API:0.649572
of	O	O:0.999960
0.15	O	O:0.994665
(	O	O:0.999993
vector	O	O:0.999917
0	O	O:0.999873
,	O	O:0.999987
0.3	O	O:0.998679
)	O	O:0.999961
which	O	O:0.999001
is	O	O:0.999981
irrelevant	O	O:0.996780
.	O	O:0.999822
	
I	O	O:0.999992
have	O	O:0.999988
a	O	O:0.999993
pandas	O	O:0.999915
series	O	O:0.999974
of	O	O:0.999970
booleans	O	O:0.998287
and	O	O:0.999985
was	O	O:0.999931
wondering	O	O:0.999535
what	O	O:0.999777
the	O	O:0.999992
best	O	O:0.999579
way	O	O:0.999891
is	O	O:0.999986
to	O	O:0.999989
apply	O	O:0.957832
"	O	O:0.999921
or	O	O:0.999889
"	O	O:0.999985
or	O	O:0.999927
"	O	O:0.999961
and	O	O:0.999979
"	O	O:0.999987
to	O	O:0.999932
the	O	O:1.000000
whole	O	O:0.999476
series	O	O:0.999879
.	O	O:0.999930
	
I	O	O:0.999947
am	O	O:0.999997
thinking	O	O:0.999713
something	O	O:0.999925
along	O	O:0.999746
the	O	O:0.999993
lines	O	O:0.999409
of	O	O:0.999992
a	O	O:0.999983
Haskell	O	O:0.998065
#CODE	O	O:0.999416
	
will	O	O:0.999777
apply	O	O:0.946141
a	O	O:0.999909
function	O	O:0.999209
to	O	O:0.999995
each	O	O:0.999993
element	O	O:0.999841
in	O	O:0.999993
the	O	O:0.999994
series	O	O:0.999900
so	O	O:0.999964
doesn't	O	O:0.999987
seem	O	O:0.999966
to	O	O:0.999994
do	O	O:1.000000
what	O	O:0.999946
I	O	O:0.999994
need	O	O:0.999961
.	O	O:0.999677
	
`	O	O:0.999959
replace	O	O:0.724487
`	O	O:0.999996
seems	O	O:0.999845
to	O	O:0.999998
apply	O	O:0.888321
to	O	O:0.999668
DataFrame	B-API	O:0.999538
not	O	O:0.999989
to	O	O:0.999998
a	O	O:0.999999
Serie	O	O:0.999659
	
As	O	O:0.999963
you	O	O:0.999986
say	O	O:0.999989
,	O	O:0.999995
looping	O	O:0.994081
(	O	O:0.999931
iterrows	B-API	B-API:0.957424
)	O	O:0.999957
is	O	O:0.999986
a	O	O:0.999995
last	O	O:0.996093
resort	O	O:0.998689
.	O	O:0.999790
	
Try	O	O:0.999972
this	O	O:0.999920
,	O	O:0.999976
which	O	O:0.999963
uses	O	O:0.999185
`	O	O:0.999994
apply	O	B-API:0.972443
`	O	O:0.999969
with	O	O:0.993737
`	O	O:0.999992
axis=1	O	O:0.993489
`	O	O:0.999996
instead	O	O:0.999912
of	O	O:0.999998
iterating	O	O:0.999915
through	O	O:0.999938
rows	O	O:0.997596
.	O	O:0.999814
	
#CODE	O	O:0.998453
	
Thanks	O	O:0.999770
a	O	O:0.999965
lot	O	O:0.998540
.	O	O:0.999796
	
Very	O	O:0.999091
helpful	O	O:0.997155
.	O	O:0.999803
	
I've	O	O:0.998996
been	O	O:0.999569
trying	O	O:0.999943
to	O	O:0.999988
apply	O	O:0.982975
that	O	O:0.999830
to	O	O:0.999998
a	O	O:0.999999
larger	O	O:0.995106
DataFrame	B-API	O:0.981416
and	O	O:0.999997
keep	O	O:0.999506
on	O	O:0.999924
getting	O	O:0.999941
this	O	O:0.999859
error	O	O:0.999728
	
If	O	O:0.999988
the	O	O:0.999990
criteria	O	O:0.999733
I	O	O:0.999992
apply	O	O:0.973654
return	O	O:0.995755
a	O	O:0.999988
single	O	O:0.998926
row	O	O:0.999940
,	O	O:0.999986
I'd	O	O:0.999992
expect	O	O:0.999958
to	O	O:0.999994
be	O	O:1.000000
able	O	O:0.999993
to	O	O:0.999995
set	O	O:0.999997
the	O	O:0.999998
value	O	O:0.999979
of	O	O:0.999998
a	O	O:0.999996
certain	O	O:0.999825
column	O	O:0.999852
in	O	O:0.999998
that	O	O:0.999968
row	O	O:0.999991
in	O	O:0.999995
an	O	O:0.999996
easy	O	O:0.999821
way	O	O:0.999886
,	O	O:0.999972
but	O	O:0.999987
my	O	O:0.999992
first	O	O:0.999742
attempt	O	O:0.999665
doesn't	O	O:0.999596
work	O	O:0.999010
:	O	O:0.999990
#CODE	O	O:0.999893
	
A	O	O:0.999954
nested	O	O:0.998748
apply	O	B-API:0.642627
will	O	O:0.998025
do	O	O:0.999856
it	O	O:0.999981
#CODE	O	O:0.999559
	
suppose	O	O:0.999669
I	O	O:0.999998
have	O	O:0.999989
a	O	O:0.999991
dataframe	B-API	O:0.990800
with	O	O:0.999943
index	O	O:0.999955
as	O	O:0.999998
monthy	O	O:0.999561
timestep	O	O:0.999936
,	O	O:0.999991
I	O	O:0.999999
know	O	O:0.999951
I	O	O:0.999987
can	O	O:0.999971
use	O	O:0.999979
`	O	O:0.999899
dataframe.groupby	B-API	B-API:0.998769
(	O	O:0.999976
lambda	O	O:0.998060
x	O	O:0.999405
:	O	O:0.999963
x.year	O	O:0.999783
)`	O	O:0.999930
to	O	O:0.999982
group	O	O:0.999992
monthly	O	O:0.999914
data	O	O:0.999928
into	O	O:0.999674
yearly	O	O:0.999569
and	O	O:0.999958
apply	O	O:0.737944
other	O	O:0.996223
operations	O	O:0.997555
.	O	O:0.999644
	
Is	O	O:0.999980
there	O	O:0.999985
some	O	O:0.999950
way	O	O:0.999976
I	O	O:0.999987
could	O	O:0.999983
quick	O	O:0.999872
group	O	O:0.999934
them	O	O:0.999647
,	O	O:0.999991
let's	O	O:0.999949
say	O	O:0.999986
by	O	O:0.999976
decade	O	O:0.999645
?	O	O:0.999822
	
I	O	O:0.999982
have	O	O:0.999867
tried	O	O:0.999354
several	O	O:0.999943
variants	O	O:0.999372
on	O	O:0.999868
:	O	O:0.999970
(	O	O:0.999996
I	O	O:0.999997
assume	O	O:0.999976
I'll	O	O:0.999650
need	O	O:0.999928
to	O	O:0.999991
apply	O	O:0.987065
the	O	O:0.999951
limits	O	O:0.998633
to	O	O:0.999993
each	O	O:0.999987
plot	O	O:0.999512
..	O	O:0.999949
but	O	O:0.999993
since	O	O:0.999948
I	O	O:0.999993
can't	O	O:0.999992
get	O	O:0.999948
one	O	O:0.999979
working	O	O:0.999622
...	O	O:0.999482
	
From	O	O:0.999426
the	O	O:0.999944
Matplotlib	O	O:0.998613
doc	O	O:0.999871
it	O	O:0.999972
seems	O	O:0.999991
that	O	O:0.999967
I	O	O:1.000000
need	O	O:0.999995
to	O	O:0.999974
set	O	O:0.999997
ylim	O	B-API:0.751626
,	O	O:0.999975
but	O	O:0.999973
can't	O	O:0.999823
figure	O	O:0.999887
the	O	O:0.999980
syntax	O	O:0.999884
to	O	O:0.999990
do	O	O:0.999999
so	O	O:0.999983
.	O	O:0.999898
	
#CODE	O	O:0.998453
	
You	O	O:0.999884
are	O	O:0.999995
using	O	O:0.999895
an	O	O:0.999074
indexing	O	O:0.997942
short-cut	O	O:0.998598
which	O	O:0.999649
doesn't	O	O:0.999913
apply	O	O:0.756338
,	O	O:0.999972
see	O	O:0.999646
here	O	O:0.998763
:	O	O:0.999963
#URL	O	O:0.999717
	
To	O	O:0.999928
do	O	O:0.999996
this	O	O:0.999990
over	O	O:0.999914
each	O	O:0.999893
group	O	O:0.999437
you	O	O:0.999996
have	O	O:0.999967
to	O	O:0.999997
groupby	B-API	O:0.642673
category	O	O:0.999029
first	O	O:0.999269
and	O	O:0.999997
then	O	O:0.999706
apply	O	O:0.943906
this	O	O:0.995828
function	O	O:0.998412
:	O	O:0.999964
#CODE	O	O:0.999835
	
Apply	O	O:0.999680
the	O	O:0.999277
function	O	O:0.997993
(	O	O:0.999986
you	O	O:0.999984
could	O	O:0.999995
group	O	O:0.999983
by	O	O:0.999995
uuid	O	O:0.998113
,	O	O:0.999980
site	O	O:0.999920
if	O	O:0.999989
you	O	O:0.999998
want	O	O:0.999983
as	O	O:0.999999
well	O	O:0.999653
)	O	O:0.999987
#CODE	O	O:0.998847
	
When	O	O:0.999745
you	O	O:0.999991
apply	O	O:0.986618
your	O	O:0.999747
own	O	O:0.998818
function	O	O:0.999945
,	O	O:0.999996
there	O	O:0.999255
is	O	O:0.999980
not	O	O:0.999951
automatic	O	O:0.999991
exclusions	O	O:0.999840
of	O	O:0.999982
non-numeric	O	O:0.999685
columns	O	O:0.999756
.	O	O:0.999905
	
This	O	O:0.999293
is	O	O:0.999982
slower	O	O:0.999296
,	O	O:0.999990
though	O	O:0.998167
(	O	O:0.999993
that	O	O:0.999961
the	O	O:0.999999
applicatino	O	O:0.999878
of	O	O:0.999982
`	O	O:0.999970
.sum()	B-API	B-API:0.996682
`	O	O:0.999990
to	O	O:0.999950
the	O	O:0.999997
groupby	B-API	B-API:0.996386
#CODE	O	O:0.999253
	
Thanks	O	O:0.998786
Jeff	O	O:0.998659
.	O	O:0.999816
	
How	O	O:0.999880
could	O	O:0.999911
I	O	O:0.999999
apply	O	O:0.992655
different	O	O:0.997982
functions	O	O:0.998828
on	O	O:0.999986
several	O	O:0.999981
columns	O	O:0.999893
in	O	O:0.999997
one	O	O:0.999998
go	O	O:0.999994
as	O	O:0.999999
well	O	O:0.999540
,	O	O:0.999997
e.g.	O	O:0.999900
sum	O	O:0.999794
on	O	O:0.999997
column	O	O:0.999940
"	O	O:0.999994
B	O	O:0.999393
"	O	O:0.999963
and	O	O:0.999986
set	O	O:0.999893
on	O	O:0.999984
column	O	O:0.999876
"	O	O:0.999994
C	O	O:0.998712
"	O	O:0.999949
?	O	O:0.999735
	
each	O	O:0.999635
group	O	O:0.999004
get's	O	O:0.999904
passed	O	O:0.999847
a	O	O:0.999844
``	O	O:0.999656
DataFrame	B-API	O:0.787953
``	O	O:0.999139
(	O	O:0.999839
called	O	O:0.999902
x	O	O:0.999941
)	O	O:0.999980
,	O	O:0.999993
so	O	O:0.999985
x	O	O:0.999792
[	O	O:0.999967
'	O	O:0.999984
A	O	O:0.999987
']	O	O:0.999885
is	O	O:0.999966
a	O	O:0.999664
``	O	O:0.999631
Series	O	O:0.994148
``	O	O:0.999907
,	O	O:0.999989
just	O	O:0.999978
like	O	O:0.999943
regular	O	O:0.998455
indexing	O	O:0.982551
(	O	O:0.999893
but	O	O:0.999984
its	O	O:0.999974
just	O	O:0.999990
the	O	O:1.000000
rows	O	O:0.998562
in	O	O:0.999992
that	O	O:0.999997
group	O	O:0.999757
)	O	O:0.999992
.	O	O:0.999954
the	O	O:0.999889
``	O	O:0.999820
x	O	O:0.998136
[	O	O:0.999977
'	O	O:0.999983
A	O	O:0.999993
']	O	O:0.999962
.sum()	B-API	B-API:0.999332
``	O	O:0.999958
thus	O	O:0.998861
reduces	O	O:0.999970
to	O	O:0.999997
a	O	O:1.000000
scalar	O	O:0.999798
value	O	O:0.999983
,	O	O:0.999998
as	O	O:0.999995
do	O	O:0.999933
the	O	O:0.999991
other	O	O:0.999616
terms	O	O:0.999306
.	O	O:0.999857
	
Net	O	O:0.999814
you	O	O:0.999908
are	O	O:0.999997
returning	O	O:0.999975
a	O	O:0.999748
``	O	O:0.999763
Series	O	O:0.995776
``	O	O:0.999988
with	O	O:0.999863
values	O	O:0.999665
for	O	O:0.999990
the	O	O:0.999488
``	O	O:0.999546
index	O	O:0.996238
=[	O	O:0.999957
'	O	O:0.999952
A	O	O:0.999950
'	O	O:0.999971
,	O	O:0.999975
'	O	O:0.999978
B	O	O:0.999856
'	O	O:0.999980
,	O	O:0.999969
'	O	O:0.999957
C	O	O:0.999686
']``	O	O:0.998467
.	O	O:0.999302
	
These	O	O:0.999646
are	O	O:0.999935
stacked	O	O:0.997545
(	O	O:0.999988
row-wise	O	O:0.999012
)	O	O:0.999988
to	O	O:0.999979
form	O	O:1.000000
the	O	O:0.999986
result	O	O:0.999991
frame	O	O:0.999996
at	O	O:0.999995
the	O	O:0.999996
very	O	O:0.999911
end	O	O:0.999949
of	O	O:0.999991
the	O	O:0.999928
apply	O	B-API:0.760467
.	O	O:0.998646
	
You	O	O:0.999904
can	O	O:0.999901
do	O	O:0.999999
bare	O	O:0.999960
strings	O	O:0.999124
for	O	O:0.999988
the	O	O:0.999995
keys	O	O:0.999554
when	O	O:0.999924
you	O	O:0.999994
use	O	O:0.999968
``	O	O:0.999875
dict	O	O:0.986327
``	O	O:0.999964
,	O	O:0.999949
equiv	O	O:0.999075
is	O	O:0.999897
``	O	O:0.999424
{	O	O:0.999742
'	O	O:0.999944
A	O	O:0.999736
'	O	O:0.999868
:	O	O:0.999971
x	O	O:0.999862
[	O	O:0.999975
'	O	O:0.999981
A	O	O:0.999995
']	O	O:0.999953
.sum()	B-API	B-API:0.999439
}	O	O:0.999445
``	O	O:0.999705
	
great	O	O:0.995171
!	O	O:0.999866
	
just	O	O:0.999598
to	O	O:0.999998
point	O	O:0.999992
out	O	O:0.999981
though	O	O:0.999974
,	O	O:0.999994
you	O	O:0.999966
should	O	O:0.999991
still	O	O:0.999980
do	O	O:0.999995
the	O	O:0.999989
aggregation	O	O:0.996766
on	O	O:0.999879
A	O	O:0.999983
and	O	O:0.999996
B	O	O:0.999962
via	O	O:0.999932
a	O	O:0.999972
direct	O	O:0.995268
``	O	O:0.999912
.sum()	B-API	B-API:0.999179
``	O	O:0.999867
rather	O	O:0.999702
than	O	O:0.999920
apply	O	O:0.527658
because	O	O:0.999620
these	O	O:0.999566
are	O	O:0.999987
cythonized	O	O:0.998956
.	O	O:0.999882
	
The	O	O:0.999933
apply	O	O:0.771638
going	O	O:0.998539
to	O	O:0.999961
be	O	O:0.999998
slower	O	O:0.999871
,	O	O:0.999993
so	O	O:0.999992
do	O	O:0.999993
only	O	O:0.999993
where	O	O:0.999975
you	O	O:0.999982
really	O	O:0.999969
need	O	O:0.999924
it	O	O:0.999972
.	O	O:0.999972
	
Great	O	O:0.998825
answer	O	O:0.999332
!	O	O:0.999774
	
A	O	O:0.999951
slightly	O	O:0.999915
more	O	O:0.999713
direct	O	O:0.999645
way	O	O:0.999963
to	O	O:0.999981
apply	O	O:0.996352
different	O	O:0.999666
functions	O	O:0.999061
on	O	O:0.999990
several	O	O:0.999968
columns	O	O:0.999875
is	O	O:0.999998
to	O	O:0.999981
use	O	O:0.999998
the	O	O:0.999766
`	O	O:0.999857
agg	O	B-API:0.996732
`	O	O:0.999947
function	O	O:0.999472
,	O	O:0.999998
so	O	O:0.999983
`	O	O:0.999956
df.groupby	B-API	B-API:0.992631
(	O	O:0.999968
'	O	O:0.999879
A	O	O:0.999980
')	O	O:0.999859
.agg	B-API	B-API:0.999237
(	O	O:0.999903
dict	O	O:0.997346
(	O	O:0.999952
A	O	O:0.999989
=	O	O:0.999739
'	O	O:0.999978
sum	O	O:0.999423
'	O	O:0.999993
,	O	O:0.999991
B	O	O:0.999920
=	O	O:0.999811
'	O	O:0.999980
sum	O	O:0.999507
'	O	O:0.999992
,	O	O:0.999991
C	O	O:0.999593
=	O	O:0.999869
lambda	O	O:0.999109
x	O	O:0.999481
:	O	O:0.999786
'	O	O:0.999995
{%s}	O	O:0.999472
'	O	O:0.999943
%	O	O:0.999953
'	O	O:0.999972
,	O	O:0.999965
'	O	O:0.999882
.join	B-API	B-API:0.997093
(	O	O:0.999975
x	O	O:0.999935
)))`	O	O:0.996709
	
Thanks	O	O:0.999815
a	O	O:0.999984
lot	O	O:0.999763
,	O	O:0.999991
I	O	O:0.999994
have	O	O:0.999977
been	O	O:0.999342
looking	O	O:0.999977
into	O	O:0.999476
the	O	O:0.999956
`	O	O:0.999790
agg	O	B-API:0.997870
`	O	O:0.999901
function	O	O:0.998362
.	O	O:0.999930
	
Any	O	O:0.999796
ideas	O	O:0.999404
how	O	O:0.999976
that	O	O:0.999892
would	O	O:0.999995
compare	O	O:0.999960
performance-wise	O	O:0.999969
to	O	O:0.999985
apply	O	O:0.933239
?	O	O:0.999746
	
they	O	O:0.999659
are	O	O:0.999993
the	O	O:0.999994
same	O	O:0.999828
;	O	O:0.999991
apply	O	B-API:0.656436
is	O	O:0.999991
a	O	O:0.999890
bit	O	O:0.999851
more	O	O:0.999866
flexible	O	O:0.999264
in	O	O:0.999964
how	O	O:0.999940
it	O	O:0.999997
looks	O	O:0.999963
at	O	O:0.999997
the	O	O:0.999894
output	O	O:0.995314
(	O	O:0.999993
just	O	O:0.999952
slightly	O	O:0.999900
)	O	O:0.999934
	
You	O	O:0.999952
can	O	O:0.999913
use	O	O:0.999996
the	O	O:0.999920
`	O	O:0.999940
apply	O	B-API:0.998569
`	O	O:0.999902
method	O	O:0.999632
to	O	O:0.999998
apply	O	O:0.978895
an	O	O:0.999976
arbitrary	O	O:0.998924
function	O	O:0.999877
to	O	O:0.999961
the	O	O:1.000000
grouped	O	O:0.999786
data	O	O:0.999863
.	O	O:0.999929
	
So	O	O:0.999974
if	O	O:0.999992
you	O	O:0.999996
want	O	O:0.999994
a	O	O:0.999997
set	O	O:0.999714
,	O	O:0.999997
apply	O	B-API:0.530231
`	O	O:0.999924
set	O	O:0.976618
`	O	O:0.999991
.	O	O:0.999361
	
If	O	O:0.999964
you	O	O:0.999990
want	O	O:0.999979
a	O	O:0.999995
list	O	O:0.998492
,	O	O:0.999995
apply	O	B-API:0.857661
`	O	O:0.999851
list	O	O:0.527874
`	O	O:0.999987
.	O	O:0.999381
	
#CODE	O	O:0.998453
	
If	O	O:0.999967
you	O	O:0.999983
want	O	O:0.999994
something	O	O:0.999976
else	O	O:0.999888
,	O	O:0.999999
just	O	O:0.999940
write	O	O:0.999992
a	O	O:0.999936
function	O	O:0.999951
that	O	O:0.999941
does	O	O:0.999979
what	O	O:0.999977
you	O	O:0.999994
want	O	O:0.999954
and	O	O:0.999999
then	O	O:0.999940
`	O	O:0.999997
apply	O	B-API:0.967895
`	O	O:0.999969
that	O	O:0.997380
.	O	O:0.999986
	
Why	O	O:0.999941
am	O	O:0.999958
I	O	O:0.999996
unable	O	O:0.999962
to	O	O:0.999962
apply	O	O:0.974484
my	O	O:0.998882
function	O	O:0.999947
elementwise	O	O:0.999901
on	O	O:0.999990
my	O	O:0.999910
`	O	O:0.999992
Series	O	O:0.990866
`	O	O:0.999977
object	O	O:0.999161
?	O	O:0.999969
	
You	O	O:0.999903
could	O	O:0.999921
write	O	O:0.999993
a	O	O:0.999947
function	O	O:0.999439
and	O	O:0.999962
`	O	O:0.999988
apply	O	B-API:0.996419
`	O	O:0.999964
it	O	O:0.999831
to	O	O:0.999997
each	O	O:0.999993
DataFrame	B-API	O:0.995721
in	O	O:0.999988
the	O	O:0.999998
panel	O	O:0.999977
you	O	O:0.999988
get	O	O:0.999992
from	O	O:0.999982
Yahoo	O	O:0.999594
.	O	O:0.999922
	
I	O	O:0.999988
have	O	O:0.999987
calibration	O	O:0.999205
factors	O	O:0.999970
that	O	O:0.999956
need	O	O:0.999995
to	O	O:0.999999
be	O	O:1.000000
applied	O	O:0.999724
after	O	O:0.999937
specific	O	O:0.999537
dates	O	O:0.992773
and	O	O:0.999981
for	O	O:0.999996
certain	O	O:0.998980
ranges	O	O:0.999491
of	O	O:0.999967
instrument	O	O:0.999919
readings	O	O:0.999416
ie	O	O:0.999970
.	O	O:0.999935
	
a	O	O:0.999942
higher	O	O:0.998609
reading	O	O:0.999468
will	O	O:0.999716
require	O	O:0.999979
a	O	O:0.999998
different	O	O:0.999441
calibration	O	O:0.999082
factor	O	O:0.998777
.	O	O:0.999678
	
I	O	O:0.999959
am	O	O:0.999996
way	O	O:0.999845
I	O	O:0.999977
am	O	O:0.999998
trying	O	O:0.999663
to	O	O:0.999996
apply	O	O:0.991186
a	O	O:0.999862
lookup	O	O:0.966944
table	O	O:0.999982
that	O	O:0.999708
is	O	O:0.999999
based	O	O:0.999584
on	O	O:0.999982
the	O	O:0.999978
time	O	O:0.999881
and	O	O:0.999997
also	O	O:0.999985
the	O	O:0.999986
raw	O	O:0.999068
instrument	O	O:0.999949
reading	O	O:0.999712
through	O	O:0.999867
the	O	O:0.999990
use	O	O:0.999947
of	O	O:0.999960
a	O	O:0.999938
nested	O	O:0.996905
python	O	O:0.999401
dictionary	O	O:0.999694
.	O	O:0.999756
	
is	O	O:0.999983
there	O	O:0.999960
a	O	O:0.999996
way	O	O:0.999923
to	O	O:0.999985
iterate	O	O:0.999987
through	O	O:0.999755
my	O	O:0.999981
dataframe	B-API	O:0.998240
to	O	O:0.999989
apply	O	O:0.984433
these	O	O:0.999932
calibration	O	O:0.999605
factors	O	O:0.999886
with	O	O:0.999778
the	O	O:0.999978
nested	O	O:0.999689
dict	O	O:0.999935
as	O	O:0.999998
a	O	O:0.999998
form	O	O:0.999932
of	O	O:0.999998
a	O	O:0.999956
lookup	O	O:0.994237
table	O	O:0.999868
?	O	O:0.999926
	
Till	O	O:0.995593
`	O	O:0.999993
pandas	O	O:0.990143
`	O	O:0.999946
is	O	O:0.999855
not	O	O:0.999978
officially	O	O:0.999940
implemented	O	O:0.999453
in	O	O:0.999944
`	O	O:0.999941
plt.fill_between	B-API	B-API:0.981676
`	O	O:0.999978
function	O	O:0.999718
,	O	O:0.999998
you	O	O:0.999974
can	O	O:0.999991
still	O	O:0.999998
apply	O	O:0.917818
`	O	O:0.999916
pd.Series	B-API	B-API:0.998435
`	O	O:0.999992
or	O	O:0.999577
`	O	O:0.999989
pd.DataFrame	B-API	B-API:0.965179
`	O	O:0.999995
as	O	O:0.999845
`	O	O:0.999979
pd.Series()	B-API	B-API:0.998865
.values	B-API	B-API:0.991471
`	O	O:0.999924
and	O	O:0.999815
`	O	O:0.999990
pd.DataFrame()	B-API	B-API:0.999197
.values	B-API	B-API:0.979316
`	O	O:0.999975
to	O	O:0.999983
make	O	O:0.999996
`	O	O:0.999967
fill_between	B-API	B-API:0.998053
`	O	O:0.999995
plots	O	O:0.996814
.	O	O:0.999927
	
``	O	O:0.999850
apply	O	B-API:0.970151
``	O	O:0.998807
would	O	O:0.998659
return	O	O:0.999974
a	O	O:0.999988
shorter	O	O:0.998486
Series	O	O:0.999838
,	O	O:0.999993
with	O	O:0.999980
one	O	O:0.999991
entry	O	O:0.999949
per	O	O:0.999954
group	O	O:0.994959
.	O	O:0.999878
	
Instead	O	O:0.999825
,	O	O:0.999991
we	O	O:0.999998
want	O	O:0.999980
a	O	O:0.999998
Series	O	O:0.999828
of	O	O:0.999989
the	O	O:0.999994
same	O	O:0.999985
length	O	O:0.999709
as	O	O:0.999991
the	O	O:0.999994
original	O	O:0.999705
one	O	O:0.999985
,	O	O:0.999997
with	O	O:0.999979
each	O	O:0.999863
group's	O	O:0.999903
entire	O	O:0.999878
contents	O	O:0.999893
mapped	O	O:0.999808
to	O	O:0.999863
``	O	O:0.999995
True	O	O:0.998145
``	O	O:0.999969
or	O	O:0.999118
``	O	O:0.999941
False	O	O:0.998430
``	O	O:0.999974
as	O	O:0.999985
a	O	O:0.999991
block	O	O:0.996996
.	O	O:0.999850
	
Then	O	O:0.999803
we	O	O:0.999999
can	O	O:0.999974
use	O	O:0.999998
that	O	O:0.999602
boolean	O	O:0.999728
Series	O	O:0.999931
to	O	O:0.999974
mask	O	O:0.995836
the	O	O:0.999985
original	O	O:0.999433
Series	O	O:0.999629
.	O	O:0.999869
	
See	O	O:0.999788
the	O	O:0.999808
[	O	O:0.999903
documentation	O	O:0.999776
]	O	O:0.999692
(	O	O:0.999939
#URL	O	O:0.999752
)	O	O:0.999953
for	O	O:0.999969
more	O	O:0.998063
.	O	O:0.999577
	
And	O	O:0.999987
then	O	O:0.999779
use	O	O:0.999992
`	O	O:0.999972
apply	O	B-API:0.997139
`	O	O:0.999520
:	O	O:0.999171
#CODE	O	O:0.999898
	
Alternatively	O	O:0.999834
you	O	O:0.999963
could	O	O:0.999956
use	O	O:0.999994
`	O	O:0.999971
apply	O	B-API:0.994956
`	O	O:0.997146
(	O	O:0.997891
but	O	O:0.999996
this	O	O:0.999890
will	O	O:0.999965
usually	O	O:0.999988
be	O	O:0.999979
slower	O	O:0.990831
):	O	O:0.999808
#CODE	O	O:0.999337
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.994087
a	O	O:0.999880
function	O	O:0.999014
to	O	O:0.999996
two	O	O:1.000000
columns	O	O:0.999960
of	O	O:0.999985
Pandas	O	O:0.999911
dataframe	B-API	O:0.997291
	
Pandas	O	O:0.997741
:	O	O:0.999940
How	O	O:0.999978
to	O	O:0.999992
use	O	O:0.999997
apply	O	B-API:0.890999
function	O	O:0.998672
to	O	O:0.999990
multiple	O	O:0.999997
columns	O	O:0.999679
	
And	O	O:0.999918
apply	O	O:0.663020
the	O	O:0.999466
function	O	O:0.999665
like	O	O:0.999902
this	O	O:0.999672
:	O	O:0.999984
#CODE	O	O:0.999839
	
Any	O	O:0.999870
Ideas	O	O:0.999778
on	O	O:0.999974
how	O	O:0.999993
to	O	O:0.999998
get	O	O:0.999996
around	O	O:0.999942
the	O	O:0.999989
axis	O	O:0.999844
parameter	O	O:0.999880
error	O	O:0.999754
?	O	O:0.999962
	
Or	O	O:0.999985
a	O	O:0.999997
more	O	O:0.999470
elegant	O	O:0.999874
way	O	O:0.999991
to	O	O:0.999989
calculate	O	O:0.999972
the	O	O:0.999997
pct	O	O:0.998719
change	O	O:0.998107
?	O	O:0.999920
	
The	O	O:0.999908
kicker	O	O:0.999744
with	O	O:0.999971
my	O	O:0.999969
problem	O	O:0.999037
is	O	O:0.999997
that	O	O:0.999769
I	O	O:0.999999
needs	O	O:0.999988
be	O	O:0.999988
able	O	O:0.999976
to	O	O:0.999977
apply	O	O:0.988802
this	O	O:0.998363
function	O	O:0.999872
across	O	O:0.999926
several	O	O:0.999929
different	O	O:0.999977
column	O	O:0.999972
pairs	O	O:0.999896
,	O	O:0.999997
so	O	O:0.999997
hard	O	O:0.999793
coding	O	O:0.999920
the	O	O:0.999992
column	O	O:0.999926
names	O	O:0.999974
like	O	O:0.999982
the	O	O:0.999997
answer	O	O:0.999520
in	O	O:0.999960
2nd	O	O:0.999817
question	O	O:0.999119
is	O	O:0.999975
undesirable	O	O:0.995984
.	O	O:0.999835
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
The	O	O:0.999923
confusion	O	O:0.999920
stems	O	O:0.999891
from	O	O:0.999917
two	O	O:0.999957
different	O	O:0.998488
(	O	O:0.999913
but	O	O:0.999977
equally	O	O:0.999750
named	O	O:0.999767
)	O	O:0.999973
`	O	O:0.999976
apply	O	B-API:0.906850
`	O	O:0.999943
functions	O	O:0.997035
,	O	O:0.999998
one	O	O:0.999980
on	O	O:0.999964
Series	O	O:0.999391
/	O	O:0.999978
DataFrame	B-API	O:0.981900
and	O	O:0.999995
one	O	O:0.999990
on	O	O:0.999809
groupby	B-API	B-API:0.989473
.	O	O:0.999854
	
#CODE	O	O:0.998453
	
The	O	O:0.999898
DataFrame	B-API	O:0.925629
apply	O	B-API:0.798259
method	O	O:0.999778
takes	O	O:0.998797
an	O	O:0.999993
axis	O	O:0.999385
argument	O	O:0.999087
:	O	O:0.999935
#CODE	O	O:0.999801
	
The	O	O:0.999872
groupby	B-API	B-API:0.981092
apply	O	B-API:0.627240
doesn't	O	O:0.991665
,	O	O:0.999919
and	O	O:0.999995
the	O	O:0.999973
kwarg	O	O:0.994934
is	O	O:0.999988
passed	O	O:0.998833
to	O	O:0.999993
the	O	O:0.999976
function	O	O:0.997864
:	O	O:0.999963
#CODE	O	O:0.999922
	
Thanks	O	O:0.999118
for	O	O:0.999997
your	O	O:0.999512
answer	O	O:0.999318
Andy	O	O:0.999474
.	O	O:0.999710
	
If	O	O:0.999982
I	O	O:0.999994
stick	O	O:0.999924
with	O	O:0.999595
the	O	O:0.999972
groupby	B-API	B-API:0.974297
apply	O	B-API:0.736417
and	O	O:0.999809
remove	O	O:0.995737
the	O	O:0.999926
axis	O	O:0.999779
param	O	O:0.999792
,	O	O:0.999998
I	O	O:0.999998
get	O	O:0.999993
a	O	O:0.999988
key	O	O:0.999957
error	O	O:0.999439
`	O	O:0.999909
KeyError	O	O:0.995064
:	O	O:0.999970
u'no	O	O:0.999715
item	O	O:0.999956
named	O	O:0.999671
0	O	O:0.999978
'`	O	O:0.999960
for	O	O:0.999947
accessing	O	O:0.999703
the	O	O:0.999959
elements	O	O:0.999777
as	O	O:0.999987
`	O	O:0.999985
row	O	O:0.999794
[	O	O:0.999987
0	O	O:0.999967
]`	O	O:0.999913
ect	O	O:0.998838
.	O	O:0.999930
	
Is	O	O:0.999986
there	O	O:0.999987
a	O	O:0.999997
way	O	O:0.999957
to	O	O:0.999969
use	O	O:0.999995
the	O	O:0.999823
groupby	B-API	B-API:0.993819
apply	O	B-API:0.850224
and	O	O:0.999914
still	O	O:0.999582
use	O	O:0.999892
a	O	O:0.999751
notation	O	O:0.998352
that	O	O:0.999884
keeps	O	O:0.999887
it	O	O:0.999998
easy	O	O:0.999848
to	O	O:0.999997
apply	O	O:0.899602
to	O	O:0.999969
several	O	O:0.999970
differently	O	O:0.999932
named	O	O:0.999971
column	O	O:0.999946
pairs	O	O:0.999671
?	O	O:0.999962
	
@USER	O	O:0.999353
updated	O	O:0.999557
,	O	O:0.999996
you	O	O:0.999989
can	O	O:0.999977
use	O	O:0.999999
the	O	O:0.999964
groupby	B-API	B-API:0.991124
with	O	O:0.999811
axis=1	O	O:0.998695
,	O	O:0.999997
you	O	O:0.999977
can	O	O:0.999990
apply	O	O:0.987615
pct_change	B-API	B-API:0.991037
to	O	O:0.999911
entire	O	O:0.999983
dataframe	B-API	O:0.998023
.	O	O:0.999885
	
Or	O	O:0.999982
perhaps	O	O:0.999878
you	O	O:0.999996
want	O	O:0.999987
to	O	O:0.999990
do	O	O:1.000000
this	O	O:0.999986
one	O	O:0.999995
each	O	O:0.999946
group	O	O:0.999795
using	O	O:0.999978
an	O	O:0.999630
apply	O	B-API:0.973748
(	O	O:0.998720
`	O	O:0.999930
lambda	O	O:0.996950
x	O	O:0.999753
:	O	O:0.999978
x.pct_change()	O	O:0.989010
`)	O	O:0.999973
.	O	O:0.999822
	
@USER	O	O:0.999564
you	O	O:0.999983
need	O	O:0.999972
to	O	O:0.999998
tweak	O	O:0.999998
delta	O	O:0.999210
a	O	O:0.999987
bit	O	O:0.999489
,	O	O:0.999994
see	O	O:0.999968
my	O	O:0.999991
last	O	O:0.999441
example	O	O:0.999545
(	O	O:0.999988
assuming	O	O:0.999981
that's	O	O:0.999948
from	O	O:0.999969
the	O	O:0.999994
apply	O	B-API:0.753762
)	O	O:0.999592
	
@USER	O	O:0.999119
not	O	O:0.999987
sure	O	O:0.999926
I	O	O:0.999999
have	O	O:0.999994
a	O	O:0.999984
good	O	O:0.999349
reference	O	O:0.999821
,	O	O:0.999984
but	O	O:0.999994
a	O	O:0.999995
good	O	O:0.999093
trick	O	O:0.999889
is	O	O:0.999995
to	O	O:0.999996
set	O	O:0.999996
up	O	O:0.999994
a	O	O:0.999996
break	O	O:0.998827
point	O	O:0.999756
in	O	O:0.999986
the	O	O:0.999899
function	O	O:0.999729
you're	O	O:0.999921
going	O	O:0.999825
to	O	O:0.999991
apply	O	O:0.782502
and	O	O:0.999992
then	O	O:0.999685
see	O	O:0.999993
how	O	O:0.999994
you	O	O:0.999991
can	O	O:0.999998
access	O	O:0.999995
things	O	O:0.999970
you	O	O:0.999985
want	O	O:0.999907
	
You	O	O:0.999885
could	O	O:0.999972
define	O	O:0.999983
a	O	O:0.999990
function	O	O:0.999900
to	O	O:0.999992
subtract	O	O:0.999974
the	O	O:0.999997
quarterly	O	O:0.999878
totals	O	O:0.999876
from	O	O:0.999926
the	O	O:0.999992
annual	O	O:0.998621
number	O	O:0.999532
,	O	O:0.999960
and	O	O:1.000000
then	O	O:0.999882
apply	O	O:0.888073
the	O	O:0.999853
function	O	O:0.999610
to	O	O:0.999997
each	O	O:0.999993
row	O	O:0.999974
,	O	O:0.999997
storing	O	O:0.999967
the	O	O:0.999961
result	O	O:0.999926
in	O	O:0.999998
a	O	O:0.999998
new	O	O:0.999829
column	O	O:0.999621
.	O	O:0.999888
	
#CODE	O	O:0.998453
	
Assuming	O	O:0.999641
these	O	O:0.999798
are	O	O:0.999997
just	O	O:0.999957
strings	O	O:0.999913
you	O	O:0.999972
could	O	O:0.999997
simply	O	O:0.999998
add	O	O:1.000000
them	O	O:0.999838
together	O	O:0.997442
(	O	O:0.999994
with	O	O:0.999984
a	O	O:0.999994
space	O	O:0.999636
)	O	O:0.999993
,	O	O:0.999997
allowing	O	O:0.999883
you	O	O:0.999964
to	O	O:0.999996
apply	O	O:0.976865
`	O	O:0.999885
to_datetime	B-API	B-API:0.999730
`	O	O:0.999936
:	O	O:0.999761
#CODE	O	O:0.999908
	
A	O	O:0.999913
purely	O	O:0.999767
pandas	O	O:0.999487
way	O	O:0.999911
might	O	O:0.999929
be	O	O:0.999996
to	O	O:0.999998
apply	O	O:0.840277
the	O	O:0.999685
Series	O	O:0.998997
constructor	O	O:0.999948
to	O	O:0.999992
put	O	O:0.999993
this	O	O:0.999961
into	O	O:0.999541
one	O	O:0.999983
DataFrame	B-API	O:0.990756
and	O	O:0.999994
stack	O	O:0.839783
into	O	O:0.999510
a	O	O:0.999972
Series	O	O:0.982203
(	O	O:0.999992
so	O	O:0.999997
you	O	O:0.999990
can	O	O:0.999987
use	O	O:0.999998
value_counts	B-API	B-API:0.998093
)	O	O:0.999940
...	O	O:0.998634
	
if	O	O:0.999935
you	O	O:0.999946
didn't	O	O:0.999967
care	O	O:0.999964
about	O	O:0.999880
the	O	O:0.999921
index	O	O:0.999351
/	O	O:0.999986
timestamp	O	O:0.999482
you	O	O:0.999986
could	O	O:0.999902
use	O	O:0.999988
collections	O	B-API:0.954323
(	O	O:0.999899
which	O	O:0.999862
may	O	O:0.999988
be	O	O:0.999988
faster	O	O:0.997783
):	O	O:0.999794
#CODE	O	O:0.999141
	
`	O	O:0.999942
Apply	O	O:0.987097
`	O	O:0.999969
Series	O	O:0.998770
constructor	O	O:0.999972
to	O	O:0.999993
get	O	O:0.999997
a	O	O:0.999994
DataFrame	B-API	O:0.987590
and	O	O:0.999976
`	O	O:0.999994
stack	O	B-API:0.995477
`	O	O:0.999994
it	O	O:0.999972
into	O	O:0.999932
a	O	O:0.999963
Series	O	O:0.954868
:	O	O:0.999947
#CODE	O	O:0.999839
	
The	O	O:0.999975
result	O	O:0.999942
of	O	O:0.999984
`	O	O:0.999907
df.groupby	B-API	B-API:0.998147
(	O	O:0.999987
...	O	O:0.999765
)`	O	O:0.993343
is	O	O:0.999976
not	O	O:0.999948
a	O	O:0.999994
DataFrame	B-API	O:0.959406
.	O	O:0.999825
	
To	O	O:0.999975
get	O	O:0.999959
a	O	O:0.999999
DataFrame	B-API	O:0.999030
back	O	O:0.999546
,	O	O:0.999997
you	O	O:0.999994
have	O	O:0.999984
to	O	O:0.999999
apply	O	O:0.997941
a	O	O:0.999909
function	O	O:0.999452
to	O	O:0.999995
each	O	O:0.999994
group	O	O:0.999335
,	O	O:0.999998
transform	O	O:0.864545
each	O	O:0.999878
element	O	O:0.999971
of	O	O:0.999998
a	O	O:0.999993
group	O	O:0.999022
,	O	O:0.999997
or	O	O:0.999981
filter	O	O:0.996089
the	O	O:0.999988
groups	O	O:0.998275
.	O	O:0.999834
	
I	O	O:0.999992
came	O	O:0.999937
out	O	O:0.999921
with	O	O:0.999943
the	O	O:0.999984
following	O	O:0.999470
solution	O	O:0.999141
.	O	O:0.999898
	
As	O	O:0.999956
preparation	O	O:0.999948
steps	O	O:0.999971
,	O	O:0.999995
I	O	O:0.999993
ll	O	O:0.999994
group	O	O:0.999127
by	O	O:0.999960
speaker	O	O:0.999824
name	O	O:0.999764
and	O	O:0.999993
set	O	O:0.999920
the	O	O:0.999963
file	O	O:0.999892
name	O	O:0.999901
as	O	O:0.999997
index	O	O:0.999977
by	O	O:0.999980
the	O	O:0.999322
set_index	B-API	B-API:0.999310
method	O	O:0.999656
.	O	O:0.999922
	
I	O	O:0.999977
will	O	O:0.999996
then	O	O:0.999954
iterate	O	O:0.999993
over	O	O:0.999799
the	O	O:0.999974
groupbyObj	O	O:0.997391
and	O	O:0.999989
apply	O	O:0.612821
the	O	O:0.999443
calculation	O	O:0.990431
function	O	O:0.999962
,	O	O:0.999988
which	O	O:0.999968
will	O	O:0.999878
return	O	O:0.999857
the	O	O:0.999988
selected	O	O:0.998765
speaker	O	O:0.999409
and	O	O:0.999995
the	O	O:0.999997
files	O	O:0.998813
to	O	O:0.999986
be	O	O:1.000000
marked	O	O:0.999920
as	O	O:0.999969
used	O	O:0.998601
.	O	O:0.999644
	
1	O	O:0.999295
.	O	O:0.999771
	
How	O	O:0.999899
can	O	O:0.999955
I	O	O:1.000000
approach	O	O:0.999998
a	O	O:0.999966
specific	O	O:0.999806
group	O	O:0.999754
by	O	O:0.999992
a	O	O:0.999945
groupby	B-API	B-API:0.999346
object	O	O:0.999483
?	O	O:0.999767
	
bcz	O	O:0.999055
I	O	O:0.999988
thought	O	O:0.999882
maybe	O	O:0.999918
instead	O	O:0.999985
of	O	O:0.999995
setting	O	O:0.999806
the	O	O:0.999994
files	O	O:0.999455
as	O	O:0.999985
indexed	O	O:0.999662
,	O	O:0.999998
grouping	O	O:0.999946
by	O	O:0.999961
a	O	O:0.999995
file	O	O:0.998468
,	O	O:0.999982
and	O	O:0.999998
the	O	O:0.999992
using	O	O:0.999767
that	O	O:0.997858
groupby	B-API	B-API:0.949883
obj	O	O:0.999715
to	O	O:0.999968
apply	O	O:0.983025
a	O	O:0.999982
changing	O	O:0.984081
function	O	O:0.999875
to	O	O:0.999996
all	O	O:0.999999
of	O	O:0.999998
its	O	O:0.999923
occurrences	O	O:0.999835
.	O	O:0.999801
	
But	O	O:0.999834
I	O	O:0.999994
didn	O	O:0.999897
t	B-API	O:0.985297
find	O	O:0.999975
a	O	O:0.999997
way	O	O:0.999930
to	O	O:0.999987
approach	O	O:0.999999
a	O	O:0.999990
specific	O	O:0.999536
group	O	O:0.997784
and	O	O:0.999992
passing	O	O:0.999334
the	O	O:0.999778
group	O	O:0.998606
name	O	O:0.999961
as	O	O:0.999964
parameter	O	O:0.999532
and	O	O:0.999987
calling	O	O:0.999862
apply	O	B-API:0.732874
on	O	O:0.999648
all	O	O:0.999941
the	O	O:0.999992
groups	O	O:0.997581
and	O	O:0.999997
then	O	O:0.999935
acting	O	O:0.999991
only	O	O:0.999953
on	O	O:0.999998
one	O	O:0.999997
of	O	O:1.000000
them	O	O:0.996967
seemed	O	O:0.999945
not	O	O:0.999952
"	O	O:0.999995
right	O	O:0.999514
"	O	O:0.999992
to	O	O:0.999966
me	O	O:0.999989
.	O	O:0.999881
	
`	O	O:0.999956
apply	O	B-API:0.965487
`	O	O:0.999982
on	O	O:0.999961
a	O	O:0.999997
series	O	O:0.999927
returns	O	O:0.999861
a	O	O:0.999995
DataFrame	B-API	O:0.987623
if	O	O:0.999991
the	O	O:0.999953
function	O	O:0.999785
wich	O	O:0.999644
is	O	O:0.999994
applied	O	O:0.999879
returns	O	O:0.999599
a	O	O:0.999974
Series	O	O:0.998672
for	O	O:0.999992
each	O	O:0.999848
element	O	O:0.999850
of	O	O:0.999992
the	O	O:0.999979
series	O	O:0.999974
,	O	O:0.999997
where	O	O:0.999985
the	O	O:0.999998
different	O	O:0.999993
elements	O	O:0.999878
of	O	O:0.999990
the	O	O:0.999986
returned	O	O:0.999842
Series	O	O:0.999906
become	O	O:0.999948
the	O	O:0.999999
values	O	O:0.999741
of	O	O:0.999989
the	O	O:0.999998
different	O	O:0.999996
columns	O	O:0.999909
of	O	O:0.999998
one	O	O:0.999973
row	O	O:0.999923
.	O	O:0.999886
	
So	O	O:0.999844
in	O	O:0.999998
this	O	O:0.999980
case	O	O:0.999989
first	O	O:0.999960
the	O	O:0.999860
`	O	O:0.999966
list	O	O:0.898396
`	O	O:0.999973
function	O	O:0.999788
converts	O	O:0.999855
the	O	O:0.999991
string	O	O:0.998352
in	O	O:0.999944
BINDATA	O	O:0.999974
to	O	O:0.999994
a	O	O:0.999999
list	O	O:0.997471
,	O	O:0.999993
which	O	O:0.999848
is	O	O:0.999997
then	O	O:0.999927
converted	O	O:0.999990
to	O	O:0.999998
a	O	O:0.999998
Series	O	O:0.995521
(	O	O:0.999992
see	O	O:0.999993
also	O	O:0.999975
the	O	O:0.999999
answer	O	O:0.999687
of	O	O:0.999949
@USER	O	O:0.999614
,	O	O:0.999993
which	O	O:0.999968
does	O	O:0.999818
actually	O	O:0.999989
the	O	O:0.999994
same	O	O:0.999508
but	O	O:0.999889
is	O	O:0.999994
written	O	O:0.999685
a	O	O:0.999993
little	O	O:0.998047
bit	O	O:0.999969
different	O	O:0.999676
)	O	O:0.999890
	
I'm	O	O:0.999835
not	O	O:0.999994
sure	O	O:0.999942
I	O	O:0.999995
follow	O	O:0.999893
exactly	O	O:0.999803
what	O	O:0.999925
aggregation	O	O:0.999509
you	O	O:0.999992
want	O	O:0.999789
,	O	O:0.999989
but	O	O:0.999986
you	O	O:0.999964
should	O	O:0.999982
be	O	O:1.000000
able	O	O:0.999994
to	O	O:0.999992
apply	O	O:0.861045
`	O	O:0.999900
groupby	B-API	B-API:0.999527
`	O	O:0.999994
however	O	O:0.999238
you	O	O:0.999996
like	O	O:0.999918
.	O	O:0.999971
	
For	O	O:0.999691
example	O	O:0.996811
:	O	O:0.999957
#CODE	O	O:0.999872
	
How	O	O:0.999873
can	O	O:0.999945
I	O	O:1.000000
apply	O	O:0.981478
formatting	O	O:0.996960
to	O	O:0.999941
the	O	O:0.999999
secondary	O	O:0.999242
Y-axis	O	O:0.999089
(	O	O:0.999990
the	O	O:0.999993
one	O	O:0.999980
that	O	O:0.999983
displays	O	O:0.999979
on	O	O:0.999997
the	O	O:0.999992
right	O	O:0.999808
)	O	O:0.999984
?	O	O:0.999954
	
Actually	O	O:0.999829
,	O	O:0.999989
you	O	O:0.999951
can't	O	O:0.999983
just	O	O:0.999982
apply	O	O:0.957310
Series	O	O:0.999359
to	O	O:0.999994
a	O	O:1.000000
set	O	O:0.994687
(	O	O:0.999986
which	O	O:0.999830
is	O	O:0.999994
annoying	O	O:0.999548
)	O	O:0.999941
`	O	O:0.999683
TypeError	O	O:0.995989
:	O	O:0.999981
Set	O	O:0.999921
value	O	O:0.999727
is	O	O:0.999979
unordered	O	O:0.998665
`	O	O:0.999963
,	O	O:0.999944
seems	O	O:0.999982
unnecessary	O	O:0.999530
restriction	O	O:0.998316
/	O	O:0.999953
not	O	O:0.999948
very	O	O:0.999846
duck	O	O:0.999634
.	O	O:0.999857
	
@USER	O	O:0.999732
exactly	O	O:0.999896
right	O	O:0.999850
;	O	O:0.999988
apply	O	B-API:0.634491
DOES	O	O:0.999467
call	O	O:0.998082
things	O	O:0.999861
twice	O	O:0.997493
(	O	O:0.999998
on	O	O:0.999993
purpose	O	O:0.999901
)	O	O:0.999997
to	O	O:0.999980
see	O	O:0.999998
if	O	O:0.999995
there	O	O:0.999942
are	O	O:0.999995
modifies	O	O:0.999283
in	O	O:0.999982
place	O	O:0.998470
(	O	O:0.999995
in	O	O:0.999983
which	O	O:0.999970
case	O	O:0.999966
slow	O	O:0.999851
path	O	O:0.999364
is	O	O:0.999992
taken	O	O:0.999316
);	O	O:0.999972
otherwise	O	O:0.999980
a	O	O:0.999995
faster	O	O:0.999420
path	O	O:0.999788
can	O	O:0.999943
be	O	O:1.000000
taken	O	O:0.999418
.	O	O:0.999841
	
How	O	O:0.999913
to	O	O:0.999984
merge	O	O:0.946689
two	O	O:0.999938
DataFrame	B-API	O:0.999210
columns	O	O:0.999764
and	O	O:0.999995
apply	O	O:0.689968
pandas.to_datetime	B-API	B-API:0.999280
to	O	O:0.999801
it	O	O:0.999997
?	O	O:0.999973
	
What	O	O:0.999402
would	O	O:0.999974
be	O	O:0.999999
a	O	O:1.000000
more	O	O:0.998709
pythonic	O	O:0.999780
way	O	O:0.999980
to	O	O:0.999985
merge	O	O:0.988489
two	O	O:0.999969
columns	O	O:0.999884
,	O	O:0.999991
and	O	O:0.999998
apply	O	O:0.923446
a	O	O:0.999491
function	O	O:0.999457
into	O	O:0.999927
the	O	O:0.999978
result	O	O:0.999205
?	O	O:0.999950
	
Just	O	O:0.999760
apply	O	O:0.667685
the	O	O:0.999683
`	O	O:0.999893
min	O	B-API:0.801646
`	O	O:0.999973
function	O	O:0.999861
along	O	O:0.999912
the	O	O:0.999848
axis=1	O	O:0.993643
.	O	O:0.999740
	
#CODE	O	O:0.998453
	
Then	O	O:0.999370
use	O	O:0.999938
`	O	O:0.999927
groupby	B-API	B-API:0.999860
`	O	O:0.999960
and	O	O:0.999077
`	O	O:0.999994
apply	O	B-API:0.998793
`	O	O:0.999314
:	O	O:0.999133
#CODE	O	O:0.999898
	
I'm	O	O:0.999931
trying	O	O:0.999903
to	O	O:0.999990
apply	O	O:0.992096
simple	O	O:0.999302
functions	O	O:0.999736
to	O	O:0.999993
groups	O	O:0.999936
in	O	O:0.999981
pandas	O	O:0.999745
.	O	O:0.999961
	
I	O	O:0.999974
have	O	O:0.999978
this	O	O:0.999940
dataframe	B-API	O:0.999464
which	O	O:0.999970
I	O	O:0.999995
can	O	O:0.999998
group	O	O:0.999915
by	O	O:0.999955
`	O	O:0.999985
type	O	O:0.921607
`	O	O:0.999963
:	O	O:0.999828
#CODE	O	O:0.999910
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999961
apply	O	O:0.995901
a	O	O:0.999845
function	O	O:0.999773
like	O	O:0.999730
`	O	O:0.999987
np.log2	B-API	B-API:0.991389
`	O	O:0.999999
only	O	O:0.999748
to	O	O:0.999999
the	O	O:0.999999
groups	O	O:0.998302
before	O	O:0.999891
taking	O	O:0.999794
the	O	O:0.999994
mean	O	O:0.999809
of	O	O:0.999995
each	O	O:0.999708
group	O	O:0.998863
.	O	O:0.999904
	
This	O	O:0.999476
does	O	O:0.999746
not	O	O:0.999992
work	O	O:0.999989
since	O	O:0.999972
`	O	O:0.999996
apply	O	B-API:0.881125
`	O	O:0.999756
is	O	O:0.999601
element	O	O:0.999805
wise	O	O:0.998994
and	O	O:0.999933
`	O	O:0.999992
type	O	O:0.906721
`	O	O:0.999979
(	O	O:0.999954
as	O	O:0.999999
well	O	O:0.999728
as	O	O:0.999998
potentially	O	O:0.999751
other	O	O:0.999982
columns	O	O:0.999743
in	O	O:0.999974
`	O	O:0.999997
df	O	O:0.999076
`	O	O:0.999995
in	O	O:0.999959
a	O	O:0.999999
real	O	O:0.996461
scenario	O	O:0.999714
)	O	O:0.999533
is	O	O:0.999898
not	O	O:0.999819
numeric	O	O:0.994588
:	O	O:0.999925
#CODE	O	O:0.999785
	
is	O	O:0.999983
there	O	O:0.999952
a	O	O:0.999995
way	O	O:0.999895
to	O	O:0.999986
apply	O	O:0.908190
`	O	O:0.999857
np.log2	B-API	B-API:0.997149
`	O	O:0.999999
only	O	O:0.999732
to	O	O:0.999999
the	O	O:1.000000
groups	O	O:0.999952
prior	O	O:0.999881
to	O	O:0.999998
taking	O	O:0.999980
the	O	O:0.999978
mean	O	O:0.999146
?	O	O:0.999978
	
I	O	O:0.999957
thought	O	O:0.999760
`	O	O:0.999959
transform	O	B-API:0.969913
`	O	O:0.999985
would	O	O:0.999811
be	O	O:0.999999
the	O	O:0.999988
answer	O	O:0.997168
but	O	O:0.999967
the	O	O:0.999968
problem	O	O:0.997135
is	O	O:0.999987
that	O	O:0.999762
it	O	O:0.999999
returns	O	O:0.999945
a	O	O:0.999987
dataframe	B-API	O:0.996354
that	O	O:0.999898
does	O	O:0.999971
not	O	O:0.999998
have	O	O:0.999993
the	O	O:0.999998
original	O	O:0.998898
`	O	O:0.999994
type	O	O:0.994591
`	O	O:0.999997
columns	O	O:0.996141
:	O	O:0.999987
#CODE	O	O:0.999875
	
The	O	O:0.999962
first	O	O:0.999606
proposal	O	O:0.999654
gives	O	O:0.998377
`	O	O:0.999863
(	O	O:0.999421
'	O	O:0.999986
Not	O	O:0.999985
implemented	O	O:0.999426
for	O	O:0.999989
this	O	O:0.999762
type	O	O:0.997847
'	O	O:0.999984
,	O	O:0.999994
u'occurred	O	O:0.998485
at	O	O:0.999910
index	O	O:0.999907
type	O	O:0.999072
')`	O	O:0.999937
.	O	O:0.999692
	
The	O	O:0.999890
second	O	O:0.998867
one	O	O:0.999808
works	O	O:0.999507
but	O	O:0.999971
it	O	O:0.999983
drops	O	O:0.999726
the	O	O:0.999918
`	O	O:0.999982
type	O	O:0.988891
`	O	O:0.999998
,	O	O:0.999992
so	O	O:0.999996
you	O	O:0.999946
can't	O	O:0.999990
group	O	O:0.999898
afterwards	O	O:0.999805
.	O	O:0.999819
	
`	O	O:0.999927
_get_numeric_data()	O	B-API:0.971559
`	O	O:0.999989
can't	O	O:0.999357
be	O	O:0.999999
used	O	O:0.999960
with	O	O:0.999832
groups	O	O:0.998816
I	O	O:0.999987
believe	O	O:0.999876
.	O	O:0.999490
	
So	O	O:0.999920
can't	O	O:0.999981
think	O	O:0.999982
of	O	O:0.999997
how	O	O:0.999978
to	O	O:0.999995
use	O	O:0.999999
the	O	O:0.999915
second	O	O:0.999687
one	O	O:0.999991
to	O	O:0.999993
apply	O	O:0.957281
`	O	O:0.999876
np.log2	B-API	B-API:0.997504
`	O	O:0.999993
to	O	O:0.999978
numeric	O	O:0.999993
data	O	O:0.999971
only	O	O:0.999942
and	O	O:1.000000
then	O	O:0.999978
group	O	O:0.999443
or	O	O:0.999997
group	O	O:0.997488
first	O	O:0.999829
and	O	O:0.999997
then	O	O:0.999884
apply	O	O:0.947019
only	O	O:0.999855
to	O	O:0.999983
groups	O	O:0.999938
	
I	O	O:0.999976
think	O	O:0.999924
you'll	O	O:0.999335
be	O	O:0.999997
able	O	O:0.999981
to	O	O:0.999978
`	O	O:0.999999
apply	O	B-API:0.953222
`	O	O:0.999994
a	O	O:0.999976
different	O	O:0.998727
function	O	O:0.999839
here	O	O:0.998781
(	O	O:0.999987
rather	O	O:0.999982
than	O	O:0.999949
sum	O	O:0.999912
)	O	O:0.999998
to	O	O:0.999983
achieve	O	O:0.999995
the	O	O:0.999995
desired	O	O:0.999098
result	O	O:0.999800
.	O	O:0.999921
	
@USER	O	O:0.999882
then	O	O:0.999890
sum	O	O:0.999962
or	O	O:0.999999
more	O	O:0.999820
complicated	O	O:0.999804
analysis	O	O:0.999955
e.g.	O	O:0.999689
via	O	O:0.999893
apply	O	B-API:0.715772
:)	O	O:0.997979
	
Thanks	O	O:0.998573
for	O	O:0.999920
helping	O	O:0.993204
.	O	O:0.999365
	
Your	O	O:0.999271
suggestion	O	O:0.998788
works	O	O:0.999977
just	O	O:0.999964
fine	O	O:0.999920
for	O	O:0.999982
the	O	O:0.999991
those	O	O:0.999640
dfs	O	O:0.999504
.	O	O:0.999898
	
I'm	O	O:0.999951
trying	O	O:0.999909
to	O	O:0.999994
modify	O	O:0.999990
your	O	O:0.999951
code	O	O:0.999688
to	O	O:0.999997
apply	O	O:0.983036
lambda	O	O:0.996822
function	O	O:0.999635
for	O	O:0.999974
each	O	O:0.999538
MAPINFO	O	O:0.999131
at	O	O:0.999995
once	O	O:0.998784
.	O	O:0.999935
	
Acctually	O	O:0.998622
,	O	O:0.999996
those	O	O:0.999945
df	O	O:0.999356
are	O	O:0.999978
huge.Best	O	O:0.990681
.	O	O:0.999844
	
Apply	O	O:0.998122
function	O	O:0.999878
to	O	O:0.999983
a	O	O:0.999999
MultiIndex	O	O:0.953502
dataframe	B-API	O:0.997812
with	O	O:0.999980
pandas	O	O:0.999609
/	O	O:0.999984
python	O	O:0.997517
	
I	O	O:0.999988
have	O	O:0.999975
the	O	O:0.999973
following	O	O:0.998793
`	O	O:0.999973
DataFrame	B-API	O:0.899167
`	O	O:0.999999
that	O	O:0.999857
I	O	O:1.000000
wish	O	O:0.999991
to	O	O:0.999964
apply	O	O:0.998705
some	O	O:0.999725
date	O	O:0.999547
range	O	O:0.999969
calculations	O	O:0.999327
to	O	O:0.999964
.	O	O:0.999992
	
I	O	O:0.999990
want	O	O:0.999992
to	O	O:0.999989
select	O	O:0.999998
rows	O	O:0.999711
in	O	O:0.999998
the	O	O:0.999998
date	O	O:0.999855
frame	O	O:0.999997
where	O	O:0.999972
the	O	O:0.999998
the	O	O:0.999986
date	O	O:0.998883
difference	O	O:0.999936
between	O	O:0.999816
samples	O	O:0.999499
for	O	O:0.999988
unique	O	O:0.758511
persons	O	O:0.989828
(	O	O:0.999993
from	O	O:0.999967
sample_date	O	O:0.999077
)	O	O:0.999969
is	O	O:0.999987
less	O	O:0.999350
than	O	O:0.999783
8	O	O:0.999918
weeks	O	O:0.999748
and	O	O:0.999997
keep	O	O:0.999924
the	O	O:0.999965
row	O	O:0.999915
with	O	O:0.999907
the	O	O:0.999997
oldest	O	O:0.999764
date	O	O:0.993180
(	O	O:0.999980
i.e.	O	O:0.999900
the	O	O:0.999984
first	O	O:0.999838
sample	O	O:0.999431
)	O	O:0.999951
.	O	O:0.999824
	
I	O	O:0.999991
normally	O	O:0.999978
use	O	O:0.999874
R	O	O:0.995964
for	O	O:0.999916
the	O	O:0.999796
procedure	O	O:0.999827
and	O	O:0.999998
generate	O	O:0.999922
a	O	O:0.999995
list	O	O:0.999399
of	O	O:0.999996
dataframes	O	O:0.999950
based	O	O:0.999903
on	O	O:0.999992
the	O	O:0.999979
name	O	O:0.999884
/	O	O:0.999959
dob	O	O:0.999703
combination	O	O:0.999790
and	O	O:0.999997
sort	O	O:0.999721
each	O	O:0.999796
dataframe	B-API	O:0.999594
by	O	O:0.999954
sample_date	O	O:0.997748
.	O	O:0.999599
	
I	O	O:0.999992
then	O	O:0.999925
would	O	O:0.999978
use	O	O:0.999994
a	O	O:0.999991
list	O	O:0.995145
apply	O	B-API:0.514206
function	O	O:0.999767
to	O	O:0.999985
determine	O	O:0.999985
if	O	O:0.999986
the	O	O:0.999994
difference	O	O:0.999953
in	O	O:0.999989
date	O	O:0.999045
between	O	O:0.999802
the	O	O:0.999979
fist	O	O:0.995411
and	O	O:0.999977
last	O	O:0.999437
index	O	O:0.999663
within	O	O:0.999716
each	O	O:0.999948
dataframe	B-API	O:0.998937
to	O	O:0.999991
return	O	O:0.999956
the	O	O:0.999957
oldest	O	O:0.999152
if	O	O:0.999972
it	O	O:0.999949
was	O	O:0.999978
less	O	O:0.999878
than	O	O:0.999904
8	O	O:0.999980
weeks	O	O:0.999946
from	O	O:0.999935
the	O	O:0.999995
most	O	O:0.999924
recent	O	O:0.999780
date	O	O:0.996100
.	O	O:0.999859
	
It	O	O:0.999957
takes	O	O:0.999154
forever	O	O:0.999446
.	O	O:0.999746
	
pandas	O	O:0.999144
groupby	B-API	B-API:0.765394
apply	O	B-API:0.694788
on	O	O:0.999902
multiple	O	O:0.999836
columns	O	O:0.999827
	
I	O	O:0.999910
am	O	O:0.999998
trying	O	O:0.999756
to	O	O:0.999993
apply	O	O:0.940167
the	O	O:0.999975
same	O	O:0.998964
function	O	O:0.999924
to	O	O:0.999999
multiple	O	O:1.000000
columns	O	O:0.999976
of	O	O:0.999999
a	O	O:0.999977
groupby	B-API	B-API:0.994441
object	O	O:0.999838
,	O	O:0.999994
such	O	O:0.999881
as	O	O:0.999917
:	O	O:0.999464
#CODE	O	O:0.999782
	
What	O	O:0.998565
is	O	O:0.999994
the	O	O:0.999961
correct	O	O:0.999841
way	O	O:0.999986
to	O	O:0.999993
apply	O	O:0.980553
the	O	O:0.999677
function	O	O:0.999479
to	O	O:0.999997
multiple	O	O:0.999999
columns	O	O:0.999982
at	O	O:0.999999
once	O	O:0.999775
?	O	O:0.999970
	
Apply	O	O:0.999742
by	O	O:0.999978
the	O	O:0.999998
columns	O	O:0.999846
of	O	O:0.999991
the	O	O:0.999961
object	O	O:0.999952
you	O	O:0.999987
want	O	O:0.999989
to	O	O:0.999970
map	O	O:0.642671
(	O	O:0.999988
df2	O	O:0.999881
);	O	O:0.999939
find	O	O:0.999894
the	O	O:0.999999
rows	O	O:0.999775
that	O	O:0.999780
are	O	O:0.999999
not	O	O:0.999988
in	O	O:0.999997
the	O	O:0.999987
set	O	O:0.997661
(	O	O:0.999966
`	O	O:0.999992
isin	B-API	B-API:0.996187
`	O	O:0.999986
is	O	O:0.999986
like	O	O:0.999988
a	O	O:0.999994
set	O	O:0.998702
operator	O	O:0.999813
)	O	O:0.999946
#CODE	O	O:0.999435
	
`	O	O:0.999959
apply	O	B-API:0.989353
`	O	O:0.999886
should	O	O:0.999236
generally	O	O:0.999967
be	O	O:0.999997
much	O	O:0.999219
faster	O	O:0.999848
than	O	O:0.999947
a	O	O:0.999972
for	O	O:0.999892
loop	O	O:0.998553
.	O	O:0.999641
	
This	O	O:0.999843
example	O	O:0.999874
you	O	O:0.999977
provided	O	O:0.998781
is	O	O:0.999978
:	O	O:0.999923
`	O	O:0.999975
(	O	O:0.999972
df	O	O:0.999876
[	O	O:0.999933
'	O	O:0.999949
A	O	O:0.999987
']	O	O:0.999898
==	O	O:0.999576
999	O	O:0.999448
)	O	O:0.999852
&	O	O:0.999194
(	O	O:0.999987
df	O	O:0.999619
[	O	O:0.999957
'	O	O:0.999978
B	O	O:0.999956
']	O	O:0.999895
==	O	O:0.999405
999	O	O:0.999616
)`	O	O:0.999721
,	O	O:0.999969
But	O	O:0.999991
if	O	O:0.999993
you	O	O:0.999998
have	O	O:0.999998
a	O	O:0.999999
branches	O	O:0.999662
with	O	O:0.999875
else	O	O:0.999710
statement	O	O:0.999993
also	O	O:0.999939
you	O	O:0.999997
should	O	O:0.999919
use	O	O:0.999988
`	O	O:0.999986
apply	O	B-API:0.985999
`	O	O:0.999960
along	O	O:0.992830
the	O	O:0.999976
asix	O	O:0.977856
.	O	O:0.999804
	
I	O	O:0.999978
added	O	O:0.999971
an	O	O:0.999967
example	O	O:0.999896
to	O	O:0.999995
the	O	O:0.999999
answer	O	O:0.999875
that	O	O:0.999666
covers	O	O:0.999964
that	O	O:0.999983
case	O	O:0.999824
(	O	O:0.999998
using	O	O:0.999813
`	O	O:0.999919
apply	O	B-API:0.990054
`)	O	O:0.999779
.	O	O:0.998336
	
In	O	O:0.999965
cases	O	O:0.999901
where	O	O:0.999984
you	O	O:0.999978
have	O	O:0.999994
multiple	O	O:0.999736
branching	O	O:0.999699
statements	O	O:0.999247
it's	O	O:0.999892
best	O	O:0.999935
to	O	O:0.999997
create	O	O:0.999996
a	O	O:0.999985
function	O	O:0.999940
that	O	O:0.999932
accepts	O	O:0.999995
a	O	O:0.999985
row	O	O:0.998674
and	O	O:0.999997
then	O	O:0.999901
apply	O	O:0.805330
it	O	O:0.999968
along	O	O:0.999467
the	O	O:0.999884
`	O	O:0.999922
axis=1	O	O:0.981216
`	O	O:0.999982
.	O	O:0.999442
	
This	O	O:0.998723
is	O	O:0.999985
usually	O	O:0.999918
much	O	O:0.999697
faster	O	O:0.999924
then	O	O:0.999559
iteration	O	O:0.999997
through	O	O:0.999982
rows	O	O:0.998845
.	O	O:0.999851
	
#CODE	O	O:0.998453
	
I	O	O:0.999984
have	O	O:0.999972
tried	O	O:0.999831
using	O	O:0.999836
`	O	O:0.999546
pd.cut	B-API	B-API:0.999888
`	O	O:0.999987
or	O	O:0.999570
`	O	O:0.999981
np.digitize	B-API	B-API:0.988888
`	O	O:0.999992
with	O	O:0.999973
different	O	O:0.999992
combinations	O	O:0.999880
of	O	O:0.999983
`	O	O:0.999969
map	O	B-API:0.983319
`	O	O:0.999990
,	O	O:0.999816
`	O	O:0.999995
apply	O	B-API:0.985308
`	O	O:0.999802
,	O	O:0.999739
but	O	O:0.999986
without	O	O:0.999476
success	O	O:0.998410
.	O	O:0.999742
	
This	O	O:0.999308
is	O	O:0.999995
a	O	O:0.999994
good	O	O:0.998991
candidate	O	O:0.999929
for	O	O:0.999965
.apply	B-API	B-API:0.986108
.	O	O:0.999113
	
You	O	O:0.999907
can	O	O:0.999948
do	O	O:1.000000
this	O	O:0.999968
in	O	O:0.999990
the	O	O:0.999995
same	O	O:0.999955
line	O	O:0.999953
where	O	O:0.999993
you	O	O:0.999989
compute	O	O:0.999964
column	O	O:0.999995
values	O	O:0.999958
by	O	O:0.999993
putting	O	O:0.999160
.apply	B-API	B-API:0.999072
(	O	O:0.999934
lambda	O	O:0.998720
x	O	O:0.999137
:	O	O:0.999956
x	O	O:0.999935
/	O	O:0.999944
np.timedelta64	O	O:0.734485
(	O	O:0.999950
1	O	O:0.999894
,	O	O:0.999979
'	O	O:0.999982
D	O	O:0.999985
'))	O	O:0.999948
at	O	O:0.999975
the	O	O:0.999988
end	O	O:0.999940
to	O	O:0.999986
apply	O	O:0.952832
the	O	O:0.999954
conversion	O	O:0.999081
at	O	O:0.999997
the	O	O:0.999995
column	O	O:0.999940
level	O	O:0.999237
.	O	O:0.999913
	
e.g.	O	O:0.998571
s3	O	O:0.999145
=(	O	O:0.999948
s1-s2	O	O:0.999588
)	O	O:0.999943
.apply	B-API	B-API:0.997334
(	O	O:0.999939
lambda	O	O:0.998615
x	O	O:0.999062
:	O	O:0.999956
x	O	O:0.999935
/	O	O:0.999944
np.timedelta64	O	O:0.734485
(	O	O:0.999950
1	O	O:0.999894
,	O	O:0.999973
'	O	O:0.999969
D	O	O:0.999907
'))	O	O:0.999789
.	O	O:0.999542
	
I	O	O:0.999983
understand	O	O:0.999820
now	O	O:0.999653
the	O	O:0.999984
source	O	O:0.999127
for	O	O:0.999996
most	O	O:0.999792
of	O	O:0.999993
my	O	O:0.999956
problems	O	O:0.999924
using	O	O:0.999684
groupby	B-API	B-API:0.998702
.	O	O:0.998558
	
To	O	O:0.999989
my	O	O:0.999992
taste	O	O:0.999885
,	O	O:0.999995
the	O	O:0.999936
groupby	B-API	B-API:0.988708
mechanism	O	O:0.998948
is	O	O:0.999952
logically	O	O:0.999821
too	O	O:0.999945
ambiguous	O	O:0.999493
and	O	O:0.999987
the	O	O:0.999955
design	O	O:0.998525
encourages	O	O:0.999789
the	O	O:0.999991
user	O	O:0.999728
to	O	O:0.999941
use	O	O:0.999997
it	O	O:0.999908
in	O	O:0.999984
the	O	O:0.999991
wrong	O	O:0.999383
why	O	O:0.999869
.	O	O:0.999908
	
The	O	O:0.999942
way	O	O:0.999919
I	O	O:0.999963
saw	O	O:0.999989
this	O	O:0.999511
,	O	O:0.999998
the	O	O:0.999996
whole	O	O:0.999486
idea	O	O:0.999960
behinds	O	O:0.999976
data	O	O:0.999966
analysis	O	O:0.999939
with	O	O:0.999975
pandas	O	O:0.999024
is	O	O:0.999991
to	O	O:0.999940
group	O	O:0.999804
and	O	O:0.999983
apply	O	B-API:0.778472
.	O	O:0.997025
	
I	O	O:0.999892
thought	O	O:0.999933
grouping	O	O:0.994750
is	O	O:0.999934
the	O	O:0.999980
most	O	O:0.999761
expensive	O	O:0.999925
task	O	O:0.999838
,	O	O:0.999999
so	O	O:0.999993
I	O	O:0.999987
imagined	O	O:0.999947
the	O	O:0.999974
proper	O	O:0.998983
use	O	O:0.999845
would	O	O:0.999834
be	O	O:0.999994
to	O	O:0.999999
group	O	O:0.999967
only	O	O:0.999985
once	O	O:0.999853
,	O	O:0.999996
and	O	O:0.999999
then	O	O:0.999800
do	O	O:0.999995
what	O	O:0.999994
ever	O	O:0.999938
you	O	O:0.999998
want	O	O:0.999964
with	O	O:0.999976
the	O	O:0.999991
groups	O	O:0.999625
.	O	O:0.999978
as	O	O:1.000000
long	O	O:0.999887
as	O	O:0.999988
the	O	O:0.999972
group	O	O:0.998868
members	O	O:0.999900
dont	O	O:0.999917
change	O	O:0.999867
,	O	O:0.999995
you	O	O:0.999904
shouldn't	O	O:0.999952
regroup	O	O:0.999711
a	O	O:0.999994
dataframe	B-API	O:0.980731
.	O	O:0.999868
	
This	O	O:0.999803
idea	O	O:0.998722
is	O	O:0.999996
also	O	O:0.999882
implied	O	O:0.999978
from	O	O:0.999795
the	O	O:0.999942
design	O	O:0.999927
,	O	O:0.999997
as	O	O:0.999998
you	O	O:0.999927
can	O	O:0.999997
save	O	O:0.999996
a	O	O:0.999991
groupby	B-API	B-API:0.995925
object	O	O:0.999819
,	O	O:0.999965
which	O	O:0.999959
for	O	O:0.999981
me	O	O:0.999901
implies	O	O:0.999739
that	O	O:0.999906
the	O	O:0.999995
author	O	O:0.999922
of	O	O:0.999980
pandas	O	O:0.999799
wanted	O	O:0.999993
as	O	O:0.999991
to	O	O:0.999996
create	O	O:0.999992
a	O	O:0.999990
groupby	B-API	B-API:0.994522
object	O	O:0.999980
only	O	O:0.999885
once	O	O:0.999810
.	O	O:0.999946
	
If	O	O:0.999954
Im	O	O:0.999990
right	O	O:0.999889
,	O	O:0.999999
the	O	O:0.999977
linkage	O	O:0.975438
between	O	O:0.999855
a	O	O:0.999985
groupby	B-API	B-API:0.986617
element	O	O:0.999845
to	O	O:0.999978
a	O	O:1.000000
dataframe	B-API	O:0.976418
is	O	O:0.999991
quite	O	O:0.999889
weak	O	O:0.999556
,	O	O:0.999963
and	O	O:0.999999
the	O	O:0.999992
results	O	O:0.999557
of	O	O:0.999972
several	O	O:0.999854
dataframe	B-API	O:0.999178
modifications	O	O:0.999271
and	O	O:0.999989
groupby	B-API	B-API:0.957239
operations	O	O:0.998639
cannot	O	O:0.999649
be	O	O:0.999998
fully	O	O:0.999871
anticipated	O	O:0.998638
.	O	O:0.999473
	
So	O	O:0.999981
what	O	O:0.999571
is	O	O:0.999997
the	O	O:0.999954
solution	O	O:0.999109
?	O	O:0.999940
	
running	O	O:0.997922
groupby	B-API	B-API:0.993111
for	O	O:0.999946
each	O	O:0.989941
and	O	O:0.999993
every	O	O:0.999944
apply	O	B-API:0.783077
operation	O	O:0.997499
?	O	O:0.999972
that	O	O:0.999947
seems	O	O:0.999983
redundant	O	O:0.999666
..	O	O:0.999708
	
You	O	O:0.999966
just	O	O:0.999966
need	O	O:0.999981
to	O	O:0.999991
return	O	O:0.999983
the	O	O:0.999988
frame	O	O:0.999979
in	O	O:0.999999
your	O	O:0.999447
function	O	O:0.999862
.	O	O:0.999933
	
Apply	O	O:0.999329
takes	O	O:0.999662
the	O	O:0.999990
output	O	O:0.999784
of	O	O:0.999989
the	O	O:0.999647
function	O	O:0.999874
and	O	O:0.999986
creates	O	O:0.999920
a	O	O:0.999985
new	O	O:0.999640
frame	O	O:0.999967
(	O	O:0.999990
of	O	O:0.999995
the	O	O:0.999990
applied	O	O:0.999987
data	O	O:0.999883
);	O	O:0.999929
if	O	O:0.999984
you	O	O:0.999992
return	O	O:0.995536
`	O	O:0.999987
None	O	O:0.998448
`	O	O:0.999992
in	O	O:0.999989
your	O	O:0.999786
function	O	O:0.999979
then	O	O:0.999890
it	O	O:0.999999
uses	O	O:0.999863
the	O	O:0.999976
original	O	O:0.983470
(	O	O:0.999959
and	O	O:0.999996
if	O	O:0.999990
you	O	O:0.999844
don't	O	O:0.999975
return	O	O:0.999945
a	O	O:0.999995
value	O	O:0.999848
,	O	O:0.999999
then	O	O:0.999929
you	O	O:0.999999
are	O	O:0.999997
implicity	O	O:0.999963
returning	O	O:0.995298
`	O	O:0.999950
None	O	O:0.997876
`)	O	O:0.999975
#CODE	O	O:0.998704
	
Sorry	O	O:0.998462
,	O	O:0.999971
didn't	O	O:0.999554
get	O	O:0.999939
it	O	O:0.999993
completely	O	O:0.999885
..	O	O:0.999989
what	O	O:0.999858
do	O	O:0.999978
you	O	O:0.999999
mean	O	O:0.999978
by	O	O:0.999987
"	O	O:0.999993
if	O	O:0.999932
you	O	O:0.999983
return	O	O:0.999703
NONE	O	O:0.999671
n	O	O:0.999992
your	O	O:0.999521
function	O	O:0.999978
then	O	O:0.999908
it	O	O:0.999999
uses	O	O:0.999918
the	O	O:0.999994
original	O	O:0.998527
"	O	O:0.999988
you	O	O:0.999982
mean	O	O:0.999979
that	O	O:0.999977
the	O	O:0.999997
underlying	O	O:0.999775
dataframe	B-API	O:0.973470
is	O	O:0.999978
determined	O	O:0.999894
according	O	O:0.999693
to	O	O:0.999979
my	O	O:0.999998
apply	O	B-API:0.767956
function	O	O:0.999942
returning	O	O:0.997128
or	O	O:0.999950
not	O	O:0.999990
returning	O	O:0.999987
a	O	O:0.999977
value	O	O:0.999520
?	O	O:0.999938
	
Im	O	O:0.999963
still	O	O:0.999860
confused	O	O:0.999908
about	O	O:0.999952
what	O	O:0.999934
going	O	O:0.999792
on	O	O:0.999988
under	O	O:0.999930
the	O	O:0.999990
hood	O	O:0.999500
here	O	O:0.999289
.	O	O:0.999909
	
I	O	O:0.999937
thought	O	O:0.999934
that	O	O:0.999920
a	O	O:0.999987
groupby	B-API	B-API:0.990203
object	O	O:0.999723
simply	O	O:0.999585
holds	O	O:0.999412
the	O	O:0.999986
index	O	O:0.999899
of	O	O:0.999983
all	O	O:0.999981
gruop	O	O:0.998940
and	O	O:0.999992
their	O	O:0.999806
members	O	O:0.993150
.	O	O:0.999667
but	O	O:0.999994
this	O	O:0.999762
is	O	O:0.999975
clearly	O	O:0.999178
not	O	O:0.999971
so	O	O:0.999949
.	O	O:0.999920
	
So	O	O:0.999973
what	O	O:0.999842
,	O	O:0.999986
groupby	B-API	B-API:0.987682
object	O	O:0.999853
holds	O	O:0.999885
a	O	O:1.000000
copy	O	O:0.980385
of	O	O:0.999996
the	O	O:0.999864
original	O	O:0.999791
dataframe	B-API	O:0.997390
?	O	O:0.999948
	
Please	O	O:0.999354
elaborate	O	O:0.999831
more	O	O:0.999545
and	O	O:0.999991
be	O	O:0.999998
more	O	O:0.999263
clear	O	O:0.998833
..	O	O:0.999677
	
also	O	O:0.999370
,	O	O:0.999999
this	O	O:0.999550
implies	O	O:0.999875
regrouping	O	O:0.999576
the	O	O:0.999954
dataframe	B-API	O:0.996156
for	O	O:0.999991
each	O	O:0.999822
apply	O	O:0.506878
operation	O	O:0.999355
,	O	O:0.999970
which	O	O:0.999940
can	O	O:0.999963
be	O	O:1.000000
expensive	O	O:0.999899
and	O	O:0.999974
redundent	O	O:0.998152
(	O	O:0.999941
see	O	O:0.999986
my	O	O:0.999959
edits	O	O:0.999902
..	O	O:0.999914
)	O	O:0.999944
	
Maybe	O	O:0.999919
you	O	O:0.999972
can	O	O:0.999993
explain	O	O:0.999984
in	O	O:0.999999
a	O	O:0.999997
simple	O	O:0.999265
example	O	O:0.999919
what	O	O:0.999991
your	O	O:0.999957
problem	O	O:0.998188
is	O	O:0.999971
.	O	O:0.999732
	
Optimizing	O	O:0.995339
is	O	O:0.999943
often	O	O:0.997716
the	O	O:0.999997
last	O	O:0.998988
step	O	O:0.999792
.	O	O:0.999936
	
Make	O	O:0.999924
sure	O	O:0.999879
you	O	O:0.999985
have	O	O:0.999964
correctness	O	O:0.999974
first	O	O:0.999875
.	O	O:0.999884
	
Profile	O	O:0.999490
,	O	O:0.999982
THEN	O	O:0.999719
optimize	O	O:0.999645
if	O	O:0.999973
needed	O	O:0.999870
.	O	O:0.999915
	
Groupby	B-API	O:0.543296
is	O	O:0.999992
a	O	O:0.999991
cheap	O	O:0.998690
operation	O	O:0.999830
;	O	O:0.999991
the	O	O:0.999985
apply	O	B-API:0.525157
can	O	O:0.999517
be	O	O:0.999999
more	O	O:0.999955
expensive	O	O:0.998704
.	O	O:0.999871
	
But	O	O:0.999929
unless	O	O:0.999924
you	O	O:0.999981
have	O	O:0.999989
LOTS	O	O:0.999987
of	O	O:0.999989
groups	O	O:0.999665
this	O	O:0.999921
shouldn't	O	O:0.999891
matter	O	O:0.999779
.	O	O:0.999954
	
why	O	O:0.999891
don't	O	O:0.999868
you	O	O:0.999998
group	O	O:0.999816
by	O	O:0.999997
both	O	O:0.999967
columns	O	O:0.999947
then	O	O:0.999751
?	O	O:0.999998
	
If	O	O:0.999995
your	O	O:0.999938
process	O	O:0.994863
is	O	O:0.999997
iterative	O	O:0.999866
then	O	O:0.999862
just	O	O:0.999833
groupby	B-API	B-API:0.991774
(	O	O:0.999881
and	O	O:0.999992
apply	O	B-API:0.640772
after	O	O:0.999343
each	O	O:0.997318
iteration	O	O:0.999480
)	O	O:0.999963
	
I	O	O:0.999841
was	O	O:0.999987
writing	O	O:0.999246
up	O	O:0.999947
a	O	O:0.999989
version	O	O:0.999716
using	O	O:0.999630
`	O	O:0.999817
groupby	B-API	B-API:0.999944
`	O	O:0.999948
and	O	O:0.998991
`	O	O:0.999993
apply	O	B-API:0.996044
`	O	O:0.999672
,	O	O:0.999176
but	O	O:0.999991
this	O	O:0.999562
works	O	O:0.999907
too	O	O:0.999794
.	O	O:0.999886
	
:	O	O:0.999867
^	O	O:0.999974
)	O	O:0.999970
	
You	O	O:0.999841
should	O	O:0.999933
apply	O	O:0.986125
your	O	O:0.998647
function	O	O:0.999801
along	O	O:0.999907
the	O	O:0.999861
axis=1	O	O:0.994720
.	O	O:0.999740
	
Function	O	O:0.999343
will	O	O:0.999853
receive	O	O:0.999970
a	O	O:0.999996
row	O	O:0.999938
as	O	O:0.999992
an	O	O:0.999936
argument	O	O:0.999798
,	O	O:0.999891
and	O	O:0.999995
anything	O	O:0.999883
it	O	O:0.999885
returns	O	O:0.999781
will	O	O:0.999899
be	O	O:0.999994
collected	O	O:0.999981
into	O	O:0.999892
a	O	O:0.999992
new	O	O:0.997936
series	O	O:0.999325
object	O	O:0.999613
#CODE	O	O:0.999707
	
As	O	O:0.999919
for	O	O:0.999986
the	O	O:0.999971
second	O	O:0.999840
part	O	O:0.999899
of	O	O:0.999996
the	O	O:0.999948
question	O	O:0.999612
:	O	O:0.999979
row	O	O:0.999991
wise	O	O:0.999934
operations	O	O:0.999933
,	O	O:0.999998
even	O	O:0.999938
optimised	O	O:0.999990
ones	O	O:0.999887
,	O	O:0.999998
using	O	O:0.999990
pandas	O	O:0.997873
`	O	O:0.999976
apply	O	B-API:0.986531
`	O	O:0.999919
,	O	O:0.999615
are	O	O:0.999990
not	O	O:0.999979
the	O	O:0.999996
fastest	O	O:0.999193
solution	O	O:0.999894
there	O	O:0.999593
is	O	O:0.999971
.	O	O:0.999779
	
They	O	O:0.999634
are	O	O:0.999994
certainly	O	O:0.999953
a	O	O:0.999996
lot	O	O:0.998937
faster	O	O:0.999880
than	O	O:0.999896
a	O	O:0.999994
python	O	O:0.998861
for	O	O:0.999982
loop	O	O:0.998163
,	O	O:0.999830
but	O	O:0.999945
not	O	O:0.999970
the	O	O:0.999991
fastest	O	O:0.998447
.	O	O:0.999801
	
You	O	O:0.999826
can	O	O:0.999976
test	O	O:0.999990
that	O	O:0.999989
by	O	O:0.999997
timing	O	O:0.999877
operations	O	O:0.998643
and	O	O:0.999984
you'll	O	O:0.999816
see	O	O:0.999853
the	O	O:0.999981
difference	O	O:0.999267
.	O	O:0.999791
	
Some	O	O:0.999774
operation	O	O:0.999799
could	O	O:0.999967
be	O	O:0.999999
converted	O	O:0.999930
to	O	O:0.999987
column	O	O:0.999997
oriented	O	O:0.999944
ones	O	O:0.998854
(	O	O:0.999998
one	O	O:0.999994
in	O	O:0.999991
my	O	O:0.999991
example	O	O:0.999907
could	O	O:0.999961
be	O	O:0.999999
easily	O	O:0.999987
converted	O	O:0.999242
to	O	O:0.999995
just	O	O:0.999990
`	O	O:0.999998
df	O	O:0.998694
[	O	O:0.999990
'	O	O:0.999996
a	O	O:0.999991
']	O	O:0.999804
+	O	O:0.999909
df	O	O:0.999063
[	O	O:0.999908
'	O	O:0.999969
b	O	O:0.999966
']`)	O	O:0.999193
,	O	O:0.999909
but	O	O:0.999945
others	O	O:0.999686
cannot	O	O:0.999817
.	O	O:0.999989
	
Especially	O	O:0.999783
if	O	O:0.999988
you	O	O:0.999996
have	O	O:0.999992
a	O	O:0.999999
lot	O	O:0.999912
of	O	O:0.999988
branching	O	O:0.998606
,	O	O:0.999996
special	O	O:0.999760
cases	O	O:0.999567
or	O	O:0.999993
other	O	O:0.999746
logic	O	O:0.999959
that	O	O:0.999792
should	O	O:0.999990
be	O	O:0.999999
perform	O	O:0.999777
on	O	O:0.999997
your	O	O:0.999861
row	O	O:0.999846
.	O	O:0.999930
	
In	O	O:0.999974
that	O	O:0.999977
case	O	O:0.999993
,	O	O:0.999998
if	O	O:0.999989
the	O	O:0.999978
`	O	O:0.999977
apply	O	B-API:0.974917
`	O	O:0.999805
is	O	O:0.999867
too	O	O:0.999966
slow	O	O:0.999767
for	O	O:0.999969
you	O	O:0.999950
,	O	O:0.999994
I	O	O:0.999992
would	O	O:0.999981
suggest	O	O:0.999247
"	O	O:0.999999
Cython-izing	O	O:0.995740
"	O	O:0.999996
your	O	O:0.999616
code	O	O:0.998726
.	O	O:0.999959
	
Cython	O	O:0.999360
plays	O	O:0.999933
really	O	O:0.999881
nicely	O	O:0.999872
with	O	O:0.999922
the	O	O:0.999981
NumPy	O	O:0.999574
C	O	O:0.998046
api	O	O:0.999840
and	O	O:0.999976
will	O	O:0.999962
give	O	O:0.999740
you	O	O:0.999989
the	O	O:0.999997
maximal	O	O:0.999857
speed	O	O:0.999716
you	O	O:0.999983
can	O	O:0.999979
achieve	O	O:0.999987
.	O	O:0.999957
	
@USER	O	O:0.999469
I	O	O:0.999949
saw	O	O:0.999981
that	O	O:0.999666
you	O	O:0.999996
rarely	O	O:0.999949
use	O	O:0.999964
apply	O	B-API:0.742989
along	O	O:0.987487
`	O	O:0.999742
axis=1	O	O:0.961355
`	O	O:0.999973
.	O	O:0.999236
	
Is	O	O:0.999973
there	O	O:0.999972
any	O	O:0.999985
specific	O	O:0.999845
performance	O	O:0.999287
reason	O	O:0.999547
?	O	O:0.999974
	
Shouldn't	O	O:0.999942
that	O	O:0.999946
be	O	O:0.999999
the	O	O:0.999996
fastest	O	O:0.998847
way	O	O:0.999950
to	O	O:0.999994
itterate	O	O:0.999996
over	O	O:0.999866
the	O	O:0.999991
array	O	O:0.999938
row	O	O:0.999914
wise	O	O:0.999473
?	O	O:0.999968
	
Well	O	O:0.999692
,	O	O:0.999990
I	O	O:0.999991
thought	O	O:0.999885
about	O	O:0.999960
something	O	O:0.999870
similar	O	O:0.999651
to	O	O:1.000000
your	O	O:0.999992
solution	O	O:0.999860
,	O	O:0.999999
however	O	O:0.999918
I	O	O:0.999977
didn't	O	O:0.999933
pursue	O	O:0.999173
it	O	O:0.999981
further	O	O:0.999783
because	O	O:0.999959
I	O	O:0.999994
want	O	O:0.999990
to	O	O:0.999907
apply	O	O:0.985139
it	O	O:0.999922
to	O	O:0.999994
millions	O	O:1.000000
of	O	O:0.999998
rows	O	O:0.999799
,	O	O:0.999998
so	O	O:0.999994
I'm	O	O:0.999928
afraid	O	O:0.999969
this	O	O:0.999859
won't	O	O:0.999958
scale	O	O:0.999857
well	O	O:0.999852
.	O	O:0.999952
	
Wonder	O	O:0.999399
if	O	O:0.999981
there	O	O:0.999909
should	O	O:0.999969
be	O	O:0.999999
a	O	O:0.999998
native	O	O:0.993544
way	O	O:0.999933
to	O	O:0.999980
do	O	O:0.999999
apply	O	O:0.767043
across	O	O:0.999753
multiple	O	O:0.999336
dataframes	O	O:0.999632
...	O	O:0.999409
	
and	O	O:0.999953
I	O	O:0.999996
want	O	O:0.999925
to	O	O:0.999950
apply	O	O:0.994557
a	O	O:0.999901
function	O	O:0.997014
which	O	O:0.999935
uses	O	O:0.998750
the	O	O:0.999992
index	O	O:0.999868
of	O	O:0.999996
the	O	O:0.999948
row	O	O:0.999535
:	O	O:0.999939
#CODE	O	O:0.999877
	
I	O	O:0.999920
don't	O	O:0.999942
believe	O	O:0.999510
`	O	O:0.999993
apply	O	B-API:0.992426
`	O	O:0.999974
has	O	O:0.999820
access	O	O:0.999711
to	O	O:0.999925
the	O	O:0.999998
index	O	O:0.999500
;	O	O:0.999975
it	O	O:0.999993
treats	O	O:0.999993
each	O	O:0.999936
row	O	O:0.999978
as	O	O:0.999998
a	O	O:0.999985
numpy	O	O:0.997608
object	O	O:0.999200
,	O	O:0.999989
not	O	O:0.999990
a	O	O:0.999995
Series	O	O:0.999730
,	O	O:0.999998
as	O	O:0.999998
you	O	O:0.999939
can	O	O:0.999952
see	O	O:0.999989
:	O	O:0.999989
#CODE	O	O:0.999888
	
To	O	O:0.999957
get	O	O:0.999691
around	O	O:0.999959
this	O	O:0.999894
limitation	O	O:0.999921
,	O	O:0.999996
promote	O	O:0.998289
the	O	O:0.999992
indexes	O	O:0.999763
to	O	O:0.999995
columns	O	O:0.999999
,	O	O:0.999998
apply	O	O:0.980160
your	O	O:0.996767
function	O	O:0.999479
,	O	O:0.999993
and	O	O:0.999996
recreate	O	O:0.999896
a	O	O:0.999974
Series	O	O:0.999590
with	O	O:0.999918
the	O	O:0.999972
original	O	O:0.999240
index	O	O:0.999755
.	O	O:0.999900
	
#CODE	O	O:0.998453
	
In	O	O:0.999961
my	O	O:0.999968
case	O	O:0.999512
(	O	O:0.999998
a	O	O:0.999996
dataframe	B-API	O:0.994122
,	O	O:0.999995
with	O	O:0.999973
axis=1	O	O:0.999392
)	O	O:0.999993
,	O	O:0.999991
x.name()	O	O:0.994902
returns	O	O:0.999817
the	O	O:0.999997
value	O	O:0.999957
of	O	O:0.999939
the	O	O:0.999979
index	O	O:0.999989
when	O	O:0.999850
I	O	O:0.999999
apply	O	O:0.994652
a	O	O:0.997469
function	O	O:0.997896
lambda	O	O:0.999136
x	O	O:0.999360
:	O	O:0.999810
x	O	O:0.999954
...	O	O:0.999735
	
so	O	O:0.999975
when	O	O:0.999891
calling	O	O:0.999678
`	O	O:0.999996
apply	O	B-API:0.979950
`	O	O:0.999971
on	O	O:0.995725
`	O	O:0.999995
DataFrame	B-API	O:0.949809
`	O	O:0.999984
its	O	O:0.999620
index	O	O:0.999976
will	O	O:0.999868
be	O	O:0.999999
accessible	O	O:0.999978
through	O	O:0.996732
`	O	O:0.999984
name	O	O:0.999333
`	O	O:0.999998
of	O	O:0.999988
each	O	O:0.999621
series	O	O:0.999939
?	O	O:0.999953
	
I	O	O:0.999940
see	O	O:0.999994
this	O	O:0.999896
also	O	O:0.999728
is	O	O:0.999999
true	O	O:0.998142
for	O	O:0.999856
`	O	O:0.999821
DateTimeIndex	B-API	B-API:0.993527
`	O	O:0.999930
but	O	O:0.999882
it	O	O:0.999981
is	O	O:0.999997
a	O	O:0.999989
little	O	O:0.999047
weird	O	O:0.999861
to	O	O:0.999971
use	O	O:0.999999
something	O	O:0.999778
similar	O	O:0.999794
to	O	O:0.999975
`	O	O:0.999999
x.name	O	O:0.982234
==	O	O:0.999944
Time	O	O:0.989709
(	O	O:0.999951
2015-06-27	O	O:0.998606
20:08	O	O:0.995722
:	O	O:0.999981
32.097333	O	O:0.997576
+	O	O:0.999980
00:00	O	O:0.999665
)`	O	O:0.999667
	
You	O	O:0.999788
may	O	O:0.999977
find	O	O:0.999924
it	O	O:0.999996
faster	O	O:0.999936
to	O	O:0.999986
use	O	O:0.999989
`	O	O:0.999980
where	O	O:0.999275
`	O	O:0.999994
rather	O	O:0.999897
than	O	O:0.999923
`	O	O:0.999990
apply	O	B-API:0.970121
`	O	O:0.999912
here	O	O:0.966786
:	O	O:0.999982
#CODE	O	O:0.999789
	
I	O	O:0.999880
recommend	O	O:0.999919
testing	O	O:0.998057
for	O	O:0.999917
speed	O	O:0.988484
(	O	O:0.999965
as	O	O:0.999988
efficiency	O	O:0.999669
against	O	O:0.999845
apply	O	B-API:0.503311
will	O	O:0.999274
depend	O	O:0.999690
on	O	O:0.999994
the	O	O:0.999887
function	O	O:0.999878
)	O	O:0.999965
.	O	O:0.999879
	
Although	O	O:0.999849
,	O	O:0.999994
I	O	O:0.999995
find	O	O:0.999959
that	O	O:0.999829
`	O	O:0.999999
apply	O	B-API:0.935460
`	O	O:0.999944
s	O	O:0.996976
are	O	O:0.999996
more	O	O:0.999482
readable	O	O:0.999475
...	O	O:0.999388
	
Excellent	O	O:0.999454
point	O	O:0.999455
,	O	O:0.999929
did	O	O:0.999934
not	O	O:0.999992
think	O	O:0.999980
about	O	O:0.999967
that	O	O:0.999194
!	O	O:0.999928
	
There	O	O:0.999282
is	O	O:0.999987
filter	O	O:0.991890
I	O	O:0.999991
apply	O	O:0.962766
that	O	O:0.998651
filters	O	O:0.999588
out	O	O:0.999986
about	O	O:0.999976
90%	O	O:0.999936
of	O	O:0.999987
the	O	O:0.999993
data	O	O:0.999878
.	O	O:0.999907
	
(	O	O:0.999875
However	O	O:0.999983
the	O	O:0.999999
rest	O	O:0.999916
of	O	O:0.999999
the	O	O:0.999986
calculations	O	O:0.999972
have	O	O:0.999959
to	O	O:0.999998
be	O	O:1.000000
done	O	O:0.999979
over	O	O:0.999560
the	O	O:0.999869
concatenated	O	O:0.998010
DataFrame	B-API	O:0.997215
.	O	O:0.999929
)	O	O:0.999995
Thanks	O	O:0.999906
a	O	O:0.999985
lot	O	O:0.998097
!	O	O:0.999824
	
I	O	O:0.999990
guess	O	O:0.999927
I	O	O:0.999973
could	O	O:0.999977
write	O	O:0.999982
a	O	O:0.999985
function	O	O:0.999940
using	O	O:0.999576
`	O	O:0.999890
try	O	O:0.988978
`	O	O:0.999986
and	O	O:0.999996
then	O	O:0.999813
use	O	O:0.999988
pandas	O	O:0.998557
`	O	O:0.999984
apply	O	B-API:0.965164
`	O	O:0.999955
or	O	O:0.999503
`	O	O:0.999977
map	O	B-API:0.986646
`	O	O:0.999968
,	O	O:0.999877
but	O	O:0.999993
that	O	O:0.999914
seems	O	O:0.999998
like	O	O:0.999982
an	O	O:0.999995
inelegant	O	O:0.999605
solution	O	O:0.999474
.	O	O:0.999886
	
This	O	O:0.999848
must	O	O:0.999952
be	O	O:0.999999
a	O	O:0.999998
fairly	O	O:0.998232
common	O	O:0.999602
problem	O	O:0.999770
,	O	O:0.999976
right	O	O:0.999748
?	O	O:0.999959
	
In	O	O:0.999954
fact	O	O:0.999803
,	O	O:0.999996
you	O	O:0.999969
can	O	O:0.999986
apply	O	O:0.998914
this	O	O:0.999924
to	O	O:0.999992
the	O	O:0.999999
entire	O	O:0.998912
DataFrame	B-API	O:0.978567
:	O	O:0.999965
#CODE	O	O:0.999892
	
If	O	O:0.999965
you	O	O:0.999979
really	O	O:0.999933
wanted	O	O:0.999978
to	O	O:0.999970
do	O	O:1.000000
this	O	O:0.999979
you	O	O:0.999991
could	O	O:0.999984
use	O	O:0.999999
a	O	O:0.999972
groupby	B-API	B-API:0.998684
apply	O	B-API:0.930078
:	O	O:0.998299
#CODE	O	O:0.999224
	
and	O	O:0.999963
apply	O	O:0.601640
the	O	O:0.998204
function	O	O:0.999549
to	O	O:0.999985
each	O	O:0.999994
group	O	O:0.998723
,	O	O:0.999992
and	O	O:0.999998
then	O	O:0.999851
`	O	O:0.999997
unstack	O	B-API:0.984791
`	O	O:0.999995
from	O	O:0.999888
a	O	O:0.999997
Series	O	O:0.999692
to	O	O:0.999988
a	O	O:0.999999
DataFrame	B-API	O:0.838813
:	O	O:0.999960
#CODE	O	O:0.999896
	
@USER	O	O:0.998774
Not	O	O:0.999992
sure	O	O:0.999869
I	O	O:0.999996
do	O	O:0.999992
fully	O	O:0.999327
either	O	O:0.999926
,	O	O:0.999980
I	O	O:0.999998
think	O	O:0.999875
I	O	O:0.999871
should	O	O:0.999980
probably	O	O:0.999803
put	O	O:0.999926
it	O	O:0.999991
up	O	O:0.999982
as	O	O:0.999996
an	O	O:0.999972
issue	O	O:0.999903
on	O	O:0.999979
github	O	O:0.999741
to	O	O:0.999993
discuss	O	O:0.999838
/	O	O:0.999969
fix	O	O:0.999356
,	O	O:0.999984
suspect	O	O:0.999713
it	O	O:0.999897
is	O	O:0.999990
untested	O	O:0.999538
behaviour	O	O:0.999417
,	O	O:0.999939
but	O	O:0.999839
it	O	O:0.999926
seemed	O	O:0.999964
that	O	O:0.999977
you	O	O:0.999990
can	O	O:0.999999
only	O	O:0.999998
apply	O	O:0.972532
aggfunc	O	O:0.977884
to	O	O:0.999978
columns	O	O:0.999910
which	O	O:0.999943
were	O	O:0.999984
going	O	O:0.999928
to	O	O:0.999995
be	O	O:0.999998
in	O	O:0.999999
your	O	O:0.999538
pivot_table	B-API	B-API:0.994818
(	O	O:0.999980
IIRC	O	O:0.999902
the	O	O:0.999986
rest	O	O:0.997406
are	O	O:0.999986
not	O	O:0.999996
passed	O	O:0.999847
to	O	O:0.999994
the	O	O:0.999997
function	O	O:0.999911
so	O	O:0.999980
couldn't	O	O:0.999898
be	O	O:0.999998
used	O	O:0.999917
)	O	O:0.999936
,	O	O:0.999996
also	O	O:0.999913
I	O	O:0.999984
was	O	O:0.999893
seeing	O	O:0.999588
SNDArrays	O	O:0.997090
which	O	O:0.999348
was	O	O:0.999797
confusing	O	O:0.999664
...	O	O:0.999436
	
I	O	O:0.999990
need	O	O:0.999972
to	O	O:0.999973
investigate	O	O:0.999999
a	O	O:0.999984
further	O	O:0.994460
.	O	O:0.999915
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
what	O	O:0.999781
if	O	O:0.999987
you	O	O:0.999980
don't	O	O:0.999984
want	O	O:0.999985
to	O	O:0.999996
apply	O	O:0.994511
a	O	O:0.999944
rolling	O	O:0.749197
mean	O	O:0.998932
but	O	O:0.999979
an	O	O:0.999997
arbitrary	O	O:0.999591
function	O	O:0.999614
in	O	O:0.999961
rolling	O	O:0.990481
overlapped	O	O:0.998926
windows	O	O:0.998920
?	O	O:0.999895
	
Assuming	O	O:0.999776
you	O	O:0.999961
have	O	O:0.999990
indexed	O	O:0.999998
by	O	O:0.999997
datetime	O	O:0.998677
can	O	O:0.999491
use	O	O:0.999986
groupby	B-API	B-API:0.991928
apply	O	B-API:0.964325
:	O	O:0.998529
#CODE	O	O:0.999080
	
It's	O	O:0.999898
also	O	O:0.999976
present	O	O:0.999889
in	O	O:0.999975
apply	O	B-API:0.633748
though	O	O:0.993033
(	O	O:0.999919
with	O	O:0.999968
both	O	O:0.999934
our	O	O:0.999978
answers	O	O:0.999268
)	O	O:0.999963
.	O	O:0.999734
	
?	O	O:0.999776
	
(	O	O:0.999940
see	O	O:0.999968
also	O	O:0.999772
Pandas	O	O:0.999863
:	O	O:0.999927
How	O	O:0.999979
to	O	O:0.999993
use	O	O:0.999997
apply	O	B-API:0.890998
function	O	O:0.998704
to	O	O:0.999988
multiple	O	O:0.999999
columns	O	O:0.999813
)	O	O:0.999985
.	O	O:0.999903
	
This	O	O:0.999830
means	O	O:0.999962
you	O	O:0.999984
can	O	O:0.999968
invert	O	O:0.999962
np.percentile	B-API	O:0.684125
using	O	O:0.999539
map	O	B-API:0.982482
,	O	O:0.999821
and	O	O:0.999998
then	O	O:0.999865
apply	O	O:0.969638
a	O	O:0.999970
shift	O	B-API:0.984631
and	O	O:0.999997
a	O	O:0.999998
subtract	O	O:0.994660
to	O	O:0.999992
get	O	O:0.999999
the	O	O:0.999982
"	O	O:0.999992
percentage	O	O:0.999681
if	O	O:0.999989
array	O	O:0.999935
in	O	O:0.999947
interval	O	O:0.998997
"	O	O:0.999991
you're	O	O:0.999276
after	O	O:0.999756
.	O	O:0.999851
	
It	O	O:0.999939
feels	O	O:0.999884
like	O	O:0.999966
there	O	O:0.999968
ought	O	O:0.999860
to	O	O:0.999996
be	O	O:1.000000
a	O	O:0.999998
neat	O	O:0.998291
way	O	O:0.999994
using	O	O:0.999786
stack	O	B-API:0.989833
(	O	O:0.999945
essentially	O	O:0.999940
separating	O	O:0.999895
into	O	O:0.999501
away	O	O:0.999689
/	O	O:0.999957
home	O	O:0.999342
,	O	O:0.999993
enabling	O	O:0.999865
a	O	O:0.999941
groupby	B-API	B-API:0.983130
apply	O	B-API:0.653628
)	O	O:0.999047
.	O	O:0.999087
	
Create	O	O:0.999920
a	O	O:0.999958
`	O	O:0.999980
defualtdict	O	O:0.982266
`	O	O:0.999959
(	O	O:0.999954
with	O	O:0.999980
default	O	O:0.999927
value	O	O:0.999964
0	O	O:0.999937
)	O	O:0.999997
where	O	O:0.999882
you	O	O:0.999989
will	O	O:0.999995
keep	O	O:0.999954
the	O	O:0.999999
current	O	O:0.999946
scores	O	O:0.999778
of	O	O:0.999993
the	O	O:0.999991
teams	O	O:0.999618
,	O	O:0.999984
and	O	O:0.999996
apply	O	O:0.813355
along	O	O:0.996388
the	O	O:0.999508
`	O	O:0.999924
axis=1	O	O:0.993829
`	O	O:0.999999
a	O	O:0.999660
function	O	O:0.999979
that	O	O:0.999745
updates	O	O:0.999940
this	O	O:0.999927
dictionary	O	O:0.999867
and	O	O:0.999989
returns	O	O:0.999873
a	O	O:0.999986
tuple	O	O:0.999827
of	O	O:0.999963
results	O	O:0.999481
.	O	O:0.999954
	
Then	O	O:0.999907
just	O	O:0.999966
concatenate	O	O:0.976403
your	O	O:0.999745
DataFrame	B-API	O:0.983730
and	O	O:0.999998
the	O	O:0.999995
resulting	O	O:0.999274
DataFrame	B-API	O:0.998403
from	O	O:0.999921
the	O	O:0.999988
`	O	O:0.999987
apply	O	B-API:0.972935
`	O	O:0.999804
function	O	O:0.999640
along	O	O:0.999468
`	O	O:0.999943
axis=1	O	O:0.964097
`	O	O:0.999975
.	O	O:0.999236
	
#CODE	O	O:0.998453
	
stack	O	B-API:0.920918
/	O	O:0.999929
groupby	B-API	B-API:0.981522
/	O	O:0.999951
apply	O	B-API:0.945483
is	O	O:0.999584
*	O	O:0.999952
significantly	O	O:0.999453
*	O	O:0.999975
faster	O	O:0.999434
than	O	O:0.999523
this	O	O:0.999517
method	O	O:0.999932
(	O	O:0.999996
once	O	O:0.999936
there's	O	O:0.999965
more	O	O:0.999967
than	O	O:0.999934
40	O	O:0.999958
or	O	O:0.999999
so	O	O:0.999999
rows	O	O:0.999871
)	O	O:0.999971
!	O	O:0.999936
	
@USER	O	O:0.998786
how	O	O:0.999509
is	O	O:0.999975
it	O	O:0.999988
independent	O	O:0.999937
when	O	O:0.999604
in	O	O:0.999995
one	O	O:0.999997
case	O	O:0.999911
it	O	O:0.999994
takes	O	O:0.999447
32x	O	O:0.999952
more	O	O:0.999581
memory	O	O:0.999901
and	O	O:0.999968
in	O	O:0.999990
the	O	O:0.999949
other	O	O:0.999678
it	O	O:0.999976
takes	O	O:0.999909
only	O	O:0.999913
4x	O	O:0.999974
more	O	O:0.999636
memory	O	O:0.999698
?	O	O:0.999934
	
And	O	O:0.999881
the	O	O:0.999990
global	O	O:0.997181
can	O	O:0.999927
be	O	O:1.000000
passed	O	O:0.999973
as	O	O:0.999982
an	O	O:0.999949
argument	O	O:0.999946
to	O	O:0.999980
apply	O	O:0.843296
,	O	O:0.999835
but	O	O:0.999981
that	O	O:0.999096
is	O	O:0.999995
not	O	O:0.999988
the	O	O:0.999997
an	O	O:0.999955
issue	O	O:0.999361
:)	O	O:0.999788
	
You	O	O:0.999932
could	O	O:0.999895
use	O	O:0.999982
`	O	O:0.999868
pd.to_numeric	B-API	B-API:0.999956
`	O	O:0.999909
method	O	O:0.998788
and	O	O:0.999995
apply	O	O:0.794903
it	O	O:0.999334
for	O	O:0.999927
the	O	O:0.999976
dataframe	B-API	O:0.994812
with	O	O:0.999808
arg	O	O:0.999756
'	O	O:0.999981
coerce	O	O:0.990340
'	O	O:0.999955
.	O	O:0.999878
	
#CODE	O	O:0.998453
	
If	O	O:0.999995
your	O	O:0.999944
final	O	O:0.999846
game	O	O:0.999979
plan	O	O:0.998273
involves	O	O:0.999972
doing	O	O:0.999977
on	O	O:0.999958
of	O	O:0.999912
these	O	O:0.999924
...	O	O:0.999989
just	O	O:0.999565
use	O	O:0.999977
these	O	O:0.998039
.	O	O:0.999722
	
If	O	O:0.999884
it's	O	O:0.999944
something	O	O:0.999977
else	O	O:0.999840
,	O	O:0.999994
consider	O	O:0.999725
writing	O	O:0.999815
it	O	O:0.999988
as	O	O:0.999999
a	O	O:0.999982
generic	O	O:0.999092
rolling	O	O:0.985379
apply	O	B-API:0.888706
.	O	O:0.998329
	
You	O	O:0.999896
can	O	O:0.999987
simply	O	O:0.999995
use	O	O:0.999992
an	O	O:0.999808
`	O	O:0.999979
apply	O	B-API:0.974833
`	O	O:0.999970
to	O	O:0.999707
do	O	O:0.999999
this	O	O:0.999425
:	O	O:0.999966
#CODE	O	O:0.999889
	
I	O	O:0.999927
am	O	O:0.999998
trying	O	O:0.999780
to	O	O:0.999994
transform	O	O:0.991733
the	O	O:0.999996
data	O	O:0.999975
points	O	O:0.999887
in	O	O:0.999996
a	O	O:0.999998
DataFrame	B-API	O:0.996445
to	O	O:0.999996
a	O	O:1.000000
two	O	O:0.999926
dimensional	O	O:0.999801
array	O	O:0.999984
group	O	O:0.998734
by	O	O:0.999977
group	O	O:0.996843
and	O	O:0.999997
then	O	O:0.999872
transform	O	O:0.901418
the	O	O:0.999998
same	O	O:0.999991
data	O	O:0.999978
to	O	O:1.000000
a	O	O:1.000000
different	O	O:0.999567
one	O	O:0.999987
dimensional	O	O:0.999419
array	O	O:0.999845
.	O	O:0.999653
	
For	O	O:0.999945
example	O	O:0.999660
,	O	O:0.999993
the	O	O:0.999987
two	O	O:0.999951
dimensional	O	O:0.999908
array	O	O:0.999975
can	O	O:0.999950
be	O	O:0.999999
the	O	O:0.999998
independent	O	O:0.999779
variables	O	O:0.999832
of	O	O:0.999999
a	O	O:0.999996
regression	O	O:0.999516
while	O	O:0.999973
the	O	O:0.999981
one	O	O:0.999988
dimensional	O	O:0.999833
array	O	O:0.999980
can	O	O:0.999947
be	O	O:1.000000
the	O	O:0.999995
dependent	O	O:0.999011
variable	O	O:0.999722
.	O	O:0.999776
	
I	O	O:0.999969
could	O	O:0.999993
have	O	O:0.999914
written	O	O:0.999971
two	O	O:0.999982
functions	O	O:0.999926
,	O	O:0.999996
one	O	O:0.999989
for	O	O:0.999990
each	O	O:0.999475
array	O	O:0.999751
,	O	O:0.999978
and	O	O:0.999990
apply	O	O:0.989301
them	O	O:0.999078
separately	O	O:0.998951
,	O	O:0.999967
but	O	O:0.999988
that	O	O:0.999847
would	O	O:0.999991
be	O	O:0.999999
very	O	O:0.999935
slow	O	O:0.997527
.	O	O:0.999839
	
So	O	O:0.999970
traverse	O	O:0.999878
the	O	O:0.999998
data	O	O:0.999974
once	O	O:0.999882
and	O	O:0.999998
generate	O	O:0.999892
both	O	O:0.999653
arrays	O	O:0.999792
would	O	O:0.999905
be	O	O:0.999994
preferred	O	O:0.999879
.	O	O:0.999722
	
You	O	O:0.999857
don't	O	O:0.999956
need	O	O:0.999968
to	O	O:0.999995
use	O	O:0.999997
apply	O	B-API:0.628332
here	O	O:0.992510
,	O	O:0.999920
and	O	O:0.999992
unless	O	O:0.999860
you	O	O:0.999928
are	O	O:0.999999
using	O	O:0.999993
a	O	O:0.999948
cythonized	O	O:0.980570
function	O	O:0.999928
which	O	O:0.999883
can	O	O:0.999984
operate	O	O:0.999996
on	O	O:0.999999
a	O	O:0.999998
frame	O	O:0.999968
/	O	O:0.999976
series	O	O:0.999832
,	O	O:0.999984
it	O	O:0.999985
doesn't	O	O:0.999952
make	O	O:0.999953
any	O	O:0.999995
difference	O	O:0.999670
in	O	O:0.999926
perf	O	O:0.999337
.	O	O:0.999907
	
I'm	O	O:0.999902
working	O	O:0.999592
on	O	O:0.999994
replacing	O	O:0.999531
an	O	O:0.999988
Excel	O	O:0.999809
financial	O	O:0.999718
model	O	O:0.999732
into	O	O:0.998918
Python	O	O:0.999678
Pandas	O	O:0.999315
.	O	O:0.999667
	
By	O	O:0.999948
financial	O	O:0.999753
model	O	O:0.999708
I	O	O:0.999995
mean	O	O:0.999955
forecasting	O	O:0.999906
a	O	O:0.999990
cash	O	O:0.988721
flow	O	O:0.999915
,	O	O:0.999982
profit	O	O:0.996144
loss	O	O:0.997125
statement	O	O:0.999901
and	O	O:0.999989
balance	O	O:0.999865
sheet	O	O:0.999777
over	O	O:0.999907
time	O	O:0.999936
for	O	O:0.999997
a	O	O:0.999991
business	O	O:0.997147
venture	O	O:0.999877
as	O	O:0.999988
opposed	O	O:0.999860
to	O	O:0.999988
pricing	O	O:0.999960
swaps	O	O:0.999202
/	O	O:0.999988
options	O	O:0.999783
or	O	O:0.999988
working	O	O:0.999848
with	O	O:0.999970
stock	O	O:0.999898
price	O	O:0.999844
data	O	O:0.999977
that	O	O:0.999940
are	O	O:0.999999
also	O	O:0.999990
referred	O	O:0.999969
to	O	O:0.999974
as	O	O:1.000000
financial	O	O:0.999079
models	O	O:0.999050
.	O	O:0.999827
	
It's	O	O:0.999888
quite	O	O:0.999939
possible	O	O:0.999959
that	O	O:0.999942
the	O	O:0.999999
same	O	O:0.999915
concepts	O	O:0.999173
and	O	O:0.999997
issues	O	O:0.999933
apply	O	B-API:0.728150
to	O	O:0.999901
the	O	O:0.999994
latter	O	O:0.999914
types	O	O:0.999009
I	O	O:0.999997
just	O	O:0.999968
don't	O	O:0.999930
know	O	O:0.999984
them	O	O:0.999958
that	O	O:0.999985
well	O	O:0.999973
so	O	O:0.999997
can't	O	O:0.999582
comment	O	O:0.999801
.	O	O:0.999938
	
If	O	O:0.999943
not	O	O:0.999965
,	O	O:0.999998
could	O	O:0.999968
you	O	O:0.999996
suggest	O	O:0.999979
how	O	O:0.999994
to	O	O:0.999995
modify	O	O:0.999992
Pandas	O	O:0.999860
in	O	O:0.999977
order	O	O:0.999867
to	O	O:0.999990
provide	O	O:0.999982
irregular	O	O:0.999799
duration	O	O:0.999487
`	O	O:0.999958
Period	O	O:0.904924
`	O	O:0.999990
objects	O	O:0.997044
?	O	O:0.999971
	
(	O	O:0.999992
this	O	O:0.999703
comment	O	O:0.999642
suggests	O	O:0.999918
that	O	O:0.999865
it	O	O:0.999992
might	O	O:0.999988
be	O	O:0.999998
possible	O	O:0.999946
"	O	O:0.999986
using	O	O:0.999884
custom	O	O:0.992505
DateOffset	O	O:0.945314
classes	O	O:0.999674
with	O	O:0.999965
appropriately	O	O:0.999952
crafted	O	O:0.999880
onOffset	O	O:0.999169
,	O	O:0.999992
rollforward	O	O:0.988366
,	O	O:0.999978
rollback	O	O:0.991822
,	O	O:0.999978
and	O	O:0.999996
apply	O	O:0.791230
methods	O	O:0.991195
")	O	O:0.999286
	
Since	O	O:0.999532
i	O	O:0.999956
tried	O	O:0.999973
tu	O	O:0.999911
find	O	O:0.999763
the	O	O:0.999995
prediction	O	O:0.999943
values	O	O:0.999938
of	O	O:0.999998
my	O	O:0.999976
variables	O	O:0.999507
...	O	O:0.999536
	
For	O	O:0.999966
that	O	O:0.999743
,	O	O:0.999994
i'm	O	O:0.999926
developping	O	O:0.999869
this	O	O:0.999846
code	O	O:0.999486
and	O	O:0.999987
i	O	O:0.999968
tried	O	O:0.999725
to	O	O:0.999963
apply	O	O:0.943035
what	O	O:0.999206
i	O	O:0.999951
found	O	O:0.999821
in	O	O:0.999989
this	O	O:0.999884
link	O	O:0.999778
#URL	O	O:0.999439
	
The	O	O:0.999834
`	O	O:0.999978
apply	O	B-API:0.997506
`	O	O:0.999863
method	O	O:0.999533
applies	O	O:0.999977
a	O	O:0.999966
function	O	O:0.999503
to	O	O:0.999999
each	O	O:0.999995
of	O	O:0.999993
the	O	O:0.999997
aforementioned	O	O:0.999968
subsets	O	O:0.998467
and	O	O:0.999972
concatenates	O	O:0.999975
the	O	O:0.999892
result	O	O:0.998603
(	O	O:0.999979
if	O	O:0.999996
needed	O	O:0.999927
)	O	O:0.999977
.	O	O:0.999837
	
One	O	O:0.999955
thing	O	O:0.999787
to	O	O:0.999992
note	O	O:0.999931
is	O	O:0.999998
my	O	O:0.999982
use	O	O:0.999976
of	O	O:0.999474
`	O	O:0.999946
g.name	O	O:0.979691
`	O	O:0.999974
.	O	O:0.999502
	
This	O	O:0.999468
doesn't	O	O:0.999926
normally	O	O:0.999991
exist	O	O:0.999990
as	O	O:0.999997
an	O	O:0.999976
attribute	O	O:0.999979
on	O	O:0.999819
`	O	O:0.999987
DataFrame	B-API	O:0.971380
`	O	O:0.999991
s	O	O:0.997601
(	O	O:0.999997
you	O	O:0.999990
can	O	O:0.999992
of	O	O:1.000000
course	O	O:0.999968
define	O	O:0.999972
it	O	O:0.999984
yourself	O	O:0.999940
if	O	O:0.999993
you	O	O:0.999997
want	O	O:0.999975
to	O	O:0.999990
)	O	O:0.999999
,	O	O:0.999973
but	O	O:0.999880
is	O	O:0.999996
there	O	O:0.999947
so	O	O:0.999997
you	O	O:0.999988
can	O	O:0.999997
perform	O	O:0.999978
computations	O	O:0.999975
that	O	O:0.999979
may	O	O:0.999997
require	O	O:0.999930
the	O	O:0.999986
group	O	O:0.994228
name	O	O:0.999828
.	O	O:0.999846
	
In	O	O:0.999988
this	O	O:0.999954
case	O	O:0.999969
that's	O	O:0.999984
the	O	O:0.999983
"	O	O:0.999992
current	O	O:0.998342
"	O	O:0.999983
fruit	O	O:0.996854
you're	O	O:0.999961
looking	O	O:0.999777
at	O	O:0.999998
when	O	O:0.999831
you	O	O:0.999992
apply	O	O:0.995566
your	O	O:0.996519
function	O	O:0.999036
.	O	O:0.999942
	
When	O	O:0.999739
I	O	O:0.999997
apply	O	O:0.921638
the	O	O:0.999361
below	O	O:0.998058
code	O	O:0.999925
pandas	O	O:0.999209
is	O	O:0.999996
considering	O	O:0.998651
NaN	O	O:0.997087
as	O	O:0.999869
Zero	O	O:0.998417
and	O	O:0.999992
returing	O	O:0.999688
the	O	O:0.999964
sum	O	O:0.999734
of	O	O:0.999997
remaining	O	O:0.999595
days	O	O:0.999547
.	O	O:0.999837
	
#CODE	O	O:0.998453
	
You	O	O:0.999766
are	O	O:0.999986
looking	O	O:0.999770
for	O	O:0.999928
apply	O	B-API:0.921455
.	O	O:0.997203
	
Your	O	O:0.999766
example	O	O:0.999131
would	O	O:0.999959
look	O	O:0.999963
like	O	O:0.999983
this	O	O:0.999542
:	O	O:0.999976
#CODE	O	O:0.999814
	
Apply	O	O:0.997425
function	O	O:0.999893
to	O	O:0.999966
values	O	O:0.999801
and	O	O:0.999994
index	O	O:0.999990
of	O	O:0.999931
series	O	O:0.999721
	
I	O	O:0.999985
like	O	O:0.999950
the	O	O:0.999947
idea	O	O:0.998788
and	O	O:0.999940
is	O	O:0.999994
along	O	O:0.999204
the	O	O:0.999987
lines	O	O:0.997396
of	O	O:0.999994
what	O	O:0.999885
I	O	O:0.999989
was	O	O:0.999993
thinking	O	O:0.998857
about	O	O:0.999513
.	O	O:0.999545
	
The	O	O:0.999944
trouble	O	O:0.999134
is	O	O:0.999975
I	O	O:0.999962
can't	O	O:0.999969
make	O	O:0.999643
it	O	O:0.999997
work	O	O:0.999929
,	O	O:0.999999
if	O	O:0.999996
I	O	O:0.999995
apply	O	O:0.989248
your	O	O:0.998771
exact	O	O:0.999593
code	O	O:0.999482
(	O	O:0.999998
plus	O	O:0.999980
my	O	O:0.999993
def	O	O:0.999971
of	O	O:0.999995
dates	O	O:0.997263
)	O	O:0.999997
I	O	O:0.999995
get	O	O:0.999991
a	O	O:0.999932
Type	O	O:0.997615
Error	O	O:0.999282
:	O	O:0.999773
`	O	O:0.999940
TypeError	O	O:0.997938
:	O	O:0.999917
(	O	O:0.999917
"	O	O:0.999978
unsupported	O	O:0.998693
operand	O	O:0.999697
type	O	O:0.989952
(	O	O:0.999987
s	O	O:0.999932
)	O	O:0.999981
for	O	O:0.999844
/:	O	O:0.999625
'	O	O:0.999789
buffer	O	O:0.999636
'	O	O:0.999908
and	O	O:0.999903
'	O	O:0.999968
int	O	O:0.997752
'"	O	O:0.999920
,	O	O:0.999945
u'occurred	O	O:0.997763
at	O	O:0.999928
index	O	O:0.999843
2012-04-01	O	O:0.996966
00:00	O	O:0.999389
:	O	O:0.999892
00	O	O:0.999916
')`	O	O:0.999876
	
And	O	O:0.999929
you	O	O:0.999895
/	O	O:0.999985
are	O	O:0.999991
working	O	O:0.999887
on	O	O:0.999997
a	O	O:0.999967
`	O	O:0.999974
DataFrame	B-API	O:0.869685
`	O	O:0.999977
object	O	O:0.999921
inside	O	O:0.999956
of	O	O:0.999975
`	O	O:0.999944
apply	O	B-API:0.980497
`	O	O:0.999838
indeed	O	O:0.984689
.	O	O:0.999956
	
Actually	O	O:0.999760
inside	O	O:0.999601
`	O	O:0.999987
apply	O	B-API:0.971514
`	O	O:0.999960
we	O	O:0.999950
seem	O	O:0.999971
to	O	O:0.999996
be	O	O:0.999999
working	O	O:0.999907
with	O	O:0.999967
a	O	O:0.999969
`	O	O:0.999945
Series	O	O:0.992129
`	O	O:0.999990
object	O	O:0.999533
,	O	O:0.999996
the	O	O:0.999996
name	O	O:0.999963
of	O	O:0.999986
which	O	O:0.999720
is	O	O:0.999989
the	O	O:0.999990
index	O	O:0.999923
of	O	O:0.999990
the	O	O:0.999916
`	O	O:0.999993
DataFrame	B-API	O:0.828739
`	O	O:0.999979
we're	O	O:0.999786
iterating	O	O:0.999794
through	O	O:0.997622
.	O	O:0.999586
	
This	O	O:0.998934
is	O	O:0.999985
why	O	O:0.999991
your	O	O:0.999943
name	O	O:0.999832
suggestion	O	O:0.999905
works	O	O:0.999957
for	O	O:0.999992
accessing	O	O:0.999681
the	O	O:0.999968
value	O	O:0.999875
of	O	O:0.999907
the	O	O:0.999950
index	O	O:0.999854
.	O	O:0.999844
	
It	O	O:0.999936
seems	O	O:0.999844
`	O	O:0.999994
apply	O	B-API:0.984699
`	O	O:0.999966
collapses	O	O:0.999277
a	O	O:0.999996
"	O	O:0.999946
dimension	O	O:0.999850
"	O	O:0.999992
of	O	O:0.999945
the	O	O:0.999940
initiating	O	O:0.999269
object	O	O:0.999551
so	O	O:0.999996
this	O	O:0.999774
is	O	O:0.999994
why	O	O:0.999974
working	O	O:0.999831
on	O	O:0.999997
a	O	O:0.999975
`	O	O:0.999969
TimeSeries	O	O:0.999178
`	O	O:0.999998
directly	O	O:0.999832
only	O	O:0.999988
left	O	O:0.999733
me	O	O:0.999968
with	O	O:0.999976
a	O	O:0.999989
value	O	O:0.999067
object	O	O:0.999606
and	O	O:0.999994
no	O	O:0.999991
way	O	O:0.999951
to	O	O:0.999990
access	O	O:0.999987
the	O	O:0.999998
value	O	O:0.999941
of	O	O:0.999942
the	O	O:0.999950
index	O	O:0.999854
.	O	O:0.999844
	
Not	O	O:0.999992
a	O	O:0.999994
perfect	O	O:0.998463
solution	O	O:0.999888
then	O	O:0.999813
but	O	O:0.999998
def	O	O:0.999866
better	O	O:0.999897
than	O	O:0.999929
where	O	O:0.999882
I	O	O:0.999950
was	O	O:0.999933
.	O	O:0.999424
	
Thanks	O	O:0.999752
again	O	O:0.999853
for	O	O:0.999986
all	O	O:0.999936
the	O	O:0.999952
help	O	O:0.992989
.	O	O:0.999888
	
That	O	O:0.999422
doesn't	O	O:0.999787
work	O	O:0.998410
(	O	O:0.999991
although	O	O:0.999907
it	O	O:0.999968
looks	O	O:0.999968
like	O	O:0.999897
it	O	O:0.999975
should	O	O:0.999901
!	O	O:0.999981
)	O	O:0.999968
.	O	O:0.999797
	
When	O	O:0.999671
I	O	O:0.999997
apply	O	O:0.994073
your	O	O:0.998118
solution	O	O:0.999404
I	O	O:0.999998
get	O	O:0.999976
`	O	O:0.999979
s	O	O:0.999017
`	O	O:0.999998
where	O	O:0.997012
`	O	O:0.999995
s.index.month	O	O:0.995223
%	O	O:0.999975
3	O	O:0.999799
==	O	O:0.999853
1	O	O:0.999664
`	O	O:0.999953
and	O	O:0.999789
`	O	O:0.999996
s	O	O:0.997464
/	O	O:0.999981
4	O	O:0.999583
`	O	O:0.999992
where	O	O:0.997290
`	O	O:0.999996
s.index.month	O	O:0.995478
%	O	O:0.999972
3	O	O:0.999664
!	O	O:0.999826
	
=	O	O:0.999550
1	O	O:0.999853
`	O	O:0.999982
;	O	O:0.999958
I	O	O:0.999989
wanted	O	O:0.999980
`	O	O:0.999888
s	O	O:0.999516
/	O	O:0.999982
4	O	O:0.999153
`	O	O:0.999936
and	O	O:0.999899
`	O	O:0.999994
0	O	O:0.995656
`	O	O:0.999991
respectively	O	O:0.993073
	
Just	O	O:0.999477
use	O	O:0.999951
the	O	O:0.999844
`	O	O:0.999938
apply	O	B-API:0.969914
`	O	O:0.999835
function	O	O:0.999590
along	O	O:0.999918
the	O	O:0.999814
`	O	O:0.999905
axis=1	O	O:0.984684
`	O	O:0.999989
and	O	O:0.999984
pass	O	O:0.999636
the	O	O:0.999722
`	O	O:0.999965
pattern	O	O:0.991336
`	O	O:0.999998
parameter	O	O:0.999946
as	O	O:0.999995
an	O	O:0.999996
additional	O	O:0.999637
argument	O	O:0.999874
to	O	O:0.999971
the	O	O:0.999989
function	O	O:0.999716
.	O	O:0.999884
	
#CODE	O	O:0.998453
	
Like	O	O:0.999652
regexp	O	O:0.999844
;)	O	O:0.999953
I	O	O:0.999986
agree	O	O:0.999964
,	O	O:0.999932
I	O	O:0.999994
just	O	O:0.999960
always	O	O:0.999968
give	O	O:0.999884
the	O	O:0.999975
simplest	O	O:0.999278
,	O	O:0.999997
predictable	O	O:0.999732
in	O	O:0.999994
speed	O	O:0.999853
solution	O	O:0.999939
to	O	O:0.999991
the	O	O:0.999998
OP	O	O:0.999869
,	O	O:0.999959
and	O	O:0.999996
live	O	O:0.999770
the	O	O:0.999975
exotic	O	O:0.999910
ones	O	O:0.999859
to	O	O:0.999995
you	O	O:0.999999
:)	O	O:0.999978
`	O	O:0.999993
apply	O	B-API:0.969264
`	O	O:0.999880
should	O	O:0.999451
always	O	O:0.999993
be	O	O:0.999997
`	O	O:0.999894
O	O	O:0.961631
(	O	O:0.999989
N	O	O:0.999931
)`	O	O:0.999807
if	O	O:0.999650
I'm	O	O:0.999960
not	O	O:0.999968
wrong	O	O:0.999781
.	O	O:0.999870
	
I	O	O:0.999964
don't	O	O:0.999985
even	O	O:0.999748
know	O	O:0.999978
how	O	O:0.999994
to	O	O:0.999991
calculate	O	O:0.999976
how	O	O:0.999989
`	O	O:0.999997
melt	B-API	B-API:0.994299
`	O	O:0.999997
with	O	O:0.998019
`	O	O:0.999988
groupby	B-API	B-API:0.999492
`	O	O:0.999959
behaves	O	O:0.994604
?	O	O:0.999978
	
`	O	O:0.999737
O	O	O:0.932703
(	O	O:0.999991
?	O	O:0.999968
)`	O	O:0.999362
	
Just	O	O:0.999743
apply	O	B-API:0.523790
the	O	O:0.999852
Timestamp	O	O:0.926283
`	O	O:0.999987
time	O	O:0.981265
`	O	O:0.999996
method	O	O:0.999971
to	O	O:0.999999
items	O	O:0.999992
in	O	O:0.999997
the	O	O:0.999996
date	O	O:0.999130
column	O	O:0.998910
:	O	O:0.999978
#CODE	O	O:0.999892
	
Using	O	O:0.995388
the	O	O:0.999634
method	O	O:0.999875
Andy	O	O:0.999915
created	O	O:0.999545
on	O	O:0.999979
Index	O	O:0.985346
is	O	O:0.999972
faster	O	O:0.999488
than	O	O:0.999595
apply	O	B-API:0.775268
#CODE	O	O:0.997549
	
And	O	O:0.999988
then	O	O:0.999896
apply	O	O:0.968672
the	O	O:0.999790
function	O	O:0.999791
along	O	O:0.999828
the	O	O:0.999895
`	O	O:0.999946
axis=1	O	O:0.980285
`	O	O:0.999982
.	O	O:0.999442
	
#CODE	O	O:0.998453
	
Now	O	O:0.999808
`	O	O:0.999990
apply	O	B-API:0.976000
`	O	O:0.999973
needs	O	O:0.998934
to	O	O:0.999997
return	O	O:0.999981
a	O	O:0.999891
`	O	O:0.999935
Series	O	O:0.994492
`	O	O:0.999977
,	O	O:0.999982
not	O	O:0.999998
a	O	O:0.999973
`	O	O:0.999948
DataFrame	B-API	O:0.888508
`	O	O:0.999981
.	O	O:0.999614
	
One	O	O:0.999903
way	O	O:0.999949
to	O	O:0.999997
turn	O	O:0.999991
a	O	O:0.999980
`	O	O:0.999966
DataFrame	B-API	O:0.944457
`	O	O:0.999998
into	O	O:0.999689
a	O	O:0.999983
`	O	O:0.999785
Series	O	O:0.991816
`	O	O:0.999984
is	O	O:0.999981
to	O	O:0.999984
use	O	O:0.999992
`	O	O:0.999945
stack	O	B-API:0.993604
`	O	O:0.999988
.	O	O:0.999410
	
Look	O	O:0.999370
at	O	O:0.999989
what	O	O:0.999773
happens	O	O:0.999953
if	O	O:0.999986
we	O	O:0.999951
	
Wow	O	O:0.999757
,	O	O:0.999976
awesome	O	O:0.999664
walkthrough	O	O:0.999496
!	O	O:0.999811
	
`	O	O:0.999958
apply	O	B-API:0.982159
`	O	O:0.999913
is	O	O:0.999700
now	O	O:0.999939
among	O	O:0.999950
my	O	O:0.999962
top	O	O:0.999919
5	O	O:0.999962
functions	O	O:0.999589
to	O	O:0.999990
always	O	O:0.999992
remember	O	O:0.999416
.	O	O:0.999685
	
Concerning	O	O:0.999774
the	O	O:0.999921
`	O	O:0.999938
pivot_table	B-API	B-API:0.998958
`	O	O:0.999975
solution	O	O:0.997771
:	O	O:0.999992
At	O	O:0.999986
which	O	O:0.999967
point	O	O:0.999950
am	O	O:0.999995
I	O	O:0.999998
supposed	O	O:0.999991
to	O	O:0.999946
enter	O	O:0.999975
the	O	O:0.999972
line	O	O:0.999248
?	O	O:0.999957
	
No	O	O:0.999971
matter	O	O:0.999981
when	O	O:0.999718
in	O	O:0.999997
my	O	O:0.999997
attempt	O	O:0.999885
above	O	O:0.999951
,	O	O:0.999987
I	O	O:0.999997
always	O	O:0.999980
get	O	O:0.999770
`	O	O:0.999980
no	O	O:0.999959
item	O	O:0.999879
named	O	O:0.999657
Edge	O	O:0.999485
`	O	O:0.999935
.	O	O:0.999292
	
I	O	O:0.999936
would	O	O:0.999996
like	O	O:0.999944
to	O	O:0.999999
divide	O	O:0.999991
my	O	O:0.999989
data	O	O:0.999991
table	O	O:0.999975
called	O	O:0.998420
(	O	O:0.999995
my_data2	O	O:0.997406
)	O	O:0.999960
in	O	O:0.999990
two	O	O:0.999973
samples	O	O:0.999396
called	O	O:0.990262
(	O	O:0.999995
learning	O	O:0.998487
sample	O	O:0.995820
and	O	O:0.999976
test	O	O:0.999663
sample	O	O:0.999246
)	O	O:0.999954
.	O	O:0.999702
	
How	O	O:0.999926
to	O	O:0.999986
apply	O	O:0.950730
the	O	O:0.999944
logistic	O	O:0.996703
regression	O	O:0.999815
on	O	O:0.999989
the	O	O:0.999995
first	O	O:0.999978
part	O	O:0.999926
of	O	O:0.999994
my	O	O:0.999996
table	O	O:0.999719
(	O	O:0.999992
the	O	O:0.999993
first	O	O:0.999868
sample	O	O:0.999660
)	O	O:0.999987
,	O	O:0.999998
then	O	O:0.999966
apply	O	O:0.979036
predict	O	O:0.996800
on	O	O:0.999962
the	O	O:0.999982
second	O	O:0.999772
part	O	O:0.999653
?	O	O:0.999970
	
Thank	O	O:0.998934
you	O	O:0.999824
.	O	O:0.999955
	
One	O	O:0.999872
solution	O	O:0.999718
could	O	O:0.999975
be	O	O:0.999999
to	O	O:0.999997
use	O	O:0.999997
get	O	O:0.999522
dummies	O	O:0.996518
(	O	O:0.999974
which	O	O:0.999931
should	O	O:0.999934
be	O	O:0.999999
more	O	O:0.999943
efficient	O	O:0.999869
that	O	O:0.999848
apply	O	B-API:0.766725
):	O	O:0.999747
#CODE	O	O:0.998338
	
You	O	O:0.999903
could	O	O:0.999926
use	O	O:0.999996
an	O	O:0.999973
apply	O	B-API:0.557665
with	O	O:0.999799
a	O	O:0.999991
couple	O	O:0.999570
of	O	O:0.999973
locs	O	O:0.978580
:	O	O:0.999982
#CODE	O	O:0.999682
	
You	O	O:0.999897
can	O	O:0.999976
apply	O	O:0.950171
to_json	B-API	B-API:0.978574
to	O	O:0.999923
any	O	O:0.999991
DataFrame	B-API	O:0.907415
:	O	O:0.999920
#CODE	O	O:0.999896
	
you	O	O:0.999785
can	O	O:0.999994
what	O	O:0.999999
I	O	O:0.999999
do	O	O:0.999991
in	O	O:0.999974
the	O	O:0.999971
apply	O	B-API:0.730622
,	O	O:0.999964
its	O	O:0.999960
operating	O	O:0.999886
on	O	O:0.999982
the	O	O:0.999993
numpy	O	O:0.999968
arrays	O	O:0.999852
directly	O	O:0.999369
.	O	O:0.999877
	
I	O	O:0.999948
don't	O	O:0.999965
think	O	O:0.999880
readsav	O	O:0.999487
can	O	O:0.999879
do	O	O:0.999999
this	O	O:0.999923
conversion	O	O:0.999210
.	O	O:0.999950
	
I	O	O:0.999967
tried	O	O:0.999908
to	O	O:0.999938
make	O	O:0.999995
this	O	O:0.999862
algorithm	O	O:0.999856
:	O	O:0.999994
random	O	O:0.999663
draw	O	O:0.761101
between	O	O:0.998607
0	O	O:0.999915
and	O	O:0.999935
1	O	O:0.998681
(	O	O:0.999959
tir	O	O:0.999728
)	O	O:0.999988
.si	O	O:0.998213
tir	O	O:0.999763
'	O	O:0.999902
'	O	O:0.999992
pred	O	O:0.999872
then	O	O:0.999954
Xestime2=	O	O:0.999956
1	O	O:0.999983
else	O	O:0.999765
Xestime2=0	O	O:0.998534
.	O	O:0.999867
	
I	O	O:0.999985
wish	O	O:0.999937
apply	O	O:0.613666
this	O	O:0.999847
algorithm	O	O:0.999760
in	O	O:0.999984
df	O	O:0.999354
[	O	O:0.999962
'	O	O:0.999964
X3	O	O:0.999792
']	O	O:0.999933
but	O	O:0.999712
I	O	O:0.999984
had	O	O:0.999983
0	O	O:0.999715
in	O	O:0.999976
all	O	O:0.999989
the	O	O:0.999988
values	O	O:0.999520
??	O	O:0.999991
of	O	O:0.999993
X3	O	O:0.999962
columns	O	O:0.999774
.	O	O:0.999872
	
Which	O	O:0.998929
explains	O	O:0.999643
thats	O	O:0.999804
i	O	O:0.999996
have	O	O:0.999988
an	O	O:0.999996
error	O	O:0.999902
in	O	O:0.999984
my	O	O:0.999967
code	O	O:0.999439
.	O	O:0.999937
	
I	O	O:0.999937
understand	O	O:0.999987
your	O	O:0.999001
code	O	O:0.998685
but	O	O:0.999998
when	O	O:0.999803
I	O	O:0.999995
try	O	O:0.999997
to	O	O:0.999942
apply	O	O:0.979945
it	O	O:0.999931
to	O	O:0.999986
my	O	O:0.999999
code	O	O:0.999629
it	O	O:0.999991
does	O	O:0.999886
not	O	O:0.999992
work	O	O:0.999909
!!	O	O:0.999951
	
I	O	O:0.999962
tried	O	O:0.999940
to	O	O:0.999913
apply	O	O:0.963314
what	O	O:0.999372
you	O	O:0.999903
made	O	O:0.999839
but	O	O:0.999981
i	O	O:0.999993
have	O	O:0.999989
an	O	O:0.999990
error	O	O:0.999664
!!	O	O:0.999789
	
My	O	O:0.999883
coding	O	O:0.997035
	
I'm	O	O:0.999791
hoping	O	O:0.999513
there's	O	O:0.999891
something	O	O:0.999865
I've	O	O:0.999925
overlooked	O	O:0.999654
in	O	O:0.999945
the	O	O:0.999992
pandas	O	O:0.999777
library	O	O:0.999825
/	O	O:0.999890
documentation	O	O:0.999906
that	O	O:0.999899
allows	O	O:0.999984
one	O	O:0.999994
to	O	O:0.999991
know	O	O:0.999997
the	O	O:0.999997
progress	O	O:0.999835
of	O	O:0.999998
a	O	O:0.999961
split-apply-combine	O	O:0.907014
.	O	O:0.999791
	
A	O	O:0.999970
simple	O	O:0.999491
implementation	O	O:0.999212
would	O	O:0.999974
maybe	O	O:0.999991
look	O	O:0.999945
at	O	O:0.999993
the	O	O:0.999992
total	O	O:0.999733
number	O	O:0.999979
of	O	O:0.999991
data	O	O:0.999996
frame	O	O:1.000000
subsets	O	O:0.999975
upon	O	O:0.999347
which	O	O:0.999977
the	O	O:0.999976
`	O	O:0.999982
apply	O	B-API:0.975479
`	O	O:0.999791
function	O	O:0.995624
is	O	O:0.999978
working	O	O:0.997125
and	O	O:0.999988
report	O	O:0.999798
progress	O	O:0.999583
as	O	O:0.999993
the	O	O:0.999960
completed	O	O:0.999795
fraction	O	O:0.999936
of	O	O:0.999995
those	O	O:0.999946
subsets	O	O:0.999360
.	O	O:0.999846
	
have	O	O:0.999559
u	O	O:0.999989
done	O	O:0.999986
a	O	O:0.999954
%prun	O	O:0.653168
(	O	O:0.999994
profile	O	O:0.999656
)	O	O:0.999993
on	O	O:0.999991
the	O	O:0.999990
code	O	O:0.999558
?	O	O:0.999964
	
sometimes	O	O:0.999779
you	O	O:0.999978
can	O	O:0.999995
do	O	O:1.000000
operations	O	O:0.999976
on	O	O:0.999989
the	O	O:0.999998
whole	O	O:0.999918
frame	O	O:0.999991
before	O	O:0.999934
you	O	O:0.999989
apply	O	O:0.837900
to	O	O:0.999980
eliminate	O	O:0.999838
bottlenecks	O	O:0.999403
	
I	O	O:0.999911
did	O	O:0.999987
the	O	O:0.999975
above	O	O:0.999736
in	O	O:0.999992
my	O	O:0.999970
answer	O	O:0.999914
,	O	O:0.999997
also	O	O:0.999895
cheeky	O	O:0.999959
percentage	O	O:0.999698
update	O	O:0.998001
.	O	O:0.999918
	
Actually	O	O:0.999715
I	O	O:0.999985
couldn't	O	O:0.999946
get	O	O:0.999901
yours	O	O:0.999498
working	O	O:0.999724
...	O	O:0.999258
	
I	O	O:0.999989
think	O	O:0.999950
with	O	O:0.999559
the	O	O:0.999915
wraps	O	O:0.999344
bit	O	O:0.999577
.	O	O:0.999849
	
If	O	O:0.999995
your	O	O:0.999943
using	O	O:0.999940
it	O	O:0.999917
for	O	O:0.999968
the	O	O:0.999911
apply	O	B-API:0.982817
it's	O	O:0.998377
not	O	O:0.999932
so	O	O:0.999997
important	O	O:0.999760
anyway	O	O:0.999856
.	O	O:0.999875
	
Note	O	O:0.999102
:	O	O:0.999991
the	O	O:0.999996
apply	O	O:0.528033
progress	O	O:0.999521
percentage	O	O:0.999523
updates	O	O:0.998330
inline	O	O:0.980895
.	O	O:0.999868
	
If	O	O:0.999996
your	O	O:0.999283
function	O	O:0.999981
stdouts	O	O:0.999877
then	O	O:0.999958
this	O	O:0.999987
won't	O	O:0.999980
work	O	O:0.999878
.	O	O:0.999985
	
#CODE	O	O:0.998453
	
@USER	O	O:0.999584
DataFrame's	O	O:0.999371
apply	O	B-API:0.842535
is	O	O:0.999865
row-wise	O	O:0.994020
so	O	O:0.999973
I	O	O:0.999982
don't	O	O:0.999927
*	O	O:0.999988
think	O	O:0.999893
*	O	O:0.999990
dropna	B-API	B-API:0.944472
can	O	O:0.999951
be	O	O:0.999999
written	O	O:0.999640
in	O	O:0.999990
terms	O	O:0.999944
of	O	O:0.999975
apply	O	B-API:0.976546
(	O	O:0.999969
needed	O	O:0.999904
to	O	O:0.999973
use	O	O:0.999999
this	O	O:0.999697
answer	O	O:0.999760
)	O	O:0.999959
.	O	O:0.999564
	
Also	O	O:0.999840
,	O	O:0.999986
dropna	B-API	B-API:0.977522
is	O	O:0.999970
written	O	O:0.995981
in	O	O:0.999965
cython	O	O:0.978543
(	O	O:0.999985
not	O	O:0.999981
pure	O	O:0.999935
python	O	O:0.999866
)	O	O:0.999995
so	O	O:0.999985
doing	O	O:0.999985
something	O	O:0.999892
like	O	O:0.999820
this	O	O:0.999980
will	O	O:0.999928
be	O	O:0.999998
much	O	O:0.999770
slower	O	O:0.998408
.	O	O:0.999710
	
I	O	O:0.999982
came	O	O:0.999858
across	O	O:0.999736
what	O	O:0.999848
looks	O	O:0.999969
like	O	O:0.999980
the	O	O:0.999992
perfect	O	O:0.999594
solution	O	O:0.999961
on	O	O:0.999997
another	O	O:0.999951
SO	O	O:0.999897
answer	O	O:0.995493
(	O	O:0.999933
#URL	O	O:0.998500
)	O	O:0.999965
but	O	O:0.999951
when	O	O:0.999913
trying	O	O:0.999969
to	O	O:0.999998
apply	O	O:0.868698
to	O	O:0.999986
this	O	O:0.999990
series	O	O:0.999948
,	O	O:0.999989
I'm	O	O:0.999993
getting	O	O:0.999798
an	O	O:0.999903
exception	O	O:0.998427
:	O	O:0.999964
#CODE	O	O:0.999797
	
I	O	O:0.999978
really	O	O:0.999970
want	O	O:0.999697
to	O	O:0.999977
be	O	O:1.000000
able	O	O:0.999990
to	O	O:0.999991
apply	O	O:0.993547
the	O	O:0.999963
changes	O	O:0.998966
within	O	O:0.999719
the	O	O:0.999989
dataframe	B-API	O:0.998778
to	O	O:0.999982
apply	O	O:0.941142
and	O	O:0.999970
reapply	O	O:0.995947
groupby	B-API	B-API:0.978099
conditions	O	O:0.997220
and	O	O:0.999961
perform	O	O:0.999757
the	O	O:0.999962
plots	O	O:0.999517
efficiently	O	O:0.999041
-	O	O:0.999983
and	O	O:0.999961
would	O	O:0.999982
love	O	O:0.999754
to	O	O:0.999994
learn	O	O:0.999985
more	O	O:0.999934
about	O	O:0.999821
how	O	O:0.999968
the	O	O:0.999234
.apply()	B-API	B-API:0.999837
method	O	O:0.999437
works	O	O:0.999697
.	O	O:0.999956
	
As	O	O:0.999979
far	O	O:0.999938
as	O	O:0.999995
the	O	O:0.999911
`	O	O:0.999968
apply	O	B-API:0.998467
`	O	O:0.999816
method	O	O:0.999667
goes	O	O:0.999650
,	O	O:0.999995
it	O	O:0.999994
does	O	O:0.999885
slightly	O	O:0.999981
different	O	O:0.999983
things	O	O:0.999183
for	O	O:0.999974
different	O	O:0.999728
objects	O	O:0.996905
.	O	O:0.999804
	
For	O	O:0.999920
example	O	O:0.999694
,	O	O:0.999984
`	O	O:0.999977
DataFrame.apply()	B-API	B-API:0.999959
`	O	O:0.999995
will	O	O:0.999524
apply	O	O:0.902357
the	O	O:0.999956
passed	O	O:0.994158
in	O	O:0.999989
callable	O	O:0.999879
across	O	O:0.999984
the	O	O:0.999988
columns	O	O:0.999963
by	O	O:0.999982
default	O	O:0.999588
,	O	O:0.999958
but	O	O:0.999986
you	O	O:0.999971
can	O	O:0.999998
pass	O	O:0.999956
`	O	O:0.999995
axis=1	O	O:0.995208
`	O	O:0.999993
to	O	O:0.999936
apply	O	O:0.984631
it	O	O:0.999941
along	O	O:0.999875
the	O	O:0.999992
rows	O	O:0.996128
.	O	O:0.999863
	
You	O	O:0.999870
can	O	O:0.999948
reproduce	O	O:0.999970
it	O	O:0.999999
with	O	O:0.999994
dupes	O	O:0.999455
in	O	O:0.999995
the	O	O:0.999967
findall	B-API	B-API:0.983362
(	O	O:0.999979
see	O	O:0.999987
my	O	O:0.999988
answer	O	O:0.999875
)	O	O:0.999991
,	O	O:0.999977
I	O	O:0.999991
think	O	O:0.999963
Jeff's	O	O:0.999555
apply	O	B-API:0.644170
solution	O	O:0.998206
should	O	O:0.999854
work	O	O:0.999983
fine	O	O:0.999997
with	O	O:0.999996
dupes	O	O:0.999224
in	O	O:0.999970
the	O	O:0.999935
DatetimeIndex	B-API	B-API:0.807159
.	O	O:0.999657
	
Thanks	O	O:0.998992
@USER	O	O:0.999457
-	O	O:0.999999
your	O	O:0.999685
answer	O	O:0.999746
did	O	O:0.999983
help	O	O:0.999611
remove	O	O:0.999773
my	O	O:0.999974
confusion	O	O:0.999567
around	O	O:0.999952
the	O	O:0.999756
duplicate	O	O:0.999762
index	O	O:0.999934
,	O	O:0.999999
as	O	O:0.999998
I	O	O:0.999984
know	O	O:0.999983
that	O	O:0.999903
a	O	O:0.999991
pandas	O	O:0.999647
index	O	O:0.999942
will	O	O:0.999988
take	O	O:0.999998
duplicates	O	O:0.999873
in	O	O:0.999961
the	O	O:0.999992
index	O	O:0.999900
,	O	O:0.999997
so	O	O:0.999998
I	O	O:0.999992
now	O	O:0.999981
understand	O	O:0.998686
it's	O	O:0.999345
the	O	O:0.999937
index	O	O:0.999893
within	O	O:0.999851
the	O	O:0.999981
.apply()	B-API	B-API:0.998714
that	O	O:0.999502
was	O	O:0.999992
kicking	O	O:0.999877
out	O	O:0.999955
the	O	O:0.999956
error	O	O:0.998633
.	O	O:0.999780
	
Your	O	O:0.999890
explanation	O	O:0.999771
of	O	O:0.999991
how	O	O:0.999877
apply	O	O:0.784146
works	O	O:0.999818
as	O	O:0.999987
well	O	O:0.997276
is	O	O:0.999995
really	O	O:0.999251
useful	O	O:0.999653
,	O	O:0.999992
so	O	O:0.999993
even	O	O:0.999775
though	O	O:0.999920
it's	O	O:0.999956
not	O	O:0.999997
a	O	O:0.999999
solution	O	O:0.999563
to	O	O:0.999995
the	O	O:1.000000
original	O	O:0.999313
question	O	O:0.999744
it's	O	O:0.999933
really	O	O:0.999762
appreciated	O	O:0.999576
.	O	O:0.999707
	
If	O	O:0.999957
you	O	O:0.999972
try	O	O:0.999986
to	O	O:0.999994
return	O	O:0.999998
multiple	O	O:0.999958
values	O	O:0.999920
from	O	O:0.999972
the	O	O:0.999934
function	O	O:0.999972
that	O	O:0.999630
is	O	O:0.999999
passed	O	O:0.999532
to	O	O:0.999972
`	O	O:0.999999
apply	O	B-API:0.972599
`	O	O:0.999945
,	O	O:0.999747
and	O	O:0.999992
the	O	O:0.999985
DataFrame	B-API	O:0.987875
you	O	O:0.999969
call	O	O:0.999702
the	O	O:0.999990
`	O	O:0.999785
apply	O	B-API:0.940564
`	O	O:0.999963
on	O	O:0.999632
has	O	O:0.999989
the	O	O:0.999998
same	O	O:0.999962
number	O	O:0.999939
of	O	O:0.999993
item	O	O:0.999965
along	O	O:0.999918
the	O	O:0.999913
axis	O	O:0.997203
(	O	O:0.999936
in	O	O:0.999998
this	O	O:0.999983
case	O	O:0.999997
columns	O	O:0.999986
)	O	O:0.999996
as	O	O:0.999996
the	O	O:0.999989
number	O	O:0.999952
of	O	O:0.999985
values	O	O:0.999848
you	O	O:0.999992
returned	O	O:0.999902
,	O	O:0.999993
Pandas	O	O:0.999951
will	O	O:0.999929
create	O	O:0.999913
a	O	O:0.999999
DataFrame	B-API	O:0.997817
from	O	O:0.999943
the	O	O:0.999998
return	O	O:0.999731
values	O	O:0.999477
with	O	O:0.999955
the	O	O:0.999999
same	O	O:0.999984
labels	O	O:0.999831
as	O	O:0.999996
the	O	O:0.999970
original	O	O:0.998726
DataFrame	B-API	O:0.992104
.	O	O:0.999843
	
You	O	O:0.999903
can	O	O:0.999935
see	O	O:1.000000
this	O	O:0.999988
if	O	O:0.999993
you	O	O:0.999996
just	O	O:0.999839
do	O	O:0.999946
:	O	O:0.999964
#CODE	O	O:0.999755
	
To	O	O:0.999905
fix	O	O:0.998302
the	O	O:0.999967
index	O	O:0.999831
,	O	O:0.999995
you	O	O:0.999993
could	O	O:0.999997
just	O	O:0.999997
add	O	O:0.999994
the	O	O:0.999983
X	O	O:0.999823
as	O	O:0.999989
this	O	O:0.999849
index	O	O:0.999957
,	O	O:0.999996
you	O	O:0.999985
could	O	O:0.999990
first	O	O:0.999994
apply	O	B-API:0.601631
set_index	B-API	B-API:0.999744
:	O	O:0.999638
#CODE	O	O:0.999828
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999989
to	O	O:0.999998
preserve	O	O:0.999999
some	O	O:0.999966
of	O	O:0.999994
the	O	O:0.999994
original	O	O:0.999749
timestamps	O	O:0.976712
(	O	O:0.999970
but	O	O:0.999993
you	O	O:0.999994
have	O	O:0.999989
to	O	O:0.999999
choose	O	O:0.999994
which	O	O:0.999985
if	O	O:0.999993
you	O	O:0.999986
are	O	O:0.999993
binning	O	O:0.999996
them	O	O:0.999615
)	O	O:0.999996
,	O	O:0.999996
you	O	O:0.999990
can	O	O:0.999997
specify	O	O:0.999998
a	O	O:0.999992
function	O	O:0.999847
to	O	O:0.999997
apply	O	O:0.974648
on	O	O:0.999878
the	O	O:0.999992
individual	O	O:0.999824
columns	O	O:0.999664
.	O	O:0.999901
	
For	O	O:0.999954
example	O	O:0.999934
take	O	O:0.999913
the	O	O:0.999992
first	O	O:0.997240
:	O	O:0.999949
#CODE	O	O:0.999793
	
`	O	O:0.999883
as_index	O	B-API:0.774516
`	O	O:0.999958
and	O	O:0.999762
`	O	O:0.999994
apply	O	B-API:0.996406
`	O	O:0.999936
will	O	O:0.999350
only	O	O:0.999997
work	O	O:0.999963
on	O	O:0.999996
pandas	O	O:0.999934
git	O	O:0.999952
master	O	O:0.998724
.	O	O:0.999711
	
If	O	O:0.999739
you're	O	O:0.999905
not	O	O:0.999991
using	O	O:0.999987
master	O	O:0.998926
,	O	O:0.999988
then	O	O:0.999862
you'll	O	O:0.999980
get	O	O:0.999987
the	O	O:0.999986
following	O	O:0.996659
:	O	O:0.999912
#CODE	O	O:0.999809
	
How	O	O:0.999897
to	O	O:0.999992
apply	O	O:0.990407
a	O	O:0.999959
complex	O	O:0.984442
formula	O	O:0.999946
using	O	O:0.999872
Pandas	O	O:0.997609
in	O	O:0.999654
Python	O	O:0.998457
?	O	O:0.999956
	
I	O	O:0.999987
need	O	O:0.999980
to	O	O:0.999986
apply	O	O:0.997251
a	O	O:0.999984
specially	O	O:0.998498
designed	O	O:0.999926
moving	O	O:0.999761
average	O	O:0.999115
filter	O	O:0.998424
on	O	O:0.999995
a	O	O:0.999997
traffic	O	O:0.999465
dataset	O	O:0.998830
(	O	O:0.999989
NGSim	O	O:0.999381
)	O	O:0.999956
.	O	O:0.999779
	
This	O	O:0.999842
process	O	O:0.996505
is	O	O:0.999996
very	O	O:0.999829
tedious	O	O:0.999293
in	O	O:0.999946
Excel	O	O:0.999307
not	O	O:0.999992
only	O	O:0.999976
because	O	O:0.999980
dataset	O	O:0.999444
is	O	O:0.999995
very	O	O:0.999163
large	O	O:0.999580
but	O	O:0.999922
also	O	O:0.999848
because	O	O:0.999992
the	O	O:0.999795
formula	O	O:0.999869
has	O	O:0.999951
to	O	O:0.999991
look	O	O:0.999995
into	O	O:0.999950
columns	O	O:0.999895
for	O	O:0.999971
getting	O	O:0.999909
some	O	O:0.999264
values	O	O:0.999478
and	O	O:0.999986
sum	O	O:0.999998
them	O	O:0.999385
up	O	O:0.999878
.	O	O:0.999825
	
I	O	O:0.999852
was	O	O:0.999976
wondering	O	O:0.999085
if	O	O:0.999988
there	O	O:0.999927
are	O	O:0.999996
any	O	O:0.999993
examples	O	O:0.999670
like	O	O:0.999983
this	O	O:0.999985
or	O	O:0.999998
any	O	O:0.999989
other	O	O:0.999954
complicated	O	O:0.999545
formulas	O	O:0.999891
used	O	O:0.999509
in	O	O:0.999963
Pandas	O	O:0.999718
,	O	O:0.999975
Python	O	O:0.998674
.	O	O:0.999867
	
Kindly	O	O:0.999513
provide	O	O:0.999476
any	O	O:0.999981
example	O	O:0.999764
resources	O	O:0.998952
.	O	O:0.999896
	
Apply	O	O:0.999271
per-column	O	O:0.998180
the	O	O:0.999996
mean	O	O:0.999819
of	O	O:0.999997
that	O	O:0.999962
columns	O	O:0.999969
and	O	O:0.999994
fill	O	O:0.989901
#CODE	O	O:0.998678
	
hmmm	O	O:0.999376
,	O	O:0.999996
apologies	O	O:0.999649
for	O	O:0.999988
being	O	O:0.999545
a	O	O:0.999980
novice	O	O:0.998151
at	O	O:0.999997
this	O	O:0.999744
,	O	O:0.999994
but	O	O:0.999960
I	O	O:0.999976
can't	O	O:0.999931
figure	O	O:0.999592
it	O	O:0.999984
out	O	O:0.999835
.	O	O:0.999927
	
I	O	O:0.999984
can	O	O:0.999984
get	O	O:0.999991
the	O	O:0.999993
'	O	O:0.999976
or	O	O:0.999962
'	O	O:0.999981
logic	O	O:0.999978
to	O	O:0.999996
work	O	O:0.999997
using	O	O:0.999985
numpy	O	O:0.999819
comparison	O	O:0.999032
functions	O	O:0.999763
,	O	O:0.999964
but	O	O:0.999992
ultimately	O	O:0.999937
the	O	O:0.999991
logic	O	O:0.999751
I	O	O:0.999993
need	O	O:0.999296
is	O	O:0.999952
not	O	O:0.999944
'	O	O:0.999991
or	O	O:0.999871
'	O	O:0.999956
...	O	O:0.999790
	
I'm	O	O:0.999933
trying	O	O:0.999903
to	O	O:0.999995
apply	O	O:0.978939
a	O	O:0.999980
case-statement-like	O	O:0.963340
function	O	O:0.999970
element	O	O:0.999813
wise	O	O:0.999789
that	O	O:0.999916
works	O	O:0.999987
on	O	O:0.999988
groups	O	O:0.997973
:	O	O:0.999993
if	O	O:0.999996
element	O	O:0.999978
above	O	O:0.999791
1.2	O	O:0.998449
*	O	O:0.999988
group_median	O	O:0.997011
,	O	O:0.999999
then	O	O:0.999929
assign	O	O:0.999756
'	O	O:0.999994
h	O	O:0.999907
'	O	O:0.999984
,	O	O:0.999991
if	O	O:0.999984
it's	O	O:0.999887
below	O	O:0.999719
.8	O	O:0.999850
*group_median	O	O:0.996947
,	O	O:0.999999
then	O	O:0.999941
assign	O	O:0.999658
'	O	O:0.999996
l	O	O:0.999857
'	O	O:0.999982
,	O	O:0.999991
the	O	O:0.999985
third	O	O:0.999614
logical	O	O:0.998285
possibility	O	O:0.995784
(	O	O:0.999903
it's	O	O:0.999879
within	O	O:0.999930
.2	O	O:0.999827
of	O	O:0.999986
the	O	O:0.999980
group	O	O:0.999493
median	O	O:0.671631
)	O	O:0.999960
is	O	O:0.999993
ignored	O	O:0.998852
or	O	O:0.999990
assigned	O	O:0.998731
'	O	O:0.999975
n	O	O:0.999582
'	O	O:0.999957
.	O	O:0.999912
	
Any	O	O:0.999757
thoughts	O	O:0.999370
?	O	O:0.999911
	
To	O	O:0.999957
expand	O	O:0.999768
a	O	O:0.999998
little	O	O:0.997620
on	O	O:0.999963
what's	O	O:0.999911
going	O	O:0.999831
on	O	O:0.999992
here	O	O:0.999591
,	O	O:0.999998
during	O	O:0.999842
the	O	O:0.999936
apply	O	B-API:0.742595
the	O	O:0.999154
function	O	O:0.996647
is	O	O:0.999990
called	O	O:0.999449
on	O	O:0.999996
each	O	O:0.999309
group	O	O:0.996334
(	O	O:0.999969
in	O	O:0.999996
this	O	O:0.999949
case	O	O:0.999990
there	O	O:0.999963
are	O	O:0.999990
two	O	O:0.999977
,	O	O:0.999998
one	O	O:0.999988
for	O	O:0.999975
B=	O	O:0.999435
'	O	O:0.999918
c	O	O:0.999489
'	O	O:0.999950
and	O	O:0.999996
one	O	O:0.999991
for	O	O:0.999912
B=	O	O:0.999202
'	O	O:0.999918
d	O	O:0.999958
')	O	O:0.999943
,	O	O:0.999948
here's	O	O:0.999830
the	O	O:0.999971
c	O	O:0.999892
group	O	O:0.993734
:	O	O:0.999959
#CODE	O	O:0.999784
	
Apply	O	O:0.999782
then	O	O:0.998608
outputs	O	O:0.999997
this	O	O:0.999991
together	O	O:0.999880
with	O	O:0.999982
the	O	O:0.999958
B=	O	O:0.999509
'	O	O:0.999963
d	O	O:0.999876
'	O	O:0.999997
group	O	O:0.999682
to	O	O:0.999993
get	O	O:0.999997
the	O	O:0.999998
desired	O	O:0.999640
result	O	O:0.999804
.	O	O:0.999923
	
You	O	O:0.999761
could	O	O:0.999815
groupby	B-API	B-API:0.886291
person	O	O:0.999461
and	O	O:0.999995
then	O	O:0.999956
apply	O	O:0.978502
a	O	O:0.999990
shift	O	B-API:0.957774
to	O	O:0.999991
the	O	O:0.999998
values	O	O:0.992348
:	O	O:0.999958
#CODE	O	O:0.999958
	
You	O	O:0.999899
can	O	O:0.999969
apply	O	O:0.910495
`	O	O:0.999959
value_counts	B-API	B-API:0.999787
`	O	O:0.999991
to	O	O:0.999898
the	O	O:0.999999
Series	O	O:0.997857
groupby	B-API	B-API:0.994958
:	O	O:0.999959
#CODE	O	O:0.999512
	
It	O	O:0.999897
seems	O	O:0.999918
cool	O	O:0.998551
,	O	O:0.999992
and	O	O:0.999996
an	O	O:0.999990
approach	O	O:0.999720
I	O	O:0.999808
had	O	O:0.999816
not	O	O:0.999964
concieved	O	O:0.999739
of	O	O:0.999979
.	O	O:0.999735
	
They	O	O:0.999717
are	O	O:0.999984
all	O	O:0.999984
time	O	O:0.999918
stamps	O	O:0.999724
,	O	O:0.999988
I'm	O	O:0.999996
just	O	O:0.999971
slow	O	O:0.999947
on	O	O:0.999988
the	O	O:0.999992
uptake	O	O:0.999097
,,	O	O:0.999988
need	O	O:0.999878
to	O	O:0.999996
think	O	O:0.999996
about	O	O:0.999899
it	O	O:0.999953
,	O	O:0.999987
I'm	O	O:0.999994
sure	O	O:0.999862
you	O	O:0.999987
are	O	O:0.999998
right	O	O:0.999957
I	O	O:0.999998
just	O	O:0.999994
need	O	O:0.999959
to	O	O:0.999997
catch	O	O:0.999972
up	O	O:0.999880
!	O	O:0.999825
	
And	O	O:0.999919
apply	O	O:0.618780
the	O	O:0.999928
code	O	O:0.996943
,	O	O:0.999974
	
You	O	O:0.999852
could	O	O:0.999621
reset_index	B-API	B-API:0.972654
.	O	O:0.999866
	
Also	O	O:0.999832
,	O	O:0.999998
perhaps	O	O:0.999916
use	O	O:0.999991
a	O	O:0.999966
df.index.map	O	O:0.922529
,	O	O:0.999976
rather	O	O:0.999927
than	O	O:0.999760
apply	O	B-API:0.603327
.	O	O:0.999501
	
?	O	O:0.999776
	
And	O	O:0.999953
if	O	O:0.999989
you	O	O:0.999984
wan't	O	O:0.999977
a	O	O:0.999999
list	O	O:0.999306
of	O	O:0.999997
the	O	O:0.999978
prices	O	O:0.999740
per	O	O:0.999945
day	O	O:0.999994
then	O	O:0.999971
just	O	O:0.999994
do	O	O:0.999999
a	O	O:0.999987
groupby	B-API	B-API:0.993069
per	O	O:0.999821
day	O	O:0.999353
and	O	O:0.999983
return	O	O:0.998046
the	O	O:0.999962
list	O	O:0.999304
of	O	O:0.999988
all	O	O:0.999984
the	O	O:0.999997
prices	O	O:0.999105
from	O	O:0.999981
every	O	O:0.999987
group	O	O:0.999801
using	O	O:0.999931
the	O	O:0.999705
`	O	O:0.999896
apply	O	B-API:0.963249
`	O	O:0.999968
on	O	O:0.999852
the	O	O:0.999988
grouped	O	O:0.992891
object	O	O:0.998390
:	O	O:0.999934
#CODE	O	O:0.999875
	
In	O	O:0.999816
R	O	O:0.999522
,	O	O:0.999992
it	O	O:0.999903
is	O	O:0.999997
easy	O	O:0.999684
to	O	O:0.999997
aggregate	O	O:0.930810
values	O	O:0.998661
and	O	O:0.999993
apply	O	O:0.962779
a	O	O:0.997788
function	O	O:0.989719
(	O	O:0.999912
in	O	O:0.999997
this	O	O:0.999960
case	O	O:0.999977
,	O	O:0.999997
`	O	O:0.999996
sum	O	O:0.996158
`)	O	O:0.999991
#CODE	O	O:0.999382
	
You	O	O:0.999929
can	O	O:0.999902
use	O	O:0.999990
groupby	B-API	B-API:0.983645
,	O	O:0.999958
which	O	O:0.999831
can	O	O:0.999977
apply	O	O:0.997455
a	O	O:0.999964
function	O	O:0.999078
to	O	O:0.999958
the	O	O:1.000000
index	O	O:0.999854
values	O	O:0.998989
(	O	O:0.999984
in	O	O:0.999999
this	O	O:0.999971
case	O	O:0.999996
looking	O	O:0.999949
at	O	O:0.999988
the	O	O:0.999985
first	O	O:0.999148
element	O	O:0.996395
):	O	O:0.999902
#CODE	O	O:0.999761
	
I	O	O:0.999989
want	O	O:0.999972
to	O	O:0.999985
group	O	O:0.999988
by	O	O:0.999992
the	O	O:0.999978
columns	O	O:0.999569
:	O	O:0.999992
date	O	O:0.999663
,	O	O:0.999998
textA	O	O:0.996925
and	O	O:0.999992
textB	O	O:0.998002
-	O	O:0.999923
but	O	O:0.999981
want	O	O:0.999941
to	O	O:0.999991
apply	O	O:0.964920
"	O	O:0.999955
sum	O	O:0.997089
"	O	O:0.999987
to	O	O:0.999980
numberA	O	O:0.999853
,	O	O:0.999986
but	O	O:0.999948
"	O	O:0.999990
min	O	O:0.578835
"	O	O:0.999975
to	O	O:0.999961
numberB	O	O:0.999743
.	O	O:0.999881
	
#CODE	O	O:0.998453
	
...	O	O:0.999253
but	O	O:0.999905
I	O	O:0.999991
cannot	O	O:0.999968
see	O	O:0.999953
how	O	O:0.999991
to	O	O:0.999999
then	O	O:0.999996
apply	O	O:0.972177
two	O	O:0.999988
different	O	O:0.999965
aggregate	O	B-API:0.533071
functions	O	O:0.999754
,	O	O:0.999978
to	O	O:0.999995
two	O	O:1.000000
different	O	O:0.999982
columns	O	O:0.999819
?	O	O:0.999974
	
You	O	O:0.999902
can	O	O:0.999980
apply	O	O:0.989486
a	O	O:0.999969
`	O	O:0.999880
join	O	B-API:0.982505
`	O	O:0.999993
operation	O	O:0.999062
between	O	O:0.999968
your	O	O:0.999918
original	O	O:0.999633
dataframe	B-API	O:0.998860
and	O	O:0.999995
the	O	O:0.999996
resulting	O	O:0.999794
aggregated	O	O:0.999860
data	O	O:0.998864
:	O	O:0.999963
#CODE	O	O:0.999905
	
Now	O	O:0.999986
that	O	O:0.999971
we	O	O:0.999999
have	O	O:0.999965
the	O	O:0.999997
grouping	O	O:0.999822
,	O	O:0.999993
we	O	O:0.999996
can	O	O:0.999979
apply	O	O:0.968729
the	O	O:0.999870
aggregator	O	O:0.964336
:	O	O:0.999904
#CODE	O	O:0.999778
	
And	O	O:0.999956
you	O	O:0.999972
can	O	O:0.999992
do	O	O:1.000000
an	O	O:0.999999
apply	O	O:0.828081
over	O	O:0.998622
the	O	O:0.999864
major	O	O:0.998890
axis	O	O:0.998029
:	O	O:0.999936
#CODE	O	O:0.999873
	
Hmm	O	O:0.999474
,	O	O:0.999974
it	O	O:0.999961
doesn't	O	O:0.999910
look	O	O:0.999937
like	O	O:0.999987
this	O	O:0.999982
lets	O	O:0.999895
me	O	O:0.999990
store	O	O:0.998564
it	O	O:0.999992
the	O	O:0.999993
way	O	O:0.999917
I	O	O:0.999988
want	O	O:0.999870
,	O	O:0.999743
but	O	O:0.999975
it	O	O:0.999990
does	O	O:0.999944
let	O	O:0.999973
me	O	O:0.999992
access	O	O:0.999828
the	O	O:0.999998
data	O	O:0.999886
in	O	O:0.999998
a	O	O:0.999998
way	O	O:0.999732
which	O	O:0.999896
may	O	O:0.999982
let	O	O:0.999933
me	O	O:0.999965
do	O	O:0.999976
what	O	O:0.999936
I	O	O:0.999991
need	O	O:0.999944
.	O	O:0.999677
	
I	O	O:0.999948
clearly	O	O:0.998447
had	O	O:0.998942
not	O	O:0.999855
looked	O	O:0.999879
close	O	O:0.999908
enough	O	O:0.999703
at	O	O:0.999980
Panels	O	O:0.993864
.	O	O:0.999755
	
I	O	O:0.999971
will	O	O:0.999990
have	O	O:0.999919
to	O	O:0.999996
look	O	O:0.999994
into	O	O:0.999693
how	O	O:0.999981
apply	O	O:0.939509
more	O	O:0.999581
carefully	O	O:0.999534
,	O	O:0.999995
I	O	O:0.999963
don't	O	O:0.999925
understand	O	O:0.999684
why	O	O:0.999988
you	O	O:0.999908
would	O	O:0.999996
have	O	O:0.999996
the	O	O:0.999984
function	O	O:0.999976
return	O	O:0.997313
1	O	O:0.999763
.	O	O:0.999861
	
Thanks	O	O:0.999398
though	O	O:0.999262
!	O	O:0.999922
	
Hmm	O	O:0.999590
,	O	O:0.999988
well	O	O:0.999854
trying	O	O:0.999954
it	O	O:0.999972
out	O	O:0.999902
doesn't	O	O:0.999919
quite	O	O:0.999948
seem	O	O:0.999951
to	O	O:0.999985
do	O	O:0.999999
what	O	O:0.999939
I	O	O:0.999993
want	O	O:0.999947
.	O	O:0.999055
	
The	O	O:0.999935
return	O	O:0.998960
value	O	O:0.999923
needs	O	O:0.999939
to	O	O:0.999999
be	O	O:1.000000
of	O	O:0.999998
length	O	O:0.999235
of	O	O:0.999981
the	O	O:0.999980
panel	O	O:0.999974
,	O	O:0.999998
where	O	O:0.999991
if	O	O:0.999989
I	O	O:0.999999
want	O	O:0.999984
to	O	O:0.999967
operate	O	O:0.999995
on	O	O:0.999995
the	O	O:0.999998
whole	O	O:0.999954
array	O	O:0.999988
to	O	O:0.999991
compute	O	O:0.999985
a	O	O:0.999997
single	O	O:0.996793
object	O	O:0.999885
it	O	O:0.999959
won't	O	O:0.999962
let	O	O:0.999853
me	O	O:0.999977
return	O	O:0.998864
that	O	O:0.999487
.	O	O:0.999969
	
Apply	O	O:0.998940
doesn't	O	O:0.999677
let	O	O:0.999780
me	O	O:0.999977
reduce	O	O:0.998067
the	O	O:0.999964
panel	O	O:0.999726
.	O	O:0.999896
	
For	O	O:0.999962
example	O	O:0.999908
as	O	O:0.999997
a	O	O:0.999997
test	O	O:0.994122
I	O	O:0.999995
wanted	O	O:0.999982
to	O	O:0.999935
apply	O	O:0.915172
`	O	O:0.999658
np.reshape	B-API	B-API:0.999435
(	O	O:0.999990
x	O	O:0.999665
,	O	O:0.999945
(	O	O:0.999980
2	O	O:0.999949
,	O	O:0.999969
2	O	O:0.999982
))`	O	O:0.999622
on	O	O:0.999989
a	O	O:0.999999
panel	O	O:0.999981
of	O	O:0.999987
4	O	O:0.999850
dfs	O	O:0.999518
and	O	O:0.999976
it	O	O:0.999978
fails	O	O:0.997202
.	O	O:0.999868
	
I	O	O:0.999990
guess	O	O:0.999928
I	O	O:0.999990
need	O	O:0.999982
to	O	O:0.999978
do	O	O:0.999999
all	O	O:0.999994
my	O	O:0.999982
work	O	O:0.999754
within	O	O:0.999937
the	O	O:0.999985
apply	O	B-API:0.893520
,	O	O:0.999735
and	O	O:0.999947
flatten	O	O:0.631662
it	O	O:0.999975
back	O	O:0.999278
out	O	O:0.999890
.	O	O:0.999896
	
This	O	O:0.999724
has	O	O:0.999986
me	O	O:0.999980
on	O	O:0.999992
the	O	O:0.999994
right	O	O:0.999977
track	O	O:0.999692
now	O	O:0.999983
I	O	O:0.999999
think	O	O:0.999974
so	O	O:0.999966
thanks	O	O:0.999437
again	O	O:0.999702
.	O	O:0.999898
	
So	O	O:0.999993
then	O	O:0.999874
I	O	O:0.999999
tried	O	O:0.999991
applying	O	O:0.999100
with	O	O:0.997848
axis=0	O	O:0.995303
(	O	O:0.999977
per	O	O:0.999951
column	O	O:0.999867
basis	O	O:0.999937
)	O	O:0.999966
and	O	O:0.999993
modifying	O	O:0.999814
the	O	O:0.998684
function	O	O:0.999764
so	O	O:0.999982
it	O	O:0.999999
only	O	O:0.999972
applies	O	O:0.999990
this	O	O:0.999922
to	O	O:0.999990
the	O	O:0.999997
'	O	O:0.999952
Date	O	O:0.999077
'	O	O:0.999984
column	O	O:0.999623
(	O	O:0.999989
I	O	O:0.999994
can't	O	O:0.999916
see	O	O:0.999948
how	O	O:0.999992
to	O	O:0.999991
apply	O	O:0.996897
this	O	O:0.999721
to	O	O:0.999996
just	O	O:0.999998
one	O	O:0.999999
column	O	O:0.999817
)	O	O:0.999992
#CODE	O	O:0.999522
	
That	O	O:0.999606
doesn't	O	O:0.999942
work	O	O:0.999933
because	O	O:0.999992
the	O	O:0.999997
empty	O	O:0.998725
'	O	O:0.999957
Date	O	O:0.999191
'	O	O:0.999986
values	O	O:0.999039
are	O	O:0.999978
not	O	O:0.999968
'	O	O:0.999988
NaN	O	O:0.996854
'	O	O:0.999992
they	O	O:0.999886
are	O	O:0.999999
empty	O	O:0.999623
strings	O	O:0.998142
.	O	O:0.999724
	
Also	O	O:0.999865
,	O	O:0.999997
ideally	O	O:0.999967
,	O	O:0.999995
I	O	O:0.999998
want	O	O:0.999983
to	O	O:0.999907
do	O	O:1.000000
this	O	O:0.999983
using	O	O:0.999929
`	O	O:0.999948
apply	O	B-API:0.989847
`	O	O:0.999959
as	O	O:0.999892
there	O	O:0.999918
are	O	O:0.999992
other	O	O:0.999973
things	O	O:0.999758
I	O	O:0.999996
want	O	O:0.999988
to	O	O:0.999922
do	O	O:0.999998
within	O	O:0.999935
that	O	O:0.999624
function	O	O:0.999989
which	O	O:0.999975
I	O	O:0.999996
removed	O	O:0.999920
to	O	O:0.999863
simplify	O	O:0.999991
this	O	O:0.999854
question	O	O:0.999621
.	O	O:0.999934
	
then	O	O:0.999501
show	O	O:0.999980
what	O	O:0.999981
you	O	O:0.999993
actually	O	O:0.999997
want	O	O:0.999925
;	O	O:0.999996
this	O	O:0.999706
is	O	O:0.999998
the	O	O:0.999979
efficient	O	O:0.999856
way	O	O:0.999973
of	O	O:0.999987
doing	O	O:0.999741
it	O	O:0.999985
,	O	O:0.999978
apply	O	B-API:0.772173
is	O	O:0.999947
essentially	O	O:0.999838
a	O	O:0.999998
loop	O	O:0.997558
in	O	O:0.999979
python	O	O:0.999707
space	O	O:0.999731
	
the	O	O:0.999602
shift	O	B-API:0.961880
index	O	O:0.999683
looks	O	O:0.999984
like	O	O:0.999994
a	O	O:0.999994
better	O	O:0.998746
fix	O	O:0.999466
,	O	O:0.999992
still	O	O:0.999680
would	O	O:0.999995
like	O	O:0.999988
to	O	O:1.000000
know	O	O:0.999989
if	O	O:0.999997
there	O	O:0.999803
is	O	O:0.999997
a	O	O:0.999997
simple	O	O:0.999659
date	O	O:0.999457
add	O	O:0.999378
function	O	O:0.999948
,	O	O:0.999976
which	O	O:0.999749
is	O	O:0.999968
how	O	O:0.999934
I'd	O	O:0.999987
do	O	O:0.999991
it	O	O:0.999970
in	O	O:0.999987
sql	O	O:0.999788
,	O	O:0.999998
that	O	O:0.999932
could	O	O:0.999978
apply	O	O:0.942931
?	O	O:0.999873
	
I	O	O:0.999947
see	O	O:0.999989
that	O	O:0.999428
,	O	O:0.999996
and	O	O:0.999996
I	O	O:0.999996
like	O	O:0.999713
it	O	O:0.999950
..	O	O:0.999801
	
I'd	O	O:0.999966
still	O	O:0.999972
like	O	O:0.999968
to	O	O:0.999997
know	O	O:0.999987
if	O	O:0.999996
there	O	O:0.999791
is	O	O:0.999997
a	O	O:0.999981
simple	O	O:0.998358
DateAdd	O	O:0.999735
type	O	O:0.996645
function	O	O:0.999994
that	O	O:0.999956
I	O	O:0.999999
could	O	O:0.999976
use	O	O:0.999963
that	O	O:0.999352
might	O	O:0.999987
also	O	O:0.999992
apply	O	O:0.954345
for	O	O:0.999761
use	O	O:0.999549
elsewhere	O	O:0.998120
if	O	O:0.999954
needed	O	O:0.999842
?	O	O:0.999957
	
Each	O	O:0.999709
list	O	O:0.996156
in	O	O:0.999996
this	O	O:0.999982
column	O	O:0.999962
can	O	O:0.999986
be	O	O:1.000000
passed	O	O:0.999918
to	O	O:0.999903
`	O	O:1.000000
set.update	O	O:0.984099
`	O	O:0.999988
function	O	O:0.999922
to	O	O:0.999995
get	O	O:0.999999
unique	O	O:0.922718
values	O	O:0.999352
.	O	O:0.999840
	
Use	O	O:0.999728
`	O	O:0.999976
apply	O	B-API:0.971864
`	O	O:0.999974
to	O	O:0.999893
do	O	O:0.999997
so	O	O:0.999881
:	O	O:0.999951
#CODE	O	O:0.999905
	
If	O	O:0.999842
it's	O	O:0.999806
already	O	O:0.999895
in	O	O:0.999995
your	O	O:0.999868
DataFrame	B-API	O:0.996737
,	O	O:0.999997
you	O	O:0.999988
could	O	O:0.999965
use	O	O:0.999998
an	O	O:0.999914
apply	O	B-API:0.963158
:	O	O:0.999463
#CODE	O	O:0.999107
	
I	O	O:0.999937
would	O	O:0.999995
like	O	O:0.999944
to	O	O:0.999998
add	O	O:0.999999
additional	O	O:0.999868
calculated	O	O:0.999877
columns	O	O:0.999926
to	O	O:0.999987
each	O	O:0.999987
DataFrame	B-API	O:0.999296
that	O	O:0.999797
is	O	O:0.999999
inside	O	O:0.999464
the	O	O:0.999956
Panel	O	O:0.999788
,	O	O:0.999995
preferably	O	O:0.999941
without	O	O:0.999945
a	O	O:0.999898
for-loop	O	O:0.996000
.	O	O:0.999741
	
I'm	O	O:0.999967
attempting	O	O:0.999841
to	O	O:0.999958
use	O	O:0.999997
the	O	O:0.999957
apply	O	B-API:0.910401
function	O	O:0.999407
to	O	O:0.999933
the	O	O:1.000000
panel	O	O:0.999852
and	O	O:0.999996
name	O	O:0.999991
the	O	O:0.999973
new	O	O:0.999977
columns	O	O:0.999960
based	O	O:0.999897
on	O	O:0.999996
the	O	O:0.999994
original	O	O:0.999908
column	O	O:0.999973
name	O	O:0.999989
appended	O	O:0.999967
with	O	O:0.999983
a	O	O:0.999958
'	O	O:0.999951
p	O	O:0.999517
'	O	O:0.999880
(	O	O:0.999984
for	O	O:0.999961
easier	O	O:0.999499
indexing	O	O:0.999448
later	O	O:0.999497
)	O	O:0.999922
.	O	O:0.999703
	
Below	O	O:0.996969
is	O	O:0.999983
the	O	O:0.999986
code	O	O:0.999681
I	O	O:0.999993
am	O	O:0.999999
currently	O	O:0.999839
using	O	O:0.999907
.	O	O:0.998663
	
#CODE	O	O:0.998453
	
The	O	O:0.999974
code	O	O:0.999862
above	O	O:0.999989
currently	O	O:0.999978
duplicates	O	O:0.999881
each	O	O:0.999803
DataFrame	B-API	O:0.998914
with	O	O:0.999959
the	O	O:0.999991
calculated	O	O:0.999879
columns	O	O:0.999967
instead	O	O:0.999994
of	O	O:0.999999
appending	O	O:0.999995
them	O	O:0.999666
to	O	O:0.999983
each	O	O:0.999969
DataFrame	B-API	O:0.990681
.	O	O:0.999923
	
The	O	O:0.999943
apply	O	B-API:0.882489
function	O	O:0.999434
I'm	O	O:0.999952
using	O	O:0.999985
operates	O	O:0.997906
on	O	O:0.999966
a	O	O:0.999967
Series	O	O:0.998492
object	O	O:0.999918
,	O	O:0.999993
which	O	O:0.999833
in	O	O:0.999995
this	O	O:0.999981
case	O	O:0.999964
would	O	O:0.999991
be	O	O:0.999999
a	O	O:0.999999
passed	O	O:0.996510
column	O	O:0.999595
.	O	O:0.999905
	
My	O	O:0.999923
question	O	O:0.998333
is	O	O:0.999992
how	O	O:0.999962
can	O	O:0.999986
I	O	O:1.000000
use	O	O:0.999994
the	O	O:0.999654
apply	O	B-API:0.937106
function	O	O:0.999641
on	O	O:0.999967
a	O	O:0.999997
Panel	O	O:0.999929
such	O	O:0.999934
that	O	O:0.999949
it	O	O:0.999979
calculates	O	O:0.999897
new	O	O:0.999977
columns	O	O:0.999588
and	O	O:0.999987
appends	O	O:0.999997
them	O	O:0.999140
to	O	O:0.999971
each	O	O:0.999971
DataFrame	B-API	O:0.993759
?	O	O:0.999969
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999986
to	O	O:0.999998
add	O	O:1.000000
a	O	O:0.999997
new	O	O:0.999797
column	O	O:0.999930
via	O	O:0.999880
`	O	O:0.999983
apply	O	B-API:0.966385
`	O	O:0.999992
simply	O	O:0.999277
assign	O	O:0.999923
the	O	O:0.999983
output	O	O:0.999745
of	O	O:0.999992
the	O	O:0.999990
apply	O	O:0.790349
operation	O	O:0.999306
to	O	O:0.999982
the	O	O:1.000000
column	O	O:0.999857
you	O	O:0.999965
desire	O	O:0.999622
:	O	O:0.999976
#CODE	O	O:0.999799
	
Or	O	O:0.999967
,	O	O:0.999963
in	O	O:0.999997
this	O	O:0.999956
case	O	O:0.999981
,	O	O:0.999999
simply	O	O:0.999722
``	O	O:0.999893
apply	O	B-API:0.987233
(	O	O:0.999938
newCalculation	O	O:0.996475
)``	O	O:0.999608
.	O	O:0.999603
	
Assume	O	O:0.999737
you	O	O:0.999927
would	O	O:0.999997
like	O	O:0.999995
to	O	O:0.999999
evaluate	O	O:0.999994
a	O	O:0.999997
time	O	O:0.999916
series	O	O:0.999991
ts	O	O:0.999980
on	O	O:0.999998
a	O	O:0.999995
different	O	O:0.999650
datetime_index	O	O:0.961847
.	O	O:0.999772
	
This	O	O:0.999281
index	O	O:0.999478
and	O	O:0.999972
the	O	O:0.999997
index	O	O:0.999783
of	O	O:0.999976
ts	O	O:0.999883
may	O	O:0.999987
overlap	O	O:0.998744
.	O	O:0.999915
	
I	O	O:0.999973
recommend	O	O:0.999960
to	O	O:0.999889
use	O	O:0.999997
the	O	O:0.999873
following	O	O:0.998517
groupby	B-API	B-API:0.974392
trick	O	O:0.999403
.	O	O:0.999763
	
This	O	O:0.999646
essentially	O	O:0.999925
gets	O	O:0.999927
rid	O	O:0.999983
of	O	O:0.999989
dubious	O	O:0.998654
double	O	O:0.993933
stamps	O	O:0.999344
.	O	O:0.999766
	
I	O	O:0.999993
then	O	O:0.999931
forward	O	O:0.999737
interpolate	O	O:0.596347
but	O	O:0.999916
feel	O	O:0.999818
free	O	O:0.999899
to	O	O:0.999989
apply	O	O:0.984596
more	O	O:0.999443
fancy	O	O:0.997122
methods	O	O:0.999138
#CODE	O	O:0.998194
	
Pandas	O	O:0.999305
Dataframe	B-API	O:0.969699
,	O	O:0.999957
Apply	O	O:0.999821
Function	O	O:0.998550
,	O	O:0.999894
Return	O	O:0.999151
Index	O	O:0.984763
	
Then	O	O:0.999776
I	O	O:0.999999
can	O	O:0.999995
apply	O	O:0.903706
the	O	O:0.999853
function	O	O:0.999627
to	O	O:0.999987
my	O	O:0.999999
dataframe	B-API	O:0.997178
,	O	O:0.999998
grouped	O	O:0.999963
by	O	O:0.999952
I	O	O:0.999890
D:	O	O:0.999878
#CODE	O	O:0.996309
	
I'm	O	O:0.999958
a	O	O:0.999989
newbie	O	O:0.999485
to	O	O:0.999970
Pandas	O	O:0.999979
and	O	O:0.999951
I'm	O	O:0.999969
trying	O	O:0.999731
to	O	O:0.999983
apply	O	O:0.942272
it	O	O:0.999968
to	O	O:0.999995
a	O	O:0.999999
script	O	O:0.999868
that	O	O:0.999960
I	O	O:0.999999
have	O	O:0.999977
already	O	O:0.999552
written	O	O:0.998354
.	O	O:0.999814
	
Apply	O	O:0.998027
`	O	O:0.999936
tolist	B-API	B-API:0.994554
`	O	O:0.999998
on	O	O:0.999992
each	O	O:0.999964
of	O	O:0.999993
the	O	O:0.999987
group's	O	O:0.999928
column	O	O:0.998976
B	O	O:0.999639
:	O	O:0.999971
#CODE	O	O:0.999632
	
Unfortunately	O	O:0.999806
you	O	O:0.999908
can't	O	O:0.999986
just	O	O:0.999989
do	O	O:0.999998
an	O	O:0.999968
apply	O	B-API:0.945254
(	O	O:0.999773
since	O	O:0.999536
it	O	O:0.999981
fits	O	O:0.999979
it	O	O:0.999999
back	O	O:0.999716
to	O	O:0.999996
a	O	O:0.999999
DataFrame	B-API	O:0.762551
):	O	O:0.999942
#CODE	O	O:0.999788
	
I	O	O:0.999992
have	O	O:0.999997
a	O	O:0.999988
dataset	O	O:0.999923
created	O	O:0.999701
with	O	O:0.999980
pytables	O	O:0.999860
that	O	O:0.999961
I	O	O:0.999997
am	O	O:0.999999
trying	O	O:0.999530
to	O	O:0.999983
import	O	O:0.999977
into	O	O:0.999770
a	O	O:0.999988
pandas	O	O:0.999067
dataframe	B-API	O:0.997072
.	O	O:0.999779
	
I	O	O:0.999958
can't	O	O:0.999971
apply	O	O:0.802808
a	O	O:0.999943
`	O	O:0.999903
where	O	O:0.999413
`	O	O:0.999997
filter	O	O:0.988894
to	O	O:0.999996
the	O	O:0.999999
`	O	O:0.999916
read_hdf	B-API	B-API:0.998805
`	O	O:0.999995
step	O	O:0.999510
.	O	O:0.999970
	
I'm	O	O:0.999823
on	O	O:0.999993
pandas	O	O:0.999230
'	O	O:0.999991
0.12.0	O	O:0.998794
'	O	O:0.999896
	
I'm	O	O:0.999874
having	O	O:0.999837
trouble	O	O:0.999624
with	O	O:0.999886
Pandas	O	O:0.999273
'	O	O:0.999988
groupby	B-API	B-API:0.955269
functionality	O	O:0.999189
.	O	O:0.999286
	
I've	O	O:0.999758
read	O	O:0.998669
the	O	O:0.999911
documentation	O	O:0.999272
,	O	O:0.999987
but	O	O:0.999980
I	O	O:0.999990
can't	O	O:0.999972
see	O	O:0.999968
to	O	O:0.999997
figure	O	O:0.999979
out	O	O:0.999964
how	O	O:0.999988
to	O	O:0.999997
apply	O	O:0.996843
aggregate	O	B-API:0.599738
functions	O	O:0.998632
to	O	O:0.999993
multiple	O	O:0.999997
columns	O	O:0.999796
and	O	O:0.999998
have	O	O:0.999981
custom	O	O:0.999227
names	O	O:0.999678
for	O	O:0.999986
those	O	O:0.999964
columns	O	O:0.999461
.	O	O:0.999919
	
To	O	O:0.999928
understand	O	O:0.999766
why	O	O:0.999998
your	O	O:0.999634
approach	O	O:0.999869
didn't	O	O:0.999896
work	O	O:0.999914
,	O	O:0.999997
remember	O	O:0.999941
that	O	O:0.999935
the	O	O:0.999982
function	O	O:0.999942
`	O	O:0.999987
round	O	O:0.967744
`	O	O:0.999990
needs	O	O:0.999837
two	O	O:0.999992
arguments	O	O:0.999781
,	O	O:0.999994
the	O	O:0.999996
number	O	O:0.999808
of	O	O:0.999992
decimal	O	O:0.999756
places	O	O:0.999806
and	O	O:0.999998
the	O	O:0.999999
data	O	O:0.999722
to	O	O:0.999996
be	O	O:0.999999
rounded	O	O:0.999570
.	O	O:0.999748
	
In	O	O:0.999928
general	O	O:0.999340
,	O	O:0.999995
to	O	O:0.999997
apply	O	O:0.953789
functions	O	O:0.999926
that	O	O:0.999930
take	O	O:0.999993
two	O	O:0.999994
arguments	O	O:0.999942
,	O	O:0.999996
you	O	O:0.999988
can	O	O:0.999974
"	O	O:1.000000
curry	O	O:0.999345
"	O	O:0.999996
the	O	O:0.999717
function	O	O:0.999960
like	O	O:0.999736
so	O	O:0.999933
:	O	O:0.999976
#CODE	O	O:0.999862
	
For	O	O:0.999976
a	O	O:0.999989
modestly	O	O:0.999358
sized	O	O:0.997447
`	O	O:0.999958
DataFrame	B-API	O:0.894804
`	O	O:0.999994
,	O	O:0.999902
`	O	O:0.999995
applymap	B-API	B-API:0.998237
`	O	O:0.999991
will	O	O:0.999188
be	O	O:0.999999
horrendously	O	O:0.999922
slow	O	O:0.998085
,	O	O:0.999987
since	O	O:0.999931
it	O	O:0.999938
is	O	O:1.000000
applying	O	O:0.999896
a	O	O:0.999961
Python	O	O:0.989258
function	O	O:0.999974
element	O	O:0.999911
by	O	O:0.999986
element	O	O:0.999732
in	O	O:0.999823
Python	O	O:0.996709
(	O	O:0.999987
i.e.	O	O:0.999354
,	O	O:0.999990
there's	O	O:0.999832
no	O	O:0.999983
Cython	O	O:0.999865
speeding	O	O:0.999972
this	O	O:0.999880
up	O	O:0.999874
)	O	O:0.999967
.	O	O:0.999718
	
It's	O	O:0.999757
faster	O	O:0.999851
to	O	O:0.999980
use	O	O:0.999992
`	O	O:0.999961
apply	O	B-API:0.981345
`	O	O:0.999976
with	O	O:0.990459
`	O	O:0.999979
functools.partial	O	B-API:0.735125
`	O	O:0.999904
:	O	O:0.999794
#CODE	O	O:0.999908
	
You	O	O:0.999906
could	O	O:0.999976
even	O	O:0.999994
make	O	O:0.999997
a	O	O:0.999972
function	O	O:0.999909
that	O	O:0.999913
returns	O	O:0.999966
a	O	O:0.999997
partial	O	O:0.969709
function	O	O:0.999977
that	O	O:0.999952
you	O	O:0.999996
can	O	O:0.999982
apply	O	O:0.808263
:	O	O:0.999908
#CODE	O	O:0.999485
	
Why	O	O:0.999943
not	O	O:0.999952
use	O	O:0.999921
`	O	O:0.999777
numpy.round	O	O:0.509680
`	O	O:0.999985
and	O	O:0.999982
pass	O	O:0.999635
the	O	O:0.999175
`	O	O:0.999966
DataFrame	B-API	O:0.916727
`	O	O:0.999998
as	O	O:0.999990
an	O	O:0.999953
argument	O	O:0.999801
?	O	O:0.999855
	
`	O	O:0.999905
100	O	O:0.997449
*	O	O:0.999969
np.round	O	O:0.856409
(	O	O:0.999984
df	O	O:0.999896
,	O	O:0.999981
2	O	O:0.999933
)`	O	O:0.999948
seems	O	O:0.999944
to	O	O:0.999995
solve	O	O:0.999991
the	O	O:0.999988
problem	O	O:0.999678
for	O	O:0.999971
me	O	O:0.999725
.	O	O:0.999724
	
If	O	O:0.999993
some	O	O:0.999963
columns	O	O:0.999955
have	O	O:0.999970
type	O	O:0.999931
inappropriate	O	O:0.999940
for	O	O:0.999973
`	O	O:0.999976
round	O	O:0.889081
`	O	O:0.999984
,	O	O:0.999992
just	O	O:0.999969
exclude	O	O:0.999966
them	O	O:0.999824
before	O	O:0.999985
passing	O	O:0.999480
to	O	O:0.999955
the	O	O:0.999999
`	O	O:0.999979
round	O	O:0.960544
`	O	O:0.999947
function	O	O:0.999201
.	O	O:0.999930
	
This	O	O:0.999589
should	O	O:0.999904
avoid	O	O:0.999899
overhead	O	O:0.999976
from	O	O:0.999661
`	O	O:0.999991
apply	O	B-API:0.945996
`	O	O:0.999919
-like	O	O:0.856683
things	O	O:0.999556
.	O	O:0.999835
	
This	O	O:0.999708
link	O	O:0.998986
is	O	O:0.999984
useful	O	O:0.998593
,	O	O:0.999993
although	O	O:0.999872
I	O	O:0.999978
cannot	O	O:0.999988
figure	O	O:0.999678
out	O	O:0.999964
how	O	O:0.999976
to	O	O:0.999990
apply	O	O:0.987365
it	O	O:0.999946
to	O	O:0.999992
my	O	O:0.999998
situation	O	O:0.999518
.	O	O:0.999943
	
I	O	O:0.999912
use	O	O:0.999978
Pandas	O	O:0.989768
in	O	O:0.999754
IPython	O	O:0.999453
Notebook	O	O:0.999905
rather	O	O:0.999873
than	O	O:0.999940
IPython	O	O:0.999920
as	O	O:0.999998
a	O	O:0.999950
terminal	O	O:0.998478
shell	O	O:0.999914
,	O	O:0.999991
I	O	O:0.999991
don't	O	O:0.999936
see	O	O:0.999975
any	O	O:0.999993
options	O	O:0.999794
in	O	O:0.999955
`	O	O:0.999979
set_option	B-API	B-API:0.996094
`	O	O:0.999997
that	O	O:0.999485
supports	O	O:0.999964
the	O	O:0.999987
colouring	O	O:0.997466
,	O	O:0.999990
it	O	O:0.999996
maybe	O	O:0.999989
something	O	O:0.999987
that	O	O:0.999937
could	O	O:0.999990
be	O	O:1.000000
done	O	O:0.999987
as	O	O:0.999993
a	O	O:0.999966
plugin	O	O:0.999351
to	O	O:0.999993
apply	O	O:0.994967
some	O	O:0.999816
css	O	O:0.999736
or	O	O:0.999983
output	O	O:0.999562
formatting	O	O:0.999760
.	O	O:0.999642
	
This	O	O:0.998834
is	O	O:0.999991
the	O	O:0.999990
only	O	O:0.999918
way	O	O:0.999977
I	O	O:0.999996
think	O	O:0.999977
you	O	O:0.999869
could	O	O:0.999939
achieve	O	O:0.999995
this	O	O:0.999868
	
Sounds	O	O:0.999836
like	O	O:0.999880
you're	O	O:0.999989
looking	O	O:0.999768
for	O	O:0.999992
the	O	O:0.999912
`	O	O:0.999752
DataFrame.apply()	B-API	B-API:0.999997
`	O	O:0.999942
method	O	O:0.999287
.	O	O:0.999937
	
The	O	O:0.999834
`	O	O:0.999977
apply	O	B-API:0.997610
`	O	O:0.999872
method	O	O:0.997909
is	O	O:0.999998
a	O	O:0.999990
very	O	O:0.998744
general	O	O:0.999545
way	O	O:0.999946
to	O	O:0.999985
apply	O	O:0.992196
a	O	O:0.999873
function	O	O:0.999595
across	O	O:0.999853
either	O	O:0.999977
the	O	O:0.999998
columns	O	O:0.999963
or	O	O:1.000000
rows	O	O:0.999968
of	O	O:0.999999
a	O	O:0.999977
`	O	O:0.999971
DataFrame	B-API	O:0.722072
`	O	O:0.999922
:	O	O:0.999865
#CODE	O	O:0.999908
	
By	O	O:0.999893
default	O	O:0.999412
it	O	O:0.999983
applies	O	O:0.999972
a	O	O:0.999975
function	O	O:0.999369
to	O	O:0.999995
the	O	O:1.000000
columns	O	O:0.999483
,	O	O:0.999995
but	O	O:0.999997
by	O	O:0.999992
passing	O	O:0.999270
`	O	O:0.999922
axis=1	O	O:0.993122
`	O	O:0.999997
you	O	O:0.999883
can	O	O:0.999997
apply	O	O:0.996849
a	O	O:0.999946
function	O	O:0.999399
to	O	O:0.999997
each	O	O:0.999951
row	O	O:0.999489
:	O	O:0.999973
#CODE	O	O:0.999893
	
You	O	O:0.999926
can	O	O:0.999960
apply	O	O:0.949872
the	O	O:0.999720
swap_axes	O	O:0.976124
method	O	O:0.999895
after	O	O:0.999725
construction	O	O:0.997706
:	O	O:0.999938
#CODE	O	O:0.999694
	
@USER	O	O:0.998126
wasn't	O	O:0.999922
aware	O	O:0.999881
of	O	O:0.999997
that	O	O:0.999771
I	O	O:0.999999
knew	O	O:0.999944
that	O	O:0.999304
`	O	O:0.999996
apply	O	B-API:0.974707
`	O	O:0.999936
did	O	O:0.997489
iterate	O	O:0.999551
but	O	O:0.999966
thought	O	O:0.999320
`	O	O:0.999975
map	O	B-API:0.996536
`	O	O:0.999972
didn't	O	O:0.995155
	
You	O	O:0.999841
can	O	O:0.999990
just	O	O:0.999986
use	O	O:0.999988
`	O	O:0.999892
apply	O	B-API:0.993888
`	O	O:0.999914
and	O	O:0.999918
assign	O	O:0.999880
direct	O	O:0.998814
to	O	O:0.999982
the	O	O:1.000000
column	O	O:0.999984
like	O	O:0.999981
so	O	O:0.999998
`	O	O:0.999996
df	O	O:0.999067
[	O	O:0.999981
'	O	O:0.999980
start_time	O	O:0.999070
']	O	O:0.999967
=	O	O:0.999754
df	O	O:0.999137
[	O	O:0.999925
'	O	O:0.999979
start_time	O	O:0.999226
']	O	O:0.999893
.apply	B-API	B-API:0.998859
(	O	O:0.999887
lambda	O	O:0.998794
x	O	O:0.999245
:	O	O:0.999944
dt.datetime.fromtimestamp	O	O:0.988302
(	O	O:0.999988
x	O	O:0.999955
))`	O	O:0.997801
,	O	O:0.999998
this	O	O:0.999676
is	O	O:0.999985
better	O	O:0.999887
than	O	O:0.999940
a	O	O:0.999995
list	O	O:0.995465
comprehension	O	O:0.999185
	
Use	O	O:0.999700
`	O	O:0.999974
apply	O	B-API:0.992592
`	O	O:0.999876
#CODE	O	O:0.993977
	
Python	O	O:0.999359
using	O	O:0.999930
lambda	O	O:0.997820
to	O	O:0.999907
apply	O	O:0.816519
pd.DataFrame	B-API	B-API:0.974484
instead	O	O:0.999490
for	O	O:0.999969
nested	O	O:0.998351
loop	O	O:0.994973
is	O	O:0.999973
it	O	O:0.999976
possible	O	O:0.999793
?	O	O:0.999967
	
I'm	O	O:0.999944
trying	O	O:0.999883
to	O	O:0.999978
avoid	O	O:0.999939
nested	O	O:0.999712
loop	O	O:0.999189
in	O	O:0.999984
python	O	O:0.999947
here	O	O:0.999970
by	O	O:0.999980
using	O	O:0.999942
lambda	O	O:0.996938
apply	O	B-API:0.657045
to	O	O:0.999897
create	O	O:0.999981
a	O	O:0.999998
new	O	O:0.999878
column	O	O:0.999754
	
Your	O	O:0.999577
apply	O	B-API:0.676692
doesn't	O	O:0.999742
work	O	O:0.999883
as	O	O:0.999999
by	O	O:0.999944
default	O	O:0.999150
it	O	O:0.999873
works	O	O:0.999956
column	O	O:0.999965
wise	O	O:0.999852
,	O	O:0.999999
plus	O	O:0.999937
you	O	O:0.999966
misunderstand	O	O:0.999981
what	O	O:0.999964
the	O	O:0.999992
lambda	O	O:0.999886
parameters	O	O:0.999642
actually	O	O:0.999970
represent	O	O:0.999878
so	O	O:0.999995
your	O	O:0.999944
lambda	O	O:0.999606
func	O	O:0.996890
does	O	O:0.999756
not	O	O:0.999980
map	O	O:0.742123
to	O	O:0.999996
the	O	O:1.000000
columns	O	O:0.999956
as	O	O:0.999995
you	O	O:0.999968
expected	O	O:0.999927
.	O	O:0.999958
	
If	O	O:0.999941
you	O	O:0.999911
wanted	O	O:0.999977
it	O	O:0.999993
to	O	O:0.999999
work	O	O:0.999996
row	O	O:0.999993
wise	O	O:0.999939
you	O	O:0.999996
need	O	O:0.999988
to	O	O:0.999998
do	O	O:1.000000
something	O	O:0.999980
like	O	O:0.999971
this	O	O:0.999984
`	O	O:0.999996
df	O	O:0.998959
[	O	O:0.999982
'	O	O:0.999984
c	O	O:0.999937
']	O	O:0.999973
=	O	O:0.998700
df.apply	B-API	B-API:0.990147
(	O	O:0.999975
lambda	O	O:0.998755
row	O	O:0.999290
:	O	O:0.999951
row.A	O	O:0.997183
+	O	O:0.999987
row.B	O	O:0.998051
,	O	O:0.999983
axis=1	O	O:0.999528
)`	O	O:0.999199
but	O	O:0.999839
@USER	O	O:0.999569
'	O	O:0.999985
s	O	O:0.999847
answer	O	O:0.999893
will	O	O:0.999568
achieve	O	O:0.999945
what	O	O:0.999928
you	O	O:0.999981
want	O	O:0.999944
and	O	O:0.999981
is	O	O:0.999990
simpler	O	O:0.993346
	
As	O	O:0.999913
@USER	O	O:0.999933
points	O	O:0.999909
out	O	O:0.999894
in	O	O:0.999998
the	O	O:0.999979
comment	O	O:0.999580
,	O	O:0.999996
the	O	O:0.999987
argument	O	O:0.999908
to	O	O:0.999992
the	O	O:0.999998
function	O	O:0.999867
in	O	O:0.999959
`	O	O:0.999996
apply	O	B-API:0.951214
`	O	O:0.999879
is	O	O:0.999953
a	O	O:0.999990
series	O	O:0.999793
,	O	O:0.999996
by	O	O:0.999992
default	O	O:0.999721
on	O	O:0.999971
axis	O	O:0.999948
`	O	O:0.999992
0	O	O:0.999351
`	O	O:0.999991
which	O	O:0.999824
are	O	O:0.999999
rows	O	O:0.997386
(	O	O:0.999986
axis	O	O:0.999972
`	O	O:0.999978
1	O	O:0.997429
`	O	O:0.999997
means	O	O:0.999632
columns	O	O:0.999189
):	O	O:0.999951
#CODE	O	O:0.999742
	
Notice	O	O:0.999868
the	O	O:0.999972
overlap	O	O:0.998270
between	O	O:0.999708
IDs	O	O:0.999652
0	O	O:0.999881
and	O	O:0.999952
1	O	O:0.999804
and	O	O:0.999774
1	O	O:0.999912
and	O	O:0.999943
2	O	O:0.999935
at	O	O:0.999979
the	O	O:0.999963
edges	O	O:0.995577
(	O	O:0.999979
I	O	O:0.999998
dont	O	O:0.999983
want	O	O:0.999927
that	O	O:0.999939
,	O	O:1.000000
messes	O	O:0.999774
up	O	O:0.999988
my	O	O:0.999978
calculations	O	O:0.999423
)	O	O:0.999981
.	O	O:0.999766
	
One	O	O:0.999952
possible	O	O:0.999789
way	O	O:0.999986
to	O	O:0.999987
get	O	O:0.999982
around	O	O:0.999976
this	O	O:0.999803
is	O	O:0.999995
to	O	O:0.999986
using	O	O:0.999993
groupby	B-API	B-API:0.994714
on	O	O:0.999694
IDs	O	O:0.999324
and	O	O:0.999998
then	O	O:0.999949
loop	O	O:0.999960
through	O	O:0.999917
that	O	O:0.999521
groupby	B-API	B-API:0.963709
and	O	O:0.999998
then	O	O:0.999768
apply	O	O:0.954728
a	O	O:0.999890
rolling_sum	B-API	B-API:0.999926
	
The	O	O:0.999973
data	O	O:0.999935
look	O	O:0.999914
roughly	O	O:0.999922
like	O	O:0.999972
this	O	O:0.999947
,	O	O:0.999999
where	O	O:0.999973
I	O	O:0.999998
only	O	O:0.999992
want	O	O:0.999969
this	O	O:0.999952
to	O	O:0.999999
apply	O	O:0.985481
to	O	O:0.999983
columns	O	O:0.999995
starting	O	O:0.999940
with	O	O:0.999875
T_	O	O:0.999379
:	O	O:0.999964
#CODE	O	O:0.999884
	
This	O	O:0.999777
gets	O	O:0.999778
the	O	O:0.999975
job	O	O:0.999936
done	O	O:0.999809
,	O	O:0.999988
except	O	O:0.999990
that	O	O:0.999923
I	O	O:1.000000
need	O	O:0.999993
to	O	O:0.999960
apply	O	O:0.985484
it	O	O:0.999950
to	O	O:0.999998
only	O	O:0.999999
6	O	O:0.999990
of	O	O:0.999988
the	O	O:0.999995
many	O	O:0.999987
columns	O	O:0.999655
in	O	O:0.999990
my	O	O:0.999988
dataframe	B-API	O:0.993201
.	O	O:0.999898
	
I	O	O:0.999922
should	O	O:0.999981
have	O	O:0.999868
made	O	O:0.999899
it	O	O:0.999999
more	O	O:0.999965
clear	O	O:0.999880
above	O	O:0.999962
that	O	O:0.999937
there	O	O:0.999961
are	O	O:0.999999
additional	O	O:0.999858
columns	O	O:0.999926
containing	O	O:0.999379
strings	O	O:0.999964
that	O	O:0.999906
I	O	O:0.999999
don't	O	O:0.999994
need	O	O:0.999841
to	O	O:0.999992
replace	O	O:0.999345
.	O	O:0.999898
	
How	O	O:0.999794
would	O	O:0.999937
I	O	O:0.999998
do	O	O:0.999998
that	O	O:0.999511
?	O	O:0.999979
	
Update	O	O:0.996737
:	O	O:0.999969
I've	O	O:0.999935
combined	O	O:0.999974
this	O	O:0.999937
solution	O	O:0.999940
with	O	O:0.999990
using	O	O:0.999970
a	O	O:0.999985
dict	O	O:0.998983
to	O	O:0.999990
apply	O	O:0.976607
the	O	O:0.997382
fillna	B-API	B-API:0.990666
method	O	O:0.999957
as	O	O:0.999987
suggested	O	O:0.999772
here	O	O:0.999134
.	O	O:0.999856
	
I	O	O:0.999916
wouldn't	O	O:0.999989
have	O	O:0.999836
known	O	O:0.999936
how	O	O:0.999993
to	O	O:0.999980
use	O	O:0.999997
zip	O	O:0.997532
to	O	O:0.999993
create	O	O:0.999994
a	O	O:0.999997
handy	O	O:0.999760
dict	O	O:0.999931
,	O	O:0.999995
though	O	O:0.999958
,	O	O:0.999996
so	O	O:0.999995
the	O	O:0.999983
answer	O	O:0.999718
is	O	O:0.999987
rather	O	O:0.999945
split	O	O:0.996377
between	O	O:0.999368
the	O	O:0.999994
two	O	O:0.999975
of	O	O:0.999988
you	O	O:0.999865
.	O	O:0.999988
	
Either	O	O:0.999698
way	O	O:0.999915
,	O	O:0.999990
learned	O	O:0.999849
a	O	O:0.999991
ton	O	O:0.999636
from	O	O:0.999991
this	O	O:0.999924
so	O	O:0.999993
thanks	O	O:0.999395
.	O	O:0.999898
	
If	O	O:0.999971
you	O	O:0.999977
perform	O	O:0.999922
an	O	O:0.999995
operation	O	O:0.999971
on	O	O:0.999999
a	O	O:1.000000
single	O	O:0.999851
column	O	O:0.999961
the	O	O:0.999981
return	O	O:0.998580
will	O	O:0.999879
be	O	O:1.000000
a	O	O:0.999998
series	O	O:0.998351
with	O	O:0.999840
multiindex	O	O:0.999872
and	O	O:0.999997
you	O	O:0.999990
can	O	O:0.999984
simply	O	O:0.999999
apply	O	O:0.698225
`	O	O:0.999802
pd.DataFrame	B-API	B-API:0.997811
`	O	O:0.999983
to	O	O:0.999887
it	O	O:0.999999
and	O	O:0.999999
then	O	O:0.999648
reset_index	B-API	B-API:0.971228
.	O	O:0.999872
	
Also	O	O:0.999782
,	O	O:0.999994
you	O	O:0.999956
might	O	O:0.999956
instead	O	O:0.999998
want	O	O:0.999988
to	O	O:0.999996
look	O	O:0.999995
at	O	O:0.999997
using	O	O:0.999897
`	O	O:0.999916
apply	O	B-API:0.997095
`	O	O:0.999941
,	O	O:0.999517
which	O	O:0.999983
lets	O	O:0.999445
you	O	O:0.999993
return	O	O:0.999811
an	O	O:0.999976
entire	O	O:0.999757
DataFrame	B-API	O:0.994773
.	O	O:0.999805
	
This	O	O:0.999761
way	O	O:0.999971
you	O	O:0.999969
could	O	O:0.999973
,	O	O:1.000000
instead	O	O:0.999993
of	O	O:0.999996
collapsing	O	O:0.999911
the	O	O:0.999994
items	O	O:0.999888
into	O	O:0.999699
a	O	O:0.999997
list	O	O:0.992472
,	O	O:0.999995
actually	O	O:0.999978
return	O	O:0.999813
a	O	O:0.999982
new	O	O:0.999510
grouped	O	O:0.999934
table	O	O:0.999941
with	O	O:0.999974
one	O	O:0.999991
row	O	O:0.999972
for	O	O:0.999993
each	O	O:0.999881
unique	O	O:0.913637
value	O	O:0.999873
in	O	O:0.999971
the	O	O:0.999987
source	O	O:0.999710
column	O	O:0.999517
.	O	O:0.999922
	
Where	O	O:0.999834
the	O	O:0.999931
argument	O	O:0.999913
x	O	O:0.999441
is	O	O:0.999988
the	O	O:0.999902
Column	O	O:0.999287
int	O	O:0.998714
he	O	O:0.999827
DF	O	O:0.999982
?	O	O:0.999918
	
Thanks	O	O:0.999822
this	O	O:0.999208
is	O	O:0.999983
helpful	O	O:0.994225
.	O	O:0.999881
	
It	O	O:0.999966
seems	O	O:0.999897
I	O	O:0.999993
don't	O	O:0.999991
need	O	O:0.999829
to	O	O:0.999999
actually	O	O:1.000000
iterate	O	O:0.999922
over	O	O:0.999006
the	O	O:0.999951
index	O	O:0.999855
within	O	O:0.999870
each	O	O:0.999895
group	O	O:0.997604
.	O	O:0.999917
	
How	O	O:0.999656
would	O	O:0.999964
one	O	O:0.999995
do	O	O:0.999996
that	O	O:0.999963
if	O	O:0.999981
it	O	O:0.999994
were	O	O:0.999916
necessary	O	O:0.999933
?	O	O:0.999978
	
Apply	O	O:0.999312
seems	O	O:0.999866
like	O	O:0.999860
it	O	O:0.999995
could	O	O:0.999972
be	O	O:0.999999
useful	O	O:0.999916
as	O	O:0.999984
well	O	O:0.998737
,	O	O:0.999982
and	O	O:0.999994
that	O	O:0.999934
seems	O	O:0.999961
to	O	O:0.999999
work	O	O:0.999991
in	O	O:0.999998
prety	O	O:0.999887
much	O	O:0.999869
the	O	O:0.999992
same	O	O:0.999669
way	O	O:0.999843
.	O	O:0.999904
	
I'll	O	O:0.999742
have	O	O:0.999958
a	O	O:0.999996
look	O	O:0.998216
now	O	O:0.999921
.	O	O:0.999990
thanks	O	O:0.999921
a	O	O:0.999977
lot	O	O:0.998378
.	O	O:0.999789
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999653
to	O	O:0.999987
apply	O	O:0.942632
Logistic	O	O:0.996506
Regression	O	O:0.998154
in	O	O:0.999977
Python	O	O:0.999745
using	O	O:0.999913
statsmodel.api.Logit	O	O:0.800323
.	O	O:0.999107
	
When	O	O:0.999554
I	O	O:0.999999
want	O	O:0.999990
to	O	O:0.999947
resample	O	O:0.956954
my	O	O:0.999975
time	O	O:0.999979
series	O	O:0.999993
data	O	O:0.999950
,	O	O:0.999997
it	O	O:0.999964
is	O	O:0.999995
very	O	O:0.999820
straightforward	O	O:0.999935
to	O	O:0.999989
apply	O	O:0.960036
the	O	O:0.999742
arithmetic	O	O:0.999818
mean	O	O:0.997528
function	O	O:0.999884
.	O	O:0.999920
	
`	O	O:0.999950
df.date	O	O:0.960790
=	O	O:0.999971
df.date.apply	O	O:0.988972
(	O	O:0.999961
lambda	O	O:0.999222
d	O	O:0.999750
:	O	O:0.999873
datetime.strptime	O	O:0.978012
(	O	O:0.999989
d	O	O:0.999911
,	O	O:0.999973
"	O	O:0.999960
%Y-%m-%d	O	O:0.996565
"))`	O	O:0.999936
here	O	O:0.998332
which	O	O:0.999874
doesn't	O	O:0.999946
work	O	O:0.999952
since	O	O:0.999979
I'm	O	O:0.999985
working	O	O:0.999943
with	O	O:0.999902
integers	O	O:0.997799
,	O	O:0.999995
not	O	O:0.999979
strings	O	O:0.999331
.	O	O:0.999908
	
I	O	O:0.999989
think	O	O:0.999942
I	O	O:0.999990
need	O	O:0.999987
to	O	O:0.999961
use	O	O:0.999995
`	O	O:0.999961
datetime.date.fromtimestamp	O	O:0.833008
`	O	O:0.999973
but	O	O:0.998937
I'm	O	O:0.999981
not	O	O:0.999986
quite	O	O:0.999963
sure	O	O:0.999885
how	O	O:0.999980
to	O	O:0.999993
apply	O	O:0.997730
this	O	O:0.999757
to	O	O:0.999994
the	O	O:1.000000
whole	O	O:0.999862
of	O	O:0.999981
df.date	O	O:0.985011
.	O	O:0.999937
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
I	O	O:0.999990
think	O	O:0.999940
I	O	O:0.999995
have	O	O:0.999977
finally	O	O:0.998897
solved	O	O:0.999925
the	O	O:0.999916
problem	O	O:0.998329
.	O	O:0.999839
	
I	O	O:0.999944
suspect	O	O:0.999920
that	O	O:0.999836
yemu's	O	O:0.999743
answer	O	O:0.999575
is	O	O:0.999977
good	O	O:0.993194
,	O	O:0.999992
but	O	O:0.999982
I	O	O:0.999975
prefer	O	O:0.999990
this	O	O:0.999786
as	O	O:0.999988
it	O	O:0.999920
was	O	O:0.999972
an	O	O:0.999994
exercise	O	O:0.999928
in	O	O:0.999972
finally	O	O:0.999842
learning	O	O:0.999595
how	O	O:0.999886
to	O	O:0.999989
apply	O	O:0.986437
my	O	O:0.999954
own	O	O:0.999328
functions	O	O:0.999183
:	O	O:0.999931
#CODE	O	O:0.999853
	
Working	O	O:0.992844
and	O	O:0.999954
tuning	O	O:0.999985
your	O	O:0.999931
data	O	O:0.999948
from	O	O:0.999989
the	O	O:0.999980
stacked	O	O:0.999865
dataframe	B-API	O:0.999191
above	O	O:0.999507
is	O	O:0.999980
straightforward	O	O:0.994717
.	O	O:0.999885
	
You	O	O:0.999870
can	O	O:0.999973
follow	O	O:0.999993
by	O	O:0.999993
resetting	O	O:0.998795
the	O	O:0.999698
index	O	O:0.999865
,	O	O:0.999994
split	O	O:0.998357
it	O	O:0.999995
into	O	O:0.999922
year	O	O:0.999808
month	O	O:0.998774
day	O	O:0.999973
columns	O	O:0.999542
,	O	O:0.999989
and	O	O:0.999995
apply	O	O:0.572200
the	O	O:0.999870
math	O	O:0.999275
on	O	O:0.999974
the	O	O:0.999997
non	O	O:0.999957
NaN	O	O:0.999799
data	O	O:0.999980
that	O	O:0.999975
are	O	O:0.999998
in	O	O:0.999999
a	O	O:0.999998
single	O	O:0.999849
column	O	O:0.999903
now	O	O:0.999874
.	O	O:0.999945
	
So	O	O:0.999962
you	O	O:0.999991
need	O	O:0.999986
to	O	O:0.999999
apply	O	O:0.982695
an	O	O:0.999959
aggregation	O	O:0.996744
operation	O	O:0.997707
(	O	O:0.999965
e.g.	O	O:0.999763
`	O	O:0.999990
sum	O	O:0.994671
`	O	O:0.999999
,	O	O:0.999984
or	O	O:0.999994
use	O	O:0.999840
`	O	O:0.999985
apply	O	B-API:0.909621
`)	O	O:0.999952
to	O	O:0.999979
your	O	O:0.999994
grouped	O	O:0.999761
frame	O	O:0.999997
,	O	O:0.999982
which	O	O:0.999971
will	O	O:0.999989
then	O	O:0.999995
create	O	O:0.999998
a	O	O:0.999999
new	O	O:0.999924
frame	O	O:0.999994
,	O	O:0.999991
which	O	O:0.999982
you	O	O:0.999975
can	O	O:0.999988
`	O	O:0.999999
to_excel	B-API	B-API:0.997873
`	O	O:0.999989
.	O	O:0.999365
	
This	O	O:0.999702
makes	O	O:0.999701
sense	O	O:0.999731
.	O	O:0.999836
	
I	O	O:0.999990
suppose	O	O:0.999914
I	O	O:0.999943
should	O	O:0.999987
be	O	O:0.999993
using	O	O:0.999984
code	O	O:0.998075
that	O	O:0.999947
just	O	O:0.999988
sorts	O	O:0.999942
if	O	O:0.999985
I	O	O:0.999998
want	O	O:0.999980
to	O	O:0.999974
organize	O	O:0.999997
by	O	O:0.999995
groups	O	O:0.999746
for	O	O:0.999976
the	O	O:0.999922
output	O	O:0.995063
,	O	O:0.999861
but	O	O:0.999968
not	O	O:0.999979
apply	O	O:0.867360
any	O	O:0.999894
aggregation	O	O:0.996652
operations	O	O:0.999040
.	O	O:0.999635
	
Thanks	O	O:0.999013
for	O	O:0.999987
the	O	O:0.999972
clear	O	O:0.998704
explanation	O	O:0.999772
-	O	O:0.999994
the	O	O:0.999988
fact	O	O:0.999903
that	O	O:0.999983
some	O	O:0.999879
output	O	O:0.999869
did	O	O:0.999969
make	O	O:0.999891
it	O	O:0.999994
to	O	O:0.999995
the	O	O:1.000000
excel	O	O:0.999664
file	O	O:0.999972
made	O	O:0.999889
me	O	O:0.999990
think	O	O:0.999846
it	O	O:0.999995
ought	O	O:0.999879
to	O	O:0.999996
work	O	O:0.999997
the	O	O:0.999997
way	O	O:0.999962
I	O	O:0.999990
supposed	O	O:0.999921
,	O	O:0.999892
but	O	O:0.999934
obviously	O	O:0.999822
not	O	O:0.999941
.	O	O:0.999960
	
But	O	O:0.999911
for	O	O:0.999995
a	O	O:0.999988
larger	O	O:0.999406
set	O	O:0.999684
of	O	O:0.999980
replaces	O	O:0.998515
you	O	O:0.999973
would	O	O:0.999994
want	O	O:0.999995
to	O	O:0.999996
use	O	O:1.000000
one	O	O:0.999961
of	O	O:0.999985
the	O	O:0.999988
two	O	O:0.999987
other	O	O:0.999982
methods	O	O:0.999883
or	O	O:0.999984
use	O	O:0.999904
"	O	O:0.999968
apply	O	B-API:0.900917
"	O	O:0.999914
with	O	O:0.999681
a	O	O:0.999989
lambda	O	O:0.988744
function	O	O:0.999291
(	O	O:0.999955
for	O	O:0.999994
value	O	O:0.999918
transformations	O	O:0.999168
)	O	O:0.999976
.	O	O:0.999813
	
Last	O	O:0.989112
but	O	O:0.999964
not	O	O:0.999955
least	O	O:0.999856
:	O	O:0.999997
you	O	O:0.999983
can	O	O:0.999993
use	O	O:0.999993
.fillna	B-API	B-API:0.995748
(	O	O:0.999791
'	O	O:0.999975
bla	O	O:0.999935
')	O	O:0.999992
to	O	O:0.999956
rapidly	O	O:0.999997
fill	O	O:0.998668
up	O	O:0.999958
NA	O	O:0.999173
values	O	O:0.998752
.	O	O:0.999797
	
Your	O	O:0.999666
question	O	O:0.998960
is	O	O:0.999997
a	O	O:0.999988
little	O	O:0.998792
unclear	O	O:0.997820
,	O	O:0.999959
but	O	O:0.999959
you	O	O:0.999989
seem	O	O:0.999972
to	O	O:0.999996
be	O	O:1.000000
trying	O	O:0.999971
to	O	O:0.999990
apply	O	O:0.989807
a	O	O:0.999850
function	O	O:0.999427
to	O	O:0.999999
each	O	O:0.999997
row	O	O:0.999977
of	O	O:0.999980
the	O	O:0.999956
DataFrame	B-API	O:0.993385
.	O	O:0.999809
	
Try	O	O:0.999633
#CODE	O	O:0.999469
	
I	O	O:0.999943
would	O	O:0.999984
consider	O	O:0.999938
using	O	O:0.999995
a	O	O:0.999680
[	O	O:0.998261
Pandas	O	O:0.999893
DataFrame	B-API	O:0.973497
]	O	O:0.999192
(	O	O:0.999925
#URL	O	O:0.999402
)	O	O:0.999940
.	O	O:0.999740
	
You	O	O:0.999865
could	O	O:0.999979
have	O	O:0.999975
an	O	O:0.999998
index	O	O:0.999949
for	O	O:0.999993
the	O	O:0.999878
ID	O	O:0.983820
(	O	O:0.999967
dict	O	O:0.999913
key	O	O:0.999971
in	O	O:0.999998
your	O	O:0.999954
example	O	O:0.999746
)	O	O:0.999987
.	O	O:0.999850
	
Then	O	O:0.999690
perform	O	O:0.999898
an	O	O:0.999994
outer	O	O:0.963320
join	O	B-API:0.937716
operation	O	O:0.999466
and	O	O:0.999997
apply	O	O:0.918593
a	O	O:0.999099
function	O	O:0.999456
that	O	O:0.999944
does	O	O:0.999979
the	O	O:0.999997
comparison	O	O:0.999822
to	O	O:0.999999
the	O	O:0.999998
result	O	O:0.999783
.	O	O:0.999919
	
Of	O	O:0.999954
course	O	O:0.999934
there	O	O:0.999987
will	O	O:0.999852
be	O	O:0.999998
ways	O	O:0.999956
to	O	O:0.999973
do	O	O:0.999999
it	O	O:0.999993
with	O	O:0.999874
`	O	O:0.999993
dict	O	O:0.993713
`	O	O:0.999979
,	O	O:0.999880
but	O	O:0.999982
it	O	O:0.999985
seems	O	O:0.999992
like	O	O:0.999971
you	O	O:0.999995
really	O	O:0.999983
need	O	O:0.999992
a	O	O:0.999998
bit	O	O:0.999774
of	O	O:0.999992
relational	O	O:0.996792
logic	O	O:0.999949
on	O	O:0.999988
the	O	O:0.999981
IDs	O	O:0.999903
followed	O	O:0.999948
by	O	O:0.999994
application	O	O:0.999980
of	O	O:0.999977
an	O	O:0.999982
arbitrary	O	O:0.999985
piece	O	O:0.999910
of	O	O:0.999965
code	O	O:0.997497
(	O	O:0.999997
the	O	O:0.999988
comparison	O	O:0.999655
operations	O	O:0.999845
)	O	O:0.999964
.	O	O:0.999873
	
That's	O	O:0.999700
what	O	O:0.999869
Pandas	O	O:0.999241
is	O	O:0.999994
good	O	O:0.997365
at	O	O:0.999980
.	O	O:0.999799
	
One	O	O:0.999940
of	O	O:0.999983
the	O	O:0.999976
distance	O	O:0.999909
metrics	O	O:0.997835
(	O	O:0.999989
jaro	O	O:0.997996
,	O	O:0.999999
perhaps	O	O:0.999911
)	O	O:0.999990
in	O	O:0.999988
the	O	O:0.999982
`	O	O:0.999978
jellyfish	O	O:0.944025
`	O	O:0.999993
library	O	O:0.996511
would	O	O:0.999975
probably	O	O:0.999910
apply	O	O:0.747112
.	O	O:0.998932
	
Here	O	O:0.998747
is	O	O:0.999983
an	O	O:0.999869
[	O	O:0.999992
example	O	O:0.999882
answer	O	O:0.999561
]	O	O:0.999706
(	O	O:0.999884
#URL	O	O:0.999619
)	O	O:0.999988
that	O	O:0.999907
prints	O	O:0.999953
out	O	O:0.999996
words	O	O:0.999952
of	O	O:0.999997
a	O	O:0.999992
certain	O	O:0.998835
distance	O	O:0.999778
,	O	O:0.999983
but	O	O:0.999988
you	O	O:0.999956
could	O	O:0.999997
just	O	O:0.999997
as	O	O:0.999999
easily	O	O:0.999869
print	O	O:0.999791
out	O	O:0.999916
the	O	O:0.999991
distance	O	O:0.999731
itself	O	O:0.999683
...	O	O:0.999818
	
Iv'e	O	O:0.999541
tried	O	O:0.999905
to	O	O:0.999972
use	O	O:0.999994
the	O	O:0.999273
groupby	B-API	B-API:0.992599
mechanism	O	O:0.999486
,	O	O:0.999940
but	O	O:0.999981
with	O	O:0.999939
no	O	O:0.999982
success	O	O:0.999886
.	O	O:0.999990
using	O	O:0.999947
the	O	O:0.999937
simple	O	O:0.991810
apply	O	B-API:0.502422
mechanism	O	O:0.997739
is	O	O:0.999909
ok	O	O:0.999225
,	O	O:0.999966
but	O	O:0.999983
seems	O	O:0.999968
a	O	O:0.999997
little	O	O:0.998606
cumbersome	O	O:0.995622
(	O	O:0.999980
I'll	O	O:0.999916
need	O	O:0.999949
to	O	O:0.999999
keep	O	O:0.999995
a	O	O:0.999991
dictionary	O	O:0.999920
containing	O	O:0.999925
a	O	O:0.999997
counter	O	O:0.999829
of	O	O:0.999996
appearances	O	O:0.999673
for	O	O:0.999996
each	O	O:0.999261
ID	O	O:0.999045
)	O	O:0.999935
	
Can	O	O:0.999807
you	O	O:0.999926
explain	O	O:0.999845
what	O	O:0.999764
is	O	O:0.999996
happing	O	O:0.999314
here	O	O:0.999351
?	O	O:0.999937
	
because	O	O:0.999386
i	O	O:0.999675
was	O	O:0.999992
trying	O	O:0.999900
to	O	O:0.999964
use	O	O:0.999954
groupby	B-API	B-API:0.998598
and	O	O:0.999923
apply	O	B-API:0.955636
and	O	O:0.999697
what	O	O:0.999245
i	O	O:0.999850
got	O	O:0.999981
back	O	O:0.998961
was	O	O:0.999993
a	O	O:0.999995
series	O	O:0.999819
with	O	O:0.999974
the	O	O:0.999980
ID	O	O:0.999506
as	O	O:0.999958
index	O	O:0.999085
and	O	O:0.999993
the	O	O:0.999992
modified	O	O:0.999354
ID's	O	O:0.999839
as	O	O:0.999995
lists	O	O:0.999222
for	O	O:0.999919
each	O	O:0.998281
index	O	O:0.998930
.	O	O:0.999987
what	O	O:0.999585
is	O	O:0.999998
going	O	O:0.999743
on	O	O:0.999993
here	O	O:0.999689
under	O	O:0.999979
the	O	O:0.999974
hood	O	O:0.998915
?	O	O:0.999941
	
what	O	O:0.998355
is	O	O:0.999991
the	O	O:0.999974
translation	O	O:0.999899
into	O	O:0.999710
natural	O	O:0.999912
language	O	O:0.999936
of	O	O:0.999987
the	O	O:0.999989
code	O	O:0.999885
above	O	O:0.999847
?	O	O:0.999957
	
`	O	O:0.999948
apply	O	B-API:0.990883
`	O	O:0.999876
and	O	O:0.999270
`	O	O:0.999995
transform	O	B-API:0.989239
`	O	O:0.999991
do	O	O:0.999855
similar	O	O:0.999946
things	O	O:0.998882
.	O	O:0.999831
	
`	O	O:0.999960
apply	O	B-API:0.981571
`	O	O:0.999882
is	O	O:0.999950
a	O	O:0.999986
complicated	O	O:0.997035
beast	O	O:0.999802
because	O	O:0.999729
it	O	O:0.999958
behaves	O	O:0.999981
differently	O	O:0.999985
depending	O	O:0.999714
on	O	O:0.999946
the	O	O:0.999997
type	O	O:0.999681
of	O	O:0.999967
object	O	O:0.999913
the	O	O:0.999942
function	O	O:0.999778
returns	O	O:0.998662
.	O	O:0.999880
	
I	O	O:0.999957
have	O	O:0.999941
not	O	O:0.999952
attempted	O	O:0.999987
to	O	O:0.999991
memorize	O	O:0.999604
[	O	O:0.999997
the	O	O:0.999995
rules	O	O:0.998556
which	O	O:0.999873
govern	O	O:0.999903
this	O	O:0.999975
behavior	O	O:0.999832
]	O	O:0.999630
(	O	O:0.999662
#URL	O	O:0.999696
)	O	O:0.999988
,	O	O:0.999991
I	O	O:0.999997
simply	O	O:0.999970
try	O	O:0.999984
a	O	O:0.999990
few	O	O:0.999888
plausible	O	O:0.999826
variations	O	O:0.999946
until	O	O:0.999778
I	O	O:0.999997
find	O	O:0.999973
the	O	O:0.999963
one	O	O:0.999973
that	O	O:0.999660
works	O	O:0.999954
.	O	O:0.999962
	
In	O	O:0.999984
this	O	O:0.999967
case	O	O:0.999973
,	O	O:0.999999
since	O	O:0.999941
I	O	O:0.999995
knew	O	O:0.999971
transform	O	B-API:0.932591
is	O	O:0.999935
intended	O	O:0.999089
for	O	O:0.999990
changing	O	O:0.998858
a	O	O:0.999917
Series	O	O:0.999630
to	O	O:0.999989
another	O	O:0.999993
Series	O	O:0.999890
*	O	O:0.999995
of	O	O:0.999997
equal	O	O:0.999524
length*	O	O:0.999648
,	O	O:0.999976
I	O	O:0.999986
tried	O	O:0.999859
transform	O	B-API:0.898946
.	O	O:0.999515
	
Possibly	O	O:0.999684
useful	O	O:0.997140
,	O	O:0.999925
but	O	O:0.999979
this	O	O:0.999842
doesn't	O	O:0.999958
say	O	O:0.999985
how	O	O:0.999994
to	O	O:0.999992
apply	O	O:0.983881
the	O	O:0.999955
transformation	O	O:0.999622
to	O	O:0.999999
the	O	O:0.999998
date	O	O:0.996506
index	O	O:0.999876
...	O	O:0.999692
	
On	O	O:0.999671
`	O	O:0.999972
groupby	B-API	B-API:0.999119
`	O	O:0.999980
object	O	O:0.998020
,	O	O:0.999997
the	O	O:0.999973
`	O	O:0.999911
agg	O	B-API:0.996256
`	O	O:0.999980
function	O	O:0.999354
can	O	O:0.999997
take	O	O:0.999996
a	O	O:0.999999
list	O	O:0.998802
to	O	O:0.999985
apply	O	O:0.951053
several	O	O:0.998625
aggregation	O	O:0.999594
methods	O	O:0.999933
at	O	O:0.999989
once	O	O:0.999294
.	O	O:0.999926
	
This	O	O:0.999544
should	O	O:0.999980
give	O	O:0.999948
you	O	O:0.999999
the	O	O:0.999995
result	O	O:0.999960
you	O	O:0.999975
need	O	O:0.999830
:	O	O:0.999990
#CODE	O	O:0.999929
	
Python	O	O:0.996575
Pandas	O	O:0.998900
:	O	O:0.999916
Groupby	B-API	O:0.667876
and	O	O:0.999957
Apply	O	O:0.999909
multi-column	O	O:0.995765
operation	O	O:0.998767
	
It	O	O:0.999869
doesn't	O	O:0.999854
usually	O	O:0.999981
make	O	O:0.999950
sense	O	O:0.999905
to	O	O:0.999988
perform	O	O:0.999868
`	O	O:0.999967
value_counts	B-API	B-API:0.998652
`	O	O:0.999997
on	O	O:0.999952
a	O	O:0.999997
DataFrame	B-API	O:0.992270
,	O	O:0.999996
though	O	O:0.999975
I	O	O:0.999997
suppose	O	O:0.999965
you	O	O:0.999906
could	O	O:0.999963
apply	O	O:0.974295
it	O	O:0.999973
to	O	O:0.999997
every	O	O:0.999999
entry	O	O:0.999973
by	O	O:0.999985
flattening	O	O:0.999857
the	O	O:0.999963
underlying	O	O:0.998993
values	O	O:0.997907
array	O	O:0.999083
:	O	O:0.999980
#CODE	O	O:0.999747
	
I	O	O:0.999991
know	O	O:0.999931
about	O	O:0.999748
the	O	O:0.999896
apply	O	B-API:0.994436
function	O	O:0.996709
but	O	O:0.999887
it	O	O:0.999948
is	O	O:0.999989
too	O	O:0.999972
easy	O	O:0.999836
in	O	O:0.999986
my	O	O:0.999958
case	O	O:0.999905
..	O	O:0.999916
	
In	O	O:0.999888
the	O	O:0.999992
dataframe	B-API	O:0.999593
above	O	O:0.999876
I	O	O:0.999989
would	O	O:0.999997
like	O	O:0.999956
to	O	O:0.999999
apply	O	O:0.948411
the	O	O:0.999949
qcut	B-API	B-API:0.908225
function	O	O:0.999957
to	O	O:0.999979
B	O	O:0.999997
while	O	O:0.999980
partitioning	O	O:0.999506
on	O	O:0.999972
A	O	O:0.999992
to	O	O:0.999997
return	O	O:0.999776
C	O	O:0.999091
.	O	O:0.999854
	
To	O	O:0.999961
apply	O	O:0.944265
your	O	O:0.999683
custom	O	O:0.985491
function	O	O:0.999961
to	O	O:0.999995
each	O	O:0.999989
row	O	O:0.999969
,	O	O:0.999993
use	O	O:0.999961
`	O	O:0.999959
apply	O	B-API:0.976271
`	O	O:0.999968
with	O	O:0.998960
the	O	O:0.999979
keyword	O	O:0.999604
argument	O	O:0.999763
`	O	O:0.999984
axis=1	O	O:0.988480
`	O	O:0.999976
.	O	O:0.999237
	
#CODE	O	O:0.998453
	
I	O	O:0.999992
have	O	O:0.999990
a	O	O:0.999990
long	O	O:0.999772
dataframe	B-API	O:0.997761
with	O	O:0.999990
daily	O	O:0.999826
dates	O	O:0.999634
starting	O	O:0.999786
from	O	O:0.999860
1999	O	O:0.998234
.	O	O:0.999886
	
I	O	O:0.999984
apply	O	O:0.972167
a	O	O:0.999847
filter	O	O:0.942124
to	O	O:0.999984
the	O	O:1.000000
original_dataframe	O	O:0.999629
to	O	O:0.999994
create	O	O:0.999997
a	O	O:0.999998
new_dataframe_1	O	O:0.996419
and	O	O:0.999998
another	O	O:0.999946
filter	O	O:0.992492
to	O	O:0.999971
create	O	O:0.999969
new_dataframe_2	O	O:0.997525
.	O	O:0.999940
	
You	O	O:0.999897
can	O	O:0.999975
apply	O	O:0.965848
value_counts	B-API	B-API:0.989510
to	O	O:0.999869
the	O	O:0.999998
SeriesGroupby	B-API	B-API:0.531901
(	O	O:0.999969
for	O	O:0.999992
the	O	O:0.999963
column	O	O:0.990301
):	O	O:0.999959
#CODE	O	O:0.999754
	
Interesting	O	O:0.999402
,	O	O:0.999966
I	O	O:0.999978
will	O	O:0.999956
give	O	O:0.999726
it	O	O:0.999999
a	O	O:0.999993
go	O	O:0.999667
.	O	O:0.999940
	
I	O	O:0.999975
have	O	O:0.999958
been	O	O:0.999510
looking	O	O:0.999958
up	O	O:0.999958
normalization	O	O:0.999865
on	O	O:0.999989
the	O	O:0.999989
unicodedata	O	O:0.998043
module	O	O:0.999625
.	O	O:0.999865
	
I	O	O:0.999480
was	O	O:0.999935
not	O	O:0.999965
sure	O	O:0.999918
if	O	O:0.999995
that	O	O:0.999915
would	O	O:0.999993
apply	O	O:0.854110
to	O	O:0.999996
this	O	O:0.999984
situation	O	O:0.999893
however	O	O:0.999869
.	O	O:0.999908
	
I	O	O:0.999983
also	O	O:0.999968
discovered	O	O:0.999823
from	O	O:0.999832
zope.component	O	O:0.994712
import	O	O:0.999731
getUtility	O	O:0.998000
	
Hey	O	O:0.999937
this	O	O:0.999274
is	O	O:0.999978
awesome	O	O:0.998534
.	O	O:0.999820
	
Thanks	O	O:0.998858
for	O	O:0.999988
exposing	O	O:0.999722
me	O	O:0.999801
to	O	O:0.999986
the	O	O:0.999999
fuzzywuzzy	O	O:0.998692
article	O	O:0.999585
.	O	O:0.999824
	
I	O	O:0.999972
will	O	O:0.999991
take	O	O:0.999952
some	O	O:0.999987
time	O	O:0.999979
to	O	O:0.999993
check	O	O:0.999995
it	O	O:0.999991
out	O	O:0.999926
and	O	O:0.999995
see	O	O:0.999965
how	O	O:0.999889
I	O	O:0.999990
can	O	O:0.999987
apply	O	O:0.786685
it	O	O:0.999890
.	O	O:0.999729
	
The	O	O:0.999945
5	O	O:0.999742
in	O	O:0.999977
the	O	O:0.999991
lambda	O	O:0.999851
above	O	O:0.999947
comes	O	O:0.999623
from	O	O:0.999986
the	O	O:0.999977
correct	O	O:0.999613
width	O	O:0.999715
.	O	O:0.999879
	
You'd	O	O:0.999922
need	O	O:0.999979
to	O	O:0.999998
select	O	O:0.999966
out	O	O:0.999978
all	O	O:0.999995
the	O	O:0.999995
columns	O	O:0.999925
that	O	O:0.999979
need	O	O:0.999995
leading	O	O:0.999778
zeros	B-API	O:0.874977
and	O	O:0.999979
apply	O	O:0.780724
the	O	O:0.996531
function	O	O:0.995632
(	O	O:0.999973
with	O	O:0.999988
the	O	O:0.999985
correct	O	O:0.999882
width	O	O:0.999953
)	O	O:0.999993
to	O	O:0.999989
each	O	O:0.999939
.	O	O:0.999865
	
The	O	O:0.999874
result	O	O:0.999917
obtained	O	O:0.999856
,	O	O:0.999991
I	O	O:0.999998
need	O	O:0.999987
to	O	O:0.999982
apply	O	O:0.983977
the	O	O:0.999948
following	O	O:0.997393
conditions	O	O:0.997912
#CODE	O	O:0.999687
	
You	O	O:0.999873
can	O	O:0.999979
make	O	O:0.999998
your	O	O:0.999973
own	O	O:0.999985
aggregate	O	O:0.775209
functions	O	O:0.999831
to	O	O:0.999986
apply	O	O:0.959847
to	O	O:0.999977
grouped	O	O:0.999985
data	O	O:0.999890
#URL	O	O:0.999309
.	O	O:0.999929
	
So	O	O:0.999933
for	O	O:0.999998
your	O	O:0.999919
case	O	O:0.999850
you	O	O:0.999992
could	O	O:0.999955
try	O	O:0.999999
something	O	O:0.999965
like	O	O:0.999284
:	O	O:0.999980
#CODE	O	O:0.999826
	
yes	O	O:0.999545
....	O	O:0.999762
the	O	O:0.999971
issue	O	O:0.997891
is	O	O:0.999956
the	O	O:0.999878
Series	O	O:0.999136
vector	O	O:0.997834
(	O	O:0.999976
e.g.	O	O:0.998539
``	O	O:0.999904
df.D	O	O:0.965014
>	O	O:0.999965
1	O	O:0.999817
``)	O	O:0.998349
*	O	O:0.999913
looks	O	O:0.999574
*	O	O:0.999996
like	O	O:0.999775
it	O	O:0.999983
should	O	O:0.999969
work	O	O:0.999885
,	O	O:0.999997
but	O	O:0.999995
its	O	O:0.999930
ambiguous	O	O:0.999823
how	O	O:0.999932
it	O	O:0.999965
should	O	O:0.999980
broadcast	O	O:0.999857
,	O	O:0.999995
e.g.	O	O:0.999267
should	O	O:0.999895
that	O	O:0.999960
Series	O	O:0.999992
named	O	O:0.999906
D	O	O:0.999982
apply	O	O:0.690384
to	O	O:0.999977
all	O	O:0.999997
of	O	O:0.999995
the	O	O:0.999989
other	O	O:0.999978
columns	O	O:0.999207
(	O	O:0.999987
in	O	O:0.999991
which	O	O:0.999900
case	O	O:0.999954
what	O	O:0.999885
should	O	O:0.999950
it	O	O:0.999997
do	O	O:0.999992
?	O	O:0.999994
)	O	O:0.999984
,	O	O:0.999979
or	O	O:0.999981
should	O	O:0.999914
it	O	O:1.000000
effectively	O	O:0.999988
have	O	O:0.999961
no	O	O:0.999992
name	O	O:0.999855
which	O	O:0.999917
means	O	O:0.999898
it	O	O:0.999970
SHOULD	O	O:0.999422
broadcast	O	O:0.998982
.	O	O:0.999907
	
You	O	O:0.999887
problem	O	O:0.999713
could	O	O:0.999971
also	O	O:0.999995
be	O	O:0.999999
solved	O	O:0.999949
by	O	O:0.999975
using	O	O:0.999434
``	O	O:0.999048
df	O	O:0.988147
>	O	O:0.999960
1.0	O	O:0.992470
``	O	O:0.999957
because	O	O:0.999539
I	O	O:0.999995
think	O	O:0.999993
that	O	O:0.997618
is	O	O:0.999998
what	O	O:0.999843
you	O	O:0.999939
intend	O	O:0.999487
(	O	O:0.999968
e.g.	O	O:0.999923
that	O	O:0.999861
it	O	O:0.999991
DOES	O	O:0.999928
broadcast	O	O:0.999330
)	O	O:0.999959
	
Problem	O	O:0.997529
!	O	O:0.999804
	
Though	O	O:0.999827
this	O	O:0.999784
works	O	O:0.999910
,	O	O:0.999990
it	O	O:0.999997
ends	O	O:0.999484
up	O	O:0.999989
being	O	O:0.999658
really	O	O:0.999199
memory	O	O:0.999371
inefficient	O	O:0.998558
.	O	O:0.999857
	
I'm	O	O:0.999875
working	O	O:0.999770
with	O	O:0.999988
a	O	O:0.999978
13	O	O:0.999902
million	O	O:0.998728
row	O	O:0.999941
dataframe	B-API	O:0.994594
,	O	O:0.999971
and	O	O:0.999999
attempting	O	O:0.999796
to	O	O:0.999846
run	O	O:0.999982
the	O	O:0.999964
apply	O	B-API:0.965529
(	O	O:0.999939
sequence_id	O	O:0.993704
)	O	O:0.999982
bit	O	O:0.999925
ends	O	O:0.999861
maxing	O	O:0.999572
out	O	O:0.999861
the	O	O:0.999988
20gb	O	O:0.999778
of	O	O:0.999980
ram	O	O:0.999931
I	O	O:0.999999
have	O	O:0.999975
available	O	O:0.998948
.	O	O:0.999909
	
I've	O	O:0.997167
worked	O	O:0.999687
with	O	O:0.999898
bigger	O	O:0.999652
dataframes	O	O:0.999727
,	O	O:0.999986
so	O	O:0.999993
it	O	O:0.999992
must	O	O:0.999974
be	O	O:1.000000
something	O	O:0.999990
to	O	O:0.999976
do	O	O:0.999998
with	O	O:0.999985
this	O	O:0.999979
particular	O	O:0.999946
operation	O	O:0.999615
.	O	O:0.999887
	
Any	O	O:0.999922
thoughts	O	O:0.999786
on	O	O:0.999984
how	O	O:0.999982
we	O	O:0.999995
could	O	O:0.999967
optimize	O	O:0.999941
it	O	O:0.999980
?	O	O:0.999969
	
@USER	O	O:0.995100
:	O	O:0.999935
You	O	O:0.999981
could	O	O:0.999985
apply	O	O:0.988793
any	O	O:0.999962
of	O	O:0.999971
the	O	O:0.999968
above	O	O:0.999963
methods	O	O:0.999788
to	O	O:0.999977
the	O	O:0.999999
Series	O	O:0.999141
`	O	O:0.999982
df1	O	O:0.998672
[	O	O:0.999940
'	O	O:0.999958
col	O	O:0.999508
']`	O	O:0.999890
and	O	O:0.999930
`	O	O:0.999977
df2	O	O:0.991937
[	O	O:0.999905
'	O	O:0.999945
col	O	O:0.999437
']`	O	O:0.999868
.	O	O:0.999309
	
For	O	O:0.999919
example	O	O:0.999446
,	O	O:0.999986
@USER	O	O:0.999638
'	O	O:0.999978
s	O	O:0.999894
answer	O	O:0.999692
would	O	O:0.999888
look	O	O:0.999909
like	O	O:0.999984
this	O	O:0.999847
:	O	O:0.999988
`	O	O:0.999982
pd.concat	B-API	B-API:0.994139
((	O	O:0.999885
df1	O	O:0.997595
[	O	O:0.999719
'	O	O:0.999985
col	O	O:0.999734
']	O	O:0.999988
,	O	O:0.999861
df2	O	O:0.999049
[	O	O:0.999816
'	O	O:0.999983
col	O	O:0.999761
'])	O	O:0.999943
,	O	O:0.999940
axis=1	O	O:0.998923
)	O	O:0.999859
.mean	B-API	B-API:0.998827
(	O	O:0.999977
axis=1	O	O:0.999617
)`	O	O:0.999360
.	O	O:0.999575
	
you	O	O:0.999927
can	O	O:0.999975
use	O	O:0.999999
apply	O	B-API:0.949977
function	O	O:0.989959
:	O	O:0.999807
#CODE	O	O:0.999798
	
very	O	O:0.999120
close	O	O:0.998972
!	O	O:0.999912
	
I	O	O:0.999927
had	O	O:0.999965
to	O	O:0.999987
convert	O	O:0.999959
dates	O	O:0.999593
to	O	O:0.999968
'	O	O:0.999999
12	O	O:0.999931
10	O	O:0.999717
'	O	O:0.999987
instead	O	O:0.999985
of	O	O:0.999972
'	O	O:0.999946
12	O	O:0.999927
Oct	O	O:0.999659
'	O	O:0.999941
because	O	O:0.999958
pandas	O	O:0.999641
crosstab	B-API	B-API:0.529987
alphabetizes	O	O:0.997664
and	O	O:0.999986
the	O	O:0.999985
3-letter	O	O:0.997458
months	O	O:0.999376
messes	O	O:0.999899
that	O	O:0.999936
up	O	O:0.999924
.	O	O:0.999922
	
So	O	O:0.999981
if	O	O:0.999996
I	O	O:0.999998
can	O	O:0.999984
isolate	O	O:0.999785
the	O	O:0.999997
two-digit	O	O:0.999716
month	O	O:0.999292
,	O	O:0.999996
I	O	O:0.999992
can	O	O:0.999988
apply	O	O:0.939337
calendar.month_abbr	O	O:0.989289
[	O	O:0.999870
##	O	O:0.999983
]	O	O:0.999977
to	O	O:0.999958
get	O	O:0.999998
that	O	O:0.999971
3-letter	O	O:0.999934
month	O	O:0.997964
.	O	O:0.999729
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
Why	O	O:0.999755
they're	O	O:0.999965
being	O	O:0.999880
converted	O	O:0.999855
like	O	O:0.999770
that	O	O:0.999604
:	O	O:0.999972
I'm	O	O:0.999986
not	O	O:0.999992
sure	O	O:0.999795
.	O	O:0.999932
	
Might	O	O:0.999869
be	O	O:0.999993
a	O	O:0.999988
bug	O	O:0.996743
,	O	O:0.999937
but	O	O:0.999912
it	O	O:0.999975
should	O	O:0.999970
be	O	O:0.999998
simple	O	O:0.999948
enough	O	O:0.999231
to	O	O:0.999978
`	O	O:0.999998
apply	O	B-API:0.977959
`	O	O:0.999994
something	O	O:0.999538
keep	O	O:0.999170
it	O	O:0.999991
all	O	O:0.999969
straight	O	O:0.999638
.	O	O:0.999726
	
So	O	O:0.999958
how	O	O:0.999980
can	O	O:0.999980
I	O	O:1.000000
apply	O	O:0.991494
this	O	O:0.998424
to	O	O:0.999981
the	O	O:0.999999
full	O	O:0.999719
dataframe	B-API	O:0.998542
,	O	O:0.999996
ffill-ing	O	O:0.999798
the	O	O:0.999916
observations	O	O:0.982888
(	O	O:0.999965
but	O	O:0.999996
also	O	O:0.999959
the	O	O:0.999963
item_id	O	O:0.993387
index	O	O:0.999914
)	O	O:0.999996
such	O	O:0.999984
that	O	O:0.999987
each	O	O:0.998291
item_id	O	O:0.998882
has	O	O:0.999967
properly	O	O:0.999961
filled	O	O:0.999990
rows	O	O:0.999808
for	O	O:0.999981
all	O	O:0.999997
the	O	O:0.999988
dates	O	O:0.988246
in	O	O:0.999975
baseDateRange	O	O:0.999359
?	O	O:0.999967
	
Essentially	O	O:0.999786
for	O	O:0.999988
each	O	O:0.999792
group	O	O:0.998159
you	O	O:0.999992
want	O	O:0.999947
to	O	O:0.999978
reindex	O	O:0.631807
and	O	O:0.999950
ffill	B-API	B-API:0.902428
.	O	O:0.999313
	
The	O	O:0.999805
apply	O	O:0.667612
gets	O	O:0.998663
passed	O	O:0.999901
a	O	O:0.999997
data	O	O:0.999927
frame	O	O:0.999998
that	O	O:0.999911
has	O	O:0.999993
the	O	O:0.999961
item_id	O	O:0.994670
and	O	O:0.999990
date	O	O:0.999717
still	O	O:0.998943
in	O	O:0.999958
the	O	O:0.999974
index	O	O:0.999900
,	O	O:0.999997
so	O	O:0.999998
reset	O	O:0.999377
,	O	O:0.999999
then	O	O:0.999904
set	O	O:0.999969
and	O	O:0.999997
reindex	O	B-API:0.734878
with	O	O:0.998656
filling	O	O:0.994829
.	O	O:0.999680
	
answer	O	O:0.999697
to	O	O:0.999997
your	O	O:0.999994
first	O	O:0.999909
part	O	O:0.999864
is	O	O:0.999987
yes	O	O:0.999908
that	O	O:0.999650
is	O	O:0.999998
reasonable	O	O:0.999728
,	O	O:0.999996
you	O	O:0.999985
can	O	O:0.999997
drop	O	O:0.999901
on	O	O:0.999999
the	O	O:0.999987
reset_index	B-API	B-API:0.989908
to	O	O:0.999970
not	O	O:1.000000
have	O	O:0.999994
a	O	O:0.999995
dup	O	O:0.999892
.	O	O:0.999957
for	O	O:0.999990
the	O	O:0.999966
second	O	O:0.999413
,	O	O:0.999992
I	O	O:0.999994
think	O	O:0.999976
the	O	O:0.999949
apply	O	B-API:0.929534
is	O	O:0.999955
a	O	O:0.999961
bit	O	O:0.999861
confused	O	O:0.999809
by	O	O:0.999860
the	O	O:0.999963
index	O	O:0.999901
because	O	O:0.999972
of	O	O:0.999997
the	O	O:0.999992
way	O	O:0.999969
you	O	O:0.999865
are	O	O:0.999995
aggregating	O	O:0.998985
(	O	O:0.999964
so	O	O:0.999976
it's	O	O:0.999920
dropping	O	O:0.999690
the	O	O:0.999994
name	O	O:0.999954
of	O	O:0.999933
the	O	O:0.999986
index	O	O:0.999901
)	O	O:0.999962
.	O	O:0.999907
	
You	O	O:0.999913
can	O	O:0.999987
do	O	O:1.000000
another	O	O:0.999928
reset_index	B-API	B-API:0.980414
inside	O	O:0.999727
the	O	O:0.999982
apply	O	B-API:0.707022
,	O	O:0.999995
then	O	O:0.999729
at	O	O:1.000000
the	O	O:0.999996
very	O	O:0.999621
end	O	O:0.999735
(	O	O:0.999935
after	O	O:0.999970
the	O	O:0.999952
apply	O	B-API:0.864999
,	O	O:0.999748
``	O	O:0.998661
.reset_index	B-API	B-API:0.997948
(	O	O:0.999989
drop=True	O	O:0.999508
)	O	O:0.999914
.set_index	B-API	B-API:0.994706
([	O	O:0.999936
'	O	O:0.999944
date	O	O:0.998094
'	O	O:0.999976
,	O	O:0.999963
'	O	O:0.999946
item_id	O	O:0.998525
'])``	O	O:0.999881
,	O	O:0.999990
so	O	O:0.999990
reset	O	O:0.999171
the	O	O:0.999967
mi	O	O:0.997573
	
It	O	O:0.999953
you	O	O:0.999986
want	O	O:0.999981
to	O	O:0.999992
apply	O	O:0.993632
these	O	O:0.999845
to	O	O:0.999977
all	O	O:1.000000
your	O	O:0.999982
pandas	O	O:0.999964
tables	O	O:0.999971
you	O	O:0.999977
can	O	O:0.999985
use	O	O:0.999997
css	O	O:0.999179
.	O	O:0.999801
	
A	O	O:0.998119
(	O	O:0.999970
not	O	O:0.999973
recommended	O	O:0.999865
)	O	O:0.999992
way	O	O:0.999876
is	O	O:0.999986
put	O	O:0.999130
the	O	O:0.999984
following	O	O:0.999827
into	O	O:0.999772
a	O	O:0.999998
markdown	O	O:0.999861
cell	O	O:0.999909
of	O	O:0.999994
the	O	O:0.999851
active	O	O:0.999435
notebook	O	O:0.999518
.	O	O:0.999886
	
#CODE	O	O:0.998453
	
I	O	O:0.999980
need	O	O:0.999984
the	O	O:0.999966
apply	O	B-API:0.893640
function	O	O:0.999768
that	O	O:0.999031
returns	O	O:0.999962
several	O	O:0.999928
value	O	O:0.999912
from	O	O:0.999876
several	O	O:0.999938
complex	O	O:0.999104
calculations	O	O:0.999505
.	O	O:0.999854
	
I	O	O:0.999943
can	O	O:0.999981
return	O	O:0.999950
those	O	O:0.999981
values	O	O:0.999727
in	O	O:0.999989
a	O	O:0.999997
tuple	O	O:0.998670
,	O	O:0.999990
and	O	O:0.999999
thus	O	O:0.999929
the	O	O:0.999997
outcome	O	O:0.999941
of	O	O:0.999966
the	O	O:0.999993
groupby-apply	O	O:0.999787
action	O	O:0.999195
would	O	O:0.999972
be	O	O:0.999999
a	O	O:0.999998
Series	O	O:0.998179
with	O	O:0.999925
group	O	O:0.999402
name	O	O:0.999991
as	O	O:0.999987
indexes	O	O:0.998436
and	O	O:0.999979
the	O	O:0.999995
tuple	O	O:0.999401
as	O	O:0.999982
values	O	O:0.997256
.	O	O:0.999861
	
I	O	O:0.999912
would	O	O:0.999989
like	O	O:0.999920
it	O	O:0.999998
to	O	O:0.999997
return	O	O:0.999975
a	O	O:0.999977
DataFrame	B-API	O:0.988143
instead	O	O:0.999960
,	O	O:0.999994
So	O	O:0.999995
I	O	O:0.999997
could	O	O:0.999998
keep	O	O:0.999723
all	O	O:0.999984
the	O	O:0.999998
pandas	O	O:0.999302
functionality	O	O:0.999550
and	O	O:0.999961
flexibility	O	O:0.999691
.	O	O:0.999216
	
In	O	O:0.999940
general	O	O:0.998704
,	O	O:0.999987
The	O	O:0.999990
outcome	O	O:0.999950
of	O	O:0.999994
a	O	O:0.999993
groupby-apply	O	O:0.998829
operation	O	O:0.999502
would	O	O:0.999951
be	O	O:0.999999
a	O	O:0.999999
Series	O	O:0.992490
In	O	O:0.999979
the	O	O:0.999995
case	O	O:0.999891
apply	O	O:0.953889
returning	O	O:0.997951
1	O	O:0.999424
value	O	O:0.999808
.	O	O:0.999772
	
In	O	O:0.999938
the	O	O:0.999997
case	O	O:0.999972
of	O	O:0.999994
apply	O	O:0.808296
returning	O	O:0.999521
2	O	O:0.998599
or	O	O:0.999998
more	O	O:0.999848
values	O	O:0.999908
,	O	O:0.999994
I	O	O:0.999997
would	O	O:0.999994
like	O	O:0.999957
the	O	O:0.999999
outcome	O	O:0.999895
to	O	O:0.999992
be	O	O:1.000000
a	O	O:0.999997
dataframe	B-API	O:0.968927
.	O	O:0.999889
	
so	O	O:0.999980
my	O	O:0.999973
question	O	O:0.999166
is	O	O:0.999993
how	O	O:0.999946
to	O	O:0.999990
do	O	O:0.999999
that	O	O:0.999873
.	O	O:0.999969
	
See	O	O:0.999821
the	O	O:0.999990
original	O	O:0.999420
Q	O	O:0.999862
for	O	O:0.999989
more	O	O:0.998076
details	O	O:0.999255
and	O	O:0.999985
examples	O	O:0.999230
	
Based	O	O:0.999470
on	O	O:0.999981
the	O	O:0.999981
edited	O	O:0.999733
question	O	O:0.999835
,	O	O:0.999996
maybe	O	O:0.999992
this	O	O:0.999535
is	O	O:0.999998
what	O	O:0.999826
you	O	O:0.999973
are	O	O:0.999998
looking	O	O:0.999826
for	O	O:0.999906
.	O	O:0.999686
	
Returning	O	O:0.999792
a	O	O:0.999980
series	O	O:0.999300
in	O	O:0.999993
the	O	O:0.999993
apply	O	O:0.830038
call	O	O:0.981840
results	O	O:0.999896
being	O	O:0.998521
collated	O	O:0.999777
into	O	O:0.999719
a	O	O:0.999986
dataframe	B-API	O:0.892093
(	O	O:0.999986
guessing	O	O:0.999974
that	O	O:0.999004
is	O	O:0.999998
what	O	O:0.999874
you	O	O:0.999976
are	O	O:0.999998
looking	O	O:0.999947
for	O	O:0.999945
)	O	O:0.999889
	
That's	O	O:0.999919
definitely	O	O:0.999729
answer	O	O:0.999935
the	O	O:0.999975
example	O	O:0.999092
I	O	O:0.999982
gave	O	O:0.999828
,	O	O:0.999781
but	O	O:0.999960
not	O	O:0.999984
my	O	O:0.999986
problem	O	O:0.999815
.	O	O:0.999918
which	O	O:0.999923
means	O	O:0.999986
that	O	O:0.999951
I	O	O:0.999998
gave	O	O:0.999991
a	O	O:0.999943
bad	O	O:0.999366
example	O	O:0.999843
..	O	O:0.999638
	
Imagine	O	O:0.999958
that	O	O:0.999935
I	O	O:0.999999
need	O	O:0.999994
the	O	O:0.999961
apply	O	B-API:0.815328
function	O	O:0.999700
to	O	O:0.999979
retrieve	O	O:0.999923
few	O	O:0.999975
complex	O	O:0.998889
calculations	O	O:0.999439
.	O	O:0.999850
	
A	O	O:0.999609
function	O	O:0.999971
that	O	O:0.997864
is	O	O:0.999997
not	O	O:0.999982
a	O	O:0.999997
built-in	O	O:0.950997
function	O	O:0.999695
.	O	O:0.999748
	
In	O	O:0.999938
the	O	O:0.999997
case	O	O:0.999969
of	O	O:0.999994
apply	O	O:0.802383
returning	O	O:0.999505
1	O	O:0.999701
value	O	O:0.999887
,	O	O:0.999993
the	O	O:0.999988
outcome	O	O:0.998952
is	O	O:0.999996
a	O	O:0.999980
series	O	O:0.999382
.	O	O:0.999854
	
In	O	O:0.999938
the	O	O:0.999997
case	O	O:0.999972
of	O	O:0.999994
apply	O	O:0.808296
returning	O	O:0.999521
2	O	O:0.998599
or	O	O:0.999998
more	O	O:0.999848
values	O	O:0.999908
,	O	O:0.999994
I	O	O:0.999997
would	O	O:0.999994
like	O	O:0.999957
the	O	O:0.999999
outcome	O	O:0.999895
to	O	O:0.999992
be	O	O:1.000000
a	O	O:0.999997
dataframe	B-API	O:0.968927
.	O	O:0.999889
	
so	O	O:0.999980
my	O	O:0.999973
question	O	O:0.999166
is	O	O:0.999993
how	O	O:0.999946
to	O	O:0.999990
do	O	O:0.999999
that	O	O:0.999873
.	O	O:0.999969
	
On	O	O:0.999898
12+	O	O:0.999942
dev	O	O:0.999923
of	O	O:0.999913
Pandas	O	O:0.999314
..	O	O:0.999794
	
so	O	O:0.999865
I'll	O	O:0.999652
try	O	O:0.999937
apply	O	B-API:0.942421
(	O	O:0.999899
int	O	O:0.998261
)	O	O:0.999983
I	O	O:0.999974
still	O	O:0.999960
don't	O	O:0.999834
get	O	O:0.999959
why	O	O:0.999990
the	O	O:0.999985
Dtype={	O	O:0.997673
does	O	O:0.999663
not	O	O:0.999996
work	O	O:0.999995
on	O	O:0.999980
read_csv	B-API	B-API:0.978139
?	O	O:0.999952
	
The	O	O:0.999893
second	O	O:0.996605
command	O	O:0.999860
causes	O	O:0.999553
the	O	O:0.999993
following	O	O:0.999710
error	O	O:0.999737
which	O	O:0.999927
I	O	O:0.999971
do	O	O:0.999972
not	O	O:0.999755
understand	O	O:0.999316
.	O	O:0.999854
	
Any	O	O:0.999917
thoughts	O	O:0.999600
on	O	O:0.999981
what	O	O:0.999830
might	O	O:0.999982
be	O	O:0.999999
going	O	O:0.999952
on	O	O:0.999927
here	O	O:0.998994
?	O	O:0.999979
	
I	O	O:0.999976
replaced	O	O:0.999348
map	O	B-API:0.916256
with	O	O:0.999724
apply	O	B-API:0.922193
and	O	O:0.999969
that	O	O:0.999229
didn't	O	O:0.999701
help	O	O:0.999302
matters	O	O:0.999493
.	O	O:0.999835
	
#CODE	O	O:0.998453
	
Perfect	O	O:0.999458
Jeff	O	O:0.999374
,	O	O:0.999991
thank	O	O:0.999777
you	O	O:0.999845
!	O	O:0.999959
	
Once	O	O:0.999794
I	O	O:0.999962
got	O	O:0.999996
rid	O	O:0.999909
of	O	O:0.999997
the	O	O:0.999998
rows	O	O:0.999857
with	O	O:0.999982
missing	O	O:0.999977
data	O	O:0.999978
,	O	O:0.999995
I	O	O:0.999999
could	O	O:0.999990
directly	O	O:0.999926
apply	O	O:0.979617
this	O	O:0.999374
to	O	O:0.999987
the	O	O:1.000000
new	O	O:0.999687
problem	O	O:0.999303
.	O	O:0.999900
	
;-)	O	O:0.998369
	
I'm	O	O:0.999841
exploring	O	O:0.999713
Pandas	O	O:0.999470
-	O	O:0.999991
trying	O	O:0.999729
to	O	O:0.999970
learn	O	O:0.999302
and	O	O:0.999978
apply	O	B-API:0.676391
it	O	O:0.998958
.	O	O:0.999631
	
Currently	O	O:0.999857
I	O	O:0.999998
have	O	O:0.999994
a	O	O:0.999986
csv	O	O:0.999878
file	O	O:0.999960
populated	O	O:0.999912
with	O	O:0.999990
a	O	O:0.999990
financial	O	O:0.999793
timeseries	O	O:0.999990
data	O	O:0.999959
of	O	O:0.999995
following	O	O:0.999638
structure	O	O:0.999559
:	O	O:0.999913
	
now	O	O:0.999858
apply	O	O:0.644570
the	O	O:0.999936
lambda	O	O:0.990183
function	O	O:0.999910
,	O	O:0.999991
doing	O	O:0.999970
what	O	O:0.999766
the	O	O:0.999897
parser	O	O:0.999656
should	O	O:0.999934
have	O	O:0.999981
done	O	O:0.999650
:	O	O:0.999981
#CODE	O	O:0.999808
	
datetime.date	O	O:0.987312
creating	O	O:0.999749
many	O	O:0.999853
problems	O	O:0.999813
with	O	O:0.999753
set_index	B-API	B-API:0.993174
,	O	O:0.999969
groupby	B-API	B-API:0.984000
,	O	O:0.999953
and	O	O:0.999987
apply	O	B-API:0.726438
in	O	O:0.998746
Pandas	O	O:0.998702
0.8.1	O	O:0.998970
	
Now	O	O:0.999931
here	O	O:0.997963
is	O	O:0.999992
what	O	O:0.999695
happens	O	O:0.999984
when	O	O:0.999854
I	O	O:0.999996
try	O	O:0.999998
to	O	O:0.999971
work	O	O:0.999995
with	O	O:0.999992
these	O	O:0.999992
using	O	O:0.999878
`	O	O:0.999813
groupby	B-API	B-API:0.999939
`	O	O:0.999948
and	O	O:0.998897
`	O	O:0.999994
apply	O	B-API:0.998793
`	O	O:0.999314
:	O	O:0.999133
#CODE	O	O:0.999898
	
If	O	O:0.999953
I	O	O:0.999996
save	O	O:0.999824
the	O	O:0.999780
`	O	O:0.999945
groupby	B-API	B-API:0.999750
`	O	O:0.999960
object	O	O:0.997244
and	O	O:0.999995
attempt	O	O:0.999880
to	O	O:0.999970
apply	O	O:0.889404
`	O	O:0.999911
foo	O	O:0.994470
`	O	O:0.999997
myself	O	O:0.998208
,	O	O:1.000000
then	O	O:0.999730
in	O	O:0.999999
the	O	O:0.999996
straightforward	O	O:0.999699
way	O	O:0.999925
,	O	O:0.999998
this	O	O:0.999977
also	O	O:0.999804
fails	O	O:0.999510
:	O	O:0.999934
#CODE	O	O:0.999695
	
I	O	O:0.999973
can	O	O:0.999987
simplify	O	O:0.999951
the	O	O:0.999994
problem	O	O:0.999937
just	O	O:0.999890
to	O	O:0.999999
the	O	O:0.999998
`	O	O:0.999938
set_index	B-API	B-API:0.999303
`	O	O:0.999997
call	O	O:0.995875
within	O	O:0.999925
the	O	O:0.999604
`	O	O:0.999960
apply	O	B-API:0.981605
`	O	O:0.999692
function	O	O:0.997747
.	O	O:0.999923
	
But	O	O:0.999977
this	O	O:0.999491
is	O	O:0.999991
getting	O	O:0.999416
really	O	O:0.999010
weird	O	O:0.998873
.	O	O:0.999770
	
Here's	O	O:0.999678
an	O	O:0.999983
example	O	O:0.999955
with	O	O:0.999992
a	O	O:0.999992
simpler	O	O:0.999233
test	O	O:0.999370
DataFrame	B-API	O:0.998231
,	O	O:0.999998
just	O	O:0.999944
with	O	O:0.999966
`	O	O:0.999932
set_index	B-API	B-API:0.999495
`	O	O:0.999974
.	O	O:0.999634
	
#CODE	O	O:0.998453
	
By	O	O:0.999975
adding	O	O:0.999859
a	O	O:0.999990
call	O	O:0.995613
to	O	O:0.999992
reset	O	O:0.998149
the	O	O:0.999954
index	O	O:0.999973
inside	O	O:0.999950
of	O	O:0.999997
the	O	O:0.999860
function	O	O:0.999976
to	O	O:0.999994
be	O	O:1.000000
applied	O	O:0.999944
with	O	O:0.999493
`	O	O:0.999973
apply	O	B-API:0.974754
`	O	O:0.999908
,	O	O:0.999689
it	O	O:0.999996
gets	O	O:0.999907
rid	O	O:0.999983
of	O	O:0.999993
the	O	O:0.999866
problem	O	O:0.997678
:	O	O:0.999941
#CODE	O	O:0.999843
	
Thanks	O	O:0.998996
,	O	O:0.999992
that	O	O:0.999951
seems	O	O:0.999981
to	O	O:0.999998
work	O	O:0.999996
well	O	O:0.999866
.	O	O:0.999981
	
I	O	O:0.999990
have	O	O:0.999997
some	O	O:0.999979
back	O	O:0.999917
up	O	O:0.999984
questions	O	O:0.999915
if	O	O:0.999980
you	O	O:0.999955
don't	O	O:0.999919
mind	O	O:0.999874
.	O	O:0.999944
	
1	O	O:0.999526
)	O	O:0.999975
What	O	O:0.998458
is	O	O:0.999996
being	O	O:0.999729
passed	O	O:0.999193
to	O	O:0.999978
the	O	O:0.999996
function	O	O:0.999924
f	O	O:0.999976
when	O	O:0.999914
it	O	O:0.999960
is	O	O:0.999998
called	O	O:0.999300
with	O	O:0.999931
apply	O	B-API:0.902539
?	O	O:0.999662
	
Is	O	O:0.999948
it	O	O:0.999984
each	O	O:0.999974
groupe	O	O:0.999924
of	O	O:0.999999
data	O	O:0.999922
sequentially	O	O:0.999811
?	O	O:0.999973
	
I	O	O:0.999965
assume	O	O:0.999948
it	O	O:0.999947
must	O	O:0.999814
be	O	O:0.999986
.	O	O:0.999968
	
2	O	O:0.999798
)	O	O:0.999984
How	O	O:0.999895
can	O	O:0.999970
the	O	O:0.999996
function	O	O:0.999951
be	O	O:0.999987
called	O	O:0.999815
with	O	O:0.999981
multiple	O	O:0.999920
columns	O	O:0.999927
so	O	O:0.999994
people2	O	O:0.999414
=	O	O:0.999940
Grouped.apply	O	O:0.998322
(	O	O:0.999931
f	O	O:0.998997
(	O	O:0.999949
'	O	O:0.999996
a	O	O:0.999973
'	O	O:0.999909
,	O	O:0.999974
'	O	O:0.999985
b	O	O:0.999873
'	O	O:0.999983
,	O	O:0.999974
'	O	O:0.999987
c	O	O:0.999904
'))	O	O:0.999915
?	O	O:0.999858
	
Clearly	O	O:0.999859
the	O	O:0.999923
fucntion	O	O:0.999605
would	O	O:0.999985
have	O	O:0.999992
to	O	O:0.999999
be	O	O:1.000000
changed	O	O:0.999348
,	O	O:0.999980
but	O	O:0.999962
in	O	O:0.999998
your	O	O:0.999951
example	O	O:0.999935
the	O	O:0.999947
function	O	O:0.998136
is	O	O:0.999962
not	O	O:0.999987
very	O	O:0.999891
abstract	O	O:0.999328
.	O	O:0.999781
	
I	O	O:0.999918
would	O	O:0.999992
want	O	O:0.999929
to	O	O:0.999996
write	O	O:0.999996
def	O	O:0.999690
f	O	O:0.999793
(	O	O:0.999983
df	O	O:0.999691
,	O	O:0.999987
col1	O	O:0.998754
,	O	O:0.999991
col2	O	O:0.998851
,	O	O:0.999994
col3	O	O:0.998861
)	O	O:0.999988
-	O	O:0.999978
so	O	O:0.999994
that	O	O:0.999959
it	O	O:0.999998
could	O	O:0.999987
be	O	O:0.999999
used	O	O:0.999880
beyond	O	O:0.999381
the	O	O:0.999986
columns	O	O:0.999778
referenced	O	O:0.999793
inside	O	O:0.999950
the	O	O:0.999796
function	O	O:0.999436
.	O	O:0.999832
	
+1	O	O:0.999743
,	O	O:0.999983
the	O	O:0.999989
main	O	O:0.999870
part	O	O:0.999979
of	O	O:0.999996
answer	O	O:0.999909
I	O	O:0.999996
think	O	O:0.999514
is	O	O:0.999961
to	O	O:0.999959
use	O	O:0.999995
apply	O	B-API:0.757289
instead	O	O:0.999804
of	O	O:0.999960
transform	O	B-API:0.791609
	
Would	O	O:0.999497
it	O	O:0.999990
be	O	O:0.999996
right	O	O:0.999965
to	O	O:0.999993
say	O	O:1.000000
then	O	O:0.999966
that	O	O:0.999998
calling	O	O:0.999973
transform	O	O:0.745239
passes	O	O:0.999383
only	O	O:0.999941
the	O	O:0.999994
named	O	O:0.999857
column	O	O:0.999956
,	O	O:0.999997
or	O	O:0.999999
each	O	O:0.999939
column	O	O:0.999944
in	O	O:0.999996
the	O	O:0.999991
DF	O	O:0.999998
to	O	O:0.999989
the	O	O:0.999997
function	O	O:0.999933
individually	O	O:0.999011
and	O	O:0.999996
it	O	O:0.999679
is	O	O:0.999942
not	O	O:0.999983
possible	O	O:0.999955
to	O	O:0.999996
pass	O	O:0.999970
more	O	O:0.999937
than	O	O:0.999967
one	O	O:0.999995
column	O	O:0.999926
,	O	O:0.999998
whereas	O	O:0.999909
apply	O	O:0.551635
passes	O	O:0.998639
the	O	O:0.999991
whole	O	O:0.999940
data	O	O:0.999963
frame	O	O:0.999996
and	O	O:0.999999
then	O	O:0.999985
column	O	O:0.999995
values	O	O:0.999946
can	O	O:0.999972
be	O	O:1.000000
used	O	O:0.999967
within	O	O:0.999109
the	O	O:0.999758
function	O	O:0.999583
?	O	O:0.999928
	
I	O	O:0.999973
think	O	O:0.999955
that	O	O:0.999045
was	O	O:0.999991
where	O	O:0.999943
I	O	O:0.999918
was	O	O:0.999977
getting	O	O:0.997974
it	O	O:0.999894
wrong	O	O:0.999694
...	O	O:0.999507
	
ok	O	O:0.999819
,	O	O:0.999986
I	O	O:0.999997
think	O	O:0.999977
apply	O	O:0.510396
as	O	O:0.999783
in	O	O:0.999781
@USER	O	O:0.999659
answer	O	O:0.999029
is	O	O:0.999991
more	O	O:0.999537
appropriate	O	O:0.999967
here	O	O:0.999252
?	O	O:0.999967
	
You're	O	O:0.999542
welcome	O	O:0.998954
!	O	O:0.999877
	
If	O	O:0.999965
you	O	O:0.999983
really	O	O:0.999982
want	O	O:0.999956
to	O	O:0.999984
thank	O	O:0.999996
me	O	O:0.999971
,	O	O:0.999998
look	O	O:0.999810
up	O	O:0.999989
the	O	O:0.999969
functions	O	O:0.999603
I'm	O	O:0.999953
using	O	O:0.999971
there	O	O:0.999264
and	O	O:0.999973
figure	O	O:0.999643
out	O	O:0.999719
how	O	O:0.999996
each	O	O:0.999791
of	O	O:0.999997
those	O	O:0.999943
things	O	O:0.999499
is	O	O:0.999980
implemented	O	O:0.999591
,	O	O:0.999996
play	O	O:0.998078
around	O	O:0.999717
with	O	O:0.999965
them	O	O:0.998961
and	O	O:0.999996
apply	O	O:0.757725
it	O	O:0.999437
in	O	O:0.999993
your	O	O:0.999876
own	O	O:0.999963
code	O	O:0.999687
:)	O	O:0.999898
	
did	O	O:0.999797
you	O	O:0.999978
try	O	O:0.999995
to	O	O:0.999995
use	O	O:0.999996
`	O	O:0.999953
axis=0	O	O:0.981149
`	O	O:0.999986
?	O	O:0.999651
	
This	O	O:0.999719
should	O	O:0.999941
be	O	O:0.999998
the	O	O:0.999998
case	O	O:0.999828
since	O	O:0.999957
you	O	O:0.999994
want	O	O:0.999998
to	O	O:0.999995
apply	O	O:0.988470
the	O	O:0.999763
function	O	O:0.999504
for	O	O:0.999996
each	O	O:0.998097
row	O	O:0.999838
...	O	O:0.999446
	
I	O	O:0.999968
just	O	O:0.999747
tried	O	O:0.998998
it	O	O:0.999829
and	O	O:0.999967
it	O	O:0.999972
didn't	O	O:0.999071
work	O	O:0.999686
.	O	O:0.999955
	
According	O	O:0.999408
to	O	O:0.999930
#URL	O	O:0.999977
axis=1	O	O:0.998751
is	O	O:0.999987
to	O	O:0.999988
apply	O	O:0.965240
to	O	O:0.999983
each	O	O:0.999895
row	O	O:0.999889
.	O	O:0.999906
	
I	O	O:0.999984
also	O	O:0.999931
experienced	O	O:0.999951
this	O	O:0.999763
error	O	O:0.999586
.	O	O:0.999852
	
It	O	O:0.999963
turned	O	O:0.999700
out	O	O:0.999989
that	O	O:0.999901
the	O	O:0.999997
pandas	O	O:0.999612
Time	O	O:0.999897
Series	O	O:0.999909
data	O	O:0.999966
type	O	O:0.999563
was	O	O:0.999976
causing	O	O:0.999785
the	O	O:0.999961
problem	O	O:0.996876
.	O	O:0.999837
	
When	O	O:0.999748
I	O	O:0.999997
applied	O	O:0.999987
the	O	O:0.999430
function	O	O:0.999815
with	O	O:0.999929
the	O	O:0.999995
time	O	O:0.999977
expressed	O	O:0.999866
in	O	O:0.999977
epoch	O	O:0.994309
(	O	O:0.999975
or	O	O:0.999997
anything	O	O:0.999914
)	O	O:0.999993
success	O	O:0.998443
,	O	O:0.999987
but	O	O:0.999976
with	O	O:0.999925
the	O	O:0.999993
time	O	O:0.999980
converted	O	O:0.999621
to	O	O:0.999997
pandas	O	O:0.999982
Time	O	O:0.999795
Series	O	O:0.999562
,	O	O:0.999993
there	O	O:0.999606
was	O	O:0.999983
this	O	O:0.999927
error	O	O:0.999710
.	O	O:0.999837
	
So	O	O:0.999979
my	O	O:0.999974
suggestion	O	O:0.999636
would	O	O:0.999981
be	O	O:0.999998
to	O	O:0.999999
convert	O	O:0.999635
to	O	O:0.999978
Time	O	O:0.999986
Series	O	O:0.999854
after	O	O:0.999966
you	O	O:0.999973
apply	O	O:0.721598
the	O	O:0.999703
function	O	O:0.999651
,	O	O:0.999983
which	O	O:0.999979
obviously	O	O:0.999796
is	O	O:0.999996
contingent	O	O:0.999645
that	O	O:0.999974
you	O	O:0.999991
don't	O	O:0.999991
need	O	O:0.999997
your	O	O:0.999985
time	O	O:0.999995
variable	O	O:0.999960
in	O	O:0.999992
the	O	O:0.999832
function	O	O:0.999963
being	O	O:0.999381
applied	O	O:0.999445
.	O	O:0.999466
	
*	O	O:0.999973
apply	O	B-API:0.905943
function	O	O:0.999240
not	O	O:0.999782
tested	O	O:0.999841
with	O	O:0.999946
pandas	O	O:0.999534
Time	O	O:0.999869
Spans	O	O:0.996404
.	O	O:0.999762
	
You	O	O:0.999854
could	O	O:0.999909
`	O	O:0.999999
apply	O	B-API:0.956570
`	O	O:0.999963
the	O	O:0.999743
conversion	O	O:0.999853
on	O	O:0.999996
the	O	O:0.999996
appropriate	O	O:0.999972
column	O	O:0.998738
:	O	O:0.999989
#CODE	O	O:0.999892
	
Hi	O	O:0.999883
Jeff	O	O:0.999378
,	O	O:0.999992
thank	O	O:0.999896
you	O	O:0.999941
for	O	O:0.999999
your	O	O:0.999877
reply	O	O:0.996671
and	O	O:0.999998
this	O	O:0.999632
is	O	O:0.999994
a	O	O:0.999977
great	O	O:0.998076
idea	O	O:0.998709
,	O	O:0.999943
but	O	O:0.999995
it	O	O:0.999979
somehow	O	O:0.999911
does	O	O:0.999933
not	O	O:0.999997
really	O	O:0.999984
solve	O	O:0.999743
the	O	O:0.999984
complete	O	O:0.999180
problem	O	O:0.999359
.	O	O:0.999864
	
The	O	O:0.999850
standard	O	O:0.997358
grouping	O	O:0.999851
method	O	O:0.999958
of	O	O:0.999966
"	O	O:0.999987
resample	O	B-API:0.849824
"	O	O:0.999747
is	O	O:0.999775
"	O	O:0.999896
how=	O	O:0.995862
'	O	O:0.999988
mean	O	O:0.998928
'"	O	O:0.999898
.	O	O:0.999732
	
Is	O	O:0.999949
it	O	O:0.999992
defined	O	O:0.999894
anywhere	O	O:0.999975
how	O	O:0.999981
I	O	O:0.999995
can	O	O:0.999996
change	O	O:0.999959
that	O	O:0.999977
to	O	O:0.999998
something	O	O:0.999999
more	O	O:0.999595
useful	O	O:0.999473
?	O	O:0.999939
	
I	O	O:0.999990
have	O	O:0.999981
to	O	O:0.999989
apply	O	O:0.991494
a	O	O:0.999968
custom	O	O:0.870517
function	O	O:0.999803
.	O	O:0.999712
	
The	O	O:0.999925
point	O	O:0.998143
is	O	O:0.999998
that	O	O:0.999856
I	O	O:0.999999
also	O	O:0.999994
have	O	O:0.999993
multiple	O	O:0.999971
entries	O	O:0.999899
per	O	O:0.999897
day	O	O:0.999922
and	O	O:0.999999
your	O	O:0.999897
resample-solution	O	O:0.979176
is	O	O:0.999999
only	O	O:0.999907
correct	O	O:0.999976
with	O	O:0.999985
the	O	O:0.999930
"	O	O:0.999995
mean	O	O:0.988892
"	O	O:0.999986
method	O	O:0.999964
when	O	O:0.999888
there	O	O:0.999942
is	O	O:0.999999
only	O	O:0.999917
one	O	O:0.999997
entry	O	O:0.999954
per	O	O:0.999875
day	O	O:0.999850
.	O	O:0.999825
	
`	O	O:0.999520
argmin()	B-API	B-API:0.999649
`	O	O:0.999747
is	O	O:0.999939
not	O	O:0.999980
an	O	O:0.999989
agg	O	B-API:0.972848
function	O	O:0.999827
,	O	O:0.999991
you	O	O:0.999990
can	O	O:0.999981
use	O	O:1.000000
apply	O	O:0.672923
to	O	O:0.999883
get	O	O:0.999995
the	O	O:0.999966
closest	O	O:0.999890
index	O	O:0.999959
of	O	O:0.999997
every	O	O:0.999766
group	O	O:0.993679
:	O	O:0.999951
#CODE	O	O:0.999678
	
Are	O	O:0.999880
you	O	O:0.999984
trying	O	O:0.999977
to	O	O:0.999998
apply	O	O:0.990631
a	O	O:0.999903
function	O	O:0.999431
to	O	O:0.999998
each	O	O:0.999994
row	O	O:0.999976
by	O	O:0.999993
taking	O	O:0.999888
arguments	O	O:0.999518
from	O	O:0.999978
different	O	O:0.999968
columns	O	O:0.999833
?	O	O:0.999961
	
This	O	O:0.999193
has	O	O:0.999848
already	O	O:0.999915
been	O	O:0.997639
[	O	O:0.999988
answered	O	O:0.999951
here	O	O:0.998929
]	O	O:0.999522
(	O	O:0.999920
#URL	O	O:0.999391
)	O	O:0.999939
.	O	O:0.999740
	
EDIT	O	O:0.998340
:	O	O:0.999962
I	O	O:0.999994
originally	O	O:0.999981
start	O	O:0.999525
with	O	O:0.999986
a	O	O:0.999993
dataframe	B-API	O:0.998384
that	O	O:0.999976
hase	O	O:0.999953
one	O	O:0.999991
column	O	O:0.999799
.	O	O:0.999943
	
I	O	O:0.999980
add	O	O:0.999962
4	O	O:0.999954
columns	O	O:0.999704
in	O	O:0.999957
4	O	O:0.999981
difference	O	O:0.999972
apply	O	O:0.742560
steps	O	O:0.998796
,	O	O:0.999962
and	O	O:0.999999
then	O	O:0.999966
when	O	O:0.999957
I	O	O:0.999999
try	O	O:0.999999
to	O	O:0.999990
add	O	O:0.999999
another	O	O:0.999982
column	O	O:0.999933
I	O	O:0.999989
get	O	O:0.999996
this	O	O:0.999729
error	O	O:0.999756
.	O	O:0.999837
	
what	O	O:0.999593
are	O	O:0.999989
you	O	O:0.999989
actually	O	O:0.999992
trying	O	O:0.999972
to	O	O:0.999978
do	O	O:0.999993
?	O	O:0.999974
	
using	O	O:0.999748
apply	O	B-API:0.842217
with	O	O:0.999559
a	O	O:0.999660
function	O	O:0.999889
that	O	O:0.999914
returns	O	O:0.999957
a	O	O:0.999992
list	O	O:0.994566
will	O	O:0.999917
try	O	O:0.999989
to	O	O:0.999989
coerce	O	O:0.999970
this	O	O:0.999978
to	O	O:0.999998
a	O	O:0.999999
Series	O	O:0.999185
,	O	O:0.999999
thus	O	O:0.999917
it	O	O:0.999996
needs	O	O:0.999984
the	O	O:0.999999
same	O	O:0.999945
length	O	O:0.999728
as	O	O:0.999992
the	O	O:0.999993
original	O	O:0.999173
lenght	O	O:0.999464
,	O	O:0.999967
OR	O	O:0.999992
a	O	O:0.999945
scalar	O	O:0.988337
(	O	O:0.999907
including	O	O:0.999766
None	O	O:0.999141
)	O	O:0.999926
.	O	O:0.999697
	
Output	O	O:0.998856
in	O	O:0.999998
your	O	O:0.999879
question	O	O:0.996795
is	O	O:0.999993
not	O	O:0.999958
the	O	O:0.999998
one	O	O:0.999984
you	O	O:0.999983
get	O	O:0.999997
from	O	O:0.999979
apply	O	B-API:0.607506
.	O	O:0.999585
	
Your	O	O:0.999776
output	O	O:0.999468
in	O	O:0.999991
first	O	O:0.999916
case	O	O:0.999427
is	O	O:0.999990
DataFrame	B-API	O:0.992436
with	O	O:0.999922
4	O	O:0.999983
columns	O	O:0.999949
,	O	O:0.999996
as	O	O:0.999992
@USER	O	O:0.999658
said	O	O:0.999711
,	O	O:0.999987
it's	O	O:0.999791
coersed	O	O:0.999617
list	O	O:0.999949
into	O	O:0.999940
rows	O	O:0.999175
.	O	O:0.999714
	
@USER	O	O:0.999563
I	O	O:0.999990
think	O	O:0.999971
that	O	O:0.999888
the	O	O:0.999994
output	O	O:0.998880
is	O	O:0.999987
the	O	O:0.999952
output	O	O:0.999917
from	O	O:0.999845
apply	O	B-API:0.518410
because	O	O:0.999786
apply	O	B-API:0.724279
will	O	O:0.999518
run	O	O:0.999924
each	O	O:0.999920
row	O	O:0.999951
through	O	O:0.999829
func=random	O	O:0.998863
,	O	O:0.999941
and	O	O:0.999997
that	O	O:0.999902
func	O	O:0.998237
will	O	O:0.999968
print	O	O:0.999801
out	O	O:0.999943
[	O	O:0.999971
1	O	O:0.999974
,	O	O:0.999964
2	O	O:0.999953
,	O	O:0.999974
3	O	O:0.999943
,	O	O:0.999989
4	O	O:0.999930
]	O	O:0.999914
.	O	O:0.999612
	
I	O	O:0.999844
am	O	O:0.999991
not	O	O:0.999934
sure	O	O:0.999984
what	O	O:0.999936
you	O	O:0.999972
are	O	O:0.999998
pointing	O	O:0.999735
out	O	O:0.999777
.	O	O:0.999897
	
I	O	O:0.999795
had	O	O:0.999981
this	O	O:0.999407
issue	O	O:0.999804
,	O	O:0.999967
and	O	O:0.999995
my	O	O:0.999948
solution	O	O:0.997621
was	O	O:0.999990
just	O	O:0.999917
to	O	O:0.999999
join	O	O:0.857610
my	O	O:0.999983
list	O	O:0.999850
into	O	O:0.999952
a	O	O:0.999964
string	O	O:0.997917
...	O	O:0.999956
then	O	O:0.999931
split	O	O:0.999846
it	O	O:0.999982
after	O	O:0.999975
the	O	O:0.999946
apply	O	B-API:0.948690
.	O	O:0.998692
	
and	O	O:0.999993
then	O	O:0.999772
use	O	O:0.999918
apply	O	B-API:0.969904
:	O	O:0.998860
#CODE	O	O:0.999196
	
This	O	O:0.999480
doesn't	O	O:0.999956
work	O	O:0.999958
on	O	O:0.999998
my	O	O:0.999991
example	O	O:0.999905
because	O	O:0.999983
there	O	O:0.999815
is	O	O:0.999997
one	O	O:0.999994
line	O	O:0.999946
of	O	O:0.999992
code	O	O:0.999844
that	O	O:0.999907
is	O	O:0.999998
different	O	O:0.999226
.	O	O:0.999791
	
It	O	O:0.999775
is	O	O:0.999993
missing	O	O:0.999220
df	O	O:0.999188
[	O	O:0.999944
'	O	O:0.999973
E	O	O:0.999950
']	O	O:0.999968
=	O	O:0.997601
1	O	O:0.999691
.	O	O:0.999758
	
I	O	O:0.999968
add	O	O:0.999961
the	O	O:0.999954
column	O	O:0.999084
'	O	O:0.999975
E	O	O:0.999876
'	O	O:0.999962
and	O	O:0.999998
then	O	O:0.999878
I	O	O:0.999998
do	O	O:0.999989
apply	O	B-API:0.878438
.	O	O:0.998157
	
I	O	O:0.999976
think	O	O:0.999962
that	O	O:0.999836
that	O	O:0.999789
is	O	O:0.999998
throwing	O	O:0.999279
it	O	O:0.999991
all	O	O:0.999920
off	O	O:0.999837
.	O	O:0.999807
	
The	O	O:0.999892
problem	O	O:0.999922
that	O	O:0.999928
I	O	O:0.999997
am	O	O:0.999999
working	O	O:0.998833
on	O	O:0.999990
starts	O	O:0.999725
with	O	O:0.999992
a	O	O:0.999996
dataframe	B-API	O:0.997896
with	O	O:0.999962
one	O	O:0.999991
column	O	O:0.999925
and	O	O:1.000000
then	O	O:0.999941
I	O	O:0.999999
keep	O	O:0.999966
doing	O	O:0.999757
apply	O	B-API:0.632723
to	O	O:0.999404
the	O	O:0.999998
dataframe	B-API	O:0.998758
to	O	O:0.999993
add	O	O:0.999999
columns	O	O:0.999842
.	O	O:0.999886
	
I	O	O:0.999973
add	O	O:0.999949
4	O	O:0.999869
columns	O	O:0.999491
and	O	O:0.999999
then	O	O:0.999986
when	O	O:0.999947
I	O	O:0.999999
try	O	O:0.999998
to	O	O:0.999979
add	O	O:0.999999
a	O	O:0.999997
fifth	O	O:0.999595
column	O	O:0.999956
,	O	O:0.999996
I	O	O:0.999994
get	O	O:0.999991
that	O	O:0.999789
error	O	O:0.999920
.	O	O:0.999902
	
EDIT	O	O:0.996663
:	O	O:0.999968
To	O	O:0.999990
clarify	O	O:0.999596
,	O	O:0.999971
I'm	O	O:0.999934
not	O	O:0.999991
just	O	O:0.999972
doing	O	O:0.999998
this	O	O:0.999709
for	O	O:0.999980
subtracting	O	O:0.998755
the	O	O:0.999931
mean	O	O:0.999489
,	O	O:0.999989
it	O	O:0.999965
was	O	O:0.999988
just	O	O:0.999975
a	O	O:0.999999
simple	O	O:0.997879
example	O	O:0.999523
.	O	O:0.999868
	
A	O	O:0.999981
more	O	O:0.999813
realistic	O	O:0.999612
example	O	O:0.999552
would	O	O:0.999985
be	O	O:0.999998
linearly	O	O:0.999976
filtering	O	O:0.999024
the	O	O:0.999905
array	O	O:0.999869
along	O	O:0.999911
axis	O	O:0.999410
0	O	O:0.999713
.	O	O:0.999839
	
I'd	O	O:0.999990
like	O	O:0.999980
to	O	O:0.999991
use	O	O:0.999997
the	O	O:0.999898
scipy.signal	O	O:0.726417
filtfilt	O	O:0.959838
function	O	O:0.999960
to	O	O:0.999984
filter	O	O:0.999862
my	O	O:0.999959
array	O	O:0.999863
.	O	O:0.999890
	
This	O	O:0.998970
is	O	O:0.999991
quite	O	O:0.999933
easy	O	O:0.999922
if	O	O:0.999992
I	O	O:0.999984
can	O	O:0.999994
just	O	O:0.999988
pass	O	O:0.999853
it	O	O:0.999992
a	O	O:0.999999
tpts	O	O:0.997666
x	O	O:0.999956
feats	O	O:0.999367
matrix	O	O:0.999648
,	O	O:0.999969
but	O	O:0.999990
right	O	O:0.999760
now	O	O:0.999961
it	O	O:0.999995
seems	O	O:0.999983
that	O	O:0.999982
the	O	O:0.999999
only	O	O:0.999920
way	O	O:0.999984
to	O	O:0.999985
do	O	O:0.999998
it	O	O:0.999965
is	O	O:0.999988
column-wise	O	O:0.999558
using	O	O:0.999873
"	O	O:0.999831
apply	O	B-API:0.981358
"	O	O:0.999085
	
apply	O	B-API:0.668179
also	O	O:0.998919
works	O	O:0.999950
on	O	O:0.999994
entire	O	O:0.999876
dataframes	O	O:0.999808
.	O	O:0.999834
	
If	O	O:0.999965
you	O	O:0.999989
want	O	O:0.999989
to	O	O:0.999997
subtract	O	O:0.999892
5	O	O:0.999856
(	O	O:0.999992
or	O	O:0.999997
an	O	O:0.999986
avg	O	O:0.999874
number	O	O:0.999893
)	O	O:0.999987
from	O	O:0.999992
every	O	O:0.999954
item	O	O:0.999844
in	O	O:0.999995
the	O	O:0.999998
data	O	O:0.999979
frame	O	O:0.999997
,	O	O:0.999999
you	O	O:0.999992
can	O	O:0.999983
do	O	O:1.000000
that	O	O:0.999995
as	O	O:1.000000
well	O	O:0.999970
by	O	O:0.999995
excluding	O	O:0.999515
the	O	O:0.999877
axis	O	O:0.999443
argument	O	O:0.999748
.	O	O:0.999852
	
So	O	O:0.999905
,	O	O:0.999956
it's	O	O:0.999748
not	O	O:0.999993
that	O	O:0.999980
I	O	O:1.000000
want	O	O:0.999992
to	O	O:0.999964
apply	O	O:0.995715
a	O	O:0.999853
function	O	O:0.999251
to	O	O:0.999997
every	O	O:0.999997
item	O	O:0.999790
in	O	O:0.999979
the	O	O:0.999995
dataframe	B-API	O:0.997025
,	O	O:0.999976
it's	O	O:0.999986
that	O	O:0.999948
I	O	O:1.000000
want	O	O:0.999994
to	O	O:0.999977
pass	O	O:0.999979
the	O	O:0.999992
entire	O	O:0.999972
contents	O	O:0.999965
of	O	O:0.999996
a	O	O:0.999997
dataframe	B-API	O:0.998812
to	O	O:0.999997
a	O	O:0.999996
function	O	O:0.999191
.	O	O:0.999899
	
For	O	O:0.999942
example	O	O:0.999638
,	O	O:0.999994
the	O	O:0.999996
hilbert	O	O:0.999439
transform	O	O:0.676469
in	O	O:0.999978
scipy	O	O:0.999878
takes	O	O:0.999923
a	O	O:0.999984
timepoints	O	O:0.998484
x	O	O:0.999941
features	O	O:0.999434
array	O	O:0.999947
,	O	O:0.999981
and	O	O:0.999976
computes	O	O:0.999855
the	O	O:0.999976
transform	O	O:0.612391
along	O	O:0.999520
the	O	O:0.999963
first	O	O:0.999359
axis	O	O:0.999648
.	O	O:0.999838
	
It	O	O:0.999836
is	O	O:0.999982
faster	O	O:0.999507
to	O	O:0.999996
pass	O	O:0.999961
a	O	O:0.999994
10,000	O	O:0.999721
by	O	O:0.999889
100	O	O:0.999591
matrix	O	O:0.999213
to	O	O:0.999995
this	O	O:0.999968
function	O	O:0.999979
than	O	O:0.999922
it	O	O:0.999983
is	O	O:0.999996
to	O	O:0.999995
pass	O	O:0.999910
100	O	O:0.999933
separate	O	O:0.999835
10,000	O	O:0.999486
length	O	O:0.999837
columns	O	O:0.999331
to	O	O:0.999998
this	O	O:0.999986
function	O	O:0.999980
,	O	O:0.999993
which	O	O:0.999677
is	O	O:0.999991
what	O	O:0.999644
would	O	O:0.999972
happen	O	O:0.999972
if	O	O:0.999997
I	O	O:0.999997
used	O	O:0.999889
"	O	O:0.999885
apply	O	B-API:0.924632
"	O	O:0.999409
.	O	O:0.998530
	
I'm	O	O:0.999947
trying	O	O:0.999926
to	O	O:0.999988
get	O	O:0.999963
around	O	O:0.999953
this	O	O:0.999786
.	O	O:0.999935
	
Am	O	O:0.999967
I	O	O:0.999992
stuck	O	O:0.999932
with	O	O:0.999919
using	O	O:0.999990
a	O	O:0.999926
for	O	O:0.999777
loop	O	O:0.999800
to	O	O:0.999967
apply	O	O:0.913344
the	O	O:0.999847
boolean	O	O:0.956979
'	O	O:0.999929
and	O	O:0.999973
'	O	O:0.999992
operation	O	O:0.999772
on	O	O:0.999993
all	O	O:0.999989
columns	O	O:0.999561
(	O	O:0.999988
i.e.	O	O:0.999971
from	O	O:0.999976
column	O	O:0.999875
A	O	O:0.999998
to	O	O:0.999997
column	O	O:0.999994
Z	O	O:0.999959
)	O	O:0.999985
?	O	O:0.999902
	
To	O	O:0.999961
reiterate	O	O:0.999915
my	O	O:0.999985
question	O	O:0.999894
in	O	O:0.999996
another	O	O:0.999930
manner	O	O:0.998265
is	O	O:0.999989
there	O	O:0.999936
an	O	O:0.999993
efficient	O	O:0.999929
way	O	O:0.999901
or	O	O:0.999970
built-in	O	O:0.999689
pandas	O	O:0.999599
function	O	O:0.999942
to	O	O:0.999885
'	O	O:0.999997
AND	O	O:0.999885
'	O	O:0.999990
a	O	O:0.999985
pandas	O	O:0.999752
Series	O	O:0.999958
on	O	O:0.999981
all	O	O:0.999995
the	O	O:0.999999
columns	O	O:0.999932
of	O	O:0.999997
a	O	O:0.999995
pandas	O	O:0.999860
dataframe	B-API	O:0.997862
?	O	O:0.999905
	
Hi	O	O:0.999796
@USER	O	O:0.999772
,	O	O:0.999989
I	O	O:0.999983
am	O	O:0.999995
getting	O	O:0.996307
`	O	O:0.999919
OverflowError	O	O:0.995846
:	O	O:0.999977
Python	O	O:0.999385
int	O	O:0.999760
too	O	O:0.999947
large	O	O:0.999803
to	O	O:0.999937
convert	O	O:0.999857
to	O	O:0.999985
C	O	O:0.999997
long	O	O:0.999716
`	O	O:0.999996
when	O	O:0.999645
I	O	O:0.999999
apply	O	O:0.996751
your	O	O:0.989886
solution	O	O:0.995515
.	O	O:0.999939
	
Any	O	O:0.999893
suggestion	O	O:0.999830
about	O	O:0.999918
the	O	O:0.999919
reason	O	O:0.998244
?	O	O:0.999955
	
My	O	O:0.999920
question	O	O:0.999713
,	O	O:0.999999
then	O	O:0.999816
,	O	O:0.999996
is	O	O:0.999998
how	O	O:0.999956
I	O	O:0.999995
can	O	O:0.999990
accomplish	O	O:0.999981
this	O	O:0.999968
while	O	O:0.999979
reducing	O	O:0.999679
my	O	O:0.999901
memory	O	O:0.999682
overhead	O	O:0.999729
.	O	O:0.999839
	
I	O	O:0.999979
think	O	O:0.999969
the	O	O:0.999932
problem	O	O:0.994097
is	O	O:0.999994
trying	O	O:0.999895
to	O	O:0.999992
perform	O	O:0.999931
the	O	O:0.999991
reindexing	O	O:0.999230
with	O	O:0.999843
the	O	O:0.999950
groupby	B-API	B-API:0.979381
/	O	O:0.999447
apply	O	B-API:0.899743
method	O	O:0.998125
,	O	O:0.999949
but	O	O:0.999983
I	O	O:0.999986
don't	O	O:0.999970
kow	O	O:0.999679
what	O	O:0.999939
the	O	O:0.999986
alternative	O	O:0.998947
is	O	O:0.999921
.	O	O:0.999777
	
It	O	O:0.999956
seems	O	O:0.999960
like	O	O:0.999952
there	O	O:0.999959
should	O	O:0.999960
be	O	O:0.999997
way	O	O:0.999989
I	O	O:0.999975
could	O	O:0.999975
do	O	O:0.999996
something	O	O:0.999988
similar	O	O:0.999804
iteratively	O	O:0.999880
that	O	O:0.999870
would	O	O:0.999981
require	O	O:0.999971
less	O	O:0.999749
memory	O	O:0.998993
,	O	O:0.999939
but	O	O:0.999833
I'm	O	O:0.999950
not	O	O:0.999994
sure	O	O:0.999960
how	O	O:0.999986
to	O	O:0.999993
go	O	O:0.999999
about	O	O:0.999915
it	O	O:0.999929
.	O	O:0.999862
	
Or	O	O:0.999977
you	O	O:0.999970
can	O	O:0.999985
use	O	O:0.999994
apply	O	B-API:0.950073
:	O	O:0.999305
#CODE	O	O:0.999212
	
I	O	O:0.999955
now	O	O:0.999990
want	O	O:0.999836
to	O	O:0.999991
apply	O	O:0.997453
some	O	O:0.999921
aggregate	O	O:0.586345
functions	O	O:0.999844
to	O	O:0.999992
the	O	O:1.000000
records	O	O:0.999540
in	O	O:0.999998
each	O	O:0.999975
of	O	O:0.999996
my	O	O:0.999959
bin	O	O:0.999837
groups	O	O:0.997156
(	O	O:0.999958
An	O	O:0.999993
aggregate	O	O:0.704802
funcitn	O	O:0.993642
is	O	O:0.999996
something	O	O:0.999952
like	O	O:0.999914
sum	O	O:0.999806
,	O	O:0.999999
mean	O	O:0.999915
or	O	O:0.999999
count	O	O:0.999049
)	O	O:0.999994
.	O	O:0.999746
	
Now	O	O:0.999895
I	O	O:0.999997
want	O	O:0.999983
to	O	O:0.999912
apply	O	O:0.997032
three	O	O:0.999891
aggregate	O	O:0.535059
functions	O	O:0.999809
to	O	O:0.999991
the	O	O:1.000000
records	O	O:0.999540
in	O	O:0.999998
each	O	O:0.999972
of	O	O:0.999998
my	O	O:0.999966
bins	O	O:0.999404
:	O	O:0.999989
the	O	O:0.999999
mean	O	O:0.999930
of	O	O:0.999969
'	O	O:0.999985
col11	O	O:0.999669
'	O	O:0.999974
,	O	O:0.999995
the	O	O:0.999995
number	O	O:0.999949
of	O	O:0.999995
records	O	O:0.999887
in	O	O:0.999995
each	O	O:0.999845
bin	O	O:0.999657
,	O	O:0.999987
and	O	O:0.999996
the	O	O:0.999994
number	O	O:0.999870
of	O	O:0.999993
records	O	O:0.999838
in	O	O:0.999997
each	O	O:0.999798
bin	O	O:0.999939
that	O	O:0.999990
have	O	O:0.999899
'	O	O:0.999995
col7	O	O:0.999459
'	O	O:0.999994
equal	O	O:0.999681
to	O	O:0.999990
one	O	O:0.999996
.	O	O:0.999920
	
The	O	O:0.999974
mean	O	O:0.998217
is	O	O:0.999997
easy	O	O:0.999021
;	O	O:0.999993
numpy	O	O:0.998940
already	O	O:0.999944
has	O	O:0.999990
a	O	O:0.999969
function	O	O:0.999927
to	O	O:0.999988
calculate	O	O:0.999966
the	O	O:0.999997
mean	O	O:0.999415
.	O	O:0.999948
	
If	O	O:0.999930
I	O	O:0.999960
was	O	O:0.999994
just	O	O:0.999747
doing	O	O:0.999971
the	O	O:0.999994
mean	O	O:0.999389
of	O	O:0.999965
'	O	O:0.999972
col11	O	O:0.999731
'	O	O:0.999977
I	O	O:0.999974
would	O	O:0.999933
write	O	O:0.998785
:	O	O:0.999985
`	O	O:0.999997
dfg	O	O:0.999622
=	O	O:0.999980
df	O	O:0.998129
[[	O	O:0.999820
'	O	O:0.999961
bin	O	O:0.999301
'	O	O:0.999989
,	O	O:0.999962
'	O	O:0.999982
col7	O	O:0.998581
'	O	O:0.999984
,	O	O:0.999954
'	O	O:0.999980
col11	O	O:0.999559
']]	O	O:0.999787
.groupby	B-API	B-API:0.998233
(	O	O:0.999693
'	O	O:0.999967
bin	O	O:0.999710
')	O	O:0.999904
.agg	B-API	B-API:0.998425
(	O	O:0.999799
{	O	O:0.999884
'	O	O:0.999972
col11	O	O:0.993011
'	O	O:0.999908
:	O	O:0.999907
[	O	O:0.999982
np.mean	B-API	B-API:0.821471
]	O	O:0.999891
}	O	O:0.999913
)`	O	O:0.999530
.	O	O:0.999637
	
The	O	O:0.999967
number	O	O:0.999945
of	O	O:0.999989
records	O	O:0.999028
is	O	O:0.999997
also	O	O:0.999975
easy	O	O:0.999889
;	O	O:0.999984
python's	O	O:0.998808
`	O	O:0.999978
len	O	B-API:0.964113
`	O	O:0.999923
function	O	O:0.952506
(	O	O:0.999939
It's	O	O:0.999935
not	O	O:0.999989
really	O	O:0.999988
a	O	O:0.999899
function	O	O:0.999096
but	O	O:0.999974
a	O	O:0.999998
property	O	O:0.999858
of	O	O:0.999992
lists	O	O:0.998809
etc	O	O:0.999977
.	O	O:0.999983
)	O	O:0.999991
will	O	O:0.999966
give	O	O:0.999931
us	O	O:0.999985
the	O	O:0.999988
number	O	O:0.999939
of	O	O:0.999993
items	O	O:0.999578
in	O	O:0.999986
list	O	O:0.998225
.	O	O:0.999909
	
So	O	O:0.999978
I	O	O:0.999994
now	O	O:0.999996
have	O	O:0.999610
`	O	O:0.999995
dfg	O	O:0.999521
=	O	O:0.999979
df	O	O:0.998005
[[	O	O:0.999820
'	O	O:0.999961
bin	O	O:0.999301
'	O	O:0.999989
,	O	O:0.999962
'	O	O:0.999982
col7	O	O:0.998581
'	O	O:0.999984
,	O	O:0.999954
'	O	O:0.999980
col11	O	O:0.999559
']]	O	O:0.999787
.groupby	B-API	B-API:0.998233
(	O	O:0.999693
'	O	O:0.999967
bin	O	O:0.999710
')	O	O:0.999904
.agg	B-API	B-API:0.998425
(	O	O:0.999799
{	O	O:0.999884
'	O	O:0.999972
col11	O	O:0.993011
'	O	O:0.999908
:	O	O:0.999907
[	O	O:0.999983
np.mean	B-API	B-API:0.766460
]	O	O:0.999958
,	O	O:0.999890
'	O	O:0.999980
col7	O	O:0.995427
'	O	O:0.999929
:	O	O:0.999960
[	O	O:0.999988
len	O	O:0.920696
]	O	O:0.999926
}	O	O:0.999483
)`	O	O:0.999462
.	O	O:0.999585
	
Now	O	O:0.999883
I	O	O:0.999984
can't	O	O:0.999991
think	O	O:0.999938
of	O	O:0.999997
an	O	O:0.999992
existing	O	O:0.999374
function	O	O:0.999964
that	O	O:0.999945
counts	O	O:0.999977
the	O	O:0.999998
number	O	O:0.999958
of	O	O:0.999996
ones	O	O:0.999917
in	O	O:0.999999
a	O	O:0.999998
numpy	O	O:0.998790
array	O	O:0.998821
(	O	O:0.999932
it	O	O:0.999976
has	O	O:0.999970
to	O	O:0.999998
work	O	O:0.999998
on	O	O:0.999999
a	O	O:0.999998
numpy	O	O:0.999894
array	O	O:0.999870
)	O	O:0.999948
.	O	O:0.999698
	
I	O	O:0.999967
can	O	O:0.999992
define	O	O:0.999930
my	O	O:0.999996
own	O	O:0.999865
functions	O	O:0.999976
that	O	O:0.999974
work	O	O:0.999991
on	O	O:1.000000
a	O	O:0.999998
numpy	O	O:0.999802
array	O	O:0.999924
,	O	O:0.999991
hence	O	O:0.999971
my	O	O:0.999798
function	O	O:0.999864
`	O	O:0.999992
count_ones	O	O:0.944967
`	O	O:0.999988
.	O	O:0.999470
	
Now	O	O:0.999911
I'll	O	O:0.999686
deconstruct	O	O:0.999643
the	O	O:0.999908
`	O	O:0.999970
count_ones	O	O:0.966946
`	O	O:0.999979
function	O	O:0.999674
.	O	O:0.999987
the	O	O:0.999978
varibale	O	O:0.999576
`	O	O:0.999982
x	O	O:0.999063
`	O	O:0.999998
passed	O	O:0.998750
to	O	O:0.999996
the	O	O:0.999994
function	O	O:0.998731
is	O	O:0.999991
always	O	O:0.999976
going	O	O:0.999906
to	O	O:0.999974
be	O	O:1.000000
a	O	O:0.999993
1d	O	O:0.999488
numpy	O	O:0.999667
array	O	O:0.999691
.	O	O:0.999766
	
In	O	O:0.999944
our	O	O:0.999920
specific	O	O:0.999756
case	O	O:0.999898
it	O	O:0.999995
will	O	O:0.999966
be	O	O:0.999998
all	O	O:0.999995
the	O	O:0.999774
'	O	O:0.999920
col7	O	O:0.999393
'	O	O:0.999991
values	O	O:0.999933
that	O	O:0.999980
fall	O	O:0.999936
in	O	O:0.999995
bin	O	O:0.999638
#1	O	O:0.999983
,	O	O:0.999992
all	O	O:0.999983
the	O	O:0.999883
'	O	O:0.999946
col7	O	O:0.999609
'	O	O:0.999991
values	O	O:0.999933
that	O	O:0.999980
fall	O	O:0.999936
in	O	O:0.999995
bin	O	O:0.999687
#2	O	O:0.999961
etc	O	O:0.999914
..	O	O:0.999843
	
The	O	O:0.999956
code	O	O:0.998741
`	O	O:0.999993
x	O	O:0.999544
==	O	O:0.999970
1	O	O:0.999778
`	O	O:0.999992
will	O	O:0.999868
create	O	O:0.999978
a	O	O:0.999994
boolean	O	O:0.952023
(	O	O:0.999976
TRUE	O	O:0.998724
/	O	O:0.999976
FALSE	O	O:0.999512
)	O	O:0.999983
array	O	O:0.999907
the	O	O:0.999989
same	O	O:0.999951
size	O	O:0.999849
as	O	O:0.999989
x	O	O:0.999689
.	O	O:0.999830
	
The	O	O:0.999989
entries	O	O:0.999063
in	O	O:0.999977
the	O	O:0.999988
boolean	O	O:0.998538
array	O	O:0.999962
will	O	O:0.999760
be	O	O:0.999997
True	O	O:0.999920
if	O	O:0.999967
the	O	O:0.999998
corresponding	O	O:0.999565
values	O	O:0.998820
in	O	O:0.999964
x	O	O:0.999976
are	O	O:0.999994
equal	O	O:0.999919
to	O	O:0.999960
1	O	O:0.999992
and	O	O:0.999995
false	O	O:0.999743
otherwise	O	O:0.999641
.	O	O:0.999908
	
Because	O	O:0.999469
python	O	O:0.999247
treats	O	O:0.999929
True	O	O:0.999925
as	O	O:0.999974
1	O	O:0.999947
if	O	O:0.999992
I	O	O:0.999994
sum	O	O:0.999977
the	O	O:0.999989
values	O	O:0.999776
of	O	O:0.999982
my	O	O:0.999976
boolean	O	O:0.999650
array	O	O:0.999974
I'll	O	O:0.999692
get	O	O:0.999993
a	O	O:1.000000
count	O	O:0.999267
of	O	O:0.999999
the	O	O:0.999970
values	O	O:0.999876
that	O	O:0.999708
==	O	O:0.999988
1	O	O:0.999899
.	O	O:0.999805
	
Now	O	O:0.999983
that	O	O:0.999959
I	O	O:1.000000
have	O	O:0.999994
my	O	O:0.999896
`	O	O:0.999994
count_ones	O	O:0.971449
`	O	O:0.999983
function	O	O:0.999768
I	O	O:0.999995
apply	O	O:0.877848
it	O	O:0.999538
to	O	O:0.999847
'	O	O:0.999999
col7	O	O:0.999471
'	O	O:0.999982
by	O	O:0.999899
:	O	O:0.999960
`	O	O:0.999987
dfg	O	O:0.999602
=	O	O:0.999980
df	O	O:0.998129
[[	O	O:0.999820
'	O	O:0.999961
bin	O	O:0.999301
'	O	O:0.999989
,	O	O:0.999962
'	O	O:0.999982
col7	O	O:0.998581
'	O	O:0.999984
,	O	O:0.999954
'	O	O:0.999980
col11	O	O:0.999559
']]	O	O:0.999787
.groupby	B-API	B-API:0.998233
(	O	O:0.999693
'	O	O:0.999967
bin	O	O:0.999710
')	O	O:0.999904
.agg	B-API	B-API:0.998425
(	O	O:0.999799
{	O	O:0.999884
'	O	O:0.999972
col11	O	O:0.993011
'	O	O:0.999908
:	O	O:0.999907
[	O	O:0.999983
np.mean	B-API	B-API:0.766460
]	O	O:0.999958
,	O	O:0.999890
'	O	O:0.999980
col7	O	O:0.995365
'	O	O:0.999924
:	O	O:0.999924
[	O	O:0.999991
count_ones	O	O:0.999587
,	O	O:0.999989
len	O	O:0.753113
]	O	O:0.999942
}	O	O:0.999586
)`	O	O:0.999724
	
I	O	O:0.999967
find	O	O:0.999971
this	O	O:0.999892
helpful	O	O:0.999849
to	O	O:0.999986
see	O	O:0.999998
what	O	O:0.999657
is	O	O:0.999997
actually	O	O:0.999981
passed	O	O:0.999510
to	O	O:0.999985
the	O	O:0.999999
apply	O	B-API:0.616708
,	O	O:0.999954
which	O	O:0.999611
in	O	O:0.999996
this	O	O:0.999977
case	O	O:0.999924
is	O	O:0.999998
a	O	O:0.999971
frame	O	O:0.999866
#CODE	O	O:0.999613
	
The	O	O:0.999875
above	O	O:0.999210
works	O	O:0.999953
just	O	O:0.999882
fine	O	O:0.999753
,	O	O:0.999989
but	O	O:0.999977
I	O	O:0.999974
can't	O	O:0.999947
understand	O	O:0.999865
why	O	O:0.999980
I	O	O:0.999996
have	O	O:0.999992
to	O	O:0.999982
wrap	O	O:0.999986
the	O	O:0.999950
function	O	O:0.999860
in	O	O:0.999994
a	O	O:0.999993
lambda	O	O:0.997051
.	O	O:0.999761
	
Based	O	O:0.999714
upon	O	O:0.999209
the	O	O:0.999877
syntax	O	O:0.999852
used	O	O:0.999812
with	O	O:0.999803
transform	O	B-API:0.735332
and	O	O:0.999979
apply	O	B-API:0.531749
it	O	O:0.999749
seems	O	O:0.999923
to	O	O:0.999994
me	O	O:0.999999
that	O	O:0.999956
the	O	O:0.999997
following	O	O:0.999694
should	O	O:0.999871
work	O	O:0.999978
just	O	O:0.999966
fine	O	O:0.999740
:	O	O:0.999964
#CODE	O	O:0.999865
	
Passing	O	O:0.999169
arguments	O	O:0.999213
to	O	O:0.999938
`	O	O:0.999999
apply	O	B-API:0.974110
`	O	O:0.999983
just	O	O:0.998028
happens	O	O:0.999987
to	O	O:0.999990
work	O	O:0.999983
,	O	O:0.999998
because	O	O:0.999972
`	O	O:0.999991
apply	O	B-API:0.956827
`	O	O:0.999980
passes	O	O:0.993524
on	O	O:0.999997
all	O	O:0.999989
arguments	O	O:0.999937
to	O	O:0.999976
the	O	O:1.000000
target	O	O:0.996539
function	O	O:0.999877
.	O	O:0.999906
	
and	O	O:0.999934
apply	O	O:0.724254
this	O	O:0.998397
custom	O	O:0.993062
converter	O	O:0.841903
#CODE	O	O:0.999358
	
and	O	O:0.999933
apply	O	O:0.681688
this	O	O:0.995715
conversion	O	O:0.992412
function	O	O:0.999630
:	O	O:0.999955
#CODE	O	O:0.999848
	
I	O	O:0.999970
apply	O	O:0.985724
some	O	O:0.993024
functions	O	O:0.999372
and	O	O:0.999996
generate	O	O:0.999963
a	O	O:0.999988
new	O	O:0.999961
column	O	O:0.999958
values	O	O:0.999922
to	O	O:0.999998
a	O	O:1.000000
existing	O	O:0.999828
column	O	O:0.999854
of	O	O:0.999977
Pandas	O	O:0.999790
dataframe	B-API	O:0.996095
.	O	O:0.999725
	
However	O	O:0.999696
`	O	O:0.999987
df	O	O:0.999115
[	O	O:0.999972
'	O	O:0.999978
col1	O	O:0.999514
']	O	O:0.999884
=	O	O:0.999326
new_list	O	O:0.967311
`	O	O:0.999961
does	O	O:0.999091
not	O	O:0.999998
work	O	O:0.999991
to	O	O:0.999998
assign	O	O:0.999983
new	O	O:0.999978
list	O	O:0.999310
to	O	O:0.999993
the	O	O:0.999999
column	O	O:0.999615
.	O	O:0.999938
	
Is	O	O:0.999937
it	O	O:0.999982
the	O	O:0.999992
wrong	O	O:0.999365
way	O	O:0.999685
and	O	O:0.999996
what	O	O:0.999576
is	O	O:0.999983
the	O	O:0.999976
accurate	O	O:0.999775
way	O	O:0.999960
to	O	O:0.999994
apply	O	O:0.994302
such	O	O:0.999063
operation	O	O:0.999397
?	O	O:0.999825
	
I	O	O:0.999964
don't	O	O:0.999978
know	O	O:0.999444
why	O	O:0.999944
the	O	O:0.999382
index	O	O:0.999431
method	O	O:0.999895
has	O	O:0.999985
inconsistent	O	O:0.999938
behavior	O	O:0.999851
while	O	O:0.999921
doing	O	O:0.999245
column-wise	O	O:0.999356
apply	O	B-API:0.928404
function	O	O:0.997969
.	O	O:0.999358
	
And	O	O:0.999900
I	O	O:0.999996
want	O	O:0.999982
to	O	O:0.999932
apply	O	O:0.994009
lambda	O	O:0.998798
to	O	O:0.999961
the	O	O:0.999999
second	O	O:0.999828
columns	O	O:0.999768
,	O	O:0.999996
it	O	O:0.999989
it	O	O:0.999979
saying	O	O:0.999896
the	O	O:0.999952
Series	O	O:0.998862
object	O	O:0.999290
can	O	O:0.999962
not	O	O:1.000000
be	O	O:0.999998
apply	O	O:0.608390
?	O	O:0.999257
	
#CODE	O	O:0.998453
	
When	O	O:0.998469
you	O	O:0.999984
index	O	O:0.999983
with	O	O:0.999979
`'	O	O:0.999975
B	O	O:0.999959
'`	O	O:0.999989
you	O	O:0.999938
get	O	O:0.999995
a	O	O:0.999997
series	O	O:0.999595
.	O	O:0.999908
	
When	O	O:0.998503
you	O	O:0.999984
index	O	O:0.999986
with	O	O:0.999958
`	O	O:0.999992
1:2	O	O:0.999026
`	O	O:0.999996
or	O	O:0.999970
with	O	O:0.999924
`	O	O:0.999963
[	O	O:0.999913
'	O	O:0.999991
B	O	O:0.999967
']`	O	O:0.999930
,	O	O:0.999984
you	O	O:0.999990
get	O	O:0.999988
a	O	O:0.999999
DataFrame	B-API	O:0.996990
with	O	O:0.999965
one	O	O:0.999989
column	O	O:0.999870
.	O	O:0.999951
	
When	O	O:0.999772
you	O	O:0.999980
use	O	O:0.999978
`	O	O:0.999971
apply	O	B-API:0.975571
`	O	O:0.999983
on	O	O:0.999957
a	O	O:0.999998
series	O	O:0.999826
,	O	O:0.999999
your	O	O:0.999744
function	O	O:0.999123
is	O	O:0.999996
called	O	O:0.999374
on	O	O:0.999995
each	O	O:0.998445
element	O	O:0.999762
.	O	O:0.999882
	
When	O	O:0.999772
you	O	O:0.999980
use	O	O:0.999978
`	O	O:0.999971
apply	O	B-API:0.975097
`	O	O:0.999983
on	O	O:0.999857
a	O	O:0.999997
DataFrame	B-API	O:0.990753
,	O	O:0.999999
your	O	O:0.999666
function	O	O:0.999111
is	O	O:0.999997
called	O	O:0.999427
on	O	O:0.999996
each	O	O:0.999488
column	O	O:0.999853
.	O	O:0.999946
	
and	O	O:0.999994
then	O	O:0.999914
you	O	O:0.999995
can	O	O:0.999993
use	O	O:0.999996
apply	O	B-API:0.876404
(	O	O:0.999794
you	O	O:0.999908
don't	O	O:0.999990
have	O	O:0.999993
to	O	O:0.999997
use	O	O:0.999995
`	O	O:0.999962
lambda	O	O:0.989738
`	O	O:0.999989
,	O	O:0.999565
BTW	O	O:0.999733
):	O	O:0.999925
#CODE	O	O:0.999629
	
If	O	O:0.999957
you	O	O:0.999988
want	O	O:0.999984
to	O	O:0.999996
apply	O	O:0.972489
`	O	O:0.999974
upper	O	O:0.987411
`	O	O:0.999979
to	O	O:0.999915
DataFrame	B-API	O:0.999945
,	O	O:0.999997
you	O	O:0.999992
can	O	O:0.999978
use	O	O:0.999997
pandas.applymap()	O	O:0.685138
:	O	O:0.999914
#CODE	O	O:0.999855
	
Here's	O	O:0.999809
a	O	O:0.999961
groupby	B-API	B-API:0.996977
way	O	O:0.997855
(	O	O:0.999783
and	O	O:0.999994
you	O	O:0.999975
could	O	O:0.999945
do	O	O:0.999998
an	O	O:0.999999
arbitrary	O	O:0.999946
apply	O	B-API:0.636679
rather	O	O:0.999361
than	O	O:0.999810
sum	O	O:0.999320
)	O	O:0.999985
#CODE	O	O:0.999395
	
Difference	O	O:0.999283
between	O	O:0.997120
map	O	B-API:0.799667
,	O	O:0.999964
applymap	B-API	B-API:0.973571
and	O	O:0.999976
apply	O	O:0.720881
methods	O	O:0.988767
in	O	O:0.999742
Pandas	O	O:0.999493
	
Can	O	O:0.999676
you	O	O:0.999991
tell	O	O:0.999935
me	O	O:0.999998
when	O	O:0.999898
to	O	O:0.999993
use	O	O:1.000000
these	O	O:0.999606
vectorization	O	O:0.999874
methods	O	O:0.999864
with	O	O:0.999939
basic	O	O:0.999686
examples	O	O:0.999483
?	O	O:0.999903
	
I	O	O:0.999961
see	O	O:0.999993
that	O	O:0.999746
`	O	O:0.999994
map	O	B-API:0.978070
`	O	O:0.999977
is	O	O:0.999986
a	O	O:0.999969
`	O	O:0.999907
Series	O	O:0.923228
`	O	O:0.999984
method	O	O:0.999770
whereas	O	O:0.999978
the	O	O:0.999993
rest	O	O:0.999623
are	O	O:0.999899
`	O	O:0.999995
DataFrame	B-API	O:0.909419
`	O	O:0.999991
methods	O	O:0.997969
.	O	O:0.999910
	
I	O	O:0.999886
got	O	O:0.999968
confused	O	O:0.999328
about	O	O:0.999756
`	O	O:0.999961
apply	O	B-API:0.995166
`	O	O:0.999871
and	O	O:0.999308
`	O	O:0.999994
applymap	B-API	B-API:0.999539
`	O	O:0.999984
methods	O	O:0.996310
though	O	O:0.999808
.	O	O:0.999929
	
Why	O	O:0.999962
do	O	O:0.999969
we	O	O:0.999996
have	O	O:0.999942
two	O	O:0.999995
methods	O	O:0.999915
for	O	O:0.999990
applying	O	O:0.999930
a	O	O:0.999586
function	O	O:0.999713
to	O	O:0.999991
a	O	O:0.999999
DataFrame	B-API	O:0.973077
?	O	O:0.999955
	
Again	O	O:0.999454
,	O	O:0.999997
simple	O	O:0.999969
examples	O	O:0.999473
which	O	O:0.999930
illustrate	O	O:0.999888
the	O	O:0.999986
usage	O	O:0.999617
would	O	O:0.999911
be	O	O:0.999996
great	O	O:0.999795
!	O	O:0.999772
	
Another	O	O:0.999874
frequent	O	O:0.999350
operation	O	O:0.998695
is	O	O:0.999992
applying	O	O:0.999905
a	O	O:0.999877
function	O	O:0.999551
on	O	O:0.999975
1D	O	O:0.999977
arrays	O	O:0.999917
to	O	O:0.999991
each	O	O:0.999997
column	O	O:0.999960
or	O	O:0.999993
row	O	O:0.999883
.	O	O:0.999907
	
DataFrame	B-API	O:0.988914
s	O	O:0.998675
apply	O	B-API:0.742053
method	O	O:0.999828
does	O	O:0.999239
exactly	O	O:0.999982
this	O	O:0.999838
:	O	O:0.999964
	
so	O	O:0.999981
using	O	O:0.999914
apply	O	B-API:0.992325
is	O	O:0.999171
not	O	O:0.999648
necessary	O	O:0.999881
.	O	O:0.999915
	
Summing	O	O:0.998637
up	O	O:0.999680
,	O	O:0.999971
`	O	O:0.999987
apply	O	B-API:0.991533
`	O	O:0.999962
works	O	O:0.999483
on	O	O:0.999999
a	O	O:0.999989
row	O	O:0.999727
/	O	O:0.999987
column	O	O:0.999967
basis	O	O:0.999982
of	O	O:0.999991
a	O	O:0.999986
DataFrame	B-API	O:0.993848
,	O	O:0.999982
`	O	O:0.999991
applymap	B-API	B-API:0.998946
`	O	O:0.999965
works	O	O:0.999670
element-wise	O	O:0.999947
on	O	O:0.999951
a	O	O:0.999989
DataFrame	B-API	O:0.986227
,	O	O:0.999974
and	O	O:0.999993
`	O	O:0.999961
map	O	B-API:0.998824
`	O	O:0.999974
works	O	O:0.999726
element-wise	O	O:0.999929
on	O	O:0.999970
a	O	O:0.999976
Series	O	O:0.998316
.	O	O:0.999867
	
strictly	O	O:0.999369
speaking	O	O:0.999235
,	O	O:0.999969
applymap	B-API	B-API:0.900224
internally	O	O:0.996131
is	O	O:0.999960
implemented	O	O:0.999435
via	O	O:0.999957
apply	O	B-API:0.622566
with	O	O:0.999774
a	O	O:0.999963
little	O	O:0.999604
wrap-up	O	O:0.999674
over	O	O:0.999735
passed	O	O:0.997510
function	O	O:0.999833
parameter	O	O:0.998558
(	O	O:0.999991
rougly	O	O:0.999809
speaking	O	O:0.999675
replacing	O	O:0.995645
`	O	O:0.999960
func	O	O:0.957505
`	O	O:0.999996
to	O	O:0.999261
`	O	O:1.000000
lambda	O	O:0.997755
x	O	O:0.999796
:	O	O:0.999756
[	O	O:0.999983
func	O	O:0.993005
(	O	O:0.999989
y	O	O:0.999954
)	O	O:0.999986
for	O	O:0.999985
y	O	O:0.999744
in	O	O:0.999931
x	O	O:0.999834
]`	O	O:0.999931
,	O	O:0.999961
and	O	O:0.999996
applying	O	O:0.999859
column-wise	O	O:0.982133
)	O	O:0.999937
	
@USER	O	O:0.998939
mentioned	O	O:0.999875
that	O	O:0.999818
apply	O	O:0.842272
works	O	O:0.999903
on	O	O:0.999941
row	O	O:0.999899
/	O	O:0.999995
columns	O	O:0.999864
,	O	O:0.999997
while	O	O:0.999914
applymap	B-API	B-API:0.984010
works	O	O:0.999802
element-wise	O	O:0.998144
.	O	O:0.999558
	
But	O	O:0.999863
it	O	O:0.999988
seems	O	O:0.999978
you	O	O:0.999980
can	O	O:0.999995
still	O	O:0.999995
use	O	O:0.999994
apply	O	B-API:0.909768
for	O	O:0.999652
element-wise	O	O:0.966396
computation	O	O:0.998542
....	O	O:0.998263
	
#CODE	O	O:0.998453
	
Good	O	O:0.999532
catch	O	O:0.997731
with	O	O:0.999972
this	O	O:0.999499
.	O	O:0.999964
	
The	O	O:0.999802
reason	O	O:0.999882
this	O	O:0.999930
works	O	O:0.999940
in	O	O:0.999998
your	O	O:0.999897
example	O	O:0.998865
is	O	O:0.999993
because	O	O:0.999737
np.sqrt	B-API	B-API:0.978727
is	O	O:0.999996
a	O	O:0.999988
ufunc	O	O:0.988886
,	O	O:0.999986
i.e.	O	O:0.999682
if	O	O:0.999970
you	O	O:0.999984
give	O	O:0.999932
it	O	O:0.999995
an	O	O:0.999992
array	O	O:0.999951
,	O	O:0.999988
it	O	O:0.999989
will	O	O:0.999924
broadcast	O	O:0.999964
the	O	O:0.999994
sqrt	O	B-API:0.979783
function	O	O:0.999974
onto	O	O:0.999919
each	O	O:0.999970
element	O	O:0.999930
of	O	O:0.999989
the	O	O:0.999947
array	O	O:0.999868
.	O	O:0.999752
	
So	O	O:0.999986
when	O	O:0.999809
apply	O	O:0.887571
pushes	O	O:0.999225
np.sqrt	B-API	B-API:0.949670
on	O	O:0.999990
each	O	O:0.999940
columns	O	O:0.999939
,	O	O:0.999973
np.sqrt	B-API	B-API:0.841563
works	O	O:0.999941
itself	O	O:0.999934
on	O	O:0.999999
each	O	O:0.999880
of	O	O:0.999998
the	O	O:0.999998
elements	O	O:0.999953
of	O	O:0.999994
the	O	O:0.999997
columns	O	O:0.999971
,	O	O:0.999998
so	O	O:0.999996
you	O	O:0.999987
are	O	O:0.999998
essentially	O	O:0.999984
getting	O	O:0.999817
the	O	O:0.999997
same	O	O:0.999939
result	O	O:0.999974
as	O	O:0.999992
applymap	B-API	B-API:0.989235
.	O	O:0.999628
	
Adding	O	O:0.998910
to	O	O:0.999970
the	O	O:1.000000
other	O	O:0.999912
answers	O	O:0.999915
,	O	O:0.999992
in	O	O:0.999998
a	O	O:0.999973
`	O	O:0.999960
Series	O	O:0.992628
`	O	O:0.999997
there	O	O:0.999673
are	O	O:0.999998
also	O	O:0.999603
map	O	B-API:0.718583
and	O	O:0.999941
apply	O	B-API:0.740407
.	O	O:0.996150
	
Apply	O	O:0.999256
can	O	O:0.999962
make	O	O:0.999989
a	O	O:0.999999
DataFrame	B-API	O:0.998202
out	O	O:0.999984
of	O	O:0.999998
a	O	O:0.999985
series	O	O:0.999835
;	O	O:0.999990
however	O	O:0.999920
,	O	O:0.999993
map	O	B-API:0.692653
will	O	O:0.999951
just	O	O:0.999990
put	O	O:0.999991
a	O	O:0.999994
series	O	O:0.999624
in	O	O:0.999997
every	O	O:0.999992
cell	O	O:0.999980
of	O	O:0.999996
another	O	O:0.999837
series	O	O:0.999978
,	O	O:0.999976
which	O	O:0.999732
is	O	O:0.999970
probably	O	O:0.999560
not	O	O:0.999993
what	O	O:0.999947
you	O	O:0.999985
want	O	O:0.999940
.	O	O:0.999930
	
#CODE	O	O:0.998453
	
Also	O	O:0.999906
if	O	O:0.999987
I	O	O:0.999991
had	O	O:0.999994
a	O	O:0.999838
function	O	O:0.999630
with	O	O:0.999955
side	O	O:0.999936
effects	O	O:0.999934
,	O	O:0.999999
such	O	O:0.999980
as	O	O:0.999992
"	O	O:0.999875
connect	O	O:0.998025
to	O	O:0.999997
a	O	O:0.999999
web	O	O:0.999270
server	O	O:0.999746
"	O	O:0.999974
,	O	O:0.999971
I'd	O	O:0.999993
probably	O	O:0.999786
use	O	O:0.999934
`	O	O:0.999926
apply	O	B-API:0.990981
`	O	O:0.999993
just	O	O:0.996591
for	O	O:0.999998
the	O	O:0.999981
sake	O	O:0.999781
of	O	O:0.999975
clarity	O	O:0.999481
.	O	O:0.999962
	
#CODE	O	O:0.998453
	
In	O	O:0.999878
Pandas	O	O:0.999460
version	O	O:0.999799
0.13	O	O:0.999047
and	O	O:0.999982
greater	O	O:0.998944
the	O	O:0.999912
index	O	O:0.999929
level	O	O:0.999764
names	O	O:0.999884
are	O	O:0.999976
immutable	O	O:0.997590
(	O	O:0.999990
type	O	O:0.997246
`	O	O:0.999992
FrozenList	O	O:0.985586
`)	O	O:0.999985
and	O	O:0.999941
can	O	O:0.999972
no	O	O:0.999996
longer	O	O:0.999993
be	O	O:0.999999
set	O	O:0.999961
directly	O	O:0.998970
.	O	O:0.999778
	
You	O	O:0.999914
must	O	O:0.999971
first	O	O:0.999933
use	O	O:0.999895
`	O	O:0.999913
Index.rename()	O	O:0.800764
`	O	O:0.999997
to	O	O:0.999954
apply	O	O:0.986924
the	O	O:0.999639
new	O	O:0.999590
index	O	O:0.999976
level	O	O:0.999931
names	O	O:0.999948
to	O	O:0.999958
the	O	O:0.999999
Index	O	O:0.992298
and	O	O:0.999998
then	O	O:0.999847
use	O	O:0.999968
`	O	O:0.999963
DataFrame.reindex()	B-API	B-API:0.992919
`	O	O:0.999996
to	O	O:0.999962
apply	O	O:0.987124
the	O	O:0.999746
new	O	O:0.999603
index	O	O:0.999892
to	O	O:0.999971
the	O	O:0.999999
DataFrame	B-API	O:0.985201
.	O	O:0.999882
	
Examples	O	O:0.993672
:	O	O:0.999880
	
Good	O	O:0.998435
improvement	O	O:0.999159
.	O	O:0.999738
	
I	O	O:0.999977
think	O	O:0.999741
``	O	O:0.999450
apply	O	B-API:0.995934
(	O	O:0.999901
...	O	O:0.999445
)``	O	O:0.999668
could	O	O:0.999866
be	O	O:0.999998
achieved	O	O:0.999988
more	O	O:0.999817
simply	O	O:0.999936
by	O	O:0.999945
``	O	O:0.999810
replace	O	O:0.537464
(	O	O:0.999984
dir_dict	O	O:0.998362
)``	O	O:0.999443
.	O	O:0.999683
	
I	O	O:0.999898
haven't	O	O:0.999578
tested	O	O:0.999508
that	O	O:0.999777
,	O	O:0.999996
but	O	O:0.999989
I	O	O:0.999988
think	O	O:0.999949
that's	O	O:0.999727
how	O	O:0.999933
replace	O	O:0.987305
works	O	O:0.999858
.	O	O:0.999913
	
You	O	O:0.999899
can	O	O:0.999981
apply	O	O:0.991453
a	O	O:0.999877
function	O	O:0.999762
that	O	O:0.999971
tests	O	O:0.999972
row-wise	O	O:0.999962
your	O	O:0.998676
`	O	O:0.999984
DataFrame	B-API	O:0.981274
`	O	O:0.999992
for	O	O:0.999958
the	O	O:0.999995
presence	O	O:0.999798
of	O	O:0.999982
strings	O	O:0.999377
,	O	O:0.999997
e.g.	O	O:0.999855
,	O	O:0.999993
say	O	O:0.999994
that	O	O:0.999957
`	O	O:0.999999
df	O	O:0.999136
`	O	O:0.999975
is	O	O:0.999992
your	O	O:0.999499
`	O	O:0.999982
DataFrame	B-API	O:0.854374
`	O	O:0.999978
#CODE	O	O:0.998846
	
and	O	O:0.999988
then	O	O:0.999863
you	O	O:0.999991
apply	O	O:0.957128
it	O	O:0.999972
row	O	O:0.999985
by	O	O:0.999965
row	O	O:0.999801
.	O	O:0.999618
	
I	O	O:0.999822
was	O	O:0.999993
able	O	O:0.999871
to	O	O:0.999993
do	O	O:1.000000
this	O	O:0.999940
in	O	O:0.999979
the	O	O:0.999994
DataFrame	B-API	O:0.999079
using	O	O:0.999969
a	O	O:0.999980
lambda	O	O:0.980952
function	O	O:0.999929
with	O	O:0.998063
map	O	B-API:0.985674
(	O	O:0.999975
lambda	O	O:0.999463
x	O	O:0.999610
:	O	O:0.999966
x.lower()	O	O:0.994623
)	O	O:0.999977
.	O	O:0.999806
	
I	O	O:0.999970
tried	O	O:0.999957
to	O	O:0.999936
use	O	O:0.999998
a	O	O:0.999977
lambda	O	O:0.989259
function	O	O:0.999923
with	O	O:0.999328
pd.series.apply()	B-API	B-API:0.981071
but	O	O:0.999976
that	O	O:0.999876
didn't	O	O:0.999931
work	O	O:0.999822
.	O	O:0.999958
	
Also	O	O:0.999955
when	O	O:0.999857
I	O	O:0.999998
try	O	O:0.999999
to	O	O:0.999943
isolate	O	O:0.999986
the	O	O:0.999997
column	O	O:0.999926
in	O	O:0.999992
series	O	O:0.999978
with	O	O:0.999994
something	O	O:0.999986
like	O	O:0.999892
series	O	O:0.999943
[	O	O:0.999961
'	O	O:0.999973
A	O	O:0.999964
']	O	O:0.999911
should	O	O:0.999071
it	O	O:0.999993
return	O	O:0.998788
the	O	O:0.999865
index	O	O:0.997098
(	O	O:0.999989
although	O	O:0.999985
I	O	O:0.999992
guess	O	O:0.999982
this	O	O:0.999822
makes	O	O:0.999927
sense	O	O:0.999888
)	O	O:0.999994
because	O	O:0.999950
I	O	O:0.999995
get	O	O:0.999997
a	O	O:0.999988
float	O	O:0.998868
error	O	O:0.999970
even	O	O:0.999772
though	O	O:0.999994
the	O	O:0.999994
values	O	O:0.999839
that	O	O:0.999903
I	O	O:1.000000
want	O	O:0.999995
to	O	O:0.999928
apply	O	O:0.982136
the	O	O:0.999280
lower	O	O:0.996441
method	O	O:0.999873
to	O	O:0.999987
are	O	O:1.000000
strings	O	O:0.999227
.	O	O:0.999874
	
Any	O	O:0.999875
help	O	O:0.997309
would	O	O:0.999933
be	O	O:0.999992
appreciated	O	O:0.999898
.	O	O:0.999519
	
You	O	O:0.999869
can	O	O:0.999987
also	O	O:0.999996
do	O	O:0.999993
`	O	O:0.999942
groupby	B-API	B-API:0.999809
(	O	O:0.999977
...,	O	O:0.998008
as_index=False	O	O:0.999074
)`	O	O:0.999668
,	O	O:0.999986
though	O	O:0.999955
buggy	O	O:0.999882
with	O	O:0.999961
apply	O	B-API:0.963249
in	O	O:0.999868
0.12	O	O:0.998426
,	O	O:0.999992
fixed	O	O:0.998026
in	O	O:0.999927
0.13	O	O:0.997471
.	O	O:0.999865
	
To	O	O:0.999913
add	O	O:0.999985
multiple	O	O:0.999974
columns	O	O:0.999857
,	O	O:0.999997
you	O	O:0.999993
could	O	O:0.999957
use	O	O:0.999991
`	O	O:0.999955
groupby	B-API	B-API:0.997631
/	O	O:0.999979
apply	O	B-API:0.963247
`	O	O:0.999516
.	O	O:0.998278
	
Make	O	O:0.999898
sure	O	O:0.999867
the	O	O:0.999918
function	O	O:0.999926
you	O	O:0.999974
apply	O	O:0.966521
returns	O	O:0.999718
a	O	O:0.999970
DataFrame	B-API	O:0.990964
with	O	O:0.999930
the	O	O:0.999968
same	O	O:0.999965
index	O	O:0.999933
as	O	O:0.999998
its	O	O:0.999927
input	O	O:0.999805
.	O	O:0.999860
	
For	O	O:0.999911
example	O	O:0.998987
,	O	O:0.999976
#CODE	O	O:0.999793
	
Maybe	O	O:0.999950
this	O	O:0.998632
is	O	O:0.999982
not	O	O:0.999965
what	O	O:0.999822
agg	O	B-API:0.961161
was	O	O:0.999848
intended	O	O:0.998884
for	O	O:0.999931
.	O	O:0.999275
	
Maybe	O	O:0.999677
I	O	O:0.999981
should	O	O:0.999988
be	O	O:0.999994
using	O	O:0.999899
apply	O	B-API:0.964716
...	O	O:0.971806
	
Note	O	O:0.999668
:	O	O:0.999995
to	O	O:0.999998
force	O	O:0.999992
the	O	O:0.999993
dtype	B-API	B-API:0.991361
to	O	O:0.999804
object	O	O:0.999395
(	O	O:0.999968
and	O	O:0.999996
have	O	O:0.999970
mixed	O	O:0.996365
dtypes	B-API	B-API:0.954804
,	O	O:0.999973
ints	O	O:0.999128
and	O	O:0.999990
floats	O	O:0.999962
,	O	O:0.999965
rather	O	O:0.999975
than	O	O:0.999915
all	O	O:0.999992
floats	O	O:0.999933
)	O	O:0.999993
you	O	O:0.999980
can	O	O:0.999983
use	O	O:0.999999
an	O	O:0.999951
apply	O	B-API:0.820588
.	O	O:0.998724
	
I	O	O:0.999930
would	O	O:0.999959
recommend	O	O:0.999126
against	O	O:0.999995
this	O	O:0.999889
if	O	O:0.999988
you're	O	O:0.999975
doing	O	O:0.999949
any	O	O:0.999969
analysis	O	O:0.997956
!	O	O:0.999702
	
#CODE	O	O:0.998453
	
You	O	O:0.999897
can	O	O:0.999941
apply	O	O:0.992831
this	O	O:0.999752
per	O	O:0.999902
column	O	O:0.999402
,	O	O:0.999982
but	O	O:0.999990
much	O	O:0.999508
easier	O	O:0.999982
just	O	O:0.999936
to	O	O:0.999998
check	O	O:0.999991
the	O	O:0.999991
dtype	B-API	B-API:0.981584
.	O	O:0.999907
in	O	O:0.999961
any	O	O:0.999955
event	O	O:0.999972
pandas	O	O:0.999860
operations	O	O:0.999959
exclude	O	O:0.998409
non-numeric	O	O:0.999877
when	O	O:0.999595
needed	O	O:0.999920
.	O	O:0.999997
what	O	O:0.999932
are	O	O:0.999986
you	O	O:0.999995
trying	O	O:0.999970
to	O	O:0.999993
do	O	O:0.999993
?	O	O:0.999980
	
`	O	O:0.999877
ix	O	B-API:0.997816
`	O	O:0.999991
index	O	O:0.999562
access	O	O:0.999375
and	O	O:0.999978
`	O	O:0.999995
mean	O	O:0.984834
`	O	O:0.999980
function	O	O:0.999256
handle	O	O:0.999981
this	O	O:0.999918
for	O	O:0.999980
you	O	O:0.999816
.	O	O:0.999904
	
Fetch	O	O:0.999300
the	O	O:0.999978
two	O	O:0.999947
tuples	O	O:0.999899
from	O	O:0.999658
`	O	O:0.999987
df.ix	B-API	B-API:0.991816
`	O	O:0.999981
and	O	O:0.999964
apply	O	O:0.674595
the	O	O:0.999777
mean	O	O:0.984437
function	O	O:0.999900
to	O	O:0.999975
it	O	O:0.999996
:	O	O:0.999997
non	O	O:0.999990
existing	O	O:0.999973
keys	O	O:0.998660
are	O	O:0.999993
returned	O	O:0.999946
as	O	O:0.999988
nan	O	O:0.995448
values	O	O:0.999651
,	O	O:0.999948
and	O	O:0.999998
mean	O	O:0.999757
ignores	O	O:0.999673
nan	O	O:0.999619
values	O	O:0.999915
by	O	O:0.999915
default	O	O:0.998032
:	O	O:0.999811
#CODE	O	O:0.999724
	
This	O	O:0.999592
answer	O	O:0.999661
solves	O	O:0.999789
this	O	O:0.999873
toy	O	O:0.999946
example	O	O:0.999510
and	O	O:0.999985
will	O	O:0.999939
be	O	O:0.999989
enough	O	O:0.999898
for	O	O:0.999970
me	O	O:0.999901
to	O	O:0.999968
rewrite	O	O:0.999978
my	O	O:0.999974
actual	O	O:0.998090
function	O	O:0.999757
,	O	O:0.999935
but	O	O:0.999966
it	O	O:0.999963
does	O	O:0.999877
not	O	O:0.999994
address	O	O:0.999879
how	O	O:0.999980
to	O	O:0.999995
apply	O	O:0.992152
a	O	O:0.999965
previously	O	O:0.998543
defined	O	O:0.999099
function	O	O:0.999830
without	O	O:0.999678
rewriting	O	O:0.999630
it	O	O:0.999857
to	O	O:0.999996
reference	O	O:0.999999
columns	O	O:0.999691
.	O	O:0.999959
	
You	O	O:0.999940
can	O	O:0.999968
go	O	O:0.999997
with	O	O:0.999975
@USER	O	O:0.999856
example	O	O:0.999910
,	O	O:0.999990
if	O	O:0.999986
it's	O	O:0.999964
possible	O	O:0.999897
for	O	O:0.999997
you	O	O:0.999976
to	O	O:0.999990
rewrite	O	O:0.999998
your	O	O:0.998900
function	O	O:0.999805
.	O	O:0.999953
	
But	O	O:0.999946
if	O	O:0.999987
you	O	O:0.999966
don't	O	O:0.999987
want	O	O:0.999988
to	O	O:0.999993
rewrite	O	O:0.999999
your	O	O:0.999459
function	O	O:0.999937
,	O	O:0.999999
you	O	O:0.999982
can	O	O:0.999983
wrap	O	O:0.999980
it	O	O:0.999998
into	O	O:0.999902
anonymous	O	O:0.999131
function	O	O:0.999839
inside	O	O:0.999818
apply	O	O:0.583157
,	O	O:0.999943
like	O	O:0.999751
this	O	O:0.999305
:	O	O:0.999982
#CODE	O	O:0.999879
	
would	O	O:0.999846
calling	O	O:0.999677
pd.to_datetime	B-API	B-API:0.746252
from	O	O:0.999880
apply	O	O:0.800544
allow	O	O:0.998828
for	O	O:0.999833
easier	O	O:0.999362
parralelization	O	O:0.999136
after	O	O:0.999972
import	O	O:0.998867
or	O	O:0.999955
would	O	O:0.999917
you	O	O:0.999998
still	O	O:0.999996
have	O	O:0.999996
to	O	O:0.999999
manually	O	O:1.000000
split	O	O:0.998067
up	O	O:0.999990
the	O	O:0.999996
data	O	O:0.999953
frame	O	O:0.999999
into	O	O:0.999851
N	O	O:0.999967
/	O	O:0.999946
M	O	O:0.999863
parts	O	O:0.997754
(	O	O:0.999970
N	O	O:0.999980
=	O	O:0.999976
num	O	O:0.999973
rows	O	O:0.999795
,	O	O:0.999987
M	O	O:0.999973
=	O	O:0.999790
num	O	O:0.999681
logical	O	O:0.999167
procs	O	O:0.999719
)	O	O:0.999952
and	O	O:0.999994
execute	O	O:0.999632
afterward	O	O:0.998832
?	O	O:0.999917
	
I'm	O	O:0.999882
really	O	O:0.999891
hoping	O	O:0.999702
for	O	O:0.999997
some	O	O:0.999787
of	O	O:0.999985
the	O	O:0.999964
straightforward	O	O:0.999841
parallelization	O	O:0.999842
cases	O	O:0.999821
pandas	O	O:0.999937
gets	O	O:0.999493
n_jobs	O	O:0.995816
type	O	O:0.999387
support	O	O:0.999820
that	O	O:0.999980
some	O	O:0.999988
scikit-learn	O	O:0.999798
functions	O	O:0.999912
have	O	O:0.998867
(	O	O:0.999997
like	O	O:0.999975
gridsearch	O	O:0.999688
)	O	O:0.999964
.	O	O:0.999625
	
Use	O	O:0.999481
apply	O	B-API:0.959970
:	O	O:0.999494
#CODE	O	O:0.999225
	
How	O	O:0.999658
about	O	O:0.999716
not	O	O:0.999966
calling	O	O:0.999826
add_area_column	O	O:0.997773
if	O	O:0.999951
the	O	O:0.999990
DataFrane	O	O:0.991661
is	O	O:0.999983
emtpy	O	O:0.997657
?	O	O:0.999941
	
(	O	O:0.999842
e.g.	O	O:0.999548
Take	O	O:0.999929
the	O	O:0.999968
`	O	O:0.999982
if	O	O:0.999812
`	O	O:0.999999
out	O	O:0.999916
of	O	O:0.999997
the	O	O:0.999870
`	O	O:0.999991
add_area_column	O	O:0.885292
`	O	O:0.999987
and	O	O:0.999971
put	O	O:0.999758
it	O	O:0.999980
where	O	O:0.999951
you	O	O:0.999941
would	O	O:0.999993
call	O	O:0.999755
`	O	O:0.999999
apply	O	B-API:0.991559
`)	O	O:0.999759
	
these	O	O:0.999862
edge	O	O:0.999934
cases	O	O:0.999758
for	O	O:0.999990
apply	O	B-API:0.868745
are	O	O:0.999691
pretty	O	O:0.997153
tricky	O	O:0.999863
...	O	O:0.999885
to	O	O:0.999970
fix	O	O:0.999998
your	O	O:0.999877
issue	O	O:0.999752
,	O	O:0.999996
don't	O	O:0.999816
use	O	O:0.999870
apply	O	B-API:0.865560
:	O	O:0.999799
df	O	O:0.998636
[	O	O:0.999963
'	O	O:0.999977
width	O	O:0.999935
']	O	O:0.999942
*	O	O:0.999969
df	O	O:0.999350
[	O	O:0.999910
'	O	O:0.999972
height	O	O:0.999810
']	O	O:0.999864
	
Use	O	O:0.999682
ternary	O	O:0.997479
operator	O	O:0.999805
in	O	O:0.999961
apply	O	B-API:0.673215
function	O	O:0.998707
in	O	O:0.999908
pandas	O	O:0.999949
dataframe	B-API	O:0.999285
,	O	O:0.999947
without	O	O:0.999965
grouping	O	O:0.999866
columns	O	O:0.998733
	
How	O	O:0.999902
can	O	O:0.999963
I	O	O:0.999999
use	O	O:0.999990
ternary	O	O:0.987297
operator	O	O:0.999511
in	O	O:0.999927
the	O	O:0.999989
lambda	O	O:0.996801
function	O	O:0.999838
within	O	O:0.998591
`	O	O:0.999992
apply	O	B-API:0.965595
`	O	O:0.999936
function	O	O:0.999425
of	O	O:0.999949
`	O	O:0.999988
pandas	O	O:0.993540
`	O	O:0.999996
dataframe	B-API	O:0.970249
?	O	O:0.999974
	
select	O	O:0.993818
from	O	O:0.999951
hdf5	O	O:0.999735
apply	O	B-API:0.770731
function	O	O:0.987845
(	O	O:0.999818
e.g.	O	O:0.999968
mean	O	O:0.999487
)	O	O:0.999979
	
I	O	O:0.999989
want	O	O:0.999981
to	O	O:0.999956
combine	O	O:0.999874
`	O	O:0.999989
MEETING	O	O:0.994023
DATE	O	O:0.999050
`	O	O:0.999898
and	O	O:0.999586
`	O	O:0.999996
MEETING	O	O:0.968037
TIME	O	O:0.997906
`	O	O:0.999969
into	O	O:0.997801
one	O	O:0.999994
column	O	O:0.999704
.	O	O:0.999981
datetime.combine	O	O:0.973773
seems	O	O:0.999931
to	O	O:0.999983
do	O	O:0.999999
what	O	O:0.999951
I	O	O:0.999997
want	O	O:0.999990
,	O	O:0.999943
however	O	O:0.999970
,	O	O:0.999993
I	O	O:0.999999
need	O	O:0.999986
to	O	O:0.999968
apply	O	O:0.997055
this	O	O:0.997368
function	O	O:0.999981
column-wise	O	O:0.999486
somehow	O	O:0.999766
.	O	O:0.999913
	
How	O	O:0.999899
can	O	O:0.999932
I	O	O:0.999999
achieve	O	O:0.999989
this	O	O:0.999226
?	O	O:0.999972
	
perhaps	O	O:0.999636
you	O	O:0.999976
could	O	O:0.999985
`	O	O:1.000000
apply	O	B-API:0.937010
`	O	O:0.999983
the	O	O:0.994835
function	O	O:0.999678
(	O	O:0.999964
or	O	O:0.999998
anyfunction	O	O:0.999693
you	O	O:0.999997
want	O	O:0.999971
)	O	O:0.999995
to	O	O:0.999985
MEETING	O	O:0.999835
DATE	O	O:0.997851
and	O	O:0.999970
MEETING	O	O:0.996541
TIME	O	O:0.977649
#URL	O	O:0.997686
	
You	O	O:0.999906
can	O	O:0.999940
use	O	O:0.999923
apply	O	B-API:0.903935
method	O	O:0.996863
,	O	O:0.999918
and	O	O:0.999997
apply	O	O:0.792110
combine	O	O:0.970977
like	O	O:0.999792
this	O	O:0.999231
:	O	O:0.999976
#CODE	O	O:0.999843
	
call	O	O:0.981965
groupby	B-API	B-API:0.983639
and	O	O:0.999917
apply	O	B-API:0.529167
to	O	O:0.999592
get	O	O:0.999993
the	O	O:0.999993
begin	O	O:0.999744
and	O	O:0.999999
end	O	O:0.999979
datetime	O	O:0.992428
for	O	O:0.999971
every	O	O:0.998844
group	O	O:0.990422
.	O	O:0.999831
	
Apply	O	O:0.997474
Function	O	O:0.996786
Along	O	O:0.998101
DataFrame	B-API	O:0.973426
Index	O	O:0.989228
	
What	O	O:0.998562
is	O	O:0.999981
the	O	O:0.999980
best	O	O:0.999438
way	O	O:0.999973
to	O	O:0.999991
apply	O	O:0.996444
a	O	O:0.999921
function	O	O:0.999667
over	O	O:0.999276
the	O	O:0.999986
index	O	O:0.999959
of	O	O:0.999996
a	O	O:0.999994
Pandas	O	O:0.999174
`	O	O:0.999975
DataFrame	B-API	O:0.782493
`	O	O:0.999986
?	O	O:0.999835
	
And	O	O:0.999788
after	O	O:0.999985
that	O	O:0.999933
you	O	O:0.999994
can	O	O:0.999987
use	O	O:0.999998
pandas.DataFrame.apply	B-API	B-API:0.998913
function	O	O:0.999732
,	O	O:0.999987
with	O	O:0.999813
axis=1	O	O:0.986877
(	O	O:0.999990
means	O	O:0.999953
apply	O	B-API:0.583386
function	O	O:0.999654
to	O	O:0.999989
each	O	O:0.999970
row	O	O:0.999050
):	O	O:0.999962
#CODE	O	O:0.999782
	
Thanks	O	O:0.998225
but	O	O:0.999885
its	O	O:0.999852
not	O	O:0.999975
working	O	O:0.999561
,	O	O:0.999985
Its	O	O:0.999989
throwing	O	O:0.999902
a	O	O:0.999968
traceback	O	O:0.998655
and	O	O:0.999868
which	O	O:0.999812
says	O	O:0.995403
:	O	O:0.999949
AttributeError	O	O:0.999623
:	O	O:0.999957
DictReader	O	O:0.986876
instance	O	O:0.999848
has	O	O:0.999941
no	O	O:0.999972
attribute	O	O:0.999897
'	O	O:0.999983
apply	O	B-API:0.725582
'	O	O:0.999652
,	O	O:0.999804
is	O	O:0.999983
it	O	O:0.999930
because	O	O:0.999966
i	O	O:0.999941
am	O	O:0.999995
reading	O	O:0.999948
this	O	O:0.999967
as	O	O:0.999999
a	O	O:0.999990
dictonary	O	O:0.999265
?	O	O:0.999932
	
@USER	O	O:0.998493
oh	O	O:0.999834
,	O	O:0.999982
it	O	O:0.999993
will	O	O:0.999687
in	O	O:0.999995
0.13	O	O:0.999503
-	O	O:0.999992
there	O	O:0.999746
was	O	O:0.999971
a	O	O:0.999990
bug	O	O:0.999703
in	O	O:0.999979
apply	O	B-API:0.510172
maybe	O	O:0.998872
.	O	O:0.999685
	
This	O	O:0.999799
will	O	O:0.999914
be	O	O:0.999997
significantly	O	O:0.999974
more	O	O:0.999462
efficient	O	O:0.999882
than	O	O:0.999946
an	O	O:0.999998
apply	O	O:0.719183
or	O	O:0.999983
using	O	O:0.999188
lists	O	O:0.995611
...	O	O:0.996573
	
If	O	O:0.999977
you	O	O:0.999949
use	O	O:0.999970
`	O	O:0.999979
apply	O	B-API:0.966692
`	O	O:0.999972
on	O	O:0.999856
the	O	O:0.999991
groupby	B-API	B-API:0.980220
,	O	O:0.999990
the	O	O:0.999868
function	O	O:0.999919
you	O	O:0.999987
pass	O	O:0.997368
is	O	O:0.999997
called	O	O:0.999512
on	O	O:0.999995
each	O	O:0.999617
group	O	O:0.999260
,	O	O:0.999998
passed	O	O:0.999723
as	O	O:0.999988
a	O	O:0.999970
DataFrame	B-API	O:0.959099
.	O	O:0.999824
	
So	O	O:0.999976
you	O	O:0.999979
can	O	O:0.999966
do	O	O:0.999988
:	O	O:0.999990
#CODE	O	O:0.999770
	
However	O	O:0.999482
,	O	O:0.999996
this	O	O:0.999967
will	O	O:0.999972
raise	O	O:0.999979
an	O	O:0.999995
error	O	O:0.999883
if	O	O:0.999983
the	O	O:0.999982
group	O	O:0.994159
doesn't	O	O:0.999979
have	O	O:0.999980
at	O	O:0.999999
least	O	O:0.999978
two	O	O:0.999997
rows	O	O:0.998723
.	O	O:0.999840
	
If	O	O:0.999965
you	O	O:0.999989
want	O	O:0.999989
to	O	O:0.999997
exclude	O	O:0.999988
groups	O	O:0.999919
with	O	O:0.999955
fewer	O	O:0.999912
than	O	O:0.999971
two	O	O:0.999998
rows	O	O:0.999851
,	O	O:0.999998
that	O	O:0.999984
could	O	O:0.999989
be	O	O:0.999999
trickier	O	O:0.999857
.	O	O:0.999666
	
I'm	O	O:0.999877
not	O	O:0.999995
aware	O	O:0.999985
of	O	O:0.999997
a	O	O:0.999984
way	O	O:0.999977
to	O	O:0.999988
exclude	O	O:0.999989
the	O	O:0.999996
result	O	O:0.999966
of	O	O:0.999988
`	O	O:0.999982
apply	O	B-API:0.929416
`	O	O:0.999992
only	O	O:0.998484
for	O	O:0.999998
certain	O	O:0.998288
groups	O	O:0.997088
.	O	O:0.999838
	
You	O	O:0.999891
could	O	O:0.999919
try	O	O:0.999996
filtering	O	O:0.999812
the	O	O:0.999955
group	O	O:0.997158
list	O	O:0.999853
first	O	O:0.999930
by	O	O:0.999990
removing	O	O:0.999671
small	O	O:0.998343
groups	O	O:0.999678
,	O	O:0.999977
or	O	O:0.999997
return	O	O:0.999562
a	O	O:0.999993
one-row	O	O:0.998870
`	O	O:0.999981
nan	O	O:0.942959
`	O	O:0.999970
-filled	O	O:0.967037
DataFrame	B-API	O:0.995615
and	O	O:0.999991
do	O	O:0.999966
`	O	O:0.999949
dropna	B-API	B-API:0.996984
`	O	O:0.999990
on	O	O:0.999989
the	O	O:0.999989
result	O	O:0.999802
.	O	O:0.999873
	
pandas	O	O:0.999856
group	O	O:0.999748
by	O	O:0.999972
n	O	O:0.999793
seconds	O	O:0.999108
and	O	O:0.999992
apply	O	O:0.870511
arbitrary	O	O:0.998224
rolling	O	O:0.658069
function	O	O:0.996442
	
The	O	O:0.999975
accelerometer	O	O:0.999925
data	O	O:0.998315
is	O	O:0.999978
not	O	O:0.999972
uniformly	O	O:0.999873
sampled	O	O:0.998959
,	O	O:0.999964
and	O	O:0.999992
I	O	O:0.999997
want	O	O:0.999912
to	O	O:0.999987
group	O	O:0.999997
data	O	O:0.999988
by	O	O:0.999998
every	O	O:0.999951
10	O	O:0.999822
or	O	O:0.999984
20	O	O:0.999872
or	O	O:0.999981
30	O	O:0.999791
seconds	O	O:0.999570
and	O	O:0.999994
apply	O	O:0.869036
a	O	O:0.999905
custom	O	O:0.936930
function	O	O:0.999874
to	O	O:0.999995
the	O	O:1.000000
data	O	O:0.999936
group	O	O:0.997967
.	O	O:0.999969
	
If	O	O:0.999989
the	O	O:0.999994
data	O	O:0.999699
was	O	O:0.999955
uniformly	O	O:0.999895
sampled	O	O:0.999337
,	O	O:0.999982
it	O	O:0.999972
would	O	O:0.999974
have	O	O:0.999985
been	O	O:0.999984
easy	O	O:0.999973
to	O	O:0.999997
apply	O	O:0.986347
a	O	O:0.999972
rolling	O	B-API:0.724336
function	O	O:0.999307
.	O	O:0.999756
	
However	O	O:0.999642
,	O	O:0.999986
since	O	O:0.999958
it	O	O:0.999727
is	O	O:0.999997
not	O	O:0.999976
,	O	O:0.999997
I	O	O:0.999997
want	O	O:0.999972
to	O	O:0.999946
apply	O	O:0.985445
groupby	B-API	B-API:0.969696
using	O	O:0.998554
timestamp	O	O:0.927544
interval	O	O:0.997481
.	O	O:0.999663
	
However	O	O:0.999857
,	O	O:0.999985
I	O	O:0.999993
cannot	O	O:0.999975
figure	O	O:0.999741
out	O	O:0.999984
how	O	O:0.999971
to	O	O:0.999997
group	O	O:0.999994
by	O	O:0.999992
an	O	O:0.999993
arbitary	O	O:0.999871
number	O	O:0.999916
of	O	O:0.999919
seconds	O	O:0.999659
and	O	O:0.999999
then	O	O:0.999955
apply	O	O:0.934506
a	O	O:0.999856
function	O	O:0.997803
to	O	O:0.999977
it	O	O:0.999997
.	O	O:0.999941
	
Or	O	O:0.999990
have	O	O:0.999977
a	O	O:0.999999
look	O	O:0.999469
at	O	O:0.999995
the	O	O:0.999981
resampling-functions	O	O:0.997228
here	O	O:0.998720
.	O	O:0.999927
	
Maybe	O	O:0.999844
you	O	O:0.999973
could	O	O:0.999991
apply	O	O:0.986902
a	O	O:0.999987
custom	O	O:0.986452
resampling-function	O	O:0.999593
instead	O	O:0.999988
of	O	O:0.999997
using	O	O:0.999797
the	O	O:0.999884
groupby-method	O	O:0.954755
.	O	O:0.999710
	
#CODE	O	O:0.998453
	
yes	O	O:0.998886
,	O	O:0.999996
this	O	O:0.999807
isn't	O	O:0.999940
working	O	O:0.999101
`	O	O:0.999975
df.ix	B-API	B-API:0.991681
[	O	O:0.999939
'	O	O:0.999979
bar	O	O:0.999680
'	O	O:0.999967
,	O	O:0.999907
'	O	O:0.999984
two	O	O:0.999950
']`	O	O:0.999875
.	O	O:0.999699
	
Or	O	O:0.999787
wasn't	O	O:0.999773
actually	O	O:0.999972
,	O	O:0.999996
apparently	O	O:0.999985
your	O	O:0.999900
code	O	O:0.997204
would	O	O:0.999988
not	O	O:0.999998
work	O	O:0.999987
if	O	O:0.999985
[	O	O:0.999951
'	O	O:0.999965
Trial	O	O:0.999634
']	O	O:0.999810
was	O	O:0.999399
already	O	O:0.999956
set	O	O:0.999947
as	O	O:0.999988
an	O	O:0.999980
indey	O	O:0.999400
when	O	O:0.999437
it	O	O:0.999960
was	O	O:0.999966
run	O	O:0.999088
.	O	O:0.999865
	
Strangely	O	O:0.999736
enough	O	O:0.999765
,	O	O:0.999993
after	O	O:0.999931
I	O	O:0.999971
run	O	O:0.999845
you	O	O:0.999955
code	O	O:0.999959
,	O	O:0.999998
df	O	O:0.999748
[	O	O:0.999902
'	O	O:0.999969
Trial	O	O:0.999852
']	O	O:0.999978
no	O	O:0.999454
longer	O	O:0.999748
works	O	O:0.999895
:(	O	O:0.999961
which	O	O:0.999480
is	O	O:0.999997
a	O	O:0.999991
pity	O	O:0.999725
because	O	O:0.999938
I	O	O:0.999991
wanted	O	O:0.999993
to	O	O:0.999867
do	O	O:1.000000
this	O	O:0.999953
in	O	O:0.999996
order	O	O:0.999954
to	O	O:0.999992
better	O	O:0.999987
apply	O	O:0.719633
the	O	O:0.999962
same	O	O:0.998947
function	O	O:0.999882
to	O	O:0.999998
multiple	O	O:0.999993
trials	O	O:0.998801
(	O	O:0.999990
I	O	O:0.999998
want	O	O:0.999969
to	O	O:0.999972
downsample	O	O:0.999994
all	O	O:0.999984
of	O	O:0.999996
the	O	O:0.999984
measurements	O	O:0.999488
in	O	O:0.999992
every	O	O:0.999970
trial	O	O:0.999306
to	O	O:0.999988
two	O	O:0.999993
-	O	O:0.999997
just	O	O:0.999948
two	O	O:0.999991
)	O	O:0.999973
.	O	O:0.999771
	
I	O	O:0.999968
know	O	O:0.999909
pandas	O	O:0.998702
has	O	O:0.999991
a	O	O:0.999988
resample	O	B-API:0.984103
function	O	O:0.999118
,	O	O:0.999985
but	O	O:0.999986
I	O	O:0.999996
have	O	O:0.999979
no	O	O:0.999969
idea	O	O:0.999777
how	O	O:0.999979
to	O	O:0.999992
apply	O	O:0.986691
it	O	O:0.999952
to	O	O:0.999990
my	O	O:0.999994
second-level	O	O:0.998228
index	O	O:0.999942
while	O	O:0.999969
keeping	O	O:0.999940
the	O	O:0.999995
data	O	O:0.999842
in	O	O:0.999996
discrete	O	O:0.999959
categories	O	O:0.999927
based	O	O:0.999848
on	O	O:0.999992
the	O	O:0.999937
first-level	O	O:0.999196
index	O	O:0.999155
:(	O	O:0.999899
	
if	O	O:0.999923
it's	O	O:0.999821
relevant	O	O:0.999935
that	O	O:0.999971
you	O	O:0.999999
have	O	O:0.999991
Timestamp	O	O:0.999871
columns	O	O:0.999892
,	O	O:0.999987
e.g.	O	O:0.999723
you're	O	O:0.999969
resampling	O	O:0.999122
or	O	O:0.999998
something	O	O:0.999909
,	O	O:0.999999
then	O	O:0.999891
be	O	O:0.999998
explicit	O	O:0.999872
and	O	O:0.999982
apply	O	B-API:0.587469
`	O	O:0.999199
pd.to_datetime	B-API	B-API:0.999107
`	O	O:0.999987
to	O	O:0.999998
them	O	O:0.999989
for	O	O:0.999986
good	O	O:0.999170
measure**	O	O:0.997216
.	O	O:0.999833
	
#CODE	O	O:0.998453
	
Now	O	O:0.999973
just	O	O:0.999888
apply	O	O:0.714455
usual	O	O:0.999339
pandas	O	O:0.999122
transformations	O	O:0.999662
and	O	O:0.999975
delete	O	O:0.999699
unneseccary	O	O:0.998377
columns	O	O:0.998018
:	O	O:0.999949
#CODE	O	O:0.999894
	
You	O	O:0.999898
can	O	O:0.999979
apply	O	O:0.989571
a	O	O:0.999993
specific	O	O:0.991919
function	O	O:0.999963
to	O	O:0.999997
a	O	O:1.000000
specific	O	O:0.999904
column	O	O:0.999982
by	O	O:0.999997
passing	O	O:0.999402
in	O	O:0.999924
a	O	O:0.999988
dict	O	O:0.998408
.	O	O:0.999885
	
#CODE	O	O:0.998453
	
you	O	O:0.999920
can	O	O:0.999973
use	O	O:0.999994
apply	O	B-API:0.949994
:	O	O:0.999305
#CODE	O	O:0.999212
	
brilliant	O	O:0.997172
!	O	O:0.999833
	
I'm	O	O:0.999923
still	O	O:0.999955
looking	O	O:0.999929
at	O	O:0.999992
what	O	O:0.999868
the	O	O:0.999994
combination	O	O:0.999970
of	O	O:0.999993
apply	O	B-API:0.683067
,	O	O:0.999976
lambda	O	O:0.998454
,	O	O:0.999926
pd.Series	B-API	B-API:0.993533
and	O	O:0.999975
stack	O	B-API:0.560308
does	O	O:0.996789
,	O	O:0.999975
but	O	O:0.999970
it	O	O:0.999974
works	O	O:0.999986
exactly	O	O:0.999971
as	O	O:0.999966
intended	O	O:0.998926
.	O	O:0.999951
thanks	O	O:0.997680
!	O	O:0.999880
	
Pandas	O	O:0.999507
groupby	B-API	B-API:0.931971
apply	O	B-API:0.889385
function	O	O:0.999229
that	O	O:0.999544
combines	O	O:0.999980
some	O	O:0.999914
groups	O	O:0.994974
but	O	O:0.999967
not	O	O:0.999970
others	O	O:0.999899
	
I'm	O	O:0.999904
using	O	O:0.999960
pandas	O	O:0.997066
`	O	O:0.999932
groupby	B-API	B-API:0.999269
`	O	O:0.999991
on	O	O:0.999735
my	O	O:0.999993
DataFrame	B-API	O:0.995859
`	O	O:0.999993
df	O	O:0.998836
`	O	O:0.999982
which	O	O:0.999505
has	O	O:0.999996
columns	O	O:0.999646
`	O	O:0.999995
type	O	O:0.994456
`	O	O:0.999997
,	O	O:0.999724
`	O	O:0.999995
subtype	O	O:0.951189
`	O	O:0.999989
,	O	O:0.999890
and	O	O:0.999993
11	O	O:0.999754
others	O	O:0.998427
.	O	O:0.999886
	
I'm	O	O:0.999965
then	O	O:0.999934
calling	O	O:0.999975
an	O	O:0.999980
`	O	O:0.999985
apply	O	B-API:0.963681
`	O	O:0.999973
with	O	O:0.999559
my	O	O:0.999970
`	O	O:0.999990
combine_function	O	O:0.922429
`	O	O:0.999969
(	O	O:0.999946
needs	O	O:0.999995
a	O	O:0.999984
better	O	O:0.999548
name	O	O:0.999981
)	O	O:0.999989
on	O	O:0.999991
the	O	O:0.999995
groups	O	O:0.999668
like	O	O:0.998493
:	O	O:0.999985
#CODE	O	O:0.999865
	
Have	O	O:0.999720
you	O	O:0.999936
tried	O	O:0.999977
just	O	O:0.999979
using	O	O:0.999988
an	O	O:0.999785
apply	O	B-API:0.898433
?	O	O:0.999321
	
So	O	O:0.999977
we	O	O:0.999996
can	O	O:0.999949
use	O	O:0.999996
helper	O	O:0.993908
function	O	O:0.999617
like	O	O:0.999858
this	O	O:0.999913
and	O	O:0.999994
apply	O	O:0.708809
it	O	O:0.999741
to	O	O:0.999985
each	O	O:0.999995
group	O	O:0.999655
to	O	O:0.999996
get	O	O:0.999999
desired	O	O:0.999740
results	O	O:0.999893
.	O	O:0.999926
	
#CODE	O	O:0.998453
	
When	O	O:0.999773
apply	O	O:0.942492
a	O	O:0.999895
function	O	O:0.999344
to	O	O:0.999989
a	O	O:1.000000
list	O	O:0.993767
,	O	O:0.999989
it	O	O:0.999983
occurs	O	O:0.999652
"	O	O:0.999962
TypeError	O	O:0.998460
:	O	O:0.999716
'	O	O:0.999942
Int64Index	O	O:0.999158
'	O	O:0.999926
object	O	O:0.998294
is	O	O:0.999978
not	O	O:0.999966
callable	O	O:0.999646
"	O	O:0.999960
	
I	O	O:0.999981
have	O	O:0.999976
tried	O	O:0.999711
on	O	O:0.999996
some	O	O:0.999661
simple	O	O:0.999941
list	O	O:0.999159
like	O	O:0.999697
:	O	O:0.999977
`	O	O:0.999994
x	O	O:0.999876
=[	O	O:0.999983
0	O	O:0.999955
,	O	O:0.999976
1	O	O:0.999934
,	O	O:0.999980
2	O	O:0.999951
]	O	O:0.999913
,	O	O:0.999967
titleNot0	O	O:0.992699
(	O	O:0.999974
x	O	O:0.999932
)`	O	O:0.999705
.	O	O:0.999821
	
It	O	O:0.999716
works	O	O:0.999596
.	O	O:0.999903
	
But	O	O:0.999965
if	O	O:0.999992
I	O	O:0.999995
apply	O	O:0.889924
the	O	O:0.998427
function	O	O:0.999533
to	O	O:0.999982
the	O	O:0.999998
groupby	B-API	B-API:0.988148
,	O	O:0.999983
it	O	O:0.999985
returns	O	O:0.999169
"	O	O:0.999978
TypeError	O	O:0.998116
"	O	O:0.999901
.	O	O:0.999290
	
Please	O	O:0.999831
help	O	O:0.999418
me	O	O:0.999968
to	O	O:0.999960
fix	O	O:0.999941
it	O	O:0.999957
.	O	O:0.999939
	
Thank	O	O:0.999328
you	O	O:0.999761
!	O	O:0.999952
	
maybe	O	O:0.999473
it's	O	O:0.999862
because	O	O:0.999987
when	O	O:0.999903
you	O	O:0.999996
apply	O	O:0.993215
this	O	O:0.999901
to	O	O:0.999988
a	O	O:1.000000
list	O	O:0.989340
`	O	O:0.999990
ls	O	O:0.998139
[	O	O:0.999993
x	O	O:0.999812
]`	O	O:0.999951
returns	O	O:0.999696
an	O	O:0.999980
integer	O	O:0.999398
,	O	O:0.999995
when	O	O:0.999868
you	O	O:0.999987
apply	O	O:0.994660
this	O	O:0.999919
to	O	O:0.999987
a	O	O:1.000000
DataFrame	B-API	O:0.987839
,	O	O:0.999990
`	O	O:0.999993
ls	O	O:0.997065
[	O	O:0.999995
x	O	O:0.999857
]`	O	O:0.999931
returns	O	O:0.999711
a	O	O:0.999965
Series	O	O:0.995926
.	O	O:0.999855
	
Use	O	O:0.999974
this	O	O:0.999875
with	O	O:0.999985
a	O	O:0.999987
groupby	B-API	B-API:0.995717
apply	O	B-API:0.911933
:	O	O:0.998703
#CODE	O	O:0.999224
	
apply	O	O:0.732752
a	O	O:0.999738
function	O	O:0.999363
to	O	O:0.999997
a	O	O:0.999999
groupby	B-API	B-API:0.999051
function	O	O:0.999709
	
I	O	O:0.999989
want	O	O:0.999982
to	O	O:0.999977
count	O	O:0.999932
how	O	O:0.999995
many	O	O:0.999871
consistent	O	O:0.999884
increase	O	O:0.999554
,	O	O:0.999910
and	O	O:0.999991
the	O	O:0.999990
difference	O	O:0.998868
between	O	O:0.999345
the	O	O:0.999992
first	O	O:0.999600
element	O	O:0.999400
and	O	O:0.999989
the	O	O:0.999996
last	O	O:0.995115
element	O	O:0.999908
,	O	O:0.999993
on	O	O:0.999998
a	O	O:0.999974
groupby	B-API	B-API:0.995907
.	O	O:0.999809
	
But	O	O:0.999893
I	O	O:0.999991
can't	O	O:0.999951
apply	O	O:0.591398
the	O	O:0.999842
function	O	O:0.999489
on	O	O:0.999981
the	O	O:0.999968
groupby	B-API	B-API:0.988799
.	O	O:0.999704
	
After	O	O:0.998760
groupby	B-API	B-API:0.982759
,	O	O:0.999819
is	O	O:0.999971
it	O	O:0.999974
a	O	O:0.999995
list	O	O:0.993409
?	O	O:0.999945
	
And	O	O:0.999966
also	O	O:0.999904
what's	O	O:0.999946
the	O	O:0.999944
difference	O	O:0.999774
between	O	O:0.998428
"	O	O:0.999990
apply	O	B-API:0.868573
"	O	O:0.999576
and	O	O:0.999665
"	O	O:0.999948
agg	O	B-API:0.997287
"	O	O:0.999839
?	O	O:0.999490
	
Sorry	O	O:0.999602
,	O	O:0.999987
I	O	O:0.999998
just	O	O:0.999901
touched	O	O:0.999754
the	O	O:0.999991
python	O	O:0.999584
for	O	O:0.999996
a	O	O:0.999982
few	O	O:0.999474
days	O	O:0.999182
.	O	O:0.999831
	
#CODE	O	O:0.998453
	
The	O	O:0.999834
`	O	O:0.999978
apply	O	B-API:0.997471
`	O	O:0.999841
method	O	O:0.998738
calls	O	O:0.999092
`	O	O:0.999991
foo	O	O:0.980109
`	O	O:0.999999
once	O	O:0.997332
for	O	O:0.999999
every	O	O:0.999628
group	O	O:0.989167
.	O	O:0.999835
	
It	O	O:0.999903
can	O	O:0.999965
return	O	O:0.999977
a	O	O:0.999995
Series	O	O:0.999471
or	O	O:0.999997
a	O	O:0.999995
DataFrame	B-API	O:0.995322
with	O	O:0.999974
the	O	O:0.999997
resulting	O	O:0.999691
chunks	O	O:0.999861
glued	O	O:0.999707
together	O	O:0.999405
.	O	O:0.999858
	
It	O	O:0.999777
is	O	O:0.999995
possible	O	O:0.999827
to	O	O:0.999988
use	O	O:0.999994
`	O	O:0.999950
apply	O	B-API:0.978264
`	O	O:0.999990
when	O	O:0.972601
`	O	O:0.999997
foo	O	O:0.998663
`	O	O:0.999995
returns	O	O:0.995882
an	O	O:0.999984
object	O	O:0.999982
such	O	O:0.999952
as	O	O:0.999999
a	O	O:0.999960
numerical	O	O:0.999105
value	O	O:0.999825
or	O	O:0.999974
string	O	O:0.999318
,	O	O:0.999988
but	O	O:0.999981
in	O	O:0.999997
such	O	O:0.999980
cases	O	O:0.999917
I	O	O:0.999990
think	O	O:0.999973
using	O	O:0.999214
`	O	O:0.999631
agg	O	B-API:0.999664
`	O	O:0.999899
is	O	O:0.999531
preferred	O	O:0.998662
.	O	O:0.999866
	
A	O	O:0.999982
typical	O	O:0.998681
use	O	O:0.999959
case	O	O:0.999003
for	O	O:0.999990
using	O	O:0.999602
`	O	O:0.999734
apply	O	B-API:0.995301
`	O	O:0.999815
is	O	O:0.999921
when	O	O:0.999803
you	O	O:0.999996
want	O	O:0.999992
to	O	O:0.999989
,	O	O:1.000000
say	O	O:0.999966
,	O	O:0.999996
square	O	O:0.999968
every	O	O:0.999932
value	O	O:0.999939
in	O	O:0.999993
a	O	O:0.999995
group	O	O:0.992766
and	O	O:0.999998
thus	O	O:0.999930
need	O	O:0.999928
to	O	O:0.999997
return	O	O:0.999995
a	O	O:0.999991
new	O	O:0.999964
group	O	O:0.999571
of	O	O:0.999986
the	O	O:0.999972
same	O	O:0.999936
shape	O	O:0.999571
.	O	O:0.999914
	
The	O	O:0.999853
`	O	O:0.999980
transform	O	B-API:0.995946
`	O	O:0.999967
method	O	O:0.999144
is	O	O:0.999998
also	O	O:0.999935
useful	O	O:0.999652
in	O	O:0.999991
this	O	O:0.999847
situation	O	O:0.999939
--	O	O:0.999998
when	O	O:0.999484
you	O	O:0.999998
want	O	O:0.999996
to	O	O:0.999995
transform	O	O:0.999259
every	O	O:0.999970
value	O	O:0.999912
in	O	O:0.999981
the	O	O:0.999988
group	O	O:0.996555
and	O	O:0.999998
thus	O	O:0.999951
need	O	O:0.999949
to	O	O:0.999996
return	O	O:0.999998
something	O	O:0.999902
of	O	O:0.999989
the	O	O:0.999991
same	O	O:0.999972
shape	O	O:0.999473
--	O	O:0.999976
but	O	O:0.999994
the	O	O:0.999995
result	O	O:0.999916
can	O	O:0.999976
be	O	O:1.000000
different	O	O:0.999991
than	O	O:0.999870
that	O	O:0.999952
with	O	O:0.999987
`	O	O:0.999994
apply	O	B-API:0.950246
`	O	O:0.999985
since	O	O:0.999778
a	O	O:0.999998
different	O	O:0.999244
object	O	O:0.999812
may	O	O:0.999979
be	O	O:0.999997
passed	O	O:0.999860
to	O	O:0.999891
`	O	O:0.999999
foo	O	O:0.992095
`	O	O:0.999979
(	O	O:0.999828
for	O	O:0.999995
example	O	O:0.999554
,	O	O:0.999992
each	O	O:0.999980
column	O	O:0.999966
of	O	O:0.999999
a	O	O:0.999983
grouped	O	O:0.999367
dataframe	B-API	O:0.995986
would	O	O:0.999910
be	O	O:0.999999
passed	O	O:0.999935
to	O	O:0.999908
`	O	O:0.999999
foo	O	O:0.998002
`	O	O:0.999999
when	O	O:0.999618
using	O	O:0.999982
`	O	O:0.999981
transform	O	B-API:0.992005
`	O	O:0.999990
,	O	O:0.999963
while	O	O:0.999989
the	O	O:0.999990
entire	O	O:0.999893
group	O	O:0.998564
would	O	O:0.999966
be	O	O:0.999998
passed	O	O:0.999936
to	O	O:0.999909
`	O	O:0.999999
foo	O	O:0.998002
`	O	O:0.999999
when	O	O:0.999531
using	O	O:0.999975
`	O	O:0.999970
apply	O	B-API:0.998331
`	O	O:0.999798
.	O	O:0.998787
The	O	O:0.999994
easiest	O	O:0.999703
way	O	O:0.999936
to	O	O:0.999946
understand	O	O:0.999996
this	O	O:0.999776
is	O	O:0.999992
to	O	O:0.999991
experiment	O	O:0.999990
with	O	O:0.999978
a	O	O:0.999993
simple	O	O:0.999630
dataframe	B-API	O:0.993548
and	O	O:0.999992
the	O	O:0.999992
generic	O	O:0.989994
`	O	O:0.999957
foo	O	O:0.993329
`	O	O:0.999997
.	O	O:0.999530
)	O	O:0.999984
	
The	O	O:0.999774
`	O	O:0.999935
agg	O	B-API:0.999739
`	O	O:0.999950
method	O	O:0.999083
calls	O	O:0.999183
`	O	O:0.999991
foo	O	O:0.980109
`	O	O:0.999999
once	O	O:0.997848
for	O	O:0.999999
every	O	O:0.999773
group	O	O:0.986683
,	O	O:0.999949
but	O	O:0.999953
unlike	O	O:0.998897
`	O	O:0.999976
apply	O	B-API:0.990079
`	O	O:0.999916
it	O	O:0.999488
should	O	O:0.999987
return	O	O:0.999932
a	O	O:0.999998
single	O	O:0.999108
number	O	O:0.999851
per	O	O:0.999826
group	O	O:0.997763
.	O	O:0.999882
	
The	O	O:0.999957
group	O	O:0.981989
is	O	O:0.999992
aggregated	O	O:0.999773
into	O	O:0.999865
a	O	O:0.999986
value	O	O:0.997313
.	O	O:0.999828
	
A	O	O:0.999982
typical	O	O:0.998681
use	O	O:0.999959
case	O	O:0.999188
for	O	O:0.999992
using	O	O:0.999458
`	O	O:0.999291
agg	O	B-API:0.999514
`	O	O:0.999942
is	O	O:0.999943
when	O	O:0.999830
you	O	O:0.999998
want	O	O:0.999997
to	O	O:0.999997
count	O	O:0.999993
the	O	O:0.999998
number	O	O:0.999972
of	O	O:0.999997
items	O	O:0.999856
in	O	O:0.999994
the	O	O:0.999990
group	O	O:0.992529
.	O	O:0.999862
	
you	O	O:0.999867
could	O	O:0.999980
jus	O	O:0.999976
use	O	O:0.999988
lambda	O	O:0.996945
in	O	O:0.999950
apply	O	B-API:0.575534
like	O	O:0.999294
that	O	O:0.998724
:	O	O:0.999984
	
if	O	O:0.999980
you	O	O:0.999994
subtract	O	O:0.999927
values	O	O:0.999979
of	O	O:0.999997
a	O	O:0.999999
particular	O	O:0.999931
cells	O	O:0.999534
,	O	O:0.999992
there's	O	O:0.999895
no	O	O:0.999981
difference	O	O:0.999839
between	O	O:0.997904
agg	O	B-API:0.943604
and	O	O:0.999970
apply	O	B-API:0.789064
,	O	O:0.999827
they	O	O:0.999943
both	O	O:0.999982
create	O	O:0.999917
a	O	O:0.999999
one	O	O:0.999988
value	O	O:0.999955
for	O	O:0.999990
each	O	O:0.999225
group	O	O:0.991646
#CODE	O	O:0.999727
	
SQL	O	O:0.996178
(	O	O:0.999979
actually	O	O:0.999869
,	O	O:0.999990
SQL	O	O:0.999814
Server	O	O:0.999848
)	O	O:0.999968
way	O	O:0.999895
would	O	O:0.999967
be	O	O:0.999999
to	O	O:0.999996
use	O	O:0.999981
`	O	O:0.999961
outer	O	O:0.560138
apply	O	B-API:0.834841
`	O	O:0.997716
:	O	O:0.999301
#CODE	O	O:0.999914
	
I	O	O:0.999922
would	O	O:0.999992
like	O	O:0.999915
to	O	O:0.999999
apply	O	O:0.982175
it	O	O:0.999950
to	O	O:0.999991
the	O	O:0.999999
"	O	O:0.999976
col1	O	O:0.997644
"	O	O:0.999998
column	O	O:0.999873
of	O	O:0.999996
a	O	O:0.999994
dataframe	B-API	O:0.998073
similar	O	O:0.999634
to	O	O:0.999919
:	O	O:0.999996
#CODE	O	O:0.999853
	
@USER	O	O:0.994709
:	O	O:0.999973
Stay	O	O:0.999963
away	O	O:0.999979
from	O	O:0.999781
`	O	O:0.999983
apply	O	B-API:0.973936
`	O	O:0.999499
(	O	O:0.999881
especially	O	O:0.999941
with	O	O:0.999655
`	O	O:0.999989
lambda	O	O:0.999545
`)	O	O:0.999996
if	O	O:0.999948
you	O	O:0.999969
can	O	O:0.999980
help	O	O:0.999974
it	O	O:0.999991
.	O	O:0.999951
	
It	O	O:0.999593
is	O	O:0.999991
likely	O	O:0.999546
to	O	O:0.999992
be	O	O:0.999999
the	O	O:0.999993
slowest	O	O:0.998222
solution	O	O:0.999847
available	O	O:0.999679
.	O	O:0.999879
	
Does	O	O:0.999875
this	O	O:0.999930
apply	O	O:0.826633
it	O	O:0.999936
to	O	O:0.999992
the	O	O:1.000000
columns	O	O:0.999964
or	O	O:0.999999
rows	O	O:0.999813
?	O	O:0.999981
	
I	O	O:0.999972
tried	O	O:0.999948
df	O	O:0.998700
=d	O	O:0.999703
f.apply	O	O:0.744222
(	O	O:0.999929
lambda	O	O:0.998672
col	O	O:0.996026
:	O	O:0.999968
col.interpolate	O	O:0.993518
(	O	O:0.999973
'	O	O:0.999993
linear	O	O:0.999169
')	O	O:0.999947
,	O	O:0.999967
axis=1	O	O:0.999395
)	O	O:0.999985
,	O	O:0.999970
yet	O	O:0.999852
it's	O	O:0.999556
still	O	O:0.999718
not	O	O:0.999995
interpolating	O	O:0.999894
all	O	O:0.999972
the	O	O:0.999988
columns	O	O:0.999276
.	O	O:0.999906
	
Normally	O	O:0.999962
different	O	O:0.999978
columns	O	O:0.999850
in	O	O:0.999995
a	O	O:0.999995
pandas	O	O:0.999496
DataFrame	B-API	O:0.998223
contain	O	O:0.999010
different	O	O:0.999992
type	O	O:0.999301
of	O	O:0.999978
information	O	O:0.999826
,	O	O:0.999999
so	O	O:0.999992
an	O	O:0.999669
interpolation	O	O:0.999772
method	O	O:0.999821
may	O	O:0.999978
not	O	O:0.999998
apply	O	O:0.880443
or	O	O:0.999954
you	O	O:0.999907
may	O	O:0.999998
need	O	O:0.999995
different	O	O:0.999987
methods	O	O:0.999971
depending	O	O:0.999750
on	O	O:0.999995
the	O	O:0.999993
data	O	O:0.999844
.	O	O:0.999921
	
You	O	O:0.999932
can	O	O:0.999956
use	O	O:0.999999
a	O	O:0.999988
combination	O	O:0.999346
of	O	O:0.999966
groupby	B-API	B-API:0.995993
and	O	O:0.999962
apply	O	B-API:0.981104
:	O	O:0.998203
#CODE	O	O:0.999039
	
Python	O	O:0.997466
Pandas	O	O:0.998907
:	O	O:0.999916
Using	O	O:0.999780
Aggregate	O	O:0.999263
vs	O	O:0.999955
Apply	O	O:0.999751
to	O	O:0.999983
define	O	O:0.999987
new	O	O:0.999961
columns	O	O:0.999577
	
But	O	O:0.999924
switching	O	O:0.999786
aggregate	O	B-API:0.796189
for	O	O:0.999912
apply	O	B-API:0.854075
seems	O	O:0.998348
to	O	O:0.999952
work	O	O:0.999972
.	O	O:0.999961
	
Why	O	O:0.999943
does	O	O:0.999724
apply	O	O:0.675370
work	O	O:0.995773
and	O	O:0.999974
not	O	O:0.999987
aggregte	O	O:0.999284
?	O	O:0.999936
	
Good	O	O:0.998675
question	O	O:0.999251
.	O	O:0.999856
	
Actually	O	O:0.999829
,	O	O:0.999995
if	O	O:0.999995
you	O	O:0.999991
define	O	O:0.999960
some	O	O:0.999988
test	O	O:0.997948
function	O	O:0.999996
like	O	O:0.999844
`	O	O:0.999993
def	O	O:0.999333
test	O	O:0.989797
(	O	O:0.999961
x	O	O:0.999617
):	O	O:0.999966
print	O	O:0.999858
x	O	O:0.999880
;	O	O:0.999971
return	O	O:0.998448
x.sum()	O	O:0.981012
`	O	O:0.999936
and	O	O:0.999973
call	O	O:0.999265
`	O	O:0.999962
aggregate	O	B-API:0.997763
`	O	O:0.999915
in	O	O:0.999953
both	O	O:0.999967
cases	O	O:0.999727
,	O	O:0.999993
you'll	O	O:0.999746
see	O	O:0.999992
that	O	O:0.999951
in	O	O:0.999999
first	O	O:0.999968
case	O	O:0.999785
`	O	O:0.999993
x	O	O:0.997844
`	O	O:0.999981
is	O	O:0.999965
a	O	O:0.999981
DataFrame	B-API	O:0.977751
and	O	O:0.999969
in	O	O:0.999986
second	O	O:0.999499
case	O	O:0.999730
`	O	O:0.999992
x	O	O:0.997646
`	O	O:0.999984
is	O	O:0.999975
a	O	O:0.999965
Series	O	O:0.981499
(	O	O:0.999940
and	O	O:0.999998
when	O	O:0.999817
you	O	O:0.999972
call	O	O:0.999847
`	O	O:0.999995
apply	O	B-API:0.997018
`	O	O:0.999919
,	O	O:0.999533
it's	O	O:0.999817
always	O	O:0.999906
DataFrame	B-API	O:0.996528
)	O	O:0.999928
.	O	O:0.999828
	
I	O	O:0.999956
don't	O	O:0.999980
have	O	O:0.999944
time	O	O:0.999996
to	O	O:0.999997
dig	O	O:0.999997
into	O	O:0.999868
the	O	O:0.999997
code	O	O:0.999507
at	O	O:0.999995
the	O	O:0.999976
moment	O	O:0.999824
,	O	O:0.999955
and	O	O:0.999990
I'm	O	O:0.999990
sure	O	O:0.999809
some	O	O:0.999952
pandas	O	O:0.999814
developers	O	O:0.999958
will	O	O:0.999949
show	O	O:0.999800
up	O	O:0.999930
and	O	O:0.999977
explain	O	O:0.999853
this	O	O:0.999708
behaviour	O	O:0.999697
:)	O	O:0.999738
	
I	O	O:0.999988
have	O	O:0.999978
struggled	O	O:0.999689
to	O	O:0.999998
work	O	O:0.999987
out	O	O:0.999991
what	O	O:0.999771
is	O	O:0.999998
going	O	O:0.999789
on	O	O:0.999991
exactly	O	O:0.999886
with	O	O:0.999972
these	O	O:0.999910
groupby	B-API	B-API:0.932788
operations	O	O:0.999247
.	O	O:0.999429
	
As	O	O:0.999891
Roman	O	O:0.999964
points	O	O:0.999912
out	O	O:0.999961
,	O	O:0.999997
the	O	O:0.999991
first	O	O:0.999237
argument	O	O:0.999974
passed	O	O:0.999499
to	O	O:0.999970
agg	O	B-API:0.766246
is	O	O:0.999993
a	O	O:0.999965
series	O	O:0.999888
,	O	O:0.999998
therefore	O	O:0.999991
if	O	O:0.999997
you	O	O:0.999997
want	O	O:0.999968
to	O	O:0.999985
agg	O	O:0.952162
based	O	O:0.999895
on	O	O:0.999988
values	O	O:0.999363
in	O	O:0.999998
multiple	O	O:0.999992
columns	O	O:0.999965
you	O	O:0.999998
have	O	O:0.999992
to	O	O:0.999998
call	O	O:0.999985
the	O	O:0.999995
second	O	O:0.999525
column	O	O:0.999859
in	O	O:0.999994
the	O	O:0.999970
function	O	O:0.999956
based	O	O:0.999891
upon	O	O:0.999142
the	O	O:0.999986
index	O	O:0.999979
values	O	O:0.999898
of	O	O:0.999997
the	O	O:0.999986
series	O	O:0.999985
that	O	O:0.999495
is	O	O:0.999999
passed	O	O:0.999639
automatically	O	O:0.999739
.	O	O:0.999904
apply	O	B-API:0.632441
always	O	O:0.999684
passes	O	O:0.999741
as	O	O:0.999994
data	O	O:0.999981
frame	O	O:0.999998
as	O	O:0.999993
he	O	O:0.999958
points	O	O:0.999418
out	O	O:0.999798
.	O	O:0.999929
	
If	O	O:0.999966
you	O	O:0.999990
want	O	O:0.999984
to	O	O:0.999994
see	O	O:1.000000
some	O	O:0.999974
really	O	O:0.999944
strange	O	O:0.999864
behaviour	O	O:0.999952
check	O	O:0.999698
out	O	O:0.999925
transform	O	O:0.519378
,	O	O:0.999971
it	O	O:0.999991
seems	O	O:0.999947
to	O	O:0.999998
pass	O	O:0.999921
series	O	O:0.999937
and	O	O:0.999999
dataframes	O	O:0.999960
as	O	O:0.999972
the	O	O:0.999991
first	O	O:0.999597
argument	O	O:0.999901
to	O	O:0.999986
the	O	O:0.999992
function	O	O:0.999709
.	O	O:0.999884
	
Quite	O	O:0.999823
confusing	O	O:0.998916
IMO	O	O:0.999600
	
@USER	O	O:0.998671
Hayden	O	O:0.998629
it	O	O:0.999990
sounds	O	O:0.999963
like	O	O:0.999942
the	O	O:0.999997
best	O	O:0.999437
approach	O	O:0.999671
is	O	O:0.999994
just	O	O:0.999780
to	O	O:0.999998
switch	O	O:0.999983
to	O	O:0.999998
apply	O	O:0.977954
or	O	O:0.999981
attempt	O	O:0.999708
to	O	O:0.999994
use	O	O:0.999999
cythonized	O	O:0.998785
functions	O	O:0.999973
when	O	O:0.999103
aggregate()	B-API	B-API:0.970917
fails	O	O:0.999657
?	O	O:0.999872
	
Also	O	O:0.999889
,	O	O:0.999995
I	O	O:0.999993
imagine	O	O:0.999937
the	O	O:0.999873
groupby	B-API	B-API:0.983254
code	O	O:0.999823
being	O	O:0.998575
'	O	O:0.999988
hairy	O	O:0.997817
'	O	O:0.999951
doesn't	O	O:0.999968
mean	O	O:0.999918
you	O	O:0.999995
think	O	O:0.999982
its	O	O:0.999980
unreliable	O	O:0.999588
?	O	O:0.999931
	
Seems	O	O:0.999908
to	O	O:0.999990
consistently	O	O:0.999999
match	O	O:0.999931
results	O	O:0.999976
I	O	O:0.999996
get	O	O:0.999968
in	O	O:0.999909
SQL	O	O:0.999757
.	O	O:0.999825
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
Hm	O	O:0.999918
,	O	O:0.999983
I	O	O:0.999991
can't	O	O:0.999931
see	O	O:0.999982
other	O	O:0.999990
problems	O	O:0.999670
in	O	O:0.999999
your	O	O:0.999996
data	O	O:0.999946
besides	O	O:0.999980
the	O	O:0.999984
lat	O	O:0.996324
/	O	O:0.999997
long	O	O:0.999545
at	O	O:0.999990
the	O	O:0.999919
moment	O	O:0.999644
.	O	O:0.999869
	
You	O	O:0.999797
could	O	O:0.999957
read	O	O:0.999632
the	O	O:0.999968
header	O	O:0.999816
line	O	O:0.999448
and	O	O:0.999993
replace	O	O:0.996431
lat	O	O:0.993308
/	O	O:0.999992
long	O	O:0.999410
with	O	O:0.999992
your	O	O:0.999911
approach	O	O:0.999969
above	O	O:0.999904
,	O	O:0.999965
`'	O	O:0.999964
LatD	O	O:0.997434
'	O	O:0.999978
,	O	O:0.999958
'	O	O:0.999988
LatM	O	O:0.999071
'	O	O:0.999980
,	O	O:0.999959
'	O	O:0.999988
LatS	O	O:0.999072
'	O	O:0.999980
,	O	O:0.999959
'	O	O:0.999988
LonD	O	O:0.999075
'	O	O:0.999980
,	O	O:0.999959
'	O	O:0.999988
LonM	O	O:0.999073
'	O	O:0.999980
,	O	O:0.999958
'	O	O:0.999989
LonS	O	O:0.999732
'`	O	O:0.999958
,	O	O:0.999991
read	O	O:0.998856
the	O	O:0.999993
file	O	O:0.999957
from	O	O:0.999993
just	O	O:0.999943
below	O	O:0.999974
the	O	O:0.999963
header	O	O:0.999846
,	O	O:0.999994
using	O	O:0.999976
whitespace	O	O:0.999671
as	O	O:0.999988
a	O	O:0.999976
delimiter	O	O:0.998781
and	O	O:0.999984
apply	O	B-API:0.630860
the	O	O:0.998035
previously	O	O:0.998022
read	O	O:0.995678
and	O	O:0.999977
amended	O	O:0.999770
header	O	O:0.999841
line	O	O:0.999880
as	O	O:0.999981
an	O	O:0.999985
index	O	O:0.999937
to	O	O:0.999991
the	O	O:0.999999
new	O	O:0.999822
dataframe	B-API	O:0.996163
.	O	O:0.999905
	
Pandas	O	O:0.999637
clean	O	O:0.998562
column	O	O:0.999849
and	O	O:0.999990
apply	O	O:0.781953
optional	O	O:0.982196
multiplier	O	O:0.997657
	
So	O	O:0.999949
,	O	O:0.999997
you	O	O:0.999986
can	O	O:0.999993
apply	O	O:0.998043
a	O	O:0.999967
function	O	O:0.999278
to	O	O:1.000000
your	O	O:0.999999
data	O	O:0.999988
frame	O	O:1.000000
to	O	O:0.999995
do	O	O:0.999998
this	O	O:0.999950
...	O	O:0.999707
	
#CODE	O	O:0.998453
	
As	O	O:0.999957
far	O	O:0.999915
as	O	O:0.999988
it	O	O:0.999966
goes	O	O:0.999494
,	O	O:0.999989
it	O	O:0.999988
looks	O	O:0.999975
like	O	O:0.999947
`	O	O:0.999981
std()	B-API	B-API:0.729322
`	O	O:0.999956
is	O	O:0.999961
calling	O	O:0.998425
`	O	O:0.999986
aggregation()	O	O:0.942982
`	O	O:0.999994
on	O	O:0.999964
the	O	O:0.999988
`	O	O:0.999977
groupby	B-API	B-API:0.998025
`	O	O:0.999991
result	O	O:0.998566
,	O	O:0.999994
and	O	O:0.999997
a	O	O:0.999987
subtle	O	O:0.985605
bug	O	O:0.999436
(	O	O:0.999950
see	O	O:0.999963
here	O	O:0.999408
-	O	O:0.999986
Python	O	O:0.999308
Pandas	O	O:0.999357
:	O	O:0.999912
Using	O	O:0.999775
Aggregate	O	O:0.999263
vs	O	O:0.999955
Apply	O	O:0.999751
to	O	O:0.999984
define	O	O:0.999984
new	O	O:0.999984
columns	O	O:0.999740
)	O	O:0.999979
.	O	O:0.999863
	
To	O	O:0.999908
avoid	O	O:0.999917
this	O	O:0.999940
,	O	O:0.999997
you	O	O:0.999991
can	O	O:0.999979
use	O	O:0.999999
`	O	O:0.999958
apply()	B-API	B-API:0.999959
`	O	O:0.999786
:	O	O:0.999588
#CODE	O	O:0.999908
	
Why	O	O:0.999958
does	O	O:0.999081
function	O	O:0.999951
behavior	O	O:0.999943
used	O	O:0.999302
within	O	O:0.999156
pandas	O	O:0.999942
apply	O	O:0.843002
change	O	O:0.980335
?	O	O:0.999725
	
Now	O	O:0.999911
,	O	O:0.999997
using	O	O:0.999896
`	O	O:0.999851
apply	O	B-API:0.997226
`	O	O:0.999863
and	O	O:0.998578
`	O	O:0.999997
to_integer	O	O:0.889734
`	O	O:0.999995
with	O	O:0.997506
`	O	O:0.999991
df1	O	O:0.979837
`	O	O:0.999924
:	O	O:0.999794
#CODE	O	O:0.999908
	
But	O	O:0.999930
if	O	O:0.999985
I	O	O:0.999992
apply	O	O:0.861294
it	O	O:0.999328
to	O	O:0.999993
this	O	O:0.999997
`	O	O:0.999994
df2	O	O:0.989709
`	O	O:0.999952
:	O	O:0.999763
#CODE	O	O:0.999909
	
make	O	O:0.999466
dict	O	O:0.999909
to	O	O:0.999994
apply	O	O:0.987500
same	O	O:0.999143
function	O	O:0.999858
to	O	O:0.999997
all	O	O:0.999999
columns	O	O:0.999768
#CODE	O	O:0.999727
	
@USER	O	O:0.999678
yeah	O	O:0.998382
,	O	O:0.999997
mean	O	O:0.999796
`	O	O:0.999995
apply	O	B-API:0.939689
`	O	O:0.999979
with	O	O:0.995896
`	O	O:0.999998
count	O	O:0.952133
`	O	O:0.999987
but	O	O:0.999814
you've	O	O:0.999885
already	O	O:0.999876
added	O	O:0.999859
that	O	O:0.999527
.	O	O:0.999961
	
Apply	O	O:0.998915
SequenceMatcher	O	O:0.849272
to	O	O:0.999882
DataFrame	B-API	O:0.999118
	
You	O	O:0.999967
have	O	O:0.999946
to	O	O:0.999997
apply	O	O:0.995893
a	O	O:0.999802
function	O	O:0.996347
,	O	O:0.999995
not	O	O:0.999992
a	O	O:0.999998
float	O	O:0.993111
which	O	O:0.999934
expression	O	O:0.999535
`	O	O:0.999936
SequenceMatcher	O	B-API:0.906293
(	O	O:0.999971
None	O	O:0.999185
,	O	O:0.999945
str	O	O:0.983390
(	O	O:0.999987
m.ITEM_NAME_x	O	O:0.996675
)	O	O:0.999982
,	O	O:0.999966
str	O	O:0.991415
(	O	O:0.999988
m.ITEM_NAME_y	O	O:0.998890
))	O	O:0.999823
.ratio()	O	O:0.897643
`	O	O:0.999822
is	O	O:0.999870
.	O	O:0.999891
	
Update	O	O:0.999237
:	O	O:0.999980
I	O	O:0.999987
realised	O	O:0.999977
what	O	O:0.998952
you	O	O:0.999980
were	O	O:0.999976
actually	O	O:0.999985
asking	O	O:0.999608
,	O	O:0.999955
and	O	O:0.999985
I	O	O:0.999988
think	O	O:0.999959
this	O	O:0.999807
ought	O	O:0.999816
to	O	O:0.999996
be	O	O:1.000000
an	O	O:0.999993
option	O	O:0.999732
in	O	O:0.999992
sortlevels	O	O:0.997506
,	O	O:0.999991
but	O	O:0.999981
for	O	O:0.999988
now	O	O:0.999906
I	O	O:0.999996
think	O	O:0.999974
you	O	O:0.999973
have	O	O:0.999977
to	O	O:0.999994
reset_index	B-API	B-API:0.737202
,	O	O:0.999957
groupby	B-API	B-API:0.979823
and	O	O:0.999930
apply	O	B-API:0.972769
:	O	O:0.998734
#CODE	O	O:0.999039
	
but	O	O:0.999673
it	O	O:0.999985
tells	O	O:0.999932
me	O	O:0.999991
there	O	O:0.999565
is	O	O:0.999993
no	O	O:0.999955
attribute	O	O:0.999898
'	O	O:0.999991
first	O	O:0.999401
'	O	O:0.999997
when	O	O:0.999887
I	O	O:0.999998
apply	O	O:0.955930
the	O	O:0.999742
same	O	O:0.999830
thing	O	O:0.999889
to	O	O:0.999963
the	O	O:0.999998
index	O	O:0.999585
.	O	O:0.999900
	
#CODE	O	O:0.998453
	
You	O	O:0.999931
could	O	O:0.999884
use	O	O:0.999960
`	O	O:0.999922
groupby	B-API	B-API:0.997988
/	O	O:0.999980
apply	O	B-API:0.982015
`	O	O:0.998369
:	O	O:0.999399
#CODE	O	O:0.999912
	
The	O	O:0.999921
exact	O	O:0.999914
usage	O	O:0.999981
depends	O	O:0.999587
on	O	O:0.999985
how	O	O:0.999974
you	O	O:0.999990
wrote	O	O:0.999997
your	O	O:0.999833
function	O	O:0.999939
`	O	O:0.999992
myfun	O	O:0.871329
`	O	O:0.999987
.	O	O:0.999076
	
Where	O	O:0.999861
the	O	O:0.999981
column	O	O:0.999886
used	O	O:0.999031
is	O	O:0.999956
static	O	O:0.946140
(	O	O:0.999924
e.g.	O	O:0.999773
always	O	O:0.999644
`	O	O:0.999997
x	O	O:0.999597
`)	O	O:0.999996
I	O	O:0.999987
write	O	O:0.999947
`	O	O:0.999918
myfun	O	O:0.970940
`	O	O:0.999998
to	O	O:0.999984
take	O	O:0.999998
the	O	O:0.999997
full	O	O:0.996322
`	O	O:0.999986
DataFrame	B-API	O:0.845925
`	O	O:0.999990
and	O	O:0.999981
subset	O	O:0.999768
inside	O	O:0.999663
the	O	O:0.999456
function	O	O:0.999260
.	O	O:0.999832
	
However	O	O:0.999832
if	O	O:0.999998
your	O	O:0.999772
function	O	O:0.999590
is	O	O:0.999993
written	O	O:0.998998
to	O	O:0.999992
accept	O	O:0.999987
a	O	O:0.999956
vector	O	O:0.998053
(	O	O:0.999989
or	O	O:0.999997
a	O	O:0.999996
pandas	O	O:0.998717
`	O	O:0.999996
Series	O	O:0.998512
`)	O	O:0.999995
,	O	O:0.999993
you	O	O:0.999987
can	O	O:0.999999
also	O	O:0.999999
select	O	O:0.999935
the	O	O:0.999975
column	O	O:0.999661
and	O	O:0.999989
`	O	O:0.999995
apply	O	B-API:0.991933
`	O	O:0.999994
your	O	O:0.985196
function	O	O:0.999920
to	O	O:0.999973
it	O	O:0.999989
:	O	O:0.999976
#CODE	O	O:0.999898
	
the	O	O:0.999929
way	O	O:0.999906
you	O	O:0.999937
are	O	O:0.999998
making	O	O:0.999860
the	O	O:0.999965
dataframe	B-API	O:0.997644
,	O	O:0.999995
the	O	O:0.999996
other	O	O:0.999936
column	O	O:0.998053
is	O	O:0.999981
index	O	O:0.999636
,	O	O:0.999998
pandas	O	O:0.999945
apply	O	O:0.903882
the	O	O:0.999885
functions	O	O:0.999778
to	O	O:0.999976
columns	O	O:0.999995
not	O	O:0.999961
the	O	O:0.999993
index	O	O:0.999656
	
Your	O	O:0.999391
operation	O	O:0.999419
doesn't	O	O:0.999969
make	O	O:0.999972
sense	O	O:0.999983
as	O	O:0.999991
a	O	O:0.999957
DataFrame	B-API	O:0.942070
.	O	O:0.999822
	
The	O	O:0.999903
index	O	O:0.999909
labels	O	O:0.999619
in	O	O:0.999998
your	O	O:0.999983
expected	O	O:0.999903
result	O	O:0.999970
don't	O	O:0.999993
match	O	O:0.999928
up	O	O:0.999970
with	O	O:0.999972
the	O	O:0.999991
labels	O	O:0.999381
in	O	O:0.999986
the	O	O:0.999998
original	O	O:0.999759
`	O	O:0.999997
data	O	O:0.997968
`	O	O:0.999993
.	O	O:0.999759
	
You'll	O	O:0.999897
want	O	O:0.999939
to	O	O:0.999995
take	O	O:0.999995
the	O	O:0.999865
Series	O	O:0.998846
method	O	O:0.999842
and	O	O:0.999971
`	O	O:0.999994
apply	O	B-API:0.996523
`	O	O:0.999965
it	O	O:0.999844
to	O	O:0.999999
each	O	O:0.999997
column	O	O:0.999898
in	O	O:0.999995
`	O	O:0.999999
data	O	O:0.998433
`	O	O:0.999990
.	O	O:0.999750
	
Apply	O	O:0.999583
it	O	O:0.999959
to	O	O:1.000000
your	O	O:1.000000
data	O	O:0.999934
set	O	O:0.999600
:	O	O:0.999987
#CODE	O	O:0.999793
	
I	O	O:0.999963
thought	O	O:0.999818
apply	O	O:0.500561
treated	O	O:0.998485
each	O	O:0.999821
group	O	O:0.999622
as	O	O:0.999998
a	O	O:0.999961
sub-dataframe	O	O:0.999884
,	O	O:0.999976
which	O	O:0.999967
i	O	O:0.999954
can	O	O:0.999997
then	O	O:0.999995
manipulate	O	O:0.999968
and	O	O:0.999999
then	O	O:0.999911
return	O	O:0.998997
.	O	O:0.999844
	
I	O	O:0.999974
believe	O	O:0.999974
my	O	O:0.999984
understanding	O	O:0.999512
of	O	O:0.999981
the	O	O:0.999953
structure	O	O:0.999352
is	O	O:0.999963
flawed	O	O:0.999234
,	O	O:0.999947
and	O	O:0.999962
I've	O	O:0.999327
had	O	O:0.999805
trouble	O	O:0.999781
finding	O	O:0.999911
anything	O	O:0.999835
to	O	O:0.999991
help	O	O:0.999968
correct	O	O:0.999879
myself	O	O:0.999522
.	O	O:0.999939
	
After	O	O:0.999145
running	O	O:0.999865
this	O	O:0.998431
function	O	O:0.999975
,	O	O:0.999991
I	O	O:0.999967
was	O	O:0.999978
hoping	O	O:0.999085
to	O	O:0.999988
be	O	O:1.000000
able	O	O:0.999981
to	O	O:0.999994
reaccess	O	O:0.999990
each	O	O:0.999716
subgroup	O	O:0.999761
and	O	O:0.999997
perform	O	O:0.998979
further	O	O:0.998639
analysis	O	O:0.999912
on	O	O:0.999947
it	O	O:0.999964
.	O	O:0.999968
	
But	O	O:0.999916
I'm	O	O:0.999988
curious	O	O:0.999861
about	O	O:0.999971
the	O	O:0.999969
resulting	O	O:0.996825
format	O	O:0.999203
.	O	O:0.999838
	
After	O	O:0.999685
I	O	O:0.999982
perform	O	O:0.999678
my	O	O:0.999771
groupby	B-API	B-API:0.987026
function	O	O:0.999933
,	O	O:0.999991
I	O	O:0.999998
can	O	O:0.999971
use	O	O:0.999994
the	O	O:0.999913
describe()	B-API	B-API:0.949438
function	O	O:0.999378
,	O	O:0.999934
and	O	O:0.999994
it	O	O:0.999980
will	O	O:0.999887
return	O	O:0.999910
a	O	O:0.999996
table	O	O:0.999953
subindexed	O	O:0.999891
by	O	O:0.999992
each	O	O:0.999749
grouped	O	O:0.999693
name	O	O:0.999971
,	O	O:0.999986
with	O	O:0.999988
the	O	O:0.999965
statistics	O	O:0.997348
.	O	O:0.999877
	
After	O	O:0.999811
my	O	O:0.999964
apply	O	B-API:0.780899
function	O	O:0.999702
,	O	O:0.999973
I	O	O:0.999998
want	O	O:0.999964
to	O	O:0.999974
look	O	O:0.999994
at	O	O:0.999995
the	O	O:0.999987
same	O	O:0.999986
type	O	O:0.998918
of	O	O:0.999998
table	O	O:0.999602
,	O	O:0.999983
but	O	O:0.999963
it	O	O:0.999986
congests	O	O:0.999715
it	O	O:0.999998
down	O	O:0.999783
to	O	O:0.999999
one	O	O:1.000000
,	O	O:0.999997
with	O	O:0.999996
the	O	O:0.999998
rows	O	O:0.999927
being	O	O:0.999905
describe	O	O:0.999972
parameters	O	O:0.999312
,	O	O:0.999991
without	O	O:0.999966
the	O	O:0.999992
level	O	O:0.999480
of	O	O:0.999983
group	O	O:0.986975
indexing	O	O:0.999774
	
I	O	O:0.999969
think	O	O:0.999934
there's	O	O:0.999896
some	O	O:0.999847
alignment	O	O:0.999945
magic	O	O:0.999950
that	O	O:0.999909
happens	O	O:0.999973
at	O	O:0.999997
the	O	O:0.999954
end	O	O:0.999394
(	O	O:0.999962
rather	O	O:0.999951
than	O	O:0.999978
just	O	O:0.999986
a	O	O:0.999999
concat	O	B-API:0.972005
)	O	O:0.999985
,	O	O:0.999995
often	O	O:0.999523
I	O	O:0.999995
find	O	O:0.999885
groupby	B-API	B-API:0.929014
apply	O	O:0.793136
a	O	O:0.999876
dark	O	O:0.969817
art	O	O:0.999890
.	O	O:0.999746
	
@USER	O	O:0.998317
:	O	O:0.999964
I	O	O:0.999995
still	O	O:0.999952
don't	O	O:0.999818
really	O	O:0.999645
understand	O	O:0.999855
what	O	O:0.999485
you're	O	O:0.999951
trying	O	O:0.999950
to	O	O:0.999995
do	O	O:0.999988
,	O	O:0.999992
but	O	O:0.999984
if	O	O:0.999993
you	O	O:0.999996
want	O	O:0.999977
to	O	O:0.999987
"	O	O:1.000000
perform	O	O:0.998858
further	O	O:0.999707
analysis	O	O:0.999951
"	O	O:0.999985
on	O	O:0.999980
each	O	O:0.999891
group	O	O:0.999391
,	O	O:0.999995
why	O	O:0.999967
don't	O	O:0.999870
you	O	O:0.999998
just	O	O:0.999984
do	O	O:0.999987
*	O	O:0.999998
that	O	O:0.999859
*	O	O:0.999999
analysis	O	O:0.999936
in	O	O:0.999977
the	O	O:0.999969
groupby	B-API	B-API:0.997322
function	O	O:0.999684
?	O	O:0.999843
	
That	O	O:0.998694
is	O	O:0.999984
,	O	O:0.999997
make	O	O:0.999978
a	O	O:0.999946
function	O	O:0.999951
that	O	O:0.999967
actually	O	O:0.999995
does	O	O:0.999949
the	O	O:0.999988
analysis	O	O:0.999946
you	O	O:0.999967
want	O	O:0.999981
done	O	O:0.999828
,	O	O:0.999994
and	O	O:0.999994
apply	O	O:0.793210
that	O	O:0.998915
with	O	O:0.999879
`	O	O:0.999956
groupby	B-API	B-API:0.999814
(	O	O:0.999992
...	O	O:0.999479
)	O	O:0.999948
.apply	B-API	B-API:0.998759
(	O	O:0.999973
...	O	O:0.999755
)`	O	O:0.999706
,	O	O:0.999988
so	O	O:0.999992
it	O	O:0.999997
just	O	O:0.999965
returns	O	O:0.999994
the	O	O:0.999987
results	O	O:0.999934
of	O	O:0.999999
your	O	O:0.999808
analysis	O	O:0.999865
.	O	O:0.999911
	
@USER	O	O:0.999702
its	O	O:0.999886
answered	O	O:0.999945
my	O	O:0.999968
question	O	O:0.999832
about	O	O:0.999965
how	O	O:0.999970
to	O	O:0.999985
add	O	O:0.999999
the	O	O:0.999998
data	O	O:0.999870
I	O	O:0.999996
wanted	O	O:0.999992
to	O	O:0.999888
my	O	O:0.999999
DataFrame	B-API	O:0.992981
without	O	O:0.999824
copying	O	O:0.998099
it	O	O:0.999861
and	O	O:0.999997
possibly	O	O:0.999990
messing	O	O:0.998863
up	O	O:0.999890
the	O	O:0.999955
order	O	O:0.998633
.	O	O:0.999823
	
I'm	O	O:0.999728
still	O	O:0.999821
not	O	O:0.999997
sure	O	O:0.999934
why	O	O:0.999988
the	O	O:0.999954
`	O	O:0.999970
groupby	B-API	B-API:0.999493
`	O	O:0.999978
/	O	O:0.998265
`	O	O:0.999990
apply	O	B-API:0.980219
`	O	O:0.999825
is	O	O:0.999822
failing	O	O:0.999776
when	O	O:0.999614
I	O	O:0.999989
do	O	O:0.999995
it	O	O:0.999958
one	O	O:0.999963
way	O	O:0.999770
and	O	O:0.999986
not	O	O:0.999984
the	O	O:0.999974
other	O	O:0.999083
,	O	O:0.999943
but	O	O:0.999950
it	O	O:0.999966
seemed	O	O:0.999938
easier	O	O:0.999957
to	O	O:0.999995
go	O	O:0.999996
after	O	O:0.999977
the	O	O:0.999973
more	O	O:0.999573
general	O	O:0.998607
question	O	O:0.999436
.	O	O:0.999835
	
How	O	O:0.999908
do	O	O:0.999959
we	O	O:0.999998
apply	O	O:0.813353
a	O	O:0.999861
function	O	O:0.999408
to	O	O:0.999995
an	O	O:1.000000
entire	O	O:0.999959
group	O	O:0.997500
in	O	O:0.999985
pandas	O	O:0.999120
and	O	O:0.999993
python	O	O:0.999277
?	O	O:0.999849
	
How	O	O:0.999865
can	O	O:0.999953
we	O	O:1.000000
apply	O	O:0.955580
a	O	O:0.999890
function	O	O:0.999502
to	O	O:0.999995
an	O	O:1.000000
entire	O	O:0.999967
group	O	O:0.998023
in	O	O:0.999985
pandas	O	O:0.999950
dataframe	B-API	O:0.998437
in	O	O:0.999953
python	O	O:0.999681
?	O	O:0.999973
	
This	O	O:0.998973
is	O	O:0.999991
the	O	O:0.999978
code	O	O:0.999926
that	O	O:0.999964
I	O	O:1.000000
have	O	O:0.999996
so	O	O:0.999853
far	O	O:0.999586
:	O	O:0.999967
#CODE	O	O:0.999727
	
Could	O	O:0.999678
you	O	O:0.999957
be	O	O:0.999999
more	O	O:0.999984
specific	O	O:0.999831
about	O	O:0.999859
how	O	O:0.999750
`	O	O:0.999990
magic_apply	O	O:0.985639
`	O	O:0.999996
will	O	O:0.999834
differ	O	O:0.999975
from	O	O:0.999923
`	O	O:0.999984
apply	O	B-API:0.966790
`	O	O:0.999910
?	O	O:0.999169
	
Maybe	O	O:0.999939
give	O	O:0.999797
an	O	O:0.999998
example	O	O:0.999962
of	O	O:0.999933
`	O	O:0.999984
myfunc	O	O:0.962412
`	O	O:0.999986
?	O	O:0.999605
	
As	O	O:0.999937
@USER	O	O:0.999936
points	O	O:0.999786
out	O	O:0.999959
the	O	O:0.999970
"	O	O:0.999959
magic	O	O:0.999858
apply	O	B-API:0.541327
"	O	O:0.999638
is	O	O:0.999850
simply	O	O:0.998884
called	O	O:0.999650
...	O	O:0.999718
apply	O	B-API:0.909415
.	O	O:0.999038
	
It's	O	O:0.999911
a	O	O:0.999817
groupby	B-API	B-API:0.999216
method	O	O:0.998899
:	O	O:0.999834
#CODE	O	O:0.999894
	
Beautiful	O	O:0.998556
..	O	O:0.999468
	
I	O	O:0.999942
thought	O	O:0.999952
something	O	O:0.999872
like	O	O:0.997262
ix	O	O:0.627991
index	O	O:0.999721
quarter	O	O:0.999349
existed	O	O:0.999942
just	O	O:0.999125
could	O	O:0.999963
not	O	O:0.999992
apply	O	O:0.797318
it	O	O:0.999908
!....	O	O:0.988541
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
But	O	O:0.999890
how	O	O:0.999959
do	O	O:0.999974
i	O	O:0.999989
apply	O	O:0.852268
that	O	O:0.999539
formatting	O	O:0.999926
to	O	O:0.999995
a	O	O:0.999999
dataframe	B-API	O:0.988373
?	O	O:0.999963
	
like	O	O:0.999273
---	O	O:0.999925
print	O	O:0.999197
dfTotalv3.format	O	O:0.985975
(	O	O:0.999947
{0	O	O:0.999838
}	O	O:0.999943
{	O	O:0.999968
1	O	O:0.999760
}	O	O:0.999935
{	O	O:0.999813
2	O	O:0.999618
:	O	O:0.999901
,.	O	O:0.999955
2f	O	O:0.999711
}	O	O:0.999934
{	O	O:0.999863
3	O	O:0.999551
:	O	O:0.999908
,.	O	O:0.999969
2f	O	O:0.999735
}	O	O:0.999928
{	O	O:0.999894
4	O	O:0.999565
:	O	O:0.999902
,.	O	O:0.999953
2f	O	O:0.999880
}	O	O:0.999985
)	O	O:0.999986
or	O	O:0.999981
how	O	O:0.999956
could	O	O:0.999946
i	O	O:0.999999
just	O	O:0.999945
format	O	O:0.999982
one	O	O:0.999992
column	O	O:0.999984
by	O	O:0.999997
referencing	O	O:0.999870
its	O	O:0.999461
field	O	O:0.999924
name	O	O:0.999696
and	O	O:0.999992
the	O	O:0.999982
format	O	O:0.998763
i	O	O:0.999945
want	O	O:0.999733
	
see	O	O:0.999615
here	O	O:0.998854
:	O	O:0.999983
#URL	O	O:0.999932
you	O	O:0.999995
need	O	O:0.999988
to	O	O:0.999999
set	O	O:0.999995
using	O	O:0.999842
:	O	O:0.999154
``	O	O:0.999780
df.loc	B-API	B-API:0.984658
[	O	O:0.999972
row	O	O:0.999959
,	O	O:0.999994
column	O	O:0.999943
]	O	O:0.999981
=	O	O:0.999919
value	O	O:0.999749
``	O	O:0.999682
,	O	O:0.999508
and	O	O:0.999984
not	O	O:0.999940
chained	O	O:0.993303
assignment	O	O:0.999357
.	O	O:0.999472
	
In	O	O:0.999939
addition	O	O:0.999962
,	O	O:0.999997
you	O	O:0.999940
are	O	O:0.999996
better	O	O:0.999964
off	O	O:0.999989
using	O	O:0.999963
a	O	O:0.999257
vectorized	O	O:0.993078
method	O	O:0.999921
or	O	O:0.999991
apply	O	O:0.832377
if	O	O:0.999925
you	O	O:0.999887
cannot	O	O:0.999935
vectorize	B-API	O:0.854525
.	O	O:0.999867
	
Use	O	O:0.999481
apply	O	B-API:0.959970
:	O	O:0.999494
#CODE	O	O:0.999225
	
Now	O	O:0.999950
I	O	O:0.999993
apply	O	O:0.867769
the	O	O:0.996539
cut	O	B-API:0.831409
:	O	O:0.999934
`	O	O:0.999990
up3	O	O:0.998635
=	O	O:0.999947
up2	O	O:0.989006
[:	O	O:0.999947
cut_loc-1	O	O:0.993704
]`	O	O:0.999972
,	O	O:0.999945
which	O	O:0.999912
should	O	O:0.999985
just	O	O:0.999977
shorten	O	O:0.999918
the	O	O:0.999843
`	O	O:0.999976
DataFrame	B-API	O:0.824438
`	O	O:0.999985
.	O	O:0.999718
	
However	O	O:0.999812
,	O	O:0.999998
when	O	O:0.999954
I	O	O:0.999997
go	O	O:0.999998
to	O	O:0.999980
plot	O	O:0.999976
it	O	O:0.999955
`	O	O:0.999994
up3.plot	O	O:0.988316
(	O	O:0.999973
x=	O	O:0.999928
'	O	O:0.999921
Field	O	O:0.997166
'	O	O:0.999974
,	O	O:0.999974
y=	O	O:0.999907
'	O	O:0.999920
Moment	O	O:0.999551
'	O	O:0.999970
,	O	O:0.999977
color=	O	O:0.999565
'	O	O:0.999978
red	O	O:0.999602
'	O	O:0.999958
,	O	O:0.999978
label=	O	O:0.999443
'	O	O:0.999938
Up	O	O:0.999975
'`	O	O:0.999991
I	O	O:0.999984
get	O	O:0.999991
the	O	O:0.999963
error	O	O:0.999138
`'	O	O:0.999891
numpy.ndarray	B-API	B-API:0.950730
'	O	O:0.999751
object	O	O:0.999790
has	O	O:0.999960
no	O	O:0.999978
attribute	O	O:0.999868
'	O	O:0.999991
find	O	O:0.999287
'`	O	O:0.999942
	
Perhaps	O	O:0.999649
not	O	O:0.999971
the	O	O:0.999998
most	O	O:0.999660
fancy	O	O:0.999522
way	O	O:0.999743
,	O	O:0.999950
but	O	O:0.999990
you	O	O:0.999931
can	O	O:0.999994
always	O	O:0.999998
`	O	O:0.999997
groupby	B-API	B-API:0.999437
`	O	O:0.999998
your	O	O:0.999245
time	O	O:0.999950
frequency	O	O:0.999910
and	O	O:0.999989
apply	O	O:0.802943
a	O	O:0.999849
custom	O	O:0.846569
function	O	O:0.999913
returning	O	O:0.999736
what	O	O:0.999732
you	O	O:0.999985
want	O	O:0.999933
.	O	O:0.999924
	
Then	O	O:0.998991
groupby	B-API	B-API:0.829130
the	O	O:0.999974
month	O	O:0.993450
frequency	O	O:0.999788
and	O	O:0.999962
apply	O	O:0.689056
the	O	O:0.989748
function	O	O:0.988121
:	O	O:0.999926
#CODE	O	O:0.999876
	
For	O	O:0.999917
example	O	O:0.999452
,	O	O:0.999989
let's	O	O:0.999871
say	O	O:0.999901
I'm	O	O:0.999986
looking	O	O:0.999825
to	O	O:0.999985
find	O	O:0.999974
and	O	O:0.999997
categorize	O	O:0.999840
transients	O	O:0.999907
using	O	O:0.999956
some	O	O:0.999266
moving	O	O:0.967123
window	O	O:0.999681
process	O	O:0.989586
(	O	O:0.999991
e.g.	O	O:0.999782
wavelet	O	O:0.999800
analysis	O	O:0.999943
)	O	O:0.999994
or	O	O:0.999991
apply	O	O:0.794416
a	O	O:0.999968
FIR	O	O:0.989573
filter	O	O:0.981860
.	O	O:0.999724
	
How	O	O:0.999950
do	O	O:0.999948
I	O	O:0.999993
handle	O	O:0.999915
the	O	O:0.999946
boundaries	O	O:0.999514
,	O	O:0.999996
either	O	O:0.999977
at	O	O:0.999996
the	O	O:0.999996
end	O	O:0.999811
or	O	O:0.999998
beginning	O	O:0.999892
of	O	O:0.999997
a	O	O:0.999994
file	O	O:0.999897
or	O	O:0.999997
at	O	O:0.999997
chunk	O	O:0.999875
boundaries	O	O:0.999559
?	O	O:0.999946
	
I	O	O:0.999953
would	O	O:0.999993
like	O	O:0.999981
the	O	O:1.000000
data	O	O:0.999973
to	O	O:0.999998
appear	O	O:0.999999
as	O	O:0.999997
one	O	O:0.999993
continuous	O	O:0.999950
data	O	O:0.999966
set	O	O:0.999584
.	O	O:0.999957
	
Based	O	O:0.999715
upon	O	O:0.999492
the	O	O:0.999963
helpful	O	O:0.999588
hints	O	O:0.999867
I	O	O:0.999994
built	O	O:0.999980
a	O	O:0.999908
iterator	O	O:0.999790
that	O	O:0.999977
steps	O	O:0.999995
over	O	O:0.999936
files	O	O:0.999269
and	O	O:0.999984
returns	O	O:0.999951
chunks	O	O:0.999263
of	O	O:0.999991
arbitrary	O	O:0.999739
size	O	O:0.999885
---	O	O:0.999944
a	O	O:0.999986
moving	O	O:0.915110
window	O	O:0.999936
that	O	O:0.999895
hopefully	O	O:0.999953
handles	O	O:0.999958
file	O	O:0.999927
boundaries	O	O:0.999540
with	O	O:0.999935
grace	O	O:0.999495
.	O	O:0.999924
	
I've	O	O:0.999580
added	O	O:0.999862
the	O	O:0.999984
option	O	O:0.999915
of	O	O:0.999984
padding	O	O:0.999755
the	O	O:0.999989
front	O	O:0.999541
and	O	O:0.999998
back	O	O:0.999864
of	O	O:0.999998
each	O	O:0.999745
of	O	O:0.999996
the	O	O:0.999963
windows	O	O:0.999943
with	O	O:0.999924
data	O	O:0.999045
(	O	O:0.999996
overlapping	O	O:0.999806
windows	O	O:0.998400
)	O	O:0.999924
.	O	O:0.999769
	
I	O	O:0.999967
can	O	O:0.999997
then	O	O:0.999985
apply	O	O:0.992307
a	O	O:0.999995
succession	O	O:0.999502
of	O	O:0.999996
filters	O	O:0.998388
to	O	O:0.999990
the	O	O:0.999999
overlapping	O	O:0.997204
windows	O	O:0.999029
and	O	O:0.999999
then	O	O:0.999922
remove	O	O:0.999866
the	O	O:0.999998
overlaps	O	O:0.999615
at	O	O:0.999990
the	O	O:0.999986
end	O	O:0.999621
.	O	O:0.999800
	
This	O	O:0.999840
,	O	O:0.999990
I	O	O:0.999997
hope	O	O:0.999497
,	O	O:0.999973
gives	O	O:0.999758
me	O	O:0.999943
continuity	O	O:0.999584
.	O	O:0.999914
	
This	O	O:0.999650
can	O	O:0.999979
very	O	O:0.999993
easily	O	O:0.999968
get	O	O:0.999950
quite	O	O:0.999734
complicated	O	O:0.999518
.	O	O:0.999890
	
For	O	O:0.999878
instance	O	O:0.999679
,	O	O:0.999992
if	O	O:0.999993
you	O	O:0.999991
apply	O	O:0.932483
an	O	O:0.999959
operation	O	O:0.999763
that	O	O:0.999980
does	O	O:0.999994
a	O	O:0.999997
reduction	O	O:0.999949
that	O	O:0.999977
you	O	O:0.999996
can	O	O:0.999995
fit	O	O:0.999979
in	O	O:0.999993
memory	O	O:0.999731
,	O	O:0.999992
Results	O	O:0.999800
can	O	O:0.999976
simpley	O	O:0.999987
be	O	O:0.999999
a	O	O:0.999979
pandas.Series	B-API	B-API:0.999728
(	O	O:0.999911
or	O	O:0.999986
Frame	O	O:0.999940
)	O	O:0.999970
.	O	O:0.999844
	
Hoever	O	O:0.997708
,	O	O:0.999929
	
Thanks	O	O:0.998902
for	O	O:0.999994
your	O	O:0.998904
insight	O	O:0.996695
.	O	O:0.999911
	
I	O	O:0.999957
looked	O	O:0.999884
at	O	O:0.999993
your	O	O:0.999645
ENH	O	O:0.999169
module	O	O:0.999830
.	O	O:0.999717
	
I	O	O:0.999979
built	O	O:0.999962
a	O	O:0.999908
iterator	O	O:0.999852
that	O	O:0.999988
steps	O	O:0.999991
over	O	O:0.999957
the	O	O:0.999979
files	O	O:0.997293
but	O	O:0.999975
that	O	O:0.999976
allows	O	O:0.999980
for	O	O:0.999996
data	O	O:0.999888
padding	O	O:0.999725
on	O	O:0.999979
either	O	O:0.999949
end	O	O:0.999897
.	O	O:0.999884
	
By	O	O:0.999968
overlapping	O	O:0.999765
the	O	O:0.999989
data	O	O:0.999890
chunks	O	O:0.999909
,	O	O:0.999999
I	O	O:0.999997
can	O	O:0.999990
apply	O	O:0.975044
a	O	O:0.999965
filter	O	O:0.870137
and	O	O:0.999998
then	O	O:0.999955
cast	O	O:0.999192
aside	O	O:0.999997
the	O	O:0.999993
padding	O	O:0.999596
at	O	O:0.999989
the	O	O:0.999990
end	O	O:0.999923
,	O	O:0.999995
thus	O	O:0.999888
preserving	O	O:0.999858
continuity	O	O:0.999023
.	O	O:0.999906
	
You	O	O:0.999905
can	O	O:0.999938
do	O	O:1.000000
this	O	O:0.999992
directly	O	O:0.999884
with	O	O:0.999973
an	O	O:0.999975
apply	O	O:0.788671
instead	O	O:0.999821
of	O	O:0.999970
last	O	O:0.990980
(	O	O:0.999990
and	O	O:0.999990
get	O	O:0.999952
the	O	O:0.999988
-1th	O	O:0.999764
row	O	O:0.999961
of	O	O:0.999992
each	O	O:0.999642
group	O	O:0.990873
):	O	O:0.999958
#CODE	O	O:0.999348
	
But	O	O:0.999948
most	O	O:0.999859
likely	O	O:0.999865
you	O	O:0.999974
can	O	O:0.999981
do	O	O:1.000000
a	O	O:0.999999
transform	O	B-API:0.749183
or	O	O:0.999961
apply	O	B-API:0.875178
(	O	O:0.999977
depending	O	O:0.999345
on	O	O:0.999986
what	O	O:0.999962
something	O	O:0.999723
is	O	O:0.999781
):	O	O:0.999902
#CODE	O	O:0.999642
	
Thanks	O	O:0.998916
-	O	O:0.999994
the	O	O:0.999958
refactor	O	O:0.998914
makes	O	O:0.999356
sense	O	O:0.999620
.	O	O:0.999879
	
Couldn't	O	O:0.999854
figure	O	O:0.999572
out	O	O:0.999976
the	O	O:0.999992
transform	O	O:0.559279
apply	O	O:0.708596
approach	O	O:0.999945
when	O	O:0.997604
I	O	O:0.999979
looked	O	O:0.999984
into	O	O:0.998618
it	O	O:0.999985
at	O	O:0.999987
first	O	O:0.999469
.	O	O:0.999869
	
I	O	O:0.999792
was	O	O:0.999951
hoping	O	O:0.998781
there	O	O:0.999666
was	O	O:0.999973
some	O	O:0.999949
nice	O	O:0.999877
syntactic	O	O:0.999533
sugar	O	O:0.999693
.	O	O:0.999730
	
@USER	O	O:0.999588
you	O	O:0.999973
need	O	O:0.999995
something	O	O:0.999989
to	O	O:0.999997
be	O	O:1.000000
a	O	O:0.999986
function	O	O:0.999438
for	O	O:0.999979
transform	O	B-API:0.743272
/	O	O:0.999910
apply	O	B-API:0.590314
,	O	O:0.999898
worth	O	O:0.999816
checking	O	O:0.999614
out	O	O:0.999901
the	O	O:0.999931
docs	O	O:0.997569
:	O	O:0.999933
#URL	O	O:0.999748
	
@USER	O	O:0.999816
completely	O	O:0.999915
depends	O	O:0.999780
on	O	O:0.999977
the	O	O:0.999995
something	O	O:0.999959
whether	O	O:0.999260
or	O	O:0.999995
not	O	O:0.999985
you	O	O:0.999994
can	O	O:0.999993
do	O	O:0.999999
apply	O	O:0.883980
/	O	O:0.999826
transform	O	B-API:0.915965
!	O	O:0.999694
	
:)	O	O:0.999244
	
I'll	O	O:0.999289
give	O	O:0.999909
this	O	O:0.999947
the	O	O:0.999995
check	O	O:0.999786
mark	O	O:0.999124
because	O	O:0.999878
it's	O	O:0.999930
taught	O	O:0.999946
me	O	O:0.999992
quite	O	O:0.999936
a	O	O:0.999984
bit	O	O:0.997610
.	O	O:0.999840
	
But	O	O:0.999876
it	O	O:0.999986
still	O	O:0.999853
seems	O	O:0.999979
odd	O	O:0.999966
to	O	O:0.999990
me	O	O:0.999999
that	O	O:0.999953
there	O	O:0.999977
isn't	O	O:0.999991
a	O	O:0.999997
more	O	O:0.999316
natural	O	O:0.999708
way	O	O:0.999984
to	O	O:0.999980
do	O	O:0.999999
this	O	O:0.999946
with	O	O:0.999822
groupby	B-API	B-API:0.991047
.	O	O:0.999834
	
For	O	O:0.999921
example	O	O:0.999819
,	O	O:0.999996
I	O	O:0.999997
get	O	O:0.999979
weird	O	O:0.999630
behavior	O	O:0.999985
if	O	O:0.999982
I	O	O:0.999994
take	O	O:0.999959
the	O	O:0.999973
original	O	O:0.999556
dataframe	B-API	O:0.996726
and	O	O:0.999961
try	O	O:0.999893
:	O	O:0.999921
`	O	O:0.999991
df.sort	O	O:0.908317
([	O	O:0.999983
'	O	O:0.999927
date	O	O:0.999528
'])	O	O:0.999806
.groupby	B-API	B-API:0.996573
([	O	O:0.999543
'	O	O:0.999752
ticker	O	O:0.999464
'])	O	O:0.999377
.transform	B-API	B-API:0.999398
(	O	O:0.999897
lambda	O	O:0.999056
x	O	O:0.999509
:	O	O:0.999930
x.diff()	O	O:0.999580
)`	O	O:0.999940
I	O	O:0.999951
would	O	O:0.999993
have	O	O:0.999780
hoped	O	O:0.999981
pandas	O	O:0.999812
would	O	O:0.999960
be	O	O:0.999999
able	O	O:0.999995
to	O	O:0.999986
figure	O	O:0.999955
out	O	O:0.999974
that	O	O:0.999905
it	O	O:0.999995
should	O	O:0.999935
ignore	O	O:0.999875
text	O	O:0.999923
columns	O	O:0.999840
and	O	O:0.999999
then	O	O:0.999945
apply	O	O:0.833897
the	O	O:0.999990
diff	O	B-API:0.980618
function	O	O:0.999904
to	O	O:0.999982
the	O	O:1.000000
numerical	O	O:0.999486
columns	O	O:0.999606
.	O	O:0.999940
	
In	O	O:0.999939
general	O	O:0.999203
,	O	O:0.999948
is	O	O:0.999993
there	O	O:0.999968
a	O	O:0.999997
way	O	O:0.999948
to	O	O:0.999983
use	O	O:0.999999
a	O	O:0.999990
different	O	O:0.996777
function	O	O:0.999920
per	O	O:0.999963
column	O	O:0.999816
in	O	O:0.999980
`	O	O:0.999993
transform	O	B-API:0.968239
`	O	O:0.999927
(	O	O:0.999987
like	O	O:0.999989
you	O	O:0.999988
can	O	O:0.999990
with	O	O:0.999998
`	O	O:0.999994
agg	O	B-API:0.981934
`)	O	O:0.999972
?	O	O:0.999682
	
This	O	O:0.999756
will	O	O:0.999803
accomplish	O	O:0.999983
everything	O	O:0.999929
I	O	O:0.999990
want	O	O:0.999904
.	O	O:0.999040
	
And	O	O:0.999973
what	O	O:0.999902
I	O	O:0.999998
really	O	O:0.999987
like	O	O:0.996528
is	O	O:0.999994
that	O	O:0.999862
it	O	O:0.999998
can	O	O:0.999988
be	O	O:0.999999
generalized	O	O:0.999971
to	O	O:0.999987
cases	O	O:0.999996
where	O	O:0.999972
you	O	O:0.999990
want	O	O:0.999993
to	O	O:0.999997
apply	O	O:0.996981
a	O	O:0.999774
function	O	O:0.999773
more	O	O:0.999838
intricate	O	O:0.999957
than	O	O:0.999662
`	O	O:0.999997
diff	O	B-API:0.992322
`	O	O:0.999975
.	O	O:0.999197
	
In	O	O:0.999977
particular	O	O:0.999894
,	O	O:0.999997
you	O	O:0.999983
could	O	O:0.999982
do	O	O:0.999999
things	O	O:0.999989
like	O	O:0.999550
`	O	O:0.999994
lambda	O	O:0.997453
x	O	O:0.999901
:	O	O:0.999686
pd.rolling_mean	B-API	B-API:0.993179
(	O	O:0.999991
x	O	O:0.999923
,	O	O:0.999983
20	O	O:0.999943
,	O	O:0.999974
20	O	O:0.999962
)`	O	O:0.999884
to	O	O:0.999994
make	O	O:0.999999
a	O	O:0.999999
column	O	O:0.999915
of	O	O:0.999993
rolling	O	O:0.979690
means	O	O:0.999946
where	O	O:0.999938
you	O	O:0.999960
don't	O	O:0.999995
need	O	O:0.999986
to	O	O:0.999999
worry	O	O:0.999997
about	O	O:0.999931
each	O	O:0.999919
ticker's	O	O:0.999867
data	O	O:0.999988
being	O	O:0.999946
corrupted	O	O:0.999910
by	O	O:0.999996
that	O	O:0.999951
of	O	O:0.999997
any	O	O:0.999990
other	O	O:0.999812
ticker	O	O:0.980633
(	O	O:0.999869
`	O	O:0.999975
groupby	B-API	B-API:0.999574
`	O	O:0.999989
takes	O	O:0.999446
care	O	O:0.999961
of	O	O:0.999998
that	O	O:0.999820
for	O	O:0.999993
you	O	O:0.999974
...	O	O:0.999778
)	O	O:0.999974
.	O	O:0.999831
	
Then	O	O:0.999483
how	O	O:0.999996
do	O	O:0.999990
I	O	O:0.999998
apply	O	O:0.906086
clustering	O	O:0.988243
to	O	O:0.999992
this	O	O:0.999998
to	O	O:0.999999
determine	O	O:0.999999
a	O	O:0.999989
cut-off	O	O:0.999088
threshold	O	O:0.999950
?	O	O:0.999970
	
I	O	O:0.999980
think	O	O:0.999949
methods	O	O:0.999354
with	O	O:0.999851
apply	O	B-API:0.664287
are	O	O:0.999964
going	O	O:0.999207
to	O	O:0.999990
need	O	O:0.999998
some	O	O:0.999970
annoying	O	O:0.999986
sorting	O	O:0.999513
at	O	O:0.999963
the	O	O:0.999937
end	O	O:0.999703
...	O	O:0.999199
	
:	O	O:0.999903
s	O	O:0.999712
	
Say	O	O:0.999828
my	O	O:0.999953
dataframe	B-API	O:0.990296
had	O	O:0.999974
two	O	O:0.999990
values	O	O:0.999706
columns	O	O:0.999508
:	O	O:0.999989
value_1	O	O:0.998544
and	O	O:0.999980
value_2	O	O:0.991519
.	O	O:0.999298
	
I	O	O:0.999969
can	O	O:0.999948
do	O	O:0.999958
:	O	O:0.999992
`	O	O:0.999995
diffs_df	O	O:0.998935
=	O	O:0.999963
data3.groupby	O	O:0.963743
([	O	O:0.999700
'	O	O:0.999744
ticker	O	O:0.999178
'])	O	O:0.999353
[[	O	O:0.999464
'	O	O:0.999947
value_1	O	O:0.995188
'	O	O:0.999967
,	O	O:0.999971
'	O	O:0.999979
value_2	O	O:0.999049
']]	O	O:0.999627
.transform	B-API	B-API:0.999146
(	O	O:0.999881
lambda	O	O:0.999079
x	O	O:0.999355
:	O	O:0.999919
x.diff()	O	O:0.998652
)`	O	O:0.999685
and	O	O:0.999971
that	O	O:0.999795
works	O	O:0.999911
fine	O	O:0.999753
.	O	O:0.999851
	
But	O	O:0.999761
`	O	O:0.999993
diffs_df	O	O:0.996943
=	O	O:0.999957
data3.groupby	O	O:0.958342
([	O	O:0.999700
'	O	O:0.999744
ticker	O	O:0.999178
'])	O	O:0.999353
[[	O	O:0.999464
'	O	O:0.999947
value_1	O	O:0.995188
'	O	O:0.999967
,	O	O:0.999971
'	O	O:0.999979
value_2	O	O:0.999021
']]	O	O:0.999614
.transform	B-API	B-API:0.998821
(	O	O:0.999956
pd.DataFrame.diff	B-API	B-API:0.658579
)`	O	O:0.999932
blows	O	O:0.999073
chunks	O	O:0.999424
.	O	O:0.999862
	
So	O	O:0.999616
is	O	O:0.999993
it	O	O:0.999983
correct	O	O:0.999958
to	O	O:0.999996
say	O	O:0.999999
that	O	O:0.999959
`	O	O:0.999998
transform	O	B-API:0.941246
`	O	O:0.999994
always	O	O:0.999921
operates	O	O:0.999937
on	O	O:0.999993
a	O	O:0.999980
series	O	O:0.999054
(	O	O:0.999996
even	O	O:0.999884
if	O	O:0.999987
it	O	O:0.999987
means	O	O:0.999815
it	O	O:0.999987
has	O	O:0.999972
to	O	O:0.999998
work	O	O:0.999993
on	O	O:0.999999
multiple	O	O:0.999980
series	O	O:0.999965
in	O	O:0.999991
succession	O	O:0.999859
)	O	O:0.999994
,	O	O:0.999984
while	O	O:0.999938
`	O	O:0.999978
apply	O	B-API:0.981846
`	O	O:0.999960
works	O	O:0.998278
on	O	O:0.999998
multiple	O	O:0.999833
series	O	O:0.999990
all	O	O:0.999992
at	O	O:1.000000
once	O	O:0.999906
as	O	O:0.999998
a	O	O:0.999975
DataFrame	B-API	O:0.958138
?	O	O:0.999929
	
What	O	O:0.999680
determines	O	O:0.999191
the	O	O:0.999997
type	O	O:0.998964
of	O	O:0.999971
object	O	O:0.999943
passed	O	O:0.999860
to	O	O:0.999992
the	O	O:0.999976
function	O	O:0.999833
...	O	O:0.999524
	
is	O	O:0.999926
it	O	O:0.999963
the	O	O:0.999990
#	O	O:0.999988
of	O	O:0.999993
columns	O	O:0.999896
,	O	O:0.999998
or	O	O:0.999966
is	O	O:0.999980
it	O	O:0.999985
`	O	O:0.999997
transform	O	B-API:0.948488
`	O	O:0.999985
vs	O	O:0.999392
`	O	O:0.999992
apply	O	B-API:0.980707
`	O	O:0.999956
,	O	O:0.999846
or	O	O:0.999971
is	O	O:0.999976
it	O	O:0.999961
`	O	O:0.999982
[	O	O:0.999822
'	O	O:0.999992
colname	O	O:0.999678
']`	O	O:0.999926
vs	O	O:0.999654
`	O	O:0.999855
[[	O	O:0.999696
'	O	O:0.999990
colname	O	O:0.999458
']]`	O	O:0.999589
?	O	O:0.999767
	
What	O	O:0.999883
Pandas	O	O:0.999951
data	O	O:0.999972
type	O	O:0.995840
is	O	O:0.999996
passed	O	O:0.998991
to	O	O:0.999996
transform	O	O:0.974718
or	O	O:0.999994
apply	O	O:0.536979
in	O	O:0.999986
a	O	O:0.999907
groupby	B-API	B-API:0.996944
	
Is	O	O:0.999974
there	O	O:0.999971
any	O	O:0.999986
way	O	O:0.999970
to	O	O:0.999988
force	O	O:0.999993
transform	O	O:0.859396
to	O	O:0.999991
pass	O	O:0.999904
the	O	O:0.999978
multi-column	O	O:0.999698
dataframe	B-API	O:0.978352
(	O	O:0.999935
i.e.	O	O:0.999885
not	O	O:0.999955
the	O	O:0.999998
individual	O	O:0.999680
series	O	O:0.999980
from	O	O:0.999975
the	O	O:0.999999
columns	O	O:0.999958
)	O	O:0.999995
to	O	O:0.999996
the	O	O:0.999994
function	O	O:0.999727
?	O	O:0.999946
	
I	O	O:0.999990
basically	O	O:0.999991
want	O	O:0.999873
the	O	O:0.999990
same	O	O:0.999977
behavior	O	O:0.999916
of	O	O:0.999980
`	O	O:0.999801
apply	O	B-API:0.963251
(	O	O:0.999857
my_func	O	O:0.846601
,	O	O:0.999983
axis	O	O:0.999681
=1	O	O:0.999819
)`	O	O:0.999662
but	O	O:0.999894
forcing	O	O:0.999719
it	O	O:0.999953
to	O	O:0.999996
return	O	O:0.999999
a	O	O:0.999991
result	O	O:0.999851
with	O	O:0.999974
the	O	O:0.999959
same	O	O:0.999830
index	O	O:0.998384
(	O	O:0.999983
i.e.	O	O:0.999978
what	O	O:0.999908
transform	O	B-API:0.708483
is	O	O:0.999991
supposed	O	O:0.999858
to	O	O:0.999992
do	O	O:0.999993
,	O	O:0.999996
but	O	O:0.999951
rather	O	O:0.999968
than	O	O:0.999929
working	O	O:0.999954
column	O	O:0.999972
by	O	O:0.999993
column	O	O:0.999965
,	O	O:0.999990
I	O	O:0.999998
want	O	O:0.999974
to	O	O:0.999950
be	O	O:1.000000
able	O	O:0.999991
to	O	O:0.999992
access	O	O:0.999997
multiple	O	O:0.999992
columns	O	O:0.999936
at	O	O:0.999997
the	O	O:0.999990
same	O	O:0.999961
time	O	O:0.999870
)	O	O:0.999988
.	O	O:0.999895
	
On	O	O:0.999871
the	O	O:0.999760
Left	O	O:0.999252
Hand	O	O:0.999799
Side	O	O:0.999899
,	O	O:0.999997
we	O	O:0.999994
get	O	O:0.999983
the	O	O:0.999998
new	O	O:0.999980
column	O	O:0.999965
names	O	O:0.999968
from	O	O:0.999986
the	O	O:0.999999
keys	O	O:0.999867
of	O	O:0.999995
the	O	O:0.999996
element	O	O:0.999970
of	O	O:0.999981
the	O	O:0.999978
stats	O	O:0.999864
column	O	O:0.999662
.	O	O:0.999943
	
Each	O	O:0.999709
element	O	O:0.999629
in	O	O:0.999973
the	O	O:0.999990
stats	O	O:0.999812
column	O	O:0.999687
is	O	O:0.999998
a	O	O:0.999987
dictionary	O	O:0.998862
.	O	O:0.999794
	
So	O	O:0.999954
we	O	O:0.999991
are	O	O:0.999998
doing	O	O:0.999975
a	O	O:0.999991
bulk	O	O:0.992150
assign	O	O:0.996700
.	O	O:0.999752
	
On	O	O:0.999855
the	O	O:0.999835
Right	O	O:0.999527
Hand	O	O:0.999850
Side	O	O:0.999926
,	O	O:0.999996
we	O	O:0.999999
break	O	O:0.999386
up	O	O:0.999976
the	O	O:0.999858
'	O	O:0.999961
stats	O	O:0.999360
'	O	O:0.999994
column	O	O:0.999986
using	O	O:0.999969
apply	O	B-API:0.829533
to	O	O:0.999847
make	O	O:0.999997
a	O	O:0.999999
data	O	O:0.999970
frame	O	O:1.000000
out	O	O:0.999990
of	O	O:0.999995
each	O	O:0.999172
key	O	O:0.999976
/	O	O:0.999992
value	O	O:0.999907
pair	O	O:0.999338
.	O	O:0.999900
	
Does	O	O:0.999888
such	O	O:0.999980
a	O	O:0.999975
function	O	O:0.998928
exist	O	O:0.999592
?	O	O:0.999978
	
If	O	O:0.999941
I	O	O:0.999988
build	O	O:0.999874
my	O	O:0.999885
own	O	O:0.999533
function	O	O:0.999927
,	O	O:0.999994
how	O	O:0.999979
can	O	O:0.999958
I	O	O:1.000000
apply	O	O:0.973725
it	O	O:0.999712
to	O	O:0.999953
the	O	O:0.999999
DataFrame	B-API	O:0.998813
columns	O	O:0.999792
?	O	O:0.999986
	
Pandas	O	O:0.999798
apply	O	O:0.721084
to	O	O:0.999957
data	O	O:0.999995
frame	O	O:0.999992
groupby	B-API	B-API:0.923459
	
If	O	O:0.999935
I	O	O:0.999943
groupby	B-API	B-API:0.986992
(	O	O:0.999751
g	O	O:0.999474
object	O	O:0.999897
below	O	O:0.999279
)	O	O:0.999983
and	O	O:0.999996
then	O	O:0.999893
apply	O	O:0.898879
following	O	O:0.998280
function	O	O:0.999696
to	O	O:0.999993
first	O	O:0.999998
1000	O	O:0.999992
rows	O	O:0.999842
of	O	O:0.999989
df	O	O:0.999745
,	O	O:0.999988
it	O	O:0.999917
works	O	O:0.999709
.	O	O:0.999946
	
But	O	O:0.999930
if	O	O:0.999985
I	O	O:0.999992
apply	O	O:0.868194
it	O	O:0.999733
to	O	O:0.999995
entire	O	O:0.999996
df	O	O:0.999946
,	O	O:0.999996
I	O	O:0.999990
get	O	O:0.999994
this	O	O:0.999557
exception	O	O:0.999619
:	O	O:0.999974
#CODE	O	O:0.999801
	
First	O	O:0.999729
reset	O	O:0.994009
the	O	O:0.999960
index	O	O:0.999713
,	O	O:0.999997
then	O	O:0.999931
group	O	O:0.999751
and	O	O:0.999995
apply	O	B-API:0.735219
.	O	O:0.996349
	
You	O	O:0.999973
can	O	O:0.999976
recover	O	O:0.999990
your	O	O:0.999947
original	O	O:0.999830
index	O	O:0.999995
by	O	O:0.999995
then	O	O:0.999931
setting	O	O:0.999805
the	O	O:0.999987
index	O	O:0.999864
at	O	O:0.999993
the	O	O:0.999990
end	O	O:0.999643
.	O	O:0.999811
	
The	O	O:0.999689
reset	O	O:0.998124
index	O	O:0.999253
is	O	O:0.999966
turned	O	O:0.999901
into	O	O:0.999953
a	O	O:0.999991
column	O	O:0.999254
called	O	O:0.996718
'	O	O:0.999983
index	O	O:0.998040
'	O	O:0.999886
(	O	O:0.999991
which	O	O:0.999878
set_index	B-API	B-API:0.968390
then	O	O:0.999869
drops	O	O:0.999917
)	O	O:0.999986
.	O	O:0.999754
	
And	O	O:0.999752
there's	O	O:0.999905
always	O	O:0.999929
`	O	O:0.999995
apply	O	B-API:0.997083
`	O	O:0.999542
:	O	O:0.999310
#CODE	O	O:0.999898
	
In	O	O:0.999898
pandas	O	O:0.999463
0.13	O	O:0.998398
(	O	O:0.999914
in	O	O:0.999990
development	O	O:0.999358
)	O	O:0.999997
this	O	O:0.999314
is	O	O:0.999982
fixed	O	O:0.992008
(	O	O:0.999960
#URL	O	O:0.998892
)	O	O:0.999929
.	O	O:0.999748
	
It	O	O:0.999833
is	O	O:0.999964
for	O	O:0.999993
this	O	O:0.999749
reason	O	O:0.999855
the	O	O:0.999973
`	O	O:0.999981
as_index=False	O	O:0.982936
`	O	O:0.999971
is	O	O:0.999980
used	O	O:0.999661
in	O	O:0.999959
the	O	O:0.999943
groupby	B-API	B-API:0.955141
call	O	O:0.998197
,	O	O:0.999992
so	O	O:0.999958
the	O	O:0.999993
column	O	O:0.999901
`	O	O:0.999988
L1	O	O:0.994545
`	O	O:0.999938
(	O	O:0.999936
fow	O	O:0.999920
which	O	O:0.999915
you	O	O:0.999988
group	O	O:0.999665
)	O	O:0.999933
is	O	O:0.999965
not	O	O:0.999978
added	O	O:0.999941
to	O	O:0.999934
the	O	O:0.999995
index	O	O:0.998727
(	O	O:0.999996
creating	O	O:0.999899
a	O	O:0.999981
MultiIndex	O	O:0.904833
)	O	O:0.999994
,	O	O:0.999994
so	O	O:0.999992
the	O	O:0.999976
original	O	O:0.999481
index	O	O:0.999694
is	O	O:0.999986
retained	O	O:0.998948
and	O	O:0.999998
the	O	O:0.999989
result	O	O:0.999503
can	O	O:0.999981
be	O	O:1.000000
appended	O	O:0.999979
to	O	O:0.999952
the	O	O:0.999999
original	O	O:0.999609
frame	O	O:0.999985
.	O	O:0.999929
	
But	O	O:0.999888
it	O	O:0.999982
seems	O	O:0.999967
the	O	O:0.999978
`	O	O:0.999959
as_index	O	B-API:0.652673
`	O	O:0.999986
keyword	O	O:0.997398
is	O	O:0.999994
ignored	O	O:0.995571
in	O	O:0.999978
0.12	O	O:0.999716
when	O	O:0.999874
using	O	O:0.999913
`	O	O:0.999975
apply	O	B-API:0.998005
`	O	O:0.999774
.	O	O:0.997163
	
@USER	O	O:0.998380
Ah	O	O:0.999944
,	O	O:0.999986
yes	O	O:0.999516
,	O	O:0.999970
indeed	O	O:0.999934
this	O	O:0.999969
does	O	O:0.999960
also	O	O:0.999974
work	O	O:0.999973
.	O	O:0.999921
	
But	O	O:0.999910
with	O	O:0.999843
`	O	O:0.999978
apply	O	B-API:0.979188
`	O	O:0.999909
it	O	O:0.999148
doesn't	O	O:0.999791
.	O	O:0.999915
	
Do	O	O:0.999962
you	O	O:0.999983
know	O	O:0.999978
what	O	O:0.999836
is	O	O:0.999987
the	O	O:0.999992
difference	O	O:0.999414
in	O	O:0.999992
this	O	O:0.999974
case	O	O:0.999919
between	O	O:0.999758
both	O	O:0.999664
?	O	O:0.999949
	
The	O	O:0.999963
answer	O	O:0.999791
of	O	O:0.999969
@USER	O	O:0.992756
is	O	O:0.999978
indeed	O	O:0.999598
the	O	O:0.999991
solution	O	O:0.999642
to	O	O:0.999999
your	O	O:0.999995
question	O	O:0.999776
,	O	O:0.999999
although	O	O:0.999975
I	O	O:0.999996
think	O	O:0.999972
you	O	O:0.999864
misunderstand	O	O:0.999907
the	O	O:0.999971
groupby	B-API	B-API:0.996878
.	O	O:0.999756
	
You	O	O:0.999929
still	O	O:0.999920
need	O	O:0.999973
to	O	O:0.999997
apply	O	O:0.996306
a	O	O:0.999899
function	O	O:0.998660
or	O	O:0.999996
aggregation	O	O:0.999461
on	O	O:0.999994
the	O	O:0.999954
`	O	O:0.999984
groupby()	B-API	B-API:0.999764
`	O	O:0.999996
call	O	O:0.994719
,	O	O:0.999996
in	O	O:0.999984
your	O	O:0.999951
case	O	O:0.999972
to	O	O:0.999999
sum	O	O:0.999996
all	O	O:0.999997
items	O	O:0.999912
in	O	O:0.999995
a	O	O:0.999998
group	O	O:0.995837
`	O	O:0.999971
data.groupby	O	O:0.571929
(	O	O:0.999994
..	O	O:0.999874
)	O	O:0.999972
.sum()	B-API	B-API:0.997667
`	O	O:0.999929
.	O	O:0.999429
	
I	O	O:0.999991
have	O	O:0.999986
a	O	O:0.999993
dataframe	B-API	O:0.997298
which	O	O:0.999938
I	O	O:0.999999
want	O	O:0.999989
to	O	O:0.999965
split	O	O:0.999968
into	O	O:0.999582
5	O	O:0.999919
chunks	O	O:0.990052
(	O	O:0.999992
more	O	O:0.999954
generally	O	O:0.999813
n	O	O:0.999976
chunks	O	O:0.999737
)	O	O:0.999995
,	O	O:0.999992
so	O	O:0.999998
that	O	O:0.999958
I	O	O:0.999999
can	O	O:0.999998
apply	O	O:0.958344
a	O	O:0.999986
groupby	B-API	B-API:0.998731
on	O	O:0.999977
the	O	O:0.999909
chunks	O	O:0.999254
.	O	O:0.999886
	
then	O	O:0.998813
in	O	O:0.999999
the	O	O:0.999995
apply	O	B-API:0.577196
,	O	O:0.999953
do	O	O:0.999991
your	O	O:0.999899
calculation	O	O:0.999769
,	O	O:0.999999
which	O	O:0.999771
in	O	O:0.999996
this	O	O:0.999983
case	O	O:0.999958
is	O	O:0.999997
another	O	O:0.998974
groupby	B-API	B-API:0.993187
.	O	O:0.999402
	
#CODE	O	O:0.998453
	
For	O	O:0.999906
filling	O	O:0.998994
the	O	O:0.999947
NaNs	O	O:0.999666
,	O	O:0.999994
you	O	O:0.999992
can	O	O:0.999982
apply	O	O:0.998784
this	O	O:0.999944
on	O	O:0.999993
all	O	O:0.999998
columns	O	O:0.999957
in	O	O:0.999988
one	O	O:0.999997
line	O	O:0.999966
as	O	O:0.999981
follows	O	O:0.990535
:	O	O:0.999959
#CODE	O	O:0.999735
	
Glad	O	O:0.999473
I	O	O:0.999982
could	O	O:0.999977
help	O	O:0.998399
!	O	O:0.999963
	
Most	O	O:0.999792
functions	O	O:0.999862
on	O	O:0.999991
Serieses	O	O:0.999673
you	O	O:0.999982
can	O	O:0.999997
also	O	O:1.000000
apply	O	O:0.979630
on	O	O:0.999900
a	O	O:0.999976
DataFrame	B-API	O:0.988531
,	O	O:0.999978
and	O	O:0.999997
if	O	O:0.999986
you	O	O:0.999928
can't	O	O:0.999957
,	O	O:0.999999
you	O	O:0.999978
can	O	O:0.999993
always	O	O:0.999999
apply	O	O:0.952659
a	O	O:0.999963
Series	O	O:0.998670
functions	O	O:0.999925
on	O	O:0.999993
all	O	O:0.999998
columns	O	O:0.999992
at	O	O:0.999999
once	O	O:0.999953
like	O	O:0.999967
this	O	O:0.999861
:	O	O:0.999986
`	O	O:0.999984
df.apply	B-API	B-API:0.992839
(	O	O:0.999978
lambda	O	O:0.998700
x	O	O:0.999340
:	O	O:0.999976
x.seriesmethod()	O	O:0.997347
)`	O	O:0.999877
	
However	O	O:0.999850
I	O	O:0.999995
wish	O	O:0.999984
to	O	O:0.999990
plot	O	O:0.999998
create	O	O:0.999943
a	O	O:0.999997
facet-wrapped	O	O:0.998257
histogram	O	O:0.999864
,	O	O:0.999980
and	O	O:0.999998
have	O	O:0.999985
each	O	O:0.999853
facet	O	O:0.999918
share	O	O:0.999760
the	O	O:0.999985
same	O	O:0.999840
xlim	O	B-API:0.824423
.	O	O:0.999904
	
The	O	O:0.999575
command	O	O:0.999869
I	O	O:0.999985
use	O	O:0.999980
seems	O	O:0.998833
to	O	O:0.999983
apply	O	O:0.941386
the	O	O:0.999961
xlim	O	O:0.535379
only	O	O:0.999934
to	O	O:0.999998
the	O	O:1.000000
last	O	O:0.999608
of	O	O:0.999995
the	O	O:0.999963
facets	O	O:0.999609
.	O	O:0.999806
	
(	O	O:0.999925
Also	O	O:0.999976
you	O	O:0.999992
can	O	O:0.999990
see	O	O:1.000000
that	O	O:0.999993
the	O	O:0.999998
labels	O	O:0.999786
are	O	O:0.999990
applied	O	O:0.999909
to	O	O:0.999987
the	O	O:1.000000
last	O	O:0.999673
of	O	O:0.999996
the	O	O:0.999980
facets	O	O:0.999977
only	O	O:0.999784
)	O	O:0.999993
.	O	O:0.999860
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999878
to	O	O:0.999996
specificy	O	O:0.999989
a	O	O:0.999989
global	O	O:0.993383
xlim	O	B-API:0.758211
?	O	O:0.999836
	
(	O	O:0.999641
And	O	O:0.999984
global	O	O:0.999497
labels	O	O:0.999249
)	O	O:0.999949
?	O	O:0.999904
	
@USER	O	O:0.999711
apply	O	O:0.661179
answer	O	O:0.999752
from	O	O:0.999549
question	O	O:0.999950
then	O	O:0.999940
"	O	O:0.999999
1	O	O:0.999847
"	O	O:0.999980
the	O	O:0.999873
found	O	O:0.997788
rectangle	O	O:0.999695
and	O	O:0.999968
recurse	O	O:0.999551
.	O	O:0.999347
	
If	O	O:0.999971
you	O	O:0.999905
do	O	O:0.999987
not	O	O:0.999997
want	O	O:0.999974
to	O	O:0.999996
add	O	O:0.999999
a	O	O:0.999998
column	O	O:0.999705
to	O	O:1.000000
your	O	O:0.999997
original	O	O:0.999755
DataFrame	B-API	O:0.999541
,	O	O:0.999995
you	O	O:0.999992
could	O	O:0.999994
create	O	O:0.999983
an	O	O:0.999998
independent	O	O:0.999182
`	O	O:0.999967
Series	O	O:0.989866
`	O	O:0.999991
and	O	O:0.999975
apply	O	O:0.772091
the	O	O:0.998081
`	O	O:0.999706
groupby	B-API	B-API:0.999943
`	O	O:0.999989
method	O	O:0.999595
to	O	O:0.999996
the	O	O:0.999998
`	O	O:0.999962
Series	O	O:0.991068
`	O	O:0.999984
instead	O	O:0.999199
:	O	O:0.999981
#CODE	O	O:0.999859
	
Apply	O	O:0.998106
function	O	O:0.999907
to	O	O:0.999998
sets	O	O:0.999998
of	O	O:0.999998
columns	O	O:0.999849
in	O	O:0.999998
pandas	O	O:0.999904
,	O	O:0.999986
'	O	O:0.999979
looping	O	O:0.999284
'	O	O:0.999982
over	O	O:0.999967
entire	O	O:0.999942
data	O	O:0.999984
frame	O	O:0.999993
column-wise	O	O:0.999488
	
I	O	O:0.999984
have	O	O:0.999971
tried	O	O:0.999826
using	O	O:0.999844
`	O	O:0.999626
df.groupby	B-API	B-API:0.999423
`	O	O:0.999955
and	O	O:0.999461
`	O	O:0.999987
df.filter	B-API	B-API:0.997663
`	O	O:0.999989
to	O	O:0.999890
loop-over	O	O:0.999992
the	O	O:0.999963
columns	O	O:0.999692
but	O	O:0.999978
I	O	O:0.999992
cannot	O	O:0.999990
really	O	O:0.999683
get	O	O:0.999970
it	O	O:0.999993
to	O	O:0.999998
work	O	O:0.999994
,	O	O:0.999999
because	O	O:0.999985
I	O	O:0.999968
am	O	O:0.999999
not	O	O:0.999943
at	O	O:0.999998
all	O	O:0.999982
sure	O	O:0.999877
how	O	O:0.999977
I	O	O:0.999997
apply	O	O:0.984906
effectively	O	O:0.996813
the	O	O:0.999988
same	O	O:0.999390
function	O	O:0.999953
to	O	O:0.999999
chunks	O	O:0.999997
of	O	O:0.999991
the	O	O:0.999981
data-frame	O	O:0.999998
,	O	O:0.999995
all	O	O:0.999980
in	O	O:0.999997
one	O	O:0.999973
go	O	O:0.999939
(	O	O:0.999998
as	O	O:0.999996
apparently	O	O:0.999878
one	O	O:0.999930
is	O	O:0.999988
to	O	O:0.999983
avoid	O	O:0.999992
looping	O	O:0.999940
over	O	O:0.999892
rows	O	O:0.998715
)	O	O:0.999973
.	O	O:0.999931
	
I	O	O:0.999983
have	O	O:0.999955
tried	O	O:0.999281
doing	O	O:0.999730
#CODE	O	O:0.998372
	
Note	O	O:0.999615
:	O	O:0.999986
I	O	O:0.999997
am	O	O:1.000000
a	O	O:0.999975
bit	O	O:0.999617
frustrated	O	O:0.999961
that	O	O:0.999906
I	O	O:0.999999
needed	O	O:0.999995
to	O	O:0.999987
thrown	O	O:0.999971
in	O	O:0.999988
the	O	O:0.999971
two	O	O:0.999915
transposes	O	O:0.999329
.	O	O:0.999903
	
I	O	O:0.999983
just	O	O:0.999930
couldn't	O	O:0.999664
get	O	O:0.999776
`	O	O:0.999987
groupby	B-API	B-API:0.999399
`	O	O:0.999964
and	O	O:0.999318
`	O	O:0.999995
apply	O	B-API:0.993418
`	O	O:0.999972
to	O	O:0.999943
play	O	O:0.999991
nicely	O	O:0.999935
with	O	O:0.999871
`	O	O:0.999984
axis=1	O	O:0.991150
`	O	O:0.999978
.	O	O:0.999304
	
If	O	O:0.999954
someone	O	O:0.999778
could	O	O:0.999978
show	O	O:0.999945
me	O	O:0.999992
how	O	O:0.999985
to	O	O:0.999992
do	O	O:1.000000
that	O	O:0.999959
,	O	O:0.999998
I'd	O	O:0.999994
be	O	O:0.999993
very	O	O:0.999737
grateful	O	O:0.997649
.	O	O:0.999775
	
The	O	O:0.999937
trick	O	O:0.999868
here	O	O:0.999465
was	O	O:0.999964
knowing	O	O:0.999942
that	O	O:0.999958
when	O	O:0.999934
you	O	O:0.999997
call	O	O:0.999746
`	O	O:0.999980
groupby	B-API	B-API:0.999967
(	O	O:0.999982
lambda	O	O:0.997438
x	O	O:0.999675
:	O	O:0.999920
f	O	O:0.999728
(	O	O:0.999990
x	O	O:0.999936
))`	O	O:0.999844
that	O	O:0.999632
`	O	O:0.999998
x	O	O:0.999395
`	O	O:0.999977
is	O	O:0.999987
the	O	O:0.999998
value	O	O:0.999932
of	O	O:0.999895
the	O	O:0.999981
index	O	O:0.999938
for	O	O:0.999994
each	O	O:0.999409
row	O	O:0.999679
.	O	O:0.999873
	
So	O	O:0.999821
`	O	O:0.999954
groupby	B-API	B-API:0.999661
(	O	O:0.999978
lambda	O	O:0.997817
x	O	O:0.999111
:	O	O:0.999948
x	O	O:0.999965
[	O	O:0.999988
0	O	O:0.999984
])`	O	O:0.999984
groups	O	O:0.999410
by	O	O:0.999981
the	O	O:0.999997
first	O	O:0.999740
letter	O	O:0.999845
of	O	O:0.999991
the	O	O:0.999787
row	O	O:0.999903
index	O	O:0.999508
.	O	O:0.999920
	
After	O	O:0.999775
doing	O	O:0.999779
the	O	O:0.999924
transposition	O	O:0.998159
,	O	O:0.999998
this	O	O:0.999810
was	O	O:0.999930
`	O	O:0.999983
A	O	O:0.999917
`	O	O:0.999996
or	O	O:0.999749
`	O	O:0.999990
B	O	O:0.998277
`	O	O:0.999980
.	O	O:0.999121
	
Thanks	O	O:0.999200
@USER	O	O:0.999813
yeah	O	O:0.998046
i	O	O:0.999990
kind	O	O:0.999966
of	O	O:0.999948
got	O	O:0.999966
your	O	O:0.999942
logic	O	O:0.999848
to	O	O:0.999998
work	O	O:0.999986
in	O	O:0.999998
my	O	O:0.999982
dataset	O	O:0.999856
.	O	O:0.999859
	
I	O	O:0.999932
am	O	O:0.999996
having	O	O:0.999539
a	O	O:0.999997
couple	O	O:0.999212
of	O	O:0.999991
problems	O	O:0.998645
though	O	O:0.999867
.	O	O:0.999946
	
One	O	O:0.999701
is	O	O:0.999977
I	O	O:0.999992
only	O	O:0.999985
wanted	O	O:0.999935
to	O	O:0.999982
get	O	O:0.999999
the	O	O:1.000000
mean	O	O:0.999946
of	O	O:0.999997
the	O	O:0.999998
next	O	O:0.999988
rows	O	O:0.999948
that	O	O:0.999975
relate	O	O:0.999990
to	O	O:0.999995
the	O	O:1.000000
same	O	O:0.999920
group	O	O:0.996767
.	O	O:0.999962
	
i.e.	O	O:0.998641
i	O	O:0.999978
need	O	O:0.999968
to	O	O:0.999996
apply	O	O:0.995336
a	O	O:0.999959
groupby	B-API	B-API:0.998198
to	O	O:0.999998
your	O	O:0.999991
example	O	O:0.999697
in	O	O:0.999996
my	O	O:0.999989
case	O	O:0.999932
it	O	O:0.999990
would	O	O:0.999988
be	O	O:0.999999
by	O	O:0.999978
'	O	O:0.999935
Country	O	O:0.997340
'	O	O:0.999868
	
However	O	O:0.999812
,	O	O:0.999998
when	O	O:0.999926
I	O	O:0.999997
do	O	O:0.999998
`	O	O:0.999972
apply	O	B-API:0.988309
`	O	O:0.999901
,	O	O:0.999704
I'm	O	O:0.999992
getting	O	O:0.999830
dataframes	O	O:0.999632
only	O	O:0.999178
:	O	O:0.999989
#CODE	O	O:0.999832
	
Internally	O	O:0.998991
,	O	O:0.999965
`	O	O:0.999981
apply	O	B-API:0.989546
`	O	O:0.999904
and	O	O:0.999511
`	O	O:0.999992
filter	O	B-API:0.523454
`	O	O:0.999989
try	O	O:0.999915
different	O	O:0.999993
ways	O	O:0.999906
of	O	O:0.999992
looping	O	O:0.999661
through	O	O:0.999903
the	O	O:0.999959
data	O	O:0.999443
:	O	O:0.999998
a	O	O:0.999997
"	O	O:0.999983
slow	O	O:0.999255
path	O	O:0.999640
"	O	O:0.999995
that	O	O:0.999433
is	O	O:0.999999
sure	O	O:0.999805
to	O	O:0.999996
work	O	O:0.999988
for	O	O:0.999997
any	O	O:0.999783
function	O	O:0.999568
,	O	O:0.999966
and	O	O:0.999999
a	O	O:0.999982
"	O	O:0.999850
fast	O	O:0.999185
path	O	O:0.999476
"	O	O:0.999993
that	O	O:0.999922
only	O	O:0.999970
works	O	O:0.999975
for	O	O:0.999999
some	O	O:0.998802
functions	O	O:0.999436
.	O	O:0.999793
	
These	O	O:0.999902
paths	O	O:0.999056
can	O	O:0.999983
operate	O	O:0.999997
on	O	O:0.999999
whole	O	O:0.999980
chucks	O	O:0.999977
of	O	O:0.999998
the	O	O:0.999991
data	O	O:0.999805
(	O	O:0.999997
as	O	O:0.999998
a	O	O:0.999990
DataFrame	B-API	O:0.994383
)	O	O:0.999989
or	O	O:0.999997
one	O	O:0.999993
row	O	O:0.999987
at	O	O:0.999998
a	O	O:0.999990
time	O	O:0.998678
(	O	O:0.999981
as	O	O:0.999993
Series	O	O:0.998803
)	O	O:0.999958
.	O	O:0.999811
	
Thanks	O	O:0.998129
@USER	O	O:0.998815
.	O	O:0.999745
	
The	O	O:0.999919
problem	O	O:0.998658
is	O	O:0.999994
,	O	O:0.999941
after	O	O:0.999950
the	O	O:0.999871
`	O	O:0.999868
apply	O	B-API:0.972258
(	O	O:0.999968
f	O	O:0.999905
)`	O	O:0.999892
,	O	O:0.999971
I	O	O:0.999993
cannot	O	O:0.999970
do	O	O:0.999995
something	O	O:0.999992
like	O	O:0.999501
`	O	O:0.999992
nth	O	O:0.998107
(	O	O:0.999988
1	O	O:0.999980
)`	O	O:0.999878
to	O	O:0.999967
return	O	O:0.999958
the	O	O:0.999971
2nd	O	O:0.999978
value	O	O:0.999970
of	O	O:0.999989
each	O	O:0.999703
group	O	O:0.998439
.	O	O:0.999904
	
Any	O	O:0.999667
ideas	O	O:0.999166
?	O	O:0.999888
	
In	O	O:0.999981
other	O	O:0.999966
words	O	O:0.999836
,	O	O:0.999990
the	O	O:0.999990
following	O	O:0.998180
fails	O	O:0.998751
:	O	O:0.999943
`	O	O:0.999992
dd.groupby	O	O:0.983065
(	O	O:0.999977
'	O	O:0.999962
user_id	O	O:0.997535
')	O	O:0.999739
.apply	B-API	B-API:0.995365
(	O	O:0.999971
f	O	O:0.999874
)	O	O:0.999904
.nth	B-API	B-API:0.996396
(	O	O:0.999962
1	O	O:0.999875
)	O	O:0.999903
.dropna	B-API	B-API:0.998440
(	O	O:0.999920
how=	O	O:0.999073
'	O	O:0.999975
all	O	O:0.999851
')`	O	O:0.999851
	
in	O	O:0.999805
``	O	O:0.999943
f	O	O:0.999112
``	O	O:0.999970
you	O	O:0.999798
could	O	O:0.999988
do	O	O:0.999984
``	O	O:0.999915
x.head	O	O:0.660074
(	O	O:0.999982
2	O	O:0.999874
)	O	O:0.999905
.tail	B-API	B-API:0.996418
(	O	O:0.999944
1	O	O:0.999913
)``	O	O:0.999882
to	O	O:0.999962
do	O	O:0.999998
that	O	O:0.999733
(	O	O:0.999996
you	O	O:0.999992
could	O	O:0.999993
also	O	O:0.999998
do	O	O:0.999980
``	O	O:0.999905
x.iloc	O	O:0.793089
[	O	O:0.999964
1	O	O:0.999892
]``	O	O:0.997540
,	O	O:0.999948
but	O	O:0.999987
if	O	O:0.999991
you	O	O:0.999997
have	O	O:0.999991
a	O	O:0.999999
groupsize	O	O:0.998968
<	O	O:0.999953
2	O	O:0.999964
that	O	O:0.999829
will	O	O:0.999969
fail	O	O:0.999955
.	O	O:0.999995
alternatively	O	O:0.999958
,	O	O:0.999997
you	O	O:0.999969
can	O	O:0.999992
do	O	O:1.000000
a	O	O:0.999999
second	O	O:0.999208
group	O	O:0.998238
/	O	O:0.999945
apply	O	B-API:0.930383
(	O	O:0.999083
``	O	O:0.999849
nth	O	O:0.996299
``	O	O:0.999859
is	O	O:0.999967
a	O	O:0.999989
groupby	B-API	B-API:0.987495
operation	O	O:0.999606
)	O	O:0.999935
,	O	O:0.999985
e.g.	O	O:0.998260
``	O	O:0.999898
dd.gropuby	O	O:0.946621
(	O	O:0.999969
'	O	O:0.999963
user_id	O	O:0.997824
')	O	O:0.999739
.apply	B-API	B-API:0.995365
(	O	O:0.999971
f	O	O:0.999659
)	O	O:0.999982
.gropuby	O	O:0.948448
(	O	O:0.999941
'	O	O:0.999962
user_id	O	O:0.998083
')	O	O:0.999497
.nth	B-API	B-API:0.997345
(	O	O:0.999901
1	O	O:0.999801
)``	O	O:0.999521
	
Hence	O	O:0.999830
how	O	O:0.999983
do	O	O:0.999991
I	O	O:0.999998
get	O	O:0.999982
my	O	O:0.999762
function	O	O:0.999976
to	O	O:0.999996
apply	O	O:0.969760
to	O	O:0.999988
the	O	O:1.000000
data	O	O:0.999988
frame	O	O:0.999998
in	O	O:0.999999
a	O	O:0.999999
row-wise	O	O:0.996476
fashion	O	O:0.999574
?	O	O:0.999946
	
I	O	O:0.999984
do	O	O:0.999997
step	O	O:0.999898
1	O	O:0.999994
once	O	O:0.999909
,	O	O:1.000000
then	O	O:0.999982
repeat	O	O:0.999947
step	O	O:0.999890
2-3	O	O:0.999921
many	O	O:0.999038
(	O	O:0.999972
~100	O	O:0.999500
)	O	O:0.999973
times	O	O:0.998319
.	O	O:0.999914
	
In	O	O:0.999964
the	O	O:0.999985
future	O	O:0.999635
I	O	O:0.999986
may	O	O:0.999999
need	O	O:0.999874
to	O	O:0.999998
pre-process	O	O:0.999972
`	O	O:0.999974
emission	O	O:0.648193
`	O	O:0.999975
(	O	O:0.999940
apply	O	O:0.681141
`	O	O:0.999589
cumsum	B-API	B-API:0.998987
`	O	O:0.999995
or	O	O:0.999990
other	O	O:0.999972
functions	O	O:0.999891
)	O	O:0.999956
before	O	O:0.999855
computing	O	O:0.999211
`	O	O:0.999984
counts	O	O:0.987878
`	O	O:0.999990
.	O	O:0.999654
	
@USER	O	O:0.991147
:	O	O:0.999947
That's	O	O:0.999838
odd	O	O:0.999873
.	O	O:0.999877
	
I	O	O:0.999984
just	O	O:0.999733
tested	O	O:0.999947
this	O	O:0.999934
on	O	O:0.999988
`	O	O:0.999980
pd.concat	B-API	B-API:0.979896
([	O	O:0.999997
data	O	O:0.999654
]	O	O:0.999949
*1000	O	O:0.998665
)`	O	O:0.999422
and	O	O:0.999938
found	O	O:0.999599
`	O	O:0.999928
str.contains	B-API	B-API:0.997989
`	O	O:0.999993
to	O	O:0.999959
be	O	O:1.000000
2x	O	O:0.999890
slower	O	O:0.999583
than	O	O:0.999695
`	O	O:0.999972
apply	O	B-API:0.986310
(	O	O:0.999919
lambda	O	O:0.997663
x	O	O:0.999332
:	O	O:0.999814
'	O	O:0.999992
Fruit	O	O:0.999801
'	O	O:0.999928
in	O	O:0.999976
x	O	O:0.999891
)`	O	O:0.999763
.	O	O:0.999800
	
Perhaps	O	O:0.999863
my	O	O:0.999966
version	O	O:0.999488
`	O	O:0.999994
0.12.0-933-g281dc4e	O	O:0.979834
`	O	O:0.999969
is	O	O:0.999920
too	O	O:0.999763
old	O	O:0.999915
?	O	O:0.999816
	
And	O	O:0.999984
then	O	O:0.999915
set	O	O:0.999995
it	O	O:0.999998
as	O	O:0.999980
the	O	O:0.999962
index	O	O:0.999657
,	O	O:0.999991
groupby	B-API	B-API:0.891601
on	O	O:0.999919
`	O	O:0.999916
[	O	O:0.999785
'	O	O:0.999989
Code	O	O:0.999514
'	O	O:0.999976
,	O	O:0.999978
'	O	O:0.999942
ID	O	O:0.999779
']`	O	O:0.999767
and	O	O:0.999992
then	O	O:0.999924
apply	O	O:0.950729
a	O	O:0.999958
`	O	O:0.999756
resample	O	B-API:0.974902
`	O	O:0.999988
on	O	O:0.999960
each	O	O:0.999840
group	O	O:0.993703
:	O	O:0.999969
#CODE	O	O:0.999731
	
in	O	O:0.999968
a	O	O:0.999992
pandas	O	O:0.999799
dataframe	B-API	O:0.999276
how	O	O:0.999961
can	O	O:0.999983
I	O	O:1.000000
apply	O	O:0.987684
a	O	O:0.999978
sort	O	O:0.991475
of	O	O:0.999997
excel	O	O:0.999059
left	O	O:0.997918
(	O	O:0.999881
'	O	O:0.999981
state	O	O:0.999716
'	O	O:0.999989
,	O	O:0.999995
2	O	O:0.999952
)	O	O:0.999992
to	O	O:0.999998
only	O	O:1.000000
take	O	O:0.999981
the	O	O:0.999996
first	O	O:0.999947
two	O	O:0.999944
letters	O	O:0.997916
.	O	O:0.999859
	
Ideally	O	O:0.999825
I	O	O:0.999996
want	O	O:0.999984
to	O	O:0.999926
learn	O	O:0.999954
how	O	O:0.999985
to	O	O:0.999981
use	O	O:0.999999
left	O	O:0.996531
,	O	O:0.999966
right	O	O:0.999404
and	O	O:0.999992
mid	O	O:0.999965
in	O	O:0.999959
a	O	O:0.999992
dataframe	B-API	O:0.994046
too	O	O:0.999707
.	O	O:0.999950
	
So	O	O:0.999984
need	O	O:0.999958
an	O	O:0.999991
equivalent	O	O:0.998929
and	O	O:0.999989
not	O	O:0.999996
a	O	O:0.999976
"	O	O:0.999947
trick	O	O:0.999683
"	O	O:0.999967
for	O	O:0.999990
this	O	O:0.999837
specific	O	O:0.999709
example	O	O:0.999412
.	O	O:0.999822
	
#CODE	O	O:0.998453
	
For	O	O:0.999936
last	O	O:0.999127
two	O	O:0.999990
that	O	O:0.999908
would	O	O:0.999993
be	O	O:0.999998
`	O	O:0.999998
df	O	O:0.996839
[	O	O:0.999979
'	O	O:0.999979
state	O	O:0.999821
']	O	O:0.999861
.str	B-API	B-API:0.848067
[	O	O:0.999775
-2	O	O:0.999572
:]	O	O:0.999630
`	O	O:0.999886
.	O	O:0.999547
	
Don't	O	O:0.999736
know	O	O:0.999938
what	O	O:0.999973
exactly	O	O:0.999934
you	O	O:0.999997
want	O	O:0.999903
for	O	O:0.999990
middle	O	O:0.999213
,	O	O:0.999935
but	O	O:0.999982
you	O	O:0.999972
can	O	O:0.999993
apply	O	O:0.998039
arbitrary	O	O:0.999190
function	O	O:0.999828
to	O	O:0.999996
a	O	O:1.000000
column	O	O:0.999784
with	O	O:0.999944
`	O	O:0.999991
apply	O	B-API:0.996790
`	O	O:0.999581
method	O	O:0.993179
:	O	O:0.999975
#CODE	O	O:0.999860
	
I	O	O:0.999996
have	O	O:0.999991
another	O	O:0.999860
example	O	O:0.999943
where	O	O:0.999877
i	O	O:0.999955
am	O	O:0.999997
try	O	O:0.999979
to	O	O:0.999996
apply	O	O:0.983020
the	O	O:0.999946
first	O	O:0.999614
two	O	O:0.999993
digits	O	O:0.999956
of	O	O:0.999996
an	O	O:0.999971
8	O	O:0.999987
digit	O	O:0.999615
number	O	O:0.999848
.	O	O:0.999992
then	O	O:0.999980
i	O	O:0.999997
get	O	O:0.999993
the	O	O:0.999982
error	O	O:0.999462
.	O	O:0.999793
	
'	O	O:0.999470
invalid	O	O:0.999616
index	O	O:0.999849
to	O	O:0.999950
scalar	O	O:0.999998
variable	O	O:0.999825
'	O	O:0.999987
how	O	O:0.999980
can	O	O:0.999978
i	O	O:0.999999
apply	O	O:0.967479
the	O	O:0.999962
above	O	O:0.999683
to	O	O:0.999997
take	O	O:0.999997
the	O	O:0.999999
last	O	O:0.999643
2	O	O:0.999986
numbers	O	O:0.999248
in	O	O:0.999961
'	O	O:0.999994
year	O	O:0.997126
'	O	O:0.999955
?	O	O:0.999940
	
Basically	O	O:0.999619
,	O	O:0.999990
there's	O	O:0.999904
no	O	O:0.999996
need	O	O:0.999981
to	O	O:0.999997
apply	O	O:0.991554
the	O	O:0.999983
set	O	O:0.999918
of	O	O:0.999996
functions	O	O:0.999856
to	O	O:0.999995
the	O	O:0.999999
two	O	O:0.999990
groups	O	O:0.999948
separately	O	O:0.999916
and	O	O:0.999995
append	O	O:0.910630
the	O	O:0.999772
results	O	O:0.999756
together	O	O:0.997912
.	O	O:0.999948
	
That's	O	O:0.999716
essentially	O	O:0.999942
what	O	O:0.999983
group	O	O:0.999677
by	O	O:0.999943
is	O	O:0.999953
doing	O	O:0.997613
:	O	O:0.999984
split	O	O:0.986922
,	O	O:0.999990
apply	O	B-API:0.790650
(	O	O:0.999960
separately	O	O:0.998331
)	O	O:0.999986
and	O	O:0.999973
combine	O	O:0.991825
.	O	O:0.999604
	
I	O	O:0.999983
have	O	O:0.999969
tried	O	O:0.999512
to	O	O:0.999996
look	O	O:0.999946
at	O	O:0.999993
Pandas	O	O:0.999798
`	O	O:0.999982
apply	O	B-API:0.995143
`	O	O:0.999848
and	O	O:0.998642
`	O	O:0.999989
groupby	B-API	B-API:0.999889
`	O	O:0.999987
methods	O	O:0.983176
,	O	O:0.999991
but	O	O:0.999882
can	O	O:0.999921
not	O	O:1.000000
come	O	O:0.999982
up	O	O:0.999985
with	O	O:0.999985
something	O	O:0.999955
that	O	O:0.999919
generates	O	O:0.999966
the	O	O:0.999985
desired	O	O:0.999824
overlapping	O	O:0.999235
groups	O	O:0.997228
.	O	O:0.999811
	
thanks	O	O:0.997076
but	O	O:0.999940
how	O	O:0.999980
do	O	O:0.999982
I	O	O:0.999997
apply	O	O:0.913564
that	O	O:0.998511
to	O	O:0.999995
a	O	O:1.000000
dataframe	B-API	O:0.981818
.	O	O:0.999903
	
when	O	O:0.998995
apply	O	O:0.965842
this	O	O:0.999915
concept	O	O:0.999499
to	O	O:0.999995
my	O	O:0.999997
larger	O	O:0.999291
working	O	O:0.999882
file	O	O:0.999804
I	O	O:0.999998
seem	O	O:0.999986
to	O	O:0.999989
lose	O	O:0.999992
the	O	O:0.999998
order	O	O:0.999872
of	O	O:0.999996
my	O	O:0.999978
columns	O	O:0.999842
.	O	O:0.999924
	
so	O	O:0.999937
month	O	O:0.998991
comes	O	O:0.999162
before	O	O:0.999648
product	O	O:0.998215
and	O	O:0.999987
month10	O	O:0.999588
comes	O	O:0.989946
before	O	O:0.999945
month2	O	O:0.998061
etc	O	O:0.999838
.	O	O:0.999987
why	O	O:0.999892
would	O	O:0.999985
this	O	O:0.999993
happen	O	O:0.999982
or	O	O:0.999997
rather	O	O:0.999962
how	O	O:0.999979
can	O	O:0.999965
i	O	O:0.999999
avoid	O	O:0.999956
losing	O	O:0.999640
my	O	O:0.999807
shape	O	O:0.999311
?	O	O:0.999944
	
"	O	O:0.999975
Google	O	O:0.999570
or	O	O:0.999984
learn	O	O:0.994372
"	O	O:0.999965
is	O	O:0.999984
a	O	O:0.999991
generic	O	O:0.997336
attitude	O	O:0.999938
that	O	O:0.999878
could	O	O:0.999991
apply	O	O:0.964062
to	O	O:0.999981
all	O	O:0.999994
forums	O	O:0.999859
,	O	O:0.999992
especially	O	O:0.999780
Q&	O	O:0.999960
A-style	O	O:0.999179
forums	O	O:0.999526
.	O	O:0.999809
	
However	O	O:0.999585
,	O	O:0.999973
I'm	O	O:0.999989
obviously	O	O:0.999981
here	O	O:0.999874
for	O	O:0.999997
a	O	O:0.999956
reason	O	O:0.994522
.	O	O:0.999895
	
"	O	O:0.999845
Vote	O	O:0.999264
Down	O	O:0.999602
requires	O	O:0.998907
125	O	O:0.999114
reputation	O	O:0.999356
.	O	O:0.999832
	
"	O	O:0.999739
	
Perfect	O	O:0.998395
for	O	O:0.999985
what	O	O:0.999526
I	O	O:0.999957
wanted	O	O:0.999912
.	O	O:0.998872
	
I	O	O:0.999989
just	O	O:0.999972
needed	O	O:0.999919
to	O	O:0.999978
understand	O	O:0.999992
how	O	O:0.999985
to	O	O:0.999991
apply	O	O:0.984431
the	O	O:0.999965
string	O	O:0.999616
operations	O	O:0.999841
to	O	O:0.999995
the	O	O:1.000000
dataframes	O	O:0.999450
/	O	O:0.999977
series	O	O:0.999861
,	O	O:0.999990
but	O	O:0.999984
I	O	O:0.999990
guess	O	O:0.999977
that's	O	O:0.999749
as	O	O:0.999996
simple	O	O:0.999645
as	O	O:0.999982
it	O	O:0.999815
is	O	O:0.999988
for	O	O:0.999949
strings	O	O:0.995941
.	O	O:0.999576
	
For	O	O:0.999840
row	O	O:0.999854
[	O	O:0.999980
0	O	O:0.999958
]	O	O:0.999973
-	O	O:0.999908
row	O	O:0.999924
[	O	O:0.999982
0	O	O:0.999956
]	O	O:0.999948
.capwords()	O	O:0.855096
should	O	O:0.999760
solve	O	O:0.999893
several	O	O:0.999966
problems	O	O:0.999909
at	O	O:0.999998
once	O	O:0.999901
,	O	O:0.999997
I	O	O:0.999993
expect	O	O:0.999745
!	O	O:0.999705
	
I	O	O:0.999979
have	O	O:0.999947
tried	O	O:0.999209
`	O	O:0.999983
apply	O	B-API:0.995588
(	O	O:0.999913
lambda	O	O:0.997216
x	O	O:0.999633
:	O	O:0.999929
set	O	O:0.998721
(	O	O:0.999989
x	O	O:0.999788
))`	O	O:0.997360
but	O	O:0.999950
it	O	O:0.999987
only	O	O:0.999948
works	O	O:0.999962
on	O	O:0.999997
individual	O	O:0.999843
lists	O	O:0.999958
as	O	O:0.999993
opposed	O	O:0.999923
to	O	O:0.999996
the	O	O:1.000000
entire	O	O:0.999782
column	O	O:0.999860
.	O	O:0.999950
	
this	O	O:0.999778
will	O	O:0.999947
raise	O	O:0.999968
starting	O	O:0.999318
in	O	O:0.999982
0.13	O	O:0.999594
,	O	O:0.999994
you	O	O:0.999989
need	O	O:0.999973
to	O	O:0.999991
``	O	O:0.999999
apply	O	B-API:0.891452
``	O	O:0.999793
to	O	O:0.999971
your	O	O:0.999995
groupby	B-API	B-API:0.959394
to	O	O:0.999997
get	O	O:0.999998
back	O	O:0.999915
a	O	O:0.999998
dataframe	B-API	O:0.995809
,	O	O:0.999976
see	O	O:0.999856
:	O	O:0.999940
#URL	O	O:0.999698
	
I	O	O:0.999940
would	O	O:0.999997
like	O	O:0.999972
to	O	O:0.999998
use	O	O:0.999998
the	O	O:0.999835
`	O	O:0.999914
pandas.rolling_apply	B-API	B-API:0.999722
`	O	O:0.999959
function	O	O:0.999743
to	O	O:0.999996
apply	O	O:0.976200
my	O	O:0.999699
own	O	O:0.999896
custom	O	O:0.998573
function	O	O:0.999942
on	O	O:0.999993
a	O	O:0.999995
rolling	O	B-API:0.628214
window	O	O:0.999277
basis	O	O:0.999576
.	O	O:0.999854
	
I	O	O:0.999992
have	O	O:0.999947
run	O	O:0.999651
into	O	O:0.999522
,	O	O:0.999998
what	O	O:0.999830
I	O	O:0.999996
think	O	O:0.999978
,	O	O:0.999922
is	O	O:0.999996
a	O	O:0.999974
fairly	O	O:0.999683
simple	O	O:0.999838
problem	O	O:0.999659
yet	O	O:0.999797
again	O	O:0.999701
.	O	O:0.999895
	
I	O	O:0.999922
would	O	O:0.999996
like	O	O:0.999956
to	O	O:0.999999
apply	O	O:0.964240
the	O	O:0.999952
following	O	O:0.995848
function	O	O:0.999948
to	O	O:0.999994
a	O	O:1.000000
pandas	O	O:0.999924
data	O	O:0.999981
frame	O	O:0.999987
.	O	O:0.999943
	
#CODE	O	O:0.998453
	
In	O	O:0.999941
general	O	O:0.998752
,	O	O:0.999983
it's	O	O:0.999748
better	O	O:0.999835
to	O	O:0.999993
avoid	O	O:0.999990
looping	O	O:0.999865
over	O	O:0.999886
your	O	O:0.999942
frame's	O	O:0.999993
rows	O	O:0.999904
,	O	O:0.999998
if	O	O:0.999998
you	O	O:0.999966
can	O	O:0.999975
avoid	O	O:0.999984
it	O	O:0.999982
.	O	O:0.999895
	
If	O	O:0.999929
I	O	O:0.999985
understand	O	O:0.999995
your	O	O:0.999853
problem	O	O:0.999665
correctly	O	O:0.999973
,	O	O:0.999998
you	O	O:0.999993
want	O	O:0.999959
to	O	O:0.999997
look	O	O:0.999998
at	O	O:0.999999
a	O	O:0.999999
single	O	O:0.999833
column	O	O:0.999974
from	O	O:0.999989
your	O	O:0.999950
frame	O	O:0.999979
,	O	O:0.999992
and	O	O:0.999996
apply	O	O:0.851571
a	O	O:0.999569
function	O	O:0.999278
on	O	O:0.999991
each	O	O:0.999950
element	O	O:0.999963
of	O	O:0.999996
that	O	O:0.999915
column	O	O:0.999965
.	O	O:0.999958
	
Then	O	O:0.999668
you	O	O:0.999999
want	O	O:0.999994
to	O	O:0.999997
put	O	O:0.999999
the	O	O:0.999997
result	O	O:0.999962
of	O	O:0.999994
all	O	O:0.999990
those	O	O:0.999915
function	O	O:0.999897
calls	O	O:0.999919
into	O	O:0.999972
a	O	O:0.999992
column	O	O:0.999599
of	O	O:0.999993
the	O	O:0.999988
original	O	O:0.999843
frame	O	O:0.999976
.	O	O:0.999889
	
Maybe	O	O:0.999969
a	O	O:0.999996
new	O	O:0.999863
column	O	O:0.999904
,	O	O:0.999999
maybe	O	O:0.999973
in	O	O:0.999999
place	O	O:0.999965
of	O	O:0.999998
the	O	O:0.999955
old	O	O:0.999957
column	O	O:0.999547
.	O	O:0.999922
	
This	O	O:0.999724
sounds	O	O:0.999959
like	O	O:0.999993
a	O	O:0.999997
job	O	O:0.999650
for	O	O:0.999895
`	O	O:0.999952
pd.Series.map	B-API	B-API:0.996482
`	O	O:0.999973
.	O	O:0.999526
	
#CODE	O	O:0.998453
	
And	O	O:0.999902
now	O	O:0.999921
,	O	O:0.999998
instead	O	O:0.999991
of	O	O:0.999989
`	O	O:0.999969
value_counts()	B-API	B-API:0.999885
`	O	O:0.999990
,	O	O:0.999901
use	O	O:0.999955
`	O	O:0.999774
apply	O	B-API:0.990029
(	O	O:0.999952
f	O	O:0.999687
)`	O	O:0.999436
.	O	O:0.999591
	
Here	O	O:0.998543
is	O	O:0.999984
an	O	O:0.999914
example	O	O:0.998380
:	O	O:0.999942
#CODE	O	O:0.999849
	
Furthermore	O	O:0.999823
,	O	O:0.999993
you	O	O:0.999994
normally	O	O:0.999964
don't	O	O:0.999996
need	O	O:0.999970
to	O	O:0.999994
'	O	O:1.000000
iterate	O	O:0.999927
over	O	O:0.999942
the	O	O:0.999986
df	O	O:0.999453
'	O	O:0.999990
as	O	O:0.999995
you	O	O:0.999966
do	O	O:0.999983
here	O	O:0.999721
.	O	O:0.999838
	
To	O	O:0.999976
apply	O	O:0.890037
a	O	O:0.999853
function	O	O:0.999125
to	O	O:0.999993
all	O	O:0.999999
groups	O	O:0.999787
,	O	O:0.999996
you	O	O:0.999993
can	O	O:0.999981
do	O	O:1.000000
that	O	O:0.999998
directly	O	O:0.999956
on	O	O:0.999993
the	O	O:0.999989
groupby	B-API	B-API:0.979326
result	O	O:0.999845
,	O	O:0.999983
eg	O	O:0.999988
`	O	O:0.999981
df.groupby()	B-API	B-API:0.999212
.apply	B-API	B-API:0.993256
(	O	O:0.999943
..	O	O:0.999958
)`	O	O:0.999752
or	O	O:0.999984
`	O	O:0.999990
df.groupby()	B-API	B-API:0.999091
.aggregate	B-API	B-API:0.992565
(	O	O:0.999951
..	O	O:0.999849
)`	O	O:0.998779
.	O	O:0.999795
	
Can	O	O:0.999666
you	O	O:0.999989
give	O	O:0.999971
a	O	O:0.999999
more	O	O:0.999608
specific	O	O:0.999974
example	O	O:0.999865
of	O	O:0.999978
what	O	O:0.999951
kind	O	O:0.999985
of	O	O:0.999973
function	O	O:0.999862
you	O	O:0.999996
want	O	O:0.999988
to	O	O:0.999997
apply	O	O:0.984321
to	O	O:0.999984
the	O	O:0.999996
ratios	O	O:0.998220
?	O	O:0.999941
	
`	O	O:0.999984
data	O	O:0.999250
[	O	O:0.999987
'	O	O:0.999973
ID	O	O:0.999840
']`	O	O:0.999904
will	O	O:0.999834
give	O	O:0.999911
you	O	O:0.999991
the	O	O:0.999995
`	O	O:0.999979
ID	O	O:0.996817
`	O	O:0.999998
column	O	O:0.999557
,	O	O:0.999999
so	O	O:0.999987
you	O	O:0.999970
cannot	O	O:0.999960
use	O	O:0.999997
it	O	O:0.999985
as	O	O:0.999996
a	O	O:0.999959
key	O	O:0.999308
.	O	O:0.999831
	
You	O	O:0.999946
want	O	O:0.999941
one	O	O:0.999990
specific	O	O:0.999992
value	O	O:0.999966
of	O	O:0.999992
that	O	O:0.999915
column	O	O:0.999965
.	O	O:0.999958
	
To	O	O:0.999971
apply	O	O:0.874002
a	O	O:0.999884
function	O	O:0.999263
on	O	O:0.999997
each	O	O:0.999947
row	O	O:0.999993
of	O	O:0.999996
a	O	O:0.999994
dataframe	B-API	O:0.998246
,	O	O:0.999997
you	O	O:0.999990
can	O	O:0.999973
use	O	O:0.999998
`	O	O:0.999984
apply	O	B-API:0.996233
`	O	O:0.999529
:	O	O:0.999171
#CODE	O	O:0.999898
	
You	O	O:0.999887
can	O	O:0.999980
apply	O	O:0.969623
an	O	O:0.999916
`	O	O:0.999942
expanding_mean	B-API	B-API:0.999788
`	O	O:0.999933
(	O	O:0.999914
see	O	O:0.999991
docs	O	O:0.999888
)	O	O:0.999994
to	O	O:0.999991
each	O	O:0.999973
group	O	O:0.989209
:	O	O:0.999978
#CODE	O	O:0.999795
	
I	O	O:0.999965
tried	O	O:0.999960
using	O	O:0.998865
"	O	O:0.999711
apply	O	B-API:0.989371
"	O	O:0.999616
but	O	O:0.999356
I	O	O:0.999982
can't	O	O:0.999966
figure	O	O:0.999470
out	O	O:0.999977
how	O	O:0.999968
to	O	O:0.999995
return	O	O:0.999997
a	O	O:0.999996
correct	O	O:0.999924
data	O	O:0.999988
frame	O	O:0.999992
.	O	O:0.999943
	
For	O	O:0.999756
example	O	O:0.999143
#CODE	O	O:0.999631
	
Apply	O	O:0.999876
that	O	O:0.999477
function	O	O:0.999979
to	O	O:0.999999
the	O	O:1.000000
rows	O	O:0.992733
:	O	O:0.999968
#CODE	O	O:0.999970
	
The	O	O:0.999933
problem	O	O:0.997697
is	O	O:0.999995
that	O	O:0.999826
you	O	O:0.999992
are	O	O:0.999999
concatenating	O	O:0.999796
a	O	O:0.999986
pandas	O	O:0.999576
Series	O	O:0.999624
`	O	O:0.999949
Fx	O	O:0.998040
[	O	O:0.999942
'	O	O:0.999964
File	O	O:0.999949
']`	O	O:0.999938
with	O	O:0.999687
the	O	O:0.999971
string	O	O:0.999917
representation	O	O:0.999881
of	O	O:0.999997
a	O	O:0.999992
pandas	O	O:0.999708
Series	O	O:0.999523
`	O	O:0.999930
str	O	O:0.977205
(	O	O:0.999978
Fx	O	O:0.999219
[	O	O:0.999894
'	O	O:0.999966
Date	O	O:0.999701
'])`	O	O:0.999607
,	O	O:0.999989
what	O	O:0.999936
you	O	O:0.999994
need	O	O:0.999993
to	O	O:0.999999
do	O	O:0.999997
is	O	O:0.999994
apply	O	B-API:0.676647
the	O	O:0.999667
`	O	O:0.999817
str	O	O:0.983190
`	O	O:0.999998
cast	O	O:0.972956
function	O	O:0.999990
to	O	O:0.999993
the	O	O:1.000000
elements	O	O:0.999906
of	O	O:0.999965
`	O	O:0.999982
Fx	O	O:0.999113
[	O	O:0.999966
'	O	O:0.999948
Date	O	O:0.999626
']`	O	O:0.999947
like	O	O:0.999747
this	O	O:0.999335
:	O	O:0.999979
#CODE	O	O:0.999846
	
First	O	O:0.999331
,	O	O:0.999968
groupby	B-API	B-API:0.941021
code	O	O:0.998367
and	O	O:0.999949
colour	O	O:0.999710
and	O	O:0.999991
then	O	O:0.999924
apply	O	O:0.906487
a	O	O:0.999984
customized	O	O:0.974573
function	O	O:0.999836
to	O	O:0.999959
format	O	O:0.999974
id	O	O:0.999477
and	O	O:0.999944
amount	O	O:0.998057
:	O	O:0.999688
#CODE	O	O:0.999793
	
Apply	O	O:0.998142
read_csv	B-API	B-API:0.982756
instead	O	O:0.999957
of	O	O:0.999980
read_clipboard	B-API	B-API:0.970442
to	O	O:0.999986
handle	O	O:0.999998
your	O	O:0.999979
actual	O	O:0.999886
data	O	O:0.999793
:	O	O:0.999946
#CODE	O	O:0.999905
	
I	O	O:0.999987
guess	O	O:0.999936
you	O	O:0.999937
are	O	O:0.999996
assuming	O	O:0.999996
that	O	O:0.999972
you	O	O:0.999998
can	O	O:1.000000
select	O	O:0.999980
stuff	O	O:0.999937
within	O	O:0.999792
the	O	O:0.999936
groupby	B-API	B-API:0.996936
object	O	O:0.999099
.	O	O:0.999578
	
As	O	O:0.999969
far	O	O:0.999972
as	O	O:0.999995
I	O	O:0.999986
know	O	O:0.999928
,	O	O:0.999960
you	O	O:0.999853
can't	O	O:0.999774
.	O	O:0.999987
	
But	O	O:0.999962
you	O	O:0.999980
can	O	O:0.999989
do	O	O:1.000000
that	O	O:0.999975
in	O	O:0.999998
the	O	O:0.999998
resulting	O	O:0.999029
object	O	O:0.999886
,	O	O:0.999986
after	O	O:0.999983
you	O	O:0.999949
apply	O	O:0.948005
your	O	O:0.999722
aggregation	O	O:0.982052
function	O	O:0.999927
.	O	O:0.999705
	
I'd	O	O:0.999990
like	O	O:0.999977
to	O	O:0.999997
show	O	O:0.999990
the	O	O:0.999993
scatter	O	O:0.945447
plots	O	O:0.999925
with	O	O:0.999983
data	O	O:0.999989
points	O	O:0.999898
for	O	O:0.999994
one	O	O:0.999997
group	O	O:0.999649
of	O	O:0.999998
data	O	O:0.999682
,	O	O:0.999997
let's	O	O:0.999934
say	O	O:0.999944
,	O	O:0.999992
in	O	O:0.999985
green	O	O:0.997688
and	O	O:0.999997
the	O	O:0.999991
other	O	O:0.999811
group	O	O:0.997944
in	O	O:0.999988
red	O	O:0.999853
in	O	O:0.999981
the	O	O:0.999990
very	O	O:0.999810
same	O	O:0.999861
scatter	O	O:0.773906
matrix	O	O:0.999583
.	O	O:0.999776
	
The	O	O:0.999929
same	O	O:0.999898
should	O	O:0.999979
apply	O	O:0.766733
for	O	O:0.999958
the	O	O:0.999946
density	O	O:0.999612
plots	O	O:0.999566
on	O	O:0.999975
the	O	O:0.999987
diagonal	O	O:0.800862
.	O	O:0.999783
	
How	O	O:0.999889
to	O	O:0.999980
apply	O	O:0.995051
hierarchy	O	O:0.999364
or	O	O:0.999964
multi-index	O	O:0.999901
to	O	O:0.999998
panda	O	O:0.999999
columns	O	O:0.999782
	
You	O	O:0.999854
never	O	O:0.999827
mentioned	O	O:0.999799
you	O	O:0.999885
had	O	O:0.999988
single	O	O:0.999903
unpaired	O	O:0.998681
Series	O	O:0.998464
(	O	O:0.999988
es	O	O:0.999625
)	O	O:0.999994
instead	O	O:0.999980
of	O	O:0.999995
a	O	O:0.999976
DataFrame	B-API	O:0.976900
.	O	O:0.999833
	
You	O	O:0.999960
need	O	O:0.999917
to	O	O:0.999996
provide	O	O:0.999992
an	O	O:0.999977
example	O	O:0.999865
that's	O	O:0.999970
faithful	O	O:0.999873
to	O	O:0.999999
your	O	O:0.999992
context	O	O:0.999777
so	O	O:0.999999
that	O	O:0.999985
our	O	O:0.999992
solutions	O	O:0.999785
apply	O	B-API:0.557591
.	O	O:0.999285
	
Can	O	O:0.999839
you	O	O:0.999951
re-state	O	O:0.999993
your	O	O:0.999905
problem	O	O:0.999721
?	O	O:0.999980
	
Groupby	B-API	B-API:0.509455
`	O	O:0.999865
Group	O	O:0.985112
`	O	O:0.999994
first	O	O:0.997609
and	O	O:0.999999
then	O	O:0.999828
apply	O	O:0.961259
your	O	O:0.999770
customized	O	O:0.969313
function	O	O:0.999564
:	O	O:0.999928
#CODE	O	O:0.999848
	
@USER	O	O:0.998803
Not	O	O:0.999993
sure	O	O:0.999746
I	O	O:0.999988
understand	O	O:0.999989
your	O	O:0.998905
point	O	O:0.998280
.	O	O:0.999937
	
Do	O	O:0.999946
you	O	O:0.999991
mean	O	O:0.999989
that	O	O:0.999996
when	O	O:0.999986
you	O	O:0.999996
use	O	O:0.999997
an	O	O:0.999981
apply	O	O:0.510352
on	O	O:0.999969
a	O	O:0.999944
groupby	B-API	B-API:0.963599
mapping	O	O:0.999563
,	O	O:0.999986
you	O	O:0.999978
can	O	O:0.999988
treat	O	O:0.999988
the	O	O:0.999991
object	O	O:0.999904
received	O	O:0.999923
by	O	O:0.999995
apply	O	O:0.792115
as	O	O:0.999979
a	O	O:0.999992
portion	O	O:0.999641
of	O	O:0.999996
the	O	O:0.999995
original	O	O:0.999833
df	O	O:0.999666
?	O	O:0.999939
	
@USER	O	O:0.999303
,	O	O:0.999966
yes	O	O:0.999468
.	O	O:0.999851
	
Series.apply()	B-API	B-API:0.994843
will	O	O:0.999836
apply	O	O:0.950662
a	O	O:0.999907
function	O	O:0.999016
to	O	O:0.999997
every	O	O:0.999998
element	O	O:0.999935
of	O	O:0.999976
the	O	O:0.999937
Series	O	O:0.999482
.	O	O:0.999815
	
Every	O	O:0.999160
object	O	O:0.999375
is	O	O:0.999997
a	O	O:0.999998
portion	O	O:0.999668
of	O	O:0.999995
the	O	O:0.999979
entire	O	O:0.999647
Series	O	O:0.999471
.	O	O:0.999854
	
Groupby	B-API	O:0.824519
will	O	O:0.999817
apply	O	O:0.915062
a	O	O:0.999905
function	O	O:0.999016
to	O	O:0.999998
every	O	O:0.999999
portion	O	O:0.999953
of	O	O:0.999990
the	O	O:0.999974
DataFrame	B-API	O:0.999230
that	O	O:0.999929
matches	O	O:0.999995
a	O	O:0.999999
value	O	O:0.999428
in	O	O:0.999950
the	O	O:0.999986
grouping	O	O:0.999359
Series	O	O:0.996063
(	O	O:0.999986
es	O	O:0.999476
)	O	O:0.999957
.	O	O:0.999784
	
Together	O	O:0.999729
all	O	O:0.999977
groups	O	O:0.999819
make	O	O:0.999821
the	O	O:0.999991
whole	O	O:0.999521
DataFrame	B-API	O:0.992369
.	O	O:0.999859
	
If	O	O:0.999956
you	O	O:0.999901
wanted	O	O:0.999996
this	O	O:0.999987
as	O	O:1.000000
columns	O	O:0.999972
as	O	O:0.999999
days	O	O:0.999902
of	O	O:0.999996
each	O	O:0.999688
week	O	O:0.999930
,	O	O:0.999997
you	O	O:0.999992
could	O	O:0.999975
do	O	O:0.999999
the	O	O:0.999992
groupby	B-API	B-API:0.988596
within	O	O:0.999548
the	O	O:0.999775
apply	O	B-API:0.972767
:	O	O:0.999533
#CODE	O	O:0.999435
	
You	O	O:0.999930
could	O	O:0.999906
use	O	O:0.999995
a	O	O:0.999964
groupby	B-API	B-API:0.994699
apply	O	B-API:0.825115
for	O	O:0.999410
this	O	O:0.988444
:	O	O:0.999937
#CODE	O	O:0.999807
	
Also	O	O:0.999801
using	O	O:0.999855
python	O	O:0.994531
2.7.5	O	O:0.976045
and	O	O:0.999931
pandas	O	O:0.999116
0.12.0	O	O:0.998378
.	O	O:0.999580
	
Also	O	O:0.999148
worth	O	O:0.999914
mentioning	O	O:0.999782
I	O	O:0.999932
would	O	O:0.999996
like	O	O:0.999940
to	O	O:0.999998
apply	O	O:0.993751
this	O	O:0.999890
to	O	O:0.999997
datasets	O	O:1.000000
of	O	O:0.999990
up	O	O:0.999983
to	O	O:0.999991
1	O	O:0.999999
million	O	O:0.999934
rows	O	O:0.999159
.	O	O:0.999894
	
Forgot	O	O:0.999506
to	O	O:0.999954
mention	O	O:0.999994
this	O	O:0.999803
!	O	O:0.999946
	
@USER	O	O:0.992204
:	O	O:0.999940
Using	O	O:0.999770
`	O	O:0.999982
apply	O	B-API:0.968247
`	O	O:0.999982
to	O	O:0.999785
do	O	O:1.000000
this	O	O:0.999976
with	O	O:0.999991
a	O	O:0.999987
`	O	O:0.999974
lambda	O	O:0.995460
`	O	O:0.999992
expression	O	O:0.995010
is	O	O:0.999999
a	O	O:0.999991
worse	O	O:0.999060
solution	O	O:0.999958
than	O	O:0.999939
using	O	O:0.999930
the	O	O:0.999929
builtin	O	O:0.979073
`	O	O:0.999949
idxmin	B-API	B-API:0.993323
`	O	O:0.999999
directly	O	O:0.998766
on	O	O:0.999980
the	O	O:0.999992
transposed	O	O:0.999934
data	O	O:0.999784
.	O	O:0.999931
	
For	O	O:0.999948
one	O	O:0.999967
,	O	O:0.999987
`	O	O:0.999986
idxmin	B-API	B-API:0.993088
`	O	O:0.999994
automatically	O	O:0.999342
skips	O	O:0.999603
NaN	O	O:0.988517
.	O	O:0.999691
	
For	O	O:0.999930
two	O	O:0.999929
,	O	O:0.999987
`	O	O:0.999973
idxmin	B-API	B-API:0.998065
`	O	O:0.999967
is	O	O:0.999871
already	O	O:0.999939
optimized	O	O:0.999836
to	O	O:0.999916
function	O	O:0.999999
as	O	O:0.999995
an	O	O:0.999992
array	O	O:0.999966
operation	O	O:0.999754
,	O	O:0.999986
whereas	O	O:0.999993
your	O	O:0.999220
`	O	O:0.999995
lambda	O	O:0.996541
`	O	O:0.999976
incurs	O	O:0.997676
the	O	O:0.999998
cost	O	O:0.999022
of	O	O:0.999999
a	O	O:0.999942
function	O	O:0.999973
call	O	O:0.999004
across	O	O:0.999987
the	O	O:0.999960
rows	O	O:0.998723
,	O	O:0.999987
needlessly	O	O:0.999866
.	O	O:0.999885
	
For	O	O:0.999947
three	O	O:0.999758
,	O	O:0.999997
relying	O	O:0.999635
on	O	O:0.999958
the	O	O:0.999980
Pandas	O	O:0.999714
API	O	O:0.999919
preserves	O	O:0.998973
the	O	O:0.999979
modularity	O	O:0.999404
and	O	O:0.999997
readability	O	O:0.999965
of	O	O:0.999963
the	O	O:0.999949
code	O	O:0.999451
.	O	O:0.999904
	
Reading	O	O:0.999530
that	O	O:0.998789
`	O	O:0.999997
lambda	O	O:0.997272
`	O	O:0.999968
is	O	O:0.999835
needless	O	O:0.999931
extra	O	O:0.999859
work	O	O:0.999735
for	O	O:0.999991
anyone	O	O:0.999885
using	O	O:0.999969
your	O	O:0.998450
code	O	O:0.994369
.	O	O:0.999949
	
For	O	O:0.999955
four	O	O:0.999456
,	O	O:0.999964
`	O	O:0.999978
idxmin	B-API	B-API:0.998168
`	O	O:0.999951
is	O	O:0.999772
already	O	O:0.999651
tested	O	O:0.998833
and	O	O:0.999978
documented	O	O:0.999630
,	O	O:0.999949
whereas	O	O:0.999879
the	O	O:0.999816
`	O	O:0.999986
lambda	O	O:0.986434
`	O	O:0.999964
isn't	O	O:0.997703
.	O	O:0.999945
	
python	O	O:0.998258
pandas	O	O:0.998986
:	O	O:0.999995
apply	O	O:0.912011
a	O	O:0.999905
function	O	O:0.999362
with	O	O:0.999943
arguments	O	O:0.999883
to	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999317
.	O	O:0.999916
	
Update	O	O:0.998709
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999940
to	O	O:0.999999
apply	O	O:0.994310
a	O	O:0.999855
function	O	O:0.999322
with	O	O:0.999898
argument	O	O:0.999964
to	O	O:0.999995
a	O	O:1.000000
pandas	O	O:0.998996
series	O	O:0.999950
:	O	O:0.999989
I	O	O:0.999999
have	O	O:0.999978
found	O	O:0.999656
two	O	O:0.999996
different	O	O:0.999962
solution	O	O:0.999877
of	O	O:0.999942
SO	O	O:0.998560
:	O	O:0.999940
	
python	O	O:0.998258
pandas	O	O:0.998986
:	O	O:0.999995
apply	O	O:0.912011
a	O	O:0.999905
function	O	O:0.999362
with	O	O:0.999943
arguments	O	O:0.999906
to	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999266
	
Passing	O	O:0.999582
multiple	O	O:0.999525
arguments	O	O:0.999762
to	O	O:0.999971
apply	O	O:0.652443
(	O	O:0.999929
Python	O	O:0.998435
)	O	O:0.999966
	
if	O	O:0.999920
you're	O	O:0.999912
using	O	O:0.999947
pandas	O	O:0.999290
and	O	O:0.999985
assuming	O	O:0.999983
the	O	O:0.999929
date	O	O:0.997796
are	O	O:0.999976
in	O	O:0.999988
datetime	O	O:0.998824
format	O	O:0.999855
,	O	O:0.999993
you	O	O:0.999973
can	O	O:0.999995
group	O	O:0.999997
by	O	O:0.999997
on	O	O:0.999887
'	O	O:0.999979
code	O	O:0.999588
'	O	O:0.999974
and	O	O:0.999999
then	O	O:0.999939
apply	O	O:0.923722
a	O	O:0.999970
min	O	B-API:0.870030
,	O	O:0.999987
max	O	B-API:0.501602
function	O	O:0.999779
to	O	O:0.999994
that	O	O:0.999992
.	O	O:0.999979
	
@USER	O	O:0.999315
thanks	O	O:0.998043
!	O	O:0.999836
	
So	O	O:0.999897
`	O	O:0.999990
apply	O	B-API:0.989902
`	O	O:0.999949
gets	O	O:0.998339
called	O	O:0.999990
once	O	O:0.999826
for	O	O:0.999986
the	O	O:0.999994
column	O	O:0.999827
or	O	O:0.999999
once	O	O:0.999881
per	O	O:0.999966
element	O	O:0.999607
?	O	O:0.999934
	
`	O	O:0.999749
x.astype	O	B-API:0.624271
(	O	O:0.999993
float	O	O:0.998695
)`	O	O:0.999341
is	O	O:0.999980
the	O	O:0.999991
whole	O	O:0.999961
column	O	O:0.999910
or	O	O:0.999999
just	O	O:0.999946
one	O	O:0.999994
element	O	O:0.999593
?	O	O:0.999975
and	O	O:0.999977
`	O	O:0.999993
x.sum()	O	O:0.793377
`	O	O:0.999957
is	O	O:0.999953
the	O	O:0.999995
group	O	O:0.999047
by	O	O:0.999989
group	O	O:0.998037
sum	O	O:0.999436
?	O	O:0.999945
	
How	O	O:0.999786
do	O	O:0.999985
these	O	O:0.999979
rules	O	O:0.999661
work	O	O:0.999669
?	O	O:0.999983
	
:)	O	O:0.999244
	
I	O	O:0.999977
just	O	O:0.999866
can't	O	O:0.999889
make	O	O:0.999900
it	O	O:0.999994
,	O	O:0.999997
no	O	O:0.999972
matter	O	O:0.999964
what	O	O:0.999937
I	O	O:0.999985
try	O	O:0.999954
(	O	O:0.999867
I	O	O:0.999994
tried	O	O:0.999910
`	O	O:0.999956
apply	O	B-API:0.982366
`	O	O:0.999966
with	O	O:0.991265
`	O	O:0.999989
axis=1	O	O:0.983052
`	O	O:0.999968
and	O	O:0.999970
have	O	O:0.999953
it	O	O:0.999984
return	O	O:0.999763
a	O	O:0.999986
tuple	O	O:0.999068
,	O	O:0.999996
a	O	O:0.999992
list	O	O:0.996081
,	O	O:0.999998
a	O	O:0.999985
Series	O	O:0.993190
object	O	O:0.999938
..	O	O:0.999839
neither	O	O:0.999534
worked	O	O:0.999542
)	O	O:0.999970
.	O	O:0.999577
	
I	O	O:0.999902
saw	O	O:0.999985
that	O	O:0.999827
I	O	O:0.999999
can	O	O:0.999998
create	O	O:0.999899
a	O	O:0.999998
DataFrame	B-API	O:0.994157
and	O	O:0.999993
set	O	O:0.999937
the	O	O:0.999974
dtype	B-API	B-API:0.985526
to	O	O:0.999683
'	O	O:0.999973
object	O	O:0.999738
'	O	O:0.999967
and	O	O:0.999999
then	O	O:0.999938
I	O	O:0.999998
can	O	O:0.999998
put	O	O:0.999962
tuples	O	O:0.999875
in	O	O:0.999997
a	O	O:0.999998
cell	O	O:0.997402
.	O	O:0.999915
	
How	O	O:0.999901
do	O	O:0.999947
I	O	O:0.999994
do	O	O:0.999972
it	O	O:0.999957
with	O	O:0.999910
`	O	O:0.999989
apply	O	B-API:0.970812
`	O	O:0.999918
?	O	O:0.999221
	
@USER	O	O:0.999541
you	O	O:0.999954
could	O	O:0.999980
do	O	O:0.999999
a	O	O:0.999997
groupy	O	O:0.812773
apply	O	O:0.500386
to	O	O:0.999647
return	O	O:0.999911
just	O	O:0.999961
those	O	O:0.999996
rows	O	O:0.999554
...	O	O:0.999570
	
One	O	O:0.999933
way	O	O:0.999970
to	O	O:0.999987
get	O	O:0.999999
the	O	O:0.999999
desired	O	O:0.999815
result	O	O:0.999812
is	O	O:0.999995
to	O	O:0.999981
use	O	O:0.999999
an	O	O:0.999937
apply	O	B-API:0.622192
e.g.	O	O:0.997928
via	O	O:0.999547
the	O	O:0.999973
following	O	O:0.988211
function	O	O:0.998722
:	O	O:0.999953
#CODE	O	O:0.999890
	
Basically	O	O:0.999875
you	O	O:0.999994
just	O	O:0.999990
have	O	O:0.999997
the	O	O:0.999941
function	O	O:0.999977
that	O	O:0.999963
does	O	O:0.999982
`	O	O:0.999998
row	O	O:0.999863
/	O	O:0.999992
row.sum()	O	O:0.943017
`	O	O:0.999956
,	O	O:0.999959
and	O	O:0.999999
you	O	O:0.999949
use	O	O:0.999905
`	O	O:0.999980
apply	O	B-API:0.986282
`	O	O:0.999972
with	O	O:0.992897
`	O	O:0.999990
axis=1	O	O:0.992366
`	O	O:0.999993
to	O	O:0.999934
apply	O	O:0.988573
it	O	O:0.999981
by	O	O:0.999904
row	O	O:0.999869
.	O	O:0.999566
	
Another	O	O:0.999417
option	O	O:0.999454
is	O	O:0.999992
to	O	O:0.999974
use	O	O:0.999998
div	O	O:0.936633
rather	O	O:0.999898
than	O	O:0.999464
apply	O	B-API:0.891319
:	O	O:0.999741
#CODE	O	O:0.999264
	
The	O	O:0.999958
problem	O	O:0.999680
with	O	O:0.999955
the	O	O:0.999994
first	O	O:0.999826
approach	O	O:0.999579
is	O	O:0.999995
that	O	O:0.999824
I	O	O:0.999999
have	O	O:0.999988
no	O	O:0.999981
way	O	O:0.999988
of	O	O:0.999993
accessing	O	O:0.999568
my	O	O:0.999987
categorical	B-API	O:0.550048
data	O	O:0.999550
(	O	O:0.999973
i.e.	O	O:0.999942
the	O	O:0.999971
`	O	O:0.999942
subject	O	O:0.996991
`	O	O:0.999996
,	O	O:0.999864
`	O	O:0.999995
stimuli	O	O:0.849872
`	O	O:0.999986
,	O	O:0.999881
and	O	O:0.999995
`	O	O:0.999991
resp	O	O:0.966082
`	O	O:0.999999
columns	O	O:0.999219
,	O	O:0.999997
amongst	O	O:0.999700
others	O	O:0.999575
I've	O	O:0.999960
left	O	O:0.999811
out	O	O:0.999944
here	O	O:0.999788
)	O	O:0.999995
,	O	O:0.999991
while	O	O:0.999990
the	O	O:0.999983
problem	O	O:0.999836
with	O	O:0.999961
the	O	O:0.999988
second	O	O:0.998167
is	O	O:0.999997
that	O	O:0.999859
I	O	O:1.000000
end	O	O:0.999992
up	O	O:0.999809
with	O	O:0.999979
a	O	O:0.999935
`	O	O:0.999965
DataFrame	B-API	O:0.854361
`	O	O:0.999999
thousands	O	O:0.999922
of	O	O:0.999995
columns	O	O:0.999767
wide	O	O:0.998419
(	O	O:0.999946
and	O	O:0.999996
wider	O	O:0.999791
again	O	O:0.999084
for	O	O:0.999985
each	O	O:0.999053
transformation	O	O:0.999825
I	O	O:0.999986
apply	O	O:0.549036
:	O	O:0.999785
velocity	O	O:0.999829
at	O	O:0.999998
each	O	O:0.999878
step	O	O:0.999904
,	O	O:0.999998
angle	O	O:0.999976
at	O	O:0.999996
each	O	O:0.999896
step	O	O:0.999967
,	O	O:0.999998
etc	O	O:0.999962
)	O	O:0.999987
,	O	O:0.999959
and	O	O:0.999995
no	O	O:0.999974
useful	O	O:0.999570
way	O	O:0.999979
of	O	O:0.999975
accessing	O	O:0.999605
specific	O	O:0.999806
time	O	O:0.999825
serieses	O	O:0.998251
(	O	O:0.999972
i.e.	O	O:0.999829
what	O	O:0.999640
I've	O	O:0.999932
been	O	O:0.999833
currently	O	O:0.999981
calling	O	O:0.999840
as	O	O:0.999949
`	O	O:0.999972
data.rx.mean()	O	O:0.974155
.plot()	B-API	B-API:0.995040
`	O	O:0.999906
.	O	O:0.999454
	
Apply	O	O:0.999906
numpy	O	O:0.999669
functions	O	O:0.999514
to	O	O:0.999964
pandas	O	O:0.999991
DataFrame	B-API	O:0.995516
	
I	O	O:0.999993
have	O	O:0.999980
a	O	O:0.999985
DataFrame	B-API	O:0.997457
where	O	O:0.999967
each	O	O:0.999783
element	O	O:0.999802
is	O	O:0.999995
a	O	O:0.999989
numpy	O	O:0.999081
array	O	O:0.999837
and	O	O:0.999978
I	O	O:0.999979
would	O	O:0.999985
like	O	O:0.999929
to	O	O:0.999999
apply	O	O:0.964323
to	O	O:0.999993
them	O	O:0.999993
numpy	O	O:0.999906
functions	O	O:0.999723
.	O	O:0.999849
	
now	O	O:0.999581
let's	O	O:0.999763
try	O	O:0.999976
to	O	O:0.999993
apply	O	O:0.935869
`	O	O:0.999863
np.dot	B-API	B-API:0.997766
`	O	O:0.999996
along	O	O:0.991307
`	O	O:0.999979
axis=1	O	O:0.968106
`	O	O:0.999962
	
Why	O	O:0.999796
doesn't	O	O:0.999912
my	O	O:0.999992
apply	O	B-API:0.592435
function	O	O:0.999688
return	O	O:0.998772
the	O	O:0.999986
length	O	O:0.999435
of	O	O:0.999957
the	O	O:0.999945
string	O	O:0.999699
?	O	O:0.999874
	
Just	O	O:0.999543
for	O	O:0.999986
the	O	O:0.999994
sake	O	O:0.999611
of	O	O:0.999991
trying	O	O:0.999981
something	O	O:0.999949
,	O	O:0.999988
does	O	O:0.999899
the	O	O:0.999997
same	O	O:0.999980
error	O	O:0.999891
happen	O	O:0.999888
if	O	O:0.999997
you	O	O:0.999991
replace	O	O:0.999877
your	O	O:0.999984
use	O	O:0.999966
of	O	O:0.999961
`	O	O:0.999953
apply	O	B-API:0.945577
`	O	O:0.999961
with	O	O:0.996008
`	O	O:0.999980
map	O	B-API:0.985289
`	O	O:0.999992
since	O	O:0.999575
you're	O	O:0.999988
looking	O	O:0.999975
to	O	O:0.999996
spray	O	O:0.999991
the	O	O:0.999980
operation	O	O:0.999960
onto	O	O:0.999953
a	O	O:0.999999
single	O	O:0.997137
`	O	O:0.999984
Series	O	O:0.984328
`	O	O:0.999974
object	O	O:0.999159
?	O	O:0.999969
	
and	O	O:0.999983
you	O	O:0.999971
can	O	O:0.999991
also	O	O:0.999998
use	O	O:0.999995
`	O	O:0.999776
map	O	B-API:0.995100
`	O	O:0.999996
instead	O	O:0.999920
of	O	O:0.999995
`	O	O:0.999983
apply	O	B-API:0.953676
`	O	O:0.999954
since	O	O:0.998507
you're	O	O:0.999975
operating	O	O:0.999972
along	O	O:0.999956
the	O	O:0.999988
values	O	O:0.999654
of	O	O:0.999997
a	O	O:0.999980
`	O	O:0.999970
Series	O	O:0.985418
`	O	O:0.999980
.	O	O:0.999592
	
Is	O	O:0.999974
the	O	O:0.999965
issue	O	O:0.999980
that	O	O:0.999963
result	O	O:0.999989
of	O	O:0.999989
[	O	O:0.999947
11	O	O:0.999961
]	O	O:0.999849
is	O	O:0.999827
set	O	O:0.999567
not	O	O:0.999989
a	O	O:0.999989
list	O	O:0.940185
(	O	O:0.999997
just	O	O:0.999950
apply	O	O:0.933537
set	O	O:0.997931
to	O	O:0.999980
it	O	O:0.999998
)	O	O:0.999979
.	O	O:0.999884
	
Atm	O	O:0.999936
this	O	O:0.999946
feels	O	O:0.999961
like	O	O:0.999936
the	O	O:0.999957
[	O	O:0.999877
XY	O	O:0.999955
Problem	O	O:0.999197
]	O	O:0.999661
(	O	O:0.999890
#URL	O	O:0.998787
)	O	O:0.999972
...	O	O:0.998912
	
Now	O	O:0.999925
,	O	O:0.999993
I	O	O:0.999988
`	O	O:0.999994
apply	O	B-API:0.993821
`	O	O:0.999981
it	O	O:0.999788
to	O	O:0.999994
the	O	O:0.999998
dataframe	B-API	O:0.968017
:	O	O:0.999962
#CODE	O	O:0.999929
	
The	O	O:0.999969
thing	O	O:0.999907
you	O	O:0.999993
have	O	O:0.999976
to	O	O:0.999997
realize	O	O:0.999995
about	O	O:0.999945
apply	O	B-API:0.786420
is	O	O:0.999852
you	O	O:0.999925
need	O	O:0.999986
to	O	O:0.999999
write	O	O:0.999990
functions	O	O:0.999974
that	O	O:0.999978
operate	O	O:0.999971
on	O	O:0.999994
scalar	O	O:0.999943
values	O	O:0.999576
and	O	O:0.999988
return	O	O:0.999961
the	O	O:0.999775
result	O	O:0.999943
that	O	O:0.999922
you	O	O:0.999997
want	O	O:0.999959
.	O	O:0.999919
	
With	O	O:0.999928
that	O	O:0.999646
in	O	O:0.999988
mind	O	O:0.999094
:	O	O:0.999974
#CODE	O	O:0.999812
	
Just	O	O:0.999911
want	O	O:0.999966
to	O	O:0.999988
clarify	O	O:0.999996
that	O	O:0.999987
when	O	O:0.999978
using	O	O:0.999984
`	O	O:0.999976
apply	O	B-API:0.993064
`	O	O:0.999969
on	O	O:0.999948
a	O	O:0.999998
series	O	O:0.999880
,	O	O:0.999991
you	O	O:0.999987
should	O	O:0.999974
write	O	O:0.999858
function	O	O:0.999994
that	O	O:0.999942
accept	O	O:0.999935
scalar	O	O:0.999930
values	O	O:0.998616
.	O	O:0.999831
	
When	O	O:0.999782
using	O	O:0.999929
`	O	O:0.999937
apply	O	B-API:0.991373
`	O	O:0.999974
on	O	O:0.999801
a	O	O:0.999997
DataFrame	B-API	O:0.995524
,	O	O:0.999994
however	O	O:0.999925
,	O	O:0.999999
the	O	O:0.999985
functions	O	O:0.999647
should	O	O:0.999878
accept	O	O:0.999833
either	O	O:0.999992
full	O	O:0.999773
columns	O	O:0.999511
(	O	O:0.999996
when	O	O:0.999786
`	O	O:0.999996
axis=0	O	O:0.998943
`	O	O:0.999985
--	O	O:0.999959
the	O	O:0.999988
default	O	O:0.999864
)	O	O:0.999976
or	O	O:0.999998
full	O	O:0.999955
rows	O	O:0.999090
(	O	O:0.999994
when	O	O:0.999871
`	O	O:0.999996
axis=1	O	O:0.999410
`)	O	O:0.999968
.	O	O:0.999488
	
OK	O	O:0.999874
-	O	O:0.999980
I	O	O:0.999996
think	O	O:0.999925
I	O	O:0.999980
just	O	O:0.999755
figured	O	O:0.999642
it	O	O:0.999972
out	O	O:0.999961
-	O	O:0.999998
to	O	O:0.999993
use	O	O:0.999998
functions	O	O:0.999702
on	O	O:0.999986
a	O	O:0.999998
dataframe	B-API	O:0.997815
,	O	O:0.999996
you	O	O:0.999997
have	O	O:0.999988
to	O	O:0.999995
use	O	O:0.999978
(	O	O:0.999916
should	O	O:0.999854
use	O	O:0.999977
)	O	O:0.999943
apply	O	B-API:0.901825
.	O	O:0.998745
	
So	O	O:0.999969
,	O	O:0.999997
I	O	O:0.999996
can	O	O:0.999993
chain	O	O:0.999985
together	O	O:0.999979
functions	O	O:0.999953
by	O	O:0.999986
using	O	O:0.999907
apply	O	B-API:0.661198
inside	O	O:0.996422
of	O	O:0.999906
the	O	O:0.999961
main	O	O:0.997453
function	O	O:0.999892
.	O	O:0.999893
	
Is	O	O:0.999986
that	O	O:0.999889
right	O	O:0.999598
(	O	O:0.999996
does	O	O:0.999960
that	O	O:0.999990
make	O	O:0.999994
sense	O	O:0.999950
)	O	O:0.999976
?	O	O:0.999892
	
It's	O	O:0.999421
worth	O	O:0.999747
noting	O	O:0.999883
that	O	O:0.999940
you	O	O:0.999992
can	O	O:0.999990
do	O	O:1.000000
this	O	O:0.999867
(	O	O:0.999992
without	O	O:0.999950
using	O	O:0.999736
apply	O	B-API:0.889843
,	O	O:0.999698
so	O	O:0.999987
more	O	O:0.999912
efficiently	O	O:0.999921
)	O	O:0.999998
using	O	O:0.999637
`	O	O:0.999855
str.contains	B-API	B-API:0.999903
`	O	O:0.999843
:	O	O:0.999719
#CODE	O	O:0.999908
	
I	O	O:0.999990
also	O	O:0.999991
have	O	O:0.999968
some	O	O:0.999810
states	O	O:0.998877
which	O	O:0.999712
are	O	O:0.999986
not	O	O:0.999997
present	O	O:0.999476
in	O	O:0.999981
the	O	O:0.999978
dictionary	O	O:0.999677
.	O	O:0.999804
	
If	O	O:0.999963
I	O	O:0.999996
apply	O	O:0.841932
map()	B-API	B-API:0.999062
,	O	O:0.999946
the	O	O:0.999998
corresponding	O	O:0.999700
values	O	O:0.999426
in	O	O:0.999991
the	O	O:0.999998
new	O	O:0.999801
series	O	O:0.999846
are	O	O:0.999977
missing	O	O:0.999182
.	O	O:0.999651
	
Can	O	O:0.999955
I	O	O:0.999996
somehow	O	O:0.999987
specify	O	O:0.999556
that	O	O:0.999952
I	O	O:0.999999
want	O	O:0.999991
to	O	O:0.999902
apply	O	O:0.988538
identity	O	O:0.999076
function	O	O:0.999621
for	O	O:0.999994
the	O	O:0.999918
values	O	O:0.998319
not	O	O:0.999987
present	O	O:0.999877
in	O	O:0.999989
the	O	O:0.999989
dictionary	O	O:0.999845
,	O	O:0.999988
i.e.	O	O:0.999885
leave	O	O:0.999977
them	O	O:0.999882
as	O	O:0.999940
is	O	O:0.999926
?	O	O:0.999873
	
If	O	O:0.999981
you	O	O:0.999972
can	O	O:0.999998
have	O	O:1.000000
a	O	O:0.999999
NaN	O	O:0.996776
in	O	O:0.999989
the	O	O:0.999981
FK	O	O:0.999979
column	O	O:0.999898
,	O	O:0.999999
then	O	O:0.999965
could	O	O:0.999998
you	O	O:0.999999
replace	O	O:0.999721
the	O	O:0.999995
NaN's	O	O:0.999851
with	O	O:0.999981
some	O	O:0.999974
other	O	O:0.999986
random	O	O:0.999382
number	O	O:0.999671
,	O	O:0.999984
let's	O	O:0.999970
say	O	O:0.999964
if	O	O:0.999996
all	O	O:0.999977
current	O	O:0.999790
FK's	O	O:0.998864
are	O	O:0.999988
positive	O	O:0.999744
integers	O	O:0.999678
,	O	O:0.999999
then	O	O:0.999922
use	O	O:0.999998
a	O	O:0.999983
negative	O	O:0.996553
int	O	O:0.999696
like	O	O:0.999797
-999	O	O:0.999481
to	O	O:0.999979
distinguish	O	O:0.999994
empty	O	O:0.999691
values	O	O:0.998922
.	O	O:0.999776
	
Another	O	O:0.999375
option	O	O:0.999415
is	O	O:0.999991
to	O	O:0.999994
only	O	O:0.999996
include	O	O:0.999979
the	O	O:0.999997
rows	O	O:0.999840
that	O	O:0.999985
have	O	O:0.999999
a	O	O:0.999998
value	O	O:0.999479
:	O	O:0.999980
"	O	O:0.999996
df	O	O:0.999673
[	O	O:0.999983
df	O	O:0.999486
[	O	O:0.999852
'	O	O:0.999988
FK_COL	O	O:0.999290
']	O	O:0.999955
.notnull()	B-API	B-API:0.999080
]"	O	O:0.999531
.	O	O:0.999574
	
Then	O	O:0.999560
apply	O	O:0.856156
the	O	O:0.999974
filling	O	O:0.996255
on	O	O:0.999951
NaN	O	O:0.999489
values	O	O:0.999815
,	O	O:0.999942
and	O	O:0.999997
save	O	O:0.999493
this	O	O:0.999901
dataframe	B-API	O:0.999533
to	O	O:0.999998
a	O	O:1.000000
new	O	O:0.999890
variable	O	O:0.999926
for	O	O:0.999989
loading	O	O:0.999362
into	O	O:0.998245
the	O	O:0.999973
database	O	O:0.999152
.	O	O:0.999786
	
using	O	O:0.999773
apply	O	B-API:0.764018
you	O	O:0.998706
can	O	O:0.999971
make	O	O:0.999997
new	O	O:0.999971
value	O	O:0.999905
and	O	O:0.999976
assign	O	O:0.999368
it	O	O:0.999964
to	O	O:0.999995
new	O	O:0.999997
column	O	O:0.999706
	
E.g.	O	O:0.999503
you	O	O:0.999977
could	O	O:0.999956
use	O	O:0.999995
groupby	B-API	B-API:0.956490
apply	O	B-API:0.665851
with	O	O:0.996809
`	O	O:0.999957
def	O	O:0.999008
f	O	O:0.999375
(	O	O:0.999893
x	O	O:0.999091
):	O	O:0.999920
return	O	O:0.995258
(	O	O:0.999892
1	O	O:0.999900
.	O	O:0.999860
*	O	O:0.999990
x	O	O:0.999866
[	O	O:0.999936
'	O	O:0.999985
weight	O	O:0.999886
']	O	O:0.999847
*	O	O:0.999964
x	O	O:0.999647
[	O	O:0.999943
'	O	O:0.999996
jobs	O	O:0.999736
'])	O	O:0.999907
.sum()	B-API	B-API:0.998552
/	O	O:0.999871
x	O	O:0.999498
[	O	O:0.999944
'	O	O:0.999997
jobs	O	O:0.999703
']	O	O:0.999947
.sum()	B-API	B-API:0.999630
`	O	O:0.999762
but	O	O:0.999826
it	O	O:0.999993
will	O	O:0.999954
probably	O	O:0.999968
be	O	O:0.999999
less	O	O:0.999745
efficient	O	O:0.999744
than	O	O:0.999923
the	O	O:0.999984
above	O	O:0.999485
.	O	O:0.999836
	
You	O	O:0.999902
could	O	O:0.999872
do	O	O:0.999999
this	O	O:0.999992
as	O	O:0.999998
a	O	O:0.999990
one	O	O:0.999961
line	O	O:0.999790
apply	O	B-API:0.758644
(	O	O:0.999933
the	O	O:0.999976
first	O	O:0.999755
column	O	O:0.999963
being	O	O:0.999928
negative	O	O:0.999623
,	O	O:0.999978
the	O	O:0.999979
second	O	O:0.999284
positive	O	O:0.993334
):	O	O:0.999929
#CODE	O	O:0.999664
	
then	O	O:0.999402
use	O	O:0.999996
apply	O	B-API:0.500819
to	O	O:0.999862
get	O	O:0.999999
your	O	O:0.999762
"	O	O:0.999981
Type	O	O:0.999044
"	O	O:0.999943
#CODE	O	O:0.998005
	
original	O	O:0.996530
Apply	O	O:0.997086
:	O	O:0.999867
#CODE	O	O:0.999656
	
revised	O	O:0.995962
Apply	O	O:0.996557
:	O	O:0.999878
#CODE	O	O:0.999645
	
This	O	O:0.999802
will	O	O:0.999963
be	O	O:0.999995
faster	O	O:0.999934
than	O	O:0.999781
the	O	O:0.999974
apply	O	B-API:0.748123
soln	O	O:0.893540
(	O	O:0.999859
and	O	O:0.999995
the	O	O:0.999985
looping	O	O:0.998358
soln	O	O:0.995556
)	O	O:0.999928
	
Apply	O	O:0.998094
#CODE	O	O:0.998690
	
An	O	O:0.999906
easier	O	O:0.999829
way	O	O:0.999985
to	O	O:0.999988
describe	O	O:0.999999
your	O	O:0.999505
function	O	O:0.999827
is	O	O:0.999996
as	O	O:0.999977
x	O	O:0.999580
->	O	O:0.999945
1	O	O:0.999810
-	O	O:0.999984
x	O	O:0.999673
,	O	O:0.999998
this	O	O:0.999971
will	O	O:0.999931
be	O	O:0.999999
more	O	O:0.999942
efficient	O	O:0.999880
that	O	O:0.999930
apply	O	O:0.847193
/	O	O:0.999621
map	O	B-API:0.985712
.	O	O:0.999694
	
#CODE	O	O:0.998453
	
I	O	O:0.999955
am	O	O:0.999997
looking	O	O:0.999437
to	O	O:0.999960
'	O	O:0.999998
smooth	O	O:0.998695
'	O	O:0.999985
regularly-sampled	O	O:0.999756
30-sec	O	O:0.999711
time	O	O:0.999990
series	O	O:0.999996
data	O	O:0.999990
using	O	O:0.999974
the	O	O:0.999973
pandas	O	O:0.998947
`	O	O:0.999952
rolling_window	B-API	B-API:0.999033
`	O	O:0.999967
function	O	O:0.999664
,	O	O:0.999998
with	O	O:0.999985
a	O	O:0.999178
window	O	O:0.999901
type	O	O:0.999760
other	O	O:0.999985
than	O	O:0.999559
`	O	O:0.999991
boxcar	O	O:0.988007
`	O	O:0.999995
-	O	O:0.999974
ideally	O	O:0.999912
`	O	O:0.999992
hamming	O	O:0.970317
`	O	O:0.999966
.	O	O:0.999207
	
However	O	O:0.999827
,	O	O:0.999996
so	O	O:0.999991
far	O	O:0.999946
all	O	O:0.999985
windows	O	O:0.999664
which	O	O:0.999872
I	O	O:0.999996
have	O	O:0.999983
tried	O	O:0.999737
to	O	O:0.999995
apply	O	O:0.950239
,	O	O:0.999977
over	O	O:0.999513
varying	O	O:0.995422
window	O	O:0.999923
lengths	O	O:0.999859
from	O	O:0.999859
2	O	O:0.999964
to	O	O:0.999984
100	O	O:0.999994
,	O	O:0.999996
appear	O	O:0.999925
to	O	O:0.999979
offset	O	O:0.999994
the	O	O:0.999996
smoothed	O	O:0.999963
data	O	O:0.999961
to	O	O:0.999998
lower	O	O:0.999996
values	O	O:0.999340
,	O	O:0.999958
e.g.	O	O:0.999478
:	O	O:0.999911
	
To	O	O:0.999952
verify	O	O:0.999835
correctness	O	O:0.999901
apply	O	O:0.525051
the	O	O:0.999802
rolling	O	B-API:0.710301
window	O	O:0.999713
on	O	O:0.999997
a	O	O:0.999999
step	O	O:0.998930
function	O	O:0.999906
.	O	O:0.999931
	
If	O	O:0.999934
there	O	O:0.999934
were	O	O:0.999903
an	O	O:0.999979
offset	O	O:0.999832
,	O	O:0.999987
it	O	O:0.999992
would	O	O:0.999993
show	O	O:0.999881
up	O	O:0.999965
	
However	O	O:0.999926
their	O	O:0.999066
IS	O	O:0.999992
a	O	O:0.999972
way	O	O:0.999838
to	O	O:0.999970
do	O	O:0.999999
this	O	O:0.999875
.	O	O:0.999921
	
Here	O	O:0.997193
is	O	O:0.999984
the	O	O:0.999916
sketch	O	O:0.995461
.	O	O:0.999860
	
Use	O	O:0.999694
`	O	O:0.999984
select_as_coordinates	O	O:0.945709
`	O	O:0.999997
to	O	O:0.999988
actually	O	O:0.999998
execute	O	O:0.999958
your	O	O:0.999960
query	O	O:0.997494
;	O	O:0.999999
this	O	O:0.999901
returns	O	O:0.999960
an	O	O:0.999878
`	O	O:0.999983
Int64Index	O	O:0.998209
`	O	O:0.999997
of	O	O:0.999980
the	O	O:0.999992
row	O	O:0.999922
number	O	O:0.998364
(	O	O:0.999992
the	O	O:0.999999
coordinates	O	O:0.997417
)	O	O:0.999976
.	O	O:0.999898
	
Then	O	O:0.999783
apply	O	O:0.889473
an	O	O:0.999956
iterator	O	O:0.999686
to	O	O:0.999995
that	O	O:0.999999
where	O	O:0.999997
you	O	O:0.999994
select	O	O:0.999948
based	O	O:0.999911
on	O	O:0.999998
those	O	O:0.999991
rows	O	O:0.999644
.	O	O:0.999891
	
This	O	O:0.998862
is	O	O:0.999990
the	O	O:0.999751
function	O	O:0.999833
you'll	O	O:0.999874
apply	O	O:0.812828
to	O	O:0.999996
each	O	O:0.999974
of	O	O:0.999996
the	O	O:0.999993
lists	O	O:0.999672
in	O	O:0.999936
`	O	O:0.999996
groups	O	O:0.990633
`	O	O:0.999983
.	O	O:0.999618
	
Just	O	O:0.999872
like	O	O:0.999897
before	O	O:0.999960
we	O	O:0.999998
hand	O	O:0.999953
of	O	O:0.999999
the	O	O:0.999990
pair	O	O:0.999908
to	O	O:0.999970
`	O	O:0.999999
SequenceMatcher	O	O:0.759992
`	O	O:0.999997
to	O	O:0.999950
get	O	O:0.999999
the	O	O:0.999984
ratio	O	O:0.999558
.	O	O:0.999889
	
Only	O	O:0.999872
now	O	O:0.999954
we	O	O:0.999999
need	O	O:0.999988
to	O	O:0.999999
keep	O	O:0.999980
the	O	O:0.999989
name	O	O:0.999662
around	O	O:0.999566
.	O	O:0.999878
	
So	O	O:0.999891
in	O	O:0.999996
that	O	O:0.999748
function	O	O:0.999972
`	O	O:0.999994
x	O	O:0.998401
`	O	O:0.999984
is	O	O:0.999981
a	O	O:0.999995
tuple	O	O:0.999708
like	O	O:0.999333
`	O	O:0.999913
(	O	O:0.999794
'	O	O:0.999996
maria	O	O:0.998903
'	O	O:0.999970
,	O	O:0.999933
'	O	O:0.999989
mary	O	O:0.996375
')`	O	O:0.999883
.	O	O:0.999709
	
We	O	O:0.999991
need	O	O:0.999943
to	O	O:0.999998
know	O	O:0.999997
the	O	O:0.999997
name	O	O:0.999745
in	O	O:0.999978
the	O	O:0.999996
best	O	O:0.999742
match	O	O:0.999242
and	O	O:0.999997
the	O	O:0.999997
ratio	O	O:0.999521
of	O	O:0.999980
the	O	O:0.999979
best	O	O:0.999909
match	O	O:0.999818
,	O	O:0.999998
so	O	O:0.999989
I	O	O:0.999984
threw	O	O:0.999999
them	O	O:0.999542
in	O	O:0.999997
a	O	O:0.999996
dict	O	O:0.999719
with	O	O:0.999762
`	O	O:0.999972
{name	O	O:0.997863
:	O	O:0.999994
ratio}	O	O:0.998465
`	O	O:0.999974
.	O	O:0.999631
	
The	O	O:0.999934
other	O	O:0.999919
thing	O	O:0.999952
here	O	O:0.996685
is	O	O:0.999996
that	O	O:0.999666
`	O	O:0.999996
max	O	B-API:0.888124
`	O	O:0.999989
takes	O	O:0.999652
a	O	O:0.999995
second	O	O:0.995087
argument	O	O:0.999747
.	O	O:0.999703
	
This	O	O:0.999796
time	O	O:0.999920
it's	O	O:0.999930
just	O	O:0.999877
saying	O	O:0.999963
the	O	O:0.999982
thing	O	O:0.999804
to	O	O:0.999989
maximize	O	O:0.999827
is	O	O:0.999961
`	O	O:0.999972
x	O	O:0.999687
[	O	O:0.999992
1	O	O:0.999963
]`	O	O:0.999854
,	O	O:0.999987
the	O	O:0.999976
ratio	O	O:0.998916
.	O	O:0.999875
	
You	O	O:0.999857
don't	O	O:0.999967
need	O	O:0.999965
to	O	O:0.999998
if	O	O:1.000000
you	O	O:0.999994
simply	O	O:0.999997
pass	O	O:0.999959
a	O	O:0.999930
``	O	O:0.999872
min_itemsize=40	O	O:0.882493
``	O	O:0.999708
(	O	O:0.999910
or	O	O:0.999997
whatever	O	O:0.999933
number	O	O:0.999613
is	O	O:0.999913
'	O	O:0.999984
big	O	O:0.999936
enough	O	O:0.999070
')	O	O:0.999790
,	O	O:0.999985
this	O	O:0.999948
will	O	O:0.999965
apply	O	O:0.894439
to	O	O:0.999961
all	O	O:0.999986
object	O	O:0.999980
columns	O	O:0.999914
,	O	O:0.999999
alternatively	O	O:0.999972
,	O	O:0.999996
you	O	O:0.999981
can	O	O:0.999932
use	O	O:0.999994
:	O	O:0.999896
``	O	O:0.999926
df.dtypes	B-API	B-API:0.995991
``	O	O:0.999952
to	O	O:0.999955
see	O	O:0.999997
which	O	O:0.999921
are	O	O:0.999950
object	O	O:0.999508
(	O	O:0.999995
the	O	O:0.999994
values	O	O:0.999116
are	O	O:0.999987
the	O	O:0.999998
dtype	B-API	B-API:0.989939
)	O	O:0.999892
	
Why	O	O:0.999882
do	O	O:0.999939
pyplot	B-API	O:0.958394
methods	O	O:0.999801
apply	O	B-API:0.506421
instantly	O	O:0.996938
and	O	O:0.999917
subplot	O	O:0.950229
axes	O	O:0.873968
methods	O	O:0.999469
do	O	O:0.999897
not	O	O:0.999959
?	O	O:0.999965
	
I'm	O	O:0.999899
editing	O	O:0.999831
my	O	O:0.999974
graphs	O	O:0.999926
step	O	O:0.999982
by	O	O:0.999992
step	O	O:0.999893
.	O	O:0.999848
	
Doing	O	O:0.999778
so	O	O:0.999969
,	O	O:0.999992
`	O	O:0.999993
plt	O	O:0.986573
`	O	O:0.999998
functions	O	O:0.999847
from	O	O:0.999500
`	O	O:0.999981
matplotlib.pyplot	B-API	B-API:0.738398
`	O	O:0.999995
apply	O	B-API:0.737838
instantly	O	O:0.999551
to	O	O:0.999928
my	O	O:0.999998
graphical	O	O:0.999432
output	O	O:0.999908
of	O	O:0.999970
pylab	O	O:0.996674
.	O	O:0.999915
	
That's	O	O:0.999452
great	O	O:0.998323
.	O	O:0.999867
	
Apply	O	O:0.998122
function	O	O:0.999888
to	O	O:0.999996
a	O	O:1.000000
specific	O	O:0.999868
number	O	O:0.999989
of	O	O:0.999999
rows	O	O:0.999849
in	O	O:0.999995
a	O	O:0.999996
DataFrame	B-API	O:0.972485
	
I	O	O:0.999992
have	O	O:0.999993
a	O	O:0.999992
weather	O	O:0.999840
data	O	O:0.999847
and	O	O:0.999993
I	O	O:0.999991
would	O	O:0.999978
need	O	O:0.999939
to	O	O:0.999999
apply	O	O:0.996688
a	O	O:0.999873
function	O	O:0.999537
to	O	O:0.999998
a	O	O:1.000000
specific	O	O:0.999830
number	O	O:0.999986
of	O	O:0.999995
rows	O	O:0.999377
.	O	O:0.999947
	
For	O	O:0.999919
example	O	O:0.999767
,	O	O:0.999998
to	O	O:0.999994
calculate	O	O:0.999993
mean	O	O:0.999995
values	O	O:0.999965
of	O	O:0.999998
every	O	O:0.999912
10	O	O:0.999964
or	O	O:0.999987
15	O	O:0.999979
rows	O	O:0.999277
.	O	O:0.999865
	
The	O	O:0.999973
number	O	O:0.999968
of	O	O:0.999998
rows	O	O:0.998986
is	O	O:0.999990
important	O	O:0.999687
because	O	O:0.999958
there	O	O:0.999857
are	O	O:0.999993
quite	O	O:0.999959
many	O	O:0.999964
missing	O	O:0.999651
values	O	O:0.999799
in	O	O:0.999967
dates	O	O:0.999132
and	O	O:0.999990
I	O	O:0.999991
don't	O	O:0.999952
want	O	O:0.999693
to	O	O:0.999994
rely	O	O:0.999987
on	O	O:0.999973
it	O	O:0.999953
.	O	O:0.999977
	
I	O	O:0.999957
tried	O	O:0.999726
`	O	O:0.999844
groupby	B-API	B-API:0.999888
`	O	O:0.999956
but	O	O:0.999888
there	O	O:0.999987
I	O	O:0.999993
can	O	O:0.999998
only	O	O:0.999996
specify	O	O:0.999976
hours	O	O:0.999913
or	O	O:0.999986
minutes	O	O:0.999270
.	O	O:0.999929
	
Anyway	O	O:0.999807
I	O	O:0.999976
would	O	O:0.999997
like	O	O:0.999940
to	O	O:0.999999
apply	O	O:0.984006
any	O	O:0.999009
function	O	O:0.999826
independent	O	O:0.999783
from	O	O:0.999784
`	O	O:0.999902
DateTime	O	O:0.997673
index	O	O:0.999670
`	O	O:0.999935
.	O	O:0.999743
	
I	O	O:0.999979
think	O	O:0.999888
slicing	O	O:0.997013
`	O	O:0.999943
DF	O	O:0.999894
`	O	O:0.999988
would	O	O:0.999933
be	O	O:0.999999
an	O	O:0.999996
option	O	O:0.999773
`	O	O:0.999992
df	O	O:0.996530
[:	O	O:0.999982
9	O	O:0.999190
]`	O	O:0.999906
but	O	O:0.999908
I	O	O:0.999989
don't	O	O:0.999978
know	O	O:0.999484
how	O	O:0.999990
to	O	O:0.999981
apply	O	O:0.997316
this	O	O:0.999815
to	O	O:0.999998
all	O	O:1.000000
rows	O	O:0.999515
?	O	O:0.999948
	
Also	O	O:0.999912
what	O	O:0.999655
is	O	O:0.999996
the	O	O:0.999918
function	O	O:0.999896
you	O	O:0.999986
want	O	O:0.999986
to	O	O:0.999994
apply	O	O:0.961880
?	O	O:0.999794
	
Does	O	O:0.998579
`	O	O:0.999945
df.resample	B-API	B-API:0.997968
(	O	O:0.999940
'	O	O:0.999955
10min	O	O:0.992276
'	O	O:0.999959
,	O	O:0.999983
how=	O	O:0.999876
)`	O	O:0.999887
work	O	O:0.999185
?	O	O:0.999986
	
4	O	O:0.999547
:	O	O:0.999986
I	O	O:0.999996
apply	O	O:0.917081
the	O	O:0.999665
transaction	O	O:0.999641
level	O	O:0.999933
criteria	O	O:0.999849
to	O	O:0.999995
the	O	O:0.999999
datafarme	O	O:0.998964
	
I	O	O:0.999990
want	O	O:0.999981
to	O	O:0.999937
apply	O	O:0.975757
the	O	O:0.999917
expanding	O	O:0.999302
mean	O	O:0.999845
,	O	O:0.999998
such	O	O:0.999989
that	O	O:0.999865
`	O	O:0.999995
ptsA	O	O:0.988793
`	O	O:0.999984
and	O	O:0.999592
`	O	O:0.999997
ptsB	O	O:0.958435
`	O	O:0.999993
for	O	O:0.999970
each	O	O:0.999761
player	O	O:0.999771
get	O	O:0.999940
counted	O	O:0.999316
in	O	O:0.999826
(	O	O:0.999925
and	O	O:0.999971
are	O	O:0.999969
not	O	O:0.999983
left	O	O:0.999794
)	O	O:0.999983
to	O	O:0.999964
the	O	O:0.999999
net	O	O:0.999887
result	O	O:0.999808
.	O	O:0.999962
	
Final	O	O:0.996570
output	O	O:0.999413
should	O	O:0.999919
make	O	O:0.999836
it	O	O:0.999999
more	O	O:0.999741
clear	O	O:0.997810
:	O	O:0.999964
#CODE	O	O:0.999686
	
Python	O	O:0.999369
pandas	O	O:0.999343
groupby	B-API	B-API:0.952035
object	O	O:0.997600
apply	O	B-API:0.724114
method	O	O:0.999883
duplicates	O	O:0.999114
first	O	O:0.999915
group	O	O:0.998118
	
I	O	O:0.999956
am	O	O:0.999996
confused	O	O:0.999031
about	O	O:0.999992
this	O	O:0.999914
behavior	O	O:0.999926
of	O	O:0.999822
apply	O	B-API:0.880964
method	O	O:0.999883
of	O	O:0.999927
groupby	B-API	B-API:0.995698
in	O	O:0.999974
pandas	O	O:0.988733
(	O	O:0.999995
0.12.0-4	O	O:0.996254
)	O	O:0.999971
,	O	O:0.999977
it	O	O:0.999990
appears	O	O:0.999973
to	O	O:0.999993
apply	O	O:0.952366
the	O	O:0.999546
function	O	O:0.999882
TWICE	O	O:0.999680
to	O	O:0.999995
the	O	O:1.000000
first	O	O:0.999933
row	O	O:0.999985
of	O	O:0.999999
a	O	O:0.999998
data	O	O:0.999936
frame	O	O:0.999988
.	O	O:0.999937
	
For	O	O:0.999691
example	O	O:0.996811
:	O	O:0.999957
#CODE	O	O:0.999872
	
Then	O	O:0.999481
I	O	O:0.999998
try	O	O:0.999996
to	O	O:0.999965
do	O	O:1.000000
something	O	O:0.999966
similar	O	O:0.999954
using	O	O:0.999988
apply	O	B-API:0.870966
on	O	O:0.999273
the	O	O:0.999664
groupby	B-API	B-API:0.995286
object	O	O:0.999646
and	O	O:0.999989
I	O	O:0.999997
get	O	O:0.999948
the	O	O:0.999990
first	O	O:0.999805
row	O	O:0.999959
output	O	O:0.999794
twice	O	O:0.999659
:	O	O:0.999965
#CODE	O	O:0.999815
	
Edit	O	O:0.997008
:	O	O:0.999958
@USER	O	O:0.999823
provides	O	O:0.999872
the	O	O:0.999973
answer	O	O:0.999688
below	O	O:0.998591
.	O	O:0.999871
	
I	O	O:0.999939
am	O	O:0.999993
dense	O	O:0.993086
and	O	O:0.999826
did	O	O:0.999562
not	O	O:0.999817
understand	O	O:0.999925
it	O	O:0.999974
immediately	O	O:0.999744
,	O	O:0.999996
so	O	O:0.999986
here	O	O:0.999119
is	O	O:0.999998
a	O	O:0.999993
simple	O	O:0.999610
example	O	O:0.999915
to	O	O:0.999993
show	O	O:0.999997
that	O	O:0.999944
despite	O	O:0.999988
the	O	O:0.999983
double	O	O:0.997402
printout	O	O:0.999953
of	O	O:0.999992
the	O	O:0.999994
first	O	O:0.999978
group	O	O:0.997628
in	O	O:0.999986
the	O	O:0.999995
example	O	O:0.999908
above	O	O:0.999824
,	O	O:0.999998
the	O	O:0.999858
apply	O	B-API:0.882548
method	O	O:0.999800
operates	O	O:0.999895
only	O	O:0.999998
once	O	O:0.999941
on	O	O:0.999996
the	O	O:0.999995
first	O	O:0.999875
group	O	O:0.993423
and	O	O:0.999985
does	O	O:0.999835
not	O	O:0.999965
mutate	O	O:0.999876
the	O	O:0.999997
original	O	O:0.999921
data	O	O:0.999937
frame	O	O:0.999951
:	O	O:0.999986
#CODE	O	O:0.999862
	
This	O	O:0.998773
is	O	O:0.999995
checking	O	O:0.999457
whether	O	O:0.999831
you	O	O:0.999916
are	O	O:0.999994
mutating	O	O:0.999979
the	O	O:0.999994
data	O	O:0.999847
in	O	O:0.999994
the	O	O:0.999988
apply	O	B-API:0.813283
.	O	O:0.998831
	
If	O	O:0.999939
you	O	O:0.999960
are	O	O:0.999999
then	O	O:0.999909
it	O	O:0.999999
has	O	O:0.999994
to	O	O:0.999999
take	O	O:0.999999
a	O	O:0.999996
slower	O	O:0.998804
path	O	O:0.999967
than	O	O:0.999856
otherwise	O	O:0.999942
.	O	O:0.999962
	
It	O	O:0.999951
doesn't	O	O:0.999894
change	O	O:0.999914
the	O	O:0.999969
results	O	O:0.998919
.	O	O:0.999874
	
@USER	O	O:0.995498
:	O	O:0.999918
Could	O	O:0.999988
the	O	O:0.999998
result	O	O:0.999966
of	O	O:0.999994
the	O	O:0.999990
first	O	O:0.999958
call	O	O:0.998400
be	O	O:0.999991
saved	O	O:0.998598
so	O	O:0.999953
it	O	O:0.999659
is	O	O:0.999982
not	O	O:0.999979
called	O	O:0.999713
again	O	O:0.999872
?	O	O:0.999901
	
This	O	O:0.999626
might	O	O:0.999977
help	O	O:0.999785
if	O	O:0.999998
the	O	O:0.999891
function	O	O:0.999934
called	O	O:0.999887
by	O	O:0.999991
apply	O	O:0.534824
takes	O	O:0.998147
a	O	O:0.999988
long	O	O:0.997962
time	O	O:0.999843
...	O	O:0.999509
	
(	O	O:0.999962
along	O	O:0.999512
with	O	O:0.999784
being	O	O:0.999664
more	O	O:0.999850
intuitive	O	O:0.999666
,	O	O:0.999993
since	O	O:0.999989
this	O	O:0.999925
question	O	O:0.999997
comes	O	O:0.999852
up	O	O:0.999990
a	O	O:0.999970
lot	O	O:0.999464
.	O	O:0.999915
)	O	O:0.999946
	
The	O	O:0.999849
`	O	O:0.999980
apply	O	B-API:0.964383
`	O	O:0.999737
function	O	O:0.999378
needs	O	O:0.999981
to	O	O:0.999996
know	O	O:0.999993
the	O	O:0.999998
shape	O	O:0.999865
of	O	O:0.999990
the	O	O:0.999996
returned	O	O:0.999987
data	O	O:0.999970
to	O	O:0.999995
intelligently	O	O:0.999996
figure	O	O:0.999704
out	O	O:0.999844
how	O	O:0.999964
it	O	O:0.999988
will	O	O:0.999973
be	O	O:0.999997
combined	O	O:0.999434
.	O	O:0.999804
	
To	O	O:0.999891
do	O	O:0.999990
this	O	O:0.999963
it	O	O:0.999979
calls	O	O:0.999921
the	O	O:0.999851
function	O	O:0.987086
(	O	O:0.999896
`	O	O:0.999997
checkit	O	O:0.994344
`	O	O:0.999995
in	O	O:0.999993
your	O	O:0.999987
case	O	O:0.999968
)	O	O:0.999999
twice	O	O:0.999918
to	O	O:0.999990
achieve	O	O:0.999994
this	O	O:0.999767
.	O	O:0.999946
	
Depending	O	O:0.999524
on	O	O:0.999996
your	O	O:0.999962
actual	O	O:0.999809
use	O	O:0.999984
case	O	O:0.999556
,	O	O:0.999997
you	O	O:0.999986
can	O	O:0.999984
replace	O	O:0.999944
the	O	O:0.999998
call	O	O:0.998720
to	O	O:0.999985
`	O	O:0.999996
apply	O	B-API:0.948306
`	O	O:0.999977
with	O	O:0.996753
`	O	O:0.999993
aggregate	O	B-API:0.977782
`	O	O:0.999980
,	O	O:0.999775
`	O	O:0.999997
transform	O	B-API:0.928884
`	O	O:0.999992
or	O	O:0.999893
`	O	O:0.999993
filter	O	O:0.902744
`	O	O:0.999997
,	O	O:0.999991
as	O	O:0.999997
described	O	O:0.998369
in	O	O:0.999961
detail	O	O:0.999787
here	O	O:0.999440
.	O	O:0.999915
	
These	O	O:0.999825
functions	O	O:0.999902
require	O	O:0.999677
the	O	O:0.999985
return	O	O:0.999110
value	O	O:0.999907
to	O	O:0.999995
be	O	O:1.000000
a	O	O:0.999998
particular	O	O:0.999051
shape	O	O:0.999788
,	O	O:0.999971
and	O	O:0.999996
so	O	O:0.999982
don't	O	O:0.999834
call	O	O:0.999587
the	O	O:0.999962
function	O	O:0.999209
twice	O	O:0.999820
.	O	O:0.999964
	
What	O	O:0.999811
can	O	O:0.999971
I	O	O:1.000000
do	O	O:0.999998
if	O	O:0.999969
I	O	O:0.999989
have	O	O:0.999968
several	O	O:0.999442
DataFrames	O	O:0.999339
and	O	O:0.999986
I	O	O:0.999999
want	O	O:0.999946
to	O	O:0.999921
apply	O	O:0.974628
the	O	O:0.999980
same	O	O:0.999964
set	O	O:0.999967
of	O	O:0.999998
operations	O	O:0.999881
to	O	O:0.999998
each	O	O:0.999996
with	O	O:0.999905
operations	O	O:0.999973
that	O	O:0.999893
do	O	O:0.999993
not	O	O:0.999993
support	O	O:0.999070
`	O	O:0.999980
inplace=True	O	O:0.983677
`	O	O:0.999985
?	O	O:0.999651
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999997
way	O	O:0.999949
to	O	O:0.999988
change	O	O:0.999974
the	O	O:0.999981
original	O	O:0.999408
DataFrame	B-API	O:0.998623
in	O	O:0.999995
a	O	O:0.999987
for-loop	O	O:0.998795
?	O	O:0.999902
	
For	O	O:0.999919
example	O	O:0.999634
,	O	O:0.999997
instead	O	O:0.999993
of	O	O:0.999982
`	O	O:0.999982
df_train	O	O:0.982982
[	O	O:0.999990
df_train	O	O:0.994010
>	O	O:0.999946
1	O	O:0.999910
]	O	O:0.999967
=	O	O:0.999434
1	O	O:0.999741
`	O	O:0.999938
and	O	O:0.999678
`	O	O:0.999992
df_test	O	O:0.806176
[	O	O:0.999984
df_test	O	O:0.994094
>	O	O:0.999945
1	O	O:0.999911
]	O	O:0.999976
=	O	O:0.999589
1	O	O:0.999886
`	O	O:0.999995
iterating	O	O:0.999561
over	O	O:0.999644
the	O	O:0.999943
two	O	O:0.999912
frames	O	O:0.999430
and	O	O:0.999996
changing	O	O:0.999939
the	O	O:0.999952
content	O	O:0.999615
of	O	O:0.999992
the	O	O:0.999994
DataFrames	O	O:0.999641
in	O	O:0.999974
the	O	O:0.999968
for-loop	O	O:0.999480
.	O	O:0.999715
	
I	O	O:0.999988
think	O	O:0.999992
a	O	O:0.999980
nicer	O	O:0.999142
way	O	O:0.999976
to	O	O:0.999975
do	O	O:1.000000
this	O	O:0.999973
,	O	O:0.999998
assuming	O	O:0.999943
you	O	O:0.999922
were	O	O:0.999973
planning	O	O:0.999912
on	O	O:0.999979
apply	O	O:0.620582
it	O	O:0.999980
to	O	O:0.999991
an	O	O:1.000000
entire	O	O:0.999958
column	O	O:0.999957
,	O	O:0.999989
is	O	O:0.999996
to	O	O:0.999970
use	O	O:1.000000
one	O	O:0.999963
of	O	O:0.999982
the	O	O:0.999980
vectorised	O	O:0.999736
string	O	O:0.999225
methods	O	O:0.998840
:	O	O:0.999963
`	O	O:0.999983
str.split	B-API	B-API:0.998490
`	O	O:0.999907
:	O	O:0.999790
#CODE	O	O:0.999908
	
You	O	O:0.999740
can	O	O:0.999929
group	O	O:0.999706
and	O	O:0.999998
apply	O	B-API:0.588318
an	O	O:0.999542
user-defined	O	O:0.950996
function	O	O:0.995492
:	O	O:0.999897
#CODE	O	O:0.999851
	
Are	O	O:0.999880
you	O	O:0.999984
trying	O	O:0.999979
to	O	O:0.999994
apply	O	O:0.968447
two	O	O:0.999971
different	O	O:0.999970
types	O	O:0.999745
of	O	O:0.999993
equations	O	O:0.999892
based	O	O:0.999933
on	O	O:0.999996
the	O	O:0.999992
value	O	O:0.999952
in	O	O:0.999956
serialNumber	O	O:0.999045
?	O	O:0.999957
	
After	O	O:0.999824
the	O	O:0.999979
merge	O	B-API:0.815288
between	O	O:0.997156
the	O	O:0.999973
object_list	O	O:0.990898
and	O	O:0.999992
percentages	O	O:0.999474
,	O	O:0.999986
you	O	O:0.999991
could	O	O:0.999952
"	O	O:1.000000
query	O	O:0.998608
"	O	O:0.999980
the	O	O:0.999971
dataframe	B-API	O:0.999572
based	O	O:0.999727
on	O	O:0.999996
the	O	O:0.999992
value	O	O:0.999919
in	O	O:0.999955
serialNumber	O	O:0.999359
and	O	O:0.999993
apply	O	O:0.703134
the	O	O:0.999550
correct	O	O:0.997498
formula	O	O:0.999538
;	O	O:0.999977
#CODE	O	O:0.999428
	
The	O	O:0.999937
apply	O	B-API:0.835548
function	O	O:0.998980
is	O	O:0.999965
similar	O	O:0.999828
to	O	O:0.999986
pythons	O	O:0.999992
builtin	O	O:0.998140
"	O	O:0.999957
map	O	B-API:0.981510
"	O	O:0.999906
.	O	O:0.999606
	
You	O	O:0.999838
can	O	O:0.999891
'	O	O:0.999999
apply	O	O:0.668900
'	O	O:0.999918
the	O	O:0.999990
same	O	O:0.999830
function	O	O:0.999981
over	O	O:0.999980
the	O	O:0.999999
rows	O	O:0.999700
or	O	O:0.999991
columns	O	O:0.999809
(	O	O:0.999998
where	O	O:0.999970
axis=1	O	O:0.998920
is	O	O:0.999987
for	O	O:0.999912
row-wise	O	O:0.984269
[	O	O:0.999951
top	O	O:0.999825
to	O	O:0.999990
bottom	O	O:0.999982
]	O	O:0.999988
where	O	O:0.999909
the	O	O:0.999994
indexes	O	O:0.999774
will	O	O:0.999896
be	O	O:0.999999
the	O	O:0.999998
column	O	O:0.999691
names	O	O:0.999751
,	O	O:0.999983
and	O	O:0.999995
axis=0	O	O:0.997937
is	O	O:0.999876
column-wise	O	O:0.993132
[	O	O:0.999994
left	O	O:0.999573
to	O	O:0.999987
right	O	O:0.999992
]	O	O:0.999994
where	O	O:0.999974
the	O	O:0.999995
row	O	O:0.999981
indexes	O	O:0.999355
are	O	O:0.999996
the	O	O:0.999998
indexes	O	O:0.998195
)	O	O:0.999937
	
Apply	O	O:0.997784
function	O	O:0.999695
to	O	O:0.999976
pandas	O	O:0.999994
Series	O	O:0.999929
with	O	O:0.999515
argument	O	O:0.999625
(	O	O:0.999984
which	O	O:0.999973
varies	O	O:0.999555
for	O	O:0.999996
every	O	O:0.999695
element	O	O:0.999348
)	O	O:0.999918
	
I	O	O:0.999991
have	O	O:0.999982
a	O	O:0.999979
pandas	O	O:0.999312
Series	O	O:0.999819
and	O	O:0.999997
a	O	O:0.999960
function	O	O:0.999802
that	O	O:0.999918
I	O	O:0.999999
want	O	O:0.999991
to	O	O:0.999957
apply	O	O:0.981533
to	O	O:0.999979
each	O	O:0.999987
element	O	O:0.999951
of	O	O:0.999985
the	O	O:0.999937
Series	O	O:0.999486
.	O	O:0.999815
	
The	O	O:0.999576
function	O	O:0.999970
have	O	O:0.999922
an	O	O:0.999998
additional	O	O:0.999512
argument	O	O:0.999785
too	O	O:0.999077
.	O	O:0.999930
	
So	O	O:0.999951
far	O	O:0.999931
so	O	O:0.999965
good	O	O:0.998798
:	O	O:0.999989
for	O	O:0.999986
example	O	O:0.999421
	
python	O	O:0.998258
pandas	O	O:0.998986
:	O	O:0.999995
apply	O	O:0.912011
a	O	O:0.999905
function	O	O:0.999362
with	O	O:0.999943
arguments	O	O:0.999883
to	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999317
.	O	O:0.999916
	
Update	O	O:0.998709
	
I	O	O:0.999929
had	O	O:0.999960
to	O	O:0.999947
face	O	O:0.999990
this	O	O:0.999978
problem	O	O:0.999894
in	O	O:0.999992
my	O	O:0.999978
code	O	O:0.999737
and	O	O:0.999997
I	O	O:0.999998
have	O	O:0.999914
found	O	O:0.999841
a	O	O:0.999992
straightforward	O	O:0.989781
solution	O	O:0.999450
but	O	O:0.999975
it	O	O:0.999918
is	O	O:0.999992
quite	O	O:0.999622
specific	O	O:0.999051
and	O	O:0.999851
(	O	O:0.999993
even	O	O:0.999669
worse	O	O:0.999949
)	O	O:0.999980
do	O	O:0.999949
not	O	O:0.999964
use	O	O:0.999960
the	O	O:0.998705
apply	O	B-API:0.973535
method	O	O:0.998260
.	O	O:0.999539
	
That's	O	O:0.999796
an	O	O:0.999983
unusual	O	O:0.999399
broadcast	O	O:0.999608
rule	O	O:0.999680
,	O	O:0.999869
and	O	O:0.999991
not	O	O:0.999981
one	O	O:0.999990
that	O	O:0.999969
will	O	O:0.999976
be	O	O:0.999996
widely	O	O:0.999879
desired	O	O:0.998126
.	O	O:0.999810
	
So	O	O:0.999939
the	O	O:0.999979
Pandas	O	O:0.999033
API	O	O:0.999950
doesn't	O	O:0.999712
directly	O	O:0.999715
handle	O	O:0.999859
it	O	O:0.999967
for	O	O:0.999981
you	O	O:0.999835
.	O	O:0.999903
	
Your	O	O:0.999804
best	O	O:0.999325
bet	O	O:0.999806
would	O	O:0.999963
be	O	O:0.999996
to	O	O:0.999999
write	O	O:0.999997
a	O	O:0.999961
function	O	O:0.999936
that	O	O:0.999954
maps	O	O:0.999950
the	O	O:0.999986
`	O	O:0.999969
t	B-API	O:0.524305
`	O	O:0.999994
vector	O	O:0.999928
into	O	O:0.999925
a	O	O:0.999995
correctly-sized	O	O:0.998764
column	O	O:0.999874
in	O	O:0.999998
the	O	O:0.999998
data	O	O:0.999976
frame	O	O:0.999997
,	O	O:0.999999
using	O	O:0.999958
whatever	O	O:0.999494
mapping	O	O:0.997427
convention	O	O:0.999798
you'd	O	O:0.999972
like	O	O:0.999836
,	O	O:0.999998
and	O	O:0.999974
after	O	O:0.999971
that	O	O:0.997549
is	O	O:0.999995
created	O	O:0.999135
,	O	O:0.999991
*	O	O:0.999998
then	O	O:0.999668
*	O	O:1.000000
you	O	O:0.999991
can	O	O:0.999998
just	O	O:0.999998
use	O	O:0.999998
a	O	O:0.999969
simple	O	O:0.996666
`	O	O:0.999985
apply	O	B-API:0.956465
`	O	O:0.999962
or	O	O:0.999481
`	O	O:0.999981
map	O	B-API:0.966863
`	O	O:0.999990
or	O	O:0.999973
basic	O	O:0.999897
array	O	O:0.999851
function	O	O:0.999853
to	O	O:0.999990
operate	O	O:0.999992
on	O	O:0.999998
them	O	O:0.999606
.	O	O:0.999978
	
But	O	O:0.999882
you	O	O:0.999941
shouldn't	O	O:0.999968
want	O	O:0.999980
Pandas	O	O:0.999960
to	O	O:0.999989
support	O	O:0.999955
arbitrary	O	O:0.999975
ways	O	O:0.999515
of	O	O:0.999957
broadcasting	O	O:0.999829
elements	O	O:0.999606
.	O	O:0.999783
	
That	O	O:0.999354
interface	O	O:0.999884
would	O	O:0.999977
be	O	O:0.999996
so	O	O:0.999998
wide	O	O:0.999570
open	O	O:0.998916
it	O	O:0.999990
would	O	O:0.999986
necessitate	O	O:0.999979
that	O	O:0.999996
the	O	O:1.000000
data	O	O:0.999954
structure	O	O:0.999588
was	O	O:0.999965
meaningless	O	O:0.999665
.	O	O:0.999881
	
can	O	O:0.999924
you	O	O:0.999999
show	O	O:0.999773
``	O	O:0.999990
data.info()``	O	O:0.988243
before	O	O:0.999958
this	O	O:0.999771
?	O	O:0.999960
	
you	O	O:0.999829
should	O	O:0.999989
have	O	O:0.999836
``	O	O:0.999982
float64	O	O:0.980567
``	O	O:0.999840
dtypes	B-API	B-API:0.996957
already	O	O:0.999856
.	O	O:0.999990
secondarily	O	O:0.999824
,	O	O:0.999998
you	O	O:0.999980
don't	O	O:0.999977
need	O	O:0.999993
the	O	O:0.999997
apply	O	O:0.545776
,	O	O:0.999974
you	O	O:0.999952
can	O	O:0.999987
do	O	O:1.000000
something	O	O:0.999984
like	O	O:0.999428
:	O	O:0.999992
``	O	O:0.999992
data	O	O:0.999859
[	O	O:0.999999
data	O	O:0.999953
[	O	O:0.999956
'	O	O:0.999995
currency	O	O:0.999319
']	O	O:0.999922
!	O	O:0.999413
=	O	O:0.999409
'	O	O:0.999956
A	O	O:0.999945
'	O	O:0.999973
,	O	O:0.999959
'	O	O:0.999985
amount	O	O:0.999942
']	O	O:0.999898
=d	O	O:0.999831
ata	O	O:0.998524
[	O	O:0.999912
'	O	O:0.999980
qty	O	O:0.999921
']	O	O:0.999954
*data	O	O:0.916105
[	O	O:0.999854
'	O	O:0.999978
rate	B-API	O:0.911072
']``	O	O:0.998917
	
Apply	O	O:0.998067
function	O	O:0.999937
then	O	O:0.997860
Filter	O	O:0.999968
DataFrame	B-API	O:0.990974
	
You	O	O:0.999795
can	O	O:0.999638
[	O	O:0.999998
groupby	B-API	B-API:0.950604
an	O	O:0.999965
index	O	O:0.999964
level	O	O:0.999352
]	O	O:0.999856
(	O	O:0.999670
#URL	O	O:0.998921
):	O	O:0.999817
`	O	O:0.999984
site.groupby	O	O:0.985786
(	O	O:0.999981
level=	O	O:0.999171
'	O	O:0.999935
DK	O	O:0.999461
'	O	O:0.999971
,	O	O:0.999983
axis=1	O	O:0.999780
)`	O	O:0.999610
,	O	O:0.999954
and	O	O:0.999999
then	O	O:0.999939
iterate	O	O:0.999943
through	O	O:0.999978
that	O	O:0.999980
like	O	O:0.999992
a	O	O:0.999999
normal	O	O:0.991375
groupby	B-API	B-API:0.989042
object	O	O:0.999125
.	O	O:0.999420
	
It	O	O:0.999945
may	O	O:0.999992
be	O	O:0.999995
cleaner	O	O:0.999945
to	O	O:0.999923
use	O	O:0.999983
and	O	O:0.999893
`	O	O:0.999981
apply	O	B-API:0.984149
`	O	O:0.999649
after	O	O:0.999270
grouping	O	O:0.999213
,	O	O:0.999980
instead	O	O:0.999979
of	O	O:0.999998
iterating	O	O:0.999876
over	O	O:0.999828
the	O	O:0.999922
groups	O	O:0.997183
.	O	O:0.999819
	
I	O	O:0.999954
am	O	O:0.999995
struggling	O	O:0.993289
with	O	O:0.999512
indexing	O	O:0.997726
and	O	O:0.999970
bools	O	O:0.996929
but	O	O:0.999762
i	O	O:0.999913
can't	O	O:0.999820
solve	O	O:0.999891
this	O	O:0.999865
.	O	O:0.999941
	
I	O	O:0.999983
strongly	O	O:0.999760
suspect	O	O:0.999393
that	O	O:0.999852
i	O	O:0.999995
need	O	O:0.999992
to	O	O:0.999992
use	O	O:0.999999
a	O	O:0.999970
lambda	O	O:0.986529
function	O	O:0.999648
,	O	O:0.999906
but	O	O:0.999964
i	O	O:0.999926
don't	O	O:0.999972
know	O	O:0.999834
how	O	O:0.999984
to	O	O:0.999980
apply	O	O:0.958579
it	O	O:0.999787
.	O	O:0.999810
	
So	O	O:0.999945
please	O	O:0.999893
have	O	O:0.999941
mercy	O	O:0.999665
it's	O	O:0.999800
too	O	O:0.999944
long	O	O:0.999950
that	O	O:0.999069
i'm	O	O:0.999980
trying	O	O:0.999884
on	O	O:0.999993
this	O	O:0.999711
.	O	O:0.999975
	
Hope	O	O:0.997574
i've	O	O:0.999805
been	O	O:0.998945
clear	O	O:0.999707
enough	O	O:0.999294
.	O	O:0.999791
	
You	O	O:0.999765
would	O	O:0.999982
need	O	O:0.999990
to	O	O:0.999998
use	O	O:0.999998
`	O	O:0.999949
applymap	B-API	B-API:0.998290
`	O	O:0.999995
instead	O	O:0.999830
of	O	O:0.999995
`	O	O:0.999982
apply	O	B-API:0.959387
`	O	O:0.999968
to	O	O:0.999776
do	O	O:0.999998
it	O	O:0.999996
that	O	O:0.999854
way	O	O:0.999976
.	O	O:0.999902
	
But	O	O:0.999943
more	O	O:0.999892
generally	O	O:0.999799
,	O	O:0.999993
working	O	O:0.999643
with	O	O:0.999889
lists	O	O:0.999733
inside	O	O:0.999975
DataFrames	O	O:0.999790
can	O	O:0.999956
be	O	O:1.000000
somewhat	O	O:0.999909
awkward	O	O:0.999547
,	O	O:0.999978
and	O	O:0.999986
working	O	O:0.999841
with	O	O:0.999904
columns	O	O:0.999961
where	O	O:0.999997
some	O	O:0.999952
values	O	O:0.999905
are	O	O:0.999981
lists	O	O:0.999552
and	O	O:0.999995
some	O	O:0.999929
are	O	O:0.999950
numbers	O	O:0.998174
is	O	O:0.999987
also	O	O:0.999960
likely	O	O:0.999937
to	O	O:0.999983
be	O	O:0.999995
awkward	O	O:0.999692
.	O	O:0.999736
	
You	O	O:0.999908
can	O	O:0.999966
apply	O	O:0.998652
your	O	O:0.999917
values	O	O:0.998819
to	O	O:0.999999
your	O	O:0.999998
matrice	O	O:0.999980
by	O	O:0.999996
looping	O	O:0.999837
through	O	O:0.996326
the	O	O:0.999959
list	O	O:0.999392
with	O	O:0.999944
values	O	O:0.999919
that	O	O:0.999958
you	O	O:0.999991
	
want	O	O:0.999642
to	O	O:0.999970
apply	O	O:0.956550
and	O	O:0.999953
append	O	O:0.972629
them	O	O:0.998578
to	O	O:0.999992
the	O	O:0.999999
matrice	O	O:0.999775
in	O	O:0.999980
the	O	O:0.999988
loop	O	O:0.999449
.	O	O:0.999830
	
#CODE	O	O:0.998453
	
how	O	O:0.999921
to	O	O:0.999995
apply	O	O:0.996242
a	O	O:0.999919
function	O	O:0.997783
which	O	O:0.999916
takes	O	O:0.999851
the	O	O:0.999994
caller	O	O:0.999574
as	O	O:0.999995
its	O	O:0.999672
arugment	O	O:0.999214
	
When	O	O:0.999666
calling	O	O:0.999805
apply	O	O:0.680805
,	O	O:0.999871
add	O	O:0.999848
group	O	O:0.999716
keys	O	O:0.998592
to	O	O:0.999984
index	O	O:0.999998
to	O	O:0.999996
identify	O	O:0.999986
pieces	O	O:0.998489
`	O	O:0.999966
.	O	O:0.999886
	
Reindexing	O	O:0.998430
error	O	O:0.999390
makes	O	O:0.999671
no	O	O:0.999964
sense	O	O:0.999783
does	O	O:0.999705
not	O	O:0.999993
seem	O	O:0.999984
to	O	O:0.999998
apply	O	O:0.986349
as	O	O:0.999969
my	O	O:0.998450
old	O	O:0.999858
index	O	O:0.999192
is	O	O:0.999966
unique	O	B-API:0.572687
.	O	O:0.999671
	
Probably	O	O:0.999803
better	O	O:0.999827
to	O	O:0.999994
split	O	O:0.999988
your	O	O:0.999987
data	O	O:0.999971
using	O	O:0.999940
regexp	O	O:0.998340
and	O	O:0.999989
then	O	O:0.999909
apply	O	O:0.985376
some	O	O:0.999761
date	O	O:0.999232
parsing	O	O:0.999932
using	O	O:0.999720
strptime	O	O:0.929980
IMO	O	O:0.999549
,	O	O:0.999986
I	O	O:0.999971
can't	O	O:0.999985
think	O	O:0.999949
of	O	O:0.999998
an	O	O:0.999568
easier	O	O:0.999654
method	O	O:0.999734
	
Use	O	O:0.999691
`	O	O:0.999973
apply	O	B-API:0.968673
`	O	O:0.999945
for	O	O:0.999619
row-wise	O	O:0.994782
methods	O	O:0.988214
:	O	O:0.999895
#CODE	O	O:0.999799
	
Well	O	O:0.999092
,	O	O:0.999988
it	O	O:0.999998
does	O	O:0.999895
select	O	O:0.999811
the	O	O:0.999999
number	O	O:0.999978
of	O	O:0.999998
rows	O	O:0.999857
I	O	O:0.999996
want	O	O:0.999977
but	O	O:0.999618
I	O	O:0.999994
can't	O	O:0.999963
apply	O	B-API:0.649917
`	O	O:0.999832
size()	B-API	B-API:0.998915
`	O	O:0.999980
method	O	O:0.999630
on	O	O:0.999999
this	O	O:0.999965
new	O	O:0.999840
object	O	O:0.999552
.	O	O:0.999796
	
#CODE	O	O:0.998453
	
I	O	O:0.999949
don't	O	O:0.999986
want	O	O:0.999813
to	O	O:0.999995
redefine	O	O:0.999983
each	O	O:0.999387
and	O	O:0.999969
every	O	O:0.999931
method	O	O:0.999946
of	O	O:0.999996
a	O	O:0.999994
class	O	O:0.999890
to	O	O:0.999997
pass	O	O:0.999927
through	O	O:0.999213
.	O	O:0.999895
	
This	O	O:0.998615
is	O	O:0.999994
just	O	O:0.999807
one	O	O:0.999994
example	O	O:0.999282
.	O	O:0.999903
	
I'd	O	O:0.999981
like	O	O:0.999959
to	O	O:0.999989
apply	O	O:0.990732
this	O	O:0.999485
elsewhere	O	O:0.999030
.	O	O:0.999928
	
``	O	O:0.999879
df	O	O:0.986738
==	O	O:0.999906
DataFrame	B-API	O:0.883498
(	O	O:0.999854
np.tile	B-API	B-API:0.986753
(	O	O:0.999968
rowmax	O	O:0.999368
,	O	O:0.999944
len	O	B-API:0.941950
(	O	O:0.999990
df	O	O:0.999330
))	O	O:0.998846
.reshape	B-API	B-API:0.999623
(	O	O:0.999970
df.shape	B-API	B-API:0.900492
)	O	O:0.999931
.T	B-API	B-API:0.980230
,	O	O:0.999974
index	O	O:0.999572
=d	O	O:0.999931
f.index	O	O:0.999557
,	O	O:0.999996
columns	O	O:0.999722
=d	O	O:0.999963
f.columns	O	O:0.997509
)``	O	O:0.999907
will	O	O:0.999597
get	O	O:0.999995
your	O	O:0.999952
boolean	O	O:0.999401
frame	O	O:0.999815
(	O	O:0.999992
kind	O	O:0.999967
of	O	O:0.999997
like	O	O:0.999954
a	O	O:0.999998
broadcasted	O	O:0.993672
comparison	O	O:0.999720
operator	O	O:0.999937
);	O	O:0.999785
faster	O	O:0.997324
,	O	O:0.999969
but	O	O:0.999864
prob	O	O:0.995995
not	O	O:0.999998
more	O	O:0.999969
clear	O	O:0.999874
than	O	O:0.999930
the	O	O:0.999927
``	O	O:0.999915
apply	O	B-API:0.976681
``	O	O:0.999389
	
This	O	O:0.999842
means	O	O:0.999905
we	O	O:0.999991
don't	O	O:0.999935
easily	O	O:0.999972
know	O	O:0.999914
how	O	O:0.999955
to	O	O:0.999984
build	O	O:0.999967
our	O	O:0.999942
grouping	O	O:0.998101
.	O	O:0.999823
	
It	O	O:0.999881
would	O	O:0.999937
be	O	O:0.999998
much	O	O:0.999945
better	O	O:0.999515
to	O	O:0.999995
just	O	O:0.999995
operate	O	O:0.999972
on	O	O:0.999991
the	O	O:0.999998
first	O	O:0.999962
level	O	O:0.998444
,	O	O:0.999983
but	O	O:0.999989
then	O	O:0.999804
I'm	O	O:0.999999
stuck	O	O:0.999917
on	O	O:0.999990
how	O	O:0.999993
to	O	O:1.000000
then	O	O:0.999997
apply	O	O:0.898429
the	O	O:0.999991
grouping	O	O:0.998771
I	O	O:0.999985
actually	O	O:0.999984
want	O	O:0.998615
.	O	O:0.999684
	
#CODE	O	O:0.998453
	
I	O	O:0.999987
think	O	O:0.999946
you	O	O:0.999877
are	O	O:0.999998
doing	O	O:0.999996
a	O	O:0.999981
row	O	O:0.997695
/	O	O:0.999986
column-wise	O	O:0.999609
operation	O	O:0.999957
so	O	O:0.999988
can	O	O:0.999962
use	O	O:0.999996
`	O	O:0.999975
apply	O	B-API:0.996885
`	O	O:0.999529
:	O	O:0.999171
#CODE	O	O:0.999898
	
@USER	O	O:0.999094
Thank	O	O:0.999705
you	O	O:0.999979
,	O	O:0.999997
I	O	O:0.999994
understand	O	O:0.999896
the	O	O:0.999909
difference	O	O:0.999263
and	O	O:0.999980
see	O	O:0.999981
that	O	O:0.999965
both	O	O:0.999973
selections	O	O:0.999112
are	O	O:0.999969
not	O	O:0.999987
the	O	O:0.999998
same	O	O:0.999741
;	O	O:0.999999
this	O	O:0.999950
can	O	O:0.999997
be	O	O:1.000000
confirmed	O	O:0.999974
using	O	O:0.999898
the	O	O:0.999727
`	O	O:0.999071
is	O	O:0.997544
`	O	O:0.999979
operator	O	O:0.999431
for	O	O:0.999949
comparison	O	O:0.997109
.	O	O:0.999775
	
But	O	O:0.999378
is	O	O:0.999995
there	O	O:0.999956
a	O	O:0.999996
simple	O	O:0.998853
rule	O	O:0.999617
?	O	O:0.999932
	
The	O	O:0.999465
documentation	O	O:0.999885
looks	O	O:0.999883
rather	O	O:0.999950
complicated	O	O:0.998609
in	O	O:0.999997
this	O	O:0.999862
point	O	O:0.999773
.	O	O:0.999898
	
How	O	O:0.999788
far	O	O:0.999910
does	O	O:0.999820
the	O	O:0.999918
following	O	O:0.999576
statement	O	O:0.999922
apply	O	O:0.522660
to	O	O:0.999946
one	O	O:0.999967
but	O	O:0.999962
not	O	O:0.999991
the	O	O:0.999999
other	O	O:0.999841
select	O	O:0.993870
?	O	O:0.999959
	
"	O	O:0.999936
Whenever	O	O:0.999876
an	O	O:0.999995
array	O	O:0.999988
of	O	O:0.999990
labels	O	O:0.999399
or	O	O:0.999998
a	O	O:0.999982
boolean	O	O:0.995839
vector	O	O:0.999956
are	O	O:0.999967
involved	O	O:0.999681
in	O	O:0.999956
the	O	O:0.999959
indexing	O	O:0.999699
operation	O	O:0.999710
,	O	O:0.999999
the	O	O:0.999987
result	O	O:0.999881
will	O	O:0.999955
be	O	O:1.000000
a	O	O:0.999999
copy	O	O:0.781777
.	O	O:0.999919
	
"	O	O:0.999749
In	O	O:0.999963
both	O	O:0.999904
versions	O	O:0.999897
`	O	O:0.999983
df	O	O:0.998967
[	O	O:0.999961
"	O	O:0.999980
col	O	O:0.997876
"]	O	O:0.999961
==	O	O:0.999154
3	O	O:0.999565
`	O	O:0.999960
is	O	O:0.999982
a	O	O:0.999986
boolean	O	O:0.995826
vector	O	O:0.999856
for	O	O:0.999912
selection	O	O:0.998814
,	O	O:0.999984
but	O	O:0.999938
in	O	O:0.999987
the	O	O:0.999987
former	O	O:0.999771
version	O	O:0.999787
the	O	O:0.999962
condition	O	O:0.999107
is	O	O:0.999994
used	O	O:0.999945
first	O	O:0.999872
;	O	O:0.999979
in	O	O:0.999957
the	O	O:0.999987
latter	O	O:0.999686
the	O	O:0.999951
Series	O	O:0.996200
is	O	O:0.999984
selected	O	O:0.999634
first	O	O:0.999577
.	O	O:0.999811
	
Why	O	O:0.999873
does	O	O:0.999897
pandas	O	O:0.999975
apply	O	O:0.982594
calculate	O	O:0.997677
twice	O	O:0.999779
	
I'm	O	O:0.999930
using	O	O:0.999942
the	O	O:0.998482
apply	O	B-API:0.954328
method	O	O:0.999704
on	O	O:0.999979
a	O	O:0.999994
panda's	O	O:0.984025
DataFrame	B-API	O:0.983055
object	O	O:0.999331
.	O	O:0.999873
	
When	O	O:0.999217
my	O	O:0.999967
DataFrame	B-API	O:0.995501
has	O	O:0.999992
a	O	O:0.999998
single	O	O:0.999507
column	O	O:0.999907
,	O	O:0.999995
it	O	O:0.999987
appears	O	O:0.999974
that	O	O:0.999971
the	O	O:0.999996
applied	O	O:0.999083
function	O	O:0.998911
is	O	O:0.999977
being	O	O:0.999782
called	O	O:0.999502
twice	O	O:0.999711
.	O	O:0.999822
	
The	O	O:0.999921
questions	O	O:0.999473
are	O	O:0.999977
why	O	O:0.999965
?	O	O:0.999935
	
And	O	O:0.999936
,	O	O:0.999996
can	O	O:0.999980
I	O	O:1.000000
stop	O	O:0.999959
that	O	O:0.999703
behavior	O	O:0.999945
?	O	O:0.999955
	
Also	O	O:0.999550
,	O	O:0.999994
calling	O	O:0.999493
it	O	O:0.999991
four	O	O:0.999897
times	O	O:0.999948
when	O	O:0.999945
you	O	O:0.999998
apply	O	O:0.960394
on	O	O:0.999975
the	O	O:0.999977
column	O	O:0.999332
is	O	O:0.999988
normal	O	O:0.998037
.	O	O:0.999935
	
When	O	O:0.999786
you	O	O:0.999992
get	O	O:0.999993
one	O	O:0.999999
columnm	O	O:0.999822
you	O	O:0.999996
get	O	O:0.999988
a	O	O:0.999997
Series	O	O:0.998133
,	O	O:0.999993
not	O	O:0.999984
a	O	O:0.999992
DataFrame	B-API	O:0.971722
.	O	O:0.999890
	
`	O	O:0.999956
apply	O	B-API:0.968089
`	O	O:0.999980
on	O	O:0.999936
a	O	O:0.999997
Series	O	O:0.999650
applies	O	O:0.999848
the	O	O:0.999916
function	O	O:0.999673
to	O	O:0.999991
each	O	O:0.999979
element	O	O:0.999735
.	O	O:0.999908
	
Since	O	O:0.999981
your	O	O:0.999856
column	O	O:0.999847
has	O	O:0.999994
four	O	O:0.999952
elements	O	O:0.999511
in	O	O:0.999986
it	O	O:0.999992
,	O	O:0.999998
the	O	O:0.999942
function	O	O:0.998764
is	O	O:0.999978
called	O	O:0.999895
four	O	O:0.999913
times	O	O:0.996943
.	O	O:0.999891
	
doing	O	O:0.999793
a	O	O:0.999979
nested	O	O:0.991339
a	O	O:0.999985
nested	O	O:0.993754
apply	O	B-API:0.808443
/	O	O:0.999889
grouping	O	O:0.998735
like	O	O:0.999953
this	O	O:0.999142
is	O	O:0.999986
not	O	O:0.999969
the	O	O:0.999983
answer	O	O:0.999230
.	O	O:0.999671
	
This	O	O:0.998619
is	O	O:0.999982
almost	O	O:0.999906
pure	O	O:0.999813
python	O	O:0.999656
code	O	O:0.999774
,	O	O:0.999994
you	O	O:0.999918
are	O	O:0.999988
not	O	O:0.999993
leveraging	O	O:0.999972
any	O	O:0.999927
of	O	O:0.999989
pandas	O	O:0.999486
strengths	O	O:0.999859
.	O	O:0.999751
	
You	O	O:0.999910
prob	O	O:0.999303
want	O	O:0.999934
to	O	O:0.999990
groupby	B-API	B-API:0.562641
at	O	O:0.999988
the	O	O:0.999969
top	O	O:0.999891
level	O	O:0.998120
(	O	O:0.999985
or	O	O:0.999998
construct	O	O:0.999454
a	O	O:0.999997
multi-index	O	O:0.999745
)	O	O:0.999997
,	O	O:0.999995
select	O	O:0.999611
the	O	O:0.999984
values	O	O:0.999871
that	O	O:0.999956
you	O	O:1.000000
want	O	O:0.999989
to	O	O:0.999991
include	O	O:0.999992
,	O	O:0.999999
then	O	O:0.999886
use	O	O:0.999999
a	O	O:0.999986
cythonized	O	O:0.984234
function	O	O:0.999945
to	O	O:0.999979
apply	O	O:0.936851
it	O	O:0.999769
.	O	O:0.999786
	
You	O	O:0.999969
only	O	O:0.999973
want	O	O:0.999976
to	O	O:0.999994
do	O	O:0.999999
1	O	O:0.999995
level	O	O:0.999532
of	O	O:0.999948
groupby	B-API	B-API:0.997063
and	O	O:0.999978
apply	O	B-API:0.966151
(	O	O:0.999547
except	O	O:0.999426
in	O	O:0.999992
some	O	O:0.999957
very	O	O:0.999942
very	O	O:0.999950
rare	O	O:0.999909
cases	O	O:0.999487
)	O	O:0.999971
.	O	O:0.999670
	
You	O	O:0.999874
are	O	O:0.999992
ultimately	O	O:0.999933
are	O	O:0.999995
doing	O	O:0.999958
some	O	O:0.999840
vectorized	O	O:0.999293
operations	O	O:0.999197
,	O	O:0.999973
but	O	O:0.999986
you	O	O:0.999966
are	O	O:0.999998
doing	O	O:0.999999
them	O	O:0.999918
backwards	O	O:0.999838
at	O	O:0.999994
the	O	O:0.999981
lowest	O	O:0.999648
level	O	O:0.998138
.	O	O:0.999860
	
You	O	O:0.999915
can	O	O:0.999931
do	O	O:0.999998
the	O	O:0.999992
apply	O	B-API:0.967046
and	O	O:0.999914
groupby	B-API	B-API:0.963822
by	O	O:0.999718
one	O	O:0.999931
multilevel	O	O:0.999213
groupby	B-API	B-API:0.923618
,	O	O:0.999989
here	O	O:0.995607
is	O	O:0.999989
the	O	O:0.999947
code	O	O:0.995430
:	O	O:0.999966
#CODE	O	O:0.999848
	
Pandas	O	O:0.997704
:	O	O:0.999964
how	O	O:0.999980
to	O	O:0.999998
apply	O	O:0.951829
function	O	O:0.999825
to	O	O:0.999989
only	O	O:1.000000
part	O	O:0.999979
of	O	O:0.999997
a	O	O:0.999994
dataframe	B-API	O:0.997387
and	O	O:0.999997
append	O	O:0.826232
result	O	O:0.999765
back	O	O:0.998609
to	O	O:0.999988
dataframe	B-API	O:0.999817
?	O	O:0.999959
	
I	O	O:0.999973
could	O	O:0.999995
then	O	O:0.999935
figure	O	O:0.999988
out	O	O:0.999984
how	O	O:0.999992
to	O	O:0.999989
append	O	O:0.990850
these	O	O:0.999979
lists	O	O:0.999941
back	O	O:0.999737
to	O	O:0.999996
the	O	O:0.999999
original	O	O:0.999175
list	O	O:0.995341
(	O	O:0.999996
though	O	O:0.999962
I	O	O:0.999998
have	O	O:0.999969
no	O	O:0.999970
idea	O	O:0.999873
how	O	O:0.999990
to	O	O:0.999996
go	O	O:1.000000
from	O	O:0.999992
a	O	O:0.999998
dataframe	B-API	O:0.999148
to	O	O:0.999993
a	O	O:1.000000
list	O	O:0.997581
again	O	O:0.999969
to	O	O:0.999989
do	O	O:1.000000
this	O	O:0.999928
)	O	O:0.999972
.	O	O:0.999871
	
Is	O	O:0.999966
there	O	O:0.999993
more	O	O:0.999949
of	O	O:0.999998
a	O	O:0.999988
direct	O	O:0.999477
way	O	O:0.999959
to	O	O:0.999996
only	O	O:0.999997
apply	O	O:0.906261
the	O	O:0.999815
function	O	O:0.999699
to	O	O:0.999989
the	O	O:1.000000
numeric	O	O:0.999135
variables	O	O:0.998835
?	O	O:0.999973
	
Also	O	O:0.999710
,	O	O:0.999993
how	O	O:0.999973
would	O	O:0.999983
you	O	O:0.999999
change	O	O:0.999918
the	O	O:0.999992
pandas	O	O:0.999904
dataframe	B-API	O:0.999900
back	O	O:0.999541
to	O	O:0.999998
its	O	O:0.999997
original	O	O:0.999873
list	O	O:0.999628
form	O	O:0.999972
anyway	O	O:0.999874
?	O	O:0.999978
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999991
`	O	O:0.999970
apply	O	B-API:0.994205
`	O	O:0.999929
and	O	O:0.999798
use	O	O:0.999990
a	O	O:0.999900
lambda	O	O:0.998696
to	O	O:0.999978
subtract	O	O:0.999687
the	O	O:0.999994
list	O	O:0.999351
values	O	O:0.999438
column-wise	O	O:0.994986
:	O	O:0.999988
#CODE	O	O:0.999754
	
I	O	O:0.999753
was	O	O:0.999979
trying	O	O:0.999754
to	O	O:0.999978
remember	O	O:0.999975
what	O	O:0.999954
the	O	O:0.999988
correct	O	O:0.999756
/	O	O:0.999744
better	O	O:0.998676
method	O	O:0.999695
was	O	O:0.999229
and	O	O:0.999992
couldn't	O	O:0.999218
remember	O	O:0.999854
this	O	O:0.999957
one	O	O:0.999988
so	O	O:0.999982
i	O	O:0.999973
posted	O	O:0.999725
`	O	O:0.999983
apply	O	B-API:0.945116
`	O	O:0.999985
as	O	O:0.999943
an	O	O:0.999952
answer	O	O:0.999452
.	O	O:0.999596
	
Ed	O	O:0.999902
,	O	O:0.999956
in	O	O:0.999996
this	O	O:0.999959
case	O	O:0.999980
,	O	O:0.999994
'	O	O:0.999992
sub	O	O:0.999498
'	O	O:0.999855
was	O	O:0.999980
what	O	O:0.999845
I	O	O:0.999975
was	O	O:0.999988
looking	O	O:0.998699
for	O	O:0.999867
,	O	O:0.999849
but	O	O:0.999897
I'm	O	O:0.999982
certainly	O	O:0.999941
keeping	O	O:0.999855
the	O	O:0.999561
'	O	O:0.999929
apply	O	O:0.827378
lambda	O	O:0.968191
'	O	O:0.999841
method	O	O:0.999857
in	O	O:0.999996
my	O	O:0.999997
back	O	O:0.999636
pocket	O	O:0.999848
--	O	O:0.999987
the	O	O:0.999994
next	O	O:0.999852
problem	O	O:0.999672
in	O	O:0.999973
queue	O	O:0.999857
isn't	O	O:0.999972
a	O	O:0.999990
straight	O	O:0.998119
subtraction	O	O:0.999092
.	O	O:0.999882
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
I	O	O:0.999985
want	O	O:0.999972
to	O	O:0.999965
apply	O	O:0.992023
filters	O	O:0.999390
based	O	O:0.999220
on	O	O:0.999994
the	O	O:0.999976
following	O	O:0.999862
pattern	O	O:0.999881
from	O	O:0.999775
'	O	O:0.999989
CAT1	O	O:0.999579
'	O	O:0.999862
'	O	O:0.999984
CAT2	O	O:0.999248
'	O	O:0.999933
;	O	O:0.999955
	
You	O	O:0.999830
could	O	O:0.999977
just	O	O:0.999989
define	O	O:0.999985
a	O	O:0.999883
function	O	O:0.999060
and	O	O:0.999992
pass	O	O:0.999710
this	O	O:0.999736
to	O	O:0.999991
`	O	O:0.999999
apply	O	B-API:0.986196
`	O	O:0.999950
and	O	O:0.999945
set	O	O:0.999846
`	O	O:0.999945
axis=1	O	O:0.986200
`	O	O:0.999977
would	O	O:0.999819
work	O	O:0.999940
,	O	O:0.999999
not	O	O:0.999997
sure	O	O:0.999956
I	O	O:0.999994
can	O	O:0.999997
think	O	O:0.999992
of	O	O:0.999999
an	O	O:0.999944
operation	O	O:0.999981
that	O	O:0.999743
would	O	O:0.999997
give	O	O:0.999958
you	O	O:0.999998
what	O	O:0.999975
you	O	O:0.999995
want	O	O:0.999940
	
Then	O	O:0.999483
apply	O	O:0.927428
it	O	O:0.999962
to	O	O:0.999995
your	O	O:0.999998
dataframe	B-API	O:0.999770
passing	O	O:0.999660
in	O	O:0.999977
the	O	O:0.999973
`	O	O:0.999977
axis=1	O	O:0.988253
`	O	O:0.999965
option	O	O:0.996026
:	O	O:0.999982
#CODE	O	O:0.999767
	
Trying	O	O:0.999425
other	O	O:0.999953
user-defined	O	O:0.999063
functions	O	O:0.999598
produces	O	O:0.999236
similar	O	O:0.999839
errors	O	O:0.999522
.	O	O:0.999838
	
In	O	O:0.999909
all	O	O:0.999988
these	O	O:0.999974
cases	O	O:0.999234
,	O	O:0.999989
it's	O	O:0.999870
pretty	O	O:0.999517
clearly	O	O:0.999914
trying	O	O:0.999910
to	O	O:0.999978
apply	O	O:0.987504
peak_to_peak()	O	O:0.961314
or	O	O:0.999655
np.mean()	B-API	B-API:0.997435
(	O	O:0.999983
or	O	O:0.999998
whatever	O	O:0.999976
)	O	O:0.999996
to	O	O:0.999984
the	O	O:0.999997
(	O	O:0.999997
subsets	O	O:0.999847
of	O	O:0.999997
the	O	O:0.999992
)	O	O:0.999959
'	O	O:0.999949
key2	O	O:0.999410
'	O	O:0.999993
column	O	O:0.999972
from	O	O:0.999971
df	O	O:0.999878
,	O	O:0.999997
whereas	O	O:0.999746
for	O	O:0.999941
the	O	O:0.999961
built-in	O	O:0.994664
methods	O	O:0.997519
and	O	O:0.999995
predefined	O	O:0.999448
functions	O	O:0.998920
,	O	O:0.999954
it	O	O:0.999948
(	O	O:0.999996
correctly	O	O:0.999948
)	O	O:0.999995
ignores	O	O:0.999268
the	O	O:0.999919
'	O	O:0.999922
key2	O	O:0.998594
'	O	O:0.999993
column	O	O:0.999923
subsets	O	O:0.999374
.	O	O:0.999882
	
Also	O	O:0.999913
check	O	O:0.999853
out	O	O:0.999968
#URL	O	O:0.999132
which	O	O:0.999671
covers	O	O:0.999382
`	O	O:0.999995
apply	O	B-API:0.980648
`	O	O:0.999946
,	O	O:0.999542
`	O	O:0.999986
map	O	B-API:0.986136
`	O	O:0.999997
as	O	O:0.999995
well	O	O:0.999951
as	O	O:0.999993
`	O	O:0.999929
applymap	B-API	B-API:0.998710
`	O	O:0.999954
.	O	O:0.998629
	
I	O	O:0.999936
would	O	O:0.999997
like	O	O:0.999969
to	O	O:0.999999
maintain	O	O:0.999986
the	O	O:0.999999
data	O	O:0.999987
types	O	O:0.999903
from	O	O:0.999985
the	O	O:0.999999
original	O	O:0.999955
data	O	O:0.999992
frame	O	O:0.999999
as	O	O:0.999997
I	O	O:0.999996
need	O	O:0.999984
to	O	O:0.999977
apply	O	O:0.996312
other	O	O:0.999833
operations	O	O:0.999648
to	O	O:0.999983
the	O	O:1.000000
total	O	O:0.999540
row	O	O:0.999948
,	O	O:0.999998
something	O	O:0.999951
like	O	O:0.998202
:	O	O:0.999984
#CODE	O	O:0.999860
	
That's	O	O:0.999907
a	O	O:0.999992
little	O	O:0.998277
too	O	O:0.999932
complex	O	O:0.999697
to	O	O:0.999986
discuss	O	O:0.999942
without	O	O:0.999952
something	O	O:0.999912
concrete	O	O:0.999484
to	O	O:0.999995
work	O	O:0.999989
with	O	O:0.999937
.	O	O:0.999943
	
I	O	O:0.999970
suggest	O	O:0.999908
you	O	O:0.999957
make	O	O:0.999984
some	O	O:0.999959
short	O	O:0.999923
toy	O	O:0.999928
examples	O	O:0.998752
and	O	O:0.999993
open	O	O:0.999927
a	O	O:0.999992
new	O	O:0.999012
question	O	O:0.998969
.	O	O:0.999835
	
Or	O	O:0.999972
see	O	O:0.999943
if	O	O:0.999930
[	O	O:0.999994
this	O	O:0.999925
old	O	O:0.999981
answer	O	O:0.999956
of	O	O:0.999990
mine	O	O:0.998430
]	O	O:0.999903
(	O	O:0.999923
#URL	O	O:0.999119
)	O	O:0.999989
gets	O	O:0.999274
you	O	O:0.999979
close	O	O:0.999825
enough	O	O:0.999723
.	O	O:0.999907
	
You'll	O	O:0.999913
have	O	O:0.999957
to	O	O:0.999998
split	O	O:0.999995
your	O	O:0.999968
sentences	O	O:0.999953
into	O	O:0.999985
columns	O	O:0.999984
of	O	O:0.999966
words	O	O:0.999415
and	O	O:0.999999
then	O	O:0.999838
apply	O	O:0.511204
.	O	O:0.999543
	
That	O	O:0.999448
article	O	O:0.999937
used	O	O:0.999667
`	O	O:0.999947
id	O	O:0.996965
`	O	O:0.999996
s	O	O:0.999517
to	O	O:0.999994
achieve	O	O:0.999992
different	O	O:0.999921
formatting	O	O:0.999677
for	O	O:0.999966
each	O	O:0.999545
table	O	O:0.999723
but	O	O:0.999984
you	O	O:0.999976
could	O	O:0.999996
just	O	O:0.999994
apply	O	O:0.935819
the	O	O:0.999856
desired	O	O:0.999022
CSS	O	O:0.999986
styles	O	O:0.999868
directly	O	O:0.999796
to	O	O:0.999998
the	O	O:0.999999
appropriate	O	O:0.999953
HTML	O	O:0.999862
tags	O	O:0.999300
.	O	O:0.999888
	
For	O	O:0.999875
instance	O	O:0.999606
,	O	O:0.999998
your	O	O:0.999884
image	O	O:0.999124
is	O	O:0.999997
from	O	O:0.999973
their	O	O:0.999032
"	O	O:0.999991
Box	O	O:0.999208
3	O	O:0.999675
"	O	O:0.999974
example	O	O:0.999837
,	O	O:0.999988
which	O	O:0.999968
used	O	O:0.999914
the	O	O:0.999977
ids	O	O:0.612327
`	O	O:0.999984
box-table-a	O	O:0.986700
`	O	O:0.999987
and	O	O:0.999272
`	O	O:0.999996
box-table-b	O	O:0.915652
`	O	O:0.999971
and	O	O:0.999953
the	O	O:0.999996
corresponding	O	O:0.994921
formatting	O	O:0.996919
is	O	O:0.999770
	
Some	O	O:0.999832
of	O	O:0.999982
these	O	O:0.999893
are	O	O:0.999989
documented	O	O:0.999310
[	O	O:0.999988
here	O	O:0.999444
]	O	O:0.999695
(	O	O:0.999920
#URL	O	O:0.999640
)	O	O:0.999927
,	O	O:0.999957
but	O	O:0.999992
some	O	O:0.999704
are	O	O:0.999984
missing	O	O:0.998729
.	O	O:0.999676
	
However	O	O:0.999522
,	O	O:0.999967
it	O	O:0.999991
looks	O	O:0.999956
like	O	O:0.999996
many	O	O:0.999976
of	O	O:0.999990
the	O	O:0.999988
missing	O	O:0.999854
ones	O	O:0.999274
are	O	O:0.999994
fairly	O	O:0.999970
clear	O	O:0.999512
because	O	O:0.999961
they	O	O:0.999967
just	O	O:0.999991
apply	O	O:0.871021
a	O	O:0.999974
mathematical	O	O:0.973495
function	O	O:0.999948
of	O	O:0.999981
the	O	O:0.999986
same	O	O:0.999984
name	O	O:0.999950
to	O	O:0.999997
each	O	O:0.999993
group	O	O:0.988351
(	O	O:0.999991
e.g.	O	O:0.999690
,	O	O:0.999977
`	O	O:0.999990
cummin	B-API	B-API:0.992358
`)	O	O:0.999986
.	O	O:0.999653
	
these	O	O:0.999919
ultimately	O	O:0.999982
just	O	O:0.999933
call	O	O:0.999643
the	O	O:0.999989
same	O	O:0.996611
named	O	O:0.997291
DataFrame	B-API	O:0.985009
method	O	O:0.999729
(	O	O:0.999990
or	O	O:0.999998
an	O	O:0.999987
optimized	O	O:0.999882
for	O	O:0.999952
groupby	B-API	B-API:0.978077
version	O	O:0.998095
)	O	O:0.999570
(	O	O:0.999992
asside	O	O:0.999882
from	O	O:0.999931
the	O	O:0.999988
specific	O	O:0.999894
methods	O	O:0.998881
``	O	O:0.999945
transform	O	B-API:0.809481
/	O	O:0.999972
apply	O	B-API:0.733714
/	O	O:0.999389
agg	O	B-API:0.986553
/	O	O:0.999950
groups	O	O:0.992557
``)	O	O:0.999325
	
You'll	O	O:0.999892
need	O	O:0.999961
to	O	O:0.999998
mess	O	O:0.999989
with	O	O:0.999981
the	O	O:0.999981
`	O	O:0.999992
b	O	O:0.998779
`	O	O:0.999999
column	O	O:0.999782
to	O	O:0.999998
get	O	O:0.999997
things	O	O:0.999789
flipped	O	O:0.999729
.	O	O:0.999901
	
I'd	O	O:0.999964
say	O	O:0.999993
multiply	O	O:0.999938
by	O	O:0.999936
-1	O	O:0.999917
,	O	O:0.999963
apply	O	O:0.503761
the	O	O:0.999818
sub	O	O:0.998396
and	O	O:0.999982
div	O	O:0.994295
,	O	O:0.999995
then	O	O:0.999952
multiply	O	O:0.999993
by	O	O:0.999990
-1	O	O:0.999834
again	O	O:0.998943
.	O	O:0.999884
	
If	O	O:0.999954
I	O	O:0.999996
find	O	O:0.999984
a	O	O:0.999995
more	O	O:0.999311
elegant	O	O:0.999275
way	O	O:0.999728
(	O	O:0.999971
for	O	O:0.999992
example	O	O:0.999788
,	O	O:0.999993
using	O	O:0.999971
the	O	O:0.999553
column	O	O:0.997782
index	O	O:0.999294
:	O	O:0.999957
(	O	O:0.999998
0	O	O:0.999988
or	O	O:0.999989
1	O	O:0.999854
)	O	O:0.999992
mod	O	O:0.822104
2	O	O:0.999963
-	O	O:0.999978
1	O	O:0.999985
to	O	O:0.999988
select	O	O:0.999947
the	O	O:0.999996
sign	O	O:0.999488
in	O	O:0.999995
the	O	O:0.999995
apply	O	B-API:0.510005
operation	O	O:0.998919
so	O	O:0.999977
it	O	O:0.999996
can	O	O:0.999986
be	O	O:1.000000
done	O	O:0.999966
with	O	O:0.999947
just	O	O:0.999938
one	O	O:0.999995
apply	O	B-API:0.892217
command	O	O:0.998702
,	O	O:0.999974
I'll	O	O:0.999652
let	O	O:0.999560
you	O	O:0.999955
know	O	O:0.999682
.	O	O:0.999965
	
Using	O	O:0.999662
the	O	O:0.999920
apply	O	B-API:0.932538
function	O	O:0.999502
,	O	O:0.999989
we	O	O:0.999996
can	O	O:0.999977
compare	O	O:0.999999
entire	O	O:0.999995
columns	O	O:0.999968
to	O	O:0.999993
the	O	O:1.000000
empty	O	O:0.998910
string	O	O:0.999525
and	O	O:0.999997
then	O	O:0.999979
aggregate	O	O:0.925672
down	O	O:0.999593
with	O	O:0.999954
the	O	O:0.999977
`	O	O:0.999966
.all()	B-API	B-API:0.999974
`	O	O:0.999965
method	O	O:0.999601
.	O	O:0.999937
	
#CODE	O	O:0.998453
	
Can't	O	O:0.999794
figure	O	O:0.999607
out	O	O:0.999974
how	O	O:0.999988
to	O	O:0.999993
apply	O	O:0.990675
the	O	O:0.999939
solution	O	O:0.999435
to	O	O:0.999996
my	O	O:0.999999
code	O	O:0.999823
,,	O	O:0.999998
when	O	O:0.999806
I	O	O:0.999995
try	O	O:0.999998
to	O	O:0.999990
just	O	O:0.999990
run	O	O:0.999949
the	O	O:0.999996
code	O	O:0.999887
as	O	O:0.999997
provided	O	O:0.999743
I	O	O:0.999989
get	O	O:0.999831
module	O	O:0.999400
not	O	O:0.999968
callable	O	O:0.999804
and	O	O:0.999999
when	O	O:0.999585
I	O	O:0.999993
try	O	O:0.999999
to	O	O:0.999978
place	O	O:0.999998
the	O	O:0.999999
code	O	O:0.999807
in	O	O:0.999997
the	O	O:0.999981
"	O	O:0.999986
with	O	O:0.998050
"	O	O:0.999938
clause	O	O:0.999813
it	O	O:0.999996
blows	O	O:0.999605
up	O	O:0.999938
..	O	O:0.999548
	
(	O	O:0.999976
so	O	O:0.999988
I	O	O:0.999993
have	O	O:0.999966
not	O	O:0.999952
translated	O	O:0.999992
that	O	O:0.999928
correctly	O	O:0.999981
.	O	O:0.999997
)	O	O:0.999986
I	O	O:0.999987
tried	O	O:0.999948
to	O	O:0.999990
just	O	O:0.999973
use	O	O:0.999988
the	O	O:0.999909
Family=clause	O	O:0.999257
inside	O	O:0.999892
the	O	O:0.999961
"	O	O:0.999979
with	O	O:0.999037
"	O	O:0.999969
gives	O	O:0.998905
KeyError	O	O:0.999700
:	O	O:0.999917
0	O	O:0.999746
	
The	O	O:0.999681
`	O	O:0.999985
converters	O	O:0.904780
`	O	O:0.999987
parameter	O	O:0.999174
tells	O	O:0.999893
`	O	O:0.999978
read_csv	B-API	B-API:0.999299
`	O	O:0.999996
to	O	O:0.999968
apply	O	O:0.988913
the	O	O:0.999888
given	O	O:0.981650
	
Appreciate	O	O:0.999697
the	O	O:0.999980
quick	O	O:0.997999
answer	O	O:0.999435
@USER	O	O:0.999049
.	O	O:0.999736
	
However	O	O:0.999860
,	O	O:0.999989
I	O	O:0.999999
seem	O	O:0.999963
to	O	O:0.999963
get	O	O:0.999997
conversion	O	O:0.999958
error	O	O:0.999979
when	O	O:0.999938
trying	O	O:0.999966
to	O	O:0.999997
apply	O	O:0.827554
the	O	O:0.999598
.loc	B-API	B-API:0.998574
.	O	O:0.999745
	
Moreover	O	O:0.999873
,	O	O:0.999989
as	O	O:0.999999
this	O	O:0.998458
is	O	O:0.999998
just	O	O:0.999857
an	O	O:0.999997
example	O	O:0.999863
,	O	O:0.999995
do	O	O:0.999988
you	O	O:0.999985
think	O	O:0.999973
there	O	O:0.999950
is	O	O:0.999997
a	O	O:0.999992
way	O	O:0.999930
to	O	O:0.999985
apply	O	O:0.966442
the	O	O:0.999751
"	O	O:0.999892
*=	O	O:0.999885
-1	O	O:0.999851
"	O	O:0.999976
to	O	O:0.999980
all	O	O:1.000000
columns	O	O:0.999968
,	O	O:0.999997
as	O	O:0.999991
'	O	O:0.999915
1Y	O	O:0.999309
'	O	O:0.999885
:	O	O:0.999855
'	O	O:0.999992
1Y4M	O	O:0.999223
'	O	O:0.999954
?	O	O:0.999959
	
What	O	O:0.998513
is	O	O:0.999983
the	O	O:0.999974
difference	O	O:0.999011
between	O	O:0.999190
pandas	O	O:0.999298
agg	O	B-API:0.890914
and	O	O:0.999964
apply	O	B-API:0.935623
function	O	O:0.995523
?	O	O:0.999695
	
Using	O	O:0.998668
`	O	O:0.999935
apply	O	B-API:0.994754
`	O	O:0.999517
:	O	O:0.999271
#CODE	O	O:0.999898
	
`	O	O:0.999972
apply	O	B-API:0.976008
`	O	O:0.999952
applies	O	O:0.997846
the	O	O:0.999941
function	O	O:0.999636
to	O	O:0.999991
each	O	O:0.999992
group	O	O:0.993209
(	O	O:0.999999
your	O	O:0.999781
`	O	O:0.999987
Species	O	O:0.998502
`)	O	O:0.999979
.	O	O:0.999607
	
Your	O	O:0.998300
function	O	O:0.999948
returns	O	O:0.999628
1	O	O:0.999954
,	O	O:0.999996
so	O	O:0.999993
you	O	O:0.999997
end	O	O:0.999992
up	O	O:0.999990
with	O	O:0.999805
3	O	O:0.999924
groups	O	O:0.999142
.	O	O:0.999889
	
So	O	O:0.999936
for	O	O:0.999983
all	O	O:0.999975
4.000	O	O:0.998908
locations	O	O:0.999906
you	O	O:0.999969
apply	O	O:0.900016
the	O	O:0.999963
distance	O	O:0.998227
function	O	O:0.999953
to	O	O:0.999992
all	O	O:1.000000
11.000	O	O:0.998886
towers	O	O:0.999053
?	O	O:0.999965
	
That	O	O:0.999901
seems	O	O:0.999924
rather	O	O:0.999952
wasteful	O	O:0.999843
,	O	O:0.999994
as	O	O:0.999998
most	O	O:0.999487
towers	O	O:0.999645
are	O	O:0.999897
*	O	O:0.999994
not	O	O:0.999870
*	O	O:0.999996
near	O	O:0.999223
.	O	O:0.999766
	
You	O	O:0.999772
could	O	O:0.999896
already	O	O:0.999992
greatly	O	O:0.999852
reduce	O	O:0.999311
the	O	O:0.999986
work	O	O:0.999907
by	O	O:0.999994
binning	O	O:0.999898
all	O	O:0.999944
the	O	O:0.999991
towers	O	O:0.999201
on	O	O:0.999990
certain	O	O:0.999765
lat	O	O:0.999401
/	O	O:0.999997
long	O	O:0.999687
combinations	O	O:0.999799
,	O	O:0.999997
such	O	O:0.999992
that	O	O:0.999976
you	O	O:0.999995
only	O	O:0.999998
have	O	O:0.999995
to	O	O:0.999999
iterate	O	O:0.999998
over	O	O:0.999961
a	O	O:0.999995
small	O	O:0.999891
subset	O	O:0.999598
of	O	O:0.999987
all	O	O:0.999973
the	O	O:0.999997
towers	O	O:0.999000
to	O	O:0.999995
find	O	O:0.999999
your	O	O:0.999979
best	O	O:0.999742
match	O	O:0.999799
.	O	O:0.999844
	
Does	O	O:0.999751
this	O	O:0.999945
mean	O	O:0.999918
that	O	O:0.999932
it	O	O:0.999997
recognizes	O	O:0.999954
each	O	O:0.999910
string	O	O:0.999947
as	O	O:0.999996
a	O	O:0.999964
word	O	O:0.998725
?	O	O:0.999946
	
so	O	O:0.999991
when	O	O:0.999899
I	O	O:0.999998
apply	O	O:0.965712
the	O	O:0.998574
filter	O	O:0.932119
it	O	O:0.999986
will	O	O:0.999932
filter	O	O:0.999455
against	O	O:0.999995
each	O	O:0.999803
of	O	O:0.999994
the	O	O:0.999992
words	O	O:0.999843
in	O	O:0.999969
my	O	O:0.999973
List2	O	O:0.998428
?	O	O:0.999941
	
#CODE	O	O:0.998453
	
I	O	O:0.999949
usually	O	O:0.999959
read	O	O:0.999205
everything	O	O:0.999887
as	O	O:0.999991
string	O	O:0.999661
,	O	O:0.999997
then	O	O:0.999945
apply	O	O:0.969557
a	O	O:0.999985
helper	O	O:0.946327
function	O	O:0.999874
that	O	O:0.999626
includes	O	O:0.999871
try	O	O:0.999935
/	O	O:0.999965
except	O	O:0.999919
to	O	O:0.999993
convert	O	O:0.999933
each	O	O:0.999910
individual	O	O:0.999067
string	O	O:0.999638
.	O	O:0.999596
	
Or	O	O:0.999983
you	O	O:0.999971
can	O	O:0.999993
validate	O	O:1.000000
your	O	O:0.999979
strings	O	O:0.999362
with	O	O:0.999949
regex	O	O:0.999775
,	O	O:0.999988
and	O	O:0.999998
substitute	O	O:0.999931
all	O	O:0.999983
the	O	O:0.999988
values	O	O:0.999409
that	O	O:0.999890
aren't	O	O:1.000000
a	O	O:0.999999
date	O	O:0.997772
with	O	O:0.999366
''	O	O:0.999850
.	O	O:0.999906
	
I	O	O:0.999988
have	O	O:0.999975
the	O	O:0.999980
following	O	O:0.999816
problem	O	O:0.999809
,	O	O:0.999993
I	O	O:0.999999
have	O	O:0.999989
a	O	O:0.999993
Panda	O	O:0.999923
data	O	O:0.999911
frame	O	O:0.999992
and	O	O:0.999996
I	O	O:0.999998
want	O	O:0.999923
to	O	O:0.999950
process	O	O:0.999997
each	O	O:0.999931
row	O	O:0.999989
ny	O	O:0.999982
using	O	O:0.999944
the	O	O:0.997911
apply	O	B-API:0.987430
method	O	O:0.997739
.	O	O:0.999448
	
Each	O	O:0.998805
row	O	O:0.999853
should	O	O:0.999891
be	O	O:0.999999
processed	O	O:0.999990
by	O	O:0.999984
using	O	O:0.999987
a	O	O:0.997629
function	O	O:0.966273
(	O	O:0.999664
static	O	O:0.997947
method	O	O:0.999907
)	O	O:0.999980
within	O	O:0.999778
the	O	O:0.999991
same	O	O:0.999779
class	O	O:0.999881
..	O	O:0.999912
	
#CODE	O	O:0.998453
	
You	O	O:0.999850
can	O	O:0.999987
group	O	O:0.999970
by	O	O:0.999986
`'	O	O:0.999890
Currency	O	O:0.997095
'`	O	O:0.999882
and	O	O:0.999962
apply	O	B-API:0.662065
`	O	O:0.999876
diff	O	B-API:0.999328
`	O	O:0.999971
but	O	O:0.999912
first	O	O:0.999962
you	O	O:0.999994
need	O	O:0.999979
to	O	O:0.999998
convert	O	O:0.999990
the	O	O:0.999999
data	O	O:0.999951
to	O	O:0.999986
`	O	O:1.000000
float	O	O:0.984734
`	O	O:0.999995
,	O	O:0.999908
try	O	O:0.999986
this	O	O:0.998961
:	O	O:0.999987
#CODE	O	O:0.999885
	
Hi	O	O:0.999756
again	O	O:0.999382
@USER	O	O:0.999378
.	O	O:0.999745
	
Your	O	O:0.999797
code-update	O	O:0.994226
is	O	O:0.999992
very	O	O:0.999529
much	O	O:0.999512
appreciated	O	O:0.999418
.	O	O:0.999637
	
However	O	O:0.999829
,	O	O:0.999996
when	O	O:0.999967
applying	O	O:0.999781
"	O	O:0.999996
diff	O	B-API:0.949487
"	O	O:0.999974
to	O	O:0.999923
my	O	O:0.999998
groupby-function	O	O:0.998685
,	O	O:0.999994
it	O	O:0.999987
seems	O	O:0.999963
that	O	O:0.999977
Python	O	O:0.999996
mess	O	O:0.999841
up	O	O:0.999970
the	O	O:0.999997
original	O	O:0.999951
order	O	O:0.999931
of	O	O:0.999988
the	O	O:0.999973
currencys	O	O:0.998119
.	O	O:0.999895
	
What's	O	O:0.999748
probably	O	O:0.999805
happening	O	O:0.998961
is	O	O:0.999991
that	O	O:0.999943
when	O	O:0.999963
I	O	O:0.999998
apply	O	O:0.966619
groupby	B-API	B-API:0.994261
currencies	O	O:0.988066
,	O	O:0.999980
Python	O	O:0.999956
also	O	O:0.999937
SORTS	O	O:0.999970
the	O	O:0.999996
data	O	O:0.999970
accordingly	O	O:0.999796
->	O	O:0.999994
so	O	O:0.999975
e.g.	O	O:0.999881
if	O	O:0.999994
my	O	O:0.999999
original	O	O:0.999949
data	O	O:0.999822
is	O	O:0.999993
stored	O	O:0.999284
in	O	O:0.999991
order	O	O:0.999393
"	O	O:0.999951
EUR	O	O:0.999605
,	O	O:0.999981
CHF	O	O:0.997370
,	O	O:0.999988
DKK	O	O:0.999222
"	O	O:0.999988
the	O	O:0.999947
diff-command	O	O:0.998514
makes	O	O:0.999928
the	O	O:0.999996
data	O	O:0.999742
"	O	O:0.999984
CHF	O	O:0.998614
,	O	O:0.999989
DKK	O	O:0.999293
,	O	O:0.999961
EUR	O	O:0.999853
"	O	O:0.999969
,	O	O:0.999972
i.e.	O	O:0.999959
when	O	O:0.999964
putting	O	O:0.999941
back	O	O:0.999801
the	O	O:0.999990
currency-labels	O	O:0.996630
,	O	O:0.999997
they	O	O:0.999967
obviously	O	O:0.999981
will	O	O:0.999889
be	O	O:0.999993
mis-labeled	O	O:0.999273
.	O	O:0.999608
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999912
to	O	O:0.999990
maybe	O	O:0.999998
tell	O	O:0.999735
Python	O	O:0.999836
,	O	O:0.999955
*	O	O:0.999987
not	O	O:0.999947
*	O	O:0.999999
to	O	O:0.999999
order	O	O:0.999998
by	O	O:0.999983
currency	O	O:0.997840
,	O	O:0.999976
but	O	O:0.999946
leave	O	O:0.999356
the	O	O:0.999995
order	O	O:0.999794
as	O	O:0.999891
is	O	O:0.999922
?	O	O:0.999904
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
It	O	O:0.999942
could	O	O:0.999954
be	O	O:0.999998
an	O	O:0.999997
groupby's	O	O:0.995781
apply	O	B-API:0.644102
will	O	O:0.997155
do	O	O:0.999951
it	O	O:0.999995
,	O	O:0.999999
like	O	O:0.999958
I	O	O:0.999999
say	O	O:0.999987
in	O	O:0.999984
other	O	O:0.999869
question	O	O:0.999895
,	O	O:0.999988
depends	O	O:0.999750
what	O	O:0.999828
you're	O	O:0.999962
doing	O	O:0.999815
!	O	O:0.999891
	
Note	O	O:0.999321
:	O	O:0.999999
most	O	O:0.999954
of	O	O:0.999996
the	O	O:0.999985
time	O	O:0.999966
you	O	O:0.999973
don't	O	O:0.999995
need	O	O:0.999992
to	O	O:0.999994
do	O	O:1.000000
this	O	O:0.999967
,	O	O:0.999995
apply	O	O:0.632700
,	O	O:0.999873
aggregate	O	B-API:0.915795
and	O	O:0.999967
transform	O	B-API:0.506781
are	O	O:0.999993
your	O	O:0.999883
friends	O	O:0.998384
!	O	O:0.999935
	
I	O	O:0.999966
think	O	O:0.999877
it	O	O:0.999940
may	O	O:0.999994
be	O	O:0.999997
simpler	O	O:0.999951
to	O	O:0.999968
use	O	O:0.999998
an	O	O:0.999922
apply	O	B-API:0.690738
here	O	O:0.982818
:	O	O:0.999847
#CODE	O	O:0.999828
	
@USER	O	O:0.999763
this	O	O:0.999909
seems	O	O:0.999960
to	O	O:0.999995
work	O	O:0.999997
with	O	O:0.999941
apply	O	B-API:0.733855
:	O	O:0.999851
s	O	O:0.996365
(	O	O:0.999991
Thanks	O	O:0.999649
for	O	O:0.999966
editing	O	O:0.996411
,	O	O:0.999888
makes	O	O:0.999599
it	O	O:0.999989
much	O	O:0.999856
easier	O	O:0.999918
,	O	O:0.999995
if	O	O:0.999979
I	O	O:0.999950
hadn't	O	O:0.999747
already	O	O:0.999657
+1d	O	O:0.999883
,	O	O:0.999986
I	O	O:0.999991
would	O	O:0.999965
again	O	O:0.999826
!	O	O:0.999993
)	O	O:0.999879
:)	O	O:0.999626
	
When	O	O:0.999632
you	O	O:0.999992
do	O	O:0.999997
an	O	O:0.999998
apply	O	O:0.797308
each	O	O:0.999431
column	O	O:0.998970
is	O	O:0.999997
realigned	O	O:0.999213
with	O	O:0.999963
the	O	O:0.999998
other	O	O:0.999846
results	O	O:0.999924
,	O	O:0.999996
since	O	O:0.999996
every	O	O:0.999881
value	O	O:0.999986
between	O	O:0.998268
1	O	O:0.999907
and	O	O:0.999976
5	O	O:0.999538
is	O	O:0.999942
seen	O	O:0.996962
it's	O	O:0.999930
aligned	O	O:0.999812
with	O	O:0.999745
`	O	O:0.999931
range	O	O:0.998825
(	O	O:0.999984
1	O	O:0.999922
,	O	O:0.999979
6	O	O:0.999811
)`	O	O:0.998573
:	O	O:0.999919
#CODE	O	O:0.999859
	
When	O	O:0.999767
you	O	O:0.999987
do	O	O:0.999994
the	O	O:0.999994
apply	O	B-API:0.847043
,	O	O:0.999926
it	O	O:0.999949
concats	O	O:0.999887
the	O	O:0.999998
result	O	O:0.999923
of	O	O:0.999990
doing	O	O:0.999975
this	O	O:0.999934
for	O	O:0.999983
each	O	O:0.998982
column	O	O:0.997189
:	O	O:0.999980
#CODE	O	O:0.999837
	
I	O	O:0.999940
would	O	O:0.999995
then	O	O:0.999966
like	O	O:0.999999
to	O	O:0.999999
apply	O	O:0.992972
some	O	O:0.999560
vba	O	O:0.999906
formatting	O	O:0.999911
to	O	O:0.999994
the	O	O:0.999998
results	O	O:0.999460
-	O	O:0.999967
but	O	O:0.999868
i'm	O	O:0.999878
not	O	O:0.999993
sure	O	O:0.999878
which	O	O:0.999970
dll	O	O:0.999927
or	O	O:0.999996
addon	O	O:0.999881
or	O	O:0.999999
something	O	O:0.999878
I	O	O:0.999987
would	O	O:0.999997
need	O	O:0.999940
to	O	O:0.999998
call	O	O:0.999987
excel	O	O:0.999899
vba	O	O:0.999735
using	O	O:0.999927
python	O	O:0.997397
to	O	O:0.999904
format	O	O:0.999994
headings	O	O:0.999825
as	O	O:0.999990
bold	O	O:0.999180
and	O	O:0.999988
add	O	O:0.999903
color	O	O:0.999218
etc	O	O:0.999641
.	O	O:0.999902
	
Doesn't	O	O:0.999377
`	O	O:0.999990
apply	O	B-API:0.965373
`	O	O:0.999977
call	O	O:0.981679
my	O	O:0.999993
lambda	O	O:0.981981
function	O	O:0.999945
,	O	O:0.999997
once	O	O:0.999893
for	O	O:0.999996
each	O	O:0.999741
column	O	O:0.999632
?	O	O:0.999974
	
Use	O	O:0.999707
`	O	O:0.999988
where	O	O:0.998353
`	O	O:0.999997
instead	O	O:0.999970
of	O	O:0.999993
`	O	O:0.999976
apply	O	B-API:0.978557
`	O	O:0.999916
and	O	O:0.999941
add	O	O:0.999986
days	O	O:0.999290
with	O	O:0.999629
`	O	O:0.999963
np.timedelta64	O	B-API:0.738117
`	O	O:0.999974
#CODE	O	O:0.998186
	
Just	O	O:0.999780
put	O	O:0.999961
your	O	O:0.999977
code	O	O:0.999648
in	O	O:0.999999
a	O	O:0.999982
function	O	O:0.999929
an	O	O:0.999975
use	O	O:0.999930
`	O	O:0.999914
apply	O	B-API:0.997480
`	O	O:0.999467
:	O	O:0.999171
#CODE	O	O:0.999898
	
If	O	O:0.999957
I	O	O:0.999997
just	O	O:0.999972
group	O	O:0.996965
the	O	O:0.999860
object	O	O:0.999434
and	O	O:0.999988
apply	O	O:0.529492
the	O	O:0.999227
interval	O	O:0.986345
function	O	O:0.999807
,	O	O:0.999985
it	O	O:0.999992
looks	O	O:0.999933
like	O	O:0.999960
this	O	O:0.999504
:	O	O:0.999979
#CODE	O	O:0.999843
	
Apply	O	O:0.999753
custom	O	O:0.994508
function	O	O:0.999847
to	O	O:0.999984
the	O	O:1.000000
temporary	O	O:0.999776
column	O	O:0.999682
	
But	O	O:0.999859
I	O	O:0.999984
cannot	O	O:0.999989
work	O	O:0.999871
out	O	O:0.999993
how	O	O:0.999996
to	O	O:0.999987
use	O	O:0.999999
the	O	O:0.999979
group	O	O:0.999665
by	O	O:0.999956
functions	O	O:0.998611
(	O	O:0.999957
transform	O	O:0.658797
,	O	O:0.999988
apply	O	O:0.629651
,	O	O:0.999969
etc	O	O:0.999932
)	O	O:0.999998
to	O	O:0.999982
achieve	O	O:0.999995
the	O	O:0.999998
same	O	O:0.999820
result	O	O:0.999859
.	O	O:0.999954
	
How	O	O:0.999897
can	O	O:0.999950
I	O	O:0.999999
do	O	O:0.999999
this	O	O:0.999786
in	O	O:0.999998
a	O	O:0.999995
concise	O	O:0.999327
way	O	O:0.999982
using	O	O:0.999872
pandas	O	O:0.996680
?	O	O:0.999811
	
@USER	O	O:0.998487
it's	O	O:0.999814
the	O	O:0.999956
for	O	O:0.999980
loop	O	O:0.998966
which	O	O:0.999549
is	O	O:0.999993
slow	O	O:0.999346
,	O	O:0.999996
as	O	O:0.999963
is	O	O:0.999869
apply	O	B-API:0.893914
(	O	O:0.999934
to	O	O:0.999990
a	O	O:0.999999
lesser	O	O:0.998379
extent	O	O:0.993258
)	O	O:0.999940
.	O	O:0.999622
	
Although	O	O:0.999496
it's	O	O:0.999849
possible	O	O:0.999976
this	O	O:0.999966
could	O	O:0.999968
be	O	O:0.999999
made	O	O:0.999898
faster	O	O:0.998105
!	O	O:0.999838
	
Apply	O	O:0.999868
then	O	O:0.999031
calls	O	O:0.999979
the	O	O:0.999981
function	O	O:0.999019
on	O	O:0.999987
each	O	O:0.999919
group	O	O:0.999227
and	O	O:0.999997
assimilates	O	O:0.999873
the	O	O:0.999808
results	O	O:0.999190
	
The	O	O:0.999968
result	O	O:0.999953
of	O	O:0.999990
apply	O	B-API:0.898947
is	O	O:0.999957
a	O	O:0.999977
list	O	O:0.991572
of	O	O:0.999989
index	O	O:0.999880
values	O	O:0.999985
that	O	O:0.999993
represent	O	O:0.999996
rows	O	O:0.999943
with	O	O:0.999923
B	O	O:0.999956
==	O	O:0.999965
1	O	O:0.999858
if	O	O:0.999991
more	O	O:0.999908
than	O	O:0.999975
one	O	O:0.999996
row	O	O:0.999957
in	O	O:0.999993
the	O	O:0.999996
group	O	O:0.999143
else	O	O:0.999941
the	O	O:0.999992
default	O	O:0.999798
row	O	O:0.999921
for	O	O:0.999985
given	O	O:0.994756
A	O	O:0.999918
	
The	O	O:0.999975
data	O	O:0.999173
is	O	O:0.999974
sparse	O	O:0.999277
but	O	O:0.999965
I	O	O:0.999989
do	O	O:0.999993
need	O	O:0.999963
them	O	O:0.999087
.	O	O:0.999961
	
I	O	O:0.999945
am	O	O:0.999993
gonna	O	O:0.998495
try	O	O:0.999980
to	O	O:0.999995
apply	O	O:0.988093
on	O	O:0.999984
a	O	O:0.999996
small	O	O:0.999925
set	O	O:0.999954
of	O	O:0.999996
data	O	O:0.999891
first	O	O:0.999871
.	O	O:0.999932
	
Thanks	O	O:0.999813
a	O	O:0.999978
lot	O	O:0.998291
!	O	O:0.999842
	
Is	O	O:0.999985
there	O	O:0.999976
a	O	O:0.999995
vectorized	O	O:0.999291
way	O	O:0.999960
to	O	O:0.999975
apply	O	O:0.975112
that	O	O:0.999327
formatting	O	O:0.999402
command	O	O:0.999871
in	O	O:0.999974
either	O	O:0.999816
context	O	O:0.999637
?	O	O:0.999965
	
Ok	O	O:0.999875
,	O	O:0.999996
then	O	O:0.999833
how	O	O:0.999996
would	O	O:0.999991
I	O	O:0.999999
apply	O	O:0.990666
that	O	O:0.997150
in	O	O:0.999990
my	O	O:0.999988
case	O	O:0.999852
?	O	O:0.999982
	
You	O	O:0.999790
can	O	O:0.999988
just	O	O:0.999988
apply	O	O:0.985055
this	O	O:0.999592
to	O	O:0.999993
each	O	O:0.999991
case	O	O:0.999731
/	O	O:0.999990
group	O	O:0.983760
:	O	O:0.999954
#CODE	O	O:0.999691
	
how	O	O:0.999921
to	O	O:0.999995
apply	O	O:0.996575
a	O	O:0.999884
function	O	O:0.999010
to	O	O:0.999998
multiple	O	O:0.999999
columns	O	O:0.999907
in	O	O:0.999997
a	O	O:0.999997
pandas	O	O:0.999908
dataframe	B-API	O:0.999404
at	O	O:0.999988
one	O	O:0.999986
time	O	O:0.999832
	
Question	O	O:0.998649
:	O	O:0.999965
1	O	O:0.999879
-	O	O:0.999998
what	O	O:0.999958
if	O	O:0.999994
I	O	O:0.999999
have	O	O:0.999992
a	O	O:0.999992
dataframe	B-API	O:0.998734
with	O	O:0.999897
50	O	O:0.999978
columns	O	O:0.999762
,	O	O:0.999979
and	O	O:0.999998
want	O	O:0.999952
to	O	O:0.999956
apply	O	O:0.988305
that	O	O:0.999688
formatting	O	O:0.999865
to	O	O:0.999998
multiple	O	O:0.999998
columns	O	O:0.999948
,	O	O:0.999998
etc	O	O:0.999997
column	O	O:0.999932
1	O	O:0.999986
,	O	O:0.999987
3	O	O:0.999926
,	O	O:0.999982
5	O	O:0.999961
,	O	O:0.999985
7	O	O:0.999939
,	O	O:0.999983
9	O	O:0.999821
,	O	O:0.999955
	
Is	O	O:0.999977
there	O	O:0.999972
also	O	O:0.999979
any	O	O:0.999996
way	O	O:0.999962
to	O	O:0.999994
programatically	O	O:0.999996
create	O	O:0.999852
that	O	O:0.999892
string	O	O:0.999878
(	O	O:0.999978
which	O	O:0.999901
would	O	O:0.999984
change	O	O:0.999965
depending	O	O:0.999965
on	O	O:0.999980
the	O	O:0.999994
number	O	O:0.999976
of	O	O:0.999994
columns	O	O:0.999948
you	O	O:0.999985
had	O	O:0.999961
)	O	O:0.999992
and	O	O:0.999985
apply	O	O:0.586016
the	O	O:0.999167
format_number	O	O:0.706823
function	O	O:0.999519
?	O	O:0.999920
	
I.e.	O	O:0.999691
the	O	O:0.999986
above	O	O:0.999469
would	O	O:0.999955
work	O	O:0.999987
fine	O	O:0.999996
if	O	O:0.999995
I	O	O:0.999998
knew	O	O:0.999854
exactly	O	O:0.999284
how	O	O:0.999992
many	O	O:0.999945
columns	O	O:0.999965
were	O	O:0.999904
in	O	O:0.999996
the	O	O:0.999992
sheet	O	O:0.999944
every	O	O:0.999925
time	O	O:0.999879
,	O	O:0.999988
but	O	O:0.999981
If	O	O:0.999986
I	O	O:0.999991
didn't	O	O:0.999959
know	O	O:0.999656
the	O	O:0.999996
number	O	O:0.999842
of	O	O:0.999987
columns	O	O:0.999915
,	O	O:0.999993
and	O	O:0.999995
wanted	O	O:0.999956
to	O	O:0.999958
apply	O	O:0.977214
the	O	O:0.999967
same	O	O:0.999029
function	O	O:0.999954
to	O	O:0.999998
every	O	O:0.999998
column	O	O:0.999938
,	O	O:0.999974
is	O	O:0.999998
there	O	O:0.999967
a	O	O:0.999995
better	O	O:0.999674
way	O	O:0.999970
of	O	O:0.999981
doing	O	O:0.999539
it	O	O:0.999964
?	O	O:0.999843
	
@USER	O	O:0.997632
:	O	O:0.999957
If	O	O:0.999991
you	O	O:0.999996
just	O	O:0.999984
want	O	O:0.999993
to	O	O:0.999979
apply	O	O:0.992474
it	O	O:0.999968
to	O	O:0.999987
all	O	O:1.000000
the	O	O:0.999996
columns	O	O:0.999749
,	O	O:0.999999
just	O	O:0.999968
do	O	O:0.999986
`	O	O:0.999960
df.applymap	B-API	B-API:0.999238
(	O	O:0.999981
format_number	O	O:0.993472
)`	O	O:0.999078
.	O	O:0.999555
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999981
`	O	O:0.999969
apply	O	B-API:0.987053
`	O	O:0.999970
like	O	O:0.998715
this	O	O:0.999730
:	O	O:0.999971
#CODE	O	O:0.999812
	
@USER	O	O:0.999481
ignoring	O	O:0.999552
my	O	O:0.999944
code	O	O:0.999891
example	O	O:0.999959
,	O	O:0.999997
if	O	O:0.999996
you	O	O:0.999976
perform	O	O:0.999634
`	O	O:0.999996
apply	O	B-API:0.952694
`	O	O:0.999983
to	O	O:0.999953
a	O	O:1.000000
dataframe	B-API	O:0.998806
then	O	O:0.999814
the	O	O:1.000000
dataframe	B-API	O:0.999797
itself	O	O:0.998789
is	O	O:0.999998
modified	O	O:0.999812
by	O	O:0.999997
any	O	O:0.999993
changes	O	O:0.997594
in	O	O:0.999998
your	O	O:0.999773
function	O	O:0.999972
so	O	O:0.999995
you	O	O:0.999888
would	O	O:0.999985
not	O	O:0.999999
need	O	O:0.999998
to	O	O:0.999999
assign	O	O:0.999987
to	O	O:0.999995
the	O	O:1.000000
column	O	O:0.999933
,	O	O:0.999996
you	O	O:0.999990
may	O	O:0.999997
still	O	O:0.999991
need	O	O:0.999992
to	O	O:0.999999
depending	O	O:0.999996
on	O	O:0.999991
what	O	O:0.999993
your	O	O:0.999894
function	O	O:0.999746
is	O	O:0.999994
doing	O	O:0.998798
.	O	O:0.999731
	
The	O	O:0.999888
point	O	O:0.999887
being	O	O:0.999919
that	O	O:0.999914
you	O	O:0.999996
just	O	O:0.999995
need	O	O:0.999995
to	O	O:0.999995
call	O	O:0.999940
`	O	O:0.999987
df.apply	B-API	B-API:0.999169
`	O	O:0.999889
and	O	O:0.999890
not	O	O:0.999997
need	O	O:0.999896
to	O	O:0.999998
say	O	O:0.999999
do	O	O:0.999980
`	O	O:0.999994
df	O	O:0.997665
[[	O	O:0.999952
'	O	O:0.999955
col1	O	O:0.998448
'	O	O:0.999982
,	O	O:0.999945
'	O	O:0.999982
col2	O	O:0.998662
'	O	O:0.999984
,	O	O:0.999953
'	O	O:0.999979
col3	O	O:0.999597
']]	O	O:0.999914
=d	O	O:0.999258
f.apply	O	O:0.677389
(	O	O:0.999981
lambda	O	O:0.998494
row	O	O:0.999415
:	O	O:0.999851
format_number	O	O:0.993223
(	O	O:0.999988
row	O	O:0.999893
)	O	O:0.999986
,	O	O:0.999986
axis=1	O	O:0.999832
))`	O	O:0.998806
,	O	O:0.999977
in	O	O:0.999994
my	O	O:0.999984
code	O	O:0.999897
the	O	O:0.999991
assignment	O	O:0.996912
is	O	O:0.999996
done	O	O:0.999824
by	O	O:0.999986
the	O	O:0.999928
`	O	O:0.999900
format_number	O	O:0.912720
`	O	O:0.999973
function	O	O:0.999933
so	O	O:0.999996
I	O	O:0.999997
guess	O	O:0.999958
the	O	O:0.999916
assignment	O	O:0.993204
is	O	O:0.999990
implicit	O	O:0.998101
rather	O	O:0.999928
than	O	O:0.999882
explicit	O	O:0.999831
like	O	O:0.999957
BrenBarn's	O	O:0.999615
answer	O	O:0.999341
	
Alternatively	O	O:0.999828
you	O	O:0.999971
could	O	O:0.999995
simply	O	O:0.999993
use	O	O:0.999993
the	O	O:0.999897
apply	O	B-API:0.928674
function	O	O:0.999603
on	O	O:0.999992
all	O	O:1.000000
rows	O	O:0.999965
of	O	O:0.999977
df	O	O:0.999676
.	O	O:0.999936
	
#CODE	O	O:0.998453
	
and	O	O:0.999975
hence	O	O:0.999940
I	O	O:0.999961
can	O	O:0.999990
apply	O	O:0.507018
`	O	O:0.999957
timedelta64	O	O:0.843253
`	O	O:0.999987
conversions	O	O:0.985776
.	O	O:0.999948
	
For	O	O:0.999771
microseconds	O	O:0.998158
#CODE	O	O:0.999604
	
You	O	O:0.999933
can	O	O:0.999987
go	O	O:1.000000
by	O	O:0.999998
using	O	O:0.999963
the	O	O:0.999906
power	O	O:0.999229
of	O	O:0.999963
apply	O	B-API:0.964209
function	O	O:0.998046
:	O	O:0.999793
#CODE	O	O:0.999814
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999991
`	O	O:0.999969
apply	O	B-API:0.993920
`	O	O:0.999827
and	O	O:0.999926
test	O	O:0.999961
your	O	O:0.999892
column	O	O:0.999969
like	O	O:0.999934
so	O	O:0.999923
:	O	O:0.999968
#CODE	O	O:0.999864
	
what	O	O:0.999411
would	O	O:0.999964
be	O	O:0.999998
the	O	O:0.999999
most	O	O:0.999356
efficient	O	O:0.999881
way	O	O:0.999979
to	O	O:0.999973
use	O	O:0.999984
groupby	B-API	B-API:0.998091
and	O	O:0.999862
in	O	O:0.999976
parallel	O	O:0.999120
apply	O	O:0.925582
a	O	O:0.999927
filter	O	O:0.810860
in	O	O:0.999977
pandas	O	O:0.999673
?	O	O:0.999978
	
Python	O	O:0.997038
--	O	O:0.999937
Pandas	O	O:0.997481
:	O	O:0.999977
How	O	O:0.999975
to	O	O:0.999993
apply	O	O:0.987973
aggfunc	O	O:0.987473
to	O	O:0.999991
data	O	O:0.999993
in	O	O:0.999989
currency	O	O:0.999439
format	O	O:0.999862
?	O	O:0.999856
	
I	O	O:0.999993
have	O	O:0.999985
a	O	O:0.999998
table	O	O:0.999897
above	O	O:0.999750
.	O	O:0.999900
	
Want	O	O:0.999755
to	O	O:0.999984
apply	O	O:0.975488
groupby	B-API	B-API:0.992252
function	O	O:0.999557
to	O	O:0.999990
the	O	O:1.000000
data	O	O:0.999819
and	O	O:0.999997
apply	O	O:0.854828
sum	O	O:0.976503
(	O	O:0.999955
over	O	O:0.999888
revenue_total	O	O:0.986374
)	O	O:0.999967
.	O	O:0.999794
	
Pandas	O	O:0.999672
gives	O	O:0.999875
an	O	O:0.999973
NA	O	O:0.999611
value	O	O:0.999916
since	O	O:0.999903
revenue_total	O	O:0.992400
is	O	O:0.999996
an	O	O:0.999962
object	O	O:0.999972
data	O	O:0.999932
type	O	O:0.998654
.	O	O:0.999954
	
Any	O	O:0.999660
help	O	O:0.996766
#CODE	O	O:0.999546
	
Apply	O	O:0.997934
Different	O	O:0.998481
Resampling	O	O:0.997601
Method	O	O:0.999382
to	O	O:0.999973
the	O	O:0.999997
Same	O	O:0.999590
Column	O	O:0.996013
(	O	O:0.999997
pandas	O	O:0.999291
)	O	O:0.999968
	
I	O	O:0.999992
have	O	O:0.999988
a	O	O:0.999990
time	O	O:0.999809
series	O	O:0.999929
and	O	O:0.999994
I	O	O:0.999998
want	O	O:0.999929
to	O	O:0.999927
apply	O	O:0.998525
different	O	O:0.999702
functions	O	O:0.999611
to	O	O:0.999988
the	O	O:1.000000
same	O	O:0.999939
column	O	O:0.999758
.	O	O:0.999975
	
I	O	O:0.999994
have	O	O:0.999876
2	O	O:0.999985
pandas	O	O:0.999985
data	O	O:0.999982
frames	O	O:0.999649
`	O	O:0.999997
df	O	O:0.996936
`	O	O:0.999985
and	O	O:0.999659
`	O	O:0.999994
df_min	O	B-API:0.873039
`	O	O:0.999974
.	O	O:0.999338
	
I	O	O:0.999978
apply	O	O:0.982661
some	O	O:0.998591
filters	O	O:0.998542
to	O	O:0.999976
`	O	O:1.000000
df	O	O:0.997909
`	O	O:0.999997
,	O	O:0.999991
which	O	O:0.999983
results	O	O:0.999936
in	O	O:0.999998
a	O	O:1.000000
single	O	O:0.999824
row	O	O:0.999993
of	O	O:0.999994
data	O	O:0.999818
,	O	O:0.999994
and	O	O:0.999995
I'd	O	O:0.999997
like	O	O:0.999956
to	O	O:0.999993
append	O	O:0.989171
that	O	O:0.999846
row	O	O:0.999989
to	O	O:0.999990
`	O	O:0.999999
df_min	O	B-API:0.550034
`	O	O:0.999989
.	O	O:0.999626
	
I	O	O:0.999969
tried	O	O:0.999973
using	O	O:0.999848
a	O	O:0.999924
loop	O	O:0.998276
to	O	O:0.999992
traverse	O	O:0.999949
`	O	O:0.999992
df	O	O:0.996026
`	O	O:0.999992
,	O	O:0.999823
and	O	O:0.999997
tried	O	O:0.999909
using	O	O:0.999100
`	O	O:0.999713
loc	O	B-API:0.992637
`	O	O:0.999997
to	O	O:0.999862
append	O	O:0.995486
the	O	O:0.999957
row	O	O:0.999902
to	O	O:0.999976
`	O	O:1.000000
df_min	O	O:0.541915
`	O	O:0.999989
.	O	O:0.999626
	
I	O	O:0.999983
keep	O	O:0.999844
getting	O	O:0.999777
a	O	O:0.999933
`	O	O:0.999907
Incompatible	O	O:0.998308
indexer	O	O:0.999096
with	O	O:0.999677
DataFrame	B-API	O:0.992933
`	O	O:0.999994
ValueError	O	O:0.999326
for	O	O:0.999988
the	O	O:0.999924
line	O	O:0.999721
where	O	O:0.999966
I	O	O:0.999994
use	O	O:0.999984
`	O	O:0.999353
loc	O	B-API:0.994526
`	O	O:0.999967
.	O	O:0.998604
	
I	O	O:0.999989
guess	O	O:0.999921
I	O	O:0.999871
am	O	O:0.999994
not	O	O:0.999959
using	O	O:0.999963
`	O	O:0.999849
loc	O	B-API:0.983956
`	O	O:0.999988
correctly	O	O:0.997693
.	O	O:0.999976
	
What	O	O:0.999566
would	O	O:0.999957
be	O	O:0.999997
the	O	O:0.999998
best	O	O:0.998898
way	O	O:0.999968
to	O	O:0.999962
accomplish	O	O:0.999994
what	O	O:0.999896
I	O	O:0.999988
am	O	O:0.999999
trying	O	O:0.999692
to	O	O:0.999988
do	O	O:0.999991
?	O	O:0.999976
	
#CODE	O	O:0.998453
	
Pandas	O	O:0.999601
how	O	O:0.999952
to	O	O:0.999984
apply	O	O:0.999111
multiple	O	O:0.999569
functions	O	O:0.999504
to	O	O:0.999981
dataframe	B-API	O:0.999832
	
Is	O	O:0.999986
there	O	O:0.999983
a	O	O:0.999995
way	O	O:0.999909
to	O	O:0.999992
apply	O	O:0.973196
a	O	O:0.999989
list	O	O:0.998580
of	O	O:0.999994
functions	O	O:0.999847
to	O	O:0.999997
each	O	O:0.999997
column	O	O:0.999930
in	O	O:0.999997
a	O	O:0.999998
DataFrame	B-API	O:0.997827
like	O	O:0.999814
the	O	O:0.999996
DataFrameGroupBy.agg	O	O:0.965339
function	O	O:0.999919
does	O	O:0.999591
?	O	O:0.999986
	
I	O	O:0.999966
found	O	O:0.999936
an	O	O:0.999968
ugly	O	O:0.999624
way	O	O:0.999961
to	O	O:0.999969
do	O	O:0.999998
it	O	O:0.999995
like	O	O:0.999917
this	O	O:0.999733
:	O	O:0.999979
#CODE	O	O:0.999846
	
Assuming	O	O:0.999238
these	O	O:0.999883
were	O	O:0.999940
datetime	O	O:0.999665
columns	O	O:0.998631
(	O	O:0.999964
if	O	O:0.999956
they're	O	O:0.999939
not	O	O:0.999987
apply	O	O:0.832536
`	O	O:0.999933
to_datetime	B-API	B-API:0.995325
`)	O	O:0.999996
you	O	O:0.999893
can	O	O:0.999998
just	O	O:0.999998
subtract	O	O:0.999985
them	O	O:0.998361
:	O	O:0.999979
#CODE	O	O:0.999849
	
But	O	O:0.999967
when	O	O:0.999803
I	O	O:0.999997
apply	O	O:0.977538
it	O	O:0.999559
to	O	O:0.999934
the	O	O:0.999999
DataFrame	B-API	O:0.996689
,	O	O:0.999995
I	O	O:0.999999
get	O	O:0.999992
an	O	O:0.999958
error	O	O:0.999763
.	O	O:0.999763
	
#CODE	O	O:0.998453
	
Thanks	O	O:0.999040
to	O	O:0.999974
@USER	O	O:0.999984
for	O	O:0.999991
pointing	O	O:0.998419
out	O	O:0.999923
the	O	O:0.999987
sweet	O	O:0.998633
apply	O	O:0.566281
syntax	O	O:0.999759
to	O	O:0.999954
avoid	O	O:0.999976
the	O	O:0.999960
lambda	O	O:0.996709
.	O	O:0.999808
	
Thanks	O	O:0.999104
,	O	O:0.999970
Andy	O	O:0.999367
.	O	O:0.999811
	
Apply	O	O:0.999537
actually	O	O:0.999754
passes	O	O:0.999663
the	O	O:0.999994
values	O	O:0.999646
correctly	O	O:0.999938
,	O	O:1.000000
so	O	O:0.999995
you	O	O:0.999978
don't	O	O:0.999990
need	O	O:0.999981
the	O	O:0.999992
lambda	O	O:0.999187
.	O	O:0.999719
	
I	O	O:0.999947
edited	O	O:0.999941
the	O	O:0.999935
answer	O	O:0.999920
to	O	O:0.999961
use	O	O:0.999999
the	O	O:0.999844
simpler	O	O:0.995364
syntax	O	O:0.999874
,	O	O:0.999984
and	O	O:0.999994
avoid	O	O:0.999410
the	O	O:0.999857
lambda	O	O:0.995496
.	O	O:0.999659
	
Then	O	O:0.999787
apply	O	O:0.979547
a	O	O:0.999970
lookup	O	O:0.937075
from	O	O:0.999884
`	O	O:0.999979
df2	O	O:0.998181
`	O	O:0.999996
to	O	O:0.999979
each	O	O:0.999998
element	O	O:0.999949
of	O	O:0.999996
the	O	O:0.999993
lists	O	O:0.999531
in	O	O:0.999900
`	O	O:0.999996
vals	O	O:0.961224
`	O	O:0.999960
:	O	O:0.999707
#CODE	O	O:0.999908
	
Note	O	O:0.998621
:	O	O:0.999988
that's	O	O:0.999993
a	O	O:0.999998
really	O	O:0.999268
bad	O	O:0.999954
way	O	O:0.999984
to	O	O:0.999994
iterate	O	O:0.999994
over	O	O:0.999968
the	O	O:0.999997
rows	O	O:0.999653
,	O	O:0.999994
either	O	O:0.999985
use	O	O:0.999922
iterrows	B-API	B-API:0.983311
or	O	O:0.999946
apply	O	B-API:0.839089
.	O	O:0.999272
	
Using	O	O:0.999553
range	O	O:0.999819
like	O	O:0.999930
that	O	O:0.999970
creates	O	O:0.999922
a	O	O:0.999998
huge	O	O:0.994952
python	O	O:0.999124
list	O	O:0.994924
(	O	O:0.999953
in	O	O:0.999993
python	O	O:0.999775
2	O	O:0.999964
)	O	O:0.999977
,	O	O:0.999971
xrange	O	O:0.919248
is	O	O:0.999974
slightly	O	O:0.997832
better	O	O:0.999457
.	O	O:0.999727
	
I	O	O:0.999965
believe	O	O:0.999982
that	O	O:0.999585
you	O	O:0.999984
are	O	O:0.999999
operating	O	O:0.999976
on	O	O:0.999995
copies	O	O:0.999719
of	O	O:0.999992
the	O	O:0.999949
dataframe	B-API	O:0.997501
.	O	O:0.999833
	
I	O	O:0.999986
think	O	O:0.999920
you	O	O:0.999846
should	O	O:0.999938
use	O	O:0.999985
`	O	O:0.999975
apply	O	B-API:0.996742
`	O	O:0.999455
:	O	O:0.999171
#CODE	O	O:0.999898
	
I	O	O:0.999943
don't	O	O:0.999976
think	O	O:0.999818
so	O	O:0.999984
map	O	O:0.609189
operates	O	O:0.999782
on	O	O:0.999993
each	O	O:0.999817
element	O	O:0.999947
in	O	O:0.999997
a	O	O:0.999996
series	O	O:0.999854
,	O	O:0.999997
if	O	O:0.999996
you	O	O:0.999993
want	O	O:0.999978
to	O	O:0.999999
pass	O	O:0.999970
do	O	O:0.999995
something	O	O:0.999940
with	O	O:0.999963
multiple	O	O:0.999931
arguments	O	O:0.999945
on	O	O:0.999997
a	O	O:0.999997
row-wise	O	O:0.998390
basis	O	O:0.999979
then	O	O:0.999875
you	O	O:0.999999
could	O	O:0.999985
use	O	O:0.999993
`	O	O:0.999973
apply	O	B-API:0.993300
`	O	O:0.999916
and	O	O:0.999907
set	O	O:0.999849
`	O	O:0.999948
axis=1	O	O:0.991006
`	O	O:0.999998
like	O	O:0.999721
so	O	O:0.999989
`	O	O:0.999991
mn.apply	O	O:0.959208
(	O	O:0.999996
lambda	O	O:0.999196
row	O	O:0.999450
:	O	O:0.999895
getTag	O	O:0.996450
(	O	O:0.999994
row	O	O:0.999926
)	O	O:0.999987
,	O	O:0.999990
axis=1	O	O:0.999914
)`	O	O:0.999715
in	O	O:0.999869
`	O	O:0.999993
getTag	O	O:0.977907
`	O	O:0.999999
you	O	O:0.999975
can	O	O:0.999995
select	O	O:0.999979
the	O	O:0.999999
columns	O	O:0.999984
like	O	O:0.999897
so	O	O:0.999988
:	O	O:0.999995
`	O	O:0.999994
row	O	O:0.999750
[	O	O:0.999944
'	O	O:0.999984
fld1	O	O:0.999310
']`	O	O:0.999760
and	O	O:0.999969
`	O	O:0.999980
row	O	O:0.997376
[	O	O:0.999926
'	O	O:0.999979
fld2	O	O:0.999248
']`	O	O:0.999721
.	O	O:0.999591
	
This	O	O:0.999595
should	O	O:0.999871
achieve	O	O:0.999979
what	O	O:0.999962
you	O	O:0.999983
want	O	O:0.999923
	
And	O	O:0.999965
to	O	O:0.999983
answer	O	O:0.999993
the	O	O:0.999982
general	O	O:0.994793
question	O	O:0.999110
:	O	O:0.999962
Yes	O	O:0.999930
,	O	O:0.999998
there	O	O:0.999857
is	O	O:0.999997
a	O	O:0.999991
way	O	O:0.999907
to	O	O:0.999991
pass	O	O:0.999985
extra	O	O:0.999684
arguments	O	O:0.999835
--	O	O:0.999967
use	O	O:0.999869
apply	O	B-API:0.649934
instead	O	O:0.999804
of	O	O:0.999728
map	O	B-API:0.992671
(	O	O:0.999984
Thanks	O	O:0.999832
to	O	O:0.999979
Andy	O	O:0.999991
Hayden	O	O:0.999411
for	O	O:0.999976
pointing	O	O:0.999782
this	O	O:0.999458
out	O	O:0.999241
):	O	O:0.999957
#CODE	O	O:0.999537
	
Still	O	O:0.999755
,	O	O:0.999991
I	O	O:0.999993
don't	O	O:0.999948
recommend	O	O:0.999717
using	O	O:0.999879
`	O	O:0.999905
apply	O	B-API:0.993094
`	O	O:0.999851
for	O	O:0.999887
this	O	O:0.999980
particular	O	O:0.999825
problem	O	O:0.999875
since	O	O:0.999759
`	O	O:0.999976
pd.cut	B-API	B-API:0.998783
`	O	O:0.999964
is	O	O:0.999969
be	O	O:0.999981
faster	O	O:0.999844
,	O	O:0.999973
easier	O	O:0.999688
to	O	O:0.999967
use	O	O:0.999995
,	O	O:0.999833
and	O	O:0.999964
avoids	O	O:0.999879
the	O	O:0.999907
non-deterministic	O	O:0.999869
order	O	O:0.999821
of	O	O:0.999990
dict	O	O:0.999946
keys	O	O:0.999856
problem	O	O:0.999577
.	O	O:0.999908
	
But	O	O:0.999850
knowing	O	O:0.999830
that	O	O:0.999639
`	O	O:0.999996
apply	O	B-API:0.908747
`	O	O:0.999960
can	O	O:0.999711
take	O	O:0.999998
additional	O	O:0.999968
positional	O	O:0.999224
arguments	O	O:0.999478
may	O	O:0.999988
help	O	O:0.999937
you	O	O:0.999979
in	O	O:0.999997
the	O	O:0.999982
future	O	O:0.999387
.	O	O:0.999834
	
How	O	O:0.999896
to	O	O:0.999992
apply	O	O:0.986499
a	O	O:0.999994
long	O	O:0.999631
set	O	O:0.999922
of	O	O:0.999994
conditions	O	O:0.999447
on	O	O:0.999998
a	O	O:0.999996
pandas	O	O:0.999930
dataframe	B-API	O:0.999632
efficiently	O	O:0.999626
-	O	O:0.999991
stock	O	O:0.999143
backtesting	O	O:0.998886
	
I'm	O	O:0.999942
attempting	O	O:0.999729
to	O	O:0.999990
apply	O	O:0.974384
a	O	O:0.999994
long	O	O:0.999578
set	O	O:0.999906
of	O	O:0.999978
conditions	O	O:0.998180
and	O	O:0.999996
operations	O	O:0.999977
onto	O	O:0.999089
a	O	O:0.999991
pandas	O	O:0.999482
dataframe	B-API	O:0.994993
(	O	O:0.999973
see	O	O:0.999969
the	O	O:0.999993
dataframe	B-API	O:0.999084
below	O	O:0.999785
with	O	O:0.999970
VTI	O	O:0.999757
,	O	O:0.999996
upper	O	O:0.999601
,	O	O:0.999985
lower	O	O:0.999561
,	O	O:0.999990
etc	O	O:0.999887
)	O	O:0.999985
.	O	O:0.999808
	
I	O	O:0.999963
attempted	O	O:0.999966
to	O	O:0.999884
use	O	O:0.999991
apply	O	B-API:0.943717
,	O	O:0.999797
but	O	O:0.999881
I	O	O:0.999907
was	O	O:0.999985
having	O	O:0.999678
a	O	O:0.999993
lot	O	O:0.999810
of	O	O:0.999985
trouble	O	O:0.999812
doing	O	O:0.999939
so	O	O:0.999908
.	O	O:0.999622
	
)	O	O:0.999864
.	O	O:0.999681
	
My	O	O:0.999970
current	O	O:0.998655
solution	O	O:0.999176
(	O	O:0.999944
which	O	O:0.999871
works	O	O:0.999957
perfectly	O	O:0.999907
)	O	O:0.999991
relies	O	O:0.999228
on	O	O:0.999998
a	O	O:0.999987
for	O	O:0.999963
loop	O	O:0.999896
iterating	O	O:0.999350
through	O	O:0.998479
the	O	O:0.999913
dataframe	B-API	O:0.989674
.	O	O:0.999847
	
But	O	O:0.999968
my	O	O:0.999985
sense	O	O:0.999069
is	O	O:0.999985
that	O	O:0.999950
this	O	O:0.999941
is	O	O:0.999997
an	O	O:0.999965
inefficient	O	O:0.999854
way	O	O:0.999960
to	O	O:0.999979
complete	O	O:0.999991
my	O	O:0.999946
simulation	O	O:0.999549
.	O	O:0.999941
	
I'd	O	O:0.999935
appreciate	O	O:0.999983
help	O	O:0.999354
on	O	O:0.999993
the	O	O:0.999994
design	O	O:0.999938
of	O	O:0.999993
my	O	O:0.999963
code	O	O:0.999736
.	O	O:0.999932
	
#CODE	O	O:0.998453
	
Generally	O	O:0.999841
speaking	O	O:0.999306
,	O	O:0.999993
you	O	O:0.999993
need	O	O:0.999985
to	O	O:0.999998
assess	O	O:0.999996
the	O	O:0.999990
way	O	O:0.999909
in	O	O:0.999967
which	O	O:0.999978
the	O	O:0.999998
desired	O	O:0.999790
result	O	O:0.999938
for	O	O:0.999998
a	O	O:0.999996
given	O	O:0.996357
row	O	O:0.999992
depends	O	O:0.999762
on	O	O:0.999998
the	O	O:0.999996
data	O	O:0.999985
that	O	O:0.999813
is	O	O:0.999997
"	O	O:0.999996
higher	O	O:0.999536
up	O	O:0.999784
"	O	O:0.999913
in	O	O:0.999996
your	O	O:0.999916
set	O	O:0.999268
.	O	O:0.999954
	
If	O	O:0.999992
a	O	O:0.999997
given	O	O:0.998748
row's	O	O:0.999934
output	O	O:0.999819
can	O	O:0.999982
be	O	O:0.999999
created	O	O:0.999977
based	O	O:0.999627
on	O	O:0.999964
*	O	O:0.999993
input	O	O:0.999977
*	O	O:0.999999
data	O	O:0.999899
in	O	O:0.999997
higher	O	O:0.999991
rows	O	O:0.999737
,	O	O:0.999995
you	O	O:0.999991
can	O	O:0.999997
save	O	O:0.999985
yourself	O	O:0.999990
some	O	O:0.999952
time	O	O:0.999950
and	O	O:0.999994
effort	O	O:0.999948
using	O	O:0.999928
something	O	O:0.999706
like	O	O:0.998469
`	O	O:0.999993
apply	O	B-API:0.989929
`	O	O:0.999864
.	O	O:0.997975
	
But	O	O:0.999925
if	O	O:0.999999
your	O	O:0.999943
desired	O	O:0.999738
output	O	O:0.999942
for	O	O:0.999997
a	O	O:0.999993
given	O	O:0.996159
row	O	O:0.999992
depends	O	O:0.999744
on	O	O:0.999992
the	O	O:0.999962
*	O	O:0.999988
output	O	O:0.999768
*	O	O:0.999999
from	O	O:0.999979
earlier	O	O:0.999983
rows	O	O:0.999898
,	O	O:0.999998
then	O	O:0.999998
your	O	O:0.999992
problem	O	O:0.998782
is	O	O:0.999994
inherently	O	O:0.999418
ordered	O	O:0.999497
and	O	O:0.999984
as	O	O:1.000000
a	O	O:0.999939
result	O	O:0.999303
,	O	O:0.999988
you're	O	O:0.999968
unlikely	O	O:0.999812
to	O	O:0.999996
be	O	O:1.000000
able	O	O:0.999987
to	O	O:0.999988
do	O	O:0.999999
much	O	O:0.999695
better	O	O:0.999939
than	O	O:0.999972
a	O	O:0.999990
`	O	O:0.999963
for	O	O:0.999477
`	O	O:0.999993
loop	O	O:0.999684
even	O	O:0.999952
if	O	O:0.999998
you	O	O:0.999994
wind	O	O:0.999796
up	O	O:0.999992
with	O	O:0.999937
cleaner	O	O:0.999672
code	O	O:0.999757
.	O	O:0.999924
	
How	O	O:0.999916
do	O	O:0.999953
I	O	O:0.999998
apply	O	O:0.957161
a	O	O:0.999928
count	O	O:0.889301
function	O	O:0.999932
?	O	O:0.999918
	
like	O	O:0.996590
how=	O	O:0.999422
???	O	O:0.999797
	
)	O	O:0.999915
Hmmm	O	O:0.999551
,	O	O:0.999992
I	O	O:0.999986
figured	O	O:0.999831
out	O	O:0.999597
,	O	O:0.999981
it's	O	O:0.999438
np.size	O	O:0.965215
	
You	O	O:0.999817
can	O	O:0.999882
[	O	O:1.000000
set	O	O:0.999980
up	O	O:0.999992
a	O	O:0.999993
progress	O	O:0.999286
meter	O	O:0.999917
for	O	O:0.999984
apply	O	B-API:0.796850
]	O	O:0.989851
(	O	O:0.999554
#URL	O	O:0.999539
)	O	O:0.999917
,	O	O:0.999907
but	O	O:0.999994
this	O	O:0.999964
obviously	O	O:0.999992
slows	O	O:0.999929
down	O	O:0.999263
whatever	O	O:0.999972
it	O	O:0.999835
is	O	O:0.999988
you're	O	O:0.999885
doing	O	O:0.999669
.	O	O:0.999867
	
Generally	O	O:0.999948
a	O	O:0.999979
bad	O	O:0.999874
idea	O	O:0.999784
to	O	O:0.999980
return	O	O:0.999987
different	O	O:0.999969
types	O	O:0.999875
of	O	O:0.999998
data	O	O:0.999911
in	O	O:0.999998
an	O	O:0.999984
apply	O	B-API:0.848003
(	O	O:0.999936
here	O	O:0.999767
a	O	O:0.999996
string	O	O:0.999460
or	O	O:0.999994
a	O	O:0.999992
Series	O	O:0.999430
)	O	O:0.999981
,	O	O:0.999987
it's	O	O:0.999797
unclear	O	O:0.999885
what	O	O:0.999933
you	O	O:0.999986
want	O	O:0.999990
the	O	O:0.999993
apply	O	B-API:0.602594
to	O	O:0.999628
return	O	O:0.999625
...	O	O:0.999153
	
@USER	O	O:0.999405
Your	O	O:0.999541
comment	O	O:0.999654
suggests	O	O:0.999922
to	O	O:0.999982
me	O	O:0.999999
that	O	O:0.999921
I	O	O:0.999995
may	O	O:0.999992
not	O	O:0.999900
understand	O	O:0.999919
`	O	O:0.999987
apply	O	B-API:0.974125
`	O	O:0.999968
properly	O	O:0.997351
.	O	O:0.999968
	
My	O	O:0.999931
understanding	O	O:0.996563
was	O	O:0.999932
that	O	O:0.999941
my	O	O:0.999981
function	O	O:0.999897
would	O	O:0.999926
return	O	O:0.999787
the	O	O:0.999984
string	O	O:0.996967
'	O	O:0.999980
RARE_VALUE	O	O:0.998697
'	O	O:0.999987
if	O	O:0.999992
the	O	O:0.999949
condition	O	O:0.999519
were	O	O:0.999847
met	O	O:0.999932
but	O	O:0.999994
keep	O	O:0.999394
the	O	O:0.999993
existing	O	O:0.999236
string	O	O:0.997529
/	O	O:0.999981
null	O	O:0.998408
if	O	O:0.999944
it	O	O:0.999900
weren't	O	O:0.999499
.	O	O:0.999908
	
Is	O	O:0.999989
this	O	O:0.999826
incorrect	O	O:0.999754
?	O	O:0.999953
	
Ah	O	O:0.999915
wait	O	O:0.999237
,	O	O:0.999994
I	O	O:0.999988
see	O	O:0.999983
what	O	O:0.998538
you're	O	O:0.999937
saying	O	O:0.999923
,	O	O:0.999995
I	O	O:0.999948
mistook	O	O:0.999966
this	O	O:0.999657
for	O	O:0.999993
a	O	O:0.999981
DataFrame	B-API	O:0.960235
apply	O	B-API:0.648058
.	O	O:0.999121
	
No	O	O:0.999958
you're	O	O:0.999904
correct	O	O:0.999560
,	O	O:0.999992
but	O	O:0.999964
boolean	O	O:0.999645
masking	O	O:0.999796
at	O	O:0.999991
each	O	O:0.999859
step	O	O:0.999684
is	O	O:0.999973
**	O	O:0.999985
slow**	O	O:0.997464
!!	O	O:0.999779
	
Or	O	O:0.999952
,	O	O:0.999987
if	O	O:0.999992
these	O	O:0.999934
are	O	O:0.999993
numpy	O	O:0.999957
arrays	O	O:0.999829
you	O	O:0.999986
need	O	O:0.999985
to	O	O:0.999998
apply	O	O:0.990738
tolist	B-API	B-API:0.919032
to	O	O:0.999976
each	O	O:0.999985
item	O	O:0.999783
first	O	O:0.999323
:	O	O:0.999975
#CODE	O	O:0.999719
	
I	O	O:0.999994
have	O	O:0.999983
a	O	O:0.999986
DataFrame	B-API	O:0.988502
with	O	O:0.999784
multi-index	O	O:0.999803
[	O	O:0.999971
'	O	O:0.999993
timestamp	O	O:0.996702
'	O	O:0.999979
,	O	O:0.999935
'	O	O:0.999984
symbol	O	O:0.999845
']	O	O:0.999984
that	O	O:0.999231
contains	O	O:0.999949
timeseries	O	O:0.999984
data	O	O:0.999803
.	O	O:0.999937
	
I	O	O:0.999960
merging	O	O:0.999974
this	O	O:0.999872
data	O	O:0.999967
with	O	O:0.999992
other	O	O:0.999931
samples	O	O:0.998527
and	O	O:0.999994
my	O	O:0.999994
apply	O	B-API:0.929059
function	O	O:0.999703
that	O	O:0.999802
uses	O	O:0.999909
asof	O	B-API:0.962956
is	O	O:0.999968
similar	O	O:0.998361
to	O	O:0.999898
:	O	O:0.999995
#CODE	O	O:0.999823
	
pandas	O	O:0.999323
groupby	B-API	B-API:0.824653
apply	O	B-API:0.874001
function	O	O:0.999542
that	O	O:0.999861
take	O	O:0.999970
N-column	O	O:0.999895
frame	O	O:0.999972
and	O	O:0.999972
returns	O	O:0.998544
object	O	O:0.997743
	
Is	O	O:0.999985
there	O	O:0.999985
a	O	O:0.999985
'	O	O:0.999933
transform	O	B-API:0.927003
'	O	O:0.999963
method	O	O:0.999982
of	O	O:0.999998
something	O	O:0.999960
like	O	O:0.999983
that	O	O:0.999987
to	O	O:0.999999
apply	O	O:0.996692
a	O	O:0.999855
function	O	O:0.999361
to	O	O:0.999986
groups	O	O:0.999815
(	O	O:0.999994
all	O	O:0.999998
columns	O	O:0.999979
at	O	O:0.999998
once	O	O:0.999775
)	O	O:0.999980
and	O	O:0.999992
return	O	O:0.998986
an	O	O:0.999172
object	O	O:0.999639
?	O	O:0.999902
	
Anything	O	O:0.999598
I	O	O:0.999970
try	O	O:0.999987
seems	O	O:0.999608
to	O	O:0.999995
return	O	O:0.999956
one	O	O:0.999932
object	O	O:0.999950
per	O	O:0.999989
column	O	O:0.999709
in	O	O:0.999990
the	O	O:0.999987
group	O	O:0.993083
.	O	O:0.999860
	
and	O	O:0.999988
suppose	O	O:0.999914
I	O	O:0.999983
do	O	O:0.999994
a	O	O:0.999956
groupby	B-API	B-API:0.997797
on	O	O:0.999883
Date	O	O:0.996727
and	O	O:0.999996
apply	O	O:0.931887
some	O	O:0.994326
function	O	O:0.999769
to	O	O:0.999992
the	O	O:1.000000
groups	O	O:0.999703
labeled	O	O:0.999716
by	O	O:0.999827
(	O	O:0.999956
Term	O	O:0.997155
,	O	O:0.999977
Month	O	O:0.998575
,	O	O:0.999989
s	O	O:0.999648
)	O	O:0.999970
.	O	O:0.999785
	
The	O	O:0.999857
result	O	O:0.999813
should	O	O:0.999950
be	O	O:0.999999
something	O	O:0.999980
like	O	O:0.999014
#CODE	O	O:0.999840
	
You	O	O:0.999926
could	O	O:0.999915
apply	O	O:0.895831
the	O	O:0.999432
function	O	O:0.998854
and	O	O:0.999998
then	O	O:0.999942
aggregate	O	O:0.885254
each	O	O:0.999937
group	O	O:0.997990
manually	O	O:0.999671
.	O	O:0.999784
	
For	O	O:0.999942
example	O	O:0.999840
,	O	O:0.999997
assuming	O	O:0.999967
the	O	O:0.999963
aggregation	O	O:0.988624
is	O	O:0.999994
a	O	O:0.999988
mean	O	O:0.998234
and	O	O:0.999997
the	O	O:0.999942
function	O	O:0.997060
is	O	O:0.999993
the	O	O:0.999996
sum	O	O:0.999861
of	O	O:0.999994
the	O	O:0.999990
column	O	O:0.999964
,	O	O:0.999996
you	O	O:0.999951
could	O	O:0.999732
:	O	O:0.999998
#CODE	O	O:0.999945
	
Then	O	O:0.999801
we	O	O:0.999999
can	O	O:0.999988
apply	O	O:0.991100
the	O	O:0.999968
fit()	O	O:0.797952
on	O	O:0.999983
all	O	O:0.999995
the	O	O:0.999999
columns	O	O:0.999929
at	O	O:0.999999
once	O	O:0.999925
for	O	O:0.999998
each	O	O:0.999926
group	O	O:0.999594
of	O	O:0.999996
rows	O	O:0.985131
:	O	O:0.999983
#CODE	O	O:0.999936
	
I	O	O:0.999950
should	O	O:0.999989
have	O	O:0.999846
mentioned	O	O:0.999991
that	O	O:0.999987
I	O	O:0.999999
can	O	O:0.999988
use	O	O:0.999985
the	O	O:0.999855
'	O	O:0.999913
apply	O	O:0.614203
'	O	O:0.999879
or	O	O:0.999907
'	O	O:0.999920
agg	O	B-API:0.906660
'	O	O:0.998911
function	O	O:0.999602
but	O	O:0.999970
it	O	O:0.999987
returns	O	O:0.999822
the	O	O:0.999980
same	O	O:0.999161
(	O	O:0.999995
redundant	O	O:0.999505
)	O	O:0.999981
object	O	O:0.999817
for	O	O:0.999989
each	O	O:0.999424
column	O	O:0.999207
.	O	O:0.999935
	
So	O	O:0.999939
it	O	O:0.999974
appears	O	O:0.999984
that	O	O:0.999968
my	O	O:0.999931
function	O	O:0.999818
is	O	O:0.999996
receiving	O	O:0.999893
access	O	O:0.998981
to	O	O:0.999986
the	O	O:0.999999
full	O	O:0.999738
group	O	O:0.999641
each	O	O:0.999862
time	O	O:0.999545
(	O	O:0.999986
which	O	O:0.999716
is	O	O:0.999996
what	O	O:0.999773
I	O	O:0.999998
want	O	O:0.999908
)	O	O:0.999431
but	O	O:0.999980
that	O	O:0.999921
it	O	O:0.999958
is	O	O:0.999996
being	O	O:0.999755
called	O	O:0.999936
once	O	O:0.999739
for	O	O:0.999993
each	O	O:0.999919
column	O	O:0.999660
in	O	O:0.999993
the	O	O:0.999983
group	O	O:0.989918
(	O	O:0.999992
or	O	O:0.999996
at	O	O:0.999995
least	O	O:0.999904
that's	O	O:0.999953
how	O	O:0.999993
the	O	O:0.999990
result	O	O:0.999488
is	O	O:0.999993
populated	O	O:0.999248
)	O	O:0.999977
.	O	O:0.999712
	
Hmmm	O	O:0.999621
,	O	O:0.999989
I	O	O:0.999996
think	O	O:0.999937
you	O	O:0.999955
are	O	O:0.999998
correct	O	O:0.999948
for	O	O:0.999992
the	O	O:0.999993
usage	O	O:0.999748
of	O	O:0.999912
`	O	O:0.999916
agg	O	B-API:0.991665
`	O	O:0.999955
,	O	O:0.999670
but	O	O:0.999989
the	O	O:0.999959
`	O	O:0.999977
apply	O	B-API:0.997903
`	O	O:0.999831
method	O	O:0.999002
should	O	O:0.999990
normally	O	O:0.999992
receive	O	O:0.999902
all	O	O:0.999978
the	O	O:0.999998
columns	O	O:0.999923
at	O	O:0.999999
once	O	O:0.999905
for	O	O:0.999996
each	O	O:0.999445
group	O	O:0.989477
.	O	O:0.999901
	
I	O	O:0.999953
edited	O	O:0.999953
my	O	O:0.999906
answer	O	O:0.999948
above	O	O:0.999823
to	O	O:0.999963
illustrate	O	O:0.999980
that	O	O:0.999850
.	O	O:0.999987
	
You	O	O:0.999890
can	O	O:0.999971
convert	O	O:0.999896
all	O	O:0.999999
elements	O	O:0.999953
of	O	O:0.999966
id	O	O:0.999900
to	O	O:0.999978
`	O	O:0.999998
str	O	O:0.993684
`	O	O:0.999998
using	O	O:0.998411
`	O	O:0.999952
apply	O	B-API:0.998705
`	O	O:0.999789
#CODE	O	O:0.991470
	
You	O	O:0.999926
really	O	O:0.999912
want	O	O:0.999837
to	O	O:0.999986
return	O	O:0.999936
a	O	O:0.999992
bool	O	O:0.969127
to	O	O:0.999998
indicate	O	O:0.999957
rather	O	O:0.999976
than	O	O:0.999968
a	O	O:0.999990
string	O	O:0.997704
.	O	O:0.999775
	
Also	O	O:0.999849
avoiding	O	O:0.999889
apply	O	B-API:0.515636
where	O	O:0.999309
possible	O	O:0.997811
.	O	O:0.999949
	
The	O	O:0.999981
data	O	O:0.999661
is	O	O:0.999998
a	O	O:0.999993
bit	O	O:0.999573
distorted	O	O:0.999939
that	O	O:0.999376
is	O	O:0.999998
why	O	O:0.999994
when	O	O:0.999664
I	O	O:0.999988
initially	O	O:0.999996
read	O	O:0.998016
with	O	O:0.999839
pd.read_csv	B-API	B-API:0.958922
,	O	O:0.999995
the	O	O:0.999995
column	O	O:0.998524
is	O	O:0.999992
mixed	O	O:0.995571
with	O	O:0.999742
string	O	O:0.996948
and	O	O:0.999937
int	O	O:0.996383
.	O	O:0.999281
	
It	O	O:0.999776
is	O	O:0.999992
my	O	O:0.999985
wish	O	O:0.999960
to	O	O:0.999993
remove	O	O:0.999933
the	O	O:0.999965
string	O	O:0.999848
part	O	O:0.999884
to	O	O:0.999994
apply	O	O:0.996001
aggregation	O	O:0.999373
functions	O	O:0.999623
on	O	O:0.999993
that	O	O:0.999980
columns	O	O:0.999964
.	O	O:0.999962
	
My	O	O:0.999969
basic	O	O:0.999405
question	O	O:0.999425
is	O	O:0.999981
can	O	O:0.999908
I	O	O:1.000000
efficiently	O	O:0.999962
apply	O	O:0.710478
this	O	O:0.999704
structure	O	O:0.999797
to	O	O:0.999985
HDF	O	O:0.999985
?	O	O:0.999932
	
Specifically	O	O:0.998362
:	O	O:0.999912
	
apply	O	O:0.768130
hierarchy	O	O:0.998730
or	O	O:0.999949
multi-index	O	O:0.999858
to	O	O:0.999998
panda	O	O:0.999999
columns	O	O:0.999782
	
Honestly	O	O:0.999049
I'm	O	O:0.999983
lost	O	O:0.999829
as	O	O:0.999994
to	O	O:0.999961
how	O	O:0.999998
to	O	O:0.999988
do	O	O:0.999998
it	O	O:0.999985
.	O	O:0.999915
	
Do	O	O:0.999958
I	O	O:0.999997
need	O	O:0.999993
to	O	O:0.999995
append	O	O:0.999123
data	O	O:0.999954
from	O	O:0.999977
the	O	O:0.999999
original	O	O:0.999953
reviews	O	O:0.999925
back	O	O:0.999842
onto	O	O:0.999959
my	O	O:0.999944
sorted	O	O:0.999708
dataframe	B-API	O:0.996854
?	O	O:0.999937
	
Do	O	O:0.999954
I	O	O:0.999997
need	O	O:0.999984
to	O	O:0.999994
make	O	O:0.999999
a	O	O:0.999979
function	O	O:0.999923
to	O	O:0.999994
apply	O	O:0.990374
onto	O	O:0.998438
the	O	O:0.999914
groupby	B-API	B-API:0.997242
function	O	O:0.999650
?	O	O:0.999843
	
Tips	O	O:0.999337
or	O	O:0.999981
suggestions	O	O:0.999348
would	O	O:0.999965
be	O	O:0.999998
very	O	O:0.999948
helpful	O	O:0.996939
!	O	O:0.999853
	
As	O	O:0.999656
DanB	O	O:0.999328
says	O	O:0.999780
,	O	O:0.999989
groupby()	B-API	B-API:0.987366
just	O	O:0.999560
splits	O	O:0.999890
your	O	O:0.999826
DataFrame	B-API	O:0.996681
into	O	O:0.999799
groups	O	O:0.999112
.	O	O:0.999622
	
Then	O	O:0.999505
,	O	O:0.999999
you	O	O:0.999994
apply	O	O:0.979795
some	O	O:0.999938
number	O	O:0.999976
of	O	O:0.999987
functions	O	O:0.999939
to	O	O:0.999995
each	O	O:0.999987
group	O	O:0.994681
and	O	O:0.999997
pandas	O	O:0.999930
will	O	O:0.999737
stitch	O	O:0.999807
the	O	O:0.999990
results	O	O:0.999953
together	O	O:0.999581
as	O	O:0.999997
best	O	O:0.999441
it	O	O:0.999983
can	O	O:0.999837
--	O	O:1.000000
indexed	O	O:0.999967
by	O	O:0.999993
the	O	O:0.999986
original	O	O:0.999414
group	O	O:0.998916
identifiers	O	O:0.999117
.	O	O:0.999835
	
Other	O	O:0.999854
than	O	O:0.999913
that	O	O:0.999976
,	O	O:1.000000
as	O	O:0.999998
far	O	O:0.999942
as	O	O:0.999986
I	O	O:0.999960
understand	O	O:0.999827
,	O	O:0.999935
there's	O	O:0.999768
no	O	O:0.999936
"	O	O:0.999992
memory	O	O:0.999768
"	O	O:0.999962
for	O	O:0.999971
what	O	O:0.999808
the	O	O:0.999988
original	O	O:0.999502
group	O	O:0.997903
looked	O	O:0.999887
like	O	O:0.999670
.	O	O:0.999940
	
Instead	O	O:0.999801
,	O	O:0.999994
you	O	O:0.999996
have	O	O:0.999990
to	O	O:0.999999
specify	O	O:0.999995
what	O	O:0.999959
you	O	O:0.999995
want	O	O:0.999993
to	O	O:0.999991
output	O	O:0.999995
to	O	O:0.999974
contain	O	O:0.999804
.	O	O:0.999957
	
There	O	O:0.999817
are	O	O:0.999997
a	O	O:0.999992
few	O	O:0.999806
ways	O	O:0.999863
to	O	O:0.999977
do	O	O:1.000000
this	O	O:0.999938
--	O	O:0.999985
I'd	O	O:0.999977
look	O	O:0.999951
into	O	O:0.997957
'	O	O:0.999940
agg	O	B-API:0.988098
'	O	O:0.999729
and	O	O:0.999890
'	O	O:0.999976
apply	O	B-API:0.911040
'	O	O:0.999289
.	O	O:0.999496
	
'	O	O:0.999861
Agg	O	O:0.998154
'	O	O:0.999913
is	O	O:0.999992
for	O	O:0.999937
functions	O	O:0.999882
that	O	O:0.999753
return	O	O:0.999947
a	O	O:0.999998
single	O	O:0.999768
value	O	O:0.999941
for	O	O:0.999986
the	O	O:0.999992
whole	O	O:0.999579
group	O	O:0.998191
,	O	O:0.999992
whereas	O	O:0.999866
apply	O	B-API:0.891999
is	O	O:0.999896
much	O	O:0.999030
more	O	O:0.999819
flexible	O	O:0.999010
.	O	O:0.999828
	
Suppose	O	O:0.999642
you	O	O:0.999985
want	O	O:0.999955
to	O	O:0.999996
return	O	O:0.999993
a	O	O:0.999998
dataframe	B-API	O:0.997792
of	O	O:0.999992
the	O	O:0.999978
first	O	O:0.999669
and	O	O:0.999997
last	O	O:0.999765
review	O	O:0.998993
by	O	O:0.999990
each	O	O:0.999378
reviewer	O	O:0.999140
.	O	O:0.999819
	
We	O	O:0.999969
can	O	O:0.999896
use	O	O:0.999990
'	O	O:0.999960
apply	O	B-API:0.758807
'	O	O:0.999868
,	O	O:0.999915
which	O	O:0.999883
works	O	O:0.999911
with	O	O:0.999989
any	O	O:0.999699
function	O	O:0.999964
that	O	O:0.999819
outputs	O	O:0.999980
a	O	O:0.999995
pandas	O	O:0.996927
object	O	O:0.999765
.	O	O:0.999737
	
So	O	O:0.999919
we'll	O	O:0.999892
write	O	O:0.999978
a	O	O:0.999945
function	O	O:0.999903
that	O	O:0.999889
takes	O	O:0.999971
each	O	O:0.999911
group	O	O:0.997458
and	O	O:0.999997
a	O	O:0.999999
dataframe	B-API	O:0.993322
of	O	O:0.999993
just	O	O:0.999840
the	O	O:0.999998
first	O	O:0.998413
and	O	O:0.999998
last	O	O:0.998712
row	O	O:0.999098
:	O	O:0.999859
	
Pandas	O	O:0.999472
has	O	O:0.999967
a	O	O:0.999995
lot	O	O:0.999704
of	O	O:0.999991
built-in	O	O:0.997879
functionality	O	O:0.999940
to	O	O:0.999993
apply	O	O:0.977624
functions	O	O:0.999509
in	O	O:0.999976
a	O	O:0.999996
vectorized	O	O:0.999331
way	O	O:0.999925
over	O	O:0.998438
Series	O	O:0.998911
and	O	O:0.999982
DataFrames	O	O:0.998806
.	O	O:0.999374
	
When	O	O:0.999777
that	O	O:0.999963
fails	O	O:0.999974
,	O	O:0.999999
you	O	O:0.999979
can	O	O:0.999976
use	O	O:0.999999
`	O	O:0.999960
map	O	B-API:0.988136
`	O	O:0.999992
or	O	O:0.999727
`	O	O:0.999993
apply	O	B-API:0.978365
`	O	O:0.999848
.	O	O:0.998142
	
Here	O	O:0.999295
`	O	O:0.999954
map	O	B-API:0.991287
`	O	O:0.999992
will	O	O:0.999642
applies	O	O:0.999993
a	O	O:0.999926
function	O	O:0.999563
element-wise	O	O:0.999846
on	O	O:0.999987
a	O	O:0.999981
Series	O	O:0.998403
.	O	O:0.999867
	
For	O	O:0.999969
more	O	O:0.999676
on	O	O:0.999883
map	O	B-API:0.819996
and	O	O:0.999994
apply	O	O:0.591197
,	O	O:0.999605
see	O	O:0.999972
this	O	O:0.999767
answer	O	O:0.999792
.	O	O:0.999841
	
This	O	O:0.999050
is	O	O:0.999972
better	O	O:0.999645
than	O	O:0.999749
having	O	O:0.999895
multiple	O	O:0.999871
DataFrames	O	O:0.999495
,	O	O:0.999993
because	O	O:0.999985
you	O	O:0.999968
can	O	O:0.999997
apply	O	O:0.996050
fast	O	O:0.999656
numpy	O	O:0.998688
/	O	O:0.999993
pandas	O	O:0.999852
operations	O	O:0.999926
to	O	O:0.999987
the	O	O:0.999999
entire	O	O:0.999709
DataFrame	B-API	O:0.997894
whereas	O	O:0.999914
,	O	O:0.999997
if	O	O:0.999992
you	O	O:0.999954
had	O	O:0.999976
a	O	O:0.999999
list	O	O:0.998666
of	O	O:0.999995
DataFrames	O	O:0.999277
you	O	O:0.999975
would	O	O:0.999995
be	O	O:0.999999
forced	O	O:0.999989
to	O	O:0.999983
use	O	O:0.999998
a	O	O:0.999930
Python	O	O:0.998796
loop	O	O:0.999948
to	O	O:0.999992
operate	O	O:0.999992
on	O	O:0.999995
the	O	O:0.999997
sub-DataFrames	O	O:0.999591
individually	O	O:0.997713
(	O	O:0.999998
assuming	O	O:0.999963
you	O	O:0.999993
want	O	O:0.999983
to	O	O:0.999993
perform	O	O:0.999983
the	O	O:0.999996
same	O	O:0.999958
operation	O	O:0.999938
on	O	O:0.999994
each	O	O:0.999829
sub-DataFrame	O	O:0.999942
)	O	O:0.999967
.	O	O:0.999849
	
Doing	O	O:0.999755
so	O	O:0.999812
is	O	O:0.999978
generally	O	O:0.999784
always	O	O:0.999874
slower	O	O:0.998638
.	O	O:0.999533
	
I	O	O:0.999991
know	O	O:0.999918
I	O	O:0.999966
can	O	O:0.999965
do	O	O:0.999997
it	O	O:0.999999
by	O	O:0.999990
converting	O	O:0.999293
the	O	O:0.999925
DataFrame	B-API	O:0.997366
to	O	O:0.999991
a	O	O:1.000000
list	O	O:0.999286
of	O	O:0.999995
lists	O	O:0.999631
,	O	O:0.999998
or	O	O:0.999999
by	O	O:0.999991
using	O	O:0.999992
a	O	O:0.999877
row-wise	O	O:0.936425
`	O	O:0.999978
apply	O	B-API:0.979468
`	O	O:0.999982
to	O	O:0.999946
grab	O	O:0.999976
each	O	O:0.999913
item	O	O:0.999970
one	O	O:0.999996
by	O	O:0.999990
one	O	O:0.999954
,	O	O:0.999901
but	O	O:0.999912
isn't	O	O:0.999938
there	O	O:0.999984
any	O	O:0.999983
way	O	O:0.999940
to	O	O:0.999960
do	O	O:0.999998
it	O	O:0.999989
without	O	O:0.999896
that	O	O:0.999957
amount	O	O:0.999968
of	O	O:0.999971
overhead	O	O:0.999497
?	O	O:0.999968
	
How	O	O:0.999926
can	O	O:0.999969
I	O	O:1.000000
do	O	O:0.999998
the	O	O:0.999991
equivalent	O	O:0.999666
of	O	O:0.999944
`	O	O:0.999962
Series.map	B-API	B-API:0.996623
`	O	O:0.999987
on	O	O:0.999981
multiple	O	O:0.999995
columns	O	O:0.999984
at	O	O:0.999998
once	O	O:0.999704
?	O	O:0.999970
	
My	O	O:0.999984
timing	O	O:0.999450
results	O	O:0.999894
are	O	O:0.999985
somewhat	O	O:0.999963
different	O	O:0.999978
from	O	O:0.999885
yours	O	O:0.998913
.	O	O:0.999932
	
I	O	O:0.999957
get	O	O:0.999992
900us	O	O:0.996930
for	O	O:0.999945
the	O	O:0.999898
MultiIndex	O	O:0.782159
solution	O	O:0.999112
and	O	O:0.999997
only	O	O:0.999985
90us	O	O:0.998184
for	O	O:0.999997
your	O	O:0.999525
`	O	O:0.999958
apply	O	B-API:0.973237
`	O	O:0.999848
.	O	O:0.998019
	
But	O	O:0.999961
that	O	O:0.999882
`	O	O:0.999998
apply	O	B-API:0.969533
`	O	O:0.999942
doesn't	O	O:0.999352
actually	O	O:0.999987
do	O	O:0.999964
the	O	O:0.999946
indexing	O	O:0.996164
;	O	O:0.999970
timing	O	O:0.998972
`	O	O:0.999985
d.apply	O	B-API:0.528257
(	O	O:0.999993
lambda	O	O:0.998828
r	O	O:0.999456
:	O	O:0.999920
s.ix	O	O:0.983742
[	O	O:0.999994
r	O	O:0.999965
]	O	O:0.999954
,	O	O:0.999962
axis=1	O	O:0.999692
)`	O	O:0.999850
gives	O	O:0.999874
a	O	O:0.999998
much	O	O:0.999691
slower	O	O:0.999945
result	O	O:0.999957
of	O	O:0.999979
about	O	O:0.999767
5.5ms	O	O:0.990589
.	O	O:0.999520
	
However	O	O:0.999859
,	O	O:0.999990
I	O	O:0.999998
thought	O	O:0.999967
of	O	O:0.999985
another	O	O:0.998788
way	O	O:0.999842
:	O	O:0.999905
`	O	O:0.999981
d.apply	O	O:0.680786
(	O	O:0.999990
tuple	O	O:0.999258
,	O	O:0.999991
axis=1	O	O:0.999590
)	O	O:0.999883
.map	B-API	B-API:0.998736
(	O	O:0.999977
s	O	O:0.999820
)`	O	O:0.999296
.	O	O:0.999666
	
This	O	O:0.999823
seems	O	O:0.999946
to	O	O:0.999997
be	O	O:1.000000
even	O	O:0.999955
faster	O	O:0.999937
at	O	O:0.999988
about	O	O:0.999637
580us	O	O:0.992701
.	O	O:0.999456
	
Even	O	O:0.999572
so	O	O:0.999975
,	O	O:0.999987
doesn't	O	O:0.999898
it	O	O:0.999995
seem	O	O:0.999982
like	O	O:0.999972
there	O	O:0.999973
should	O	O:0.999974
be	O	O:0.999999
a	O	O:0.999998
built-in	O	O:0.991153
way	O	O:0.999953
to	O	O:0.999945
do	O	O:1.000000
this	O	O:0.999960
without	O	O:0.999963
creating	O	O:0.999893
a	O	O:0.999992
new	O	O:0.999941
data	O	O:0.999952
structure	O	O:0.999804
?	O	O:0.999973
	
The	O	O:0.999970
values	O	O:0.999417
I	O	O:0.999997
want	O	O:0.999955
to	O	O:0.999883
index	O	O:0.999997
with	O	O:0.999890
are	O	O:0.999990
already	O	O:0.999986
sitting	O	O:0.999313
right	O	O:0.999763
there	O	O:0.999798
.	O	O:0.999935
	
If	O	O:0.999945
it	O	O:0.999963
is	O	O:0.999995
a	O	O:0.999952
DatetimeIndex	B-API	B-API:0.627340
the	O	O:0.999916
apply	O	B-API:0.895201
won't	O	O:0.999081
work	O	O:0.999486
.	O	O:0.999985
	
the	O	O:0.999907
date_format	O	O:0.928956
argument	O	O:0.999726
does	O	O:0.999660
not	O	O:0.999995
apply	O	O:0.904124
to	O	O:0.999954
timedelta	O	O:0.998386
dtypes	B-API	B-API:0.978664
.	O	O:0.999683
	
Easist	O	O:0.998735
to	O	O:0.999995
simply	O	O:0.999997
convert	O	O:0.999975
them	O	O:0.999946
to	O	O:0.999996
strings	O	O:0.999993
first	O	O:0.999853
,	O	O:0.999997
e.g.	O	O:0.999413
``	O	O:0.999941
df	O	O:0.996217
[	O	O:0.999995
timedelta_field	O	O:0.998806
']	O	O:0.999964
=	O	O:0.999834
df	O	O:0.999159
[	O	O:0.999846
'	O	O:0.999991
timedelta_fields	O	O:0.999128
']	O	O:0.999927
.apply	B-API	B-API:0.998276
(	O	O:0.999878
str	O	O:0.998067
)``	O	O:0.999506
	
You	O	O:0.999866
can	O	O:0.999965
do	O	O:0.999999
an	O	O:0.999999
apply	O	O:0.504601
on	O	O:0.999926
the	O	O:0.999925
LgRnk	O	O:0.999577
column	O	O:0.998411
:	O	O:0.999974
#CODE	O	O:0.999892
	
I	O	O:0.999896
found	O	O:0.999947
this	O	O:0.999375
presentation	O	O:0.999921
,	O	O:0.999992
which	O	O:0.999762
is	O	O:0.999992
going	O	O:0.999387
about	O	O:0.999830
SQLALchemy	O	O:0.985881
and	O	O:0.999920
GeoAlchemy2	O	O:0.996339
.	O	O:0.999312
	
And	O	O:0.999932
where	O	O:0.999945
it	O	O:0.999912
is	O	O:0.999990
mentioned	O	O:0.999684
that	O	O:0.999946
it	O	O:0.999994
support	O	O:0.999748
PostGIS	O	O:0.999895
Raster	O	O:0.999776
as	O	O:0.999981
well	O	O:0.998525
.	O	O:0.999942
	
It	O	O:0.999959
seems	O	O:0.999936
to	O	O:0.999993
be	O	O:1.000000
very	O	O:0.999841
interesting	O	O:0.998342
!	O	O:0.999812
	
But	O	O:0.999959
using	O	O:0.999942
the	O	O:0.999790
documentation	O	O:0.998424
I	O	O:0.999985
don't	O	O:0.999958
see	O	O:0.999940
how	O	O:0.999986
I	O	O:0.999995
can	O	O:0.999992
apply	O	O:0.979046
this	O	O:0.999851
to	O	O:0.999994
Raster	O	O:0.999998
data	O	O:0.999769
	
Using	O	O:0.999457
apply	O	B-API:0.672360
,	O	O:0.999978
as	O	O:0.999954
in	O	O:0.999868
`	O	O:0.999975
df.x.apply	O	O:0.798035
(	O	O:0.999990
tuple	O	O:0.999396
,	O	O:0.999987
axis=1	O	O:0.999742
)`	O	O:0.999811
will	O	O:0.999804
work	O	O:0.999903
,	O	O:0.999997
but	O	O:0.999997
then	O	O:0.999961
I'd	O	O:0.999999
somehow	O	O:0.999996
need	O	O:0.999987
to	O	O:0.999999
iterate	O	O:0.999996
over	O	O:0.999887
the	O	O:0.999996
first	O	O:0.999988
level	O	O:0.999723
of	O	O:0.999953
the	O	O:0.999911
index	O	O:0.999799
.	O	O:0.999844
	
`	O	O:0.999935
df.x	O	O:0.958772
=	O	O:0.999931
df.x.apply	O	O:0.911978
(	O	O:0.999961
tuple	O	O:0.999517
,	O	O:0.999989
axis=1	O	O:0.999809
)`	O	O:0.999742
sort-of	O	O:0.998679
works	O	O:0.999730
,	O	O:0.999973
but	O	O:0.999838
the	O	O:0.999962
index	O	O:0.999146
is	O	O:0.999994
still	O	O:0.999739
unchanged	O	O:0.998661
(	O	O:0.999962
i.e.	O	O:0.999643
still	O	O:0.999265
has	O	O:0.999988
two	O	O:0.999986
levels	O	O:0.999801
)	O	O:0.999957
.	O	O:0.999827
	
Now	O	O:0.999916
I	O	O:0.999998
also	O	O:0.999997
have	O	O:0.999990
a	O	O:0.999967
function	O	O:0.999647
`	O	O:0.999992
func	O	O:0.946161
`	O	O:0.999996
that	O	O:0.999487
takes	O	O:0.999951
`	O	O:0.999987
id	O	O:0.999026
,	O	O:0.999997
group	O	O:0.997302
`	O	O:0.999990
as	O	O:0.999963
input	O	O:0.999837
.	O	O:0.999859
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999940
to	O	O:0.999999
apply	O	O:0.890262
`	O	O:0.999957
func	O	O:0.892998
`	O	O:0.999997
to	O	O:0.999967
each	O	O:0.999989
`	O	O:0.999971
id	O	O:0.999597
,	O	O:0.999999
group	O	O:0.998114
`	O	O:0.999974
in	O	O:0.999930
the	O	O:0.999978
groupby	B-API	B-API:0.996671
object	O	O:0.998919
.	O	O:0.999576
	
Currently	O	O:0.999906
I	O	O:0.999989
use	O	O:0.999992
a	O	O:0.999251
loop	O	O:0.966719
:	O	O:0.999939
#CODE	O	O:0.999782
	
Is	O	O:0.999972
there	O	O:0.999969
any	O	O:0.999941
better	O	O:0.997579
(	O	O:0.999971
faster	O	O:0.999559
)	O	O:0.999994
way	O	O:0.999940
of	O	O:0.999986
doing	O	O:0.999935
this	O	O:0.999972
using	O	O:0.999909
an	O	O:0.999956
apply	O	B-API:0.765511
or	O	O:0.999859
similar	O	O:0.998563
?	O	O:0.999978
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999992
`	O	O:0.999981
apply	O	B-API:0.970957
`	O	O:0.999968
on	O	O:0.999794
the	O	O:0.999971
groupby	B-API	B-API:0.987300
object	O	O:0.999820
to	O	O:0.999986
apply	O	O:0.995588
a	O	O:0.999876
function	O	O:0.999279
to	O	O:0.999993
each	O	O:0.999987
group	O	O:0.997213
.	O	O:0.999937
	
Since	O	O:0.999882
the	O	O:0.999822
function	O	O:0.999914
will	O	O:0.999971
need	O	O:0.999994
to	O	O:0.999997
accept	O	O:0.999990
the	O	O:0.999994
group	O	O:0.998843
as	O	O:0.999997
its	O	O:0.999745
argument	O	O:0.999970
,	O	O:0.999995
you	O	O:0.999991
can	O	O:0.999973
use	O	O:0.999999
the	O	O:0.999927
following	O	O:0.989065
:	O	O:0.999909
#CODE	O	O:0.999769
	
Using	O	O:0.999679
pandas	O	O:0.999462
built	O	O:0.999910
in	O	O:0.999969
functions	O	O:0.999874
you	O	O:0.999938
would	O	O:0.999996
have	O	O:0.999996
to	O	O:0.999999
apply	O	O:0.975691
`	O	O:0.999933
notnull()	B-API	B-API:0.999230
`	O	O:0.999996
over	O	O:0.998670
all	O	O:0.999950
series	O	O:0.999899
and	O	O:0.999996
then	O	O:0.999969
call	O	O:0.999924
a	O	O:0.999999
numpy	O	O:0.985699
function	O	O:0.999913
to	O	O:0.999961
the	O	O:0.999999
DataFrame	B-API	O:0.992745
anyway	O	O:0.999830
.	O	O:0.999964
	
And	O	O:0.999870
can	O	O:0.999969
you	O	O:0.999998
apply	O	O:0.950033
it	O	O:0.999978
to	O	O:0.999993
selected	O	O:0.999998
columns	O	O:0.999893
,	O	O:0.999999
instead	O	O:0.999995
of	O	O:0.999997
the	O	O:0.999994
whole	O	O:0.999923
dataframe	B-API	O:0.997762
?	O	O:0.999952
	
-	O	O:0.999970
because	O	O:0.999903
If	O	O:0.999989
I	O	O:0.999999
have	O	O:0.999994
a	O	O:0.999995
text	O	O:0.999823
column	O	O:0.999987
like	O	O:0.999921
someones	O	O:0.999932
name	O	O:0.999962
,	O	O:0.999996
I	O	O:0.999995
can	O	O:0.999964
foresee	O	O:0.999882
it	O	O:0.999997
throwing	O	O:0.999884
an	O	O:0.999982
error	O	O:0.999431
?	O	O:0.999911
	
no	O	O:0.999920
you	O	O:0.999923
cannot	O	O:0.999992
just	O	O:0.999994
group	O	O:0.999881
,	O	O:0.999995
you	O	O:0.999992
have	O	O:0.999984
to	O	O:0.999998
apply	O	O:0.981841
/	O	O:0.999876
transform	O	B-API:0.903569
.	O	O:0.999730
	
Otherwise	O	O:0.999885
you	O	O:0.999963
could	O	O:0.999998
just	O	O:0.999990
filter	O	O:0.999781
the	O	O:0.999912
NaN	O	O:0.962717
(	O	O:0.999978
I'm	O	O:0.999987
assuming	O	O:0.999987
that	O	O:0.999376
is	O	O:0.999998
what	O	O:0.999903
you	O	O:0.999995
want	O	O:0.999987
to	O	O:0.999993
do	O	O:0.999999
,	O	O:0.999999
difficult	O	O:0.999668
to	O	O:0.999997
tell	O	O:0.999962
without	O	O:0.999978
sample	O	O:0.999781
data	O	O:0.999616
and	O	O:0.999996
code	O	O:0.999846
)	O	O:0.999959
and	O	O:0.999980
apply	O	O:0.676014
the	O	O:0.994756
map	O	B-API:0.994095
:	O	O:0.999949
`	O	O:0.999996
df	O	O:0.999587
[	O	O:0.999970
'	O	O:0.999985
flag	O	O:0.999876
']	O	O:0.999952
=	O	O:0.999854
filtered.notnull()	O	O:0.925196
.map	B-API	B-API:0.997832
(	O	O:0.999939
'	O	O:0.999960
N	O	O:0.999861
')`	O	O:0.999820
	
One	O	O:0.999859
way	O	O:0.999713
is	O	O:0.999986
to	O	O:0.999968
use	O	O:0.999998
an	O	O:0.999695
apply	O	B-API:0.967932
:	O	O:0.999604
#CODE	O	O:0.999107
	
I	O	O:0.999990
need	O	O:0.999986
to	O	O:0.999986
combine	O	O:0.999996
different	O	O:0.999908
functions	O	O:0.999930
into	O	O:0.999685
one	O	O:0.999984
and	O	O:0.999962
use	O	O:0.999980
the	O	O:0.999645
apply	O	B-API:0.988680
function	O	O:0.995348
(	O	O:0.999955
of	O	O:0.999992
those	O	O:0.999986
individual	O	O:0.999907
functions	O	O:0.999918
)	O	O:0.999959
within	O	O:0.999538
the	O	O:0.999991
main	O	O:0.998390
function	O	O:0.999956
itself	O	O:0.999631
.	O	O:0.999953
	
My	O	O:0.999970
case	O	O:0.999367
is	O	O:0.999998
something	O	O:0.999893
more	O	O:0.999843
complex	O	O:0.999258
so	O	O:0.999980
i'll	O	O:0.999498
use	O	O:0.999981
a	O	O:0.999949
basic	O	O:0.998047
example	O	O:0.999352
for	O	O:0.999983
this	O	O:0.999590
.	O	O:0.999854
	
The	O	O:0.999956
above	O	O:0.998781
function	O	O:0.999780
would	O	O:0.999973
give	O	O:0.999960
me	O	O:0.999997
all	O	O:0.999988
values	O	O:0.999797
in	O	O:0.999995
a	O	O:1.000000
single	O	O:0.999805
column	O	O:0.999974
separated	O	O:0.999965
by	O	O:0.999971
commas	O	O:0.998755
.	O	O:0.999765
	
is	O	O:0.999983
there	O	O:0.999952
a	O	O:0.999995
way	O	O:0.999896
to	O	O:0.999988
apply	O	O:0.990367
each	O	O:0.999684
one	O	O:0.999966
in	O	O:0.999999
such	O	O:0.999992
a	O	O:0.999996
way	O	O:0.999514
that	O	O:0.999966
they	O	O:0.999995
come	O	O:0.999948
under	O	O:0.999993
different	O	O:0.999934
columns	O	O:0.999625
??	O	O:0.999945
	
The	O	O:0.999850
`	O	O:0.999980
apply	O	B-API:0.978334
`	O	O:0.999969
returns	O	O:0.997659
a	O	O:0.999996
dataframe	B-API	O:0.986255
with	O	O:0.999885
True	O	O:0.998962
/	O	O:0.999993
False	O	O:0.999696
values	O	O:0.995645
(	O	O:0.999986
the	O	O:0.999986
`	O	O:0.999949
`	O	O:0.999932
expression	O	O:0.999200
is	O	O:0.999997
evaluated	O	O:0.999439
for	O	O:0.999990
each	O	O:0.999707
column	O	O:0.999910
where	O	O:0.999862
`	O	O:0.999989
x.name	O	O:0.994294
[	O	O:0.999991
2	O	O:0.999909
]`	O	O:0.999912
selects	O	O:0.999338
the	O	O:0.999996
third	O	O:0.999975
level	O	O:0.999840
of	O	O:0.999996
that	O	O:0.999925
column	O	O:0.999996
name	O	O:0.999984
)	O	O:0.999986
,	O	O:0.999973
and	O	O:0.999997
the	O	O:0.999990
where	O	O:0.999351
replaces	O	O:0.999087
the	O	O:0.999995
False	O	O:0.999824
values	O	O:0.999652
with	O	O:0.999781
NaN	O	O:0.997796
.	O	O:0.999893
	
Apply	O	O:0.999557
to	O	O:0.999980
each	O	O:0.999981
element	O	O:0.999895
in	O	O:0.999996
a	O	O:0.999991
Pandas	O	O:0.999624
dataframe	B-API	O:0.993409
	
Is	O	O:0.999981
there	O	O:0.999965
anyway	O	O:0.999978
to	O	O:0.999991
apply	O	O:0.978915
this	O	O:0.999828
simple	O	O:0.998938
function	O	O:0.999964
to	O	O:0.999995
each	O	O:0.999994
element	O	O:0.999824
in	O	O:0.999998
the	O	O:0.999998
data	O	O:0.999959
frame	O	O:0.999991
?	O	O:0.999983
	
I	O	O:0.999869
use	O	O:0.999844
0.12.0	O	O:0.960399
(	O	O:0.999970
added	O	O:0.999863
to	O	O:0.999990
the	O	O:0.999999
question	O	O:0.999865
as	O	O:0.999998
well	O	O:0.999678
)	O	O:0.999990
.	O	O:0.999644
	
(	O	O:0.999944
I	O	O:0.999976
am	O	O:0.999998
trying	O	O:0.999722
to	O	O:0.999992
apply	O	O:0.994840
your	O	O:0.999024
solution	O	O:0.997906
and	O	O:0.999998
compare	O	O:0.999508
times	O	O:0.999282
.	O	O:0.999954
)	O	O:0.999969
	
python	O	O:0.999726
pandas	O	O:0.999885
strange	O	O:0.999900
error	O	O:0.999957
when	O	O:0.999214
concat	O	B-API:0.750638
the	O	O:0.999998
return	O	O:0.999633
values	O	O:0.999568
of	O	O:0.999962
'	O	O:0.999988
apply	O	B-API:0.512818
'	O	O:0.999408
	
The	O	O:0.999935
apply	O	B-API:0.838705
function	O	O:0.996894
is	O	O:0.999969
trying	O	O:0.999634
to	O	O:0.999991
return	O	O:0.999982
a	O	O:0.999989
whole	O	O:0.999847
dataframe	B-API	O:0.999121
in	O	O:0.999997
your	O	O:0.999933
case	O	O:0.999770
.	O	O:0.999976
	
You	O	O:0.999831
can't	O	O:0.999928
really	O	O:0.999888
do	O	O:0.999984
that	O	O:0.999784
.	O	O:0.999952
	
You	O	O:0.999916
can	O	O:0.999944
use	O	O:0.999997
apply	O	B-API:0.512612
to	O	O:0.999735
map	O	O:0.899703
a	O	O:0.999998
column	O	O:0.999820
or	O	O:1.000000
a	O	O:0.999998
row	O	O:0.999961
of	O	O:0.999997
a	O	O:0.999997
frame	O	O:0.999994
to	O	O:0.999999
a	O	O:1.000000
row	O	O:0.999550
/	O	O:0.999994
column	O	O:0.999861
or	O	O:0.999980
scalar	O	O:0.999650
.	O	O:0.999894
	
Printing	O	O:0.991244
is	O	O:0.999952
fine	O	O:0.997634
,	O	O:0.999976
but	O	O:0.999968
that's	O	O:0.999926
no	O	O:0.999970
surprise	O	O:0.999896
...	O	O:0.999406
	
In	O	O:0.999965
pandas	O	O:0.999739
,	O	O:0.999999
you	O	O:0.999979
can	O	O:0.999973
use	O	O:0.999998
`	O	O:0.999987
apply	O	B-API:0.980172
`	O	O:0.999975
to	O	O:0.999895
do	O	O:0.999999
similar	O	O:0.999878
thing	O	O:0.999712
#CODE	O	O:0.999640
	
The	O	O:0.999869
reason	O	O:0.999751
the	O	O:0.999994
rolling	O	O:0.969805
apply	O	B-API:0.816376
does	O	O:0.997759
not	O	O:0.999974
work	O	O:0.999881
is	O	O:0.999997
because	O	O:0.999941
1	O	O:0.999933
)	O	O:0.999995
you	O	O:0.999884
provided	O	O:0.999941
it	O	O:0.999996
a	O	O:0.999986
GroupBy	B-API	B-API:0.786017
object	O	O:0.997234
and	O	O:0.999984
not	O	O:0.999995
a	O	O:0.999987
series	O	O:0.999525
,	O	O:0.999984
and	O	O:0.999989
2	O	O:0.999868
)	O	O:0.999971
it	O	O:0.999987
only	O	O:0.999892
works	O	O:0.999961
with	O	O:0.999982
numerical	O	O:0.998716
values	O	O:0.999295
.	O	O:0.999787
	
@USER	O	O:0.998794
Yes	O	O:0.999803
,	O	O:0.999998
thinking	O	O:0.999838
of	O	O:0.999994
the	O	O:0.999971
combine	O	O:0.995464
was	O	O:0.999946
the	O	O:0.999978
hard	O	O:0.999500
part	O	O:0.999590
:-)	O	O:0.999814
.	O	O:0.999892
	
For	O	O:0.999903
set	O	O:0.999819
difference	O	O:0.999944
,	O	O:0.999976
`	O	O:0.999988
s	O	O:0.999581
-	O	O:0.999996
s2	O	O:0.999561
`	O	O:0.999989
does	O	O:0.999444
work	O	O:0.999887
,	O	O:0.999995
but	O	O:0.999989
intersection	O	O:0.944101
as	O	O:0.999987
`	O	O:0.999965
s	O	O:0.998936
&	O	O:0.999983
s2	O	O:0.999331
`	O	O:0.999899
seems	O	O:0.999672
not	O	O:0.999993
to	O	O:0.999998
work	O	O:0.999982
for	O	O:0.999996
pandas	O	O:0.999862
serieses	O	O:0.999527
.	O	O:0.999776
	
I	O	O:0.999829
was	O	O:0.999977
looking	O	O:0.999323
for	O	O:0.999992
a	O	O:0.999975
way	O	O:0.999742
to	O	O:0.999991
apply	O	O:0.993363
a	O	O:0.999920
function	O	O:0.999332
on	O	O:0.999995
the	O	O:0.999999
elements	O	O:0.999906
of	O	O:0.999982
two	O	O:0.999979
serieses	O	O:0.999874
,	O	O:0.999953
but	O	O:0.999929
didn't	O	O:0.999889
find	O	O:0.999924
an	O	O:0.999996
obvious	O	O:0.999806
one	O	O:0.999938
.	O	O:0.999890
	
There	O	O:0.999820
hopefully	O	O:0.999841
will	O	O:0.999939
be	O	O:0.999999
some	O	O:0.999977
support	O	O:0.996219
for	O	O:0.999980
parallel	O	O:0.996814
`	O	O:0.999972
apply	O	B-API:0.973878
`	O	O:0.999806
in	O	O:0.999655
0.14	O	O:0.999732
,	O	O:0.999987
see	O	O:0.999823
here	O	O:0.998898
:	O	O:0.999967
#URL	O	O:0.999717
	
also	O	O:0.999474
,	O	O:0.999998
there's	O	O:0.999829
no	O	O:0.999985
reason	O	O:0.999964
to	O	O:0.999995
use	O	O:0.999998
apply	O	B-API:0.959372
in	O	O:0.999915
this	O	O:0.999764
case	O	O:0.999867
.	O	O:0.999954
	
Apply	O	O:0.999290
upper	O	O:0.998294
and	O	O:0.999966
lower	O	O:0.999742
bounds	O	O:0.997960
to	O	O:0.999924
Pandas	O	O:0.999982
Dataframe	B-API	O:0.969792
	
You	O	O:0.999928
could	O	O:0.999975
iterate	O	O:0.999983
over	O	O:0.999968
each	O	O:0.999732
column	O	O:0.999349
/	O	O:0.999987
bounds-list	O	O:0.997596
and	O	O:0.999988
apply	O	B-API:0.521606
the	O	O:0.999829
same	O	O:0.998834
filter	O	O:0.980343
.	O	O:0.999920
	
#CODE	O	O:0.998453
	
I	O	O:0.999983
apply	O	O:0.902378
a	O	O:0.999855
custom	O	O:0.956790
function	O	O:0.999917
on	O	O:0.999944
the	O	O:0.999990
DataFrame	B-API	O:0.998567
column	O	O:0.998159
(	O	O:0.999998
convert_time	O	O:0.997608
)	O	O:0.999969
#CODE	O	O:0.999387
	
I	O	O:0.999975
encounterd	O	O:0.999757
the	O	O:0.999973
same	O	O:0.999773
question	O	O:0.999622
and	O	O:0.999995
I	O	O:0.999997
used	O	O:0.999954
a	O	O:0.999969
same	O	O:0.999739
way	O	O:0.999991
like	O	O:0.999943
you	O	O:0.999990
to	O	O:0.999995
solve	O	O:0.999969
it	O	O:0.999969
.	O	O:0.999957
	
(	O	O:0.999972
apply	O	O:0.852268
a	O	O:0.999855
function	O	O:0.999599
to	O	O:0.999988
remove	O	O:0.999941
the	O	O:0.999997
unnecessary	O	O:0.999952
data	O	O:0.999909
)	O	O:0.999979
	
Only	O	O:0.999816
better	O	O:0.999400
in	O	O:0.999995
terms	O	O:0.999950
of	O	O:0.999980
simpler	O	O:0.987058
syntax	O	O:0.999855
:	O	O:0.999939
`	O	O:0.999993
df.rain_column.map	O	O:0.976075
(	O	O:0.999992
d	O	O:0.999963
)`	O	O:0.999712
,	O	O:0.999957
and	O	O:0.999997
perhaps	O	O:0.999830
faster	O	O:0.999540
performance-wise	O	O:0.999521
,	O	O:0.999984
it	O	O:0.999996
depends	O	O:0.999919
on	O	O:0.999997
data	O	O:0.999950
size	O	O:0.999821
and	O	O:0.999997
type	O	O:0.999767
for	O	O:0.999981
a	O	O:0.999990
dataframe	B-API	O:0.992299
with	O	O:0.999966
100	O	O:0.999990
rows	O	O:0.999944
then	O	O:0.999672
`	O	O:1.000000
apply	O	B-API:0.936356
`	O	O:0.999749
is	O	O:0.999881
marginally	O	O:0.999035
faster	O	O:0.996963
(	O	O:0.999963
apply	O	O:0.655831
228	O	O:0.997956
us	O	O:0.999803
vs	O	O:0.999605
map	O	B-API:0.719356
287us	O	O:0.999123
)	O	O:0.999992
,	O	O:0.999987
for	O	O:0.999995
one	O	O:0.999970
with	O	O:0.999952
10000	O	O:0.999983
rows	O	O:0.999964
then	O	O:0.999571
map	O	O:0.742578
is	O	O:0.999989
26	O	O:0.999925
times	O	O:0.999340
faster	O	O:0.998301
(	O	O:0.999938
map	O	B-API:0.952925
is	O	O:0.999965
512	O	O:0.999644
us	O	O:0.999933
vs	O	O:0.999955
apply	O	B-API:0.552685
13	O	O:0.999735
ms	O	O:0.999550
)	O	O:0.999936
	
Alright	O	O:0.998489
,	O	O:0.999995
this	O	O:0.999947
makes	O	O:0.999949
a	O	O:0.999998
lot	O	O:0.999936
of	O	O:0.999984
sense	O	O:0.999519
,	O	O:0.999998
since	O	O:0.999939
apply	O	B-API:0.846957
is	O	O:0.999984
more	O	O:0.999469
general	O	O:0.999227
purpose	O	O:0.999897
than	O	O:0.997651
map	O	B-API:0.936121
.	O	O:0.999861
	
How	O	O:0.999879
can	O	O:0.999962
I	O	O:1.000000
use	O	O:0.999993
apply	O	B-API:0.979373
with	O	O:0.999569
pandas	O	O:0.996915
rolling_corr()	B-API	B-API:0.998473
	
Also	O	O:0.999788
how	O	O:0.999991
do	O	O:0.999991
we	O	O:0.999998
do	O	O:0.999979
the	O	O:0.999998
same	O	O:0.999946
using	O	O:0.999985
some	O	O:0.999736
applymap	B-API	B-API:0.959469
or	O	O:0.999971
apply	O	B-API:0.721328
/	O	O:0.997605
map	O	B-API:0.934810
method	O	O:0.999975
of	O	O:0.999983
df	O	O:0.999561
?	O	O:0.999971
	
Ok	O	O:0.999493
.	O	O:0.999734
	
I	O	O:0.999892
understand	O	O:0.999963
this	O	O:0.991256
is	O	O:0.999972
not	O	O:0.999835
how	O	O:0.999966
Pandas	O	O:0.999541
works	O	O:0.999700
.	O	O:0.999829
	
I	O	O:0.999753
was	O	O:0.999979
trying	O	O:0.999556
to	O	O:0.999983
relate	O	O:0.999987
it's	O	O:0.999900
functionality	O	O:0.999952
with	O	O:0.999990
other	O	O:0.999982
data	O	O:0.999981
analysis	O	O:0.999949
tools	O	O:0.999739
.	O	O:0.999892
	
But	O	O:0.999888
in	O	O:0.999965
R	O	O:0.999876
,	O	O:0.999994
I	O	O:0.999990
could	O	O:0.999984
do	O	O:0.999998
a	O	O:0.999998
similar	O	O:0.999460
thing	O	O:0.999972
using	O	O:0.998460
apply	O	B-API:0.968001
method	O	O:0.996686
and	O	O:0.999994
then	O	O:0.999963
using	O	O:0.999985
the	O	O:0.999976
same	O	O:0.972945
if-else	O	O:0.924830
statement	O	O:0.999774
.	O	O:0.999872
	
It	O	O:0.999923
creates	O	O:0.999315
the	O	O:0.999986
right	O	O:0.999522
flag	O	O:0.999482
.	O	O:0.999916
	
Isn't	O	O:0.999884
pandas	O	O:0.999868
an	O	O:0.999996
add	O	O:0.999966
on	O	O:0.999995
of	O	O:0.999955
R	O	O:0.999926
dataframe	B-API	O:0.998982
with	O	O:0.999954
more	O	O:0.999889
better	O	O:0.999853
features	O	O:0.999050
?	O	O:0.999918
	
Or	O	O:0.999974
do	O	O:0.999959
you	O	O:0.999995
think	O	O:0.999940
we	O	O:0.999999
also	O	O:0.999993
have	O	O:0.999999
a	O	O:0.999995
similar	O	O:0.999812
way	O	O:0.999982
to	O	O:0.999973
do	O	O:1.000000
this	O	O:0.999881
in	O	O:0.999996
pandas	O	O:0.999975
using	O	O:0.999993
some	O	O:0.999071
applymap	B-API	B-API:0.978045
or	O	O:0.999619
apply	O	B-API:0.922786
method	O	O:0.999491
and	O	O:0.999852
if-else	O	O:0.996033
construct	O	O:0.989723
?	O	O:0.999943
	
This	O	O:0.998855
is	O	O:0.999993
the	O	O:0.999943
R	O	O:0.999916
code	O	O:0.999652
which	O	O:0.999909
creates	O	O:0.999470
the	O	O:0.999996
flag	O	O:0.999559
properly	O	O:0.999400
:	O	O:0.999980
	
c$Flag	O	O:0.993718
->	O	O:0.999951
apply	O	B-API:0.881933
(	O	O:0.999864
c	O	O:0.999765
,	O	O:0.999986
1	O	O:0.999904
,	O	O:0.999871
function	O	O:0.999167
(	O	O:0.999982
X	O	O:0.999943
)	O	O:0.999923
{	O	O:0.999867
	
Why	O	O:0.999827
not	O	O:0.999993
just	O	O:0.999951
use	O	O:0.999988
apply	O	B-API:0.942148
with	O	O:0.999650
these	O	O:0.999325
functions	O	O:0.999797
.	O	O:0.999818
	
@USER	O	O:0.999737
obviously	O	O:0.999933
you	O	O:0.999994
have	O	O:0.999981
to	O	O:0.999997
elaborate	O	O:0.999984
.	O	O:0.999942
	
Anyway	O	O:0.999825
,	O	O:0.999999
like	O	O:0.999955
I	O	O:0.999991
commented	O	O:0.999921
usually	O	O:0.999440
it's	O	O:0.999781
better	O	O:0.999797
to	O	O:0.999982
use	O	O:0.999985
groupby	B-API	B-API:0.992530
methods	O	O:0.999006
e.g	O	O:0.998872
apply	O	B-API:0.844070
.	O	O:0.998603
	
Thanks	O	O:0.998593
DSM	O	O:0.999441
!	O	O:0.999809
	
@USER	O	O:0.999732
that	O	O:0.999706
would	O	O:0.999994
be	O	O:1.000000
a	O	O:0.999999
sign	O	O:0.998795
that	O	O:0.999966
the	O	O:0.999995
apply	O	B-API:0.899387
did	O	O:0.999570
not	O	O:0.999967
create	O	O:0.999939
a	O	O:0.999996
dataframe	B-API	O:0.991039
.	O	O:0.999887
	
Are	O	O:0.999943
you	O	O:0.999984
sure	O	O:0.999977
there	O	O:0.999985
are	O	O:0.999997
lists	O	O:0.999583
in	O	O:0.999998
your	O	O:0.999892
series	O	O:0.999869
?	O	O:0.999977
	
Now	O	O:0.999925
comes	O	O:0.999551
the	O	O:0.999993
third	O	O:0.999586
part	O	O:0.999395
-	O	O:0.999993
Let's	O	O:0.999958
apply	O	O:0.812738
same	O	O:0.999375
reasoning	O	O:0.997352
.	O	O:0.999777
	
`	O	O:0.999918
reindex	O	B-API:0.996045
`	O	O:0.999712
is	O	O:0.999942
not	O	O:0.999988
defined	O	O:0.999732
in	O	O:0.999911
`	O	O:0.999954
MyDataFrame	O	O:0.947880
`	O	O:0.999978
.	O	O:0.999299
	
Where	O	O:0.999726
should	O	O:0.999864
we	O	O:0.999997
look	O	O:0.999945
next	O	O:0.999673
?	O	O:0.999955
	
Class	O	O:0.998604
hierarchy	O	O:0.999855
,	O	O:0.999990
that	O	O:0.999948
means	O	O:0.999918
`	O	O:0.999994
pandas.DataFrame	B-API	B-API:0.996090
`	O	O:0.999973
.	O	O:0.999510
	
Now	O	O:0.999769
`	O	O:0.999983
reindex	O	B-API:0.992906
`	O	O:0.999842
is	O	O:0.999916
indeed	O	O:0.999910
defined	O	O:0.999796
by	O	O:0.999974
this	O	O:0.999608
class	O	O:0.999514
and	O	O:0.999993
it	O	O:0.999993
returns	O	O:0.999653
a	O	O:0.999962
pandas.DataFrame	B-API	B-API:0.991919
object	O	O:0.999411
!	O	O:0.999874
	
.	O	O:0.997396
(	O	O:0.999895
See	O	O:0.999963
this	O	O:0.999382
:	O	O:0.999989
#URL	O	O:0.999885
)	O	O:0.999987
So	O	O:0.999961
,	O	O:0.999998
no	O	O:0.999983
wonder	O	O:0.999397
`	O	O:0.999994
y	O	O:0.998848
`	O	O:0.999984
is	O	O:0.999987
a	O	O:0.999974
`	O	O:0.999894
pandas	O	O:0.998842
DataFrame	B-API	O:0.995002
`	O	O:0.999909
.	O	O:0.999615
	
Apply	O	O:0.999440
method	O	O:0.999751
of	O	O:0.999971
DataFrame	B-API	O:0.989420
vs	O	O:0.999943
List	O	O:0.999303
Comprehension	O	O:0.999244
	
I	O	O:0.999967
can	O	O:0.999977
do	O	O:0.999993
it	O	O:0.999989
with	O	O:0.999956
list	O	O:0.997879
comprehension	O	O:0.999727
but	O	O:0.999985
I	O	O:0.999979
would	O	O:0.999997
like	O	O:0.999849
to	O	O:0.999998
understand	O	O:0.999995
if	O	O:0.999991
I	O	O:0.999994
can	O	O:0.999993
do	O	O:0.999998
that	O	O:0.999979
with	O	O:0.999988
the	O	O:0.999913
apply	O	B-API:0.646193
method	O	O:0.999208
of	O	O:0.999905
DataFrame	B-API	O:0.990436
.	O	O:0.999916
	
Here	O	O:0.998631
is	O	O:0.999993
a	O	O:0.999982
toy	O	O:0.998925
model	O	O:0.997571
:	O	O:0.999921
#CODE	O	O:0.999802
	
Probably	O	O:0.999768
it	O	O:0.999895
is	O	O:0.999996
just	O	O:0.999924
because	O	O:0.999995
of	O	O:0.999989
my	O	O:0.999977
shallow	O	O:0.999949
knowledge	O	O:0.999891
of	O	O:0.999983
pandas	O	O:0.998815
,	O	O:0.999996
but	O	O:0.999994
when	O	O:0.999904
I	O	O:0.999996
use	O	O:0.999997
the	O	O:0.993611
apply	O	B-API:0.903462
method	O	O:0.999525
I	O	O:0.999968
imagine	O	O:0.999984
the	O	O:0.999955
serie	O	O:0.999912
as	O	O:0.999992
a	O	O:0.999995
list	O	O:0.997775
or	O	O:0.999995
so	O	O:0.999986
end	O	O:0.999982
hence	O	O:0.999963
I	O	O:0.999960
do	O	O:0.999989
not	O	O:0.999955
have	O	O:0.999965
any	O	O:0.999996
idea	O	O:0.999839
on	O	O:0.999981
how	O	O:0.999990
to	O	O:0.999996
"	O	O:1.000000
put	O	O:0.997336
"	O	O:0.999951
the	O	O:0.999920
index	O	O:0.999374
attribute	O	O:0.999860
.	O	O:0.999922
	
The	O	O:0.999550
`	O	O:0.999693
(	O	O:0.999976
df1-df2	O	O:0.999896
)	O	O:0.999969
.dropna()	B-API	B-API:0.996976
`	O	O:0.999985
call	O	O:0.995849
creates	O	O:0.999970
a	O	O:0.999991
slice	O	O:0.997965
of	O	O:0.999982
the	O	O:0.999927
dataframe	B-API	O:0.997558
.	O	O:0.999850
	
When	O	O:0.999726
you	O	O:0.999994
apply	O	O:0.973975
a	O	O:0.999993
new	O	O:0.998349
operation	O	O:0.999680
,	O	O:0.999994
this	O	O:0.999946
triggers	O	O:0.999971
a	O	O:0.999990
`	O	O:0.999857
SettingWithCopy	O	O:0.664687
`	O	O:0.999993
check	O	O:0.997523
because	O	O:0.999985
it	O	O:0.999979
could	O	O:0.999992
be	O	O:1.000000
a	O	O:0.999998
copy	O	B-API:0.687272
(	O	O:0.999958
but	O	O:0.999816
often	O	O:0.983590
is	O	O:0.999993
not	O	O:0.999806
)	O	O:0.999985
.	O	O:0.999777
	
slices	O	O:0.988856
aren't	O	O:0.999915
conditional	O	O:0.997904
,	O	O:0.999991
you'll	O	O:0.999906
have	O	O:0.999958
to	O	O:0.999998
apply	O	O:0.997260
a	O	O:0.999907
filter	O	O:0.826293
.	O	O:0.999872
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999982
`	O	O:0.999970
apply	O	B-API:0.990129
`	O	O:0.999901
,	O	O:0.999938
there	O	O:0.999832
is	O	O:0.999994
probably	O	O:0.999942
a	O	O:0.999995
better	O	O:0.997683
way	O	O:0.999951
than	O	O:0.999792
this	O	O:0.999442
:	O	O:0.999984
#CODE	O	O:0.999841
	
One	O	O:0.999860
way	O	O:0.999719
is	O	O:0.999985
to	O	O:0.999932
merge	O	O:0.991981
index	O	O:0.999948
values	O	O:0.999920
as	O	O:0.999998
well	O	O:0.999882
-	O	O:0.999978
pd.merge	B-API	B-API:0.992790
(	O	O:0.999966
df1.reset_index()	O	O:0.992717
,	O	O:0.999985
df2.reset_index()	O	O:0.937857
,	O	O:0.999991
...	O	O:0.999701
)	O	O:0.999951
.	O	O:0.999850
	
Then	O	O:0.999450
run	O	O:0.999975
apply	O	O:0.943570
twice	O	O:0.999720
to	O	O:0.999989
return	O	O:0.999982
indices	O	O:0.999506
of	O	O:0.999971
df1	O	O:0.999270
and	O	O:0.999995
df2	O	O:0.999914
as	O	O:0.999942
appropriate	O	O:0.999599
.	O	O:0.999804
	
You	O	O:0.999910
could	O	O:0.999995
then	O	O:0.999993
select	O	O:0.999994
appropriate	O	O:1.000000
rows	O	O:0.999910
from	O	O:0.999955
the	O	O:0.999994
two	O	O:0.999938
and	O	O:0.999994
concatenate	O	O:0.509819
pd.concat	B-API	B-API:0.998741
([	O	O:0.999899
df1.ix	O	O:0.825921
[	O	O:0.999964
ix1	O	O:0.999855
]	O	O:0.999912
,	O	O:0.999944
df2.ix	O	O:0.957124
[	O	O:0.999968
ix2	O	O:0.999908
]]	O	O:0.999915
,	O	O:0.999961
ignore_index=True	O	O:0.997099
)	O	O:0.999942
.	O	O:0.999832
	
This	O	O:0.999209
might	O	O:0.999945
make	O	O:0.999937
it	O	O:0.999991
faster	O	O:0.999481
	
I	O	O:0.999992
have	O	O:0.999987
a	O	O:0.999994
dataframe	B-API	O:0.999067
to	O	O:0.999994
start	O	O:0.999996
with	O	O:0.999969
,	O	O:0.999995
with	O	O:0.999986
that	O	O:0.999968
dataframe	B-API	O:0.999761
I	O	O:0.999999
want	O	O:0.999987
to	O	O:0.999930
apply	O	O:0.996310
some	O	O:0.994450
function	O	O:0.999592
.	O	O:0.999899
	
I	O	O:0.999988
want	O	O:0.999985
to	O	O:0.999939
repeat	O	O:0.999961
this	O	O:0.999966
many	O	O:0.999946
times	O	O:0.999284
and	O	O:0.999994
build	O	O:0.999443
/	O	O:0.999939
stack	O	B-API:0.613289
the	O	O:0.999993
reults	O	O:0.999348
from	O	O:0.999975
the	O	O:0.999993
operations	O	O:0.999895
in	O	O:0.999995
a	O	O:0.999997
new	O	O:0.999417
larger	O	O:0.999251
dataframe	B-API	O:0.979393
.	O	O:0.999729
	
I	O	O:0.999831
was	O	O:0.999994
thinking	O	O:0.999588
of	O	O:0.999988
doing	O	O:0.999905
this	O	O:0.999955
with	O	O:0.999973
a	O	O:0.999985
for	O	O:0.999898
loop	O	O:0.998695
.	O	O:0.999656
	
Here	O	O:0.998632
is	O	O:0.999993
a	O	O:0.999987
simplified	O	O:0.999197
example	O	O:0.999965
that	O	O:0.999961
I	O	O:0.999995
can	O	O:0.999994
not	O	O:0.999997
get	O	O:0.999992
to	O	O:0.999991
work	O	O:0.999947
:	O	O:0.999987
#CODE	O	O:0.999927
	
Clearly	O	O:0.999836
the	O	O:0.999966
`	O	O:0.999974
apply	O	B-API:0.998202
`	O	O:0.999828
method	O	O:0.998703
isn't	O	O:0.999989
a	O	O:0.999986
disaster	O	O:0.998519
.	O	O:0.999802
	
But	O	O:0.999955
just	O	O:0.999850
seems	O	O:0.999963
weird	O	O:0.999933
that	O	O:0.999926
I	O	O:0.999997
couldn't	O	O:0.999976
figure	O	O:0.999298
out	O	O:0.999936
the	O	O:0.999966
syntax	O	O:0.999785
for	O	O:0.999980
doing	O	O:0.999990
this	O	O:0.999929
directly	O	O:0.999801
across	O	O:0.999893
all	O	O:0.999977
the	O	O:0.999997
columns	O	O:0.999849
with	O	O:0.999804
`	O	O:0.999993
mul	O	O:0.988717
`	O	O:0.999984
.	O	O:0.999097
	
Is	O	O:0.999985
there	O	O:0.999977
a	O	O:0.999998
more	O	O:0.999453
direct	O	O:0.999801
way	O	O:0.999942
to	O	O:0.999947
handle	O	O:0.999994
this	O	O:0.999864
?	O	O:0.999982
	
If	O	O:0.999935
not	O	O:0.999951
,	O	O:0.999981
is	O	O:0.999997
there	O	O:0.999929
an	O	O:0.999996
intuitive	O	O:0.999866
reason	O	O:0.999890
the	O	O:0.999950
`	O	O:0.999984
mul	O	O:0.963784
`	O	O:0.999978
syntax	O	O:0.999289
shouldn't	O	O:0.999959
be	O	O:0.999994
enhanced	O	O:0.999938
to	O	O:0.999970
work	O	O:0.999998
this	O	O:0.999955
way	O	O:0.999980
?	O	O:0.999955
	
Jeff	O	O:0.999241
,	O	O:0.999994
thanks	O	O:0.999356
for	O	O:0.999985
the	O	O:0.999923
reply	O	O:0.997286
.	O	O:0.999674
	
And	O	O:0.999966
sorry	O	O:0.999302
for	O	O:0.999976
highlighting	O	O:0.999229
something	O	O:0.998849
that's	O	O:0.999503
already	O	O:0.999956
been	O	O:0.999777
flagged	O	O:0.999943
as	O	O:0.999992
an	O	O:0.999889
issue	O	O:0.999528
.	O	O:0.999737
	
For	O	O:0.999923
what	O	O:0.999566
it's	O	O:0.999861
worth	O	O:0.999928
,	O	O:0.999995
I	O	O:0.999995
think	O	O:0.999963
my	O	O:0.999893
`	O	O:0.999988
apply	O	B-API:0.973154
`	O	O:0.999972
column-wise	O	O:0.989419
solution	O	O:0.999953
,	O	O:0.999992
above	O	O:0.999814
,	O	O:0.999968
is	O	O:0.999991
easier	O	O:0.999311
to	O	O:0.999996
read	O	O:0.999962
than	O	O:0.999931
the	O	O:0.999991
`	O	O:0.999882
pd.concat	B-API	B-API:0.993921
...	O	O:0.999770
	
`	O	O:0.999932
method	O	O:0.999674
in	O	O:0.999999
your	O	O:0.999871
`	O	O:0.999925
[	O	O:0.999946
129	O	O:0.999850
]`	O	O:0.999676
.	O	O:0.999421
	
What	O	O:0.999833
do	O	O:0.999971
you	O	O:0.999988
think	O	O:0.999822
?	O	O:0.999982
	
using	O	O:0.998501
``	O	O:0.999273
apply	O	B-API:0.993823
``	O	O:0.999567
will	O	O:0.994446
be	O	O:0.999998
much	O	O:0.999725
slower	O	O:0.998267
.	O	O:0.999710
	
Both	O	O:0.998981
options	O	O:0.999542
works	O	O:0.999947
very	O	O:0.999940
nice	O	O:0.999344
:)	O	O:0.999943
Do	O	O:0.999981
you	O	O:0.999990
know	O	O:0.999931
hot	O	O:0.999933
to	O	O:0.999985
apply	O	O:0.959530
your	O	O:0.999111
method	O	O:0.999929
to	O	O:0.999993
use	O	O:0.999999
secondary	O	O:0.997191
`	O	O:0.999971
y_axis	O	O:0.818853
`	O	O:0.999948
[	O	O:0.999939
example	O	O:0.999875
]	O	O:0.999553
(	O	O:0.999939
#URL	O	O:0.999531
)	O	O:0.999959
?	O	O:0.999890
	
I	O	O:0.999991
know	O	O:0.999941
I	O	O:0.999936
can	O	O:0.999971
loop	O	O:0.999949
through	O	O:0.999663
and	O	O:0.999981
apply	O	B-API:0.661215
regex	O	O:0.986472
#CODE	O	O:0.997554
	
whats	O	O:0.999093
the	O	O:0.999978
best	O	O:0.999320
way	O	O:0.999969
to	O	O:0.999986
apply	O	O:0.986384
it	O	O:0.999947
to	O	O:0.999992
the	O	O:1.000000
column	O	O:0.999798
in	O	O:0.999988
the	O	O:0.999993
dataframe	B-API	O:0.996634
?	O	O:0.999937
	
so	O	O:0.999966
I	O	O:0.999999
have	O	O:0.999987
df	O	O:0.998984
[	O	O:0.999960
'	O	O:0.999990
pricing	O	O:0.999755
']	O	O:0.999974
do	O	O:0.999636
I	O	O:0.999995
just	O	O:0.999971
loop	O	O:0.999917
row	O	O:0.999986
by	O	O:0.999959
row	O	O:0.999888
?	O	O:0.999842
	
It	O	O:0.999798
is	O	O:0.999996
like	O	O:0.999895
a	O	O:0.999997
dataframe	B-API	O:0.972070
,	O	O:0.999946
but	O	O:0.999978
requires	O	O:0.999070
`	O	O:0.999992
apply	O	B-API:0.960316
`	O	O:0.999982
to	O	O:0.999963
generate	O	O:0.999998
a	O	O:0.999996
new	O	O:0.999764
structure	O	O:0.999152
(	O	O:0.999975
either	O	O:0.999982
reduced	O	O:0.999748
or	O	O:0.999993
an	O	O:0.999950
actual	O	O:0.999923
DataFrame	B-API	O:0.988637
)	O	O:0.999942
.	O	O:0.999831
	
Doing	O	O:0.999925
something	O	O:0.999805
like	O	O:0.999296
:	O	O:0.999991
`	O	O:0.999978
df.groupby	B-API	B-API:0.997678
(	O	O:0.999994
...	O	O:0.999848
)	O	O:0.999978
.sum()	B-API	B-API:0.996141
`	O	O:0.999887
is	O	O:0.999953
syntactic	O	O:0.999729
sugar	O	O:0.999844
for	O	O:0.999975
using	O	O:0.999550
`	O	O:0.999708
apply	O	B-API:0.997952
`	O	O:0.999780
.	O	O:0.997163
	
Functions	O	O:0.998442
which	O	O:0.999635
are	O	O:0.999986
naturally	O	O:0.999985
applicable	O	O:0.999961
to	O	O:0.999983
using	O	O:0.999994
this	O	O:0.999839
kind	O	O:0.999871
of	O	O:0.999984
sugar	O	O:0.999508
are	O	O:0.999987
enabled	O	O:0.999779
;	O	O:0.999989
otherwise	O	O:0.999964
they	O	O:0.999991
will	O	O:0.999982
raise	O	O:0.999928
an	O	O:0.999975
error	O	O:0.999465
.	O	O:0.999781
	
Their	O	O:0.999226
are	O	O:0.999988
ways	O	O:0.999853
to	O	O:0.999992
apply	O	O:0.998188
some	O	O:0.999721
operations	O	O:0.999596
to	O	O:0.999995
multiple	O	O:0.999999
slabs	O	O:0.999836
of	O	O:0.999998
a	O	O:0.999965
n-dim	O	O:0.991962
(	O	O:0.999942
esp	O	O:0.999866
.	O	O:0.999973
via	O	O:0.999951
new	O	O:0.999761
`	O	O:0.999980
apply	O	B-API:0.967032
`	O	O:0.999810
in	O	O:0.999353
0.13.1	O	O:0.999891
,	O	O:0.999989
see	O	O:0.999949
here	O	O:0.998884
.	O	O:0.999931
	
Using	O	O:0.999534
partial	O	O:0.992229
with	O	O:0.999496
groupby	B-API	B-API:0.995011
and	O	O:0.999992
apply	O	B-API:0.903074
in	O	O:0.998876
Pandas	O	O:0.998041
	
I	O	O:0.999934
am	O	O:0.999993
having	O	O:0.999609
trouble	O	O:0.999844
using	O	O:0.999910
partial	O	O:0.992211
with	O	O:0.997843
groupby	B-API	B-API:0.996329
and	O	O:0.999986
apply	O	B-API:0.920427
in	O	O:0.998735
Pandas	O	O:0.998147
.	O	O:0.999779
	
Perhaps	O	O:0.999769
I	O	O:0.999958
am	O	O:0.999997
not	O	O:0.999923
using	O	O:0.999996
this	O	O:0.999498
right	O	O:0.999371
?	O	O:0.999964
	
#CODE	O	O:0.998453
	
There	O	O:0.999014
is	O	O:0.999989
no	O	O:0.999989
need	O	O:0.999972
to	O	O:0.999993
use	O	O:0.999995
`	O	O:0.999848
functools.partial	O	B-API:0.616409
`	O	O:0.999996
here	O	O:0.999342
,	O	O:0.999999
as	O	O:0.999997
you	O	O:0.999919
can	O	O:0.999994
provide	O	O:0.999997
arguments	O	O:0.999946
to	O	O:0.999996
the	O	O:0.999996
function	O	O:0.999922
inside	O	O:0.999904
the	O	O:0.999987
`	O	O:0.999964
apply	O	B-API:0.983944
`	O	O:0.999960
call	O	O:0.948780
.	O	O:0.999943
	
If	O	O:0.999996
your	O	O:0.998547
function	O	O:0.999936
has	O	O:0.999992
as	O	O:0.999998
first	O	O:0.999219
argument	O	O:0.999927
the	O	O:0.999923
group	O	O:0.982099
(	O	O:0.999995
so	O	O:0.999987
switch	O	O:0.999939
the	O	O:0.999999
order	O	O:0.999853
of	O	O:0.999993
the	O	O:0.999983
arguments	O	O:0.999920
)	O	O:0.999991
,	O	O:0.999998
then	O	O:0.999954
the	O	O:0.999999
other	O	O:0.999968
arguments	O	O:0.999728
in	O	O:0.999950
`	O	O:0.999994
apply	O	B-API:0.968650
`	O	O:0.999955
are	O	O:0.999900
passed	O	O:0.999749
to	O	O:0.999984
the	O	O:0.999988
function	O	O:0.999808
and	O	O:0.999976
in	O	O:0.999999
this	O	O:0.999848
way	O	O:0.999993
you	O	O:0.999986
can	O	O:0.999996
specify	O	O:0.999990
the	O	O:0.999987
`	O	O:0.999988
columnName	O	O:0.995863
`	O	O:0.999994
in	O	O:0.999957
the	O	O:0.999969
apply	O	B-API:0.977439
:	O	O:0.999439
#CODE	O	O:0.999432
	
The	O	O:0.999816
reason	O	O:0.999529
it	O	O:0.999979
does	O	O:0.999895
not	O	O:0.999995
work	O	O:0.999969
with	O	O:0.999988
partial	O	O:0.999557
,	O	O:0.999966
is	O	O:0.999996
that	O	O:0.999741
`	O	O:0.999997
functools.wraps	O	O:0.793681
`	O	O:0.999983
does	O	O:0.998814
not	O	O:0.999997
seem	O	O:0.999981
to	O	O:0.999998
work	O	O:0.999999
together	O	O:0.999936
with	O	O:0.999935
`	O	O:0.999968
functools.partial	O	B-API:0.539017
`	O	O:0.999920
(	O	O:0.998655
`	O	O:0.999993
wraps	O	O:0.991377
`	O	O:0.999971
is	O	O:0.999919
used	O	O:0.999817
inside	O	O:0.999682
the	O	O:0.999963
apply	O	B-API:0.927608
)	O	O:0.999644
.	O	O:0.999325
	
except	O	O:0.999864
that	O	O:0.999928
the	O	O:0.999998
top	O	O:0.999864
n	O	O:0.999757
logic	O	O:0.999842
should	O	O:0.999952
be	O	O:0.999985
embedded	O	O:0.998551
(	O	O:0.999897
head	O	O:0.998740
(	O	O:0.999989
n	O	O:0.999909
)	O	O:0.999986
does	O	O:0.999675
not	O	O:0.999994
work	O	O:0.999989
with	O	O:0.999986
n	O	O:0.999987
depends	O	O:0.999923
on	O	O:0.999995
my	O	O:0.999951
data-set	O	O:0.999973
-	O	O:0.999991
I	O	O:0.999999
guess	O	O:0.999962
I	O	O:0.999991
need	O	O:0.999984
to	O	O:0.999959
use	O	O:0.999996
"	O	O:0.999942
apply	O	B-API:0.933318
"	O	O:0.999702
?	O	O:0.999323
	
-	O	O:0.999900
and	O	O:0.999989
post	O	O:0.999857
this	O	O:0.999827
the	O	O:0.999971
Object	O	O:0.999848
,	O	O:0.999982
which	O	O:0.999884
is	O	O:0.999997
a	O	O:0.999932
""	O	O:0.999583
object	O	O:0.999892
needs	O	O:0.999944
to	O	O:0.999993
be	O	O:1.000000
identified	O	O:0.999954
by	O	O:0.999973
matplotlib	O	O:0.999789
with	O	O:0.999800
its	O	O:0.999868
own	O	O:0.999942
labels	O	O:0.994973
(	O	O:0.999991
top	O	O:0.999952
n	O	O:0.999777
"	O	O:0.999990
name	O	O:0.999725
"	O	O:0.999993
here	O	O:0.999301
)	O	O:0.999953
	
Still	O	O:0.999635
not	O	O:0.999984
following	O	O:0.999907
how	O	O:0.999987
the	O	O:0.999977
cluster	O	O:0.999431
name	O	O:0.999843
is	O	O:0.999978
chosen	O	O:0.995281
.	O	O:0.999929
	
Also	O	O:0.999789
,	O	O:0.999995
you	O	O:0.999973
don't	O	O:0.999985
need	O	O:0.999990
to	O	O:0.999995
apply	O	O:0.994833
list	O	O:0.992601
in	O	O:0.999975
definition	O	O:0.999949
of	O	O:0.999993
cn1	O	O:0.999142
since	O	O:0.999927
you're	O	O:0.999940
iterating	O	O:0.999932
through	O	O:0.999392
it	O	O:0.999874
.	O	O:0.999897
	
Thanks	O	O:0.999079
to	O	O:0.999962
user1827356	O	O:0.999980
,	O	O:0.999978
I	O	O:0.999991
sped	O	O:0.999907
it	O	O:0.999981
up	O	O:0.999994
by	O	O:0.999997
a	O	O:0.999996
factor	O	O:0.997069
of	O	O:0.999990
100	O	O:0.999749
by	O	O:0.999989
taking	O	O:0.999800
the	O	O:0.999921
operation	O	O:0.999908
out	O	O:0.999962
of	O	O:0.999996
the	O	O:0.999937
apply	O	B-API:0.752298
.	O	O:0.998708
	
For	O	O:0.999979
some	O	O:0.999616
reason	O	O:0.999915
first	O	O:0.999619
was	O	O:0.999987
dropping	O	O:0.999397
by	O	O:0.999882
Group	O	O:0.999915
column	O	O:0.999755
,	O	O:0.999997
so	O	O:0.999991
I	O	O:0.999989
used	O	O:0.999872
idxmax	B-API	B-API:0.998700
instead	O	O:0.999726
.	O	O:0.999823
	
#CODE	O	O:0.998453
	
Then	O	O:0.999754
using	O	O:0.999970
the	O	O:0.999940
built-in	O	O:0.993474
apply	O	B-API:0.755772
function	O	O:0.995808
in	O	O:0.999933
pandas	O	O:0.999575
.	O	O:0.999936
	
But	O	O:0.999977
then	O	O:0.999896
,	O	O:1.000000
I	O	O:0.999992
realize	O	O:0.999964
none	O	O:0.999806
of	O	O:0.999998
my	O	O:0.999982
dates	O	O:0.999606
are	O	O:0.999973
in	O	O:0.999996
fact	O	O:0.999912
strings	O	O:0.999858
,	O	O:0.999988
so	O	O:0.999997
that	O	O:0.999890
does	O	O:0.999974
not	O	O:0.999998
really	O	O:0.999980
solve	O	O:0.999811
the	O	O:0.999946
problem	O	O:0.998707
.	O	O:0.999839
	
#CODE	O	O:0.998453
	
no	O	O:0.999935
,	O	O:0.999994
you	O	O:0.999996
need	O	O:0.999981
to	O	O:0.999997
do	O	O:1.000000
this	O	O:0.999975
on	O	O:0.999995
the	O	O:0.999998
entire	O	O:0.999942
frame	O	O:0.999995
,	O	O:0.999998
selecting	O	O:0.999750
out	O	O:0.999931
individual	O	O:0.999889
elements	O	O:0.998285
is	O	O:0.999960
general	O	O:0.999319
VERY	O	O:0.999553
slow	O	O:0.996519
.	O	O:0.999806
	
Try	O	O:0.999908
doing	O	O:0.999952
what	O	O:0.999525
I	O	O:0.999989
suggegted	O	O:0.999910
AFTER	O	O:0.999712
a	O	O:0.999913
groupby	B-API	B-API:0.999734
(	O	O:0.999976
e.g.	O	O:0.998523
in	O	O:0.999989
the	O	O:0.999989
apply	O	B-API:0.765238
function	O	O:0.999700
itself	O	O:0.999560
,	O	O:0.999995
which	O	O:0.999951
only	O	O:0.999871
has	O	O:0.999989
a	O	O:0.999984
time-index	O	O:0.998902
and	O	O:0.999996
only	O	O:0.999924
has	O	O:0.999960
the	O	O:0.999994
elements	O	O:0.999655
for	O	O:0.999957
which	O	O:0.999971
group	O	O:0.998534
you	O	O:0.999995
need	O	O:0.999926
)	O	O:0.999990
	
You	O	O:0.999877
could	O	O:0.999985
also	O	O:0.999985
use	O	O:0.999994
`	O	O:0.999901
shift	O	B-API:0.988431
`	O	O:0.999989
to	O	O:0.999908
accomplish	O	O:0.999996
this	O	O:0.999908
within	O	O:0.999959
a	O	O:0.999985
`	O	O:0.999896
groupby	B-API	B-API:0.999298
`	O	O:0.999971
/	O	O:0.997503
`	O	O:0.999989
apply	O	B-API:0.995394
`	O	O:0.999432
:	O	O:0.999282
#CODE	O	O:0.999898
	
this	O	O:0.998521
is	O	O:0.999993
pretty	O	O:0.999514
awesome	O	O:0.999877
,	O	O:0.999975
never	O	O:0.999679
thought	O	O:0.999870
about	O	O:0.999840
shift	O	B-API:0.930500
.	O	O:0.999098
	
I	O	O:0.999907
did	O	O:0.999967
try	O	O:0.999917
to	O	O:0.999973
use	O	O:0.999989
groupby	B-API	B-API:0.997557
and	O	O:0.999973
apply	O	B-API:0.655662
with	O	O:0.999025
a	O	O:0.999912
vlookup	O	O:0.997207
and	O	O:0.999967
couldn't	O	O:0.999815
quite	O	O:0.999582
crack	O	O:0.997854
it	O	O:0.999957
.	O	O:0.999984
this	O	O:0.999866
works	O	O:0.999969
perfectly	O	O:0.999154
,	O	O:0.999947
but	O	O:0.999992
just	O	O:0.999801
for	O	O:0.999998
my	O	O:0.999840
own	O	O:0.999946
educational	O	O:0.999458
use	O	O:0.999935
,	O	O:0.999933
if	O	O:0.999965
there	O	O:0.999918
were	O	O:0.999983
some	O	O:0.999968
years	O	O:0.999853
skipped	O	O:0.999516
and	O	O:0.999997
a	O	O:0.999987
vlookup	O	O:0.991036
was	O	O:0.999924
needed	O	O:0.999925
,	O	O:0.999992
would	O	O:0.999978
you	O	O:0.999992
know	O	O:0.999995
what	O	O:0.999986
to	O	O:0.999988
do	O	O:0.999998
?	O	O:0.999974
	
Why	O	O:0.999455
is	O	O:0.999995
this	O	O:0.999916
printing	O	O:0.999828
the	O	O:0.999806
print	O	O:0.998844
statement	O	O:0.999865
in	O	O:0.999990
the	O	O:0.999977
function	O	O:0.999910
4	O	O:0.999941
times	O	O:0.999700
?	O	O:0.999965
	
The	O	O:0.999940
way	O	O:0.999915
I	O	O:0.999967
would	O	O:0.999990
have	O	O:0.999691
thought	O	O:0.999804
it	O	O:0.999984
works	O	O:0.999535
is	O	O:0.999993
to	O	O:0.999983
group	O	O:0.999931
`	O	O:0.999995
df	O	O:0.996477
`	O	O:0.999999
into	O	O:0.996660
3	O	O:0.999982
dataframes	O	O:0.996565
(	O	O:0.999981
for	O	O:0.999993
each	O	O:0.999074
machine	O	O:0.999414
)	O	O:0.999977
and	O	O:0.999987
apply	O	B-API:0.720622
`	O	O:0.999614
func	O	O:0.852293
`	O	O:0.999996
on	O	O:0.999988
each	O	O:0.999950
of	O	O:0.999994
those	O	O:0.999946
grouped	O	O:0.999912
dataframes	O	O:0.999181
.	O	O:0.999726
	
But	O	O:0.999975
this	O	O:0.998652
is	O	O:0.999979
not	O	O:0.999982
what	O	O:0.999957
I	O	O:0.999981
observe	O	O:0.999821
...	O	O:0.996811
	
For	O	O:0.999935
example	O	O:0.999725
if	O	O:0.999997
three	O	O:0.999976
values	O	O:0.999662
in	O	O:0.999998
a	O	O:0.999996
row	O	O:0.999801
are	O	O:0.999990
all	O	O:0.999984
higher	O	O:0.999788
than	O	O:0.999551
the	O	O:0.999988
previous	O	O:0.999460
,	O	O:0.999963
and	O	O:0.999996
the	O	O:0.999989
fourth	O	O:0.992238
is	O	O:0.999980
lower	O	O:0.998730
,	O	O:0.999998
then	O	O:0.999835
I	O	O:1.000000
want	O	O:0.999997
to	O	O:0.999965
add	O	O:0.999997
the	O	O:0.999986
first	O	O:0.999747
three	O	O:0.999436
.	O	O:0.999830
	
Does	O	O:0.999747
that	O	O:0.999967
make	O	O:0.999921
sense	O	O:0.999874
.	O	O:0.999840
	
I	O	O:0.999983
want	O	O:0.999965
the	O	O:0.999739
capability	O	O:0.999917
that	O	O:0.999799
excels	O	O:0.999846
cell.offset	O	O:0.999739
property	O	O:0.999887
or	O	O:0.999985
array	O	O:0.999900
element	O	O:0.999771
provides	O	O:0.998397
.	O	O:0.999896
	
I	O	O:0.999989
need	O	O:0.999980
to	O	O:0.999975
be	O	O:1.000000
able	O	O:0.999983
to	O	O:0.999997
apply	O	O:0.985578
calculations	O	O:0.998668
on	O	O:0.999995
multiple	O	O:0.999971
values	O	O:0.999966
from	O	O:0.999972
a	O	O:0.999998
dataframe	B-API	O:0.999370
column	O	O:0.999969
,	O	O:0.999996
rather	O	O:0.999983
than	O	O:0.999969
a	O	O:0.999999
single	O	O:0.999590
value	O	O:0.999852
.	O	O:0.999795
	
I	O	O:0.999985
want	O	O:0.999972
to	O	O:0.999948
apply	O	O:0.912989
my_func	O	O:0.494084
(	O	O:0.999976
a	O	O:0.999996
custom	O	O:0.996833
created	O	O:0.999111
function	O	O:0.999946
)	O	O:0.999993
to	O	O:0.999997
each	O	O:0.999995
row	O	O:0.999983
of	O	O:0.999996
a	O	O:0.999989
dataframe	B-API	O:0.992102
.	O	O:0.999860
	
#CODE	O	O:0.998453
	
You	O	O:0.999966
need	O	O:0.999960
to	O	O:0.999997
set	O	O:0.999992
`	O	O:0.999992
axis=1	O	O:0.995713
`	O	O:0.999991
in	O	O:0.999442
`	O	O:0.999994
apply	O	B-API:0.991938
`	O	O:0.999447
:	O	O:0.999300
#CODE	O	O:0.999898
	
If	O	O:0.999935
you're	O	O:0.999979
only	O	O:0.999991
passing	O	O:0.999841
in	O	O:0.999985
the	O	O:0.999986
row	O	O:0.999937
,	O	O:0.999996
you	O	O:0.999984
can	O	O:0.999997
just	O	O:0.999998
do	O	O:0.999997
`	O	O:0.999977
df.apply	B-API	B-API:0.995387
(	O	O:0.999965
my_func	O	O:0.923376
,	O	O:0.999978
axis=1	O	O:0.999512
)`	O	O:0.999465
.	O	O:0.999644
	
Atlernatively	O	O:0.999243
,	O	O:0.999996
you	O	O:0.999989
can	O	O:0.999975
use	O	O:0.999999
the	O	O:0.999948
`	O	O:0.999967
args	O	O:0.983903
`	O	O:0.999998
kwarg	O	O:0.999609
or	O	O:0.999999
a	O	O:0.999976
`	O	O:0.999973
lambda	O	O:0.996269
`	O	O:0.999995
to	O	O:0.999977
pass	O	O:0.999894
in	O	O:0.999993
more	O	O:0.999795
arguments	O	O:0.999646
.	O	O:0.999770
	
`	O	O:0.999898
apply	O	B-API:0.994068
(	O	O:0.999952
my_funx	O	O:0.985166
,	O	O:0.999980
axis=1	O	O:0.999613
,	O	O:0.999986
args	O	O:0.996199
=(	O	O:0.999929
par1	O	O:0.991658
,	O	O:0.999984
par2	O	O:0.999741
))`	O	O:0.999112
or	O	O:0.999971
`	O	O:0.999962
apply	O	B-API:0.983052
(	O	O:0.999978
lambda	O	O:0.997417
row	O	O:0.999590
:	O	O:0.999768
my_func	O	O:0.969023
(	O	O:0.999988
row	O	O:0.999729
,	O	O:0.999989
par1	O	O:0.996559
,	O	O:0.999991
par2	O	O:0.999292
)	O	O:0.999986
,	O	O:0.999988
axis=1	O	O:0.999760
)`	O	O:0.999554
	
However	O	O:0.999536
,	O	O:0.999988
it	O	O:0.999953
is	O	O:0.999993
really	O	O:0.999717
slow	O	O:0.998977
.	O	O:0.999816
	
I	O	O:0.999843
looked	O	O:0.999461
around	O	O:0.996187
and	O	O:0.999955
found	O	O:0.999398
`	O	O:0.999953
apply	O	B-API:0.966767
`	O	O:0.999970
can	O	O:0.999452
do	O	O:0.999999
the	O	O:0.999995
work	O	O:0.998017
too	O	O:0.999551
:	O	O:0.999991
#CODE	O	O:0.999749
	
It's	O	O:0.999938
even	O	O:0.999591
faster	O	O:0.999784
.	O	O:0.999857
	
With	O	O:0.999828
my	O	O:0.999967
larger	O	O:0.998960
dataset	O	O:0.999410
(	O	O:0.999973
about	O	O:0.999976
90k	O	O:0.999994
rows	O	O:0.999278
)	O	O:0.999993
,	O	O:0.999997
the	O	O:0.999983
`	O	O:0.999972
transform	O	B-API:0.996409
`	O	O:0.999968
method	O	O:0.999892
takes	O	O:0.999941
about	O	O:0.999930
44	O	O:0.999948
secs	O	O:0.999377
on	O	O:0.999995
my	O	O:0.999979
computer	O	O:0.999915
,	O	O:0.999991
`	O	O:0.999992
apply	O	B-API:0.988015
`	O	O:0.999965
takes	O	O:0.995129
~2	O	O:0.999978
secs	O	O:0.997927
and	O	O:0.999991
the	O	O:0.999989
`	O	O:0.999830
for	O	O:0.999902
loop	O	O:0.999372
`	O	O:0.999970
takes	O	O:0.999685
only	O	O:0.999950
~1	O	O:0.999953
secs	O	O:0.998694
.	O	O:0.999885
	
I	O	O:0.999988
need	O	O:0.999971
to	O	O:0.999991
work	O	O:0.999997
on	O	O:0.999997
much	O	O:0.999933
larger	O	O:0.999960
dataset	O	O:0.999949
so	O	O:0.999991
even	O	O:0.999936
the	O	O:0.999999
time	O	O:0.999964
difference	O	O:0.999860
between	O	O:0.999742
the	O	O:0.999969
`	O	O:0.999964
apply	O	B-API:0.991410
`	O	O:0.999893
and	O	O:0.999478
`	O	O:0.999991
for	O	O:0.999645
loop	O	O:0.999132
`	O	O:0.999962
makes	O	O:0.999661
a	O	O:0.999997
difference	O	O:0.999713
to	O	O:0.999969
me	O	O:0.999992
.	O	O:0.999880
	
However	O	O:0.999706
,	O	O:0.999991
the	O	O:0.999989
`	O	O:0.999947
for	O	O:0.999939
loop	O	O:0.999244
`	O	O:0.999949
looks	O	O:0.999503
ugly	O	O:0.999341
and	O	O:0.999927
may	O	O:0.999957
not	O	O:0.999963
be	O	O:0.999998
easily	O	O:0.999961
applied	O	O:0.999823
if	O	O:0.999946
I	O	O:0.999997
need	O	O:0.999991
to	O	O:0.999991
create	O	O:0.999978
other	O	O:0.999989
group-based	O	O:0.999847
variables	O	O:0.998394
.	O	O:0.999864
	
Above	O	O:0.998952
"	O	O:0.999988
apply_by_multiprocessing	O	O:0.996536
"	O	O:0.999945
can	O	O:0.999530
execute	O	O:0.999896
Pandas	O	O:0.999943
Dataframe	B-API	O:0.994640
apply	O	B-API:0.845701
in	O	O:0.999844
parallel	O	O:0.993011
.	O	O:0.999876
	
But	O	O:0.999971
when	O	O:0.999729
I	O	O:0.999998
make	O	O:0.999988
it	O	O:0.999929
to	O	O:0.999992
Celery	O	O:0.999996
task	O	O:0.999629
,	O	O:0.999985
It	O	O:0.999986
raised	O	O:0.998546
AssertionError	O	O:0.999481
:	O	O:0.999894
'	O	O:0.999969
Worker	O	O:0.999426
'	O	O:0.999835
object	O	O:0.999805
has	O	O:0.999961
no	O	O:0.999979
attribute	O	O:0.999742
'	O	O:0.999983
_config	O	O:0.988317
'	O	O:0.999909
.	O	O:0.999889
	
#CODE	O	O:0.998453
	
You	O	O:0.999899
can	O	O:0.999969
apply	O	O:0.925964
`	O	O:0.999978
strip	O	B-API:0.979600
`	O	O:0.999995
to	O	O:0.999971
each	O	O:0.999995
element	O	O:0.999896
in	O	O:0.999998
a	O	O:0.999997
column	O	O:0.999938
this	O	O:0.999806
way	O	O:0.999804
:	O	O:0.999947
#CODE	O	O:0.999806
	
But	O	O:0.999970
a	O	O:0.999991
groupby	B-API	B-API:0.996148
operation	O	O:0.999535
doesn't	O	O:0.999641
actually	O	O:0.999986
return	O	O:0.999624
a	O	O:0.999967
DataFrame	B-API	O:0.994436
sorted	O	O:0.999838
by	O	O:0.999981
group	O	O:0.993580
.	O	O:0.999708
	
The	O	O:0.999884
`	O	O:0.999964
.head()	B-API	B-API:0.999937
`	O	O:0.999971
method	O	O:0.999372
is	O	O:0.999998
a	O	O:0.999988
little	O	O:0.998871
misleading	O	O:0.999707
here	O	O:0.998174
--	O	O:0.999948
it's	O	O:0.999919
just	O	O:0.999984
a	O	O:0.999998
convenience	O	O:0.999458
feature	O	O:0.999969
to	O	O:0.999989
let	O	O:0.999981
you	O	O:0.999977
re-examine	O	O:0.999687
the	O	O:0.999945
object	O	O:0.998986
(	O	O:0.999944
in	O	O:0.999998
this	O	O:0.999975
case	O	O:0.999980
,	O	O:0.999998
`	O	O:0.999997
df	O	O:0.999133
`)	O	O:0.999998
that	O	O:0.999762
you	O	O:0.999992
grouped	O	O:0.999745
.	O	O:0.999931
	
The	O	O:0.999975
result	O	O:0.999948
of	O	O:0.999976
`	O	O:0.999954
groupby	B-API	B-API:0.998434
`	O	O:0.999960
is	O	O:0.999699
separate	O	O:0.999930
kind	O	O:0.999824
of	O	O:0.999951
object	O	O:0.999748
,	O	O:0.999999
a	O	O:0.999973
`	O	O:0.999860
GroupBy	B-API	B-API:0.924259
`	O	O:0.999952
object	O	O:0.997831
.	O	O:0.999922
	
You	O	O:0.999898
must	O	O:0.999804
`	O	O:0.999995
apply	O	B-API:0.944430
`	O	O:0.999947
,	O	O:0.999471
`	O	O:0.999996
transform	O	B-API:0.972618
`	O	O:0.999995
,	O	O:0.999980
or	O	O:0.999997
`	O	O:0.999980
filter	O	O:0.947856
`	O	O:0.999998
to	O	O:0.999991
get	O	O:1.000000
back	O	O:0.999871
to	O	O:0.999997
a	O	O:1.000000
DataFrame	B-API	O:0.972485
or	O	O:0.999976
Series	O	O:0.999502
.	O	O:0.999916
	
Why	O	O:0.999933
am	O	O:0.999969
I	O	O:0.999996
getting	O	O:0.999941
an	O	O:0.999977
empty	O	O:0.999808
row	O	O:0.999853
in	O	O:0.999962
my	O	O:0.999995
dataframe	B-API	O:0.996624
after	O	O:0.999950
using	O	O:0.999939
pandas	O	O:0.996968
apply	O	B-API:0.765332
?	O	O:0.998976
	
I'm	O	O:0.999905
fairly	O	O:0.999886
new	O	O:0.999839
to	O	O:0.999907
Python	O	O:0.999857
and	O	O:0.999983
Pandas	O	O:0.999438
and	O	O:0.999978
trying	O	O:0.999838
to	O	O:0.999956
figure	O	O:0.999957
out	O	O:0.999963
how	O	O:0.999989
to	O	O:0.999997
do	O	O:1.000000
a	O	O:0.999997
simple	O	O:0.998904
split-join-apply	O	O:0.997921
.	O	O:0.999768
	
The	O	O:0.999955
problem	O	O:0.999668
I	O	O:0.999984
am	O	O:0.999995
having	O	O:0.990801
is	O	O:0.999994
that	O	O:0.999709
I	O	O:0.999996
am	O	O:0.999999
getting	O	O:0.998461
an	O	O:0.999994
blank	O	O:0.999899
row	O	O:0.999930
at	O	O:0.999985
the	O	O:0.999996
top	O	O:0.999933
of	O	O:0.999985
all	O	O:0.999975
the	O	O:0.999997
dataframes	O	O:0.998380
I'm	O	O:0.999986
getting	O	O:0.999981
back	O	O:0.999449
from	O	O:0.999922
Pandas	O	O:0.999462
'	O	O:0.999985
apply	O	B-API:0.834459
function	O	O:0.997041
and	O	O:0.999715
I'm	O	O:0.999948
not	O	O:0.999949
sure	O	O:0.999864
why	O	O:0.999926
.	O	O:0.999873
	
Can	O	O:0.999741
anyone	O	O:0.999757
explain	O	O:0.998324
?	O	O:0.999914
	
The	O	O:0.999780
groupby	B-API	B-API:0.982784
/	O	O:0.999981
apply	O	B-API:0.752975
operation	O	O:0.998732
returns	O	O:0.996624
is	O	O:0.999996
a	O	O:0.999968
new	O	O:0.999652
DataFrame	B-API	O:0.995724
,	O	O:0.999990
with	O	O:0.999983
a	O	O:0.999919
named	O	O:0.998939
index	O	O:0.999768
.	O	O:0.999858
	
The	O	O:0.999947
name	O	O:0.999974
corresponds	O	O:0.999751
to	O	O:0.999997
the	O	O:0.999999
column	O	O:0.999974
name	O	O:0.999996
by	O	O:0.999984
which	O	O:0.999981
the	O	O:0.999967
original	O	O:0.999239
DataFrame	B-API	O:0.989230
was	O	O:0.999860
grouped	O	O:0.999411
.	O	O:0.999853
	
Ah	O	O:0.999796
,	O	O:0.999995
okay	O	O:0.999791
,	O	O:0.999992
so	O	O:0.999991
the	O	O:0.999974
reason	O	O:0.999816
it	O	O:0.999941
is	O	O:0.999999
there	O	O:0.999602
is	O	O:0.999996
that	O	O:0.999815
the	O	O:0.999987
groupby	B-API	B-API:0.984588
/	O	O:0.999981
apply	O	B-API:0.643916
operation	O	O:0.999474
_replaces_	O	O:0.995806
the	O	O:0.999978
usual	O	O:0.999317
indexing	O	O:0.999337
with	O	O:0.999831
indexing	O	O:0.999883
by	O	O:0.999945
the	O	O:0.999986
grouping	O	O:0.999562
value	O	O:0.999710
?	O	O:0.999925
	
Is	O	O:0.999990
that	O	O:0.999896
correct	O	O:0.999952
?	O	O:0.999990
	
Yes	O	O:0.999612
,	O	O:0.999999
the	O	O:0.999996
result	O	O:0.999935
of	O	O:0.999992
the	O	O:0.999949
groupby	B-API	B-API:0.962726
/	O	O:0.999952
apply	O	B-API:0.886479
is	O	O:0.999981
a	O	O:0.999897
new	O	O:0.999601
DataFrame	B-API	O:0.995244
,	O	O:0.999990
with	O	O:0.999986
a	O	O:0.999912
named	O	O:0.999502
index	O	O:0.999883
,	O	O:0.999972
and	O	O:0.999996
the	O	O:0.999988
name	O	O:0.999913
corresponds	O	O:0.999709
to	O	O:0.999998
the	O	O:1.000000
column	O	O:0.999974
name	O	O:0.999996
by	O	O:0.999984
which	O	O:0.999981
the	O	O:0.999967
original	O	O:0.999239
DataFrame	B-API	O:0.989230
was	O	O:0.999860
grouped	O	O:0.999411
.	O	O:0.999853
	
This	O	O:0.999776
way	O	O:0.999962
reduce	O	O:0.999733
the	O	O:0.999980
timings	O	O:0.999813
by	O	O:0.999991
half	O	O:0.999895
on	O	O:0.999980
my	O	O:0.999985
side	O	O:0.999751
.	O	O:0.999899
	
By	O	O:0.999949
problem	O	O:0.999108
is	O	O:0.999985
I	O	O:0.999997
have	O	O:0.999991
values	O	O:0.999394
for	O	O:0.999982
hours	O	O:0.999944
initialy	O	O:0.999105
in	O	O:0.999973
24	O	O:0.999943
columns	O	O:0.999902
and	O	O:0.999997
date	O	O:0.999322
in	O	O:0.999964
first	O	O:0.999838
one	O	O:0.999955
.	O	O:0.999849
	
So	O	O:0.999962
I	O	O:0.999998
have	O	O:0.999988
to	O	O:0.999977
be	O	O:1.000000
more	O	O:0.999972
efficient	O	O:0.999925
as	O	O:0.999997
I	O	O:0.999974
can	O	O:0.999990
because	O	O:0.999966
after	O	O:0.999980
,	O	O:0.999994
I	O	O:0.999997
have	O	O:0.999969
to	O	O:0.999992
stach	O	O:0.999992
columns	O	O:0.999752
and	O	O:0.999997
do	O	O:0.999995
an	O	O:0.999981
apply	O	B-API:0.517271
to	O	O:0.999927
do	O	O:0.999999
a	O	O:0.999997
relativedelta	B-API	B-API:0.982951
on	O	O:0.999989
the	O	O:0.999969
datetime	O	O:0.988693
(	O	O:0.999940
which	O	O:0.999771
is	O	O:0.999998
take	O	O:0.999940
actually	O	O:0.999959
2	O	O:0.999959
min	O	O:0.932204
more	O	O:0.999002
)	O	O:0.999981
...	O	O:0.999014
	
I	O	O:0.999982
have	O	O:0.999985
done	O	O:0.999904
one	O	O:0.999980
for	O	O:0.999992
this	O	O:0.999952
typical	O	O:0.999151
problem	O	O:0.999235
{	O	O:0.999912
too	O	O:0.999920
long	O	O:0.999899
dataframe	B-API	O:0.998483
apply	O	O:0.673786
row	O	O:0.999588
functions}	O	O:0.989946
.	O	O:0.999839
	
I	O	O:0.999945
am	O	O:0.999998
very	O	O:0.999522
suprising	O	O:0.999951
if	O	O:0.999979
I	O	O:0.999987
am	O	O:0.999997
the	O	O:0.999976
first	O	O:0.999864
person	O	O:0.999840
to	O	O:0.999997
deal	O	O:0.999973
with	O	O:0.999995
this	O	O:0.999807
problem	O	O:0.999806
.	O	O:0.999898
	
too	O	O:0.999739
long	O	O:0.999919
dataframe	B-API	O:0.998916
apply	O	O:0.893609
row	O	O:0.999603
functions	O	O:0.998524
	
Rather	O	O:0.999896
than	O	O:0.999854
do	O	O:0.999996
a	O	O:0.999997
apply	O	B-API:0.771662
here	O	O:0.998658
,	O	O:0.999977
I	O	O:0.999980
would	O	O:0.999987
probably	O	O:0.999930
check	O	O:0.999989
each	O	O:0.999948
column	O	O:0.999903
for	O	O:0.999988
whether	O	O:0.999367
it's	O	O:0.999659
numeric	O	O:0.999132
with	O	O:0.999973
a	O	O:0.999977
simple	O	O:0.999579
list	O	O:0.998360
comprehension	O	O:0.999251
and	O	O:0.999993
separate	O	O:0.999816
these	O	O:0.999675
paths	O	O:0.998721
and	O	O:0.999999
then	O	O:0.999890
concat	O	O:0.982142
them	O	O:0.999955
back	O	O:0.999154
.	O	O:0.999931
	
This	O	O:0.999799
will	O	O:0.999859
be	O	O:0.999999
more	O	O:0.999970
efficient	O	O:0.999310
for	O	O:0.999973
larger	O	O:0.997686
frames	O	O:0.993132
.	O	O:0.999796
	
#CODE	O	O:0.998453
	
Ah	O	O:0.999911
,	O	O:0.999976
I	O	O:0.999960
was	O	O:0.999987
talking	O	O:0.999351
about	O	O:0.999935
calling	O	O:0.993725
a	O	O:0.999658
method	O	O:0.995248
(	O	O:0.999935
`	O	O:0.999992
fillna	B-API	B-API:0.986100
`)	O	O:0.999995
on	O	O:0.999967
an	O	O:0.999977
object	O	O:0.999976
wrapped	O	O:0.999923
by	O	O:0.999994
a	O	O:0.999992
curly	O	O:0.992793
bracket	O	O:0.999922
,	O	O:0.999984
which	O	O:0.999953
I	O	O:0.999987
am	O	O:0.999994
usually	O	O:0.999754
not	O	O:0.999996
a	O	O:0.999997
fan	O	O:0.999831
of	O	O:0.999965
.	O	O:0.999835
	
I	O	O:0.999977
prefer	O	O:0.999962
using	O	O:0.999570
`	O	O:0.999912
apply	O	B-API:0.990635
`	O	O:0.999975
as	O	O:0.999877
suggested	O	O:0.999909
by	O	O:0.999921
Karl	O	O:0.997943
.	O	O:0.999617
	
Or	O	O:0.999972
you	O	O:0.999976
could	O	O:0.999985
use	O	O:0.999996
shift	O	B-API:0.675177
within	O	O:0.999766
a	O	O:0.999972
`	O	O:0.999874
groupby	B-API	B-API:0.999316
`	O	O:0.999971
/	O	O:0.997503
`	O	O:0.999989
apply	O	B-API:0.995394
`	O	O:0.999432
:	O	O:0.999282
#CODE	O	O:0.999898
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
I	O	O:0.999987
like	O	O:0.999967
the	O	O:0.999951
`	O	O:0.999975
apply	O	B-API:0.970835
`	O	O:0.999956
solution	O	O:0.992415
!	O	O:0.999954
	
Pandas	O	O:0.999696
Groupby	B-API	O:0.916898
apply	O	B-API:0.819487
function	O	O:0.999517
to	O	O:0.999993
count	O	O:0.999994
values	O	O:0.999910
greater	O	O:0.999931
than	O	O:0.999952
zero	O	O:0.998338
	
Pandas	O	O:0.999696
Groupby	B-API	O:0.916898
apply	O	B-API:0.819487
function	O	O:0.999517
to	O	O:0.999993
count	O	O:0.999994
values	O	O:0.999910
greater	O	O:0.999931
than	O	O:0.999952
zero	O	O:0.998338
	
You	O	O:0.999773
might	O	O:0.999962
want	O	O:0.999938
consider	O	O:0.999955
using	O	O:0.999879
apply	O	B-API:0.986463
:	O	O:0.997673
#CODE	O	O:0.998899
	
Groupem	O	O:0.995097
(	O	O:0.999969
can	O	O:0.999991
also	O	O:0.999996
use	O	O:0.999998
an	O	O:0.999905
apply	O	O:0.686442
here	O	O:0.992944
)	O	O:0.999889
#CODE	O	O:0.999383
	
Apply	O	O:0.997656
is	O	O:0.999988
only	O	O:0.999800
useful	O	O:0.999950
when	O	O:0.999599
you	O	O:0.999960
cannot	O	O:0.999990
vectorize	B-API	O:0.849112
.	O	O:0.999845
	
Before	O	O:0.999910
even	O	O:0.999800
stored	O	O:0.999768
would	O	O:0.999957
be	O	O:0.999993
great	O	O:0.999766
.	O	O:0.999706
	
Would	O	O:0.999807
an	O	O:0.999991
apply	O	O:0.677367
be	O	O:0.999921
the	O	O:0.999961
fastest	O	O:0.999150
way	O	O:0.999966
for	O	O:0.999919
after	O	O:0.999925
the	O	O:0.999856
fact	O	O:0.997687
?	O	O:0.999930
	
Writing	O	O:0.999443
an	O	O:0.999957
apply	O	O:0.694268
right	O	O:0.998080
now	O	O:0.999292
.	O	O:0.999945
	
Is	O	O:0.999986
there	O	O:0.999987
a	O	O:0.999997
way	O	O:0.999952
to	O	O:0.999987
get	O	O:0.999998
the	O	O:0.999997
width	O	O:0.999974
of	O	O:0.999997
a	O	O:0.999999
column	O	O:0.999908
of	O	O:0.999991
type	O	O:0.995183
object	O	O:0.999928
?	O	O:0.999929
	
Just	O	O:0.999774
apply	O	O:0.506848
`	O	O:0.999811
to_datetime	B-API	B-API:0.999853
`	O	O:0.999908
:	O	O:0.999761
#CODE	O	O:0.999908
	
Presumably	O	O:0.999861
you	O	O:0.999988
want	O	O:0.999945
to	O	O:0.999997
real	O	O:0.999995
part	O	O:0.999938
of	O	O:0.999989
the	O	O:0.999993
complex	O	O:0.998814
numbers	O	O:0.993030
(	O	O:0.999977
numpy.real	B-API	B-API:0.843112
)	O	O:0.999988
,	O	O:0.999990
unfortunately	O	O:0.999954
this	O	O:0.999884
doesn't	O	O:0.999981
play	O	O:0.999941
super	O	O:0.999930
nicely	O	O:0.999797
with	O	O:0.999903
pandas	O	O:0.999782
Series	O	O:0.999657
/	O	O:0.999960
DataFrame	B-API	O:0.996111
,	O	O:0.999995
so	O	O:0.999994
you	O	O:0.999993
need	O	O:0.999995
to	O	O:1.000000
apply	O	O:0.996699
back	O	O:0.999048
the	O	O:0.999914
indexes	O	O:0.989080
:	O	O:0.999936
#CODE	O	O:0.999926
	
I	O	O:0.999986
have	O	O:0.999959
messed	O	O:0.998543
around	O	O:0.999882
with	O	O:0.999515
groupby	B-API	B-API:0.994258
,	O	O:0.999961
and	O	O:0.999964
calculated	O	O:0.999831
actual	O	O:0.999887
epoch	O	O:0.999602
values	O	O:0.999381
at	O	O:0.999986
the	O	O:0.999986
start	O	O:0.998704
and	O	O:0.999998
end	O	O:0.999986
of	O	O:0.999949
5	O	O:0.999546
minute	O	O:0.999804
time	O	O:0.999965
blocks	O	O:0.999799
for	O	O:0.999998
each	O	O:0.999785
of	O	O:0.999978
the	O	O:0.999986
observation	O	O:0.999929
periods	O	O:0.999738
,	O	O:0.999995
in	O	O:0.999999
a	O	O:0.999993
separate	O	O:0.999403
dataframe	B-API	O:0.995035
.	O	O:0.999879
	
But	O	O:0.999881
I	O	O:0.999988
can't	O	O:0.999936
see	O	O:0.999949
how	O	O:0.999989
to	O	O:0.999995
bring	O	O:0.999982
these	O	O:0.999945
to	O	O:0.999996
bear	O	O:0.999986
in	O	O:0.999998
a	O	O:0.999952
function	O	O:0.999947
that	O	O:0.999926
applies	O	O:0.999951
per	O	O:0.999926
observation	O	O:0.999430
period	O	O:0.999733
in	O	O:0.999991
the	O	O:0.999993
original	O	O:0.999878
dataframe	B-API	O:0.999700
above	O	O:0.999908
,	O	O:0.999998
where	O	O:0.999968
there	O	O:0.999839
are	O	O:0.999999
multiple	O	O:0.999975
values	O	O:0.999580
for	O	O:0.999970
each	O	O:0.999287
observational	O	O:0.998396
period	O	O:0.999603
.	O	O:0.999869
	
I	O	O:0.999955
suspect	O	O:0.999943
the	O	O:0.999918
answer	O	O:0.999905
lies	O	O:0.998647
in	O	O:0.999997
a	O	O:0.999995
better	O	O:0.999716
comprehension	O	O:0.999822
of	O	O:0.999970
groupby	B-API	B-API:0.998581
and	O	O:0.999994
the	O	O:0.999016
apply	O	B-API:0.976251
method	O	O:0.997026
,	O	O:0.999877
but	O	O:0.999966
I'm	O	O:0.999949
having	O	O:0.999836
trouble	O	O:0.999797
getting	O	O:0.999961
this	O	O:0.999850
off	O	O:0.999938
the	O	O:0.999961
ground	O	O:0.997623
.	O	O:0.999797
	
(	O	O:0.999887
Also	O	O:0.999910
,	O	O:0.999999
maybe	O	O:0.999970
I	O	O:0.999981
am	O	O:0.999998
not	O	O:0.999968
using	O	O:0.999990
the	O	O:0.999925
right	O	O:0.997943
search	O	O:0.999686
terms	O	O:0.999587
,	O	O:0.999977
but	O	O:0.999658
I'm	O	O:0.999932
not	O	O:0.999982
finding	O	O:0.999973
much	O	O:0.998773
on	O	O:0.999998
this	O	O:0.999950
posted	O	O:0.999905
to	O	O:0.999989
the	O	O:0.999997
forum	O	O:0.999407
already	O	O:0.999763
.	O	O:0.999975
I'm	O	O:0.999990
only	O	O:0.999992
able	O	O:0.999987
to	O	O:0.999995
find	O	O:0.999991
info	O	O:0.999956
on	O	O:0.999995
working	O	O:0.999786
with	O	O:0.999970
timeseries	O	O:0.998974
)	O	O:0.999982
.	O	O:0.999835
	
Two	O	O:0.999113
options	O	O:0.999668
I've	O	O:0.999080
considered	O	O:0.999704
but	O	O:0.999954
can't	O	O:0.999895
figure	O	O:0.999918
out	O	O:0.999976
how	O	O:0.999968
to	O	O:0.999924
program	O	O:0.999960
:	O	O:0.999950
	
[	O	O:0.999904
Edit	O	O:0.999659
]	O	O:0.999931
Update	O	O:0.999732
-	O	O:0.999992
I	O	O:0.999996
think	O	O:0.999989
you	O	O:0.999944
can	O	O:0.999962
use	O	O:0.999999
the	O	O:0.999977
apply	O	B-API:0.907464
function	O	O:0.999832
to	O	O:0.999970
subtract	O	O:0.999984
the	O	O:0.999988
right	O	O:0.999794
min	O	O:0.883032
time	O	O:0.999914
#CODE	O	O:0.999825
	
Okay	O	O:0.998813
,	O	O:0.999997
this	O	O:0.999417
is	O	O:0.999995
making	O	O:0.999873
some	O	O:0.999587
progress	O	O:0.999383
.	O	O:0.999860
	
But	O	O:0.999986
each	O	O:0.999861
of	O	O:0.999992
my	O	O:0.999982
observation	O	O:0.999957
periods	O	O:0.999932
starts	O	O:0.999753
at	O	O:0.999999
a	O	O:0.999997
different	O	O:0.999599
time	O	O:0.998676
(	O	O:0.999997
the	O	O:0.999995
dates	O	O:0.993664
&	O	O:0.999981
times	O	O:0.999903
are	O	O:0.999993
spread	O	O:0.999868
out	O	O:0.999991
over	O	O:0.999761
3	O	O:0.999926
months	O	O:0.999545
)	O	O:0.999978
.	O	O:0.999841
	
So	O	O:0.999967
,	O	O:0.999992
I	O	O:0.999987
can't	O	O:0.999985
just	O	O:0.999930
do	O	O:0.999999
step	O	O:0.999938
1	O	O:0.999971
across	O	O:0.999954
all	O	O:0.999975
my	O	O:0.999934
'	O	O:0.999964
epoch	O	O:0.999134
'	O	O:0.999993
data	O	O:0.999929
-	O	O:0.999995
I	O	O:0.999998
need	O	O:0.999985
to	O	O:0.999960
apply	O	O:0.993285
it	O	O:0.999984
separately	O	O:0.999630
for	O	O:0.999997
each	O	O:0.995462
'	O	O:0.999933
observation	O	O:0.999618
'	O	O:0.999979
group	O	O:0.998388
.	O	O:0.999885
	
Similarly	O	O:0.999730
,	O	O:0.999986
I'd	O	O:0.999996
need	O	O:0.999974
to	O	O:0.999998
do	O	O:1.000000
step	O	O:0.999974
2	O	O:0.999990
by	O	O:0.999964
'	O	O:0.999967
observation	O	O:0.998832
'	O	O:0.999980
group	O	O:0.998361
.	O	O:0.999885
	
So	O	O:0.999966
I	O	O:0.999996
think	O	O:0.999973
the	O	O:0.999988
plan	O	O:0.999736
of	O	O:0.999987
action	O	O:0.999867
will	O	O:0.999989
be	O	O:0.999999
to	O	O:0.999994
use	O	O:0.999996
the	O	O:0.999991
sort	O	O:0.998983
of	O	O:0.999986
approach	O	O:0.999849
you've	O	O:0.999902
provided	O	O:0.997376
,	O	O:0.999981
but	O	O:0.999970
apply	O	O:0.659279
it	O	O:0.999899
via	O	O:0.999530
groupby	B-API	B-API:0.984544
?	O	O:0.999834
	
I've	O	O:0.999255
updated	O	O:0.999779
the	O	O:0.999844
answer	O	O:0.998848
.	O	O:0.999695
	
Based	O	O:0.999480
on	O	O:0.999964
the	O	O:0.999992
dataframe	B-API	O:0.999361
you	O	O:0.999983
created	O	O:0.999978
you	O	O:0.999997
can	O	O:0.999992
get	O	O:1.000000
the	O	O:0.999996
right	O	O:0.999892
min	O	O:0.874413
value	O	O:0.999949
and	O	O:0.999996
apply	O	O:0.699287
to	O	O:0.999884
the	O	O:0.999995
epoch	O	O:0.997136
column	O	O:0.999612
	
A	O	O:0.999960
few	O	O:0.999874
caveats	O	O:0.998661
apply	O	B-API:0.778759
:	O	O:0.999381
	
Given	O	O:0.999607
that	O	O:0.999926
the	O	O:0.999999
time	O	O:0.999988
periods	O	O:0.999518
in	O	O:0.999998
the	O	O:0.999999
data	O	O:0.999811
are	O	O:0.999980
non-uniform	O	O:0.999442
and	O	O:0.999981
contain	O	O:0.999576
overlap	O	O:0.998328
,	O	O:0.999995
there	O	O:0.999951
are	O	O:0.999997
a	O	O:0.999998
few	O	O:0.999732
approaches	O	O:0.999889
possible	O	O:0.998792
.	O	O:0.999913
	
If	O	O:0.999941
you're	O	O:0.999894
alright	O	O:0.999944
with	O	O:0.999966
linearly	O	O:0.999900
averaging	O	O:0.999945
entries	O	O:0.995307
and	O	O:0.999983
exits	O	O:0.999925
,	O	O:0.999989
you	O	O:0.999974
can	O	O:0.999996
take	O	O:0.999999
each	O	O:0.999972
time	O	O:0.999933
period	O	O:0.999917
and	O	O:0.999995
calculate	O	O:0.998102
how	O	O:0.999995
many	O	O:0.999967
entries	O	O:0.998897
and	O	O:0.999991
exits	O	O:0.999951
occur	O	O:0.999024
per	O	O:0.999948
hour	O	O:0.998466
on	O	O:0.999988
average	O	O:0.999366
,	O	O:0.999999
then	O	O:0.999843
,	O	O:1.000000
given	O	O:0.999932
an	O	O:0.999995
hour	O	O:0.999557
,	O	O:0.999995
you	O	O:0.999984
could	O	O:0.999987
iterate	O	O:0.999992
through	O	O:0.999985
all	O	O:0.999993
data	O	O:0.999965
points	O	O:0.999705
,	O	O:0.999998
find	O	O:0.999855
how	O	O:0.999992
much	O	O:0.999988
a	O	O:1.000000
data	O	O:0.999909
point	O	O:0.999976
overlaps	O	O:0.999935
with	O	O:0.999983
that	O	O:0.999915
hour	O	O:0.997578
(	O	O:0.999991
i.e.	O	O:0.999824
15	O	O:0.999973
minutes	O	O:0.999609
or	O	O:0.999996
the	O	O:0.999998
whole	O	O:0.999914
hour	O	O:0.998356
)	O	O:0.999985
,	O	O:0.999975
and	O	O:0.999993
apply	O	O:0.797853
the	O	O:0.999895
data	O	O:0.999714
point's	O	O:0.999974
average	O	O:0.999936
entries	O	O:0.999568
/	O	O:0.999969
exits	O	O:0.999853
per	O	O:0.999951
hour	O	O:0.999221
modified	O	O:0.999919
by	O	O:0.999973
the	O	O:0.999995
percentage	O	O:0.999527
of	O	O:0.999983
overlap	O	O:0.999767
to	O	O:0.999997
an	O	O:0.999998
accumulator	O	O:0.999802
.	O	O:0.999795
	
Struggling	O	O:0.998880
with	O	O:0.999872
pandas	O	O:0.998454
'	O	O:0.999993
rolling	O	O:0.974268
and	O	O:0.999988
shifting	O	O:0.998044
concept	O	O:0.992014
.	O	O:0.999839
	
There	O	O:0.999401
are	O	O:0.999991
many	O	O:0.999958
good	O	O:0.999508
suggestions	O	O:0.999965
including	O	O:0.998585
in	O	O:0.999987
this	O	O:0.999294
forum	O	O:0.999941
but	O	O:0.999948
I	O	O:0.999978
failed	O	O:0.999966
miserably	O	O:0.999408
to	O	O:0.999979
apply	O	O:0.977632
these	O	O:0.999747
to	O	O:0.999982
my	O	O:0.999998
scenario	O	O:0.999366
.	O	O:0.999928
	
If	O	O:0.999940
you	O	O:0.999981
manage	O	O:0.999985
to	O	O:0.999995
get	O	O:1.000000
the	O	O:1.000000
data	O	O:0.999892
in	O	O:0.999991
ine	O	O:0.999961
single	O	O:0.999749
Dataframe	B-API	O:0.986616
it	O	O:0.999959
should	O	O:0.999979
be	O	O:0.999999
possible	O	O:0.999983
using	O	O:0.999461
'	O	O:0.999756
apply	O	B-API:0.941591
'	O	O:0.999186
.	O	O:0.999423
	
and	O	O:0.999994
then	O	O:0.999929
you	O	O:0.999995
can	O	O:0.999999
group	O	O:0.999991
by	O	O:0.999996
the	O	O:0.999869
'	O	O:0.999856
i	O	O:0.999841
'	O	O:0.999987
column	O	O:0.999798
and	O	O:0.999997
apply	O	O:0.720647
an	O	O:0.999889
arbitrary	O	O:0.998191
function	O	O:0.999732
to	O	O:0.999980
the	O	O:0.999999
subgroup	O	O:0.998587
.	O	O:0.999856
	
#CODE	O	O:0.998453
	
or	O	O:0.999928
`	O	O:0.999979
apply	O	B-API:0.987872
`	O	O:0.999571
:	O	O:0.999351
#CODE	O	O:0.999898
	
I	O	O:0.999992
have	O	O:0.999972
a	O	O:0.999930
MultiIndex	O	O:0.926394
pandas	O	O:0.999881
DataFrame	B-API	O:0.998584
in	O	O:0.999969
which	O	O:0.999946
I	O	O:0.999998
want	O	O:0.999987
to	O	O:0.999963
apply	O	O:0.996122
a	O	O:0.999861
function	O	O:0.999348
to	O	O:0.999999
one	O	O:1.000000
of	O	O:0.999998
its	O	O:0.999981
columns	O	O:0.999981
and	O	O:0.999992
assign	O	O:0.999953
the	O	O:0.999957
result	O	O:0.999870
to	O	O:0.999994
that	O	O:0.999999
same	O	O:0.999995
column	O	O:0.999900
.	O	O:0.999963
	
#CODE	O	O:0.998453
	
I	O	O:0.999967
managed	O	O:0.999938
to	O	O:0.999943
apply	O	O:0.977784
the	O	O:0.999588
function	O	O:0.999402
slicing	O	O:0.999758
the	O	O:0.999987
dataframe	B-API	O:0.998620
with	O	O:0.999507
`	O	O:0.999991
.loc	B-API	B-API:0.979893
`	O	O:0.999995
as	O	O:0.999951
the	O	O:0.999932
warning	O	O:0.998410
recommended	O	O:0.991736
:	O	O:0.999961
#CODE	O	O:0.999904
	
Thank	O	O:0.999629
you	O	O:0.999953
,	O	O:0.999999
removing	O	O:0.999662
the	O	O:0.999858
indexing	O	O:0.998645
is	O	O:0.999996
speeding	O	O:0.998039
up	O	O:0.999951
the	O	O:0.999965
process	O	O:0.998073
substantially	O	O:0.999352
.	O	O:0.999917
	
However	O	O:0.999863
,	O	O:0.999989
I	O	O:0.999998
still	O	O:0.999909
get	O	O:0.999943
very	O	O:0.999857
large	O	O:0.999973
file	O	O:0.998826
sizes	O	O:0.999224
:	O	O:0.999984
for	O	O:0.999997
every	O	O:0.999761
300Mb	O	O:0.999867
table	O	O:0.999986
that	O	O:0.999985
I	O	O:0.999999
append	O	O:0.923549
to	O	O:0.999838
the	O	O:0.999999
merged	O	O:0.999899
store	O	O:0.999537
,	O	O:0.999997
I	O	O:0.999998
get	O	O:0.999983
an	O	O:0.999983
increase	O	O:0.999625
in	O	O:0.999992
size	O	O:0.999862
of	O	O:0.999986
1Gb	O	O:0.999824
which	O	O:0.999976
eventually	O	O:0.999214
is	O	O:0.999996
going	O	O:0.998712
to	O	O:0.999994
fill	O	O:0.999100
in	O	O:0.999995
my	O	O:0.999986
disk	O	O:0.999185
.	O	O:0.999917
	
This	O	O:0.998227
should	O	O:0.999906
not	O	O:0.999996
be	O	O:0.999999
due	O	O:0.999966
to	O	O:0.999958
compression	O	O:0.999987
,	O	O:0.999999
as	O	O:0.999991
I	O	O:0.999803
did	O	O:0.999970
not	O	O:0.999955
apply	O	O:0.942470
compression	O	O:0.999305
to	O	O:0.999959
the	O	O:0.999999
300Mb	O	O:0.999636
files	O	O:0.999183
.	O	O:0.999931
	
But	O	O:0.999801
I'm	O	O:0.999980
looking	O	O:0.999655
for	O	O:0.999973
generalization	O	O:0.999299
for	O	O:0.999985
arbitrary	O	O:0.999858
number	O	O:0.999768
of	O	O:0.999950
columns	O	O:0.999794
.	O	O:0.999961
	
I	O	O:0.999958
tried	O	O:0.999926
to	O	O:0.999910
apply	O	O:0.947408
these	O	O:0.999885
methods	O	O:0.999736
as	O	O:0.999985
reduction	O	O:0.998382
function	O	O:0.999696
,	O	O:0.999939
but	O	O:0.999922
couldn't	O	O:0.999605
make	O	O:0.999908
it	O	O:0.999993
work	O	O:0.999722
.	O	O:0.999964
	
Third	O	O:0.997857
question	O	O:0.999514
:	O	O:0.999991
I	O	O:0.999997
think	O	O:0.999990
that	O	O:0.999827
the	O	O:0.999997
code	O	O:0.998814
is	O	O:0.999992
quite	O	O:0.999802
pythonic	O	O:0.999223
,	O	O:0.999981
but	O	O:0.999973
I	O	O:0.999952
am	O	O:0.999996
not	O	O:0.999982
proud	O	O:0.999933
of	O	O:0.999997
that	O	O:0.999970
because	O	O:0.999997
of	O	O:0.999994
the	O	O:0.999984
last	O	O:0.999823
list	O	O:0.999567
comprehension	O	O:0.999545
which	O	O:0.999908
is	O	O:0.999991
running	O	O:0.999779
over	O	O:0.999693
the	O	O:0.999988
series	O	O:0.999936
of	O	O:0.999980
the	O	O:0.999977
dataframe	B-API	O:0.998294
:	O	O:0.999989
using	O	O:0.999763
the	O	O:0.999918
method	O	O:0.999491
apply	O	B-API:0.847863
would	O	O:0.999745
look	O	O:0.999747
better	O	O:0.999951
to	O	O:0.999991
my	O	O:0.999996
eyes	O	O:0.990356
(	O	O:0.999967
but	O	O:0.999934
I'm	O	O:0.999953
not	O	O:0.999993
sure	O	O:0.999935
how	O	O:0.999982
to	O	O:0.999987
do	O	O:0.999999
it	O	O:0.999986
)	O	O:0.999972
.	O	O:0.999881
	
Nontheless	O	O:0.989805
is	O	O:0.999988
there	O	O:0.999861
any	O	O:0.999993
real	O	O:0.992174
reason	O	O:0.998400
(	O	O:0.999991
apart	O	O:0.999972
from	O	O:0.999950
elegance	O	O:0.999942
)	O	O:0.999992
I	O	O:0.999983
should	O	O:0.999994
work	O	O:0.999916
to	O	O:0.999998
do	O	O:1.000000
the	O	O:0.999995
changes	O	O:0.998298
?	O	O:0.999962
	
I'm	O	O:0.999833
not	O	O:0.999984
sure	O	O:0.999977
there	O	O:0.999886
is	O	O:0.999998
a	O	O:0.999818
better	O	O:0.996596
method	O	O:0.999979
than	O	O:0.999938
using	O	O:0.999983
apply	O	B-API:0.949428
in	O	O:0.999793
this	O	O:0.999657
case	O	O:0.999854
	
Unfortunately	O	O:0.999568
it	O	O:0.999951
isn't	O	O:0.999967
currently	O	O:0.999982
possible	O	O:0.999962
to	O	O:0.999985
apply	O	O:0.981501
Excel	O	O:0.999105
formatting	O	O:0.999889
when	O	O:0.999876
writing	O	O:0.999977
data	O	O:0.999946
with	O	O:0.999954
Pandas	O	O:0.999912
`	O	O:0.999968
to_excel()	B-API	B-API:0.999896
`	O	O:0.999980
.	O	O:0.999398
	
You	O	O:0.999904
can	O	O:0.999973
apply	O	O:0.985300
column	O	O:0.999881
formatting	O	O:0.999942
when	O	O:0.999902
using	O	O:0.999987
XlsxWriter	O	O:0.999793
as	O	O:0.999871
the	O	O:0.999932
Excel	O	O:0.993218
writer	O	O:0.999644
engine	O	O:0.999604
.	O	O:0.999900
	
See	O	O:0.999769
Working	O	O:0.998817
with	O	O:0.999234
Python	O	O:0.998895
Pandas	O	O:0.999724
and	O	O:0.999947
XlsxWriter	O	O:0.998607
.	O	O:0.999000
	
Use	O	O:0.999958
a	O	O:0.999730
function	O	O:0.999122
and	O	O:0.999995
apply	O	O:0.735575
to	O	O:0.999882
whole	O	O:0.999945
column	O	O:0.999036
:	O	O:0.999978
#CODE	O	O:0.999897
	
pandas	O	O:0.999750
apply	O	O:0.837271
filter	O	O:0.915101
for	O	O:0.999753
boolean	O	O:0.997877
type	O	O:0.996262
	
`	O	O:0.999960
pd.tools.plotting.scatter_matrix	O	O:0.826143
`	O	O:0.999995
returns	O	O:0.999502
an	O	O:0.999998
array	O	O:0.999964
of	O	O:0.999975
the	O	O:0.999948
axes	O	O:0.915696
it	O	O:0.999981
draws	O	O:0.999616
;	O	O:0.999989
The	O	O:0.999963
lower	O	O:0.999874
left	O	O:0.998889
boundary	O	O:0.999807
axes	O	O:0.958110
corresponds	O	O:0.999736
to	O	O:0.999993
indices	O	O:0.999952
`	O	O:0.999906
[:	O	O:0.999957
,	O	O:0.999995
0	O	O:0.999829
]`	O	O:0.999801
and	O	O:0.999866
`	O	O:0.999988
[	O	O:0.999423
-1	O	O:0.999961
,	O	O:0.999853
:]	O	O:0.999792
`	O	O:0.999909
.	O	O:0.999644
	
One	O	O:0.999815
can	O	O:0.999956
loop	O	O:0.999995
over	O	O:0.999908
these	O	O:0.999915
elements	O	O:0.999688
and	O	O:0.999990
apply	O	O:0.862149
any	O	O:0.999900
sort	O	O:0.997128
of	O	O:0.999966
modifications	O	O:0.998615
.	O	O:0.999923
	
For	O	O:0.999691
example	O	O:0.996811
:	O	O:0.999957
#CODE	O	O:0.999872
	
You	O	O:0.999898
can	O	O:0.999979
apply	O	O:0.962130
a	O	O:0.999983
multiindex	O	O:0.999502
to	O	O:0.999996
a	O	O:1.000000
dataframe	B-API	O:0.991838
with	O	O:0.999841
#CODE	O	O:0.999771
	
Once	O	O:0.999829
you	O	O:0.999942
tested	O	O:0.999897
`	O	O:0.999993
flatten	O	B-API:0.952284
`	O	O:0.999996
on	O	O:0.999961
one	O	O:0.999981
OrderedDict	O	O:0.995100
,	O	O:0.999992
it	O	O:0.999928
is	O	O:0.999981
straight-forward	O	O:0.999557
to	O	O:0.999990
apply	O	O:0.974414
it	O	O:0.999956
to	O	O:0.999989
a	O	O:1.000000
list	O	O:0.998795
of	O	O:0.999962
OrderedDict	O	O:0.969984
	
Yeah	O	O:0.999280
,	O	O:0.999992
thanks	O	O:0.999898
a	O	O:0.999971
lot	O	O:0.999444
@USER	O	O:0.999487
Zhu	O	O:0.999234
.	O	O:0.999785
	
Quick	O	O:0.996907
follow-up	O	O:0.998459
:	O	O:0.999985
I	O	O:0.999999
have	O	O:0.999997
a	O	O:0.999987
couple	O	O:0.999695
hundred	O	O:0.999920
columns	O	O:0.999790
,	O	O:0.999998
so	O	O:0.999994
I	O	O:0.999991
can't	O	O:0.999993
call	O	O:0.999784
a	O	O:0.999998
column	O	O:0.998412
the	O	O:0.999992
way	O	O:0.999939
you	O	O:0.999950
called	O	O:0.999901
the	O	O:0.999996
column	O	O:0.999104
Val	O	O:0.999712
.	O	O:0.999901
	
How	O	O:0.999805
would	O	O:0.999941
I	O	O:0.999998
apply	O	O:0.653833
the	O	O:0.998389
method	O	O:0.999691
you	O	O:0.999980
suggested	O	O:0.999983
on	O	O:0.999995
across	O	O:0.999984
every	O	O:0.999946
column	O	O:0.999845
?	O	O:0.999964
	
Inconsistent	O	O:0.999769
behavior	O	O:0.999891
of	O	O:0.999971
apply	O	B-API:0.947577
with	O	O:0.999057
operator.itemgetter	O	O:0.975874
v.s.	O	O:0.974445
applymap	B-API	B-API:0.984930
operator.itemgetter	O	O:0.972157
	
`	O	O:0.999959
apply	O	B-API:0.988409
`	O	O:0.999941
gives	O	O:0.999509
wrong	O	O:0.999742
result	O	O:0.999636
#CODE	O	O:0.999655
	
apply	O	B-API:0.948842
is	O	O:0.999857
being	O	O:0.998434
passed	O	O:0.999581
an	O	O:0.999987
entire	O	O:0.999902
row	O	O:0.999911
which	O	O:0.999729
is	O	O:0.999998
a	O	O:0.999997
series	O	O:0.999953
of	O	O:0.999976
2	O	O:0.999981
elements	O	O:0.999849
which	O	O:0.999944
are	O	O:0.999997
lists	O	O:0.999459
;	O	O:0.999987
the	O	O:0.999966
last	O	O:0.999568
list	O	O:0.994972
is	O	O:0.999977
returned	O	O:0.998044
and	O	O:0.999987
coerced	O	O:0.999488
to	O	O:0.999989
a	O	O:0.999999
series	O	O:0.999489
.	O	O:0.999986
embedded	O	O:0.999982
lists	O	O:0.999848
as	O	O:0.999993
elements	O	O:0.998544
are	O	O:0.999984
not	O	O:0.999997
a	O	O:0.999997
good	O	O:0.999498
idea	O	O:0.999497
in	O	O:0.999971
general	O	O:0.998069
.	O	O:0.999857
	
apply	O	O:0.552012
custom	O	O:0.958299
function	O	O:0.994396
/	O	O:0.999888
method	O	O:0.999931
to	O	O:0.999992
the	O	O:0.999999
groups	O	O:0.993871
(	O	O:0.999990
sort	O	O:0.999731
within	O	O:0.999971
group	O	O:0.998828
on	O	O:0.999987
col	O	O:0.998365
'	O	O:0.999986
A	O	O:0.999931
'	O	O:0.999983
,	O	O:0.999988
filter	O	O:0.999269
elements	O	O:0.999544
)	O	O:0.999976
.	O	O:0.999909
	
#CODE	O	O:0.998453
	
If	O	O:0.999974
you	O	O:0.999989
wish	O	O:0.999995
to	O	O:0.999995
select	O	O:0.999993
many	O	O:0.999995
rows	O	O:0.999769
per	O	O:0.999981
group	O	O:0.999514
,	O	O:0.999996
you	O	O:0.999984
could	O	O:0.999959
use	O	O:0.999990
`	O	O:0.999955
groupby	B-API	B-API:0.996434
/	O	O:0.999987
apply	O	B-API:0.909421
`	O	O:0.999935
with	O	O:0.999881
a	O	O:0.999972
function	O	O:0.999898
that	O	O:0.999881
returns	O	O:0.999974
sub-DataFrames	O	O:0.998598
for	O	O:0.999858
	
each	O	O:0.999142
group	O	O:0.995088
.	O	O:0.999912
	
`	O	O:0.999961
apply	O	B-API:0.985147
`	O	O:0.999973
will	O	O:0.999578
then	O	O:0.999981
try	O	O:0.999999
to	O	O:0.999996
merge	O	O:0.993206
these	O	O:0.999953
sub-DataFrames	O	O:0.999127
for	O	O:0.999977
you	O	O:0.999873
.	O	O:0.999901
	
Another	O	O:0.999588
way	O	O:0.999724
is	O	O:0.999988
to	O	O:0.999962
use	O	O:0.999987
`	O	O:0.999840
groupby	B-API	B-API:0.997394
/	O	O:0.999987
apply	O	B-API:0.909570
`	O	O:0.999826
to	O	O:0.999891
return	O	O:0.999988
a	O	O:0.999989
Series	O	O:0.997657
of	O	O:0.999990
index	O	O:0.999860
values	O	O:0.999710
.	O	O:0.999911
	
Again	O	O:0.999350
`	O	O:0.999990
apply	O	B-API:0.968033
`	O	O:0.999955
will	O	O:0.998786
try	O	O:0.999997
to	O	O:0.999997
join	O	O:0.902770
the	O	O:0.999976
Series	O	O:0.999904
into	O	O:0.999407
one	O	O:0.999973
Series	O	O:0.998884
.	O	O:0.999899
	
You	O	O:0.999915
could	O	O:0.999990
then	O	O:0.999970
use	O	O:0.999992
`	O	O:0.999969
df.loc	B-API	B-API:0.993695
`	O	O:0.999998
to	O	O:0.999986
select	O	O:0.999998
rows	O	O:0.999645
by	O	O:0.999981
index	O	O:0.999965
value	O	O:0.998870
:	O	O:0.999972
#CODE	O	O:0.999862
	
Also	O	O:0.999686
,	O	O:0.999997
the	O	O:0.999988
reason	O	O:0.998265
is	O	O:0.999989
because	O	O:0.999969
the	O	O:0.999998
entire	O	O:0.999974
data	O	O:0.999979
frame	O	O:0.999970
is	O	O:0.999998
read	O	O:0.997846
in	O	O:0.999975
externally	O	O:0.999379
but	O	O:0.999993
that	O	O:0.999967
one	O	O:0.999997
column	O	O:0.999957
happens	O	O:0.999964
to	O	O:0.999993
be	O	O:0.999999
all	O	O:0.999986
JSON	O	O:0.997515
.	O	O:0.999719
	
I	O	O:0.999982
apply	O	O:0.955699
pd.io.json.read_json()	O	O:0.559424
to	O	O:0.999956
the	O	O:0.999999
column	O	O:0.999356
but	O	O:0.999993
that	O	O:0.999982
leaves	O	O:0.999933
me	O	O:0.999991
with	O	O:0.999977
a	O	O:0.999999
column	O	O:0.999931
of	O	O:0.999993
DataFrames	O	O:0.999890
that	O	O:0.999972
I	O	O:1.000000
need	O	O:0.999990
to	O	O:0.999984
expand	O	O:0.999969
out	O	O:0.999892
.	O	O:0.999877
	
But	O	O:0.999983
when	O	O:0.999900
I	O	O:0.999998
apply	O	O:0.972377
the	O	O:0.999719
conditions	O	O:0.998297
to	O	O:0.999991
obtain	O	O:0.999984
the	O	O:0.999995
final	O	O:0.999385
dataframe	B-API	O:0.992164
:	O	O:0.999948
#CODE	O	O:0.999899
	
I'm	O	O:0.999922
using	O	O:0.999911
Ubuntu	O	O:0.998624
,	O	O:0.999906
so	O	O:0.999989
this	O	O:0.999205
might	O	O:0.999981
not	O	O:0.999993
apply	O	O:0.983988
that	O	O:0.999727
accurately	O	O:0.999510
,	O	O:0.999971
but	O	O:0.999875
here's	O	O:0.998778
how	O	O:0.999956
I'll	O	O:0.999779
do	O	O:0.999954
it	O	O:0.999951
.	O	O:0.999878
	
#CODE	O	O:0.998453
	
However	O	O:0.999765
,	O	O:0.999994
also	O	O:0.999973
note	O	O:0.999975
that	O	O:0.999827
Pandas	O	O:0.999929
has	O	O:0.999972
string	O	O:0.999527
operators	O	O:0.999654
builtin	O	O:0.996907
.	O	O:0.999859
	
Using	O	O:0.999919
them	O	O:0.998805
will	O	O:0.999971
be	O	O:0.999997
far	O	O:0.999965
faster	O	O:0.999791
than	O	O:0.999869
using	O	O:0.999821
`	O	O:0.999940
apply	O	B-API:0.993667
`	O	O:0.999957
to	O	O:0.999849
call	O	O:0.999989
a	O	O:0.999990
custom	O	O:0.964584
Python	O	O:0.999360
function	O	O:0.999883
for	O	O:0.999985
each	O	O:0.999829
item	O	O:0.999165
in	O	O:0.999976
the	O	O:0.999957
Series	O	O:0.998956
.	O	O:0.999830
	
#CODE	O	O:0.998453
	
No	O	O:0.999987
need	O	O:0.999965
to	O	O:0.999996
go	O	O:0.999999
via	O	O:0.999938
`	O	O:0.999987
apply	O	B-API:0.965620
`	O	O:0.999938
;	O	O:0.998881
`	O	O:0.999976
100	O	O:0.999582
*	O	O:0.999992
df2	O	O:0.999438
/	O	O:0.999975
df2.sum()	O	O:0.899800
`	O	O:0.999960
should	O	O:0.999757
work	O	O:0.999941
.	O	O:0.999976
	
For	O	O:0.999951
looping	O	O:0.999820
over	O	O:0.999734
a	O	O:0.999908
groupby	B-API	B-API:0.996597
object	O	O:0.999802
,	O	O:0.999988
you	O	O:0.999974
can	O	O:0.999978
try	O	O:0.999999
`	O	O:0.999998
apply	O	B-API:0.968913
`	O	O:0.999887
.	O	O:0.998075
	
For	O	O:0.999911
example	O	O:0.998987
,	O	O:0.999976
#CODE	O	O:0.999793
	
Pandas	O	O:0.996203
:	O	O:0.999928
Timing	O	O:0.999763
difference	O	O:0.999714
between	O	O:0.997286
Function	O	O:0.998881
and	O	O:0.999983
Apply	O	O:0.999556
to	O	O:0.999642
Series	O	O:0.999920
	
Why	O	O:0.999450
is	O	O:0.999989
the	O	O:0.999906
apply	O	B-API:0.980360
(	O	O:0.999889
lambda	O	O:0.987148
)	O	O:0.999971
method	O	O:0.999329
~	O	O:0.998280
3.5	O	O:0.999653
x	O	O:0.999697
slower	O	O:0.998911
.	O	O:0.999887
	
In	O	O:0.999964
more	O	O:0.999886
complex	O	O:0.999797
dataframes	O	O:0.999881
,	O	O:0.999991
I	O	O:0.999998
have	O	O:0.999952
noticed	O	O:0.999886
a	O	O:0.999994
larger	O	O:0.996231
difference	O	O:0.997939
(	O	O:0.999845
~10	O	O:0.999909
x	O	O:0.999694
)	O	O:0.999952
.	O	O:0.999866
	
So	O	O:0.999768
in	O	O:0.999995
this	O	O:0.999946
case	O	O:0.999906
it	O	O:0.999994
looks	O	O:0.999974
like	O	O:0.999996
most	O	O:0.999940
of	O	O:0.999991
the	O	O:0.999932
performance	O	O:0.999918
difference	O	O:0.999526
is	O	O:0.999989
related	O	O:0.999653
apply	O	O:0.877526
converting	O	O:0.998161
each	O	O:0.999342
column	O	O:0.999951
to	O	O:0.999999
a	O	O:0.999999
`	O	O:0.999915
Series	O	O:0.989841
`	O	O:0.999986
and	O	O:0.999985
passing	O	O:0.999930
each	O	O:0.999050
series	O	O:0.999981
separately	O	O:0.999935
to	O	O:0.999969
rolling_mean	B-API	B-API:0.988426
.	O	O:0.999839
	
Having	O	O:0.999802
it	O	O:0.999968
use	O	O:0.999875
`	O	O:0.999955
Raw=True	O	O:0.952035
`	O	O:0.999979
has	O	O:0.999672
it	O	O:0.999998
just	O	O:0.999967
pass	O	O:0.999617
ndarrays	O	O:0.999436
.	O	O:0.999903
	
Aftermath	O	O:0.997062
:	O	O:0.999971
I	O	O:0.999998
ended	O	O:0.999934
up	O	O:0.999925
being	O	O:0.999775
a	O	O:0.999978
coward	O	O:0.974143
and	O	O:0.999994
preprocessing	O	O:0.999939
the	O	O:0.999959
data	O	O:0.999586
before	O	O:0.999830
importing	O	O:0.999820
into	O	O:0.998994
pandas	O	O:0.999487
.	O	O:0.999810
	
But	O	O:0.999825
I'm	O	O:0.999985
still	O	O:0.999913
curious	O	O:0.999835
if	O	O:0.999992
there's	O	O:0.999944
a	O	O:0.999997
general	O	O:0.998176
solution	O	O:0.999852
,	O	O:0.999994
using	O	O:0.999984
something	O	O:0.999802
like	O	O:0.999787
apply	O	O:0.742184
or	O	O:0.999513
map	O	B-API:0.980623
.	O	O:0.999861
	
@USER	O	O:0.997549
.	O	O:0.999695
	
Yes	O	O:0.999661
I	O	O:0.999977
am	O	O:0.999996
sure	O	O:0.997780
.	O	O:0.999932
	
`	O	O:0.999969
sweep	O	O:0.924390
`	O	O:0.999981
is	O	O:0.999977
based	O	O:0.999674
on	O	O:0.999961
`	O	O:0.999969
apply	O	B-API:0.975992
`	O	O:0.999868
.	O	O:0.998157
	
if	O	O:0.999939
you	O	O:0.999986
read	O	O:0.999485
the	O	O:0.999986
documentation	O	O:0.999904
for	O	O:0.999990
apply	O	B-API:0.708112
,	O	O:0.999897
the	O	O:0.999883
definition	O	O:0.997640
is	O	O:0.999997
amply	O	O:0.999840
clear	O	O:0.999474
IMHO	O	O:0.998523
.	O	O:0.999688
	
Before	O	O:0.999854
you	O	O:0.999947
ask	O	O:0.999951
,	O	O:0.999996
yes	O	O:0.999858
apply	O	B-API:0.630604
is	O	O:0.999961
mentioned	O	O:0.998754
on	O	O:0.999987
the	O	O:0.999972
docs	O	O:0.999911
page	O	O:0.999879
for	O	O:0.999982
sweep	O	O:0.962013
(	O	O:0.999978
look	O	O:0.999849
under	O	O:0.999938
see	O	O:0.999989
also	O	O:0.999876
)	O	O:0.999994
.	O	O:0.999570
	
Pandas	O	O:0.999303
has	O	O:0.999944
an	O	O:0.999774
apply	O	B-API:0.791081
method	O	O:0.999382
too	O	O:0.999616
,	O	O:0.999997
apply	O	O:0.606873
being	O	O:0.997122
what	O	O:0.999457
R's	O	O:0.999916
sweep	O	O:0.999552
uses	O	O:0.999488
under	O	O:0.999901
the	O	O:0.999933
hood	O	O:0.998414
.	O	O:0.999850
	
(	O	O:0.999908
Note	O	O:0.999984
that	O	O:0.999961
the	O	O:0.999996
MARGIN	O	O:0.999793
argument	O	O:0.999674
is	O	O:0.999955
"	O	O:0.999990
equivalent	O	O:0.999276
"	O	O:0.999982
to	O	O:0.999964
the	O	O:0.999999
axis	O	O:0.999821
argument	O	O:0.999782
in	O	O:0.999989
many	O	O:0.999989
pandas	O	O:0.999852
functions	O	O:0.999931
,	O	O:0.999958
except	O	O:0.999969
that	O	O:0.999845
it	O	O:0.999999
takes	O	O:0.999983
values	O	O:0.999628
0	O	O:0.999880
and	O	O:0.999997
1	O	O:0.999772
rather	O	O:0.999881
than	O	O:0.999597
1	O	O:0.999868
and	O	O:0.999983
2	O	O:0.999860
)	O	O:0.999854
.	O	O:0.999687
	
#CODE	O	O:0.998453
	
You	O	O:0.999904
can	O	O:0.999956
use	O	O:0.999998
an	O	O:0.999980
apply	O	B-API:0.550022
with	O	O:0.999890
a	O	O:0.999847
function	O	O:0.999574
which	O	O:0.999536
is	O	O:0.999991
called	O	O:0.999042
against	O	O:0.999988
each	O	O:0.994660
row	O	O:0.999001
:	O	O:0.999962
#CODE	O	O:0.999848
	
Note	O	O:0.999035
:	O	O:0.999992
that	O	O:0.999949
axis=0	O	O:0.999939
would	O	O:0.999969
apply	O	O:0.796976
against	O	O:0.999938
each	O	O:0.999141
column	O	O:0.999801
,	O	O:0.999999
this	O	O:0.999771
is	O	O:0.999995
the	O	O:0.999985
default	O	O:0.999940
as	O	O:0.999995
data	O	O:0.998678
is	O	O:0.999987
stored	O	O:0.998990
column-wise	O	O:0.998370
and	O	O:0.999991
so	O	O:0.999987
column-wise	O	O:0.998612
operations	O	O:0.999765
are	O	O:0.999987
more	O	O:0.999851
efficient	O	O:0.999308
.	O	O:0.999881
	
You	O	O:0.999931
can	O	O:0.999959
do	O	O:0.999998
the	O	O:0.999999
same	O	O:0.999765
in	O	O:0.999983
numpy	O	O:0.999627
(	O	O:0.999988
ie	O	O:0.999988
`	O	O:0.999984
data.values	O	O:0.792466
`	O	O:0.999998
here	O	O:0.998837
)	O	O:0.999996
,	O	O:0.999965
either	O	O:0.999991
multiplying	O	O:0.999792
directly	O	O:0.999011
,	O	O:0.999998
this	O	O:0.999913
will	O	O:0.999953
be	O	O:0.999998
faster	O	O:0.999939
as	O	O:0.999944
it	O	O:0.999868
doesn't	O	O:0.999939
worry	O	O:0.999936
about	O	O:0.999961
data-alignment	O	O:0.999617
,	O	O:0.999983
or	O	O:0.999998
using	O	O:0.999957
vectorize	B-API	B-API:0.756004
rather	O	O:0.999531
than	O	O:0.999618
apply	O	B-API:0.736788
.	O	O:0.999321
	
Great	O	O:0.998136
answer	O	O:0.999330
.	O	O:0.999709
	
I	O	O:0.999970
am	O	O:0.999996
playing	O	O:0.996625
around	O	O:0.999708
with	O	O:0.999960
this	O	O:0.999912
approach	O	O:0.999949
now	O	O:0.999684
and	O	O:0.999980
had	O	O:0.999986
a	O	O:0.999915
question	O	O:0.995235
.	O	O:0.999858
	
Can	O	O:0.999637
you	O	O:0.999978
please	O	O:0.999954
comment	O	O:0.999934
on	O	O:0.999996
the	O	O:0.999995
use	O	O:0.999978
of	O	O:0.999707
`	O	O:0.999969
lambda	O	O:0.998361
`	O	O:0.999982
in	O	O:0.999081
`	O	O:0.999995
apply	O	B-API:0.978378
`	O	O:0.999889
?	O	O:0.999142
	
Any	O	O:0.999707
reason	O	O:0.999779
to	O	O:0.999982
prefer	O	O:0.999996
it	O	O:0.999997
over	O	O:0.999979
a	O	O:0.999960
function	O	O:0.999856
declared	O	O:0.999928
using	O	O:0.999900
`	O	O:0.999865
def	O	O:0.944516
`	O	O:0.999977
?	O	O:0.999388
	
Thanks	O	O:0.999279
much	O	O:0.997828
.	O	O:0.999872
	
Obviously	O	O:0.999837
I	O	O:0.999990
could	O	O:0.999968
write	O	O:0.999913
plain	O	O:0.999686
Python	O	O:0.999967
that	O	O:0.999965
,	O	O:0.999999
given	O	O:0.999716
the	O	O:0.999983
period	O	O:0.999733
I	O	O:0.999993
re-sampled	O	O:0.999951
to	O	O:0.999826
in	O	O:0.999999
Pandas	O	O:0.999914
,	O	O:0.999992
could	O	O:0.999980
give	O	O:0.999962
me	O	O:0.999983
the	O	O:0.999986
Series	O	O:0.999588
I	O	O:0.999994
need	O	O:0.999940
,	O	O:0.999942
but	O	O:0.999985
I'd	O	O:0.999995
like	O	O:0.999975
to	O	O:0.999998
know	O	O:0.999986
if	O	O:0.999996
there	O	O:0.999772
is	O	O:0.999998
a	O	O:0.999982
trick	O	O:0.999568
within	O	O:0.999676
Pandas	O	O:0.999939
that	O	O:0.999912
helps	O	O:0.999945
me	O	O:0.999977
with	O	O:0.999978
this	O	O:0.999964
,	O	O:0.999997
or	O	O:0.999999
something	O	O:0.999909
I	O	O:0.999996
could	O	O:0.999994
do	O	O:0.999948
in	O	O:0.999994
Numpy	O	O:0.999793
,	O	O:0.999996
as	O	O:0.999987
I	O	O:0.999992
want	O	O:0.999983
to	O	O:0.999902
apply	O	O:0.995678
this	O	O:0.999652
to	O	O:0.999993
largish	O	O:0.999978
datasets	O	O:0.995801
(	O	O:0.999990
hundreds	O	O:0.999987
of	O	O:0.999986
users	O	O:0.999145
,	O	O:0.999999
thousands	O	O:0.999971
of	O	O:0.999993
days	O	O:0.999473
,	O	O:0.999999
multiple	O	O:0.999918
login	O	O:0.996405
/	O	O:0.999994
logouts	O	O:0.999973
a	O	O:0.999992
day	O	O:0.999828
per	O	O:0.999961
user	O	O:0.998133
)	O	O:0.999904
.	O	O:0.999609
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.993869
a	O	O:0.999872
function	O	O:0.999544
to	O	O:0.999996
a	O	O:0.999999
mixed	O	O:0.995848
type	O	O:0.998707
Pandas	O	O:0.999949
DataFrame	B-API	O:0.994588
in	O	O:0.999980
place	O	O:0.999760
?	O	O:0.999983
	
This	O	O:0.998559
is	O	O:0.999987
how	O	O:0.999942
I	O	O:0.999998
apply	O	O:0.978841
a	O	O:0.998929
function	O	O:0.998218
to	O	O:0.999953
Pandas	O	O:0.999995
dataframe	B-API	O:0.995439
,	O	O:0.999974
it	O	O:0.999989
works	O	O:0.999908
in	O	O:0.999996
place	O	O:0.999489
and	O	O:0.999997
modifies	O	O:0.999462
the	O	O:0.999987
original	O	O:0.999795
data	O	O:0.999954
frame	O	O:0.999990
.	O	O:0.999959
	
#CODE	O	O:0.998453
	
But	O	O:0.999971
if	O	O:0.999989
I	O	O:0.999989
try	O	O:0.999986
the	O	O:0.999984
same	O	O:0.999927
on	O	O:0.999999
this	O	O:0.999994
data	O	O:0.999991
frame	O	O:0.999952
(	O	O:0.999978
it	O	O:0.999971
has	O	O:0.999961
ints	O	O:0.999293
and	O	O:0.999990
floats	O	O:0.999943
instead	O	O:0.999905
of	O	O:0.999998
just	O	O:0.999923
ints	O	O:0.999929
)	O	O:0.999986
,	O	O:0.999997
then	O	O:0.999847
it	O	O:0.999998
fails	O	O:0.999955
to	O	O:0.999988
apply	O	O:0.904903
inplace	O	O:0.839910
and	O	O:0.999958
always	O	O:0.999911
returns	O	O:0.999495
a	O	O:0.999945
dataframe	B-API	O:0.974435
.	O	O:0.999869
	
But	O	O:0.999925
I	O	O:0.999998
have	O	O:0.999991
a	O	O:0.999986
huge	O	O:0.999495
dataframe	B-API	O:0.997403
,	O	O:0.999997
so	O	O:0.999994
I	O	O:0.999997
want	O	O:0.999986
to	O	O:0.999893
do	O	O:0.999997
it	O	O:0.999978
inplace	O	O:0.966207
.	O	O:0.999879
	
#CODE	O	O:0.998453
	
So	O	O:0.999956
no	O	O:0.999983
way	O	O:0.999977
to	O	O:0.999994
apply	O	O:0.992343
a	O	O:0.999627
function	O	O:0.997956
in-place	O	O:0.999879
to	O	O:0.999990
a	O	O:1.000000
DataFrame	B-API	O:0.971927
in	O	O:0.999987
pandas	O	O:0.999815
?	O	O:0.999977
	
But	O	O:0.999966
of	O	O:0.999986
course	O	O:0.999429
it'll	O	O:0.999981
return	O	O:0.999345
a	O	O:0.999979
frame	O	O:0.999967
,	O	O:0.999994
apply	O	O:0.826208
returns	O	O:0.999201
a	O	O:0.999974
frame	O	O:0.999926
,	O	O:0.999997
this	O	O:0.999967
seems	O	O:0.999960
to	O	O:0.999993
work	O	O:0.999996
inplace	O	O:0.997573
for	O	O:0.999993
me	O	O:0.999406
in	O	O:0.999786
0.13.1	O	O:0.998738
(	O	O:0.999995
even	O	O:0.999900
with	O	O:0.999990
floats	O	O:0.999583
)	O	O:0.999979
.	O	O:0.999868
	
Generally	O	O:0.999726
you'll	O	O:0.999920
want	O	O:0.999961
to	O	O:0.999997
vectorize	B-API	O:0.982508
rather	O	O:0.999951
than	O	O:0.999887
use	O	O:0.999964
apply	O	B-API:0.808765
,	O	O:0.999914
obviously	O	O:0.999862
here	O	O:0.999848
,	O	O:0.999997
as	O	O:0.999997
mentioned	O	O:0.999709
above	O	O:0.999887
,	O	O:0.999995
you'd	O	O:0.999869
use	O	O:0.999816
`	O	O:0.999961
x	O	O:0.998537
[	O	O:0.999968
'	O	O:0.999990
b	O	O:0.999939
']	O	O:0.999952
+=1	O	O:0.905395
`	O	O:0.999919
.	O	O:0.999341
	
Also	O	O:0.999851
,	O	O:0.999995
I	O	O:0.999997
think	O	O:0.999984
using	O	O:0.999498
iterrows	B-API	B-API:0.999203
is	O	O:0.999939
preferable	O	O:0.999031
to	O	O:0.999996
using	O	O:0.999996
apply	O	B-API:0.833509
like	O	O:0.998695
this	O	O:0.999568
.	O	O:0.999912
	
I	O	O:0.999924
realise	O	O:0.999918
this	O	O:0.999858
does	O	O:0.999813
answer	O	O:0.999976
the	O	O:0.999961
question	O	O:0.993738
(	O	O:0.999995
well	O	O:0.999848
)	O	O:0.999985
,	O	O:0.999965
but	O	O:0.999994
using	O	O:0.999914
apply	O	B-API:0.827097
with	O	O:0.995672
side-effects	O	O:0.997969
seems	O	O:0.999925
hacky	O	O:0.999682
/	O	O:0.999987
wrong	O	O:0.999052
/	O	O:0.999936
I	O	O:0.999986
really	O	O:0.999899
dislike	O	O:0.998256
it	O	O:0.999858
!	O	O:0.999914
	
If	O	O:0.999965
you	O	O:0.999989
want	O	O:0.999989
to	O	O:0.999997
iterate	O	O:0.999992
across	O	O:0.999989
your	O	O:0.999841
database	O	O:0.999889
and	O	O:0.999997
apply	O	O:0.921015
a	O	O:0.999347
function	O	O:0.998973
to	O	O:0.999997
each	O	O:0.999987
row	O	O:0.999961
,	O	O:0.999995
you	O	O:0.999975
might	O	O:0.999990
also	O	O:0.999997
want	O	O:0.999998
to	O	O:0.999967
consider	O	O:0.999997
the	O	O:0.999992
apply	O	B-API:0.952496
function	O	O:0.998730
#CODE	O	O:0.998765
	
If	O	O:0.999990
a	O	O:0.999991
column	O	O:0.999791
contains	O	O:0.999963
only	O	O:0.999975
strings	O	O:0.999871
,	O	O:0.999996
we	O	O:0.999997
can	O	O:0.999979
apply	O	O:0.977156
`	O	O:0.999922
len	O	B-API:0.986133
`	O	O:0.999994
on	O	O:0.999789
it	O	O:0.999998
like	O	O:0.999986
what	O	O:0.999949
you	O	O:0.999943
did	O	O:0.999968
should	O	O:0.999977
work	O	O:0.999956
fine	O	O:0.999776
:	O	O:0.999986
#CODE	O	O:0.999853
	
Continuing	O	O:0.999615
the	O	O:0.999949
above	O	O:0.999815
example	O	O:0.999855
,	O	O:0.999995
let	O	O:0.999898
us	O	O:0.999947
convert	O	O:0.993759
`	O	O:0.999994
strange	O	O:0.989367
`	O	O:0.999997
to	O	O:0.999914
strings	O	O:0.999979
and	O	O:0.999996
check	O	O:0.999944
if	O	O:0.999974
`	O	O:0.999986
apply	O	B-API:0.993160
`	O	O:0.999643
works	O	O:0.985181
:	O	O:0.999979
#CODE	O	O:0.999591
	
Then	O	O:0.999214
I	O	O:0.999998
tried	O	O:0.999984
to	O	O:0.999950
apply	O	O:0.933980
the	O	O:0.999977
same	O	O:0.999762
solution	O	O:0.999898
to	O	O:0.999976
`	O	O:1.000000
pandas	O	O:0.983481
`	O	O:0.999978
:	O	O:0.999804
#CODE	O	O:0.999908
	
Use	O	O:0.999248
`	O	O:0.999975
groupby-shift	O	O:0.986348
`	O	O:0.999998
to	O	O:0.999966
apply	O	O:0.991997
the	O	O:0.999941
shift	O	B-API:0.883654
to	O	O:0.999984
each	O	O:0.999997
group	O	O:0.999081
individually	O	O:0.999209
:	O	O:0.999733
(	O	O:0.999980
Thanks	O	O:0.999956
to	O	O:0.999988
Jeff	O	O:0.999980
for	O	O:0.999992
pointing	O	O:0.997117
out	O	O:0.999955
this	O	O:0.999768
simplification	O	O:0.999860
.	O	O:0.999953
)	O	O:0.999984
#CODE	O	O:0.999424
	
datetime	O	O:0.990277
won't	O	O:0.999865
operate	O	O:0.999893
on	O	O:0.999997
a	O	O:0.999995
pandas	O	O:0.999380
Series	O	O:0.999157
(	O	O:0.999995
column	O	O:0.999977
of	O	O:0.999996
a	O	O:0.999995
dataframe	B-API	O:0.995388
)	O	O:0.999961
.	O	O:0.999822
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999993
`	O	O:0.999942
to_datetime	B-API	B-API:0.997386
`	O	O:0.999995
or	O	O:0.999975
you	O	O:0.999994
could	O	O:0.999980
use	O	O:0.999995
`	O	O:0.999982
datetime	O	O:0.913580
`	O	O:0.999983
within	O	O:0.979666
`	O	O:0.999992
apply	O	B-API:0.988931
`	O	O:0.999836
.	O	O:0.998003
	
Something	O	O:0.999870
like	O	O:0.999849
the	O	O:0.999987
following	O	O:0.999000
should	O	O:0.999675
work	O	O:0.999471
:	O	O:0.999994
#CODE	O	O:0.999897
	
Or	O	O:0.999938
use	O	O:0.999615
apply	O	B-API:0.981719
:	O	O:0.998941
#CODE	O	O:0.999078
	
Yeah	O	O:0.999704
,	O	O:0.999986
I	O	O:0.999976
did	O	O:0.999975
the	O	O:0.999916
`	O	O:0.999962
to_datetime	B-API	B-API:0.997232
`	O	O:0.999995
answer	O	O:0.999917
a	O	O:0.999996
while	O	O:0.998992
ago	O	O:0.999795
and	O	O:0.999993
the	O	O:0.999993
came	O	O:0.999385
back	O	O:0.999390
and	O	O:0.999991
added	O	O:0.999927
the	O	O:0.999840
`	O	O:0.999956
apply	O	B-API:0.973986
`	O	O:0.999988
answer	O	O:0.999535
at	O	O:0.999994
about	O	O:0.999791
the	O	O:0.999979
same	O	O:0.999923
time	O	O:0.999970
as	O	O:0.999996
you	O	O:0.999910
.	O	O:0.999955
	
not	O	O:0.999968
a	O	O:0.999999
speedfreak	O	O:0.997278
myself	O	O:0.999009
,	O	O:0.999978
but	O	O:0.999923
i	O	O:0.999932
tested	O	O:0.999891
yours	O	O:0.999031
and	O	O:0.999994
my	O	O:0.999709
apply	O	B-API:0.951764
method	O	O:0.998619
.	O	O:0.999350
	
Youe	O	O:0.996489
is	O	O:0.999980
about	O	O:0.999642
50%	O	O:0.999951
faster	O	O:0.999574
as	O	O:0.999988
mine	O	O:0.998155
has	O	O:0.999962
the	O	O:0.999992
overhead	O	O:0.999888
of	O	O:0.999992
creating	O	O:0.999910
a	O	O:0.999993
new	O	O:0.999720
dataframe	B-API	O:0.998341
before	O	O:0.999820
doing	O	O:0.999910
the	O	O:0.999860
apply	O	B-API:0.974108
.	O	O:0.998592
	
All	O	O:0.999791
in	O	O:0.999987
all	O	O:0.999997
your	O	O:0.999423
is	O	O:0.999974
probably	O	O:0.999627
better	O	O:0.999472
.	O	O:0.999774
	
Also	O	O:0.999480
handles	O	O:0.999837
the	O	O:0.999980
1	O	O:0.999908
for	O	O:0.999976
day	O	O:0.999867
better	O	O:0.999761
than	O	O:0.999817
mine	O	O:0.999203
.	O	O:0.999932
	
Because	O	O:0.999827
questions	O	O:0.999853
describing	O	O:0.999970
your	O	O:0.999687
requirements	O	O:0.999191
and	O	O:0.999995
asking	O	O:0.999897
someone	O	O:0.999122
to	O	O:0.999962
write	O	O:0.999991
the	O	O:0.999995
code	O	O:0.999860
for	O	O:0.999997
you	O	O:0.999968
or	O	O:0.999995
explain	O	O:0.999767
how	O	O:0.999995
to	O	O:0.999993
write	O	O:0.999997
the	O	O:0.999990
code	O	O:0.999749
are	O	O:0.999994
considered	O	O:0.999957
off-topic	O	O:0.999455
for	O	O:0.999925
Stack	O	O:0.998561
Overflow	O	O:0.996004
,	O	O:0.999928
but	O	O:0.999992
none	O	O:0.999924
of	O	O:0.999993
the	O	O:0.999992
standard	O	O:0.999851
close	O	O:0.999803
reasons	O	O:0.999831
apply	O	B-API:0.572186
.	O	O:0.999169
	
Some	O	O:0.999806
people	O	O:0.999865
seem	O	O:0.999889
to	O	O:0.999996
think	O	O:0.999999
that	O	O:0.999872
"	O	O:0.999994
too	O	O:0.999960
broad	O	O:0.999673
"	O	O:0.999954
,	O	O:0.999932
"	O	O:0.999974
unclear	O	O:0.998899
what	O	O:0.999771
you're	O	O:0.999941
asking	O	O:0.999597
"	O	O:0.999993
,	O	O:0.999968
or	O	O:0.999961
"	O	O:0.999976
lacks	O	O:0.999751
sufficient	O	O:0.999928
information	O	O:0.999943
to	O	O:0.999992
diagnose	O	O:0.999993
the	O	O:0.999983
problem	O	O:0.999178
"	O	O:0.999966
are	O	O:0.999989
always	O	O:0.999986
sufficient	O	O:0.999974
to	O	O:0.999979
cover	O	O:0.999893
these	O	O:0.999988
kinds	O	O:0.999952
of	O	O:0.999991
questions	O	O:0.998618
,	O	O:0.999980
but	O	O:0.999995
this	O	O:0.999923
case	O	O:0.999959
illustrates	O	O:0.999806
why	O	O:0.999991
they	O	O:0.999960
often	O	O:0.999891
don't	O	O:0.999954
get	O	O:0.999976
the	O	O:0.999995
right	O	O:0.999872
message	O	O:0.999690
across	O	O:0.999753
.	O	O:0.999825
	
I've	O	O:0.999124
already	O	O:0.999891
searched	O	O:0.999905
posts	O	O:0.999663
on	O	O:0.999978
stackoverflow	O	O:0.999465
,	O	O:0.999974
and	O	O:0.999991
looked	O	O:0.999743
at	O	O:0.999979
the	O	O:0.999958
documentation	O	O:0.999450
for	O	O:0.999909
convert_objects	B-API	B-API:0.998522
,	O	O:0.999912
but	O	O:0.999962
it	O	O:0.999946
is	O	O:0.999994
unfortunately	O	O:0.999768
pretty	O	O:0.999607
sparse	O	O:0.998755
.	O	O:0.999560
	
I	O	O:0.999915
wouldn't	O	O:0.999988
have	O	O:0.999887
known	O	O:0.999965
to	O	O:0.999999
even	O	O:0.999977
attempt	O	O:0.999971
to	O	O:0.999994
apply	O	O:0.951904
it	O	O:0.999985
this	O	O:0.999867
way	O	O:0.999967
if	O	O:0.999989
not	O	O:0.999969
for	O	O:0.999993
the	O	O:0.999970
previous	O	O:0.998690
post	O	O:0.990090
(	O	O:0.999990
linked	O	O:0.999923
above	O	O:0.999696
)	O	O:0.999958
.	O	O:0.999740
	
In	O	O:0.999964
order	O	O:0.999877
to	O	O:0.999994
apply	O	O:0.880037
a	O	O:0.999940
method	O	O:0.999787
on	O	O:0.999994
a	O	O:0.999995
DataFrame	B-API	O:0.997923
that	O	O:0.999565
is	O	O:0.999998
grouped	O	O:0.999088
;	O	O:0.999999
your	O	O:0.999882
need	O	O:0.999981
to	O	O:0.999997
use	O	O:1.000000
a	O	O:0.999983
loop	O	O:0.999555
as	O	O:0.999973
follows	O	O:0.985737
:	O	O:0.999958
#CODE	O	O:0.999732
	
I	O	O:0.999991
have	O	O:0.999906
checked	O	O:0.997108
and	O	O:0.999996
the	O	O:0.999974
`	O	O:0.999849
apply	O	B-API:0.773447
lambda	O	O:0.997968
`	O	O:0.999951
part	O	O:0.997694
gives	O	O:0.999964
the	O	O:0.999998
expected	O	O:0.999796
results	O	O:0.999978
if	O	O:0.999994
I	O	O:0.999994
`	O	O:0.999995
debug	O	O:0.981877
print	O	O:0.999328
`	O	O:0.999949
it	O	O:0.999774
.	O	O:0.999971
	
The	O	O:0.999880
problem	O	O:0.999687
seems	O	O:0.999964
to	O	O:0.999994
be	O	O:1.000000
assigning	O	O:0.999947
the	O	O:0.999829
apply	O	B-API:0.519867
lambda	O	O:0.999654
construct	O	O:0.999593
back	O	O:0.999533
to	O	O:0.999981
the	O	O:0.999998
DataFrame	B-API	O:0.985677
.	O	O:0.999875
	
Note	O	O:0.998812
:	O	O:0.999984
it	O	O:0.999995
could	O	O:0.999983
be	O	O:0.999999
there	O	O:0.999985
are	O	O:0.999994
some	O	O:0.999942
NaNs	O	O:0.999757
causing	O	O:0.999805
this	O	O:0.999943
float	O	O:0.998685
upcasting	O	O:0.999895
,	O	O:0.999977
in	O	O:0.999970
which	O	O:0.999969
case	O	O:0.999969
you	O	O:0.999994
may	O	O:0.999998
have	O	O:0.999993
to	O	O:0.999998
reconsider	O	O:0.999999
your	O	O:0.999727
approach	O	O:0.999170
(	O	O:0.999996
since	O	O:0.999906
you	O	O:0.999957
won't	O	O:0.999996
be	O	O:1.000000
able	O	O:0.999995
to	O	O:0.999995
convert	O	O:0.999722
to	O	O:0.999983
int	O	O:0.999947
!	O	O:0.999974
)	O	O:0.999962
,	O	O:0.999995
one	O	O:0.999961
option	O	O:0.999796
might	O	O:0.999987
be	O	O:0.999998
to	O	O:0.999998
do	O	O:0.999995
the	O	O:0.999974
string	O	O:0.998812
formatting	O	O:0.999512
and	O	O:0.999997
then	O	O:0.999911
apply	O	O:0.679147
`	O	O:0.999895
to_datetime	B-API	B-API:0.999865
`	O	O:0.999920
:	O	O:0.999761
#CODE	O	O:0.999908
	
I	O	O:0.999856
am	O	O:0.999991
not	O	O:0.999947
sure	O	O:0.999991
that	O	O:0.999938
I	O	O:0.999997
understand	O	O:0.999997
your	O	O:0.999101
question	O	O:0.998190
,	O	O:0.999996
but	O	O:0.999948
in	O	O:0.999986
the	O	O:0.999995
last	O	O:0.999787
part	O	O:0.999921
you	O	O:0.999989
say	O	O:0.999999
that	O	O:0.999984
you	O	O:0.999998
want	O	O:0.999991
to	O	O:0.999998
make	O	O:0.999998
sure	O	O:0.999969
that	O	O:0.999999
your	O	O:0.999997
data	O	O:0.998837
is	O	O:0.999992
not	O	O:0.999927
correlated	O	O:0.999521
.	O	O:0.999906
	
You	O	O:0.999771
apply	O	O:0.572300
Principal	O	O:0.993313
Component	O	O:0.995957
Analysis	O	O:0.997580
(	O	O:0.999952
PCA	B-API	O:0.973606
)	O	O:0.999987
to	O	O:0.999995
any	O	O:0.999999
dataset	O	O:0.999867
,	O	O:0.999994
the	O	O:0.999997
resulting	O	O:0.999778
principal	O	O:0.999675
components	O	O:0.999296
are	O	O:0.999985
not	O	O:0.999994
correlated	O	O:0.999924
by	O	O:0.999962
definition	O	O:0.999495
.	O	O:0.999716
	
I	O	O:0.999959
don't	O	O:0.999946
fully	O	O:0.999369
understand	O	O:0.999888
how	O	O:0.999923
to	O	O:0.999983
get	O	O:0.999999
my	O	O:0.999994
apply	O	O:0.550092
function	O	O:0.999761
to	O	O:0.999987
actually	O	O:0.999999
apply	O	O:0.667007
to	O	O:0.999974
the	O	O:0.999997
row	O	O:0.999921
to	O	O:0.999983
change	O	O:0.999954
it	O	O:0.999970
.	O	O:0.999870
	
In	O	O:0.999976
that	O	O:0.999969
case	O	O:0.999993
merge	O	O:0.987500
them	O	O:0.998989
and	O	O:0.999999
then	O	O:0.999974
depending	O	O:0.999973
on	O	O:0.999995
the	O	O:0.999994
complexity	O	O:0.999950
of	O	O:0.999999
your	O	O:0.999332
function	O	O:0.999979
either	O	O:0.999967
use	O	O:0.999980
a	O	O:0.999987
lambda	O	O:0.996954
or	O	O:0.999982
define	O	O:0.999825
your	O	O:0.999322
function	O	O:0.999119
and	O	O:0.999998
just	O	O:0.999855
apply	O	O:0.525201
it	O	O:0.999872
row-wise	O	O:0.997462
so	O	O:0.999944
`	O	O:0.999990
merged	O	O:0.999269
=	O	O:0.999902
df.merge	B-API	B-API:0.986349
(	O	O:0.999917
df1	O	O:0.999518
,	O	O:0.999965
on=	O	O:0.999817
'	O	O:0.999958
Date	O	O:0.999484
')`	O	O:0.999991
then	O	O:0.997955
`	O	O:0.999999
merged.apply	O	O:0.973920
(	O	O:0.999989
myfunc	O	O:0.995385
,	O	O:0.999983
axis=1	O	O:0.999883
)`	O	O:0.999844
or	O	O:0.999886
`	O	O:0.999990
merged.apply	O	O:0.973136
(	O	O:0.999996
lambda	O	O:0.999196
row	O	O:0.999068
:	O	O:0.999892
myfunc	O	O:0.996684
(	O	O:0.999993
row	O	O:0.999894
)	O	O:0.999987
,	O	O:0.999989
axis=1	O	O:0.999832
)`	O	O:0.999756
I'd	O	O:0.999986
need	O	O:0.999984
to	O	O:0.999994
see	O	O:1.000000
your	O	O:0.999654
function	O	O:0.999977
first	O	O:0.999964
though	O	O:0.999879
before	O	O:0.999886
deciding	O	O:0.999394
the	O	O:0.999968
best	O	O:0.999171
approach	O	O:0.999934
,	O	O:0.999993
also	O	O:0.999807
it's	O	O:0.999971
getting	O	O:0.999788
late	O	O:0.999892
here	O	O:0.999653
in	O	O:0.999995
blighty	O	O:0.999782
so	O	O:0.999986
I	O	O:0.999957
may	O	O:0.999995
not	O	O:0.999847
answer	O	O:0.999917
	
Yes	O	O:0.999880
that	O	O:0.999734
is	O	O:0.999995
correct	O	O:0.999880
,	O	O:0.999999
then	O	O:0.999958
apply	O	O:0.982141
a	O	O:0.999966
function	O	O:0.999252
row	O	O:0.999986
wise	O	O:0.999833
or	O	O:0.999992
if	O	O:0.999965
you're	O	O:0.999985
just	O	O:0.999943
looking	O	O:0.999992
for	O	O:0.999976
values	O	O:0.998929
larger	O	O:0.999556
than	O	O:0.999945
some	O	O:0.999874
threshold	O	O:0.999997
then	O	O:0.999853
do	O	O:0.999997
boolean	O	O:0.999906
masking	O	O:0.999806
using	O	O:0.999305
max()	B-API	B-API:0.995116
that	O	O:0.999217
will	O	O:0.999954
be	O	O:0.999998
very	O	O:0.999874
quick	O	O:0.997765
.	O	O:0.999644
	
Sorry	O	O:0.999789
love	O	O:0.999303
to	O	O:0.999995
help	O	O:0.999914
further	O	O:0.999298
but	O	O:0.999927
it's	O	O:0.999884
getting	O	O:0.999834
late	O	O:0.999451
here	O	O:0.999424
.	O	O:0.999905
	
Note	O	O:0.998546
:	O	O:0.999978
This	O	O:0.999677
is	O	O:0.999992
not	O	O:0.999965
the	O	O:0.999999
same	O	O:0.999934
as	O	O:0.999998
this	O	O:0.999904
question	O	O:0.999760
;	O	O:0.999983
and	O	O:0.999986
I	O	O:0.999999
have	O	O:0.999952
read	O	O:0.997689
the	O	O:0.999966
documentation	O	O:0.999192
,	O	O:0.999979
but	O	O:0.999912
am	O	O:0.999971
not	O	O:0.999988
enlightened	O	O:0.999964
by	O	O:0.999960
it	O	O:0.999948
.	O	O:0.999835
	
I've	O	O:0.999722
also	O	O:0.999971
read	O	O:0.999795
through	O	O:0.999787
the	O	O:0.999910
"	O	O:0.999876
Related	O	O:0.999034
"	O	O:0.999993
questions	O	O:0.999390
on	O	O:0.999993
this	O	O:0.999916
topic	O	O:0.999876
,	O	O:0.999980
but	O	O:0.999966
I'm	O	O:0.999983
still	O	O:0.999931
missing	O	O:0.999823
the	O	O:0.999965
simple	O	O:0.999220
rule	O	O:0.999856
Pandas	O	O:0.999637
is	O	O:0.999991
using	O	O:0.999183
,	O	O:0.999772
and	O	O:0.999872
how	O	O:0.999905
I'd	O	O:0.999920
apply	O	O:0.867468
it	O	O:0.999934
to	O	O:0.999973
for	O	O:1.000000
example	O	O:0.999853
modify	O	O:0.999696
the	O	O:0.999979
values	O	O:0.990600
(	O	O:0.999986
or	O	O:1.000000
a	O	O:0.999999
subset	O	O:0.999697
of	O	O:0.999997
values	O	O:0.999453
)	O	O:0.999995
in	O	O:0.999995
a	O	O:0.999994
dataframe	B-API	O:0.997752
that	O	O:0.999929
satisfy	O	O:0.999984
a	O	O:0.999998
particular	O	O:0.999467
query	O	O:0.997440
.	O	O:0.999866
	
Then	O	O:0.999535
I	O	O:0.999998
used	O	O:0.999959
the	O	O:0.999910
pandas	O	O:0.999446
`	O	O:0.999992
apply	O	B-API:0.998233
`	O	O:0.999775
method	O	O:0.994846
(	O	O:0.999991
as	O	O:0.999983
was	O	O:0.999739
suggested	O	O:0.999942
here	O	O:0.999897
)	O	O:0.999995
to	O	O:0.999979
implement	O	O:0.999985
the	O	O:0.999926
`	O	O:0.999979
pyproj.Geod.inv	O	O:0.815984
`	O	O:0.999994
calculation	O	O:0.999356
,	O	O:0.999999
looping	O	O:0.999876
through	O	O:0.999864
slices	O	O:0.999657
of	O	O:0.999990
the	O	O:0.999933
`	O	O:0.999996
pandas	O	O:0.993272
`	O	O:0.999979
`	O	O:0.999929
DataFrame	B-API	O:0.972258
`	O	O:0.999992
for	O	O:0.999951
each	O	O:0.999953
individual	O	O:0.996291
in	O	O:0.999987
the	O	O:0.999932
population	O	O:0.999139
.	O	O:0.999853
	
#CODE	O	O:0.998453
	
Now	O	O:0.999848
use	O	O:0.999850
`	O	O:0.999932
apply	O	B-API:0.995138
`	O	O:0.999849
and	O	O:0.998994
`	O	O:0.999991
cut	O	B-API:0.919778
`	O	O:0.999998
to	O	O:0.999980
create	O	O:0.999998
a	O	O:0.999996
new	O	O:0.999891
dataframe	B-API	O:0.999611
that	O	O:0.999877
replaces	O	O:0.999941
the	O	O:0.999995
percentile	O	O:0.999684
with	O	O:0.999917
the	O	O:0.999995
decile	O	O:0.998752
bin	O	O:0.999748
it	O	O:0.999979
is	O	O:0.999961
in	O	O:0.999717
(	O	O:0.999985
apply	O	B-API:0.733965
is	O	O:0.999942
iterating	O	O:0.999326
over	O	O:0.999782
each	O	O:0.998999
column	O	O:0.998048
):	O	O:0.999974
#CODE	O	O:0.999703
	
Use	O	O:0.999959
apply	O	O:0.876089
once	O	O:0.999315
again	O	O:0.999926
to	O	O:0.999997
get	O	O:0.999999
a	O	O:0.999999
frequency	O	O:0.999861
count	O	O:0.988740
:	O	O:0.999979
#CODE	O	O:0.999754
	
You	O	O:0.999895
should	O	O:0.999826
use	O	O:0.999982
the	O	O:0.999959
apply	O	B-API:0.952432
function	O	O:0.998697
which	O	O:0.999736
applies	O	O:0.999969
a	O	O:0.999968
function	O	O:0.999511
on	O	O:0.999985
either	O	O:0.999989
each	O	O:0.999893
column	O	O:0.999448
(	O	O:0.999995
default	O	O:0.999888
)	O	O:0.999985
or	O	O:0.999996
each	O	O:0.999841
row	O	O:0.999930
efficiently	O	O:0.998056
:	O	O:0.999968
#CODE	O	O:0.999707
	
and	O	O:0.999988
then	O	O:0.999898
call	O	O:0.999776
apply	O	O:0.864277
like	O	O:0.994933
this	O	O:0.998001
:	O	O:0.999973
#CODE	O	O:0.999825
	
linear	O	O:0.998119
fit	O	O:0.999595
by	O	O:0.999983
group	O	O:0.997913
in	O	O:0.999936
apply	O	B-API:0.591477
takes	O	O:0.997971
too	O	O:0.999939
long	O	O:0.999915
using	O	O:0.999781
pandas	O	O:0.994741
	
Normally	O	O:0.999872
,	O	O:0.999996
we	O	O:0.999996
can	O	O:0.999957
use	O	O:0.999998
either	O	O:0.999853
`	O	O:0.999934
map	O	B-API:0.976681
`	O	O:0.999990
or	O	O:0.999811
`	O	O:0.999993
apply	O	B-API:0.975962
`	O	O:0.999659
,	O	O:0.999496
but	O	O:0.999981
it	O	O:0.999968
seems	O	O:0.999988
that	O	O:0.999988
neither	O	O:0.999995
of	O	O:1.000000
them	O	O:0.999754
allows	O	O:0.999986
the	O	O:0.999991
access	O	O:0.999513
to	O	O:0.999997
values	O	O:0.999978
in	O	O:0.999989
the	O	O:0.999998
previous	O	O:0.999485
row	O	O:0.999783
.	O	O:0.999863
	
Thanks	O	O:0.999108
for	O	O:0.999997
your	O	O:0.999661
suggestions	O	O:0.997051
!	O	O:0.999934
	
I	O	O:0.999983
used	O	O:0.999988
a	O	O:0.999977
combination	O	O:0.999827
of	O	O:0.999993
the	O	O:0.999994
two	O	O:0.999992
responses	O	O:0.999941
to	O	O:0.999992
change	O	O:0.999991
the	O	O:0.999992
original	O	O:0.999690
text	O	O:0.999936
into	O	O:0.999837
a	O	O:0.999994
list	O	O:0.990424
,	O	O:0.999995
saved	O	O:0.999877
matches	O	O:0.999824
to	O	O:0.999994
a	O	O:1.000000
list	O	O:0.998131
,	O	O:0.999999
then	O	O:0.999891
joined	O	O:0.999823
the	O	O:0.999986
list	O	O:0.993108
and	O	O:0.999988
saved	O	O:0.999847
it	O	O:0.999980
to	O	O:0.999999
a	O	O:1.000000
new	O	O:0.999911
variable	O	O:0.999975
using	O	O:0.999914
the	O	O:0.999540
format	O	O:0.996370
@USER	O	O:0.999084
stated	O	O:0.997631
.	O	O:0.999847
	
Now	O	O:0.999888
to	O	O:0.999981
format	O	O:0.999992
,	O	O:0.999993
scale	O	O:0.999010
,	O	O:0.999990
and	O	O:0.999997
apply	O	O:0.605463
to	O	O:0.999781
the	O	O:0.999999
actual	O	O:0.999961
data	O	O:0.999954
set	O	O:0.999778
.	O	O:0.999968
	
It's	O	O:0.999762
significantly	O	O:0.999923
less	O	O:0.999795
verbose	O	O:0.999781
as	O	O:0.999990
well	O	O:0.999032
.	O	O:0.999942
	
you're	O	O:0.999721
right	O	O:0.999350
,	O	O:0.999994
but	O	O:0.999962
how	O	O:0.999968
does	O	O:0.999971
that	O	O:0.999992
apply	O	O:0.967408
here	O	O:0.998777
?	O	O:0.999831
	
This	O	O:0.999305
is	O	O:0.999994
a	O	O:0.999973
bug	O	O:0.999773
,	O	O:0.999988
slated	O	O:0.999625
to	O	O:0.999992
be	O	O:0.999999
fixed	O	O:0.999682
for	O	O:0.999862
0.14	O	O:0.976439
(	O	O:0.999971
releasing	O	O:0.999905
soon	O	O:0.998152
)	O	O:0.999995
,	O	O:0.999987
see	O	O:0.999954
here	O	O:0.998756
.	O	O:0.999923
	
The	O	O:0.999839
bug	O	O:0.999353
is	O	O:0.999987
that	O	O:0.999917
non-cythonized	O	O:0.999933
routines	O	O:0.999723
are	O	O:0.999981
calling	O	O:0.999402
`	O	O:0.999978
apply	O	B-API:0.965883
`	O	O:0.999946
rather	O	O:0.999443
than	O	O:0.999709
``	O	O:0.999792
agg	O	B-API:0.991072
`	O	O:0.999990
effectively	O	O:0.995045
.	O	O:0.999969
	
As	O	O:0.999885
expected	O	O:0.999986
this	O	O:0.999965
apply	O	O:0.838150
works	O	O:0.999764
over	O	O:0.998987
the	O	O:0.999765
groupby	B-API	B-API:0.998549
object	O	O:0.996775
:	O	O:0.999863
#CODE	O	O:0.999875
	
However	O	O:0.999809
,	O	O:0.999993
when	O	O:0.999952
specifying	O	O:0.999688
options	O	O:0.999918
for	O	O:0.999964
apply	O	B-API:0.761271
it	O	O:0.999833
throws	O	O:0.999544
up	O	O:0.999980
an	O	O:0.999934
error	O	O:0.997413
:	O	O:0.999928
#CODE	O	O:0.999724
	
Pandas	O	O:0.996203
:	O	O:0.999928
Timing	O	O:0.999763
difference	O	O:0.999714
between	O	O:0.997286
Function	O	O:0.998881
and	O	O:0.999983
Apply	O	O:0.999556
to	O	O:0.999642
Series	O	O:0.999920
	
There	O	O:0.999650
are	O	O:0.999994
different	O	O:0.999913
`	O	O:0.999981
apply	O	B-API:0.978580
`	O	O:0.999979
methods	O	O:0.995884
for	O	O:0.999887
`	O	O:0.999939
DataFrame	B-API	O:0.747982
`	O	O:0.999987
s	O	O:0.999086
and	O	O:0.999963
`	O	O:0.999963
GroupBy	B-API	B-API:0.994487
`	O	O:0.999979
objects	O	O:0.995003
.	O	O:0.999926
	
Only	O	O:0.999536
`	O	O:0.999976
DataFrame.apply	B-API	B-API:0.999660
`	O	O:0.999985
has	O	O:0.999917
a	O	O:0.999990
`	O	O:0.999951
raw	O	O:0.996324
`	O	O:0.999945
argument	O	O:0.996164
:	O	O:0.999965
#CODE	O	O:0.999756
	
My	O	O:0.999936
mistake	O	O:0.999952
you	O	O:0.999972
can	O	O:0.999996
pass	O	O:0.999985
that	O	O:0.999990
param	O	O:0.999979
on	O	O:0.999998
a	O	O:0.999993
groupby	B-API	B-API:0.972841
apply	O	O:0.519357
,	O	O:0.999857
could	O	O:0.999841
you	O	O:0.999998
post	O	O:0.999975
some	O	O:0.999996
sample	O	O:0.999985
data	O	O:0.999988
so	O	O:0.999996
I	O	O:0.999998
can	O	O:0.999984
see	O	O:0.999996
what	O	O:0.999998
your	O	O:0.999931
df	O	O:0.999892
looks	O	O:0.999995
like	O	O:0.999989
prior	O	O:0.999935
to	O	O:0.999996
the	O	O:0.999996
groupby	B-API	B-API:0.993286
	
@USER	O	O:0.999007
So	O	O:0.999980
if	O	O:0.999991
you	O	O:0.999935
reset_index	B-API	B-API:0.983403
and	O	O:0.999998
then	O	O:0.999868
do	O	O:0.999961
groupby	B-API	B-API:0.975999
and	O	O:0.999915
apply	O	B-API:0.696616
does	O	O:0.993596
it	O	O:0.999966
work	O	O:0.999911
?	O	O:0.999985
	
Suppose	O	O:0.999554
I	O	O:0.999995
want	O	O:0.999989
to	O	O:0.999945
calculate	O	O:0.999937
how	O	O:0.999998
many	O	O:0.999988
days	O	O:0.999931
ago	O	O:0.999992
each	O	O:0.999629
observation	O	O:0.999492
occurred	O	O:0.999761
,	O	O:0.999973
and	O	O:0.999989
return	O	O:0.999782
that	O	O:0.999836
as	O	O:0.999999
a	O	O:0.999990
simple	O	O:0.996921
integer	O	O:0.997004
.	O	O:0.999644
	
I	O	O:0.999991
know	O	O:0.999946
I	O	O:0.999959
can	O	O:0.999995
just	O	O:0.999948
use	O	O:0.999990
`	O	O:0.999918
apply	O	B-API:0.976745
`	O	O:0.999982
twice	O	O:0.996495
,	O	O:0.999994
but	O	O:0.999764
is	O	O:0.999993
there	O	O:0.999963
a	O	O:0.999996
vectorized	O	O:0.998690
/	O	O:0.999959
cleaner	O	O:0.999293
way	O	O:0.999971
to	O	O:0.999976
do	O	O:0.999996
it	O	O:0.999981
?	O	O:0.999957
	
#CODE	O	O:0.998453
	
I	O	O:0.999986
think	O	O:0.999956
you	O	O:0.999976
want	O	O:0.999987
to	O	O:0.999986
use	O	O:0.999999
the	O	O:0.999866
`	O	O:0.999950
apply	O	B-API:0.996969
`	O	O:0.999977
method	O	O:0.999733
of	O	O:0.999995
the	O	O:0.999873
**	O	O:0.999992
DataFrame**	O	O:0.999461
,	O	O:0.999996
using	O	O:0.999954
axis	O	O:0.999237
=	O	O:0.999438
1	O	O:0.999920
,	O	O:0.999977
e.g.	O	O:0.999247
df.apply	B-API	B-API:0.990928
(	O	O:0.999988
lambda	O	O:0.999019
row	O	O:0.999619
:	O	O:0.999985
print	O	O:0.999904
row	O	O:0.999959
,	O	O:0.999988
axis=1	O	O:0.999344
)	O	O:0.999937
.	O	O:0.999740
	
This	O	O:0.999018
method	O	O:0.999973
will	O	O:0.999978
generate	O	O:0.999987
a	O	O:0.999997
series	O	O:0.999917
,	O	O:0.999993
which	O	O:0.999981
you	O	O:0.999984
could	O	O:0.999995
add	O	O:0.999995
to	O	O:0.999999
your	O	O:0.999955
**	O	O:0.999982
DataFrame**	O	O:0.999176
.	O	O:0.999879
	
I'll	O	O:0.998169
write	O	O:0.999977
this	O	O:0.999848
up	O	O:0.999995
into	O	O:0.999886
an	O	O:0.999984
answer	O	O:0.999773
for	O	O:0.999938
you	O	O:0.999625
.	O	O:0.999904
	
You	O	O:0.999952
can	O	O:0.999913
use	O	O:0.999996
the	O	O:0.999920
`	O	O:0.999940
apply	O	B-API:0.997520
`	O	O:0.999978
method	O	O:0.999738
of	O	O:0.999987
the	O	O:0.999974
DataFrame	B-API	O:0.998030
,	O	O:0.999996
using	O	O:0.999906
`	O	O:0.999936
axis	O	O:0.998913
=	O	O:0.999944
1	O	O:0.999829
`	O	O:0.999979
to	O	O:0.999989
work	O	O:0.999999
on	O	O:0.999999
each	O	O:0.999982
row	O	O:0.999993
of	O	O:0.999980
the	O	O:0.999981
DataFrame	B-API	O:0.998044
to	O	O:0.999988
build	O	O:0.999995
a	O	O:0.999996
Series	O	O:0.999287
with	O	O:0.999953
the	O	O:0.999972
same	O	O:0.999847
Index	O	O:0.988113
.	O	O:0.999905
	
pandas	O	O:0.999386
groupby	B-API	B-API:0.884036
add	O	O:0.999861
column	O	O:0.999918
from	O	O:0.999967
apply	O	B-API:0.513274
operation	O	O:0.998369
	
Awesome	O	O:0.999732
,	O	O:0.999997
a	O	O:0.999988
`	O	O:0.999905
transform()	B-API	B-API:0.999657
`	O	O:0.999985
was	O	O:0.999510
exactly	O	O:0.999992
what	O	O:0.999898
I	O	O:0.999992
needed	O	O:0.999945
!	O	O:0.999636
	
But	O	O:0.999944
do	O	O:0.999958
you	O	O:0.999989
mind	O	O:0.999959
explaining	O	O:0.999879
what's	O	O:0.999699
the	O	O:0.999972
difference	O	O:0.999777
between	O	O:0.998287
`	O	O:0.999992
transform	O	B-API:0.977681
`	O	O:0.999961
and	O	O:0.999787
`	O	O:0.999995
apply	O	B-API:0.996734
`	O	O:0.999861
?	O	O:0.998938
	
`	O	O:0.999959
apply	O	B-API:0.970934
`	O	O:0.999956
we	O	O:0.999880
will	O	O:0.999973
work	O	O:0.999984
just	O	O:0.999970
fine	O	O:0.999954
too	O	O:0.999723
.	O	O:0.999952
	
If	O	O:0.999976
you	O	O:0.999976
replace	O	O:0.998344
`	O	O:0.999997
transform	O	B-API:0.928392
`	O	O:0.999993
with	O	O:0.998713
`	O	O:0.999994
apply	O	B-API:0.961388
`	O	O:0.999956
,	O	O:0.999917
you	O	O:0.999992
should	O	O:0.999969
get	O	O:0.999993
the	O	O:0.999999
same	O	O:0.999860
output	O	O:0.999457
.	O	O:0.999932
	
`	O	O:0.999971
apply	O	B-API:0.974725
`	O	O:0.999807
is	O	O:0.999745
the	O	O:0.999985
more	O	O:0.996105
general	O	O:0.997844
method	O	O:0.999919
;	O	O:0.999947
`	O	O:0.999990
transform	O	B-API:0.889300
`	O	O:0.999980
is	O	O:0.999977
appropriate	O	O:0.999991
when	O	O:0.999820
you	O	O:0.999997
want	O	O:0.999991
to	O	O:0.999993
return	O	O:0.999992
something	O	O:0.999878
like	O	O:0.999803
indexed	O	O:0.999920
.	O	O:0.999880
	
I	O	O:0.999952
tried	O	O:0.999977
creating	O	O:0.999589
a	O	O:0.999754
function	O	O:0.999869
that	O	O:0.999885
would	O	O:0.999993
filter	O	O:0.998988
on	O	O:0.999999
table	O	O:0.999942
B	O	O:0.999956
and	O	O:0.999999
then	O	O:0.999942
using	O	O:0.999981
apply	O	O:0.523558
like	O	O:0.991981
below	O	O:0.997975
.	O	O:0.999840
	
#CODE	O	O:0.998453
	
For	O	O:0.999896
comparison	O	O:0.999135
,	O	O:0.999991
here's	O	O:0.999860
the	O	O:0.999985
timeit	O	O:0.996455
of	O	O:0.999978
`	O	O:0.999981
apply	O	B-API:0.839277
`	O	O:0.999969
on	O	O:0.999833
the	O	O:0.999997
same	O	O:0.999820
frames	O	O:0.996489
:	O	O:0.999987
#CODE	O	O:0.999920
	
I	O	O:0.999982
know	O	O:0.999925
how	O	O:0.999961
to	O	O:0.999996
create	O	O:0.999999
a	O	O:0.999999
new	O	O:0.999948
column	O	O:0.999947
with	O	O:0.999899
`	O	O:0.999988
apply	O	B-API:0.917985
`	O	O:0.999965
or	O	O:0.999045
`	O	O:0.999980
np.where	B-API	B-API:0.990281
`	O	O:0.999997
based	O	O:0.999178
on	O	O:0.999998
the	O	O:0.999996
values	O	O:0.999960
of	O	O:0.999993
another	O	O:0.999973
column	O	O:0.999873
,	O	O:0.999985
but	O	O:0.999996
a	O	O:0.999997
way	O	O:0.999954
of	O	O:0.999993
selectively	O	O:0.999604
changing	O	O:0.999941
the	O	O:0.999967
values	O	O:0.999778
of	O	O:0.999992
an	O	O:0.999998
existing	O	O:0.999962
column	O	O:0.998191
is	O	O:0.999993
escaping	O	O:0.999742
me	O	O:0.999945
;	O	O:0.999989
I	O	O:0.999977
suspect	O	O:0.999885
`	O	O:0.999908
df.ix	B-API	B-API:0.995748
`	O	O:0.999966
is	O	O:0.999752
involved	O	O:0.999453
?	O	O:0.999930
	
Am	O	O:0.999949
I	O	O:0.999985
close	O	O:0.999871
?	O	O:0.999861
	
When	O	O:0.999639
I	O	O:0.999998
apply	O	O:0.967340
a	O	O:0.999882
numeric	O	O:0.944597
function	O	O:0.999909
to	O	O:0.999991
the	O	O:1.000000
group	O	O:0.998760
,	O	O:0.999999
such	O	O:0.999973
as	O	O:0.999997
max()	B-API	B-API:0.997850
or	O	O:0.999945
mean()	B-API	O:0.678298
,	O	O:0.999995
I	O	O:0.999997
get	O	O:0.999987
a	O	O:0.999987
DataFrame	B-API	O:0.991890
with	O	O:0.999953
type	O	O:0.998580
`	O	O:0.999985
object	O	O:0.997158
`	O	O:0.999989
returned	O	O:0.996554
#CODE	O	O:0.999743
	
When	O	O:0.999857
I	O	O:0.999997
select	O	O:0.999836
only	O	O:0.999834
numeric	O	O:0.999882
columns	O	O:0.999871
first	O	O:0.999787
and	O	O:0.999999
then	O	O:0.999915
apply	O	O:0.937114
a	O	O:0.999989
numeric	O	O:0.943322
function	O	O:0.999925
to	O	O:0.999991
the	O	O:1.000000
group	O	O:0.998760
,	O	O:0.999999
such	O	O:0.999973
as	O	O:0.999997
max()	B-API	B-API:0.997850
or	O	O:0.999945
mean()	B-API	O:0.678298
,	O	O:0.999995
I	O	O:0.999997
get	O	O:0.999988
a	O	O:0.999988
DataFrame	B-API	O:0.997473
with	O	O:0.999977
a	O	O:0.999988
numeric	O	O:0.994865
type	O	O:0.998450
#CODE	O	O:0.999759
	
More	O	O:0.999840
generally	O	O:0.999781
,	O	O:0.999997
if	O	O:0.999987
you	O	O:0.999995
want	O	O:0.999987
to	O	O:0.999997
transform	O	O:0.994439
the	O	O:0.999997
groups	O	O:0.999848
of	O	O:0.999998
a	O	O:0.999964
`	O	O:0.999977
GroupBy	B-API	B-API:0.918424
`	O	O:0.999974
object	O	O:0.999369
with	O	O:0.999980
any	O	O:0.999989
arbitrary	O	O:0.999256
function	O	O:0.999896
,	O	O:0.999957
use	O	O:0.999957
the	O	O:0.999903
methods	O	O:0.999323
apply	O	O:0.628604
,	O	O:0.999963
transform	O	B-API:0.589455
,	O	O:0.999982
or	O	O:0.999984
filter	O	O:0.984504
.	O	O:0.999932
	
See	O	O:0.999811
the	O	O:0.999946
docs	O	O:0.999743
linked	O	O:0.999899
by	O	O:0.999992
Jeff	O	O:0.999933
above	O	O:0.999716
to	O	O:0.999975
understand	O	O:0.999989
the	O	O:0.999978
distinctions	O	O:0.998780
between	O	O:0.999411
these	O	O:0.999952
three	O	O:0.999485
.	O	O:0.999852
	
i've	O	O:0.998134
had	O	O:0.999903
no	O	O:0.999981
success	O	O:0.999908
using	O	O:0.999929
transform	O	B-API:0.810175
,	O	O:0.999926
apply	O	O:0.601609
,	O	O:0.999931
or	O	O:0.999987
aggregate	O	B-API:0.583563
to	O	O:0.999983
accomplish	O	O:0.999976
my	O	O:0.999970
goal	O	O:0.998498
.	O	O:0.999928
	
:-/	O	O:0.998836
	
@USER	O	O:0.999422
or	O	O:0.999995
maybe	O	O:0.999959
a	O	O:0.999997
nested	O	O:0.992062
`	O	O:0.999985
apply	O	B-API:0.991450
`	O	O:0.999860
0_o	O	O:0.991024
	
Though	O	O:0.999973
some	O	O:0.999879
locations	O	O:0.999888
has	O	O:0.999887
4	O	O:0.999991
non	O	O:0.999947
nan	O	O:0.999376
values	O	O:0.999763
,	O	O:0.999996
the	O	O:0.999999
whole	O	O:0.999825
process	O	O:0.998284
is	O	O:0.999993
stopped	O	O:0.998664
,	O	O:0.999985
saying	O	O:0.999848
the	O	O:0.999771
'	O	O:0.999963
cubic	O	O:0.982170
'	O	O:0.999922
method	O	O:0.999971
requires	O	O:0.999775
at	O	O:0.999998
least	O	O:0.999445
4	O	O:0.999988
non	O	O:0.999778
nan	O	O:0.997974
values	O	O:0.999391
.	O	O:0.999855
	
How	O	O:0.999848
can	O	O:0.999881
I	O	O:1.000000
make	O	O:0.999858
it	O	O:0.999984
conditional	O	O:0.999547
to	O	O:0.999992
apply	O	O:0.926386
the	O	O:0.999560
'	O	O:0.999921
cubic	O	O:0.982390
'	O	O:0.999964
method	O	O:0.999970
to	O	O:0.999997
change	O	O:0.999993
values	O	O:0.999555
for	O	O:0.999989
those	O	O:0.999986
locations	O	O:0.999594
which	O	O:0.999927
can	O	O:0.999966
run	O	O:0.999926
'	O	O:0.999996
cubic	O	O:0.982612
'	O	O:0.999910
method	O	O:0.999829
?	O	O:0.999947
	
But	O	O:0.999887
it	O	O:0.999904
is	O	O:0.999995
extremely	O	O:0.999694
slow	O	O:0.998939
.	O	O:0.999826
	
Would	O	O:0.999473
it	O	O:0.999991
be	O	O:0.999996
quicker	O	O:0.999944
to	O	O:0.999951
do	O	O:1.000000
this	O	O:0.999775
in	O	O:0.999994
list	O	O:0.999657
comprehension	O	O:0.999928
,	O	O:0.999996
or	O	O:0.999994
with	O	O:0.999967
an	O	O:0.999994
apply	O	B-API:0.702672
function	O	O:0.998981
?	O	O:0.999783
	
What	O	O:0.997387
is	O	O:0.999988
best	O	O:0.999735
practice	O	O:0.999748
for	O	O:0.999974
this	O	O:0.999889
kind	O	O:0.999953
of	O	O:0.999978
operation	O	O:0.998992
?	O	O:0.999979
	
For	O	O:0.999899
the	O	O:0.999960
aggregation	O	O:0.999369
methods	O	O:0.999643
,	O	O:0.999970
the	O	O:0.999990
list	O	O:0.983038
is	O	O:0.999984
fairly	O	O:0.999882
short	O	O:0.999937
so	O	O:0.999981
I	O	O:0.999990
can	O	O:0.999989
easily	O	O:0.999994
make	O	O:0.999961
a	O	O:0.999997
list	O	O:0.999019
of	O	O:0.999975
`	O	O:0.999969
if	O	O:0.997320
`	O	O:0.999983
statements	O	O:0.997271
.	O	O:0.999933
	
However	O	O:0.999911
,	O	O:0.999997
by	O	O:0.999975
definition	O	O:0.999893
the	O	O:0.999923
`	O	O:0.999983
apply	O	B-API:0.976501
`	O	O:0.999885
`	O	O:0.999904
lambda	O	O:0.999168
`	O	O:0.999982
functions	O	O:0.997086
are	O	O:0.999994
bespoke	O	O:0.999754
for	O	O:0.999966
each	O	O:0.996236
definition	O	O:0.999017
.	O	O:0.999896
	
Here's	O	O:0.999569
an	O	O:0.999986
example	O	O:0.999653
which	O	O:0.999935
takes	O	O:0.999947
a	O	O:0.999999
couple	O	O:0.999677
of	O	O:0.999997
columns	O	O:0.999918
to	O	O:0.999997
derive	O	O:0.999989
a	O	O:0.999981
percentage	O	O:0.987729
:	O	O:0.999953
#CODE	O	O:0.999895
	
While	O	O:0.999901
this	O	O:0.999807
works	O	O:0.999945
,	O	O:0.999999
iterating	O	O:0.999920
over	O	O:0.999466
columns	O	O:0.999701
feels	O	O:0.999959
like	O	O:0.999952
it	O	O:0.999996
goes	O	O:0.999750
against	O	O:0.999975
the	O	O:0.999987
spirit	O	O:0.999658
of	O	O:0.999973
python	O	O:0.999523
and	O	O:0.999991
`	O	O:0.999989
numpy	O	O:0.975311
`	O	O:0.999975
.	O	O:0.999272
	
Is	O	O:0.999985
there	O	O:0.999977
a	O	O:0.999998
more	O	O:0.999374
natural	O	O:0.999259
way	O	O:0.999807
I'm	O	O:0.999926
not	O	O:0.999967
seeing	O	O:0.999687
?	O	O:0.999872
	
I	O	O:0.999917
would	O	O:0.999994
normally	O	O:0.999877
use	O	O:0.999987
`	O	O:0.999892
apply	O	B-API:0.991645
`	O	O:0.999740
,	O	O:0.999775
but	O	O:0.999986
I	O	O:0.999981
don't	O	O:0.999985
know	O	O:0.999698
how	O	O:0.999991
to	O	O:0.999976
use	O	O:0.999996
`	O	O:0.999939
apply	O	B-API:0.992236
`	O	O:0.999914
and	O	O:0.999953
still	O	O:0.999933
get	O	O:0.999900
the	O	O:0.999993
unique	O	O:0.827729
population	O	O:0.999889
value	O	O:0.999934
for	O	O:0.999997
each	O	O:0.998904
row	O	O:0.999535
.	O	O:0.999865
	
What's	O	O:0.999859
the	O	O:0.999969
correct	O	O:0.999791
way	O	O:0.999985
to	O	O:0.999995
apply	O	O:0.949380
`	O	O:0.999877
zscore	O	B-API:0.780367
`	O	O:0.999975
(	O	O:0.999942
or	O	O:0.999998
an	O	O:0.999989
equivalent	O	O:0.997780
function	O	O:0.999959
not	O	O:0.999991
from	O	O:0.999993
scipy	O	O:0.999861
)	O	O:0.999996
to	O	O:0.999994
a	O	O:1.000000
column	O	O:0.999909
of	O	O:0.999997
a	O	O:0.999990
pandas	O	O:0.999677
dataframe	B-API	O:0.996468
and	O	O:0.999992
have	O	O:0.999968
it	O	O:0.999969
ignore	O	O:0.999399
the	O	O:0.999977
`	O	O:0.999972
nan	O	O:0.979196
`	O	O:0.999998
values	O	O:0.998164
?	O	O:0.999969
	
I'd	O	O:0.999962
like	O	O:0.999945
it	O	O:0.999996
to	O	O:0.999995
be	O	O:1.000000
same	O	O:0.999992
dimension	O	O:0.999941
as	O	O:0.999999
original	O	O:0.999828
column	O	O:0.999956
with	O	O:0.999717
`	O	O:0.999984
np.nan	O	O:0.985692
`	O	O:0.999998
for	O	O:0.999962
values	O	O:0.999801
that	O	O:0.999691
can't	O	O:0.999985
be	O	O:0.999997
normalized	O	O:0.999712
	
Iterate	O	O:0.998564
and	O	O:0.999984
apply	O	B-API:0.635175
function	O	O:0.999636
over	O	O:0.999005
level	O	O:0.995884
(	O	O:0.999990
s	O	O:0.999956
)	O	O:0.999983
of	O	O:0.999950
MultiIndex	O	O:0.973621
dropping	O	O:0.999688
the	O	O:0.999962
iteration	O	O:0.999916
level	O	O:0.999162
	
Can't	O	O:0.999678
you	O	O:0.999993
just	O	O:0.999987
apply	O	O:0.966574
a	O	O:0.999940
lambda	O	O:0.997916
that	O	O:0.999902
strips	O	O:0.999736
out	O	O:0.999983
the	O	O:0.999932
first	O	O:0.999761
index	O	O:0.999931
level	O	O:0.999388
?	O	O:0.999979
	
Agree	O	O:0.999791
that	O	O:0.999233
A	O	O:0.999994
and	O	O:0.999991
B	O	O:0.999876
are	O	O:0.999957
all	O	O:0.999849
in	O	O:0.999940
memory	O	O:0.999204
.	O	O:0.999889
	
I	O	O:0.999931
am	O	O:0.999998
reading	O	O:0.999273
a	O	O:0.999982
file	O	O:0.988695
(	O	O:0.999996
.csv	O	O:0.998251
)	O	O:0.999986
into	O	O:0.999229
memory	O	O:0.999937
performing	O	O:0.999180
the	O	O:0.999873
rename	O	O:0.993290
and	O	O:0.999997
only	O	O:0.999986
then	O	O:0.999839
saving	O	O:0.999967
it	O	O:0.999972
to	O	O:0.999993
HDF5	O	O:0.999944
.	O	O:0.999820
	
As	O	O:0.999982
soon	O	O:0.999877
as	O	O:0.999998
I	O	O:0.999982
apply	O	O:0.838482
the	O	O:0.995105
rename	O	O:0.986506
method	O	O:0.999938
to	O	O:0.999991
the	O	O:1.000000
frame	O	O:0.999983
,	O	O:0.999998
it	O	O:0.999997
doubles	O	O:0.999911
the	O	O:0.999974
output	O	O:0.999827
size	O	O:0.999568
.	O	O:0.999848
	
If	O	O:0.999971
I	O	O:0.999994
omit	O	O:0.999924
the	O	O:0.999694
rename	O	O:0.994905
method	O	O:0.999929
the	O	O:0.999993
file	O	O:0.999933
size	O	O:0.999369
is	O	O:0.999987
half	O	O:0.998792
.	O	O:0.999871
	
Since	O	O:0.999917
all	O	O:0.999957
operations	O	O:0.999884
are	O	O:0.999985
performed	O	O:0.999811
in	O	O:0.999984
memory	O	O:0.999894
with	O	O:0.999959
the	O	O:0.999985
writing	O	O:0.999613
to	O	O:0.999959
HDF	O	O:0.999999
only	O	O:0.999981
happening	O	O:0.999913
at	O	O:0.999994
the	O	O:0.999982
end	O	O:0.999905
,	O	O:0.999985
I	O	O:0.999984
can't	O	O:0.999984
seem	O	O:0.999782
to	O	O:0.999996
understand	O	O:0.999990
why	O	O:0.999982
the	O	O:0.999690
rename	O	O:0.997228
method	O	O:0.999830
would	O	O:0.999990
seem	O	O:0.999993
to	O	O:0.999998
cause	O	O:0.999989
the	O	O:0.999996
frame	O	O:0.999992
to	O	O:0.999991
double	O	O:0.999535
in	O	O:0.999984
size	O	O:0.999790
and	O	O:0.999999
thus	O	O:0.999981
create	O	O:0.999897
a	O	O:0.999996
double-sized	O	O:0.997641
HDF	O	O:0.999894
file	O	O:0.999467
.	O	O:0.999839
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999918
to	O	O:0.999983
do	O	O:1.000000
this	O	O:0.999952
without	O	O:0.999902
the	O	O:0.999951
for	O	O:0.999967
loop	O	O:0.999668
or	O	O:0.999994
using	O	O:0.999934
where	O	O:0.997723
(	O	O:0.999951
)	O	O:0.999996
or	O	O:0.999946
apply	O	B-API:0.824853
(	O	O:0.999962
)	O	O:0.999922
functions	O	O:0.999400
.	O	O:0.999817
	
`	O	O:0.999959
apply	O	B-API:0.989563
`	O	O:0.999916
should	O	O:0.999413
work	O	O:0.999995
well	O	O:0.999973
for	O	O:0.999988
you	O	O:0.998563
:	O	O:0.999960
#CODE	O	O:0.999909
	
It	O	O:0.999987
just	O	O:0.999943
depends	O	O:0.999950
on	O	O:0.999981
how	O	O:0.999971
you	O	O:0.999998
want	O	O:0.999982
to	O	O:0.999995
treat	O	O:0.999976
NaNs	O	O:0.999764
.	O	O:0.999880
	
If	O	O:0.999950
you	O	O:0.999974
return	O	O:0.999605
`	O	O:0.999986
NaN	O	O:0.985953
`	O	O:0.999999
when	O	O:0.997196
`	O	O:0.999997
row	O	O:0.999846
[	O	O:0.999973
'	O	O:0.999967
C	O	O:0.999864
']`	O	O:0.999653
is	O	O:0.999838
`	O	O:0.999955
NaN	O	O:0.979595
`	O	O:0.999995
,	O	O:0.999993
then	O	O:0.999945
you	O	O:0.999996
won't	O	O:0.999997
even	O	O:0.999984
need	O	O:0.999999
this	O	O:0.999988
case	O	O:0.999984
,	O	O:0.999998
since	O	O:0.999792
`	O	O:0.999987
x	O	O:0.999917
*	O	O:0.999996
NaN	O	O:0.998316
`	O	O:0.999926
is	O	O:0.999547
`	O	O:0.999982
NaN	O	O:0.946670
`	O	O:0.999972
.	O	O:0.999199
	
If	O	O:0.999964
you	O	O:0.999989
want	O	O:0.999970
to	O	O:0.999998
return	O	O:0.999977
0	O	O:0.999925
,	O	O:0.999997
you	O	O:0.999979
can	O	O:0.999991
do	O	O:1.000000
a	O	O:0.999999
`	O	O:0.999570
fillna	B-API	B-API:0.996235
(	O	O:0.999983
0	O	O:0.999974
)`	O	O:0.999655
after	O	O:0.999568
`	O	O:0.999980
apply	O	B-API:0.990652
`	O	O:0.999958
ing	O	O:0.887169
`	O	O:0.999982
fund	O	O:0.740352
`	O	O:0.999968
.	O	O:0.999365
	
Also	O	O:0.999810
,	O	O:0.999989
for	O	O:0.999994
various	O	O:0.999351
reasons	O	O:0.996815
`	O	O:0.999979
np.nan	O	O:0.958415
==	O	O:0.999983
np.nan	O	O:0.995296
`	O	O:0.999933
is	O	O:0.999871
*	O	O:0.999994
always	O	O:0.999586
*	O	O:0.999992
False	O	O:0.999337
,	O	O:0.999991
so	O	O:0.999999
your	O	O:0.999853
way	O	O:0.999836
wouldn't	O	O:0.999959
quite	O	O:0.999878
work	O	O:0.999803
.	O	O:0.999936
	
Pandas	O	O:0.999459
gives	O	O:0.999716
the	O	O:0.999922
`	O	O:0.999943
pd.isnull	B-API	B-API:0.998271
`	O	O:0.999977
function	O	O:0.999751
to	O	O:0.999998
check	O	O:0.999989
for	O	O:0.999981
NaNs	O	O:0.998316
.	O	O:0.999671
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
I	O	O:0.999985
actually	O	O:0.999990
have	O	O:0.999845
two	O	O:0.999944
indices	O	O:0.998556
(	O	O:0.999989
one	O	O:0.999971
is	O	O:0.999984
`	O	O:0.999992
datetime	O	O:0.980026
`	O	O:0.999985
,	O	O:0.999956
the	O	O:0.999997
other	O	O:0.999895
one	O	O:0.999944
is	O	O:0.999997
a	O	O:0.999993
string	O	O:0.998209
)	O	O:0.999931
.	O	O:0.999735
	
Is	O	O:0.999903
`	O	O:0.999965
to_datetime()	B-API	B-API:0.999648
`	O	O:0.999996
an	O	O:0.998472
`	O	O:0.999992
Index	O	B-API:0.590560
`	O	O:0.999939
method	O	O:0.999045
??	O	O:0.999964
	
If	O	O:0.999972
so	O	O:0.999979
,	O	O:0.999996
how	O	O:0.999982
can	O	O:0.999962
I	O	O:1.000000
apply	O	O:0.963048
it	O	O:0.999753
to	O	O:0.999995
only	O	O:1.000000
one	O	O:0.999998
of	O	O:0.999983
the	O	O:0.999987
index	O	O:0.999955
levels	O	O:0.999714
?	O	O:0.999974
	
Apply	O	O:0.999761
resampling	O	O:0.997995
to	O	O:0.999967
each	O	O:0.999995
group	O	O:0.999212
in	O	O:0.999998
a	O	O:0.999973
groupby	B-API	B-API:0.997995
object	O	O:0.999233
	
And	O	O:0.999907
I	O	O:0.999980
would	O	O:0.999996
like	O	O:0.999939
to	O	O:0.999998
apply	O	O:0.992561
this	O	O:0.998721
function	O	O:0.999905
to	O	O:0.999996
every	O	O:0.999997
dataframe	B-API	O:0.999150
in	O	O:0.999996
a	O	O:0.999990
groupby	B-API	B-API:0.995503
object	O	O:0.999852
with	O	O:0.999962
something	O	O:0.999973
like	O	O:0.999930
the	O	O:0.999984
following	O	O:0.994477
:	O	O:0.999912
#CODE	O	O:0.999803
	
How	O	O:0.999932
do	O	O:0.999971
I	O	O:1.000000
create	O	O:0.999896
functions	O	O:0.999933
like	O	O:0.999965
the	O	O:0.999993
above	O	O:0.999515
and	O	O:0.999994
have	O	O:0.999999
them	O	O:0.999905
properly	O	O:0.999989
apply	O	O:0.817226
to	O	O:0.999983
a	O	O:0.999994
groupby	B-API	B-API:0.998341
object	O	O:0.999599
?	O	O:0.999838
	
am	O	O:0.999897
i	O	O:0.999988
just	O	O:0.999962
using	O	O:0.999979
pandas	O	O:0.999544
incredibly	O	O:0.999399
badly	O	O:0.999139
?	O	O:0.999855
	
i	O	O:0.999757
am	O	O:0.999994
used	O	O:0.999742
to	O	O:0.999992
being	O	O:0.999992
able	O	O:0.999861
to	O	O:0.999947
groupby	B-API	B-API:0.838481
and	O	O:0.999992
apply	O	O:0.637031
a	O	O:0.999806
transformation	O	O:0.998147
without	O	O:0.999865
difficulty	O	O:0.998600
.	O	O:0.999605
	
am	O	O:0.999933
i	O	O:0.999971
supposed	O	O:0.999984
to	O	O:0.999992
do	O	O:0.999999
things	O	O:0.999963
differently	O	O:0.999668
for	O	O:0.999998
this	O	O:0.999606
application	O	O:0.999894
for	O	O:0.999995
some	O	O:0.999041
reason	O	O:0.999312
?	O	O:0.999962
	
Now	O	O:0.999904
,	O	O:0.999997
you	O	O:0.999985
can	O	O:0.999982
apply	O	O:0.988228
interpolation	O	O:0.999967
methods	O	O:0.999725
on	O	O:0.999985
the	O	O:0.999983
`	O	O:0.999983
NaN	O	O:0.985901
`	O	O:0.999999
values	O	O:0.999654
as	O	O:0.999997
described	O	O:0.999518
in	O	O:0.999975
the	O	O:0.999958
docs	O	O:0.999163
.	O	O:0.999860
	
To	O	O:0.999971
apply	O	O:0.708717
to	O	O:0.999984
a	O	O:0.999998
groupby	B-API	B-API:0.968687
then	O	O:0.999907
you	O	O:0.999997
can	O	O:0.999990
do	O	O:0.999999
this	O	O:0.999863
:	O	O:0.999973
#CODE	O	O:0.999865
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
What	O	O:0.999742
if	O	O:0.999996
want	O	O:0.999975
to	O	O:0.999985
apply	O	O:0.995889
the	O	O:0.999881
result	O	O:0.999779
within	O	O:0.999942
a	O	O:0.999997
group	O	O:0.995548
,	O	O:0.999994
respecting	O	O:0.999807
the	O	O:0.999990
boundaries	O	O:0.999855
of	O	O:0.999991
the	O	O:0.999983
group	O	O:0.998119
?	O	O:0.999940
	
Sorry	O	O:0.999032
for	O	O:0.999970
the	O	O:0.999984
last	O	O:0.996321
minute	O	O:0.999196
twist	O	O:0.998488
,	O	O:0.999966
but	O	O:0.999934
it	O	O:0.999988
turns	O	O:0.999861
out	O	O:0.999995
that	O	O:0.999925
I	O	O:0.999999
need	O	O:0.999991
to	O	O:0.999990
make	O	O:0.999994
sure	O	O:0.999940
this	O	O:0.999869
happens	O	O:0.999745
.	O	O:0.999899
	
Problem	O	O:0.998340
is	O	O:0.999973
I	O	O:0.999980
cannot	O	O:0.999989
specify	O	O:0.996374
the	O	O:0.999990
index	O	O:0.999641
position	O	O:0.999876
inside	O	O:0.999958
the	O	O:0.999976
ix	O	B-API:0.953484
function	O	O:0.999966
as	O	O:0.999991
I	O	O:0.999996
plan	O	O:0.999868
to	O	O:0.999984
iterate	O	O:0.999998
by	O	O:0.999988
row	O	O:0.999984
using	O	O:0.999831
apply	O	B-API:0.974635
function	O	O:0.992538
.	O	O:0.999182
	
Any	O	O:0.999589
suggestion	O	O:0.999198
?	O	O:0.999916
	
#CODE	O	O:0.998453
	
Thanks	O	O:0.999168
Jeff	O	O:0.999233
,	O	O:0.999979
it	O	O:0.999983
sounds	O	O:0.999922
like	O	O:0.999992
this	O	O:0.999918
is	O	O:0.999999
a	O	O:0.999986
question	O	O:0.998017
for	O	O:0.999946
Enthought	O	O:0.996581
.	O	O:0.999284
	
I've	O	O:0.999413
been	O	O:0.999851
able	O	O:0.999980
to	O	O:0.999998
work	O	O:0.999976
around	O	O:0.999975
the	O	O:0.999990
problem	O	O:0.999746
for	O	O:0.999987
now	O	O:0.999978
by	O	O:0.999989
using	O	O:0.999881
`	O	O:0.999691
apply	O	B-API:0.996502
`	O	O:0.999688
,	O	O:0.999570
but	O	O:0.999975
am	O	O:0.999986
still	O	O:0.999752
concerned	O	O:0.999735
.	O	O:0.999897
	
Try	O	O:0.999475
"	O	O:0.999953
Apply	O	O:0.999002
completion	O	O:0.999484
on	O	O:0.999951
.	O	O:0.999894
	
"	O	O:0.999931
or	O	O:0.999981
try	O	O:0.999978
to	O	O:0.999998
play	O	O:0.999991
with	O	O:0.999876
"	O	O:0.999989
AutoCompletion	O	O:0.999697
delay	O	O:0.999684
"	O	O:0.999930
.	O	O:0.999584
	
I	O	O:0.999989
need	O	O:0.999933
a	O	O:0.999982
method	O	O:0.999971
to	O	O:0.999991
get	O	O:0.999999
the	O	O:0.999998
selected	O	O:0.999800
features	O	O:0.998207
,	O	O:0.999833
(	O	O:0.999985
and	O	O:0.999995
preferably	O	O:0.999989
something	O	O:0.999939
to	O	O:0.999989
drop	O	O:0.999574
the	O	O:0.999993
unselected	O	O:0.999778
ones	O	O:0.999737
,	O	O:0.999995
for	O	O:0.999999
when	O	O:0.999679
I	O	O:0.999994
apply	O	O:0.969674
the	O	O:0.998673
models	O	O:0.988807
and	O	O:0.999994
selected	O	O:0.999947
features	O	O:0.999058
on	O	O:0.999985
new	O	O:0.999778
"	O	O:0.999997
test	O	O:0.997540
"	O	O:0.999999
data	O	O:0.999695
)	O	O:0.999974
.	O	O:0.999871
	
Hi	O	O:0.999804
Gank	O	O:0.996349
.	O	O:0.999835
	
The	O	O:0.999842
"	O	O:0.999982
field	O	O:0.998555
"	O	O:0.999940
was	O	O:0.999889
supposed	O	O:0.999962
to	O	O:0.999996
show	O	O:0.999990
you	O	O:0.999991
can	O	O:0.999994
apply	O	O:0.992573
the	O	O:0.999933
"	O	O:0.999897
.values	B-API	B-API:0.999552
"	O	O:0.999951
method	O	O:0.999884
to	O	O:0.999995
various	O	O:0.999999
fields	O	O:0.999845
of	O	O:0.999981
the	O	O:0.999995
dataframe	B-API	O:0.999875
such	O	O:0.999965
as	O	O:1.000000
columns	O	O:0.999590
or	O	O:0.999998
a	O	O:0.999995
selected	O	O:0.999528
column	O	O:0.999678
.	O	O:0.999907
	
"	O	O:0.999879
.index	B-API	B-API:0.997613
"	O	O:0.999902
is	O	O:0.999969
an	O	O:0.999991
example	O	O:0.999948
of	O	O:0.999991
replacing	O	O:0.998344
"	O	O:0.999988
field	O	O:0.999030
"	O	O:0.999988
with	O	O:0.999897
an	O	O:0.999987
actual	O	O:0.999896
field	O	O:0.999928
that	O	O:0.999445
is	O	O:0.999998
available	O	O:0.999865
:)	O	O:0.999943
I	O	O:0.999962
guess	O	O:0.999978
that	O	O:0.999762
could	O	O:0.999993
be	O	O:0.999996
clearer	O	O:0.999841
...	O	O:0.998860
	
Well	O	O:0.999620
,	O	O:0.999997
you	O	O:0.999976
can	O	O:0.999974
avoid	O	O:0.999994
the	O	O:0.999985
apply	O	B-API:0.953822
and	O	O:0.999869
do	O	O:0.999803
it	O	O:0.999938
vectorized	O	O:0.997777
(	O	O:0.999976
I	O	O:0.999991
think	O	O:0.999951
that	O	O:0.999510
makes	O	O:0.999925
it	O	O:0.999998
a	O	O:0.999996
bit	O	O:0.999467
nicer	O	O:0.996530
):	O	O:0.999902
#CODE	O	O:0.999611
	
Actually	O	O:0.998452
it's	O	O:0.999774
not	O	O:0.999996
a	O	O:0.999999
complete	O	O:0.998171
duplicate	O	O:0.999960
...	O	O:0.999931
the	O	O:0.999983
question	O	O:0.997663
is	O	O:0.999982
asking	O	O:0.999645
specifically	O	O:0.999426
for	O	O:0.999924
Pandas	O	O:0.998578
.	O	O:0.999422
	
The	O	O:0.999943
response	O	O:0.999643
below	O	O:0.999633
shows	O	O:0.999918
how	O	O:0.999979
to	O	O:0.999997
assign	O	O:0.999985
an	O	O:0.999994
axis	O	O:0.999975
to	O	O:0.999998
a	O	O:1.000000
plot	O	O:0.995042
function	O	O:0.999992
call	O	O:0.999768
from	O	O:0.999861
`	O	O:0.999714
pandas.DataFrame.plot	B-API	B-API:0.996013
`	O	O:0.999973
which	O	O:0.999419
makes	O	O:0.999842
it	O	O:0.999997
possible	O	O:0.999956
to	O	O:0.999996
apply	O	O:0.968284
the	O	O:0.999508
`	O	O:0.999879
matplotlib.pyplot	B-API	B-API:0.822916
`	O	O:0.999994
refinements	O	O:0.998320
.	O	O:0.999937
	
Figured	O	O:0.999500
it	O	O:0.999959
out	O	O:0.999798
.	O	O:0.999926
	
Selecting	O	O:0.998804
out	O	O:0.999798
the	O	O:0.999986
Series	O	O:0.999209
in	O	O:0.999961
the	O	O:0.999986
Dataframe	B-API	O:0.998005
effectively	O	O:0.999829
allows	O	O:0.999974
me	O	O:0.999973
to	O	O:0.999977
assign	O	O:0.999950
to	O	O:0.999984
it	O	O:0.999998
and	O	O:0.999997
the	O	O:0.999995
original	O	O:0.998271
dataframe	B-API	O:0.996355
.	O	O:0.999987
this	O	O:0.999981
allows	O	O:0.999973
me	O	O:0.999990
to	O	O:0.999969
use	O	O:0.999998
the	O	O:0.999765
slicing	O	O:0.999605
syntac	O	O:0.999290
to	O	O:0.999991
apply	O	O:0.939434
logic	O	O:0.999561
influencing	O	O:0.999811
the	O	O:0.999694
results	O	O:0.996747
:	O	O:0.999955
#CODE	O	O:0.999909
	
Return	O	O:0.999679
multiple	O	O:0.999928
columns	O	O:0.999963
from	O	O:0.999933
apply	O	O:0.765627
pandas	O	O:0.997965
	
Is	O	O:0.999985
there	O	O:0.999977
anyway	O	O:0.999981
I	O	O:0.999993
can	O	O:0.999983
make	O	O:0.999993
this	O	O:0.999955
faster	O	O:0.999729
?	O	O:0.999944
	
For	O	O:0.999923
example	O	O:0.999803
,	O	O:0.999996
can	O	O:0.999980
I	O	O:1.000000
instead	O	O:0.999998
of	O	O:0.999990
returning	O	O:0.999834
one	O	O:0.999992
column	O	O:0.999974
at	O	O:0.999999
a	O	O:0.999996
time	O	O:0.999917
from	O	O:0.999848
apply	O	B-API:0.859737
and	O	O:0.999910
running	O	O:0.998996
it	O	O:0.999751
3	O	O:0.999968
times	O	O:0.999848
,	O	O:0.999997
can	O	O:0.999973
I	O	O:1.000000
return	O	O:0.999912
all	O	O:0.999947
three	O	O:0.999979
columns	O	O:0.999680
in	O	O:0.999995
one	O	O:0.999999
pass	O	O:0.999607
to	O	O:0.999998
insert	O	O:0.999995
back	O	O:0.999847
into	O	O:0.999836
the	O	O:0.999991
original	O	O:0.998663
dataframe	B-API	O:0.997798
?	O	O:0.999951
	
You	O	O:0.999853
could	O	O:0.999937
try	O	O:0.999994
using	O	O:0.999968
DataFrame's	O	O:0.992236
`	O	O:0.999892
apply	O	B-API:0.993103
`	O	O:0.999804
.	O	O:0.997999
	
Write	O	O:0.999908
a	O	O:0.999834
function	O	O:0.999708
that	O	O:0.999918
includes	O	O:0.999953
an	O	O:0.999985
exception	O	O:0.998416
handler	O	O:0.999734
and	O	O:0.999985
apply	O	O:0.764854
it	O	O:0.999592
to	O	O:0.999917
the	O	O:0.999998
DataFrame	B-API	O:0.984428
.	O	O:0.999877
	
#CODE	O	O:0.998453
	
you	O	O:0.999780
should	O	O:0.999961
avoid	O	O:0.999806
``	O	O:0.999986
apply	O	B-API:0.958394
``	O	O:0.999832
if	O	O:0.999831
you	O	O:0.999989
can	O	O:0.999984
vectorize	B-API	O:0.989543
,	O	O:0.999994
e.g	O	O:0.999661
``	O	O:0.999931
df	O	O:0.997511
[	O	O:0.999971
'	O	O:0.999994
diff	O	B-API:0.699898
']	O	O:0.999841
.where	B-API	B-API:0.998838
(	O	O:0.999952
df	O	O:0.999594
[	O	O:0.999930
'	O	O:0.999995
diff	O	B-API:0.534433
']	O	O:0.999941
.abs()	B-API	B-API:0.999669
>	O	O:0.999829
=	O	O:0.999874
0.3	O	O:0.998745
)``	O	O:0.999736
will	O	O:0.999508
be	O	O:0.999998
much	O	O:0.999743
faster	O	O:0.998449
	
The	O	O:0.999924
basic	O	O:0.999606
idea	O	O:0.999089
is	O	O:0.999969
to	O	O:0.999995
group	O	O:0.999991
data	O	O:0.999989
based	O	O:0.999872
on	O	O:0.999985
`'	O	O:0.999867
Localization	O	O:0.997431
'`	O	O:0.999922
and	O	O:0.999977
to	O	O:0.999994
apply	O	O:0.968517
a	O	O:0.999840
function	O	O:0.998894
on	O	O:0.999985
group	O	O:0.996834
.	O	O:0.999947
	
#CODE	O	O:0.998453
	
I	O	O:0.999937
would	O	O:0.999996
like	O	O:0.999913
to	O	O:1.000000
group	O	O:0.999988
a	O	O:0.999963
`	O	O:0.999928
DataFrame	B-API	O:0.952125
`	O	O:0.999999
then	O	O:0.999740
apply	O	O:0.872205
`	O	O:0.999964
myfunc	O	O:0.778050
`	O	O:0.999998
along	O	O:0.999851
columns	O	O:0.999941
of	O	O:0.999976
each	O	O:0.999842
individual	O	O:0.999715
frame	O	O:0.999961
(	O	O:0.999963
in	O	O:0.999993
each	O	O:0.999891
group	O	O:0.998678
)	O	O:0.999987
and	O	O:0.999996
then	O	O:0.999977
paste	O	O:0.999887
together	O	O:0.999975
the	O	O:0.999965
results	O	O:0.999471
.	O	O:0.999875
	
There	O	O:0.999753
are	O	O:0.999985
hacky	O	O:0.999929
ways	O	O:0.999845
to	O	O:0.999977
do	O	O:0.999998
it	O	O:0.999970
,	O	O:0.999986
but	O	O:0.999988
I	O	O:0.999975
wonder	O	O:0.999863
it	O	O:0.999946
seems	O	O:0.999972
like	O	O:0.999976
there	O	O:0.999885
is	O	O:0.999997
some	O	O:0.999802
simple	O	O:0.999601
kwarg	O	O:0.999577
I'm	O	O:0.999918
missing	O	O:0.998422
.	O	O:0.999764
	
ok	O	O:0.999859
,	O	O:0.999987
revised	O	O:0.999924
the	O	O:0.999967
answer	O	O:0.999699
;	O	O:0.999992
you	O	O:0.999948
can	O	O:0.999996
do	O	O:0.999999
almost	O	O:0.999993
anything	O	O:0.999928
inside	O	O:0.999659
the	O	O:0.999958
apply	O	B-API:0.966343
FYI	O	O:0.996699
	
As	O	O:0.999978
far	O	O:0.999948
as	O	O:0.999994
the	O	O:0.999937
unpacking	O	O:0.999591
goes	O	O:0.999004
,	O	O:0.999998
maybe	O	O:0.999988
you	O	O:0.999986
could	O	O:0.999977
let	O	O:0.999989
the	O	O:0.999954
function	O	O:0.999974
take	O	O:0.999918
an	O	O:0.999996
argument	O	O:0.999976
for	O	O:0.999970
whether	O	O:0.999794
to	O	O:0.999983
add	O	O:0.999992
or	O	O:0.999993
subtract	O	O:0.995994
,	O	O:0.999990
and	O	O:0.999998
then	O	O:0.999766
apply	O	O:0.895651
it	O	O:0.999978
twice	O	O:0.999533
.	O	O:0.999961
	
You	O	O:0.999909
could	O	O:0.999946
perform	O	O:0.999942
a	O	O:0.999986
groupby	B-API	B-API:0.995045
/	O	O:0.999914
apply	O	B-API:0.945620
(	O	O:0.999901
shift	O	B-API:0.797963
)	O	O:0.999844
operation	O	O:0.996337
:	O	O:0.999965
#CODE	O	O:0.999829
	
The	O	O:0.999943
obvious	O	O:0.999630
way	O	O:0.999972
to	O	O:0.999991
find	O	O:0.999997
all	O	O:0.999996
such	O	O:0.999948
matches	O	O:0.999289
is	O	O:0.999967
to	O	O:0.999987
iterate	O	O:0.999991
over	O	O:0.999952
each	O	O:0.999223
row	O	O:0.999921
and	O	O:0.999996
apply	O	O:0.946876
a	O	O:0.999884
filter	O	O:0.926580
to	O	O:0.999996
the	O	O:1.000000
data	O	O:0.999903
frame	O	O:0.999956
:	O	O:0.999990
#CODE	O	O:0.999896
	
In	O	O:0.999915
Pandas	O	O:0.999795
,	O	O:0.999927
is	O	O:0.999993
there	O	O:0.999911
an	O	O:0.999997
easy	O	O:0.999865
way	O	O:0.999977
to	O	O:0.999991
apply	O	O:0.991696
a	O	O:0.999793
function	O	O:0.999856
only	O	O:0.999980
on	O	O:1.000000
columns	O	O:0.999987
of	O	O:0.999999
a	O	O:0.999993
specific	O	O:0.999775
type	O	O:0.998394
?	O	O:0.999947
	
What	O	O:0.999153
is	O	O:0.999991
an	O	O:0.999990
easy	O	O:0.999830
way	O	O:0.999976
to	O	O:0.999990
apply	O	O:0.991696
a	O	O:0.999793
function	O	O:0.999856
only	O	O:0.999980
on	O	O:1.000000
columns	O	O:0.999987
of	O	O:0.999999
a	O	O:0.999990
certain	O	O:0.999036
type	O	O:0.999221
?	O	O:0.999961
	
And	O	O:0.999936
now	O	O:0.999980
you	O	O:0.999992
can	O	O:0.999981
use	O	O:0.999999
that	O	O:0.999875
list	O	O:0.999777
with	O	O:0.999988
an	O	O:0.999990
apply	O	O:0.628443
or	O	O:0.999878
whatever	O	O:0.999432
.	O	O:0.999924
	
I'm	O	O:0.999955
trying	O	O:0.999940
to	O	O:0.999999
drop	O	O:0.999982
rows	O	O:0.999955
of	O	O:0.999996
a	O	O:0.999998
dataframe	B-API	O:0.999535
based	O	O:0.999838
on	O	O:0.999983
whether	O	O:0.999919
they	O	O:0.999965
are	O	O:0.999996
duplicates	O	O:0.999327
,	O	O:0.999955
and	O	O:0.999999
always	O	O:0.999986
keep	O	O:0.998718
the	O	O:0.999992
more	O	O:0.999930
recent	O	O:0.999833
of	O	O:0.999996
the	O	O:0.999994
rows	O	O:0.999361
.	O	O:0.999847
	
This	O	O:0.999537
would	O	O:0.999952
be	O	O:0.999999
simple	O	O:0.999986
using	O	O:0.999778
`	O	O:0.999850
df.drop_duplicates()	B-API	B-API:0.999841
`	O	O:0.999989
,	O	O:0.999971
however	O	O:0.999974
I	O	O:0.999997
also	O	O:0.999996
need	O	O:0.999972
to	O	O:0.999994
apply	O	O:0.996110
a	O	O:0.999907
`	O	O:0.999807
timedelta	O	O:0.898494
`	O	O:0.999974
.	O	O:0.999054
	
The	O	O:0.999896
row	O	O:0.999603
is	O	O:0.999989
to	O	O:0.999979
be	O	O:1.000000
considered	O	O:0.999992
a	O	O:0.999995
duplicate	O	O:0.999776
if	O	O:0.999989
the	O	O:0.999988
`	O	O:0.999968
EndDate	O	O:0.995174
`	O	O:0.999998
column	O	O:0.998513
is	O	O:0.999998
less	O	O:0.999411
than	O	O:0.999821
182	O	O:0.999972
days	O	O:0.999766
earlier	O	O:0.999894
than	O	O:0.999991
that	O	O:0.999992
of	O	O:1.000000
another	O	O:0.999948
row	O	O:0.999974
with	O	O:0.999850
the	O	O:0.999995
same	O	O:0.999730
ID	O	O:0.999454
.	O	O:0.999905
	
Groupby	B-API	O:0.845790
the	O	O:0.999864
'	O	O:0.999978
level	O	O:0.999705
'	O	O:0.999990
on	O	O:0.999993
the	O	O:0.999993
columns	O	O:0.999854
and	O	O:0.999997
apply	O	O:0.898480
f	O	O:0.998079
;	O	O:0.999939
don't	O	O:0.999545
use	O	O:0.999996
apply	O	O:0.523489
directly	O	O:0.979636
,	O	O:0.999866
but	O	O:0.999991
just	O	O:0.999779
concat	O	O:0.904240
the	O	O:0.999989
results	O	O:0.999986
as	O	O:0.999998
rows	O	O:0.995693
(	O	O:0.999998
this	O	O:0.999922
is	O	O:0.999994
the	O	O:0.999784
'	O	O:0.999975
unstacking	O	O:0.994400
'	O	O:0.999979
part	O	O:0.999770
)	O	O:0.999975
.	O	O:0.999890
	
(	O	O:0.999924
3	O	O:0.999891
)	O	O:0.999984
Or	O	O:0.999987
you	O	O:0.999974
could	O	O:0.999974
do	O	O:0.999998
it	O	O:0.999999
all	O	O:0.999979
in	O	O:0.999999
a	O	O:0.999918
function	O	O:0.999896
that	O	O:0.999727
was	O	O:0.999996
called	O	O:0.999939
by	O	O:0.999987
the	O	O:0.999822
`	O	O:0.999844
groupby	B-API	B-API:0.996064
/	O	O:0.999987
apply	O	B-API:0.971072
`	O	O:0.998375
:	O	O:0.999399
#CODE	O	O:0.999912
	
When	O	O:0.999830
using	O	O:0.999959
`	O	O:0.999987
count	O	O:0.915444
`	O	O:0.999997
,	O	O:0.999902
state	O	O:0.999889
isn't	O	O:0.999948
a	O	O:0.999994
nuisance	O	O:0.999746
column	O	O:0.998532
(	O	O:0.999997
it	O	O:0.999995
can	O	O:0.999996
count	O	O:0.999994
strings	O	O:0.999980
)	O	O:0.999994
so	O	O:0.999993
the	O	O:0.999988
`	O	O:0.999983
resample	O	B-API:0.990899
`	O	O:0.999933
is	O	O:0.999973
going	O	O:0.999711
to	O	O:0.999988
apply	O	O:0.984693
count	O	O:0.995530
to	O	O:0.999974
it	O	O:0.999992
(	O	O:0.999986
although	O	O:0.999987
the	O	O:0.999974
output	O	O:0.994035
is	O	O:0.999957
not	O	O:0.999978
what	O	O:0.999968
I	O	O:0.999986
would	O	O:0.999989
expect	O	O:0.999780
)	O	O:0.999991
.	O	O:0.999841
	
You	O	O:0.999904
could	O	O:0.999921
do	O	O:0.999999
something	O	O:0.999968
like	O	O:0.994154
(	O	O:0.999995
tell	O	O:0.999651
it	O	O:0.999998
only	O	O:0.999972
to	O	O:0.999998
apply	O	O:0.964094
`	O	O:0.999986
count	O	O:0.970620
`	O	O:0.999999
to	O	O:0.999477
`	O	O:1.000000
value_a	O	O:0.992522
`)	O	O:0.999978
,	O	O:0.999953
#CODE	O	O:0.999726
	
Or	O	O:0.999976
more	O	O:0.999857
generally	O	O:0.999852
,	O	O:0.999997
you	O	O:0.999968
can	O	O:0.999988
apply	O	O:0.991381
different	O	O:0.999963
kinds	O	O:0.999781
of	O	O:0.999963
`	O	O:0.999972
how	O	O:0.999738
`	O	O:0.999997
to	O	O:0.999994
different	O	O:0.999998
columns	O	O:0.998507
:	O	O:0.999974
#CODE	O	O:0.999922
	
pandas	O	O:0.999682
apply	O	B-API:0.674608
function	O	O:0.999739
that	O	O:0.999158
returns	O	O:0.999995
multiple	O	O:0.999970
values	O	O:0.999924
to	O	O:0.999999
rows	O	O:0.999979
in	O	O:0.999983
pandas	O	O:0.999978
dataframe	B-API	O:0.998962
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999939
to	O	O:0.999999
apply	O	O:0.988115
a	O	O:0.999971
transformation	O	O:0.999312
to	O	O:0.999999
each	O	O:0.999980
row	O	O:0.999986
that	O	O:0.999983
also	O	O:0.999995
returns	O	O:0.999988
a	O	O:0.999877
vector	O	O:0.998056
#CODE	O	O:0.999455
	
I	O	O:0.999992
end	O	O:0.999979
up	O	O:0.999843
with	O	O:0.999961
a	O	O:0.999987
Pandas	O	O:0.999757
series	O	O:0.999954
whose	O	O:0.999859
elements	O	O:0.999779
are	O	O:0.999973
tuples	O	O:0.999475
.	O	O:0.999853
	
This	O	O:0.998291
is	O	O:0.999990
beacause	O	O:0.999789
apply	O	O:0.698822
will	O	O:0.999900
take	O	O:0.999979
the	O	O:0.999999
result	O	O:0.999931
of	O	O:0.999987
myfunc	O	O:0.993007
without	O	O:0.999897
unpacking	O	O:0.996544
it	O	O:0.999687
.	O	O:0.999885
	
How	O	O:0.999897
can	O	O:0.999954
I	O	O:1.000000
change	O	O:0.999953
myfunc	O	O:0.990845
so	O	O:0.999993
that	O	O:0.999952
I	O	O:1.000000
obtain	O	O:0.999987
a	O	O:0.999992
new	O	O:0.999849
df	O	O:0.999932
with	O	O:0.999862
3	O	O:0.999954
columns	O	O:0.999858
?	O	O:0.999979
	
pandas	O	O:0.999219
,	O	O:0.999993
apply	O	O:0.760769
string	O	O:0.999247
operation	O	O:0.999556
to	O	O:0.999990
column	O	O:0.999993
should	O	O:0.999966
be	O	O:0.999993
string	O	O:0.999978
type	O	O:0.991239
,	O	O:0.999961
but	O	O:0.999924
has	O	O:0.999983
missing	O	O:0.999575
values	O	O:0.992017
(	O	O:0.999976
np.nan	O	O:0.997666
)	O	O:0.999951
	
groupby	B-API	B-API:0.984315
the	O	O:0.999858
'	O	O:0.999877
c	O	O:0.999805
'	O	O:0.999993
column	O	O:0.999836
,	O	O:0.999993
and	O	O:0.999996
consider	O	O:0.999864
all	O	O:0.999977
the	O	O:0.999996
columns	O	O:0.999914
that	O	O:0.999969
you	O	O:0.999999
want	O	O:0.999996
passed	O	O:0.999678
to	O	O:0.999994
the	O	O:0.999999
`	O	O:0.999978
apply	O	B-API:0.982619
`	O	O:0.999977
EXCEPT	O	O:0.996635
for	O	O:0.999935
c	O	O:0.994582
(	O	O:0.999993
this	O	O:0.999339
is	O	O:0.999995
what	O	O:0.999452
`	O	O:0.999995
df.columns	O	O:0.976074
-	O	O:0.999974
[	O	O:0.999883
'	O	O:0.999983
c	O	O:0.999934
']`	O	O:0.999976
does	O	O:0.999717
,	O	O:0.999998
as	O	O:0.999999
normally	O	O:0.999764
the	O	O:0.999997
grouping	O	O:0.999897
column	O	O:0.999155
IS	O	O:0.999985
passed	O	O:0.999235
to	O	O:0.999987
the	O	O:0.999998
apply	O	B-API:0.867386
.	O	O:0.999125
	
Try	O	O:0.999970
using	O	O:0.999914
apply	O	B-API:0.875119
with	O	O:0.999150
a	O	O:0.999974
custom	O	O:0.986649
function	O	O:0.999964
over	O	O:0.998282
axis=1	O	O:0.994794
:	O	O:0.999933
#CODE	O	O:0.999699
	
@USER	O	O:0.998797
Actually	O	O:0.999724
,	O	O:0.999981
it	O	O:0.999989
does	O	O:0.999375
.	O	O:0.999965
	
Just	O	O:0.999864
specify	O	O:0.999819
the	O	O:0.999997
columns	O	O:0.999942
when	O	O:0.999947
you	O	O:0.999997
apply	O	O:0.974040
the	O	O:0.999732
function	O	O:0.999543
,	O	O:0.999996
like	O	O:0.999969
this	O	O:0.999858
:	O	O:0.999994
`	O	O:0.999997
df	O	O:0.999206
[[	O	O:0.999960
'	O	O:0.999961
col1	O	O:0.998448
'	O	O:0.999982
,	O	O:0.999945
'	O	O:0.999978
col2	O	O:0.999611
']]	O	O:0.999848
.apply	B-API	B-API:0.999580
(	O	O:0.999928
...	O	O:0.999709
)`	O	O:0.999520
	
This	O	O:0.999475
should	O	O:0.999957
still	O	O:0.999960
be	O	O:0.999997
pretty	O	O:0.999803
fast	O	O:0.998851
because	O	O:0.999819
it	O	O:0.999986
uses	O	O:0.999535
`	O	O:0.999993
pandas	O	O:0.998100
`'	O	O:0.999989
vectorized	O	O:0.999069
string	O	O:0.999854
methods	O	O:0.999640
for	O	O:0.999997
each	O	O:0.999706
of	O	O:0.999990
the	O	O:0.999984
columns	O	O:0.999090
(	O	O:0.999993
the	O	O:0.999996
apply	O	B-API:0.893011
is	O	O:0.999858
across	O	O:0.999453
the	O	O:0.999991
columns	O	O:0.998908
,	O	O:0.999995
not	O	O:0.999997
an	O	O:0.999998
iteration	O	O:0.999988
over	O	O:0.999962
the	O	O:0.999998
rows	O	O:0.998992
)	O	O:0.999966
.	O	O:0.999950
	
Well	O	O:0.998514
it	O	O:0.999979
looks	O	O:0.999954
like	O	O:0.999940
within	O	O:0.999927
groups	O	O:0.999454
,	O	O:0.999996
there	O	O:0.999831
is	O	O:0.999991
one	O	O:0.999975
observation	O	O:0.999902
per	O	O:0.999887
month	O	O:0.997840
and	O	O:0.999993
you	O	O:0.999981
want	O	O:0.999930
the	O	O:0.999991
percent	O	O:0.999913
change	O	O:0.999652
from	O	O:0.999989
one	O	O:0.999985
month	O	O:0.999621
to	O	O:0.999990
the	O	O:0.999999
next	O	O:0.998566
.	O	O:0.999904
	
You	O	O:0.999928
can	O	O:0.999958
do	O	O:0.999999
that	O	O:0.999991
with	O	O:0.999996
a	O	O:0.999990
`	O	O:0.999904
groupby	B-API	B-API:0.993879
/	O	O:0.999987
apply	O	B-API:0.861073
`	O	O:0.999792
by	O	O:0.999902
grouping	O	O:0.999956
on	O	O:0.999553
'	O	O:0.999949
product_desc	O	O:0.993018
'	O	O:0.999960
and	O	O:0.999999
then	O	O:0.999960
using	O	O:0.999990
the	O	O:0.999965
built	O	O:0.995289
in	O	O:0.999954
`	O	O:0.999931
pct_change()	B-API	B-API:0.999989
`	O	O:0.999891
method	O	O:0.998020
:	O	O:0.999978
#CODE	O	O:0.999874
	
Thanks	O	O:0.998986
for	O	O:0.999995
your	O	O:0.999895
help	O	O:0.996583
on	O	O:0.999998
this	O	O:0.999823
.	O	O:0.999976
	
The	O	O:0.999814
pct_change	B-API	B-API:0.999146
function	O	O:0.999747
was	O	O:0.999883
exactly	O	O:0.999983
what	O	O:0.999892
I	O	O:0.999990
needed	O	O:0.999956
.	O	O:0.999662
	
However	O	O:0.999774
,	O	O:0.999998
when	O	O:0.999952
I	O	O:0.999997
apply	O	O:0.973901
the	O	O:0.999701
sort	O	O:0.997781
they	O	O:0.999955
don't	O	O:0.999988
sort	O	O:0.999602
the	O	O:0.999997
same	O	O:0.999781
way	O	O:0.999850
.	O	O:0.999906
	
Did	O	O:0.999957
you	O	O:0.999983
convert	O	O:0.999693
the	O	O:0.999992
activity_month	O	O:0.999571
into	O	O:0.999778
dates	O	O:0.999521
with	O	O:0.999790
strptime	O	O:0.994590
first	O	O:0.999756
?	O	O:0.999947
	
My	O	O:0.999900
results	O	O:0.999877
are	O	O:0.999993
sorted	O	O:0.999960
by	O	O:0.999912
product_desc	O	O:0.987810
but	O	O:0.999958
have	O	O:0.999959
the	O	O:0.999992
activity_month	O	O:0.999048
out	O	O:0.999949
of	O	O:0.999982
order	O	O:0.998945
.	O	O:0.999931
	
Now	O	O:0.999943
I	O	O:0.999996
find	O	O:0.999975
that	O	O:0.999891
the	O	O:0.999999
class	O	O:0.999973
of	O	O:0.999979
`	O	O:0.999998
a	O	O:0.999912
`	O	O:0.999933
and	O	O:0.999972
the	O	O:0.999998
class	O	O:0.999750
of	O	O:0.999962
`	O	O:0.999984
b	O	O:0.999485
`	O	O:0.999994
are	O	O:0.999968
different	O	O:0.999944
;	O	O:0.999932
`	O	O:0.999971
b	O	O:0.999507
`	O	O:0.999987
is	O	O:0.999981
a	O	O:0.999964
`	O	O:0.999902
pandas.core.series.Series	O	B-API:0.638186
`	O	O:0.999954
object	O	O:0.999031
and	O	O:0.999998
therefore	O	O:0.999981
you	O	O:0.999893
can	O	O:0.999990
not	O	O:0.999999
apply	O	O:0.583762
the	O	O:0.999814
method	O	O:0.999264
`	O	O:0.999989
append2	O	O:0.996311
`	O	O:0.999989
to	O	O:0.999875
it	O	O:0.999999
.	O	O:0.999931
	
but	O	O:0.999903
still	O	O:0.999722
can't	O	O:0.999985
quite	O	O:0.999949
get	O	O:0.999988
the	O	O:0.999991
output	O	O:0.999858
to	O	O:0.999992
the	O	O:1.000000
formats	O	O:0.999776
I	O	O:0.999992
need	O	O:0.999957
.	O	O:0.999760
	
I'm	O	O:0.999847
not	O	O:0.999982
quite	O	O:0.999971
sure	O	O:0.999922
how	O	O:0.999985
to	O	O:0.999994
apply	O	O:0.985454
the	O	O:0.999791
df.groupby	B-API	B-API:0.978174
syntax	O	O:0.999844
or	O	O:0.999990
the	O	O:0.999973
df.apply	B-API	B-API:0.919540
syntax	O	O:0.999706
to	O	O:0.999986
what	O	O:0.999994
I'm	O	O:0.999983
working	O	O:0.999804
with	O	O:0.999820
.	O	O:0.999836
	
Here	O	O:0.998318
is	O	O:0.999994
a	O	O:0.999991
neat	O	O:0.998880
apply	O	O:0.732455
trick	O	O:0.998629
.	O	O:0.999620
	
I'll	O	O:0.999547
create	O	O:0.999875
a	O	O:0.999947
function	O	O:0.999489
and	O	O:0.999994
print	O	O:0.999631
out	O	O:0.999860
what	O	O:0.997887
is	O	O:0.999972
incoming	O	O:0.989719
(	O	O:0.999907
and	O	O:0.999996
maybe	O	O:0.999971
even	O	O:0.999836
debug	O	O:0.999600
in	O	O:0.999993
their	O	O:0.999303
)	O	O:0.999975
.	O	O:0.999643
	
Then	O	O:0.999870
easy	O	O:0.999960
to	O	O:0.999995
see	O	O:0.999996
what's	O	O:0.999770
happening	O	O:0.999134
.	O	O:0.999899
	
#CODE	O	O:0.998453
	
Perfect	O	O:0.997575
!	O	O:0.999783
	
This	O	O:0.999336
is	O	O:0.999986
exactly	O	O:0.999960
what	O	O:0.999844
I	O	O:0.999956
was	O	O:0.999986
looking	O	O:0.997866
for	O	O:0.999896
.	O	O:0.999565
	
I	O	O:0.999984
guess	O	O:0.999962
my	O	O:0.999946
confusion	O	O:0.999950
stems	O	O:0.999938
from	O	O:0.999965
the	O	O:0.999980
fact	O	O:0.999925
that	O	O:0.999920
the	O	O:0.999986
Series.value_counts	B-API	B-API:0.964853
doesn't	O	O:0.999919
seem	O	O:0.999955
to	O	O:0.999997
fit	O	O:0.999994
into	O	O:0.999866
the	O	O:0.999995
arguments	O	O:0.999909
required	O	O:0.999906
by	O	O:0.999991
the	O	O:0.999779
df.apply	B-API	B-API:0.989263
method	O	O:0.999556
.	O	O:0.999774
	
How	O	O:0.999842
does	O	O:0.999623
it	O	O:0.999998
know	O	O:0.999857
which	O	O:0.999985
axis	O	O:0.999939
to	O	O:0.999994
apply	O	O:0.969206
the	O	O:0.999855
value_counts	B-API	B-API:0.997810
to	O	O:0.999948
?	O	O:0.999997
	
You	O	O:0.999932
can	O	O:0.999962
reformat	O	O:0.999992
the	O	O:0.999998
values	O	O:0.999895
by	O	O:0.999992
passing	O	O:0.999964
a	O	O:0.999986
reformatting	O	O:0.993012
function	O	O:0.999878
into	O	O:0.999625
the	O	O:0.999976
`	O	O:0.999926
apply	O	B-API:0.998375
`	O	O:0.999953
method	O	O:0.999788
as	O	O:0.999989
follows	O	O:0.990791
:	O	O:0.999947
#CODE	O	O:0.999714
	
Apply	O	O:0.999873
an	O	O:0.999971
operation	O	O:0.999847
to	O	O:0.999994
the	O	O:1.000000
value	O	O:0.999977
of	O	O:0.999998
a	O	O:0.999985
series	O	O:0.999490
(	O	O:0.999941
2	O	O:0.999938
and	O	O:0.999974
3	O	O:0.999791
)	O	O:0.999860
#CODE	O	O:0.999313
	
Then	O	O:0.998355
apply	O	B-API:0.624807
:	O	O:0.999826
#CODE	O	O:0.999302
	
what	O	O:0.999754
does	O	O:0.999904
the	O	O:0.999985
function	O	O:0.999927
in	O	O:0.999909
df.groupby	B-API	B-API:0.993037
(	O	O:0.999990
...	O	O:0.999695
)	O	O:0.999959
.apply	B-API	B-API:0.997044
(	O	O:0.999944
lambda	O	O:0.998697
x	O	O:0.997321
:	O	O:0.999976
...	O	O:0.999971
)	O	O:0.999997
apply	O	B-API:0.643403
to	O	O:0.999820
?	O	O:0.999986
	
what	O	O:0.998014
is	O	O:0.999990
the	O	O:0.999995
form	O	O:0.999930
of	O	O:0.999968
x	O	O:0.999777
?	O	O:0.999981
	
list	O	O:0.993379
?	O	O:0.999933
	
groupby	B-API	B-API:0.988674
,	O	O:0.999971
apply	O	B-API:0.884846
,	O	O:0.999838
and	O	O:0.999952
set	O	O:0.999618
not	O	O:0.999973
behaving	O	O:0.999946
as	O	O:0.999949
expected	O	O:0.999375
...	O	O:0.999590
	
is	O	O:0.999991
this	O	O:0.999912
a	O	O:0.999988
bug	O	O:0.999491
?	O	O:0.999915
	
[	O	O:0.999913
@USER	O	O:0.999426
]	O	O:0.999327
(	O	O:0.999895
#URL	O	O:0.999711
)	O	O:0.999979
,	O	O:0.999980
why	O	O:0.999990
does	O	O:0.999262
`	O	O:0.999998
dat.groupby	O	O:0.996914
([	O	O:0.999935
'	O	O:0.999913
names	O	O:0.999791
'])	O	O:0.999574
[[	O	O:0.999874
'	O	O:0.999956
letters	O	O:0.999684
']]`	O	O:0.999961
pass	O	O:0.998170
all	O	O:0.999985
the	O	O:0.999997
columns	O	O:0.999867
through	O	O:0.999864
to	O	O:0.999988
apply	O	O:0.818792
(	O	O:0.999935
letters	O	O:0.998021
,	O	O:0.999993
numbers	O	O:0.999650
,	O	O:0.999995
names	O	O:0.999878
)	O	O:0.999981
?	O	O:0.999960
	
Why	O	O:0.999898
not	O	O:0.999987
just	O	O:0.999966
the	O	O:0.999992
'	O	O:0.999957
letters	O	O:0.998261
'	O	O:0.999996
column	O	O:0.999986
as	O	O:0.999998
a	O	O:0.999991
dataframe	B-API	O:0.997789
instead	O	O:0.999989
of	O	O:0.999999
a	O	O:0.999985
series	O	O:0.999739
?	O	O:0.999948
	
Is	O	O:0.999900
it	O	O:0.999986
ignoring	O	O:0.999035
`	O	O:0.999844
[[	O	O:0.999800
'	O	O:0.999990
letters	O	O:0.998454
']]`	O	O:0.995653
(	O	O:0.999971
syntatic	O	O:0.998613
sugar	O	O:0.999367
that's	O	O:0.999811
not	O	O:0.999991
allowed	O	O:0.999971
)	O	O:0.999981
?	O	O:0.999888
	
You	O	O:0.999892
don't	O	O:0.999928
need	O	O:0.999953
the	O	O:0.999999
final	O	O:0.999794
apply	O	O:0.652398
,	O	O:0.999941
see	O	O:0.999769
here	O	O:0.998979
:	O	O:0.999986
#URL	O	O:0.999964
you	O	O:0.999985
can	O	O:0.999994
simply	O	O:0.999995
``	O	O:0.999939
astype	B-API	B-API:0.993492
(	O	O:0.999852
'	O	O:0.999932
timedelta64	O	O:0.996463
[	O	O:0.999955
D	O	O:0.999957
]')``	O	O:0.999117
or	O	O:0.999983
divide	O	O:0.999708
by	O	O:0.999931
``	O	O:0.999720
np.timedelta64	O	B-API:0.828453
(	O	O:0.999963
1	O	O:0.999887
,	O	O:0.999977
'	O	O:0.999961
D	O	O:0.999891
')``	O	O:0.995419
(	O	O:0.999974
they	O	O:0.999903
are	O	O:0.999997
sligthly	O	O:0.999948
different	O	O:0.999799
in	O	O:0.999923
how	O	O:0.999993
they	O	O:0.999935
round	O	O:0.998736
.	O	O:0.999705
	
Based	O	O:0.999933
your	O	O:0.999787
code	O	O:0.995895
(	O	O:1.000000
your	O	O:0.999734
`	O	O:0.999954
groupby	B-API	B-API:0.986984
/	O	O:0.999989
apply	O	B-API:0.910631
`)	O	O:0.999531
,	O	O:0.999778
it	O	O:0.999988
looks	O	O:0.999933
like	O	O:0.999665
(	O	O:0.999989
despite	O	O:0.999978
your	O	O:0.999229
example	O	O:0.999222
...	O	O:0.999899
but	O	O:0.999994
maybe	O	O:0.999936
I	O	O:0.999989
misunderstand	O	O:0.999968
what	O	O:0.999484
you	O	O:0.999979
want	O	O:0.999961
and	O	O:0.999998
then	O	O:0.999971
what	O	O:0.999955
Andy	O	O:0.999909
did	O	O:0.999937
would	O	O:0.999958
be	O	O:0.999997
the	O	O:0.999998
best	O	O:0.999497
idea	O	O:0.999685
)	O	O:0.999994
that	O	O:0.999876
you're	O	O:0.999984
working	O	O:0.999910
with	O	O:0.999992
a	O	O:0.999987
'	O	O:0.999977
date	O	O:0.999078
'	O	O:0.999987
column	O	O:0.999975
that	O	O:0.999892
is	O	O:1.000000
a	O	O:0.999983
`	O	O:0.999926
datetime64	O	O:0.888121
`	O	O:0.999977
dtype	B-API	B-API:0.999711
and	O	O:0.999991
not	O	O:0.999915
an	O	O:0.999954
`	O	O:0.999990
integer	O	O:0.986316
`	O	O:0.999997
dtype	B-API	B-API:0.996355
in	O	O:0.999997
your	O	O:0.999821
actual	O	O:0.999927
data	O	O:0.999918
.	O	O:0.999886
	
Also	O	O:0.999347
it	O	O:0.999988
looks	O	O:0.999985
like	O	O:0.999970
you	O	O:0.999998
want	O	O:0.999969
compute	O	O:0.999706
the	O	O:0.999999
change	O	O:0.998897
in	O	O:0.999995
days	O	O:0.999895
as	O	O:0.999998
measured	O	O:0.999840
from	O	O:0.999935
the	O	O:0.999992
first	O	O:0.999954
observation	O	O:0.999953
of	O	O:0.999998
a	O	O:0.999996
given	O	O:0.996938
`	O	O:0.999995
group	O	O:0.990773
/	O	O:0.999993
stage	O	O:0.996829
`	O	O:0.999932
.	O	O:0.999566
	
I	O	O:0.999962
think	O	O:0.999981
this	O	O:0.999124
is	O	O:0.999998
a	O	O:0.999989
better	O	O:0.999883
set	O	O:0.999907
of	O	O:0.999996
example	O	O:0.999910
data	O	O:0.999837
(	O	O:0.999997
if	O	O:0.999992
I	O	O:0.999988
understand	O	O:0.999989
your	O	O:0.999900
goal	O	O:0.998477
correctly	O	O:0.999396
):	O	O:0.999969
#CODE	O	O:0.999576
	
Given	O	O:0.999736
that	O	O:0.999906
you	O	O:0.999994
should	O	O:0.999993
get	O	O:0.999999
some	O	O:0.999986
speed-up	O	O:0.999867
from	O	O:0.999967
just	O	O:0.999932
modifying	O	O:0.999996
your	O	O:0.999080
apply	O	B-API:0.824976
(	O	O:0.999980
as	O	O:0.999930
Jeff	O	O:0.999307
suggests	O	O:0.999308
in	O	O:0.999986
his	O	O:0.999829
comment	O	O:0.999874
)	O	O:0.999994
by	O	O:0.999987
dividing	O	O:0.999923
through	O	O:0.999293
by	O	O:0.999976
the	O	O:0.999885
`	O	O:0.999939
timedelta64	O	O:0.936136
`	O	O:0.999994
in	O	O:0.999968
a	O	O:0.999998
vectorized	O	O:0.999615
way	O	O:0.999787
after	O	O:0.999925
the	O	O:0.999905
apply	O	B-API:0.964515
(	O	O:0.999856
or	O	O:0.999982
you	O	O:0.999976
could	O	O:0.999988
do	O	O:0.999999
it	O	O:0.999992
in	O	O:0.999992
the	O	O:0.999972
apply	O	B-API:0.983423
):	O	O:0.999362
#CODE	O	O:0.998841
	
But	O	O:0.999958
you	O	O:0.999978
can	O	O:0.999997
also	O	O:0.999999
avoid	O	O:0.999981
the	O	O:0.999867
`	O	O:0.999889
groupby	B-API	B-API:0.995468
/	O	O:0.999991
apply	O	B-API:0.835762
`	O	O:0.999916
given	O	O:0.999713
your	O	O:0.999994
data	O	O:0.999681
is	O	O:0.999992
in	O	O:0.999989
group	O	O:0.998890
,	O	O:0.999995
stage	O	O:0.999819
,	O	O:0.999994
date	O	O:0.999718
order	O	O:0.999609
.	O	O:0.999856
	
The	O	O:0.999989
first	O	O:0.999910
date	O	O:0.999180
for	O	O:0.999992
every	O	O:0.998176
`	O	O:0.999866
[	O	O:0.999603
'	O	O:0.999996
group	O	O:0.995857
'	O	O:0.999977
,	O	O:0.999965
'	O	O:0.999982
stage	O	O:0.999688
']`	O	O:0.999946
grouping	O	O:0.999562
happens	O	O:0.999914
when	O	O:0.999611
either	O	O:0.999976
the	O	O:1.000000
group	O	O:0.999830
changes	O	O:0.999732
or	O	O:0.999995
the	O	O:0.999997
stage	O	O:0.999899
changes	O	O:0.999028
.	O	O:0.999925
	
So	O	O:0.999959
I	O	O:0.999997
think	O	O:0.999984
you	O	O:0.999909
can	O	O:0.999987
do	O	O:1.000000
something	O	O:0.999994
like	O	O:0.999863
the	O	O:0.999984
following	O	O:0.993826
:	O	O:0.999912
#CODE	O	O:0.999803
	
Apply	O	O:0.993025
method	O	O:0.998236
:	O	O:0.999913
#CODE	O	O:0.999895
	
So	O	O:0.999966
I	O	O:0.999996
think	O	O:0.999963
avoiding	O	O:0.999507
the	O	O:0.999895
apply	O	B-API:0.915519
could	O	O:0.999674
give	O	O:0.999969
some	O	O:0.999982
significant	O	O:0.999547
speed-ups	O	O:0.996841
	
Yeah	O	O:0.999085
@USER	O	O:0.999789
,	O	O:0.999983
I	O	O:0.999992
thought	O	O:0.999904
about	O	O:0.999354
`	O	O:0.999964
transform	O	B-API:0.995056
`	O	O:0.999985
but	O	O:0.999926
at	O	O:0.999999
least	O	O:0.999328
for	O	O:0.999984
0.13.1	O	O:0.998401
I	O	O:0.999972
usually	O	O:0.999988
find	O	O:0.999103
transform	O	O:0.676836
no	O	O:0.999947
faster	O	O:0.999910
than	O	O:0.999963
a	O	O:0.999992
generic	O	O:0.998254
`	O	O:0.999985
apply	O	B-API:0.964826
`	O	O:0.999986
so	O	O:0.999628
I	O	O:0.999984
didn't	O	O:0.999783
include	O	O:0.996157
it	O	O:0.999936
.	O	O:0.999884
	
But	O	O:0.999913
I	O	O:0.999995
will	O	O:0.999969
update	O	O:0.999829
the	O	O:0.999986
answer	O	O:0.999699
with	O	O:0.999976
that	O	O:0.999971
as	O	O:0.999999
an	O	O:0.999978
alternative	O	O:0.999740
.	O	O:0.999728
	
Of	O	O:0.999978
course	O	O:0.999928
you	O	O:0.999993
don't	O	O:0.999972
show	O	O:0.999996
your	O	O:0.999994
data	O	O:0.999938
so	O	O:0.999999
this	O	O:0.999987
may	O	O:0.999986
or	O	O:0.999981
may	O	O:0.999980
not	O	O:0.999989
apply	O	O:0.703652
and	O	O:0.999957
I	O	O:0.999981
apologize	O	O:0.998899
if	O	O:0.999728
not	O	O:0.999775
,	O	O:0.999994
but	O	O:0.999980
for	O	O:0.999994
a	O	O:0.999983
large	O	O:0.997675
dataframe	B-API	O:0.988836
I'm	O	O:0.999958
dealing	O	O:0.999823
with	O	O:0.999911
I	O	O:0.999989
see	O	O:0.999999
a	O	O:0.999990
speedup	O	O:0.999658
of	O	O:0.999983
,	O	O:0.999995
well	O	O:0.999946
,	O	O:0.999992
24	O	O:0.999950
million	O	O:0.999660
times	O	O:0.999151
!	O	O:0.999925
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
Is	O	O:0.999976
this	O	O:0.999971
technically	O	O:0.999991
a	O	O:0.999993
`	O	O:0.999925
transform	O	B-API:0.913093
`	O	O:0.999989
or	O	O:0.999817
`	O	O:0.999994
apply	O	B-API:0.922817
`	O	O:0.999919
operation	O	O:0.995241
?	O	O:0.999974
	
I	O	O:0.999969
never	O	O:0.999904
quite	O	O:0.999074
understood	O	O:0.999738
the	O	O:0.999948
difference	O	O:0.999154
.	O	O:0.999792
	
`	O	O:0.999971
apply	O	B-API:0.974761
`	O	O:0.999806
is	O	O:0.999783
the	O	O:0.999986
most	O	O:0.999685
general	O	O:0.999810
category	O	O:0.999543
of	O	O:0.999990
operation	O	O:0.999729
on	O	O:0.999999
a	O	O:0.999998
group	O	O:0.997767
,	O	O:0.999992
so	O	O:0.999997
lots	O	O:0.999939
of	O	O:0.999995
things	O	O:0.999959
fall	O	O:0.999911
under	O	O:0.999973
its	O	O:0.999903
umbrella	O	O:0.997761
.	O	O:0.999745
	
What	O	O:0.999715
distinguishes	O	O:0.999921
transform	O	O:0.799235
operations	O	O:0.998314
is	O	O:0.999989
that	O	O:0.999979
they	O	O:0.999990
produce	O	O:0.999980
something	O	O:0.999947
indexed	O	O:0.999954
like	O	O:0.999938
the	O	O:0.999993
input	O	O:0.999766
,	O	O:0.999971
and	O	O:0.999995
that	O	O:0.999893
happens	O	O:0.999939
here	O	O:0.999923
,	O	O:0.999997
so	O	O:0.999993
I	O	O:0.999997
guess	O	O:0.999981
you	O	O:0.999889
could	O	O:0.999991
think	O	O:0.999994
of	O	O:0.999998
it	O	O:0.999991
as	O	O:1.000000
a	O	O:0.999976
transform	O	B-API:0.943144
.	O	O:0.999679
	
Well	O	O:0.999445
,	O	O:0.999998
one	O	O:0.999986
approach	O	O:0.999492
is	O	O:0.999987
the	O	O:0.999880
following	O	O:0.994916
:	O	O:0.999798
(	O	O:0.999989
1	O	O:0.999983
)	O	O:0.999995
do	O	O:0.999986
a	O	O:0.999986
`	O	O:0.999707
groupby	B-API	B-API:0.993893
/	O	O:0.999988
apply	O	B-API:0.906561
`	O	O:0.999873
with	O	O:0.997188
'	O	O:0.999972
id	O	O:0.999868
'	O	O:0.999945
as	O	O:0.999986
grouping	O	O:0.999698
variable	O	O:0.999350
.	O	O:0.999734
	
(	O	O:0.999943
2	O	O:0.999836
)	O	O:0.999969
Within	O	O:0.999919
the	O	O:0.999989
apply	O	B-API:0.703837
,	O	O:0.999905
`	O	O:0.999983
resample	O	B-API:0.987329
`	O	O:0.999990
the	O	O:0.999975
group	O	O:0.999397
to	O	O:0.999998
a	O	O:1.000000
daily	O	O:0.999258
time	O	O:0.999892
series	O	O:0.999816
.	O	O:0.999920
	
(	O	O:0.999917
3	O	O:0.999802
)	O	O:0.999975
Then	O	O:0.999970
just	O	O:0.999994
using	O	O:0.999987
`	O	O:0.999513
rolling_sum	B-API	B-API:0.999991
`	O	O:0.999576
(	O	O:0.999748
and	O	O:0.999998
shift	O	O:0.551858
so	O	O:0.999921
you	O	O:0.999972
don't	O	O:0.999966
include	O	O:0.999960
the	O	O:0.999998
current	O	O:0.999960
rows	O	O:0.998771
'	O	O:0.999986
x	O	O:0.999974
'	O	O:0.999993
value	O	O:0.999988
)	O	O:0.999997
to	O	O:0.999985
compute	O	O:0.999978
the	O	O:0.999998
sum	O	O:0.999862
of	O	O:1.000000
your	O	O:0.999892
70	O	O:0.999961
day	O	O:0.999990
lookback	O	O:0.999043
periods	O	O:0.997609
.	O	O:0.999841
	
(	O	O:0.999954
4	O	O:0.999841
)	O	O:0.999974
Reduce	O	O:0.999582
the	O	O:0.999993
group	O	O:0.999586
back	O	O:0.999761
to	O	O:0.999998
only	O	O:0.999998
the	O	O:0.999999
original	O	O:0.999496
observations	O	O:0.998104
:	O	O:0.999954
#CODE	O	O:0.999941
	
You	O	O:0.999824
are	O	O:0.999993
going	O	O:0.999757
to	O	O:0.999988
need	O	O:1.000000
your	O	O:0.999996
data	O	O:0.999993
sorted	O	O:0.999987
by	O	O:0.999950
`	O	O:0.999919
[	O	O:0.999516
'	O	O:0.999985
id	O	O:0.999396
'	O	O:0.999964
,	O	O:0.999985
'	O	O:0.999988
dates	O	O:0.999165
']`	O	O:0.999795
.	O	O:0.999815
	
Now	O	O:0.999967
we	O	O:0.999995
can	O	O:0.999981
do	O	O:0.999999
the	O	O:0.999986
`	O	O:0.999901
groupby	B-API	B-API:0.995472
/	O	O:0.999987
apply	O	B-API:0.971072
`	O	O:0.998375
:	O	O:0.999399
#CODE	O	O:0.999912
	
It	O	O:0.999979
just	O	O:0.999851
becomes	O	O:0.999932
the	O	O:0.999994
next	O	O:0.999651
parameter	O	O:0.999843
in	O	O:0.999988
the	O	O:0.999988
`	O	O:0.999978
apply	O	B-API:0.989601
`	O	O:0.999899
.	O	O:0.998539
	
See	O	O:0.999816
me	O	O:0.999976
edit	O	O:0.999168
for	O	O:0.999964
details	O	O:0.998602
.	O	O:0.999628
	
No	O	O:0.999991
need	O	O:0.999880
for	O	O:0.999994
the	O	O:0.999932
`	O	O:0.999956
lambda	O	O:0.996951
`	O	O:0.999996
on	O	O:0.999936
the	O	O:0.999998
first	O	O:0.999735
one	O	O:0.999897
:	O	O:0.999981
`	O	O:0.999994
apply	O	B-API:0.969385
(	O	O:0.999746
'	O	O:0.999200
{	O	O:0.999971
:	O	O:0.999971
0	O	O:0.999779
>	O	O:0.999952
15}	O	O:0.998779
'	O	O:0.999948
.format	B-API	B-API:0.889499
)`	O	O:0.999592
should	O	O:0.999840
work	O	O:0.999904
too	O	O:0.999947
.	O	O:0.999966
	
as	O	O:0.999981
the	O	O:0.999950
apply	O	B-API:0.940658
function	O	O:0.999489
creates	O	O:0.999578
only	O	O:0.999988
one	O	O:0.999998
column	O	O:0.999967
with	O	O:0.999978
tuples	O	O:0.998890
in	O	O:0.999979
it	O	O:0.999976
.	O	O:0.999952
	
You	O	O:0.999938
can	O	O:0.999975
put	O	O:0.999969
the	O	O:0.999998
two	O	O:0.999976
values	O	O:0.999789
in	O	O:0.999990
a	O	O:0.999996
Series	O	O:0.998010
,	O	O:0.999971
and	O	O:0.999997
then	O	O:0.999787
it	O	O:0.999998
will	O	O:0.999979
be	O	O:0.999999
returned	O	O:0.999970
as	O	O:0.999989
a	O	O:0.999991
dataframe	B-API	O:0.996995
from	O	O:0.999958
the	O	O:0.999966
apply	O	B-API:0.928813
(	O	O:0.999936
where	O	O:0.999947
each	O	O:0.999768
series	O	O:0.999934
is	O	O:0.999999
a	O	O:0.999994
row	O	O:0.999543
in	O	O:0.999979
that	O	O:0.999970
dataframe	B-API	O:0.999360
)	O	O:0.999983
.	O	O:0.999828
	
With	O	O:0.999929
a	O	O:0.999993
dummy	O	O:0.996661
example	O	O:0.998243
:	O	O:0.999927
#CODE	O	O:0.999872
	
Use	O	O:0.999732
`	O	O:0.999931
to_datetime	B-API	B-API:0.997345
`	O	O:0.999995
to	O	O:0.999975
convert	O	O:0.999966
to	O	O:0.999998
a	O	O:1.000000
string	O	O:0.999756
to	O	O:0.999998
a	O	O:1.000000
datetime	O	O:0.993464
,	O	O:0.999996
you	O	O:0.999973
can	O	O:0.999997
pass	O	O:0.999991
a	O	O:0.999997
formatting	O	O:0.998976
string	O	O:0.999414
but	O	O:0.999605
in	O	O:0.999994
this	O	O:0.999945
case	O	O:0.999950
it	O	O:0.999995
seems	O	O:0.999935
to	O	O:0.999987
handle	O	O:0.999985
it	O	O:0.999995
fine	O	O:0.999958
,	O	O:1.000000
then	O	O:0.999961
if	O	O:0.999999
you	O	O:0.999995
wanted	O	O:0.999998
a	O	O:0.999998
date	O	O:0.999619
then	O	O:0.999912
call	O	O:0.999749
`	O	O:0.999996
apply	O	B-API:0.998393
`	O	O:0.999932
and	O	O:0.999810
use	O	O:0.999990
a	O	O:0.999863
lambda	O	O:0.996514
to	O	O:0.999981
call	O	O:0.999712
`	O	O:0.999988
.date()	B-API	B-API:0.999924
`	O	O:0.999995
on	O	O:0.999981
each	O	O:0.999929
datetime	O	O:0.999418
entry	O	O:0.998623
:	O	O:0.999908
#CODE	O	O:0.999843
	
It	O	O:0.999486
is	O	O:0.999937
.	O	O:0.999759
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
In	O	O:0.999874
R	O	O:0.999836
,	O	O:0.999995
we	O	O:0.999990
could	O	O:0.999929
write	O	O:0.999998
something	O	O:0.999993
such	O	O:0.999944
as	O	O:0.999997
grepl	O	O:0.958373
(	O	O:0.999988
"	O	O:0.999990
date	O	O:0.995451
"	O	O:0.999984
,	O	O:0.999966
colnames	O	O:0.995130
(	O	O:0.999993
df	O	O:0.999895
))	O	O:0.999508
,	O	O:0.999953
which	O	O:0.999954
creates	O	O:0.999589
a	O	O:0.999987
logical	O	O:0.995167
index	O	O:0.999950
by	O	O:0.999935
which	O	O:0.999967
we	O	O:0.999983
subset	O	O:0.998760
.	O	O:0.999937
	
Maybe	O	O:0.999924
that	O	O:0.999955
same	O	O:0.999964
logic	O	O:0.999886
does	O	O:0.999844
not	O	O:0.999988
apply	O	O:0.970761
here	O	O:0.998041
,	O	O:0.999987
although	O	O:0.999975
I	O	O:0.999996
have	O	O:0.999993
seen	O	O:0.999403
people	O	O:0.999935
do	O	O:0.999992
that	O	O:0.999961
for	O	O:0.999999
selecting	O	O:0.999943
rows	O	O:0.993248
.	O	O:0.999851
	
Using	O	O:0.998177
'	O	O:0.999917
apply	O	O:0.512551
'	O	O:0.999542
in	O	O:0.999847
Pandas	O	O:0.999395
(	O	O:0.999990
externally	O	O:0.999888
defined	O	O:0.999280
function	O	O:0.999847
)	O	O:0.999928
	
What	O	O:0.999814
am	O	O:0.999988
I	O	O:0.999997
doing	O	O:0.999970
wrong	O	O:0.995625
?	O	O:0.999722
	
I	O	O:0.999966
think	O	O:0.999596
I'm	O	O:0.999853
not	O	O:0.999977
really	O	O:0.999942
understanding	O	O:0.999585
how	O	O:0.999685
apply	O	B-API:0.949255
(	O	O:0.999769
and	O	O:0.999991
its	O	O:0.999926
cousins	O	O:0.999611
,	O	O:0.999987
aggregate	O	B-API:0.898281
and	O	O:0.999905
agg	O	B-API:0.980117
)	O	O:0.999560
works	O	O:0.998025
.	O	O:0.999869
	
If	O	O:0.999951
someone	O	O:0.999682
could	O	O:0.999931
explain	O	O:0.999854
,	O	O:0.999996
I'd	O	O:0.999986
be	O	O:0.999998
ever	O	O:0.999956
so	O	O:0.999985
grateful	O	O:0.997977
!	O	O:0.999917
	
You	O	O:0.999846
could	O	O:0.999978
group	O	O:0.999957
by	O	O:0.999996
year	O	O:0.999356
,	O	O:0.999978
isolate	O	O:0.999509
the	O	O:0.999990
prop	O	O:0.999637
column	O	O:0.999938
,	O	O:0.999997
apply	O	O:0.665039
`	O	O:0.997515
argmax	B-API	B-API:0.999229
`	O	O:0.999979
,	O	O:0.999907
and	O	O:0.999994
use	O	O:0.999814
`	O	O:0.999616
loc	O	B-API:0.983683
`	O	O:0.999998
to	O	O:0.999928
select	O	O:0.999988
desired	O	O:0.999951
rows	O	O:0.997545
:	O	O:0.999972
#CODE	O	O:0.999944
	
AttributeError	O	O:0.995253
:	O	O:0.999967
Cannot	O	O:0.999934
access	O	O:0.999860
callable	O	O:0.999727
attribute	O	O:0.999880
'	O	O:0.999925
info	O	O:0.999852
'	O	O:0.999994
of	O	O:0.999878
'	O	O:0.999934
DataFrameGroupBy	B-API	B-API:0.739934
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954730
'	O	O:0.999052
method	O	O:0.999572
	
No	O	O:0.999962
worries	O	O:0.999590
,	O	O:0.999995
the	O	O:0.999997
given	O	O:0.997821
solution	O	O:0.999955
still	O	O:0.999906
applies	O	O:0.999923
,	O	O:0.999988
you	O	O:0.999987
just	O	O:0.999985
have	O	O:0.999994
to	O	O:0.999995
call	O	O:0.999942
it	O	O:0.999997
inside	O	O:0.999760
of	O	O:0.999997
an	O	O:0.999990
apply	O	O:0.812741
of	O	O:0.999985
your	O	O:0.994534
groupby	B-API	B-API:0.988327
:	O	O:0.999958
`	O	O:0.999914
df.groupby	B-API	B-API:0.988879
(	O	O:0.999991
bla	O	O:0.999795
)	O	O:0.999955
.apply	B-API	B-API:0.998252
(	O	O:0.999958
lambda	O	O:0.998344
df_grouped	O	O:0.978688
:	O	O:0.999941
df_grouped.groupby	O	O:0.997622
(	O	O:0.999995
level	O	O:0.999712
=[	O	O:0.999953
0	O	O:0.999921
,	O	O:0.999980
1	O	O:0.999930
,	O	O:0.999978
2	O	O:0.999948
])	O	O:0.999846
.apply	B-API	B-API:0.996049
(	O	O:0.999969
fancy_func	O	O:0.996725
))`	O	O:0.998494
	
how	O	O:0.999906
to	O	O:0.999988
apply	O	O:0.990545
Functions	O	O:0.999327
on	O	O:0.999963
numpy	O	O:0.999933
arrays	O	O:0.999926
using	O	O:0.999908
pandas	O	O:0.998629
groupby	B-API	B-API:0.997229
function	O	O:0.999057
	
@USER	O	O:0.999607
I	O	O:0.999975
get	O	O:0.999995
this	O	O:0.999904
error	O	O:0.999959
when	O	O:0.999852
trying	O	O:0.999944
to	O	O:0.999995
apply	O	O:0.827841
.	O	O:0.999756
why	O	O:0.999742
might	O	O:0.999989
this	O	O:0.999967
be	O	O:0.999995
?	O	O:0.999975
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999962
apply	O	O:0.991281
a	O	O:0.999968
weighted	O	O:0.995371
sum	O	O:0.999891
to	O	O:0.999992
a	O	O:0.999999
DataFrame	B-API	O:0.960750
.	O	O:0.999891
	
In	O	O:0.999939
the	O	O:0.999994
past	O	O:0.999487
I	O	O:0.999996
have	O	O:0.999970
used	O	O:0.998977
#CODE	O	O:0.999619
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999962
apply	O	O:0.991281
a	O	O:0.999977
weighted	O	O:0.996714
average	O	O:0.999634
to	O	O:0.999995
the	O	O:0.999999
sum	O	O:0.999810
where	O	O:0.999970
the	O	O:0.999997
most	O	O:0.999846
recent	O	O:0.998476
is	O	O:0.999988
multiplied	O	O:0.999805
by	O	O:0.999970
0.6	O	O:0.998181
,	O	O:0.999976
2nd	O	O:0.999958
by	O	O:0.999919
0.2	O	O:0.998127
,	O	O:0.999948
3rd	O	O:0.999337
and	O	O:0.999987
4th	O	O:0.999967
by	O	O:0.999638
0.1	O	O:0.994679
.	O	O:0.999373
	
I	O	O:0.999987
think	O	O:0.999960
you	O	O:0.999873
can	O	O:0.999973
do	O	O:0.999999
it	O	O:0.999998
will	O	O:0.999985
a	O	O:0.999998
`	O	O:0.999939
rolling_apply	B-API	B-API:0.999841
`	O	O:0.999987
within	O	O:0.999570
a	O	O:0.999971
function	O	O:0.999891
called	O	O:0.999906
by	O	O:0.999995
a	O	O:0.999988
normal	O	O:0.989113
`	O	O:0.999978
groupby	B-API	B-API:0.995858
/	O	O:0.999981
apply	O	B-API:0.956650
`	O	O:0.999517
.	O	O:0.998278
	
So	O	O:0.999993
something	O	O:0.999973
like	O	O:0.999903
the	O	O:0.999981
following	O	O:0.993645
:	O	O:0.999912
#CODE	O	O:0.999803
	
@USER	O	O:0.997839
Thanks	O	O:0.998796
.	O	O:0.999773
	
I'm	O	O:0.999934
new	O	O:0.999820
to	O	O:0.999979
Python	O	O:0.999947
Is	O	O:0.999998
this	O	O:0.999968
documented	O	O:0.999945
somewhere	O	O:0.999809
?	O	O:0.999951
	
I	O	O:0.999795
could	O	O:0.999930
not	O	O:0.999990
find	O	O:0.999979
it	O	O:0.999991
in	O	O:0.999990
the	O	O:0.999985
Pandas	O	O:0.999260
documentation	O	O:0.999409
.	O	O:0.999831
	
I	O	O:0.999918
did	O	O:0.999981
find	O	O:0.999884
something	O	O:0.999968
about	O	O:0.999950
loglog	O	O:0.999904
plots	O	O:0.998444
in	O	O:0.999963
the	O	O:0.999989
matplotlib	O	O:0.999061
documentation	O	O:0.999309
,	O	O:0.999990
but	O	O:0.999981
I	O	O:0.999985
don't	O	O:0.999983
know	O	O:0.999603
how	O	O:0.999990
to	O	O:0.999981
apply	O	O:0.996786
this	O	O:0.999822
to	O	O:0.999993
a	O	O:0.999999
Pandas	O	O:0.999460
dataframe	B-API	O:0.994307
.	O	O:0.999826
	
It	O	O:0.998980
is	O	O:0.999964
not	O	O:0.999984
updating	O	O:0.999896
+1	O	O:0.999975
count	O	O:0.999594
as	O	O:0.999994
I	O	O:0.999925
wanted	O	O:0.999832
.	O	O:0.998833
	
I	O	O:0.999950
believe	O	O:0.999924
it	O	O:0.999696
is	O	O:0.999989
some	O	O:0.999931
kind	O	O:0.999892
of	O	O:0.999992
type	O	O:0.997848
issue	O	O:0.999843
,	O	O:0.999867
but	O	O:0.999928
not	O	O:0.999986
sure	O	O:0.999973
how	O	O:0.999994
to	O	O:0.999996
force	O	O:0.999980
the	O	O:0.999984
type	O	O:0.995506
.	O	O:0.999923
	
I	O	O:0.999969
am	O	O:0.999992
using	O	O:0.999751
DataFrame	B-API	O:0.980337
for	O	O:0.999979
my	O	O:0.999995
data	O	O:0.999936
as	O	O:0.999996
I	O	O:0.999997
want	O	O:0.999986
to	O	O:0.999841
use	O	O:0.999999
group	O	O:0.987146
function	O	O:0.999956
to	O	O:0.999988
split	O	O:0.999944
the	O	O:0.999995
data	O	O:0.999879
and	O	O:0.999996
apply	O	O:0.870092
the	O	O:0.999791
above	O	O:0.988339
function	O	O:0.999741
.	O	O:0.999850
	
Any	O	O:0.999679
suggestions	O	O:0.999103
?	O	O:0.999884
	
Use	O	O:0.999523
indexing	O	O:0.999452
instead	O	O:0.999972
of	O	O:0.999985
apply	O	B-API:0.733717
,	O	O:0.999914
it's	O	O:0.999688
much	O	O:0.998232
faster	O	O:0.998658
:	O	O:0.999933
#CODE	O	O:0.999639
	
Since	O	O:0.999768
you've	O	O:0.999742
got	O	O:0.999976
to	O	O:0.999990
do	O	O:0.999998
the	O	O:0.999986
`	O	O:0.999969
apply	O	B-API:0.959114
`	O	O:0.999981
anyway	O	O:0.999483
,	O	O:0.999995
I	O	O:0.999983
think	O	O:0.999905
it	O	O:0.999893
is	O	O:0.999995
cleaner	O	O:0.999739
to	O	O:0.999997
move	O	O:0.999976
the	O	O:0.999956
`	O	O:0.999953
json.loads	O	O:0.547676
`	O	O:0.999985
and	O	O:0.999986
column	O	O:0.999987
creation	O	O:0.999776
all	O	O:0.999977
into	O	O:0.999748
the	O	O:0.999941
apply	O	B-API:0.983456
(	O	O:0.999910
don't	O	O:0.999635
use	O	O:0.999972
the	O	O:0.999709
`	O	O:0.999960
converters	O	O:0.884198
`	O	O:0.999996
for	O	O:0.999573
`	O	O:0.999974
read_csv	B-API	B-API:0.999547
`)	O	O:0.999943
:	O	O:0.999952
`	O	O:0.999996
df	O	O:0.999418
[	O	O:0.999976
'	O	O:0.999979
field3	O	O:0.999480
']	O	O:0.999880
.apply	B-API	B-API:0.999150
(	O	O:0.999886
lambda	O	O:0.998790
x	O	O:0.999688
:	O	O:0.999829
pd.Series	B-API	B-API:0.987892
(	O	O:0.999937
json.loads	O	O:0.596253
(	O	O:0.999962
x	O	O:0.999908
)))`	O	O:0.997047
	
By	O	O:0.999934
searching	O	O:0.999913
this	O	O:0.999593
subject	O	O:0.999803
,	O	O:0.999990
I've	O	O:0.999902
known	O	O:0.999559
basic	O	O:0.999574
syntax	O	O:0.999926
of	O	O:0.999873
replace()	B-API	B-API:0.660847
.	O	O:0.999864
	
But	O	O:0.999821
I	O	O:0.999985
couldn't	O	O:0.999937
apply	O	B-API:0.527914
to	O	O:0.999955
my	O	O:0.999998
specific	O	O:0.999714
problem	O	O:0.999489
.	O	O:0.999878
	
Although	O	O:0.999881
unwieldy	O	O:0.999892
using	O	O:0.999770
`	O	O:0.999761
loc	O	B-API:0.996154
`	O	O:0.999992
will	O	O:0.999289
scale	O	O:0.999925
better	O	O:0.999897
with	O	O:0.999961
larger	O	O:0.999900
dataframes	O	O:0.999764
as	O	O:0.999992
the	O	O:0.999979
apply	O	B-API:0.637699
here	O	O:0.984314
is	O	O:0.999969
called	O	O:0.998708
for	O	O:0.999998
every	O	O:0.998685
row	O	O:0.999846
whilst	O	O:0.999667
using	O	O:0.999667
boolean	O	O:0.980237
indexing	O	O:0.998694
will	O	O:0.999327
be	O	O:0.999986
vectorised	O	O:0.999657
.	O	O:0.999385
	
That	O	O:0.998908
is	O	O:0.999997
only	O	O:0.999976
true	O	O:0.999909
if	O	O:0.999992
the	O	O:0.999989
column	O	O:0.999811
already	O	O:0.999982
exists	O	O:0.999946
I	O	O:0.999999
think	O	O:0.999990
as	O	O:0.999976
I	O	O:0.999979
get	O	O:0.999974
no	O	O:0.999860
warning	O	O:0.999890
unless	O	O:0.999872
the	O	O:0.999995
column	O	O:0.999916
exists	O	O:0.999966
,	O	O:0.999996
I	O	O:0.999987
did	O	O:0.999995
some	O	O:0.999466
timings	O	O:0.999787
and	O	O:0.999996
using	O	O:0.999851
`	O	O:0.999348
loc	O	B-API:0.999666
`	O	O:0.999953
method	O	O:0.993916
is	O	O:0.999997
1.66ms	O	O:0.995909
for	O	O:0.999998
a	O	O:0.999996
data	O	O:0.999748
frame	O	O:1.000000
size	O	O:0.999976
of	O	O:0.999996
3000	O	O:0.999922
rows	O	O:0.999515
versus	O	O:0.999911
the	O	O:0.999936
apply	O	B-API:0.897865
method	O	O:0.998694
which	O	O:0.999528
takes	O	O:0.999954
60.2	O	O:0.999054
ms	O	O:0.999812
	
How	O	O:0.999916
do	O	O:0.999952
I	O	O:0.999998
apply	O	O:0.939677
a	O	O:0.999051
function	O	O:0.999219
to	O	O:0.999994
a	O	O:1.000000
pandas	O	O:0.999600
dataframe	B-API	O:0.998514
?	O	O:0.999939
	
I	O	O:0.999979
have	O	O:0.999963
tried	O	O:0.999728
to	O	O:0.999996
apply	O	O:0.986388
a	O	O:0.999868
function	O	O:0.999464
to	O	O:0.999996
a	O	O:1.000000
pandas	O	O:0.999808
dataframe	B-API	O:0.999650
like	O	O:0.999929
this	O	O:0.999908
#CODE	O	O:0.999831
	
So	O	O:0.999967
the	O	O:0.999996
first	O	O:0.999879
problem	O	O:0.999591
in	O	O:0.999998
your	O	O:0.999972
code	O	O:0.998689
is	O	O:0.999999
that	O	O:0.999817
you	O	O:0.999988
are	O	O:0.999998
calling	O	O:0.999628
apply	O	B-API:0.850654
and	O	O:0.999873
setting	O	O:0.998950
param	O	O:0.992491
`	O	O:0.999983
axis=1	O	O:0.989529
`	O	O:0.999998
this	O	O:0.999572
applies	O	O:0.999993
your	O	O:0.999168
function	O	O:0.999835
row-wise	O	O:0.998878
which	O	O:0.999344
is	O	O:0.999982
fine	O	O:0.998635
.	O	O:0.999932
	
Currently	O	O:0.999878
,	O	O:0.999994
I	O	O:0.999995
am	O	O:0.999998
using	O	O:0.999440
`	O	O:0.999971
df_sub	O	O:0.974170
=d	O	O:0.999972
f	O	O:0.999322
[	O	O:0.999952
df.ID.isin	O	O:0.970295
(	O	O:0.999963
ID_list	O	O:0.999516
)]`	O	O:0.999707
to	O	O:0.999937
do	O	O:0.999994
it	O	O:0.999976
.	O	O:0.999907
	
But	O	O:0.999804
it	O	O:0.999986
takes	O	O:0.999918
a	O	O:0.999989
lot	O	O:0.999677
time	O	O:0.999768
.	O	O:0.999860
	
`	O	O:0.999902
ID	O	O:0.995976
`	O	O:0.999994
s	O	O:0.999728
contained	O	O:0.999687
in	O	O:0.999897
`	O	O:0.999977
ID_list	O	O:0.968563
`	O	O:0.999992
doesn't	O	O:0.999676
have	O	O:0.999987
any	O	O:0.999989
pattern	O	O:0.999817
,	O	O:0.999987
so	O	O:0.999952
it's	O	O:0.999700
not	O	O:0.999978
within	O	O:0.999958
certain	O	O:0.999188
range	O	O:0.999865
.	O	O:0.999806
	
(	O	O:0.999900
And	O	O:0.999976
I	O	O:0.999998
need	O	O:0.999991
to	O	O:0.999978
apply	O	O:0.981316
the	O	O:0.999981
same	O	O:0.999764
operation	O	O:0.999805
to	O	O:0.999998
many	O	O:0.999998
similar	O	O:0.999925
dataframes	O	O:0.999541
.	O	O:0.999889
	
I	O	O:0.999852
was	O	O:0.999974
wondering	O	O:0.999037
if	O	O:0.999990
there	O	O:0.999641
is	O	O:0.999996
any	O	O:0.999943
faster	O	O:0.999695
way	O	O:0.999906
to	O	O:0.999932
do	O	O:0.999999
this	O	O:0.999872
.	O	O:0.999921
	
Will	O	O:0.999275
it	O	O:0.999993
help	O	O:0.999857
a	O	O:0.999996
lot	O	O:0.999714
if	O	O:0.999991
make	O	O:0.999775
`	O	O:0.999985
ID	O	O:0.998859
`	O	O:0.999995
as	O	O:0.999710
the	O	O:0.999960
index	O	O:0.999391
?	O	O:0.999922
	
If	O	O:0.999937
you're	O	O:0.999897
working	O	O:0.999704
with	O	O:0.999990
small	O	O:0.999720
datasets	O	O:0.999934
,	O	O:0.999993
you	O	O:0.999989
get	O	O:0.999988
different	O	O:0.999943
behaviors	O	O:0.999600
and	O	O:0.999989
it	O	O:0.999972
actually	O	O:0.999942
becomes	O	O:0.999817
faster	O	O:0.999851
to	O	O:0.999979
use	O	O:0.999996
a	O	O:0.999975
list	O	O:0.996766
comprehension	O	O:0.999851
or	O	O:0.999995
apply	O	O:0.522153
against	O	O:0.999895
a	O	O:0.999961
dictionary	O	O:0.999866
than	O	O:0.999943
using	O	O:0.999872
`	O	O:0.999919
isin	B-API	B-API:0.999701
`	O	O:0.999978
.	O	O:0.998964
	
Thank	O	O:0.999469
you	O	O:0.999970
all	O	O:0.999981
for	O	O:0.999991
help	O	O:0.992849
.	O	O:0.999827
	
I've	O	O:0.999626
try	O	O:0.999907
out	O	O:0.999901
these	O	O:0.999988
different	O	O:0.999844
methods	O	O:0.999522
and	O	O:0.999996
get	O	O:0.999986
back	O	O:0.999753
with	O	O:0.999900
results	O	O:0.999664
.	O	O:0.999939
	
But	O	O:0.999886
can	O	O:0.999957
how	O	O:0.999999
can	O	O:0.999991
I	O	O:1.000000
apply	O	O:0.974230
Cython	O	O:0.991110
to	O	O:0.999962
pandas	O	O:0.999966
?	O	O:0.999973
	
It's	O	O:0.999859
hard	O	O:0.999688
to	O	O:0.999985
declare	O	O:0.999967
type	O	O:0.998239
.	O	O:0.999915
	
Summarizing	O	O:0.999125
the	O	O:0.999910
comments	O	O:0.999462
,	O	O:0.999994
for	O	O:0.999994
a	O	O:0.999997
dataframe	B-API	O:0.992532
of	O	O:0.999997
this	O	O:0.999937
size	O	O:0.999973
,	O	O:0.999997
using	O	O:0.999939
`	O	O:0.999877
apply	O	B-API:0.995951
`	O	O:0.999825
will	O	O:0.998022
not	O	O:0.999998
differ	O	O:0.999970
much	O	O:0.999257
in	O	O:0.999987
performance	O	O:0.999900
compared	O	O:0.999885
to	O	O:0.999996
using	O	O:0.999998
vectorized	O	O:0.995875
functions	O	O:0.994767
(	O	O:0.999983
working	O	O:0.999758
on	O	O:0.999983
the	O	O:0.999994
full	O	O:0.999916
column	O	O:0.999904
)	O	O:0.999984
,	O	O:0.999985
but	O	O:0.999990
when	O	O:0.999945
your	O	O:0.999978
real	O	O:0.999660
dataframe	B-API	O:0.998748
becomes	O	O:0.998850
larger	O	O:0.999410
,	O	O:0.999942
it	O	O:0.999960
will	O	O:0.999633
.	O	O:0.999979
	
Indeed	O	O:0.999658
,	O	O:0.999993
I	O	O:0.999987
get	O	O:0.999963
201us	O	O:0.987832
(	O	O:0.999993
np	O	O:0.999509
)	O	O:0.999959
vs	O	O:0.999936
208us	O	O:0.992786
(	O	O:0.999988
math	O	O:0.999802
)	O	O:0.999992
,	O	O:0.999994
so	O	O:0.999990
almost	O	O:0.999933
the	O	O:0.999998
same	O	O:0.999651
for	O	O:0.999990
this	O	O:0.999921
dataframe	B-API	O:0.989360
,	O	O:0.999987
but	O	O:0.999982
for	O	O:0.999995
a	O	O:0.999985
larger	O	O:0.994847
one	O	O:0.998844
(	O	O:0.999992
this	O	O:0.999980
one	O	O:0.999990
100	O	O:0.999953
times	O	O:0.999954
repeated	O	O:0.999593
)	O	O:0.999982
,	O	O:0.999992
numpy	O	O:0.999593
is	O	O:0.999986
clearly	O	O:0.998780
faster	O	O:0.999935
than	O	O:0.999832
using	O	O:0.999757
apply	O	B-API:0.928659
.	O	O:0.994180
	
Also	O	O:0.999621
for	O	O:0.999987
the	O	O:0.999929
concatenation	O	O:0.999141
,	O	O:0.999988
for	O	O:0.999994
this	O	O:0.999874
dataframe	B-API	O:0.997575
,	O	O:0.999998
using	O	O:0.999941
apply	O	B-API:0.994746
is	O	O:0.999481
not	O	O:0.999303
slower	O	O:0.998683
(	O	O:0.999996
even	O	O:0.999942
a	O	O:0.999999
bit	O	O:0.999630
faster	O	O:0.999670
500	O	O:0.999603
vs	O	O:0.999926
700	O	O:0.999733
us	O	O:0.999860
)	O	O:0.999889
,	O	O:0.999961
but	O	O:0.999962
for	O	O:0.999984
larger	O	O:0.999376
dataframes	O	O:0.991003
(	O	O:0.999980
7000	O	O:0.999982
rows	O	O:0.999102
)	O	O:0.999987
it	O	O:0.999980
is	O	O:0.999991
again	O	O:0.999909
clearly	O	O:0.999545
slower	O	O:0.996947
(	O	O:0.999910
200	O	O:0.999825
vs	O	O:0.999928
80	O	O:0.999889
ms	O	O:0.999877
)	O	O:0.999955
.	O	O:0.999861
	
Regarding	O	O:0.999087
to	O	O:0.999959
the	O	O:0.999998
performance	O	O:0.999868
,	O	O:0.999992
I	O	O:0.999999
just	O	O:0.999967
notice	O	O:0.999962
if	O	O:0.999994
I	O	O:0.999991
use	O	O:0.999972
the	O	O:0.999874
vectorized	O	O:0.998608
functions	O	O:0.999858
,	O	O:0.999983
I	O	O:0.999997
may	O	O:0.999996
cause	O	O:0.999743
a	O	O:0.999993
memoryError	O	O:0.995325
(	O	O:0.999983
I	O	O:0.999998
have	O	O:0.999961
3G	O	O:0.999882
ram	O	O:0.999885
)	O	O:0.999978
but	O	O:0.999930
apply	O	B-API:0.523351
does	O	O:0.998523
not	O	O:0.999990
have	O	O:0.999997
such	O	O:0.999995
a	O	O:0.999996
problem	O	O:0.987072
.	O	O:0.999838
	
So	O	O:0.999966
I	O	O:0.999996
think	O	O:0.999958
the	O	O:0.999982
vectorized	O	O:0.999036
functions	O	O:0.999639
are	O	O:0.999974
reading	O	O:0.999973
everything	O	O:0.999391
in	O	O:0.999986
memory	O	O:0.999878
right	O	O:0.999765
?	O	O:0.999967
	
The	O	O:0.999940
original	O	O:0.999780
file	O	O:0.999701
is	O	O:0.999991
about	O	O:0.999870
12M	O	O:0.999154
in	O	O:0.999925
size	O	O:0.999875
,	O	O:0.999996
above	O	O:0.999574
is	O	O:0.999996
just	O	O:0.999901
a	O	O:0.999999
sample	O	O:0.999107
section	O	O:0.999904
of	O	O:0.999989
the	O	O:0.999979
file	O	O:0.999661
	
When	O	O:0.999782
using	O	O:0.999957
`	O	O:0.999955
apply	O	B-API:0.996153
`	O	O:0.999967
the	O	O:0.998800
id	O	O:0.999754
generation	O	O:0.998693
is	O	O:0.999983
performed	O	O:0.999865
per	O	O:0.999950
row	O	O:0.999977
resulting	O	O:0.999235
in	O	O:0.999976
minimal	O	O:0.999634
overhead	O	O:0.999723
in	O	O:0.999939
memory	O	O:0.999773
allocation	O	O:0.999776
.	O	O:0.999867
	
yeah	O	O:0.997137
,	O	O:0.999998
this	O	O:0.999786
way	O	O:0.999916
works	O	O:0.999652
,	O	O:0.999991
but	O	O:0.999858
in	O	O:0.999988
this	O	O:0.999743
thread	O	O:0.999941
,	O	O:0.999973
#URL	O	O:0.999865
it	O	O:0.999905
is	O	O:0.999994
said	O	O:0.999829
the	O	O:0.999993
vectorized	O	O:0.997159
function	O	O:0.999691
is	O	O:0.999963
faster	O	O:0.999844
than	O	O:0.999950
using	O	O:0.999846
apply	O	B-API:0.741253
call	O	O:0.878112
,	O	O:0.999935
and	O	O:0.999939
from	O	O:0.999922
my	O	O:0.999910
experiments	O	O:0.999733
it	O	O:0.999976
seems	O	O:0.999973
true	O	O:0.999282
.	O	O:0.999913
	
The	O	O:0.999979
vectorized	O	O:0.999320
functions	O	O:0.999943
tend	O	O:0.999732
to	O	O:0.999986
use	O	O:0.999997
more	O	O:0.998549
memory	O	O:0.999920
than	O	O:0.999887
apply	O	O:0.816773
call	O	O:0.980406
,	O	O:0.999931
but	O	O:0.999840
the	O	O:0.999967
confusion	O	O:0.998196
is	O	O:0.999999
that	O	O:0.999808
I	O	O:0.999999
still	O	O:0.999974
have	O	O:0.999960
lots	O	O:0.999943
of	O	O:0.999993
memory	O	O:0.999953
left	O	O:0.999894
when	O	O:0.999571
the	O	O:0.999992
memory	O	O:0.999894
error	O	O:0.999280
occurs	O	O:0.999305
	
I	O	O:0.999976
can	O	O:0.999985
reproduce	O	O:0.999846
the	O	O:0.999991
memory	O	O:0.999635
problem	O	O:0.999343
.	O	O:0.999899
	
Still	O	O:0.999779
investigating	O	O:0.998988
further	O	O:0.997578
but	O	O:0.999966
no	O	O:0.999993
luck	O	O:0.999771
on	O	O:0.999991
faster	O	O:0.999827
approaches	O	O:0.999791
.	O	O:0.999615
	
Also	O	O:0.999669
timed	O	O:0.999837
the	O	O:0.999982
apply	O	B-API:0.879208
solution	O	O:0.991558
and	O	O:0.999949
it	O	O:0.999992
takes	O	O:0.999765
about	O	O:0.999949
5	O	O:0.999928
minutes	O	O:0.999406
with	O	O:0.999967
500k	O	O:0.999923
rows	O	O:0.999060
	
Sorry	O	O:0.999619
,	O	O:0.999992
I	O	O:0.999985
can	O	O:0.999992
also	O	O:0.999982
reproduce	O	O:0.999983
it	O	O:0.999933
on	O	O:0.999990
0.13.1	O	O:0.999706
,	O	O:0.999985
but	O	O:0.999987
the	O	O:0.999956
issue	O	O:0.999572
does	O	O:0.999767
not	O	O:0.999991
occur	O	O:0.999844
in	O	O:0.999990
0.12	O	O:0.999565
or	O	O:0.999955
in	O	O:0.999911
0.14	O	O:0.997352
(	O	O:0.999987
released	O	O:0.999893
yesterday	O	O:0.999697
)	O	O:0.999990
,	O	O:0.999983
so	O	O:0.999986
it	O	O:0.999991
seems	O	O:0.999990
a	O	O:0.999996
bug	O	O:0.999291
in	O	O:0.999939
0.13	O	O:0.996745
.	O	O:0.999822
	
So	O	O:0.999953
,	O	O:0.999997
maybe	O	O:0.999969
try	O	O:0.999975
to	O	O:0.999992
upgrade	O	O:0.999997
your	O	O:0.999908
pandas	O	O:0.999760
version	O	O:0.999990
,	O	O:0.999993
as	O	O:0.999994
the	O	O:0.999955
vectorized	O	O:0.999446
way	O	O:0.999550
is	O	O:0.999991
much	O	O:0.999715
faster	O	O:0.999866
as	O	O:0.999987
the	O	O:0.999766
apply	O	B-API:0.978123
(	O	O:0.999714
5s	O	O:0.998502
vs	O	O:0.999821
>	O	O:0.999950
1min	O	O:0.998787
on	O	O:0.999987
my	O	O:0.999983
machine	O	O:0.999918
)	O	O:0.999985
,	O	O:0.999962
*	O	O:0.999979
and	O	O:0.999977
*	O	O:0.999997
using	O	O:0.999908
less	O	O:0.993788
peak	O	O:0.996349
memory	O	O:0.991346
(	O	O:0.999989
200Mb	O	O:0.999678
vs	O	O:0.999971
980Mb	O	O:0.998881
,	O	O:0.999994
with	O	O:0.999823
`	O	O:0.999984
%memit	O	O:0.999443
`)	O	O:0.999987
on	O	O:0.999925
0.14	O	O:0.998693
.	O	O:0.999891
	
So	O	O:0.999953
,	O	O:0.999997
maybe	O	O:0.999969
try	O	O:0.999975
to	O	O:0.999992
upgrade	O	O:0.999997
your	O	O:0.999908
pandas	O	O:0.999760
version	O	O:0.999990
,	O	O:0.999993
as	O	O:0.999994
the	O	O:0.999955
vectorized	O	O:0.999446
way	O	O:0.999550
is	O	O:0.999991
much	O	O:0.999715
faster	O	O:0.999866
as	O	O:0.999987
the	O	O:0.999766
apply	O	B-API:0.978123
(	O	O:0.999714
5s	O	O:0.998502
vs	O	O:0.999821
>	O	O:0.999950
1min	O	O:0.998787
on	O	O:0.999987
my	O	O:0.999977
machine	O	O:0.999920
)	O	O:0.999981
,	O	O:0.999981
and	O	O:0.999996
using	O	O:0.999955
less	O	O:0.984912
peak	O	O:0.997166
memory	O	O:0.989286
(	O	O:0.999989
200Mb	O	O:0.999678
vs	O	O:0.999970
980Mb	O	O:0.998865
,	O	O:0.999988
with	O	O:0.999939
%memit	O	O:0.999643
)	O	O:0.999988
on	O	O:0.999959
0.14	O	O:0.998746
	
Can	O	O:0.999777
I	O	O:0.999995
apply	O	O:0.967614
a	O	O:0.998293
function	O	O:0.999168
that	O	O:0.999921
uses	O	O:0.999772
'	O	O:0.999987
shift	O	B-API:0.743467
'	O	O:0.999977
on	O	O:0.999997
a	O	O:0.999999
grouped	O	O:0.999790
data	O	O:0.999969
frame	O	O:0.999987
,	O	O:0.999984
and	O	O:0.999997
return	O	O:0.999690
a	O	O:0.999987
simple	O	O:0.999792
data	O	O:0.999974
frame	O	O:0.999998
from	O	O:0.999972
pandas	O	O:0.999724
?	O	O:0.999984
	
You	O	O:0.999952
can	O	O:0.999929
use	O	O:0.999997
the	O	O:0.999930
`	O	O:0.999866
TimeGrouper	O	O:0.638710
`	O	O:0.999978
function	O	O:0.999636
in	O	O:0.999998
a	O	O:0.999981
`	O	O:0.999882
groupy	O	O:0.628770
/	O	O:0.999985
apply	O	B-API:0.956265
`	O	O:0.999517
.	O	O:0.998275
	
With	O	O:0.999938
a	O	O:0.999982
`	O	O:0.999885
TimeGrouper	O	O:0.710856
`	O	O:0.999992
you	O	O:0.999822
don't	O	O:0.999996
need	O	O:0.999992
to	O	O:0.999999
create	O	O:0.999998
your	O	O:0.999933
period	O	O:0.999921
column	O	O:0.999915
.	O	O:0.999943
	
I	O	O:0.999968
know	O	O:0.999455
you're	O	O:0.999427
not	O	O:0.999986
trying	O	O:0.999995
to	O	O:0.999986
compute	O	O:0.999862
the	O	O:0.999992
mean	O	O:0.999456
but	O	O:0.999972
I	O	O:0.999996
will	O	O:0.999924
use	O	O:0.999936
it	O	O:0.999980
as	O	O:0.999991
an	O	O:0.999926
example	O	O:0.997714
:	O	O:0.999947
#CODE	O	O:0.999859
	
Or	O	O:0.999973
an	O	O:0.999986
example	O	O:0.999965
with	O	O:0.999940
an	O	O:0.999993
explicit	O	O:0.999782
`	O	O:0.999985
apply	O	B-API:0.994421
`	O	O:0.999552
:	O	O:0.999303
#CODE	O	O:0.999898
	
It	O	O:0.999873
works	O	O:0.999875
because	O	O:0.999968
the	O	O:0.999955
groupby	B-API	B-API:0.909389
here	O	O:0.999697
with	O	O:0.999896
as_index=False	O	O:0.999650
actually	O	O:0.999914
returns	O	O:0.999603
the	O	O:0.999934
period	O	O:0.999879
column	O	O:0.999948
you	O	O:0.999999
want	O	O:0.999991
as	O	O:0.999997
the	O	O:0.999998
part	O	O:0.999817
of	O	O:0.999970
the	O	O:0.999966
multiindex	O	O:0.999932
and	O	O:0.999983
I	O	O:0.999999
just	O	O:0.999944
grab	O	O:0.998005
that	O	O:0.999986
part	O	O:0.999977
of	O	O:0.999990
the	O	O:0.999957
multiindex	O	O:0.999902
and	O	O:0.999992
assign	O	O:0.999855
to	O	O:0.999995
a	O	O:1.000000
new	O	O:0.999928
column	O	O:0.999878
in	O	O:0.999988
the	O	O:0.999983
orginal	O	O:0.999057
dataframe	B-API	O:0.992403
.	O	O:0.999874
	
You	O	O:0.999904
could	O	O:0.999928
do	O	O:0.999999
anything	O	O:0.999943
in	O	O:0.999971
the	O	O:0.999981
apply	O	B-API:0.576483
,	O	O:0.999941
I	O	O:0.999995
just	O	O:0.999976
want	O	O:0.999586
the	O	O:0.999834
index	O	O:0.998511
:	O	O:0.999956
#CODE	O	O:0.999924
	
Yes	O	O:0.999730
,	O	O:0.999992
you	O	O:0.999976
can	O	O:0.999976
do	O	O:1.000000
it	O	O:0.999997
in	O	O:0.999994
an	O	O:0.999985
apply	O	B-API:0.654178
.	O	O:0.998842
	
Just	O	O:0.999858
do	O	O:0.999992
a	O	O:0.999995
groupby	B-API	B-API:0.997323
in	O	O:0.999996
a	O	O:0.999886
function	O	O:0.999933
that	O	O:0.999954
the	O	O:0.999998
first	O	O:0.999616
groupby	B-API	B-API:0.972736
/	O	O:0.999942
apply	O	B-API:0.808402
calls	O	O:0.991317
	
@USER	O	O:0.999573
you	O	O:0.999968
could	O	O:0.999960
use	O	O:0.999999
a	O	O:0.999668
function	O	O:0.998112
and	O	O:0.999988
apply	O	O:0.727850
it	O	O:0.999555
to	O	O:0.999941
the	O	O:0.999998
dataframe	B-API	O:0.986023
but	O	O:0.999853
I'm	O	O:0.999985
not	O	O:0.999996
sure	O	O:0.999951
you	O	O:0.999929
would	O	O:0.999991
save	O	O:0.999900
much	O	O:0.999960
time	O	O:0.999957
,	O	O:0.999991
it	O	O:0.999987
would	O	O:0.999969
depend	O	O:0.999958
on	O	O:0.999991
how	O	O:0.999982
many	O	O:0.999985
unique	O	O:0.879644
ids	O	O:0.909927
there	O	O:0.999898
were	O	O:0.999969
,	O	O:1.000000
once	O	O:0.999964
you	O	O:0.999998
have	O	O:0.999991
created	O	O:0.999975
the	O	O:0.999998
dicts	O	O:0.999969
then	O	O:0.999946
using	O	O:0.999997
`	O	O:0.999925
map	O	B-API:0.997982
`	O	O:0.999960
is	O	O:0.999951
really	O	O:0.999815
fast	O	O:0.998678
	
It's	O	O:0.999927
a	O	O:0.999996
reasonable	O	O:0.999191
way	O	O:0.999961
to	O	O:0.999970
do	O	O:0.999995
it	O	O:0.999974
.	O	O:0.999899
	
You	O	O:0.999925
could	O	O:0.999949
change	O	O:0.999927
the	O	O:0.999994
apply	O	B-API:0.682472
a	O	O:0.999958
little	O	O:0.997014
to	O	O:0.999996
only	O	O:0.999997
return	O	O:0.999946
a	O	O:0.999984
`	O	O:0.999985
ranks	O	O:0.988071
`	O	O:0.999981
Series	O	O:0.997523
.	O	O:0.999929
	
That	O	O:0.999710
would	O	O:0.999981
allow	O	O:0.999962
you	O	O:0.999989
to	O	O:0.999998
just	O	O:0.999999
assign	O	O:0.999981
a	O	O:0.999996
new	O	O:0.999691
`	O	O:0.999996
ranks	O	O:0.996306
`	O	O:0.999998
column	O	O:0.999716
to	O	O:0.999998
the	O	O:1.000000
original	O	O:0.999909
dataframe	B-API	O:0.999723
as	O	O:0.999999
the	O	O:0.999996
result	O	O:0.999942
of	O	O:0.999992
the	O	O:0.999923
`	O	O:0.999983
groupby	B-API	B-API:0.996744
/	O	O:0.999985
apply	O	B-API:0.941564
`	O	O:0.999520
.	O	O:0.998278
	
But	O	O:0.999990
your	O	O:0.999713
way	O	O:0.999746
works	O	O:0.999967
just	O	O:0.999847
fine	O	O:0.999761
.	O	O:0.999880
	
I	O	O:0.999946
am	O	O:0.999997
struggling	O	O:0.998794
to	O	O:0.999983
set	O	O:0.999996
xlim	O	O:0.526374
for	O	O:0.999982
each	O	O:0.997603
histogram	O	O:0.999814
and	O	O:0.999997
create	O	O:0.999632
1	O	O:0.999991
column	O	O:0.999981
of	O	O:0.999995
graphs	O	O:0.999731
so	O	O:0.999992
the	O	O:0.999985
x-axis	O	O:0.999871
ticks	O	O:0.999684
are	O	O:0.999986
aligned	O	O:0.999592
.	O	O:0.999773
	
Being	O	O:0.998933
new	O	O:0.999896
pandas	O	O:0.999814
,	O	O:0.999995
I	O	O:0.999987
am	O	O:0.999999
unsure	O	O:0.999533
of	O	O:0.999992
how	O	O:0.999959
to	O	O:0.999998
apply	O	O:0.976905
answer	O	O:0.998397
applies	O	O:0.991176
:	O	O:0.999916
Overlaying	O	O:0.999840
multiple	O	O:0.999918
histograms	O	O:0.999759
using	O	O:0.999900
pandas	O	O:0.996890
.	O	O:0.999519
	
#CODE	O	O:0.998453
	
The	O	O:0.999854
layout	O	O:0.998929
option	O	O:0.999060
is	O	O:0.999991
very	O	O:0.998795
helpful	O	O:0.998915
.	O	O:0.999800
	
However	O	O:0.999726
,	O	O:0.999992
the	O	O:0.999987
bin	O	O:0.999484
setting	O	O:0.999811
seems	O	O:0.999821
to	O	O:0.999999
only	O	O:0.999999
apply	O	O:0.838053
to	O	O:0.999968
the	O	O:0.999999
range	O	O:0.999986
of	O	O:0.999988
data	O	O:0.999878
not	O	O:0.999998
the	O	O:0.999998
entire	O	O:0.999412
interval	O	O:0.999977
that	O	O:0.999968
we	O	O:0.999999
display	O	O:0.999859
using	O	O:0.999872
xlim	O	B-API:0.984857
.	O	O:0.998830
	
For	O	O:0.999926
example	O	O:0.999694
,	O	O:0.999995
say	O	O:0.999992
that	O	O:0.999942
I'd	O	O:0.999999
like	O	O:0.999989
to	O	O:0.999995
bucket	O	O:0.999988
the	O	O:0.999997
counts	O	O:0.999783
over	O	O:0.999838
[	O	O:0.999973
-1	O	O:0.999980
,	O	O:0.999982
1	O	O:0.999948
]	O	O:0.999983
with	O	O:0.999940
a	O	O:0.999999
total	O	O:0.999725
of	O	O:0.999984
10	O	O:0.999916
buckets	O	O:0.999911
;	O	O:0.999997
then	O	O:0.999947
the	O	O:1.000000
values	O	O:0.999971
from	O	O:0.999902
0	O	O:0.999988
to	O	O:0.999980
0.2	O	O:0.999842
should	O	O:0.999963
be	O	O:0.999995
in	O	O:0.999999
a	O	O:0.999995
single	O	O:0.999296
bucket	O	O:0.997915
,	O	O:0.999968
but	O	O:0.999905
that's	O	O:0.999880
not	O	O:0.999992
the	O	O:0.999998
case	O	O:0.999856
with	O	O:0.999904
bins=10	O	O:0.999107
.	O	O:0.999915
	
Any	O	O:0.999824
idea	O	O:0.998471
why	O	O:0.999903
not	O	O:0.999929
?	O	O:0.999988
	
jeff	O	O:0.998371
,	O	O:0.999987
i	O	O:0.999963
getting	O	O:0.999874
the	O	O:0.999873
output	O	O:0.999604
i	O	O:0.999959
want	O	O:0.999801
.	O	O:0.999801
	
I	O	O:0.999989
just	O	O:0.999984
want	O	O:0.999944
to	O	O:0.999982
see	O	O:1.000000
if	O	O:0.999998
another	O	O:0.999952
way	O	O:0.999981
exist	O	O:0.999448
with	O	O:0.999984
pandas	O	O:0.999798
,	O	O:0.999999
like	O	O:0.999954
apply	O	O:0.706857
or	O	O:0.999917
shift	O	B-API:0.949202
.	O	O:0.999776
	
I	O	O:0.999832
tried	O	O:0.999524
but	O	O:0.999499
i	O	O:0.999871
couldn't	O	O:0.999878
figure	O	O:0.999658
out	O	O:0.999840
	
Once	O	O:0.999729
you	O	O:0.999939
understood	O	O:0.999955
what	O	O:0.999832
happened	O	O:0.999946
here	O	O:0.999870
,	O	O:0.999992
I'm	O	O:0.999993
sure	O	O:0.999919
you	O	O:0.999988
can	O	O:0.999986
apply	O	O:0.998613
this	O	O:0.999933
to	O	O:0.999992
find	O	O:0.999996
the	O	O:0.999998
maximum	O	O:0.999906
of	O	O:0.999915
'	O	O:0.999961
t1	O	O:0.999867
'	O	O:0.999915
.	O	O:0.999863
	
Udate	O	O:0.997460
:	O	O:0.999969
If	O	O:0.999995
you	O	O:0.999985
don't	O	O:0.999991
want	O	O:0.999990
to	O	O:0.999996
depend	O	O:0.999995
on	O	O:0.999993
the	O	O:0.999995
column	O	O:0.999986
order	O	O:0.999941
,	O	O:0.999998
you	O	O:0.999986
can	O	O:0.999998
also	O	O:1.000000
specify	O	O:0.999993
the	O	O:0.999991
values	O	O:0.999709
to	O	O:0.999985
use	O	O:0.999999
to	O	O:0.999988
fill	O	O:0.999556
for	O	O:0.999997
each	O	O:0.998223
row	O	O:0.999250
(	O	O:0.999996
like	O	O:0.999878
`	O	O:0.999965
.fillna	B-API	B-API:0.997657
(	O	O:0.999992
value	O	O:0.999877
=d	O	O:0.999932
f	O	O:0.999868
[	O	O:0.999943
'	O	O:0.999955
D	O	O:0.999923
']`)	O	O:0.999117
.	O	O:0.999324
	
The	O	O:0.999987
only	O	O:0.999878
problem	O	O:0.999429
is	O	O:0.999988
that	O	O:0.999951
this	O	O:0.999988
only	O	O:0.999960
works	O	O:0.999911
for	O	O:0.999928
Series	O	O:0.989374
(	O	O:0.999968
when	O	O:0.999833
it	O	O:0.999977
is	O	O:0.999999
a	O	O:0.999986
dataframe	B-API	O:0.988675
,	O	O:0.999984
it	O	O:0.999996
tries	O	O:0.999894
to	O	O:0.999986
map	O	O:0.832769
the	O	O:0.999998
different	O	O:0.999940
values	O	O:0.999739
to	O	O:0.999997
fill	O	O:0.999950
to	O	O:0.999995
the	O	O:1.000000
different	O	O:0.999979
columns	O	O:0.999725
,	O	O:0.999997
not	O	O:0.999998
the	O	O:0.999999
rows	O	O:0.999332
)	O	O:0.999976
.	O	O:0.999953
	
So	O	O:0.999969
with	O	O:0.999976
an	O	O:0.999989
apply	O	O:0.701963
to	O	O:0.999895
do	O	O:0.999993
it	O	O:0.999998
column	O	O:0.999975
by	O	O:0.999995
column	O	O:0.999865
,	O	O:0.999969
it	O	O:0.999920
works	O	O:0.999094
:	O	O:0.999977
#CODE	O	O:0.999768
	
`	O	O:0.999961
Cannot	O	O:0.999709
access	O	O:0.999881
callable	O	O:0.999634
attribute	O	O:0.999921
'	O	O:0.999874
reset_index	B-API	B-API:0.960986
'	O	O:0.999980
of	O	O:0.999882
'	O	O:0.999934
DataFrameGroupBy	B-API	B-API:0.739816
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999815
apply	O	B-API:0.953059
'	O	O:0.999516
method	O	O:0.999539
`	O	O:0.999946
	
Thanks	O	O:0.999813
a	O	O:0.999978
lot	O	O:0.998291
!	O	O:0.999842
	
My	O	O:0.999865
fault	O	O:0.999433
was	O	O:0.999865
,	O	O:0.999998
that	O	O:0.999925
I	O	O:0.999977
did	O	O:0.999987
not	O	O:0.999905
realize	O	O:0.999685
,	O	O:0.999998
that	O	O:0.999942
I	O	O:0.999999
have	O	O:0.999995
to	O	O:0.999987
apply	O	O:0.998026
some	O	O:0.998819
function	O	O:0.999865
to	O	O:0.999993
the	O	O:0.999997
groupby	B-API	B-API:0.955781
dataframe	B-API	O:0.997203
,	O	O:0.999996
like	O	O:0.999968
`	O	O:0.999991
.size()	B-API	B-API:0.999144
`	O	O:0.999995
,	O	O:0.999970
to	O	O:0.999998
work	O	O:0.999989
with	O	O:0.999922
it	O	O:0.999992
...	O	O:0.999871
	
#CODE	O	O:0.998453
	
Then	O	O:0.999863
you	O	O:0.999999
can	O	O:0.999996
select	O	O:0.999994
the	O	O:1.000000
rows	O	O:0.999730
you	O	O:0.999992
want	O	O:0.999992
in	O	O:0.999997
an	O	O:0.999997
apply	O	O:0.925130
call	O	O:0.992666
on	O	O:0.999960
the	O	O:0.999758
grouped	O	O:0.993337
object	O	O:0.998492
:	O	O:0.999934
#CODE	O	O:0.999875
	
If	O	O:0.999971
you	O	O:0.999989
have	O	O:0.999982
one	O	O:0.999995
large	O	O:0.999876
dataframe	B-API	O:0.989758
and	O	O:0.999997
only	O	O:0.999993
a	O	O:0.999990
few	O	O:0.999830
update	O	O:0.999879
values	O	O:0.999491
I	O	O:0.999981
would	O	O:0.999991
use	O	O:0.999930
apply	O	B-API:0.567162
like	O	O:0.998470
this	O	O:0.997665
:	O	O:0.999972
#CODE	O	O:0.999825
	
OK	O	O:0.999826
,	O	O:0.999996
first	O	O:0.999876
problem	O	O:0.999277
is	O	O:0.999989
you	O	O:0.999983
have	O	O:0.999991
embedded	O	O:0.999979
spaces	O	O:0.999804
causing	O	O:0.999798
the	O	O:0.999950
function	O	O:0.999717
to	O	O:0.999985
incorrectly	O	O:0.999986
apply	O	B-API:0.759582
:	O	O:0.999326
	
So	O	O:0.999980
you	O	O:0.999977
can	O	O:0.999993
call	O	O:0.999961
`	O	O:0.999998
replace	O	B-API:0.512101
`	O	O:0.999998
instead	O	O:0.999928
of	O	O:0.999998
calling	O	O:0.998318
`	O	O:0.999988
apply	O	B-API:0.997435
`	O	O:0.999499
:	O	O:0.999308
#CODE	O	O:0.999898
	
@USER	O	O:0.999555
so	O	O:0.999873
is	O	O:0.999983
`	O	O:0.999987
replace	O	O:0.922595
`	O	O:0.999992
faster	O	O:0.999310
than	O	O:0.999943
calling	O	O:0.998663
`	O	O:0.999950
map	O	B-API:0.991025
`	O	O:0.999993
or	O	O:0.999752
`	O	O:0.999992
apply	O	B-API:0.979595
`	O	O:0.999837
and	O	O:0.999951
passing	O	O:0.999896
a	O	O:0.999941
dict	O	O:0.998548
now	O	O:0.999882
?	O	O:0.999976
	
Wasn't	O	O:0.999896
aware	O	O:0.999916
of	O	O:0.999966
`	O	O:0.999909
factorize	O	B-API:0.984729
`	O	O:0.999997
also	O	O:0.999637
,	O	O:1.000000
when	O	O:0.996978
was	O	O:0.999980
this	O	O:0.999973
introduced	O	O:0.999759
?	O	O:0.999940
	
My	O	O:0.999973
tentative	O	O:0.999661
solution	O	O:0.999406
is	O	O:0.999992
to	O	O:0.999969
apply	O	O:0.993028
this	O	O:0.998976
function	O	O:0.999516
after	O	O:0.999895
reading	O	O:0.987741
:	O	O:0.999765
#CODE	O	O:0.999798
	
Now	O	O:0.999958
you	O	O:0.999981
can	O	O:0.999989
use	O	O:0.999999
an	O	O:0.999982
apply	O	B-API:0.568007
with	O	O:0.994872
zip	O	O:0.893107
:	O	O:0.999968
#CODE	O	O:0.999634
	
I	O	O:0.999990
have	O	O:0.999987
applied	O	O:0.998361
dropna	B-API	B-API:0.994917
(	O	O:0.999883
how=	O	O:0.999433
'	O	O:0.999985
all	O	O:0.999947
')	O	O:0.999980
,	O	O:0.999921
which	O	O:0.999910
makes	O	O:0.999815
my	O	O:0.999982
example	O	O:0.999866
misleading	O	O:0.999346
.	O	O:0.999838
	
However	O	O:0.999840
,	O	O:0.999990
I	O	O:0.999978
am	O	O:0.999988
not	O	O:0.999923
willing	O	O:0.999914
to	O	O:0.999992
apply	O	O:0.851576
dropna	B-API	B-API:0.999162
(	O	O:0.999793
how=	O	O:0.999400
'	O	O:0.999990
any	O	O:0.999955
')	O	O:0.999937
,	O	O:0.999985
since	O	O:0.999952
I	O	O:0.999973
do	O	O:0.999997
not	O	O:0.999976
want	O	O:0.999960
to	O	O:0.999993
lose	O	O:0.999996
valid	O	O:0.999958
data	O	O:0.999970
just	O	O:0.999949
because	O	O:0.999999
a	O	O:0.999979
NaN	O	O:0.999323
sits	O	O:0.999557
in	O	O:0.999988
the	O	O:0.999991
next	O	O:0.999912
column	O	O:0.999934
over	O	O:0.999658
.	O	O:0.999867
	
Your	O	O:0.999594
suggestion	O	O:0.997300
is	O	O:0.999982
good	O	O:0.994949
.	O	O:0.999908
	
That	O	O:0.999802
being	O	O:0.999806
said	O	O:0.999740
,	O	O:0.999995
there	O	O:0.999964
still	O	O:0.999882
seems	O	O:0.999986
to	O	O:0.999997
be	O	O:1.000000
a	O	O:0.999998
fundamental	O	O:0.997602
problem	O	O:0.999706
with	O	O:0.999550
quantile	O	O:0.998502
(	O	O:0.999989
or	O	O:0.999998
so	O	O:0.999987
I	O	O:0.999997
think	O	O:0.999944
!	O	O:0.999691
)	O	O:0.999901
.	O	O:0.999775
	
the	O	O:0.999929
order	O	O:0.999577
within	O	O:0.999884
group	O	O:0.999326
apply	O	B-API:0.665126
function	O	O:0.997635
	
order	O	O:0.997606
is	O	O:0.999974
preserved	O	O:0.999361
within	O	O:0.999911
a	O	O:0.999990
group	O	O:0.989987
and	O	O:0.999993
to	O	O:0.999993
the	O	O:0.999995
subframe	O	O:0.999952
that	O	O:0.999430
is	O	O:0.999999
passed	O	O:0.999663
to	O	O:0.999996
apply	O	O:0.960861
or	O	O:0.999989
a	O	O:0.999971
reduction	O	O:0.998081
function	O	O:0.999947
.	O	O:0.999973
you	O	O:0.999983
should	O	O:0.999981
show	O	O:0.999973
what	O	O:0.999971
you	O	O:0.999983
are	O	O:0.999998
doing	O	O:0.999876
and	O	O:0.999953
why	O	O:0.999954
this	O	O:0.999046
matters	O	O:0.999470
.	O	O:0.999849
	
@USER	O	O:0.998022
it	O	O:0.999957
matters	O	O:0.999783
for	O	O:0.999995
apply	O	B-API:0.758459
functions	O	O:0.999054
like	O	O:0.999123
x	O	O:0.999934
-	O	O:0.999947
x.shift	O	O:0.881678
(	O	O:0.999977
1	O	O:0.999789
)	O	O:0.999958
.	O	O:0.999752
	
If	O	O:0.999964
order	O	O:0.995815
is	O	O:0.999976
not	O	O:0.999977
preserved	O	O:0.999812
I	O	O:0.999993
may	O	O:0.999990
get	O	O:0.999932
wrong	O	O:0.999836
answer	O	O:0.999662
.	O	O:0.999759
	
If	O	O:0.999947
you	O	O:0.999963
are	O	O:0.999999
using	O	O:0.999907
apply	O	B-API:0.864175
not	O	O:0.999805
only	O	O:0.999161
is	O	O:0.999997
the	O	O:0.999939
order	O	O:0.999086
not	O	O:0.999923
guaranteed	O	O:0.999468
,	O	O:0.999993
but	O	O:0.999942
as	O	O:0.999987
you've	O	O:0.999547
found	O	O:0.999884
it	O	O:0.999990
can	O	O:0.999935
trigger	O	O:0.999990
the	O	O:0.999978
function	O	O:0.999747
for	O	O:0.999987
the	O	O:0.999988
same	O	O:0.999940
group	O	O:0.999513
a	O	O:0.999999
couple	O	O:0.999593
of	O	O:0.999984
times	O	O:0.994331
(	O	O:0.999996
to	O	O:0.999996
decide	O	O:0.999980
which	O	O:0.999819
"	O	O:0.999986
path	O	O:0.999632
"	O	O:0.999990
to	O	O:0.999995
take	O	O:0.999954
/	O	O:0.999985
what	O	O:0.999980
type	O	O:0.999962
of	O	O:0.999996
result	O	O:0.999866
to	O	O:0.999997
return	O	O:0.999868
)	O	O:0.999933
.	O	O:0.999823
	
So	O	O:0.999963
if	O	O:0.999999
your	O	O:0.999351
function	O	O:0.999807
has	O	O:0.999965
side-effects	O	O:0.999800
don't	O	O:0.999749
do	O	O:0.999995
this	O	O:0.999856
!	O	O:0.999894
	
Apply	O	O:0.999702
styles	O	O:0.998346
while	O	O:0.999965
exporting	O	O:0.999895
to	O	O:0.999894
'	O	O:1.000000
xlsx	O	O:0.999531
'	O	O:0.999970
in	O	O:0.999995
pandas	O	O:0.999899
with	O	O:0.999945
XlsxWriter	O	O:0.998452
	
When	O	O:0.999790
using	O	O:0.999966
the	O	O:0.999966
pure	O	O:0.998176
XlsxWriter	O	O:0.999710
I	O	O:0.999982
can	O	O:0.999993
apply	O	O:0.975009
formats	O	O:0.999904
to	O	O:0.999956
cells	O	O:0.999993
what	O	O:0.999929
also	O	O:0.999940
works	O	O:0.999994
nice	O	O:0.998530
.	O	O:0.999860
	
Based	O	O:0.998962
on	O	O:0.999995
this	O	O:0.999924
new	O	O:0.999987
dataframe	B-API	O:0.999354
,	O	O:0.999993
I	O	O:0.999991
can	O	O:0.999983
group	O	O:0.999872
it	O	O:0.999998
by	O	O:0.999960
`	O	O:0.999983
ticker	O	O:0.920140
`	O	O:0.999981
and	O	O:0.999789
`	O	O:0.999993
row	O	O:0.988136
`	O	O:0.999979
,	O	O:0.999928
and	O	O:0.999998
apply	O	O:0.849083
a	O	O:0.999938
daily	O	O:0.985950
`	O	O:0.999971
resample	O	B-API:0.989380
`	O	O:0.999989
on	O	O:0.999991
each	O	O:0.999917
of	O	O:0.999994
these	O	O:0.999913
groups	O	O:0.999565
and	O	O:0.999984
`	O	O:0.999980
fillna	B-API	B-API:0.999765
`	O	O:0.999900
(	O	O:0.998912
with	O	O:0.999926
method	O	O:0.999677
'	O	O:0.999985
pad	O	O:0.999396
'	O	O:0.999984
to	O	O:0.999987
forward	O	O:0.999997
fill	O	O:0.990858
)	O	O:0.999976
#CODE	O	O:0.999379
	
@USER	O	O:0.995023
:	O	O:0.999978
Happy001	O	O:0.999902
asked	O	O:0.999966
to	O	O:0.999988
see	O	O:0.999998
the	O	O:0.999998
dtype	B-API	B-API:0.938239
of	O	O:0.999920
`	O	O:0.999910
realtime	O	O:0.997584
`	O	O:0.999972
.	O	O:0.999346
	
You	O	O:0.999785
showed	O	O:0.999713
the	O	O:0.999893
*	O	O:0.999988
type	O	O:0.999588
*	O	O:0.999997
of	O	O:0.999997
what	O	O:0.999914
you	O	O:0.999997
get	O	O:0.999997
when	O	O:0.999992
you	O	O:0.999998
select	O	O:0.999980
a	O	O:0.999999
column	O	O:0.999944
from	O	O:0.999992
a	O	O:0.999980
groupby	B-API	B-API:0.997910
object	O	O:0.997100
(	O	O:0.999371
`	O	O:0.999993
SeriesGroupBy	B-API	B-API:0.938836
`)	O	O:0.999979
,	O	O:0.999894
and	O	O:0.999995
the	O	O:0.999911
*	O	O:0.999963
type	O	O:0.999514
*	O	O:0.999998
of	O	O:0.999996
an	O	O:0.999939
unrelated	O	O:0.999948
Series	O	O:0.999621
after	O	O:0.999940
you	O	O:0.999967
apply	O	O:0.648415
`	O	O:0.999930
pd.to_datetime	B-API	B-API:0.998573
`	O	O:0.999994
to	O	O:0.999985
its	O	O:0.999999
elements	O	O:0.999923
,	O	O:0.999993
which	O	O:0.999994
by	O	O:0.999959
construction	O	O:0.999399
is	O	O:0.999880
`	O	O:0.999936
Series	O	O:0.986777
`	O	O:0.999978
.	O	O:0.999504
	
So	O	O:0.999932
far	O	O:0.999828
,	O	O:0.999993
nothing	O	O:0.999706
you've	O	O:0.999863
shown	O	O:0.998726
is	O	O:0.999996
incompatible	O	O:0.999177
with	O	O:0.999955
the	O	O:0.999973
error	O	O:0.999834
message	O	O:0.998398
`	O	O:0.999994
pandas	O	O:0.991514
`	O	O:0.999996
gave	O	O:0.998717
,	O	O:0.999967
which	O	O:0.999896
says	O	O:0.999850
that	O	O:0.999936
you're	O	O:0.999993
trying	O	O:0.999979
to	O	O:0.999998
subtract	O	O:0.999981
a	O	O:0.999991
`	O	O:0.999974
timedelta	O	O:0.970571
`	O	O:0.999998
from	O	O:0.999912
a	O	O:0.999993
`	O	O:0.999973
unicode	O	O:0.979130
`	O	O:0.999976
string	O	O:0.996180
.	O	O:0.999884
	
Instead	O	O:0.999611
,	O	O:0.999995
look	O	O:0.999848
at	O	O:0.999988
`	O	O:0.999990
df	O	O:0.998757
[	O	O:0.999952
'	O	O:0.999984
realtime	O	O:0.999867
']	O	O:0.999933
.dtype	B-API	B-API:0.997529
`	O	O:0.999917
,	O	O:0.999891
and	O	O:0.999997
`	O	O:0.999988
df	O	O:0.994618
[	O	O:0.999974
"	O	O:0.999984
realtime	O	O:0.999311
"]	O	O:0.999824
.apply	B-API	B-API:0.999295
(	O	O:0.999951
type	O	O:0.999076
)`	O	O:0.999749
.	O	O:0.999735
	
How	O	O:0.999897
to	O	O:0.999987
apply	O	O:0.967557
OLS	O	O:0.999809
from	O	O:0.999841
statsmodels	O	O:0.999214
to	O	O:0.999968
groupby	B-API	B-API:0.873836
	
So	O	O:0.999965
how	O	O:0.999983
can	O	O:0.999986
I	O	O:1.000000
go	O	O:0.999997
through	O	O:0.998950
my	O	O:0.999941
dataframe	B-API	O:0.988703
and	O	O:0.999993
apply	O	O:0.869888
sm.OLS()	O	O:0.736341
for	O	O:0.999936
each	O	O:0.998022
product_desc	O	O:0.974443
?	O	O:0.999932
	
If	O	O:0.999926
I	O	O:0.999989
understand	O	O:0.999985
you	O	O:0.999907
correctly	O	O:0.999976
,	O	O:0.999999
I	O	O:0.999997
think	O	O:0.999971
you	O	O:0.999922
can	O	O:0.999983
do	O	O:0.999999
it	O	O:0.999999
with	O	O:0.999991
a	O	O:0.999984
`	O	O:0.999911
groupby	B-API	B-API:0.994800
/	O	O:0.999983
apply	O	B-API:0.956730
`	O	O:0.999517
.	O	O:0.998278
	
It's	O	O:0.999911
a	O	O:0.999990
bit	O	O:0.999543
tricky	O	O:0.999265
.	O	O:0.999809
	
So	O	O:0.999958
I	O	O:0.999997
think	O	O:0.999975
you	O	O:0.999991
have	O	O:0.999997
data	O	O:0.999997
like	O	O:0.999986
the	O	O:0.999991
following	O	O:0.994474
:	O	O:0.999914
#CODE	O	O:0.999803
	
bypass	O	O:0.985223
read_csv	B-API	B-API:0.993868
and	O	O:0.999973
apply	O	O:0.616180
to_datetime	B-API	B-API:0.999499
after	O	O:0.996135
:	O	O:0.999731
	
I	O	O:0.999979
think	O	O:0.999971
the	O	O:0.999920
problem	O	O:0.996296
is	O	O:0.999963
`	O	O:0.999983
apply	O	B-API:0.985897
`	O	O:0.999971
expects	O	O:0.994354
to	O	O:0.999993
return	O	O:0.999949
the	O	O:0.999991
same	O	O:0.999979
number	O	O:0.999992
of	O	O:1.000000
rows	O	O:0.999931
as	O	O:0.999997
the	O	O:0.999987
input	O	O:0.999479
.	O	O:0.999874
	
You	O	O:0.999809
could	O	O:0.999975
also	O	O:0.999987
do	O	O:0.999997
it	O	O:0.999991
with	O	O:0.999988
a	O	O:0.999982
`	O	O:0.999911
groupby	B-API	B-API:0.993390
/	O	O:0.999981
apply	O	B-API:0.938138
`	O	O:0.999840
since	O	O:0.999042
it	O	O:0.999951
is	O	O:0.999999
more	O	O:0.999557
flexible	O	O:0.999551
.	O	O:0.999836
	
So	O	O:0.999993
something	O	O:0.999973
like	O	O:0.999903
the	O	O:0.999981
following	O	O:0.993645
:	O	O:0.999912
#CODE	O	O:0.999803
	
You	O	O:0.999948
can	O	O:0.999923
use	O	O:0.999993
the	O	O:0.999934
pandas	O	O:0.999462
groupby-apply	O	O:0.999359
combo	O	O:0.999683
.	O	O:0.999925
	
Group	O	O:0.998879
the	O	O:0.999986
dataframe	B-API	O:0.999427
by	O	O:0.999813
"	O	O:0.999968
Item	O	O:0.996212
"	O	O:0.999950
and	O	O:0.999977
apply	O	O:0.861608
a	O	O:0.998888
function	O	O:0.999357
that	O	O:0.999835
calculates	O	O:0.999905
the	O	O:0.999995
process	O	O:0.998957
time	O	O:0.999879
.	O	O:0.999956
	
Something	O	O:0.999547
like	O	O:0.997582
:	O	O:0.999971
#CODE	O	O:0.999814
	
@USER	O	O:0.999768
still	O	O:0.999579
I	O	O:0.999997
think	O	O:0.999914
BrenBarn	O	O:0.995450
is	O	O:0.999966
correct	O	O:0.998290
.	O	O:0.999950
	
If	O	O:0.999955
you	O	O:0.999945
are	O	O:0.999998
just	O	O:0.999981
updating	O	O:0.999995
existing	O	O:0.999858
data	O	O:0.999976
then	O	O:0.999919
the	O	O:0.999999
performance	O	O:0.999807
hit	O	O:0.998660
may	O	O:0.999988
not	O	O:0.999996
be	O	O:0.999998
an	O	O:0.999988
issue	O	O:0.999500
,	O	O:0.999971
it	O	O:0.999975
sounds	O	O:0.999964
like	O	O:0.999975
all	O	O:0.999989
you'd	O	O:0.999959
be	O	O:0.999994
doing	O	O:0.999917
would	O	O:0.999920
some	O	O:0.999950
stats	O	O:0.999938
on	O	O:0.999992
the	O	O:0.999994
updated	O	O:0.999891
values	O	O:0.999354
,	O	O:0.999994
note	O	O:0.999980
that	O	O:0.999963
groupby	B-API	B-API:0.750309
itself	O	O:0.999862
does	O	O:0.999828
nothing	O	O:0.999943
only	O	O:0.999986
when	O	O:0.999971
you	O	O:0.999997
apply	O	O:0.987900
a	O	O:0.999745
function	O	O:0.998870
does	O	O:0.999853
it	O	O:0.999994
do	O	O:0.999996
something	O	O:0.999844
.	O	O:0.999711
	
If	O	O:0.999964
you	O	O:0.999990
know	O	O:0.999885
which	O	O:0.999989
group	O	O:0.993823
is	O	O:0.999995
to	O	O:0.999975
be	O	O:0.999999
updated	O	O:0.999975
then	O	O:0.999819
you	O	O:0.999998
can	O	O:0.999996
call	O	O:0.999949
`	O	O:0.999984
get_group	B-API	B-API:0.999977
(	O	O:0.999930
'	O	O:0.999985
updated_item	O	O:0.999429
)`	O	O:0.999827
can	O	O:0.999940
call	O	O:0.999977
apply	O	O:0.882154
on	O	O:0.999722
just	O	O:0.999847
that	O	O:0.999996
group	O	O:0.997777
see	O	O:0.999927
:	O	O:0.999928
#URL	O	O:0.999594
	
You	O	O:0.999952
could	O	O:0.999852
use	O	O:0.999990
the	O	O:0.999896
`	O	O:0.999925
apply	O	B-API:0.998686
`	O	O:0.999606
method	O	O:0.994522
:	O	O:0.999975
#CODE	O	O:0.999860
	
Thanks	O	O:0.997247
!!	O	O:0.999748
	
I	O	O:0.999951
found	O	O:0.999939
my	O	O:0.999743
stupid	O	O:0.999433
mistake	O	O:0.999971
while	O	O:0.999981
using	O	O:0.999608
apply()	B-API	B-API:0.999422
.	O	O:0.997260
	
I	O	O:0.999929
did	O	O:0.999931
apply	O	B-API:0.947383
(	O	O:0.999925
wordnet.synsets()	O	O:0.915510
)	O	O:0.999911
	
For	O	O:0.999926
example	O	O:0.999693
,	O	O:0.999995
say	O	O:0.999996
that	O	O:0.999950
I	O	O:0.999998
know	O	O:0.999992
what	O	O:0.999864
slices	O	O:0.999447
I	O	O:0.999997
want	O	O:0.999986
to	O	O:0.999969
apply	O	O:0.983726
on	O	O:0.999983
each	O	O:0.999787
level	O	O:0.999953
name	O	O:0.999947
,	O	O:0.999994
e.g.	O	O:0.999963
as	O	O:0.999996
a	O	O:0.999968
dictionary	O	O:0.995556
:	O	O:0.999939
#CODE	O	O:0.999791
	
you	O	O:0.999936
could	O	O:0.999964
use	O	O:0.999998
an	O	O:0.999943
`	O	O:0.999982
apply	O	B-API:0.996615
`	O	O:0.999945
statement	O	O:0.999848
to	O	O:0.999995
select	O	O:0.999984
the	O	O:0.999996
values	O	O:0.999869
from	O	O:0.999974
the	O	O:0.999997
correct	O	O:0.999957
columns	O	O:0.999741
.	O	O:0.999958
	
I	O	O:0.999958
now	O	O:0.999953
would	O	O:0.999980
like	O	O:0.999994
to	O	O:0.999999
combine	O	O:0.999950
the	O	O:0.999967
'	O	O:0.999931
Day	O	O:0.999055
'	O	O:0.999923
and	O	O:0.999937
'	O	O:0.999982
Hour	O	O:0.998790
'	O	O:0.999988
columns	O	O:0.999930
into	O	O:0.999886
one	O	O:0.999970
'	O	O:0.999942
Date	O	O:0.995027
'	O	O:0.999955
index	O	O:0.999907
column	O	O:0.999765
.	O	O:0.999959
	
I	O	O:0.999946
did	O	O:0.999990
a	O	O:0.999986
lot	O	O:0.999791
of	O	O:0.999974
searching	O	O:0.998442
and	O	O:0.999996
so	O	O:0.999989
far	O	O:0.999775
I	O	O:0.999998
have	O	O:0.999990
only	O	O:0.999969
seen	O	O:0.999879
solutions	O	O:0.999974
that	O	O:0.999914
are	O	O:0.999999
based	O	O:0.999921
on	O	O:0.999875
pd.read_csv	B-API	B-API:0.992063
and	O	O:0.999962
pd.read_table	B-API	B-API:0.978588
.	O	O:0.999118
	
However	O	O:0.999875
,	O	O:0.999989
as	O	O:0.999999
this	O	O:0.999292
is	O	O:0.999998
a	O	O:0.999968
series	O	O:0.989803
(	O	O:0.999984
not	O	O:0.999992
a	O	O:0.999997
dataframe	B-API	O:0.991842
/	O	O:0.999988
csv	O	O:0.999403
/	O	O:0.999996
excel	O	O:0.998893
)	O	O:0.999983
,	O	O:0.999994
these	O	O:0.999973
solutions	O	O:0.999475
do	O	O:0.999944
not	O	O:0.999995
seem	O	O:0.999903
to	O	O:0.999991
apply	O	O:0.915670
.	O	O:0.999400
	
use	O	O:0.998823
``	O	O:0.999539
apply	O	B-API:0.989465
``	O	O:0.999798
ONLY	O	O:0.993683
as	O	O:0.999998
a	O	O:0.999991
last	O	O:0.995439
resort	O	O:0.995765
(	O	O:0.999978
e.g.	O	O:0.999819
you	O	O:0.999960
can't	O	O:0.999949
do	O	O:0.999996
vectorized	O	O:0.999965
things	O	O:0.999121
)	O	O:0.999987
.	O	O:0.999993
even	O	O:0.999940
if	O	O:0.999998
you	O	O:0.999997
have	O	O:0.999992
a	O	O:0.999999
very	O	O:0.999595
complicated	O	O:0.999566
function	O	O:0.999977
to	O	O:0.999991
do	O	O:0.999999
,	O	O:0.999998
you	O	O:0.999970
can	O	O:0.999994
often	O	O:0.999986
do	O	O:0.999999
vectorized	O	O:0.999938
calculations	O	O:0.999239
on	O	O:0.999998
most	O	O:0.999879
of	O	O:0.999997
it	O	O:0.999962
,	O	O:0.999999
saving	O	O:0.999732
the	O	O:0.999975
last	O	O:0.999124
for	O	O:0.999930
``	O	O:0.999812
apply	O	B-API:0.978319
``	O	O:0.999593
,	O	O:0.999607
which	O	O:0.999786
is	O	O:0.999993
essentially	O	O:0.999962
a	O	O:0.999993
loop	O	O:0.996318
.	O	O:0.999815
	
Using	O	O:0.999144
apply	O	B-API:0.949886
took	O	O:0.995815
172ms	O	O:0.995160
versus	O	O:0.999927
39ms	O	O:0.999326
using	O	O:0.998559
Jeff's	O	O:0.995831
method	O	O:0.999607
,	O	O:0.999995
I	O	O:0.999995
can	O	O:0.999994
also	O	O:0.999977
confirm	O	O:0.999990
that	O	O:0.999884
it	O	O:0.999997
made	O	O:0.999975
negligle	O	O:0.999922
difference	O	O:0.999899
whether	O	O:0.999911
the	O	O:0.999956
apply	O	B-API:0.962951
was	O	O:0.998781
called	O	O:0.999743
inside	O	O:0.999936
or	O	O:0.999965
outside	O	O:0.999667
the	O	O:0.999576
function	O	O:0.998818
but	O	O:0.999959
it	O	O:0.999998
does	O	O:0.999957
modify	O	O:0.999894
the	O	O:0.999996
df	O	O:0.999555
so	O	O:0.999980
you	O	O:0.999963
didn't	O	O:0.999990
need	O	O:0.999984
to	O	O:0.999997
return	O	O:0.999989
the	O	O:0.999984
df	O	O:0.999770
as	O	O:0.999984
it	O	O:0.999695
was	O	O:0.999985
being	O	O:0.999789
modified	O	O:0.999667
inside	O	O:0.999785
the	O	O:0.999775
function	O	O:0.999206
	
@USER	O	O:0.997147
:	O	O:0.999982
thanks	O	O:0.999703
for	O	O:0.999999
your	O	O:0.999882
clarifications	O	O:0.999945
once	O	O:0.999948
again	O	O:0.999928
,	O	O:0.999998
very	O	O:0.999858
glad	O	O:0.999604
you	O	O:0.999947
helped	O	O:0.999940
me	O	O:0.999971
with	O	O:0.999839
it	O	O:0.999960
.	O	O:0.999955
	
As	O	O:0.999991
a	O	O:0.999996
new	O	O:0.999891
user	O	O:0.999926
like	O	O:0.999802
me	O	O:0.999961
to	O	O:0.999987
python	O	O:0.999958
/	O	O:0.999995
pandas	O	O:0.999516
,	O	O:0.999998
the	O	O:0.999969
problem	O	O:0.999679
mostly	O	O:0.998850
is	O	O:0.999988
,	O	O:0.999992
that	O	O:0.999976
I	O	O:0.999997
can	O	O:0.999998
only	O	O:0.999982
search	O	O:0.999786
/	O	O:0.999992
google	O	O:0.999534
for	O	O:0.999994
solutions	O	O:0.999822
as	O	O:0.999993
the	O	O:0.999969
libraries	O	O:0.999450
contain	O	O:0.998294
so	O	O:0.999999
many	O	O:0.999920
classes	O	O:0.999639
and	O	O:0.999989
functions	O	O:0.999991
that	O	O:0.999590
I	O	O:0.999997
don't	O	O:0.999980
know	O	O:0.999753
what	O	O:0.999929
to	O	O:0.999991
look	O	O:0.999973
for	O	O:0.999912
(	O	O:0.999941
in	O	O:0.999995
this	O	O:0.999947
case	O	O:0.999985
the	O	O:0.999966
`	O	O:0.999917
DatetimeIndex	B-API	B-API:0.950326
`	O	O:0.999995
class	O	O:0.999617
)	O	O:0.999989
.	O	O:0.999774
	
And	O	O:0.999988
then	O	O:0.999905
sometimes	O	O:0.999999
different	O	O:0.999960
solutions	O	O:0.998480
(	O	O:0.999948
in	O	O:0.999998
this	O	O:0.999968
case	O	O:0.999991
using	O	O:0.999965
`	O	O:0.999943
apply	O	B-API:0.984240
`)	O	O:0.999986
come	O	O:0.998154
up	O	O:0.999978
on	O	O:0.999973
google	O	O:0.997850
/	O	O:0.999986
stackoverflow	O	O:0.998624
and	O	O:0.999989
yet	O	O:0.999928
again	O	O:0.999812
I	O	O:0.999981
can	O	O:0.999966
NOT	O	O:0.999946
verify	O	O:0.999945
that	O	O:0.999945
there	O	O:0.999854
is	O	O:0.999996
no	O	O:0.999965
better	O	O:0.999892
solution	O	O:0.999962
as	O	O:0.999991
I	O	O:0.999993
dont	O	O:0.999989
have	O	O:0.999933
the	O	O:0.999993
insight	O	O:0.999856
into	O	O:0.999493
the	O	O:0.999962
library	O	O:0.998024
.	O	O:0.999756
	
But	O	O:0.999937
I	O	O:0.999997
keep	O	O:0.999841
learning	O	O:0.998589
heavily	O	O:0.999856
each	O	O:0.999536
day	O	O:0.999918
,	O	O:0.999992
thanks	O	O:0.998776
:)	O	O:0.999744
	
Pandas	O	O:0.998647
:	O	O:0.999985
apply	O	O:0.889958
a	O	O:0.999920
function	O	O:0.999436
to	O	O:0.999995
a	O	O:1.000000
multiindexed	O	O:0.999719
series	O	O:0.999823
	
Now	O	O:0.999895
I	O	O:0.999997
want	O	O:0.999984
to	O	O:0.999931
apply	O	O:0.990446
any	O	O:0.999472
function	O	O:0.999716
to	O	O:0.999991
each	O	O:0.999974
series	O	O:0.999980
indexed	O	O:0.999966
by	O	O:0.999996
numbers.hash	O	O:0.998696
only	O	O:0.999771
,	O	O:0.999997
e.g.	O	O:0.999884
summing	O	O:0.999859
the	O	O:0.999987
values	O	O:0.999262
in	O	O:0.999985
each	O	O:0.999965
time	O	O:0.999967
series	O	O:0.999990
that	O	O:0.999777
is	O	O:1.000000
made	O	O:0.999905
up	O	O:0.999965
of	O	O:0.999964
local_time	O	O:0.978875
and	O	O:0.999996
the	O	O:0.999979
value	O	O:0.998325
.	O	O:0.999758
	
I	O	O:0.999991
guess	O	O:0.999967
I	O	O:0.999985
can	O	O:0.999984
get	O	O:0.999976
the	O	O:0.999997
number.hash	O	O:0.996060
indices	O	O:0.999309
and	O	O:0.999997
iterate	O	O:0.999922
over	O	O:0.999937
them	O	O:0.998316
,	O	O:0.999977
but	O	O:0.999986
there	O	O:0.999958
must	O	O:0.999975
be	O	O:0.999999
a	O	O:0.999999
more	O	O:0.996976
efficient	O	O:0.999604
and	O	O:0.999992
clean	O	O:0.999518
way	O	O:0.999945
to	O	O:0.999969
do	O	O:0.999994
it	O	O:0.999974
.	O	O:0.999899
	
Or	O	O:0.999738
groupby	B-API	B-API:0.993132
and	O	O:0.999990
apply	O	B-API:0.679950
an	O	O:0.999800
arbitrary	O	O:0.989181
function	O	O:0.999300
#CODE	O	O:0.998748
	
gives	O	O:0.997518
"	O	O:0.999904
AttributeError	O	O:0.996470
:	O	O:0.999979
rint	B-API	B-API:0.692666
"	O	O:0.999995
if	O	O:0.999963
I	O	O:0.999997
insert	O	O:0.999647
values	O	O:0.997390
and	O	O:0.999997
then	O	O:0.999932
apply	O	O:0.684546
np.round()	O	O:0.941929
.	O	O:0.999218
	
If	O	O:0.999958
I	O	O:0.999998
copy	O	O:0.998874
df.describe()	B-API	B-API:0.990481
,	O	O:0.999904
change	O	O:0.999910
some	O	O:0.999811
values	O	O:0.999096
and	O	O:0.999998
then	O	O:0.999929
do	O	O:0.999975
np.round()	O	O:0.993551
it	O	O:0.999864
works	O	O:0.999969
fine	O	O:0.999656
.	O	O:0.999889
	
Both	O	O:0.999532
are	O	O:0.999987
DataFrames	O	O:0.999897
so	O	O:0.999978
I	O	O:0.999997
don't	O	O:0.999978
see	O	O:0.999910
why	O	O:0.999995
the	O	O:0.999985
behaviour	O	O:0.999821
could	O	O:0.999892
be	O	O:0.999998
different	O	O:0.999928
.	O	O:0.999530
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
For	O	O:0.999978
some	O	O:0.999775
weird	O	O:0.999664
reason	O	O:0.999925
that	O	O:0.999831
didn't	O	O:0.999949
work	O	O:0.999832
.	O	O:0.999961
	
I	O	O:0.999986
keep	O	O:0.999835
checking	O	O:0.999718
that	O	O:0.999905
I	O	O:1.000000
have	O	O:0.999998
dupes	O	O:0.999832
by	O	O:0.999993
using	O	O:0.999899
df.duplicated()	B-API	B-API:0.996463
.value_counts()	B-API	B-API:0.999824
and	O	O:0.999943
it	O	O:0.999992
does	O	O:0.999905
show	O	O:0.999794
as	O	O:1.000000
many	O	O:0.999989
rows	O	O:0.999403
as	O	O:0.999967
True	O	O:0.999485
but	O	O:0.999991
then	O	O:0.999959
when	O	O:0.999990
I	O	O:0.999999
apply	O	O:0.958282
`	O	O:0.998166
df.sort	O	B-API:0.694732
(	O	O:0.999989
df.columns.tolist()	O	O:0.995368
)`	O	O:0.999927
as	O	O:0.999979
you	O	O:0.999921
suggest	O	O:0.999834
,	O	O:0.999996
it	O	O:0.999994
still	O	O:0.997062
is	O	O:0.999993
not	O	O:0.999976
sorting	O	O:0.999964
all	O	O:0.999969
of	O	O:0.999990
the	O	O:0.999992
duplicated	O	O:0.999945
rows	O	O:0.998568
.	O	O:0.999892
	
No	O	O:0.999971
,	O	O:0.999994
I	O	O:0.999996
have	O	O:0.999925
tried	O	O:0.999707
that	O	O:0.999877
and	O	O:0.999987
received	O	O:0.999882
this	O	O:0.997419
:	O	O:0.999929
AttributeError	O	O:0.999169
:	O	O:0.999990
Cannot	O	O:0.999950
access	O	O:0.999766
attribute	O	O:0.999945
'	O	O:0.999984
values	O	O:0.999765
'	O	O:0.999989
of	O	O:0.999936
'	O	O:0.999935
DataFrameGroupBy	B-API	B-API:0.738980
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954730
'	O	O:0.999052
method	O	O:0.999572
	
You	O	O:0.999958
need	O	O:0.999944
to	O	O:0.999995
apply	O	O:0.990397
some	O	O:0.999825
kind	O	O:0.999830
of	O	O:0.999994
aggregation	O	O:0.997703
to	O	O:0.999991
the	O	O:0.999995
GroupBy	B-API	O:0.546967
object	O	O:0.999817
to	O	O:0.999990
return	O	O:0.999971
a	O	O:0.999958
DataFrame	B-API	O:0.963520
.	O	O:0.999887
	
Once	O	O:0.999892
you	O	O:0.999989
have	O	O:0.999995
that	O	O:0.999992
,	O	O:1.000000
you	O	O:0.999996
can	O	O:0.999978
use	O	O:0.999998
`	O	O:0.999982
.values	B-API	B-API:0.997807
`	O	O:0.999998
to	O	O:0.999968
extract	O	O:0.999966
the	O	O:0.999993
numpy	O	O:0.999727
arrary	O	O:0.999614
.	O	O:0.999838
	
In	O	O:0.999849
DF1	O	O:0.999555
are	O	O:0.999996
a	O	O:0.999987
few	O	O:0.999326
hundred	O	O:0.999885
thousand	O	O:0.999798
records	O	O:0.999752
with	O	O:0.999845
columns	O	O:0.999837
lat1	O	O:0.998929
and	O	O:0.999973
lon1	O	O:0.997609
and	O	O:0.999963
there	O	O:0.999887
are	O	O:0.999962
50,000	O	O:0.999929
records	O	O:0.999118
in	O	O:0.999964
DF2	O	O:0.999981
with	O	O:0.999953
columns	O	O:0.999774
lat2	O	O:0.999587
,	O	O:0.999976
lon2	O	O:0.997908
and	O	O:0.999905
zip	O	O:0.994576
.	O	O:0.999559
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999962
apply	O	O:0.995719
a	O	O:0.999882
function	O	O:0.998433
f	O	O:0.998990
(	O	O:0.999974
lat1	O	O:0.998704
,	O	O:0.999977
lon1	O	O:0.998943
,	O	O:0.999978
lat2	O	O:0.998923
,	O	O:0.999988
lon2	O	O:0.999674
)	O	O:0.999973
which	O	O:0.999779
calculates	O	O:0.999725
the	O	O:0.999993
distance	O	O:0.999490
between	O	O:0.999621
two	O	O:0.999967
points	O	O:0.998457
(	O	O:0.999990
defined	O	O:0.999853
using	O	O:0.999829
lat1	O	O:0.991603
,	O	O:0.999906
lon1	O	O:0.998345
,	O	O:0.999965
lat2	O	O:0.998746
,	O	O:0.999986
lon2	O	O:0.998560
)	O	O:0.999949
.	O	O:0.999758
	
I	O	O:0.999987
ultimately	O	O:0.999992
want	O	O:0.999864
to	O	O:0.999989
add	O	O:0.999996
zip	O	O:0.999618
from	O	O:0.999853
DF2	O	O:0.999939
into	O	O:0.999728
Df1	O	O:0.999989
corresponding	O	O:0.998486
to	O	O:0.999984
the	O	O:0.999999
record	O	O:0.998545
in	O	O:0.999977
D2	O	O:0.999995
corresponding	O	O:0.999671
to	O	O:0.999986
the	O	O:0.999999
smallest	O	O:0.999763
distance	O	O:0.999837
between	O	O:0.999956
that	O	O:0.999957
row	O	O:0.999963
in	O	O:0.999981
Df1	O	O:0.999865
and	O	O:0.999998
all	O	O:0.999998
rows	O	O:0.998828
in	O	O:0.999873
D2	O	O:0.999891
.	O	O:0.999855
	
For	O	O:0.999897
all	O	O:0.999981
110k+	O	O:0.999868
records	O	O:0.999432
in	O	O:0.999943
`	O	O:0.999994
df1	O	O:0.996897
`	O	O:0.999997
do	O	O:0.999853
you	O	O:0.999997
want	O	O:0.999962
to	O	O:0.999994
apply	O	O:0.998328
your	O	O:0.999681
distance	O	O:0.999047
function	O	O:0.999966
for	O	O:0.999996
every	O	O:0.999878
record	O	O:0.997485
in	O	O:0.999967
`	O	O:0.999987
df2	O	O:0.995267
`	O	O:0.999986
?	O	O:0.999699
	
pandas	O	O:0.999670
apply	O	B-API:0.513495
function	O	O:0.998618
to	O	O:0.999983
multiple	O	O:0.999997
columns	O	O:0.999598
and	O	O:0.999999
multiple	O	O:0.999993
rows	O	O:0.995475
	
I	O	O:0.999993
have	O	O:0.999989
a	O	O:0.999992
dataframe	B-API	O:0.998015
with	O	O:0.999971
consecutive	O	O:0.999884
pixel	O	O:0.999962
coordinates	O	O:0.999739
in	O	O:0.999997
rows	O	O:0.999724
and	O	O:0.999997
columns	O	O:0.999843
'	O	O:0.999976
xpos	O	O:0.999474
'	O	O:0.999979
,	O	O:0.999962
'	O	O:0.999989
ypos	O	O:0.998685
'	O	O:0.999972
,	O	O:0.999993
and	O	O:0.999994
I	O	O:0.999998
want	O	O:0.999978
to	O	O:0.999947
calculate	O	O:0.999979
the	O	O:0.999997
angle	O	O:0.999960
in	O	O:0.999996
degrees	O	O:0.999913
of	O	O:0.999995
each	O	O:0.999457
path	O	O:0.999809
between	O	O:0.999889
consecutive	O	O:0.999699
pixels	O	O:0.999083
.	O	O:0.999841
	
Currently	O	O:0.999896
I	O	O:0.999997
have	O	O:0.999990
the	O	O:0.999958
solution	O	O:0.999895
presented	O	O:0.999853
below	O	O:0.999913
,	O	O:0.999982
which	O	O:0.999650
works	O	O:0.999887
fine	O	O:0.999861
and	O	O:0.999985
for	O	O:0.999979
teh	O	O:0.999930
size	O	O:0.999536
of	O	O:0.999978
my	O	O:0.999984
file	O	O:0.999620
is	O	O:0.999986
speedy	O	O:0.999357
enough	O	O:0.997885
,	O	O:0.999937
but	O	O:0.999981
iterating	O	O:0.999891
through	O	O:0.999647
all	O	O:0.999989
the	O	O:0.999997
rows	O	O:0.996178
seems	O	O:0.999956
not	O	O:0.999998
to	O	O:0.999998
be	O	O:0.999999
the	O	O:0.999997
pandas	O	O:0.999618
way	O	O:0.999976
to	O	O:0.999962
do	O	O:0.999996
it	O	O:0.999974
.	O	O:0.999899
	
I	O	O:0.999978
know	O	O:0.999907
how	O	O:0.999932
to	O	O:0.999994
apply	O	O:0.996400
a	O	O:0.999885
function	O	O:0.999369
to	O	O:0.999998
different	O	O:0.999998
columns	O	O:0.999765
,	O	O:0.999983
and	O	O:0.999997
how	O	O:0.999983
to	O	O:0.999996
apply	O	O:0.992005
functions	O	O:0.999645
to	O	O:0.999996
different	O	O:1.000000
rows	O	O:0.999881
of	O	O:0.999995
columns	O	O:0.999847
,	O	O:0.999992
but	O	O:0.999979
can't	O	O:0.999890
figure	O	O:0.999940
out	O	O:0.999984
how	O	O:0.999984
to	O	O:0.999985
combine	O	O:0.999940
both	O	O:0.999802
.	O	O:0.999919
	
I	O	O:0.999952
compared	O	O:0.999856
the	O	O:0.999990
time	O	O:0.999880
of	O	O:0.999998
three	O	O:0.999939
solutions	O	O:0.999943
for	O	O:0.999995
my	O	O:0.999952
df	O	O:0.994985
(	O	O:0.999991
the	O	O:0.999998
size	O	O:0.999898
of	O	O:0.999995
the	O	O:0.999991
df	O	O:0.999728
is	O	O:0.999984
about	O	O:0.999911
6k	O	O:0.999999
rows	O	O:0.999342
)	O	O:0.999993
,	O	O:0.999998
the	O	O:0.999977
iteration	O	O:0.997220
is	O	O:0.999991
almost	O	O:0.999877
9	O	O:0.999985
times	O	O:0.999172
slower	O	O:0.999863
than	O	O:0.999857
apply	O	B-API:0.615756
,	O	O:0.999919
and	O	O:0.999980
about	O	O:0.999880
1500	O	O:0.999206
times	O	O:0.999432
slower	O	O:0.999901
then	O	O:0.999879
doing	O	O:0.999985
it	O	O:0.999988
without	O	O:0.998476
apply	O	B-API:0.904072
:	O	O:0.998707
	
execution	O	O:0.999971
time	O	O:0.999978
of	O	O:0.999998
the	O	O:0.999977
solution	O	O:0.999930
without	O	O:0.999738
iteration	O	O:0.999780
,	O	O:0.999992
with	O	O:0.999808
apply	O	B-API:0.958990
:	O	O:0.999931
0.17s	O	O:0.991020
	
execution	O	O:0.999960
time	O	O:0.999977
of	O	O:0.999996
accepted	O	O:0.999897
answer	O	O:0.999975
by	O	O:0.999952
EdChum	O	O:0.999904
using	O	O:0.999447
diff()	B-API	B-API:0.999403
,	O	O:0.999825
without	O	O:0.998769
iteration	O	O:0.998450
and	O	O:0.999979
without	O	O:0.999421
apply	O	B-API:0.985126
:	O	O:0.999600
0.001s	O	O:0.982245
	
Suggestion	O	O:0.997794
:	O	O:0.999950
do	O	O:0.999982
not	O	O:0.999986
use	O	O:0.999954
iteration	O	O:0.999489
or	O	O:0.999962
apply	O	B-API:0.902285
and	O	O:0.999959
always	O	O:0.999815
try	O	O:0.999962
to	O	O:0.999926
use	O	O:0.999996
vectorized	O	O:0.997649
calculation	O	O:0.998609
;)	O	O:0.999963
it	O	O:0.999155
is	O	O:0.999989
not	O	O:0.999987
only	O	O:0.999962
faster	O	O:0.999568
,	O	O:0.999972
but	O	O:0.999970
also	O	O:0.999959
more	O	O:0.999970
readable	O	O:0.998843
.	O	O:0.999859
	
Also	O	O:0.999846
if	O	O:0.999996
possible	O	O:0.999942
avoid	O	O:0.999878
using	O	O:0.999784
`	O	O:0.999801
apply	O	B-API:0.995636
`	O	O:0.999962
,	O	O:0.999846
as	O	O:0.999999
this	O	O:0.999891
operates	O	O:0.999831
row-wise	O	O:0.999564
,	O	O:0.999990
if	O	O:0.999995
you	O	O:0.999977
can	O	O:0.999996
find	O	O:0.999999
a	O	O:0.999993
vectorised	O	O:0.998036
method	O	O:0.999984
that	O	O:0.999930
can	O	O:0.999999
work	O	O:0.999998
on	O	O:0.999999
the	O	O:0.999998
entire	O	O:0.999952
series	O	O:0.999925
or	O	O:0.999996
dataframe	B-API	O:0.999750
then	O	O:0.999958
always	O	O:0.999995
prefer	O	O:0.999979
this	O	O:0.999652
.	O	O:0.999956
	
NOTE	O	O:0.999376
:	O	O:0.999988
I	O	O:0.999996
selected	O	O:0.999967
the	O	O:0.999629
'	O	O:0.999973
size	O	O:0.999696
'	O	O:0.999992
column	O	O:0.999984
because	O	O:0.999969
all	O	O:0.999994
the	O	O:0.999995
functions	O	O:0.999860
apply	O	B-API:0.574133
to	O	O:0.999982
that	O	O:0.999991
column	O	O:0.999931
.	O	O:0.999970
	
If	O	O:0.999956
you	O	O:0.999965
wanted	O	O:0.999985
to	O	O:0.999996
do	O	O:1.000000
a	O	O:0.999999
different	O	O:0.999921
set	O	O:0.999974
of	O	O:0.999993
functions	O	O:0.999671
for	O	O:0.999998
different	O	O:0.999954
columns	O	O:0.999715
,	O	O:0.999998
you	O	O:0.999993
can	O	O:0.999978
use	O	O:0.999998
`	O	O:0.999971
agg	O	B-API:0.997900
`	O	O:0.999995
with	O	O:0.999791
a	O	O:0.999998
dictionary	O	O:0.999902
with	O	O:0.999948
a	O	O:0.999998
list	O	O:0.999738
of	O	O:0.999984
functions	O	O:0.999666
e.g.	O	O:0.999378
`	O	O:0.999926
agg	O	B-API:0.998725
(	O	O:0.999934
{	O	O:0.999827
'	O	O:0.999981
size	O	O:0.998597
'	O	O:0.999900
:	O	O:0.999961
[	O	O:0.999978
np.sum	B-API	B-API:0.802187
,	O	O:0.999970
np.average	B-API	B-API:0.860643
]	O	O:0.999827
}	O	O:0.999917
)`	O	O:0.999628
.	O	O:0.999635
	
This	O	O:0.999826
results	O	O:0.999906
in	O	O:0.999913
`	O	O:0.999984
MultiIndex	O	O:0.754139
`	O	O:0.999998
columns	O	O:0.999800
,	O	O:0.999993
which	O	O:0.999948
means	O	O:0.999980
that	O	O:0.999991
when	O	O:0.999961
getting	O	O:0.999973
the	O	O:0.999994
IDs	O	O:0.999408
for	O	O:0.999981
the	O	O:0.999983
maximum	O	O:0.999742
size	O	O:0.999719
in	O	O:0.999993
each	O	O:0.999961
group	O	O:0.999535
you	O	O:0.999995
need	O	O:0.999975
to	O	O:0.999992
do	O	O:0.999987
:	O	O:0.999979
#CODE	O	O:0.999745
	
I've	O	O:0.999765
tried	O	O:0.999850
using	O	O:0.999846
the	O	O:0.999648
`	O	O:0.999864
apply	O	B-API:0.976108
`	O	O:0.999887
function	O	O:0.999359
across	O	O:0.999950
the	O	O:0.999980
column	O	O:0.999221
,	O	O:0.999990
but	O	O:0.999984
to	O	O:0.999991
no	O	O:0.999999
avail	O	O:0.999551
.	O	O:0.999901
	
So	O	O:0.999966
,	O	O:0.999993
I	O	O:0.999992
took	O	O:0.999944
a	O	O:0.999985
very	O	O:0.998219
naive	O	O:0.993620
(	O	O:0.999642
but	O	O:0.999950
not	O	O:0.999990
very	O	O:0.999959
concise	O	O:0.999888
)	O	O:0.999992
approach	O	O:0.999947
to	O	O:0.999979
create	O	O:0.999978
these	O	O:0.999978
columns	O	O:0.999603
:	O	O:0.999983
#CODE	O	O:0.999901
	
Rather	O	O:0.999825
than	O	O:0.999942
fill	O	O:0.999288
as	O	O:0.999997
an	O	O:0.999992
empty	O	O:0.999897
column	O	O:0.999857
,	O	O:0.999996
you	O	O:0.999989
can	O	O:0.999997
simply	O	O:1.000000
populate	O	O:0.999981
this	O	O:0.999974
with	O	O:0.999991
an	O	O:0.999950
apply	O	B-API:0.890910
:	O	O:0.999591
#CODE	O	O:0.999316
	
Perform	O	O:0.999849
a	O	O:0.999945
`	O	O:0.999868
groupby	B-API	B-API:0.998208
`	O	O:0.999996
by	O	O:0.997895
'	O	O:0.999983
Country	O	O:0.997306
'	O	O:0.999943
and	O	O:0.999982
use	O	O:0.999923
`	O	O:0.999741
transform	O	B-API:0.983906
`	O	O:0.999991
to	O	O:0.999977
apply	O	O:0.997038
a	O	O:0.999863
function	O	O:0.998883
to	O	O:0.999996
that	O	O:0.999999
group	O	O:0.999262
which	O	O:0.999963
will	O	O:0.999926
return	O	O:0.999341
an	O	O:0.999981
index	O	O:0.999977
aligned	O	O:0.999848
to	O	O:0.999995
the	O	O:1.000000
original	O	O:0.999405
df	O	O:0.999676
#CODE	O	O:0.999730
	
I'm	O	O:0.999974
aware	O	O:0.999888
of	O	O:0.999964
df.where	B-API	B-API:0.998143
function	O	O:0.999904
but	O	O:0.999931
apparently	O	O:0.999483
it's	O	O:0.999688
not	O	O:0.999982
possible	O	O:0.999968
to	O	O:0.999997
apply	O	O:0.952528
for	O	O:0.999950
columns	O	O:0.998814
,	O	O:0.999974
it	O	O:0.999973
works	O	O:0.999982
just	O	O:0.999911
for	O	O:0.999987
all	O	O:0.999732
DataFrame	B-API	O:0.976855
.	O	O:0.999749
	
Why	O	O:0.999958
not	O	O:0.999945
use	O	O:0.999982
the	O	O:0.999948
built	O	O:0.996686
in	O	O:0.999644
string	O	O:0.999404
method	O	O:0.999981
,	O	O:0.999986
rather	O	O:0.999981
than	O	O:0.999742
apply	O	B-API:0.620305
.	O	O:0.999498
	
`	O	O:0.999965
df	O	O:0.999223
[	O	O:0.999992
0	O	O:0.999858
]	O	O:0.999858
.str	B-API	B-API:0.965908
.count	B-API	B-API:0.998593
(	O	O:0.999184
'	O	O:0.999870
:	O	O:0.999945
')`	O	O:0.999917
	
@USER	O	O:0.999614
using	O	O:0.999947
that	O	O:0.996106
function	O	O:0.999597
is	O	O:0.999997
actually	O	O:0.999852
slower	O	O:0.999900
than	O	O:0.999869
using	O	O:0.999851
`	O	O:0.999937
apply	O	B-API:0.997756
`	O	O:0.999284
(	O	O:0.999687
see	O	O:0.999994
my	O	O:0.999972
answer	O	O:0.999709
)	O	O:0.999955
.	O	O:0.999625
	
Looking	O	O:0.999494
for	O	O:0.999991
a	O	O:0.999648
better	O	O:0.995933
method	O	O:0.999959
to	O	O:0.999985
achieve	O	O:0.999996
desired	O	O:0.999856
output	O	O:0.999933
as	O	O:0.999988
shown	O	O:0.995610
.	O	O:0.999884
	
I	O	O:0.999986
have	O	O:0.999965
messed	O	O:0.998826
with	O	O:0.999962
lambda	O	O:0.999621
,	O	O:0.999993
apply	O	B-API:0.794048
,	O	O:0.999972
aggregrate	O	O:0.999746
commands	O	O:0.999656
can't	O	O:0.999976
quite	O	O:0.999955
get	O	O:0.999993
anything	O	O:0.999957
to	O	O:0.999987
work	O	O:0.999966
.	O	O:0.999965
	
#CODE	O	O:0.998453
	
I	O	O:0.999938
realize	O	O:0.999859
there	O	O:0.999492
are	O	O:0.999997
different	O	O:0.999948
settings	O	O:0.999888
one	O	O:0.999982
can	O	O:0.999969
apply	O	O:0.992923
that	O	O:0.999931
will	O	O:0.999940
change	O	O:0.999864
the	O	O:0.999972
look	O	O:0.990667
and	O	O:0.999997
feel	O	O:0.999848
of	O	O:0.999980
either	O	O:0.999872
individually	O	O:0.997968
(	O	O:0.999995
matplotlib	O	O:0.999576
savefig()	B-API	B-API:0.942485
plots	O	O:0.999915
different	O	O:0.999982
from	O	O:0.999862
show()	B-API	O:0.925853
)	O	O:0.999993
,	O	O:0.999993
however	O	O:0.999895
I	O	O:0.999961
haven't	O	O:0.999935
been	O	O:0.999672
able	O	O:0.999987
to	O	O:0.999996
find	O	O:0.999994
any	O	O:0.999997
easy	O	O:0.999810
to	O	O:0.999985
follow	O	O:0.999933
documentation	O	O:0.999950
that	O	O:0.999945
shows	O	O:0.999987
how	O	O:0.999996
to	O	O:0.999995
set	O	O:0.999998
the	O	O:0.999994
default	O	O:0.999849
fonts	O	O:0.999913
while	O	O:0.999957
using	O	O:0.999920
matplotlib	O	O:0.988042
backend	O	O:0.994542
:	O	O:0.999911
MacOSX	O	O:0.996719
.	O	O:0.999899
	
Can	O	O:0.999849
someone	O	O:0.999870
show	O	O:0.999747
how	O	O:0.999983
to	O	O:0.999997
make	O	O:0.999997
the	O	O:0.999989
font	O	O:0.999955
that	O	O:0.999958
appears	O	O:0.999982
in	O	O:0.999996
the	O	O:0.999974
shown	O	O:0.999394
figure	O	O:0.999976
also	O	O:0.999985
appear	O	O:0.999974
in	O	O:0.999981
the	O	O:0.999989
saved	O	O:0.999370
figure	O	O:0.999239
?	O	O:0.999955
	
BUT	O	O:0.999836
so	O	O:0.999978
far	O	O:0.999920
we	O	O:0.999994
can't	O	O:0.999891
apply	O	O:0.910618
the	O	O:0.999853
right	O	O:0.998172
DatetimeIndex	B-API	O:0.636454
to	O	O:0.999985
ts.resample()	O	O:0.998973
	
I	O	O:0.999988
think	O	O:0.999970
to	O	O:0.999930
use	O	O:0.999992
`	O	O:0.999952
apply	O	B-API:0.975026
`	O	O:0.999888
in	O	O:0.999924
this	O	O:0.999975
case	O	O:0.999974
will	O	O:0.999962
be	O	O:0.999998
difficult	O	O:0.999932
as	O	O:0.999976
it	O	O:0.999121
is	O	O:0.999978
conditional	O	O:0.970347
(	O	O:0.999994
based	O	O:0.999476
on	O	O:0.999986
the	O	O:0.999994
surrounding	O	O:0.999923
cells	O	O:0.999325
)	O	O:0.999969
.	O	O:0.999893
	
I	O	O:0.999986
think	O	O:0.999897
you	O	O:0.999964
many	O	O:0.999981
want	O	O:0.999977
to	O	O:0.999997
generate	O	O:0.999998
separate	O	O:0.999191
`	O	O:0.999993
DataFrame	B-API	O:0.955082
`	O	O:0.999997
s	O	O:0.999664
for	O	O:0.999957
`	O	O:0.999963
Around_A	O	O:0.991617
,	O	O:0.999956
B	O	O:0.999876
....	O	O:0.996646
	
`	O	O:0.999846
.	O	O:0.999408
	
Once	O	O:0.999912
you	O	O:0.999973
get	O	O:0.999994
those	O	O:0.999992
,	O	O:0.999999
you	O	O:0.999992
can	O	O:0.999978
use	O	O:0.999999
`	O	O:0.999981
dropna()	B-API	B-API:0.998212
`	O	O:0.999996
to	O	O:0.999964
get	O	O:1.000000
rid	O	O:0.999987
of	O	O:0.999999
the	O	O:0.999995
rows	O	O:0.999877
containing	O	O:0.998884
`	O	O:0.999997
nan	O	O:0.968082
`	O	O:0.999997
s	O	O:0.999725
,	O	O:0.999994
which	O	O:0.999937
will	O	O:0.999935
make	O	O:0.999986
the	O	O:0.999989
dataset	O	O:0.999934
much	O	O:0.999317
smaller	O	O:0.999572
and	O	O:0.999981
may	O	O:0.999976
avoid	O	O:0.999168
the	O	O:0.999977
memory	O	O:0.999430
issue	O	O:0.999756
altogether	O	O:0.999515
.	O	O:0.999776
	
Basically	O	O:0.999827
I	O	O:0.999996
want	O	O:0.999991
to	O	O:0.999983
create	O	O:0.999998
a	O	O:0.999998
new	O	O:0.999951
column	O	O:0.999759
"	O	O:0.999979
Ratio	O	O:0.998822
"	O	O:0.999991
that	O	O:0.999411
divides	O	O:0.999796
Price	O	O:0.998775
/	O	O:0.999962
Buy	O	O:0.999787
or	O	O:0.999972
Price	O	O:0.994144
/	O	O:0.999966
Sell	O	O:0.998267
,	O	O:0.999997
depending	O	O:0.999860
on	O	O:0.999973
which	O	O:0.999631
abs	O	B-API:0.740535
(	O	O:0.999989
buy	O	O:0.999718
)	O	O:0.999993
or	O	O:0.999876
abs	O	B-API:0.876099
(	O	O:0.999995
sell	O	O:0.995380
)	O	O:0.999986
is	O	O:0.999957
greater	O	O:0.997208
.	O	O:0.999810
	
I	O	O:0.999840
am	O	O:0.999991
not	O	O:0.999943
really	O	O:0.999978
sure	O	O:0.999903
how	O	O:0.999981
to	O	O:0.999987
do	O	O:0.999999
this	O	O:0.999973
...	O	O:0.999903
would	O	O:0.999967
I	O	O:0.999998
use	O	O:0.999997
an	O	O:0.999714
apply	O	B-API:0.933954
function	O	O:0.998355
?	O	O:0.999717
	
Here	O	O:0.997847
is	O	O:0.999989
the	O	O:0.999962
solution	O	O:0.999897
using	O	O:0.999886
apply	O	B-API:0.935465
-	O	O:0.999569
First	O	O:0.999850
define	O	O:0.999859
a	O	O:0.999960
function	O	O:0.999887
operating	O	O:0.999933
in	O	O:0.999999
rows	O	O:0.999841
of	O	O:0.999979
the	O	O:0.999976
DataFrame	B-API	O:0.993410
.	O	O:0.999812
	
#CODE	O	O:0.998453
	
Finally	O	O:0.999912
,	O	O:0.999995
set	O	O:0.999917
the	O	O:0.999952
`	O	O:0.999953
Ratio	O	O:0.996758
`	O	O:0.999999
column	O	O:0.999855
appropriately	O	O:0.999992
using	O	O:0.999774
apply	O	B-API:0.978538
.	O	O:0.993872
	
Thanks	O	O:0.999674
this	O	O:0.999605
works	O	O:0.999749
!	O	O:0.999918
	
But	O	O:0.999381
is	O	O:0.999995
there	O	O:0.999969
a	O	O:0.999994
way	O	O:0.999882
to	O	O:0.999975
do	O	O:0.999997
it	O	O:0.999995
with	O	O:0.999978
an	O	O:0.999994
apply	O	O:0.544773
function	O	O:0.999453
or	O	O:0.999996
something	O	O:0.999961
as	O	O:0.999995
well	O	O:0.999508
?	O	O:0.999978
	
i	O	O:0.999780
am	O	O:0.999993
looking	O	O:0.999867
to	O	O:0.999993
apply	O	O:0.991332
multiply	O	O:0.999380
masks	O	O:0.999592
on	O	O:0.999994
each	O	O:0.999980
column	O	O:0.999989
of	O	O:0.999998
a	O	O:0.999997
pandas	O	O:0.999536
dataset	O	O:0.999815
(	O	O:0.999985
respectively	O	O:0.999852
to	O	O:0.999978
it's	O	O:0.999997
properties	O	O:0.999840
)	O	O:0.999983
in	O	O:0.999983
python	O	O:0.999367
.	O	O:0.999925
	
how	O	O:0.999836
can	O	O:0.999970
i	O	O:0.999999
apply	O	O:0.942042
the	O	O:0.999950
concat_mask	O	O:0.990355
on	O	O:0.999992
df	O	O:0.999941
,	O	O:0.999998
so	O	O:0.999995
that	O	O:0.999985
i	O	O:0.999999
select	O	O:0.999967
rows	O	O:0.999811
,	O	O:0.999994
in	O	O:0.999994
which	O	O:0.999926
all	O	O:0.999996
Boolean	O	O:0.999883
criteria	O	O:0.999674
are	O	O:0.999970
matched	O	O:0.998466
(	O	O:0.999919
are	O	O:0.999991
True	O	O:0.999503
)	O	O:0.999970
?	O	O:0.999904
	
Thanks	O	O:0.998294
for	O	O:0.999959
Your	O	O:0.999416
answer	O	O:0.998724
.	O	O:0.999746
	
In	O	O:0.999952
the	O	O:0.999990
proper	O	O:0.999782
code	O	O:0.999771
i	O	O:0.999994
actually	O	O:0.999984
iterate	O	O:0.999540
throw	O	O:0.999771
all	O	O:0.999983
columns	O	O:0.999841
and	O	O:0.999989
apply	O	O:0.967002
various	O	O:0.996932
of	O	O:0.999976
diffenrent	O	O:0.999249
conditions	O	O:0.999705
to	O	O:0.999991
mask	O	O:0.998631
each	O	O:0.999838
column	O	O:0.999891
.	O	O:0.999959
	
This	O	O:0.999316
is	O	O:0.999986
all	O	O:0.999964
what	O	O:0.999952
the	O	O:0.999988
code	O	O:0.999915
ment	O	O:0.999840
to	O	O:0.999990
express	O	O:0.999974
.	O	O:0.999929
	
not	O	O:0.999790
yet	O	O:0.999733
#URL	O	O:0.995415
(	O	O:0.999941
but	O	O:0.999983
you	O	O:0.999970
can	O	O:0.999989
do	O	O:1.000000
it	O	O:0.999994
in	O	O:0.999994
the	O	O:0.999991
apply	O	B-API:0.910373
;	O	O:0.999973
this	O	O:0.998664
is	O	O:0.999998
for	O	O:0.999989
using	O	O:0.999939
an	O	O:0.999676
aggregate	O	B-API:0.968022
function	O	O:0.999111
)	O	O:0.999919
.	O	O:0.999827
	
Since	O	O:0.999597
we're	O	O:0.999924
using	O	O:0.999960
views	O	O:0.999099
here	O	O:0.997433
,	O	O:0.999997
this	O	O:0.999904
should	O	O:0.999945
be	O	O:0.999999
more	O	O:0.999970
efficient	O	O:0.999561
/	O	O:0.999969
faster	O	O:0.999693
than	O	O:0.999896
the	O	O:0.999914
apply	O	B-API:0.763230
...	O	O:0.995248
	
Pandas	O	O:0.999865
rolling	O	O:0.991483
apply	O	B-API:0.889717
with	O	O:0.999125
variable	O	O:0.993245
window	O	O:0.999838
length	O	O:0.998246
	
I'm	O	O:0.999944
trying	O	O:0.999878
to	O	O:0.999974
reduce	O	O:0.999991
meterological	O	O:0.999815
data	O	O:0.999987
using	O	O:0.999880
`	O	O:0.999974
pandas	O	O:0.910302
`	O	O:0.999985
0.13.1	O	O:0.995027
.	O	O:0.999899
	
I	O	O:0.999992
have	O	O:0.999992
a	O	O:0.999979
large	O	O:0.999827
dataframe	B-API	O:0.996113
of	O	O:0.999953
floats	O	O:0.998613
.	O	O:0.999924
	
Thanks	O	O:0.999028
to	O	O:0.999997
this	O	O:0.999996
answer	O	O:0.999966
I	O	O:0.999997
have	O	O:0.999977
grouped	O	O:0.999852
the	O	O:0.999997
data	O	O:0.999920
into	O	O:0.999858
half-hour	O	O:0.999879
intervals	O	O:0.999894
most	O	O:0.999703
efficiently	O	O:0.999553
.	O	O:0.999823
	
I	O	O:0.999973
am	O	O:0.999998
using	O	O:0.999249
`	O	O:0.999884
groupby	B-API	B-API:0.999889
`	O	O:0.999960
+	O	O:0.995741
`	O	O:0.999995
apply	O	B-API:0.982540
`	O	O:0.999978
instead	O	O:0.999807
of	O	O:0.999995
`	O	O:0.999982
resample	O	B-API:0.975659
`	O	O:0.999997
because	O	O:0.999857
of	O	O:0.999997
the	O	O:0.999997
need	O	O:0.999986
to	O	O:0.999995
examine	O	O:0.999997
multiple	O	O:0.999978
columns	O	O:0.999813
.	O	O:0.999941
	
#CODE	O	O:0.998453
	
I	O	O:0.999989
want	O	O:0.999983
to	O	O:0.999885
use	O	O:0.999990
`	O	O:0.999971
math.atan2	O	O:0.974115
`	O	O:0.999997
on	O	O:0.999960
the	O	O:0.999957
'	O	O:0.999976
Ux	O	O:0.999788
/	O	O:0.999982
Uy	O	O:0.999827
'	O	O:0.999978
columns	O	O:0.999713
and	O	O:0.999987
am	O	O:0.999992
having	O	O:0.999723
trouble	O	O:0.999824
successfully	O	O:0.999472
`	O	O:0.999993
apply	O	B-API:0.989910
`	O	O:0.999932
ing	O	O:0.991004
any	O	O:0.999622
function	O	O:0.998688
.	O	O:0.999655
	
I	O	O:0.999945
get	O	O:0.999975
tracebacks	O	O:0.999905
about	O	O:0.999939
attribute	O	O:0.999874
`	O	O:0.999965
ndim	B-API	B-API:0.960445
`	O	O:0.999936
:	O	O:0.999763
#CODE	O	O:0.999908
	
My	O	O:0.999977
original	O	O:0.999083
question	O	O:0.998494
was	O	O:0.999391
:	O	O:0.999976
what	O	O:0.999980
kind	O	O:0.999983
of	O	O:0.999993
value	O	O:0.999796
should	O	O:0.999968
be	O	O:0.999999
returned	O	O:0.999962
from	O	O:0.999857
my	O	O:0.999949
`	O	O:0.999993
apply	O	B-API:0.949499
`	O	O:0.999977
ed	O	O:0.988022
function	O	O:0.999973
so	O	O:0.999995
that	O	O:0.999980
a	O	O:0.999999
groupby-apply	O	O:0.999785
operation	O	O:0.999849
results	O	O:0.999880
in	O	O:0.999996
a	O	O:0.999989
1-column	O	O:0.999854
DataFrame	B-API	O:0.992575
or	O	O:0.999986
Series	O	O:0.999904
with	O	O:0.999993
a	O	O:0.999992
length	O	O:0.999682
equal	O	O:0.999625
to	O	O:0.999995
number	O	O:0.999996
of	O	O:0.999980
groups	O	O:0.999415
and	O	O:0.999998
group	O	O:0.998516
names	O	O:0.992411
(	O	O:0.999966
e.g.	O	O:0.999914
Timestamps	O	O:0.997376
)	O	O:0.999996
used	O	O:0.999513
as	O	O:0.999988
index	O	O:0.999780
values	O	O:0.999416
?	O	O:0.999961
	
this	O	O:0.999765
will	O	O:0.999921
be	O	O:0.999997
much	O	O:0.999967
more	O	O:0.999842
efficient	O	O:0.999018
to	O	O:0.999990
not	O	O:0.999998
use	O	O:0.999992
apply	O	B-API:0.740575
at	O	O:0.999903
all	O	O:0.999954
,	O	O:0.999997
rather	O	O:0.999840
compute	O	O:0.998216
the	O	O:0.999998
mean	O	O:0.999884
aggregates	O	O:0.999828
first	O	O:0.999904
,	O	O:0.999999
then	O	O:0.999380
use	O	O:0.999991
np.atan2	O	O:0.975407
.	O	O:0.999711
	
I'll	O	O:0.999748
put	O	O:0.999736
up	O	O:0.999949
an	O	O:0.999992
example	O	O:0.999770
tomorrow	O	O:0.999255
	
Just	O	O:0.999914
looking	O	O:0.999878
at	O	O:0.999999
your	O	O:0.999823
exception	O	O:0.999397
,	O	O:0.999996
looks	O	O:0.999927
like	O	O:0.999679
you're	O	O:0.999976
trying	O	O:0.999943
to	O	O:0.999997
apply	O	O:0.833750
function	O	O:0.999720
to	O	O:0.999991
each	O	O:0.999968
row	O	O:0.999778
but	O	O:0.999975
didn't	O	O:0.999954
specify	O	O:0.999455
axis=1	O	O:0.999665
e.g.	O	O:0.997309
df.apply	B-API	B-API:0.978818
(	O	O:0.999968
f	O	O:0.999813
,	O	O:0.999991
axis=1	O	O:0.999294
)	O	O:0.999992
#apply	O	O:0.997806
function	O	O:0.999954
to	O	O:0.999996
each	O	O:0.999976
row	O	O:0.999844
	
Pandas	O	O:0.999643
uses	O	O:0.995817
the	O	O:0.999919
index	O	O:0.999072
"	O	O:0.999996
line	O	O:0.999895
up	O	O:0.999954
"	O	O:0.999995
operations	O	O:0.999181
in	O	O:0.999989
that	O	O:0.999983
the	O	O:0.999994
operation	O	O:0.999874
will	O	O:0.999943
apply	O	O:0.981677
only	O	O:0.999863
to	O	O:0.999989
the	O	O:0.999999
common	O	O:0.998738
indices	O	O:0.999332
.	O	O:0.999817
	
So	O	O:0.999974
if	O	O:0.999992
you	O	O:0.999995
want	O	O:0.999984
to	O	O:0.999996
subtract	O	O:0.999995
one	O	O:0.999994
row	O	O:0.999992
from	O	O:0.999984
all	O	O:0.999982
in	O	O:0.999996
a	O	O:0.999993
DataFrame	B-API	O:0.998951
then	O	O:0.999907
you	O	O:1.000000
need	O	O:0.999995
to	O	O:0.999998
convert	O	O:0.999987
that	O	O:0.999985
to	O	O:1.000000
a	O	O:1.000000
numpy	O	O:0.999562
array	O	O:0.999991
first	O	O:0.999960
as	O	O:0.999996
shown	O	O:0.997584
in	O	O:0.999992
the	O	O:0.999951
answer	O	O:0.999320
.	O	O:0.999707
	
then	O	O:0.999555
apply	O	O:0.951158
the	O	O:0.999956
filter	O	O:0.994392
like	O	O:0.999753
so	O	O:0.999954
:	O	O:0.999969
	
well	O	O:0.999789
you	O	O:0.999993
can	O	O:0.999997
simply	O	O:0.999999
access	O	O:0.999961
the	O	O:0.999990
subfeatures	O	O:0.999242
field	O	O:0.999649
in	O	O:0.999985
the	O	O:0.999992
apply	O	B-API:0.525631
then	O	O:0.995999
.	O	O:0.999973
	
It	O	O:0.999934
doesn't	O	O:0.999836
affect	O	O:0.999908
you	O	O:0.999989
as	O	O:0.999987
its	O	O:0.999891
not	O	O:0.999988
visible	O	O:0.999914
to	O	O:0.999985
you	O	O:0.999994
.	O	O:0.999972
	
This	O	O:0.999905
tests	O	O:0.999900
whether	O	O:0.999941
you	O	O:0.999960
are	O	O:0.999995
mutating	O	O:0.999925
the	O	O:0.999986
input	O	O:0.999835
in	O	O:0.999992
the	O	O:0.999989
apply	O	B-API:0.896006
or	O	O:0.999778
not	O	O:0.999694
.	O	O:0.999980
	
Just	O	O:0.999509
use	O	O:0.999758
``	O	O:0.999727
apply	O	B-API:0.958773
``	O	O:0.999836
or	O	O:0.999904
iterate	O	O:0.999889
over	O	O:0.999898
the	O	O:0.999959
groups	O	O:0.997607
.	O	O:0.999819
	
Thus	O	O:0.999738
in	O	O:0.999993
a	O	O:0.999993
non-trivial	O	O:0.995640
computation	O	O:0.999839
it	O	O:0.999947
is	O	O:0.999990
essential	O	O:0.999851
that	O	O:0.999987
you	O	O:0.999993
use	O	O:0.999991
the	O	O:0.999968
built	O	O:0.999305
in	O	O:0.999946
functions	O	O:0.999519
.	O	O:0.999901
	
Using	O	O:0.994221
(	O	O:0.999924
apply	O	O:0.553090
/	O	O:0.999886
aggregate	O	B-API:0.877602
)	O	O:0.999780
is	O	O:0.999982
nice	O	O:0.999463
for	O	O:0.999996
a	O	O:0.999980
generalized	O	O:0.968903
function	O	O:0.999893
evaluation	O	O:0.999571
,	O	O:0.999978
but	O	O:0.999981
pandas	O	O:0.999388
cannot	O	O:0.999978
make	O	O:0.999882
too	O	O:0.999989
many	O	O:0.999974
assumptions	O	O:0.999736
about	O	O:0.999917
what	O	O:0.998433
is	O	O:0.999995
going	O	O:0.999829
on	O	O:0.999957
in	O	O:0.999987
the	O	O:0.999995
user	O	O:0.996518
function	O	O:0.999607
,	O	O:0.999945
and	O	O:0.999996
these	O	O:0.999915
are	O	O:0.999972
evaluated	O	O:0.999603
in	O	O:0.999971
python	O	O:0.999660
space	O	O:0.999729
.	O	O:0.999773
	
#CODE	O	O:0.998453
	
if	O	O:0.999980
you	O	O:0.999980
combine	O	O:0.999737
this	O	O:0.999994
with	O	O:0.999994
another	O	O:0.999939
apply	O	O:0.568995
,	O	O:0.999917
you'll	O	O:0.999419
get	O	O:0.999956
info	O	O:0.999913
for	O	O:0.999994
the	O	O:0.999988
total	O	O:0.998848
columns	O	O:0.999634
#CODE	O	O:0.999675
	
I've	O	O:0.999941
come	O	O:0.999743
up	O	O:0.999932
with	O	O:0.999981
this	O	O:0.999928
,	O	O:0.999999
using	O	O:0.999917
itertools	O	O:0.964474
,	O	O:0.999976
to	O	O:0.999985
find	O	O:0.999984
mid-day	O	O:0.999892
timestamps	O	O:0.997149
and	O	O:0.999993
group	O	O:0.999984
them	O	O:0.999922
by	O	O:0.999986
date	O	O:0.998005
,	O	O:0.999970
and	O	O:0.999984
now	O	O:0.999876
I'm	O	O:0.999980
coming	O	O:0.999576
up	O	O:0.999933
short	O	O:0.999667
trying	O	O:0.999848
to	O	O:0.999989
apply	O	O:0.984643
imap	O	O:0.979452
to	O	O:0.999983
find	O	O:0.999982
the	O	O:0.999982
means	O	O:0.999641
.	O	O:0.999927
	
#CODE	O	O:0.998453
	
There	O	O:0.999564
might	O	O:0.999931
be	O	O:0.999973
,	O	O:0.999995
but	O	O:0.999908
AFAIK	O	O:0.999233
,	O	O:0.999996
there	O	O:0.999574
is	O	O:0.999990
no	O	O:0.999978
way	O	O:0.999985
to	O	O:0.999969
use	O	O:0.999970
bracket	O	O:0.998944
indexing	O	O:0.998727
`	O	O:0.999970
df1	O	O:0.968652
[	O	O:0.999993
...	O	O:0.999889
]`	O	O:0.999918
or	O	O:0.999998
any	O	O:0.999988
of	O	O:0.999989
the	O	O:0.999946
indexers	O	O:0.999777
like	O	O:0.999229
`	O	O:0.999990
.loc	B-API	B-API:0.991368
[	O	O:0.999978
]`	O	O:0.999945
,	O	O:0.999902
`	O	O:0.999975
.at	B-API	B-API:0.996120
[	O	O:0.999986
]`	O	O:0.999983
,	O	O:0.999971
or	O	O:0.999972
`	O	O:0.999948
.ix	B-API	B-API:0.969974
[	O	O:0.999989
]`	O	O:0.999959
to	O	O:0.999876
accomplish	O	O:0.999992
this	O	O:0.999851
easily	O	O:0.999719
.	O	O:0.999939
	
Each	O	O:0.999493
of	O	O:0.999978
these	O	O:0.999872
returns	O	O:0.999601
"	O	O:0.999987
rectangular	O	O:0.997470
"	O	O:0.999977
DataFrames	O	O:0.997132
,	O	O:0.999987
whereas	O	O:0.999952
you	O	O:0.999981
want	O	O:0.999996
to	O	O:0.999997
select	O	O:0.999990
a	O	O:0.999985
*	O	O:0.999974
sequence	O	O:0.999974
*	O	O:0.999991
of	O	O:0.999999
individual	O	O:0.999438
values	O	O:0.999977
using	O	O:0.999588
row	O	O:0.999400
and	O	O:0.999936
column	O	O:0.999948
label	O	O:0.999381
coordinates	O	O:0.998130
.	O	O:0.999839
	
There	O	O:0.999420
is	O	O:0.999997
a	O	O:0.999989
way	O	O:0.999934
to	O	O:0.999975
use	O	O:0.999992
`	O	O:0.999929
df.apply	B-API	B-API:0.993581
`	O	O:0.999974
--	O	O:0.999909
there	O	O:0.999885
almost	O	O:0.999966
always	O	O:0.999627
is	O	O:0.999852
--	O	O:0.999880
but	O	O:0.999910
I	O	O:0.999997
think	O	O:0.999940
`	O	O:0.999958
apply	O	B-API:0.990150
`	O	O:0.999937
should	O	O:0.999371
be	O	O:0.999998
avoided	O	O:0.999964
when	O	O:0.999189
possible	O	O:0.999777
because	O	O:0.999989
it	O	O:0.999903
is	O	O:0.999998
often	O	O:0.999763
a	O	O:0.999998
relatively	O	O:0.998855
slow	O	O:0.999222
alternative	O	O:0.999762
.	O	O:0.999798
	
(	O	O:0.999834
Under	O	O:0.999910
the	O	O:0.999957
hood	O	O:0.999182
it	O	O:0.999991
uses	O	O:0.999883
a	O	O:0.999987
Python	O	O:0.999146
loop	O	O:0.999772
which	O	O:0.999883
calls	O	O:0.999919
a	O	O:0.999995
Python	O	O:0.966208
function	O	O:0.999932
for	O	O:0.999993
each	O	O:0.999781
row	O	O:0.999882
or	O	O:0.999996
each	O	O:0.999574
column	O	O:0.999973
...	O	O:0.999985
a	O	O:0.999988
recipe	O	O:0.999422
for	O	O:0.999946
slowness	O	O:0.999688
.	O	O:0.999852
)	O	O:0.999970
	
and	O	O:0.999992
when	O	O:0.999678
I	O	O:0.999986
try	O	O:0.999998
to	O	O:0.999946
apply	O	O:0.834340
pct_change	B-API	B-API:0.999741
:	O	O:0.999672
#CODE	O	O:0.999759
	
So	O	O:0.999968
,	O	O:0.999995
I	O	O:0.999998
have	O	O:0.999986
created	O	O:0.999743
a	O	O:0.999997
Series	O	O:0.999508
with	O	O:0.999826
C1	O	O:0.999905
,	O	O:0.999971
C2	O	O:0.999841
and	O	O:0.999988
C3	O	O:0.999963
as	O	O:0.999988
the	O	O:0.999954
values	O	O:0.998701
-	O	O:0.999993
one	O	O:0.999992
way	O	O:0.999991
top	O	O:0.999946
count	O	O:0.999848
this	O	O:0.999835
is	O	O:0.999992
to	O	O:0.999995
loop	O	O:0.999997
over	O	O:0.999947
the	O	O:0.999995
rows	O	O:0.999605
and	O	O:0.999999
columns	O	O:0.999991
of	O	O:0.999942
the	O	O:0.999954
DataFrame	B-API	O:0.995818
and	O	O:0.999998
then	O	O:0.999930
over	O	O:0.999940
this	O	O:0.999866
Series	O	O:0.999773
and	O	O:0.999992
increment	O	O:0.999731
the	O	O:0.999836
counter	O	O:0.999299
if	O	O:0.999975
it	O	O:0.999988
matches	O	O:0.999265
.	O	O:0.999888
	
But	O	O:0.999314
is	O	O:0.999994
there	O	O:0.999906
an	O	O:0.999985
`	O	O:0.999991
apply	O	B-API:0.966182
`	O	O:0.999950
approach	O	O:0.999797
that	O	O:0.999934
can	O	O:0.999969
achieve	O	O:0.999999
this	O	O:0.999964
in	O	O:0.999999
a	O	O:0.999999
compact	O	O:0.999237
fashion	O	O:0.999864
?	O	O:0.999947
	
You	O	O:0.999898
could	O	O:0.999943
apply	O	O:0.778178
`	O	O:0.999903
value_counts	B-API	B-API:0.999973
`	O	O:0.999880
:	O	O:0.999724
#CODE	O	O:0.999904
	
You	O	O:0.999794
can	O	O:0.999988
just	O	O:0.999994
apply	O	O:0.917583
`	O	O:0.999819
dropna	B-API	B-API:0.998878
`	O	O:0.999994
to	O	O:0.999601
`	O	O:1.000000
a12	O	O:0.995627
`	O	O:0.999989
before	O	O:0.993187
`	O	O:0.999993
merge	O	B-API:0.995364
`	O	O:0.999829
:	O	O:0.999821
#CODE	O	O:0.999909
	
Pandas	O	O:0.998630
:	O	O:0.999958
apply	O	O:0.788910
tupleize_cols	O	O:0.992702
to	O	O:0.999969
dataframe	B-API	O:0.999980
without	O	O:0.999310
to_csv()	B-API	B-API:0.997159
?	O	O:0.999868
	
pandas	O	O:0.999578
apply	O	O:0.590742
np.histogram	B-API	B-API:0.988410
to	O	O:0.999815
reshape	O	O:0.967730
dataframe	B-API	O:0.991605
	
`	O	O:0.999823
np.histogram	B-API	B-API:0.997220
`	O	O:0.999972
is	O	O:0.999952
neither	O	O:0.999988
a	O	O:0.999986
reducer	O	O:0.985294
(	O	O:0.999958
returns	O	O:0.999928
a	O	O:0.999997
single	O	O:0.999738
value	O	O:0.999960
)	O	O:0.999982
,	O	O:0.999989
nor	O	O:0.999996
a	O	O:0.999981
transformer	O	O:0.996993
(	O	O:0.999976
returns	O	O:0.999773
the	O	O:0.999994
same	O	O:0.999965
number	O	O:0.999942
as	O	O:0.999995
the	O	O:0.999997
input	O	O:0.999694
)	O	O:0.999966
.	O	O:0.999715
	
So	O	O:0.999899
`	O	O:0.999991
apply	O	B-API:0.981925
`	O	O:0.999926
doesn't	O	O:0.998766
know	O	O:0.999952
how	O	O:0.999994
to	O	O:0.999960
map	O	O:0.920827
the	O	O:0.999991
return	O	O:0.998714
values	O	O:0.998532
.	O	O:0.999869
	
Here	O	O:0.999276
is	O	O:0.999988
another	O	O:0.999167
way	O	O:0.998799
(	O	O:0.999781
and	O	O:0.999993
conceptually	O	O:0.999715
how	O	O:0.999919
to	O	O:0.999992
think	O	O:0.999998
about	O	O:0.999968
apply	O	B-API:0.734294
)	O	O:0.999486
#CODE	O	O:0.997103
	
Perfect	O	O:0.999242
,	O	O:0.999981
thanks	O	O:0.998751
!	O	O:0.999852
	
I	O	O:0.999983
knew	O	O:0.999428
I	O	O:0.999842
was	O	O:0.999977
missing	O	O:0.999781
something	O	O:0.999890
about	O	O:0.999813
the	O	O:0.999981
internals	O	O:0.999808
of	O	O:0.999967
`	O	O:0.999978
apply	O	B-API:0.960689
`	O	O:0.999821
	
The	O	O:0.999975
code	O	O:0.999751
above	O	O:0.999954
obviously	O	O:0.999859
does	O	O:0.999729
not	O	O:0.999980
work	O	O:0.999932
.	O	O:0.999965
	
It	O	O:0.999004
is	O	O:0.999985
not	O	O:0.999975
clear	O	O:0.999947
to	O	O:0.999992
me	O	O:0.999996
how	O	O:0.999996
to	O	O:0.999998
correctly	O	O:1.000000
pass	O	O:0.999817
the	O	O:0.999987
fixed	O	O:0.999605
`	O	O:0.999992
y	O	O:0.999215
`	O	O:0.999997
to	O	O:0.999977
the	O	O:0.999998
function	O	O:0.999749
while	O	O:0.999928
having	O	O:0.999738
`	O	O:0.999989
apply	O	B-API:0.981870
`	O	O:0.999987
iterating	O	O:0.996810
through	O	O:0.999734
the	O	O:0.999767
`	O	O:0.999960
x	O	O:0.998606
`	O	O:0.999997
columns	O	O:0.997773
(	O	O:0.999979
`	O	O:0.999993
x1	O	O:0.996647
`	O	O:0.999994
,	O	O:0.999867
`	O	O:0.999993
x2	O	O:0.996385
`	O	O:0.999961
,	O	O:0.999984
...	O	O:0.999871
)	O	O:0.999924
.	O	O:0.999821
	
I	O	O:0.999936
suspect	O	O:0.999909
there	O	O:0.999472
might	O	O:0.999956
be	O	O:0.999998
a	O	O:1.000000
very	O	O:0.995197
clever	O	O:0.999895
one-line	O	O:0.999835
solution	O	O:0.999786
to	O	O:0.999986
do	O	O:0.999999
this	O	O:0.999890
.	O	O:0.999930
	
Any	O	O:0.999758
idea	O	O:0.998909
?	O	O:0.999897
	
The	O	O:0.999678
function	O	O:0.999936
you	O	O:0.999991
pass	O	O:0.999665
to	O	O:0.999988
`	O	O:1.000000
apply	O	B-API:0.972678
`	O	O:0.999979
must	O	O:0.999851
take	O	O:0.999997
a	O	O:0.999995
`	O	O:0.999931
pandas.DataFrame	B-API	B-API:0.983665
`	O	O:0.999998
as	O	O:0.999993
a	O	O:0.999997
first	O	O:0.998649
argument	O	O:0.999924
,	O	O:0.999992
you	O	O:0.999979
can	O	O:0.999992
pass	O	O:0.999993
additional	O	O:0.999951
keyword	O	O:0.999697
or	O	O:0.999989
positional	O	O:0.999455
arguments	O	O:0.999888
to	O	O:0.999962
`	O	O:1.000000
apply	O	B-API:0.975116
`	O	O:0.999994
that	O	O:0.999607
get	O	O:0.999997
passed	O	O:0.999859
to	O	O:0.999993
the	O	O:0.999999
applied	O	O:0.997454
function	O	O:0.999698
.	O	O:0.999881
	
So	O	O:0.999934
,	O	O:0.999999
your	O	O:0.999956
example	O	O:0.999563
would	O	O:0.999992
work	O	O:0.999992
with	O	O:0.999998
a	O	O:0.999995
small	O	O:0.997934
modification	O	O:0.999190
.	O	O:0.999826
	
Change	O	O:0.997445
`	O	O:0.999977
ols_res	O	O:0.952349
`	O	O:0.999988
to	O	O:0.999901
#CODE	O	O:0.999990
	
Then	O	O:0.999625
,	O	O:0.999999
you	O	O:0.999995
can	O	O:0.999980
use	O	O:0.999997
`	O	O:0.999967
groupby	B-API	B-API:0.999811
`	O	O:0.999962
and	O	O:0.999129
`	O	O:0.999995
apply	O	B-API:0.993703
`	O	O:0.999964
like	O	O:0.998938
this	O	O:0.999932
#CODE	O	O:0.999779
	
Use	O	O:0.999369
`	O	O:0.999933
groupby	B-API	B-API:0.999662
`	O	O:0.999981
and	O	O:0.999940
we	O	O:0.999997
can	O	O:0.999981
pass	O	O:0.999976
a	O	O:0.999999
dict	O	O:0.999948
of	O	O:0.999988
functions	O	O:0.999880
to	O	O:0.999997
apply	O	O:0.975924
to	O	O:0.999973
each	O	O:0.999982
column	O	O:0.999960
,	O	O:0.999997
for	O	O:0.999988
`	O	O:0.999968
WL	O	O:0.995546
`	O	O:0.999998
column	O	O:0.999716
we	O	O:0.999998
apply	O	O:0.607092
`	O	O:0.999982
count	O	O:0.964429
`	O	O:0.999999
from	O	O:0.997988
`	O	O:0.999994
pandas.Series	B-API	B-API:0.999352
`	O	O:0.999991
,	O	O:0.999982
the	O	O:0.999989
`	O	O:0.999983
all	O	O:0.999200
`	O	O:0.999998
applies	O	O:0.999560
a	O	O:0.999999
test	O	O:0.991317
on	O	O:0.999997
all	O	O:0.999983
values	O	O:0.999605
and	O	O:0.999975
returns	O	O:0.999346
`	O	O:0.999927
True	O	O:0.996265
`	O	O:0.999996
if	O	O:0.999986
all	O	O:0.999997
values	O	O:0.999457
in	O	O:0.999977
the	O	O:0.999993
series	O	O:0.999908
are	O	O:0.999850
`	O	O:0.999994
True	O	O:0.993907
`	O	O:0.999984
and	O	O:0.999347
`	O	O:0.999991
False	O	O:0.988249
`	O	O:0.999989
otherwise	O	O:0.999448
.	O	O:0.999972
	
#CODE	O	O:0.998453
	
In	O	O:0.999968
order	O	O:0.999909
to	O	O:0.999986
assign	O	O:0.999983
these	O	O:0.999992
values	O	O:0.999970
back	O	O:0.999713
to	O	O:0.999998
the	O	O:1.000000
original	O	O:0.999847
dataframe	B-API	O:0.999756
you	O	O:0.999991
can	O	O:0.999991
use	O	O:0.999998
`	O	O:0.999985
transform	O	B-API:0.973984
`	O	O:0.999992
,	O	O:0.999990
unfortunately	O	O:0.999914
I	O	O:0.999981
couldn't	O	O:0.999930
figure	O	O:0.999434
out	O	O:0.999959
how	O	O:0.999983
to	O	O:0.999994
apply	O	O:0.998685
different	O	O:0.999688
functions	O	O:0.999632
to	O	O:0.999997
different	O	O:0.999999
columns	O	O:0.999961
as	O	O:0.999994
transform	O	B-API:0.552119
won't	O	O:0.999778
accept	O	O:0.999378
`	O	O:0.999981
agg	O	B-API:0.997516
`	O	O:0.999972
function	O	O:0.999399
or	O	O:0.999999
a	O	O:0.999995
user	O	O:0.999372
defined	O	O:0.994452
function	O	O:0.999659
.	O	O:0.999772
	
Pandas	O	O:0.999472
groupby	B-API	B-API:0.946226
apply	O	B-API:0.592254
how	O	O:0.999388
to	O	O:0.999991
speed	O	O:0.999977
up	O	O:0.999851
	
rolling	O	O:0.989573
apply	O	B-API:0.788247
for	O	O:0.999890
a	O	O:0.999893
binary	O	O:0.985456
(	O	O:0.999964
or	O	O:0.999995
n-ary	O	O:0.999555
)	O	O:0.999978
function	O	O:0.999626
in	O	O:0.999982
pandas	O	O:0.999644
	
To	O	O:0.999922
do	O	O:0.999992
this	O	O:0.999984
,	O	O:0.999995
I	O	O:0.999998
have	O	O:0.999979
the	O	O:0.999984
following	O	O:0.998777
function	O	O:0.999981
that	O	O:0.999940
I	O	O:0.999998
would	O	O:0.999999
like	O	O:0.999956
to	O	O:0.999998
use	O	O:0.999999
a	O	O:0.999987
rolling	O	O:0.904357
apply	O	B-API:0.714900
with	O	O:0.998374
-	O	O:0.999953
all	O	O:0.999992
this	O	O:0.999967
does	O	O:0.999647
is	O	O:0.999995
calculate	O	O:0.999682
covariance	O	O:0.999992
assuming	O	O:0.999966
zero	O	O:0.999821
mean	O	O:0.999508
if	O	O:0.999986
not	O	O:0.999977
centered	O	O:0.999876
and	O	O:0.999995
calculate	O	O:0.999644
the	O	O:0.999984
usual	O	O:0.999769
covariance	O	O:0.999834
when	O	O:0.999766
it	O	O:0.999983
is	O	O:0.999995
centered	O	O:0.996657
.	O	O:0.999882
	
#CODE	O	O:0.998453
	
You	O	O:0.999833
can	O	O:0.999982
just	O	O:0.999993
call	O	O:0.999744
`	O	O:0.999987
apply	O	B-API:0.997636
`	O	O:0.999952
and	O	O:0.999916
access	O	O:0.999818
the	O	O:0.999744
`	O	O:0.999975
time	O	O:0.998704
`	O	O:0.999995
function	O	O:0.999887
on	O	O:0.999997
the	O	O:0.999988
datetime	O	O:0.998711
object	O	O:0.999900
create	O	O:0.999647
the	O	O:0.999996
column	O	O:0.999874
initially	O	O:0.999970
like	O	O:0.999994
this	O	O:0.999971
without	O	O:0.999907
the	O	O:0.999989
need	O	O:0.999546
for	O	O:0.999985
post	O	O:0.998979
processing	O	O:0.996041
:	O	O:0.999898
#CODE	O	O:0.999799
	
it	O	O:0.999850
does	O	O:0.999793
not	O	O:0.999978
apply	O	O:0.946450
operator	O	O:0.999875
by	O	O:0.999948
elements	O	O:0.999386
,	O	O:0.999925
but	O	O:0.999991
returns	O	O:0.999884
a	O	O:0.999960
2*n	O	O:0.999720
DataFrame	B-API	O:0.997906
of	O	O:0.999918
NaNs	O	O:0.995242
:	O	O:0.999974
#CODE	O	O:0.999879
	
this	O	O:0.999413
uses	O	O:0.999633
indexing	O	O:0.999899
by	O	O:0.999937
column	O	O:0.999878
name	O	O:0.999843
,	O	O:0.999965
and	O	O:0.999995
doesn't	O	O:0.999349
use	O	O:0.999936
logical	O	O:0.998222
operators	O	O:0.999722
on	O	O:0.999983
columns	O	O:0.999983
,	O	O:0.999997
rather	O	O:0.999967
than	O	O:0.999937
that	O	O:0.999933
it	O	O:0.999999
traverses	O	O:0.999995
rows	O	O:0.999899
with	O	O:0.999940
apply	O	B-API:0.854199
function	O	O:0.996625
:	O	O:0.999834
#CODE	O	O:0.999845
	
thanks	O	O:0.998522
for	O	O:0.999971
the	O	O:0.999929
reference	O	O:0.999585
although	O	O:0.999837
I	O	O:0.999970
haven't	O	O:0.999912
been	O	O:0.999256
able	O	O:0.999986
to	O	O:0.999992
apply	O	O:0.969630
it	O	O:0.999954
to	O	O:0.999989
my	O	O:1.000000
specific	O	O:0.999721
problem	O	O:0.999551
.	O	O:0.999878
	
There's	O	O:0.999899
also	O	O:0.999915
evidence	O	O:0.999993
that	O	O:0.999759
statsmodels	O	O:0.999667
supports	O	O:0.999927
timeseries	O	O:0.999694
from	O	O:0.999889
pandas	O	O:0.999579
.	O	O:0.999957
	
You	O	O:0.999883
may	O	O:0.999974
be	O	O:0.999999
able	O	O:0.999990
to	O	O:0.999978
apply	O	O:0.990945
this	O	O:0.999539
to	O	O:0.999991
linear	O	O:0.999982
models	O	O:0.999804
as	O	O:0.999983
well	O	O:0.998058
:	O	O:0.999969
	
It	O	O:0.999645
worked	O	O:0.999907
fine	O	O:0.999854
with	O	O:0.999928
the	O	O:0.999998
test	O	O:0.999709
data	O	O:0.999807
(	O	O:0.999993
200	O	O:0.999981
lines	O	O:0.997143
)	O	O:0.999951
but	O	O:0.999983
gives	O	O:0.999869
me	O	O:0.999977
the	O	O:0.999989
following	O	O:0.999743
error	O	O:0.999915
when	O	O:0.999737
I	O	O:0.999997
apply	O	O:0.977895
it	O	O:0.999550
to	O	O:0.999953
the	O	O:1.000000
real	O	O:0.999186
data	O	O:0.999587
(	O	O:0.999971
20	O	O:0.999989
million	O	O:0.999305
lines	O	O:0.989026
):	O	O:0.999920
#CODE	O	O:0.999811
	
use	O	O:0.999862
a	O	O:0.999969
lamda	O	O:0.992552
apply	O	B-API:0.508420
to	O	O:0.999929
pass	O	O:0.999938
groups	O	O:0.999743
to	O	O:0.999996
the	O	O:0.999994
function	O	O:0.999536
	
This	O	O:0.999770
will	O	O:0.999969
work	O	O:0.999988
by	O	O:0.999997
calling	O	O:0.999271
`	O	O:0.999940
apply	O	B-API:0.994584
`	O	O:0.999854
and	O	O:0.999913
passing	O	O:0.999806
param	O	O:0.990768
`	O	O:0.999976
axis=1	O	O:0.992182
`	O	O:0.999994
to	O	O:0.999916
apply	O	O:0.979185
it	O	O:0.999696
row-wise	O	O:0.967454
:	O	O:0.999955
#CODE	O	O:0.999742
	
You	O	O:0.999950
simply	O	O:0.999816
`	O	O:0.999986
groupby	B-API	B-API:0.999452
`	O	O:0.999999
your	O	O:0.989909
`	O	O:0.999996
time	O	O:0.999259
`	O	O:0.999995
column	O	O:0.999515
and	O	O:1.000000
then	O	O:0.999905
apply	O	O:0.788938
the	O	O:0.999744
`	O	O:0.999964
mean	O	O:0.939098
`	O	O:0.999996
method	O	O:0.999915
to	O	O:0.999997
each	O	O:0.999976
element	O	O:0.999547
.	O	O:0.999904
	
See	O	O:0.999448
documentation	O	O:0.999786
here	O	O:0.999248
.	O	O:0.999901
	
#CODE	O	O:0.998453
	
You	O	O:0.999794
won't	O	O:0.999921
be	O	O:0.999999
able	O	O:0.999994
to	O	O:0.999995
merge	O	O:0.992045
using	O	O:0.999940
a	O	O:0.999965
partial	O	O:0.992662
match	O	O:0.999403
,	O	O:0.999985
you'd	O	O:0.999983
have	O	O:0.999971
to	O	O:0.999998
merge	O	O:0.994575
what	O	O:0.999927
you	O	O:0.999978
can	O	O:0.999990
and	O	O:1.000000
then	O	O:0.999974
perform	O	O:0.999983
a	O	O:0.999995
lookup	O	O:0.939768
for	O	O:0.999989
the	O	O:0.999992
other	O	O:0.999968
rows	O	O:0.999034
,	O	O:0.999983
I've	O	O:0.999977
done	O	O:0.999945
this	O	O:0.999865
before	O	O:0.999941
where	O	O:0.999918
there	O	O:0.999853
were	O	O:0.999921
inexact	O	O:0.999686
matches	O	O:0.999288
.	O	O:0.999847
	
You	O	O:0.999974
have	O	O:0.999950
to	O	O:0.999991
write	O	O:0.999998
some	O	O:0.998797
function	O	O:0.999919
and	O	O:0.999998
then	O	O:0.999874
apply	O	O:0.831450
it	O	O:0.999972
row-wise	O	O:0.996178
to	O	O:0.999998
your	O	O:0.999987
merged	O	O:0.999791
dataframe	B-API	O:0.998831
	
and	O	O:0.999849
I'm	O	O:0.999976
trying	O	O:0.999726
to	O	O:0.999994
apply	O	O:0.972873
a	O	O:0.999973
transformation	O	O:0.998754
in	O	O:0.999997
order	O	O:0.999937
to	O	O:0.999996
get	O	O:0.999999
a	O	O:0.999997
dataframe	B-API	O:0.998427
that	O	O:0.999960
looks	O	O:0.999993
like	O	O:0.999967
the	O	O:0.999973
following	O	O:0.998299
#CODE	O	O:0.999216
	
My	O	O:0.999923
question	O	O:0.998333
is	O	O:0.999989
how	O	O:0.999932
can	O	O:0.999977
I	O	O:1.000000
apply	O	O:0.983152
this	O	O:0.993371
function	O	O:0.999631
to	O	O:0.999994
several	O	O:0.999986
classifiers	O	O:0.999508
and	O	O:0.999993
append	O	O:0.988047
their	O	O:0.998654
result	O	O:0.999952
as	O	O:0.999995
a	O	O:0.999998
long	O	O:0.999817
data	O	O:0.999976
frame	O	O:0.999997
like	O	O:0.999869
#CODE	O	O:0.999868
	
`	O	O:0.999946
d.index	O	O:0.974431
=	O	O:0.999975
d.index.apply	O	O:0.989634
(	O	O:0.999924
lambda	O	O:0.999241
x	O	O:0.999490
:	O	O:0.999933
x.time()	O	O:0.998708
)`	O	O:0.999836
won't	O	O:0.999761
work	O	O:0.999854
.	O	O:0.999983
	
I	O	O:0.999948
finally	O	O:0.999870
managed	O	O:0.998998
to	O	O:0.999965
do	O	O:0.999999
it	O	O:0.999998
by	O	O:0.999993
doing	O	O:0.999994
a	O	O:0.999995
reset	O	O:0.991003
of	O	O:0.999895
the	O	O:0.999906
index	O	O:0.999922
,	O	O:0.999990
apply	O	O:0.552496
,	O	O:0.999905
and	O	O:0.999992
set	O	O:0.999384
again	O	O:0.997971
:	O	O:0.999956
	
A	O	O:0.999630
simple	O	O:0.998867
method	O	O:0.999785
would	O	O:0.999960
be	O	O:0.999994
`	O	O:0.999997
df.loc	B-API	B-API:0.998252
[:	O	O:0.999915
((	O	O:0.999669
df	O	O:0.998289
[	O	O:0.999906
'	O	O:0.999953
A	O	O:0.999986
']	O	O:0.999962
==	O	O:0.999634
0	O	O:0.999834
)	O	O:0.999884
&	O	O:0.998938
(	O	O:0.999986
df	O	O:0.999605
[	O	O:0.999948
'	O	O:0.999978
C	O	O:0.999871
']	O	O:0.999958
==	O	O:0.999590
0	O	O:0.999903
))	O	O:0.999628
.idxmax()	B-API	B-API:0.999614
]`	O	O:0.999285
but	O	O:0.999946
this	O	O:0.999891
doesn't	O	O:0.999960
apply	O	O:0.539813
for	O	O:0.999981
every	O	O:0.992372
id	O	O:0.998288
	
@USER	O	O:0.999703
you	O	O:0.999905
can	O	O:0.999991
just	O	O:0.999995
groupby	B-API	B-API:0.772492
id	O	O:0.999949
then	O	O:0.999268
apply	O	O:0.640259
idxmax	B-API	B-API:0.996647
(	O	O:0.999856
filter	O	O:0.991511
before	O	O:0.999770
the	O	O:0.999974
groupby	B-API	B-API:0.995312
)	O	O:0.999893
	
I've	O	O:0.998996
been	O	O:0.999576
trying	O	O:0.999943
to	O	O:0.999990
apply	O	O:0.994411
your	O	O:0.999842
code	O	O:0.999370
to	O	O:0.999999
my	O	O:0.999995
dataset	O	O:0.999901
but	O	O:0.999992
keep	O	O:0.999574
running	O	O:0.999771
into	O	O:0.998875
MemoryErrors	O	O:0.999276
.	O	O:0.999656
	
My	O	O:0.999883
local	O	O:0.999461
machine	O	O:0.999953
only	O	O:0.999657
runs	O	O:0.999897
python	O	O:0.999871
32	O	O:0.999960
so	O	O:0.999946
i	O	O:0.999949
switched	O	O:0.999966
to	O	O:0.999987
an	O	O:0.999998
Amazon	O	O:0.999802
m3.medium	O	O:0.995026
(	O	O:0.999952
1	O	O:0.999957
VCPU	O	O:0.999451
3.75GB	O	O:0.994611
Mem	O	O:0.999856
64-bit	O	O:0.999726
python	O	O:0.997464
)	O	O:0.999981
but	O	O:0.999959
even	O	O:0.999957
this	O	O:0.999977
instance	O	O:0.999955
Kills	O	O:0.999759
the	O	O:0.999928
job	O	O:0.999297
.	O	O:0.999823
	
How	O	O:0.999857
can	O	O:0.999937
you	O	O:0.999998
achieve	O	O:0.999953
these	O	O:0.999993
kinds	O	O:0.999973
of	O	O:0.999988
runtimes	O	O:0.997313
?	O	O:0.999973
	
I	O	O:0.999991
have	O	O:0.999989
a	O	O:0.999988
pandas	O	O:0.999878
dataframe	B-API	O:0.998724
with	O	O:0.999821
mixed	O	O:0.999568
type	O	O:0.999829
columns	O	O:0.999783
,	O	O:0.999984
and	O	O:0.999994
I'd	O	O:0.999996
like	O	O:0.999912
to	O	O:0.999996
apply	O	O:0.964120
sklearn's	O	O:0.999111
min_max_scaler	O	O:0.997031
to	O	O:0.999999
some	O	O:0.999997
of	O	O:0.999996
the	O	O:0.999989
columns	O	O:0.999880
.	O	O:0.999898
	
Ideally	O	O:0.999728
,	O	O:0.999989
I'd	O	O:0.999997
like	O	O:0.999963
to	O	O:0.999994
do	O	O:0.999999
these	O	O:0.999986
transformations	O	O:0.999781
in	O	O:0.999996
place	O	O:0.999613
,	O	O:0.999983
but	O	O:0.999956
haven't	O	O:0.999557
figured	O	O:0.999908
out	O	O:0.999993
a	O	O:0.999994
way	O	O:0.999893
to	O	O:0.999980
do	O	O:0.999999
that	O	O:0.999918
yet	O	O:0.999854
.	O	O:0.999956
	
I've	O	O:0.999429
written	O	O:0.999372
the	O	O:0.999980
following	O	O:0.999661
code	O	O:0.999703
that	O	O:0.999645
works	O	O:0.999829
:	O	O:0.999981
#CODE	O	O:0.999663
	
I	O	O:0.999979
know	O	O:0.999980
that	O	O:0.999807
I	O	O:0.999996
can	O	O:0.999990
do	O	O:0.999987
it	O	O:0.999999
just	O	O:0.999515
in	O	O:0.999998
pandas	O	O:0.999153
,	O	O:0.999995
but	O	O:0.999954
I	O	O:0.999988
may	O	O:0.999998
want	O	O:0.999848
to	O	O:0.999997
eventually	O	O:0.999998
apply	O	O:0.921026
a	O	O:0.999987
different	O	O:0.988326
sklearn	O	O:0.995741
method	O	O:0.999959
that	O	O:0.999884
isn't	O	O:0.999994
as	O	O:0.999999
easy	O	O:0.999597
to	O	O:0.999992
write	O	O:0.999968
myself	O	O:0.998836
.	O	O:0.999948
	
I'm	O	O:0.999899
more	O	O:0.999824
interested	O	O:0.999612
in	O	O:0.999988
figuring	O	O:0.999289
out	O	O:0.999958
why	O	O:0.999988
applying	O	O:0.999825
to	O	O:0.999989
a	O	O:0.999999
series	O	O:0.999583
doesn't	O	O:0.999978
work	O	O:0.999991
as	O	O:0.999998
I	O	O:0.999987
expected	O	O:0.999992
than	O	O:0.999551
I	O	O:0.999996
am	O	O:0.999996
in	O	O:0.999982
coming	O	O:0.999696
up	O	O:0.999979
with	O	O:0.999971
a	O	O:0.999993
strictly	O	O:0.999496
simpler	O	O:0.999546
solution	O	O:0.998763
.	O	O:0.999887
	
My	O	O:0.999983
next	O	O:0.999759
step	O	O:0.999966
will	O	O:0.999977
be	O	O:0.999999
to	O	O:0.999996
run	O	O:0.999991
a	O	O:0.999979
RandomForestRegressor	O	O:0.906261
,	O	O:0.999985
and	O	O:0.999989
I	O	O:0.999997
want	O	O:0.999919
to	O	O:0.999969
make	O	O:0.999998
sure	O	O:0.999828
I	O	O:0.999991
understand	O	O:0.999799
how	O	O:0.999502
Pandas	O	O:0.999365
and	O	O:0.999989
sklearn	O	O:0.999564
work	O	O:0.999383
together	O	O:0.999185
.	O	O:0.999925
	
Using	O	O:0.999546
apply	O	B-API:0.965162
is	O	O:0.999885
always	O	O:0.999465
the	O	O:0.999998
last	O	O:0.997374
operation	O	O:0.999846
to	O	O:0.999975
try	O	O:0.999994
.	O	O:0.999915
	
Vectorized	O	O:0.999356
methods	O	O:0.999036
are	O	O:0.999984
much	O	O:0.999400
faster	O	O:0.999151
.	O	O:0.999702
	
#CODE	O	O:0.998453
	
@USER	O	O:0.997811
That	O	O:0.999813
works	O	O:0.999875
for	O	O:0.999993
the	O	O:0.999951
entire	O	O:0.999195
dataframe	B-API	O:0.998408
easily	O	O:0.999560
.	O	O:0.999943
	
How	O	O:0.999649
would	O	O:0.999943
you	O	O:0.999992
apply	O	O:0.990817
this	O	O:0.999919
to	O	O:0.999997
a	O	O:1.000000
single	O	O:0.999517
column	O	O:0.999917
?	O	O:0.999971
	
`	O	O:0.999964
df	O	O:0.997516
[(	O	O:0.999988
'	O	O:0.999981
date	O	O:0.998168
'	O	O:0.999979
,	O	O:0.999967
''	O	O:0.999938
,	O	O:0.999986
'')]	O	O:0.998703
.swaplevel	B-API	B-API:0.989263
(	O	O:0.999958
0	O	O:0.999935
,	O	O:0.999977
2	O	O:0.999885
)`	O	O:0.999298
did	O	O:0.999818
not	O	O:0.999980
work	O	O:0.999865
.	O	O:0.999968
	
How	O	O:0.999876
can	O	O:0.999945
I	O	O:0.999999
apply	O	O:0.984362
this	O	O:0.999504
process	O	O:0.999485
to	O	O:0.999994
all	O	O:1.000000
the	O	O:0.999998
columns	O	O:0.999838
I	O	O:0.999999
want	O	O:0.999995
at	O	O:0.999988
once	O	O:0.999795
and	O	O:0.999998
produce	O	O:0.999926
a	O	O:0.999991
dataframe	B-API	O:0.997512
of	O	O:0.999985
it	O	O:0.999983
all	O	O:0.999981
?	O	O:0.999957
	
Sorry	O	O:0.999144
if	O	O:0.999994
this	O	O:0.999748
is	O	O:0.999999
a	O	O:0.999996
repeat	O	O:0.981051
;	O	O:0.999977
the	O	O:0.999983
pandas	O	O:0.999871
questions	O	O:0.999888
I've	O	O:0.999752
found	O	O:0.999940
that	O	O:0.999951
seem	O	O:0.999960
to	O	O:0.999998
be	O	O:1.000000
about	O	O:0.999962
related	O	O:0.999260
topics	O	O:0.999459
are	O	O:0.999992
all	O	O:0.999993
over	O	O:0.999468
my	O	O:0.999856
head	O	O:0.999479
.	O	O:0.999920
	
I	O	O:0.999987
have	O	O:0.999879
3,000	O	O:0.999584
.dat	O	O:0.999144
files	O	O:0.999923
that	O	O:0.999931
I	O	O:0.999997
am	O	O:0.999998
reading	O	O:0.993004
and	O	O:0.999985
concatenating	O	O:0.999657
into	O	O:0.996805
one	O	O:0.999978
pandas	O	O:0.999684
dataframe	B-API	O:0.997973
.	O	O:0.999781
	
They	O	O:0.999918
have	O	O:0.999941
the	O	O:0.999995
same	O	O:0.999821
format	O	O:0.999219
(	O	O:0.999992
4	O	O:0.999991
columns	O	O:0.999819
,	O	O:0.999992
no	O	O:0.999992
header	O	O:0.999902
)	O	O:0.999989
except	O	O:0.999971
that	O	O:0.999996
some	O	O:0.999989
of	O	O:1.000000
them	O	O:0.999925
have	O	O:0.999997
a	O	O:0.999999
description	O	O:0.999765
at	O	O:0.999995
the	O	O:0.999999
beginning	O	O:0.999760
of	O	O:0.999974
the	O	O:0.999978
file	O	O:0.999941
while	O	O:0.999937
others	O	O:0.999865
don't	O	O:0.999856
.	O	O:0.999965
	
In	O	O:0.999970
order	O	O:0.999902
to	O	O:0.999988
concatenate	O	O:0.991966
those	O	O:0.999980
files	O	O:0.999897
,	O	O:0.999997
I	O	O:0.999999
need	O	O:0.999986
to	O	O:0.999977
get	O	O:1.000000
rid	O	O:0.999986
of	O	O:0.999996
those	O	O:0.999991
first	O	O:0.999993
rows	O	O:0.999763
before	O	O:0.999815
I	O	O:0.999995
concatenate	O	O:0.968827
them	O	O:0.997175
.	O	O:0.999923
	
The	O	O:0.999774
`	O	O:0.999988
skiprows	O	O:0.939160
`	O	O:0.999998
option	O	O:0.999720
of	O	O:0.999996
the	O	O:0.999957
`	O	O:0.999984
pandas.read_csv()	B-API	B-API:0.999899
`	O	O:0.999992
doesn't	O	O:0.999762
apply	O	O:0.950264
here	O	O:0.998935
,	O	O:0.999974
because	O	O:0.999984
the	O	O:0.999994
number	O	O:0.999993
of	O	O:0.999999
rows	O	O:0.999951
to	O	O:0.999999
skip	O	O:0.999550
is	O	O:0.999996
very	O	O:0.999585
inconsistent	O	O:0.999948
from	O	O:0.999888
one	O	O:0.999993
file	O	O:0.999988
to	O	O:0.999995
another	O	O:0.999958
(	O	O:0.999979
btw	O	O:0.999972
,	O	O:0.999998
I	O	O:0.999989
use	O	O:0.999965
`	O	O:0.999570
pandas.read_csv()	B-API	B-API:0.999934
`	O	O:0.999891
and	O	O:0.999953
not	O	O:0.999975
`	O	O:0.999991
pandas.read_table()	B-API	B-API:0.995097
`	O	O:0.999993
because	O	O:0.999943
the	O	O:0.999996
files	O	O:0.999743
are	O	O:0.999990
separated	O	O:0.999989
by	O	O:0.999993
a	O	O:0.999993
coma	O	O:0.993876
)	O	O:0.999979
.	O	O:0.999792
	
I	O	O:0.999967
thought	O	O:0.999724
I	O	O:0.999968
could	O	O:0.999977
apply	O	O:0.760792
a	O	O:0.999992
list	O	O:0.994993
of	O	O:0.999985
strings	O	O:0.994639
,	O	O:0.999982
but	O	O:0.999975
it	O	O:0.999957
does	O	O:0.999862
not	O	O:0.999995
work	O	O:0.999965
either	O	O:0.999967
,	O	O:0.999994
because	O	O:0.999960
it	O	O:0.999902
is	O	O:0.999988
`	O	O:0.999992
not	O	O:0.999870
in	O	O:0.999991
the	O	O:0.999971
ColumnDataSource	O	O:0.993816
`	O	O:0.999935
.	O	O:0.999634
	
If	O	O:0.999956
I	O	O:0.999995
zoom	O	O:0.999846
in	O	O:0.999951
deeper	O	O:0.999747
,	O	O:0.999998
the	O	O:0.999982
numbers	O	O:0.997875
are	O	O:0.999990
getting	O	O:0.999965
even	O	O:0.999583
less	O	O:0.999882
meaningfull	O	O:0.997249
.	O	O:0.999822
	
Then	O	O:0.999170
it	O	O:0.999993
might	O	O:0.999989
say	O	O:0.999975
`	O	O:0.999993
03	O	O:0.998523
`	O	O:0.999968
,	O	O:0.999899
but	O	O:0.999991
03	O	O:0.999951
of	O	O:0.999984
what	O	O:0.999450
?	O	O:0.999986
	
At	O	O:0.999931
which	O	O:0.999852
minute	O	O:0.999667
,	O	O:0.999992
which	O	O:0.999913
hour	O	O:0.997300
?	O	O:0.999968
	
Is	O	O:0.999983
there	O	O:0.999990
a	O	O:0.999996
solution	O	O:0.998605
for	O	O:0.999994
this	O	O:0.999574
?	O	O:0.999943
	
python	O	O:0.998181
pandas	O	O:0.997851
:	O	O:0.999981
groupby	B-API	B-API:0.888711
apply	O	B-API:0.814069
function	O	O:0.999179
looks	O	O:0.999877
at	O	O:1.000000
prior	O	O:0.999959
rows	O	O:0.999337
	
so	O	O:0.999927
I've	O	O:0.999855
updated	O	O:0.999909
my	O	O:0.999976
code	O	O:0.999787
below	O	O:0.999910
,	O	O:0.999997
maybe	O	O:0.999558
I'm	O	O:0.999958
not	O	O:0.999985
understanding	O	O:0.999865
how	O	O:0.999840
apply	O	B-API:0.759217
works	O	O:0.998066
,	O	O:0.999961
but	O	O:0.999958
I	O	O:0.999965
thought	O	O:0.999961
this	O	O:0.999523
would	O	O:0.999966
execute	O	O:0.999907
twice	O	O:0.999936
(	O	O:0.999999
once	O	O:0.999855
for	O	O:0.999994
each	O	O:0.999834
group	O	O:0.994831
)	O	O:0.999975
.	O	O:0.999615
	
Then	O	O:0.999450
,	O	O:0.999999
my	O	O:0.999949
function	O	O:0.999701
would	O	O:0.999983
loop	O	O:0.999993
over	O	O:0.999988
each	O	O:0.999523
row	O	O:0.999900
within	O	O:0.999891
those	O	O:0.999921
executions	O	O:0.999320
.	O	O:0.999878
	
I'm	O	O:0.999925
still	O	O:0.999901
puzzled	O	O:0.999951
as	O	O:0.999992
to	O	O:0.999961
why	O	O:0.999995
it's	O	O:0.999953
going	O	O:0.999805
3	O	O:0.999872
times	O	O:0.999373
...	O	O:0.999690
	
I	O	O:0.999963
thought	O	O:0.999387
"	O	O:0.999924
executed	O	O:0.996972
"	O	O:0.999952
would	O	O:0.999890
print	O	O:0.999870
5	O	O:0.999976
times	O	O:0.998759
.	O	O:0.999890
	
Thoughts	O	O:0.999025
on	O	O:0.999992
this	O	O:0.999873
?	O	O:0.999990
	
its	O	O:0.999623
not	O	O:0.999987
specific	O	O:0.999949
to	O	O:0.999990
apply	O	O:0.841439
,	O	O:0.999846
but	O	O:0.999946
more	O	O:0.999923
general	O	O:0.999070
in	O	O:0.999953
groupby	B-API	B-API:0.989694
,	O	O:0.999982
nor	O	O:0.999583
is	O	O:0.999993
ever	O	O:0.999916
point	O	O:0.999982
mentioned	O	O:0.999580
in	O	O:0.999984
the	O	O:0.999939
doc-string	O	O:0.999121
.	O	O:0.999619
	
I	O	O:0.999961
tried	O	O:0.999927
to	O	O:0.999887
apply	O	O:0.821607
this	O	O:0.999204
method	O	O:0.999950
to	O	O:0.999997
each	O	O:0.999999
subset	O	O:0.999942
of	O	O:0.999999
data	O	O:0.999955
with	O	O:0.999996
a	O	O:0.999994
nested-loop	O	O:0.975047
script	O	O:0.998850
:	O	O:0.999964
#CODE	O	O:0.999851
	
Grouping	O	O:0.999601
data	O	O:0.999736
frames	O	O:0.999399
and	O	O:0.999999
applying	O	O:0.999983
a	O	O:0.999100
function	O	O:0.997041
is	O	O:0.999987
essentially	O	O:0.999965
done	O	O:0.999846
in	O	O:0.999917
one	O	O:0.999957
statement	O	O:0.999981
,	O	O:0.999997
using	O	O:0.999969
the	O	O:0.999792
`	O	O:0.999902
apply	O	B-API:0.986778
`	O	O:0.999992
-functionality	O	O:0.993312
of	O	O:0.999981
pandas	O	O:0.991381
:	O	O:0.999985
#CODE	O	O:0.999664
	
pandas	O	O:0.997413
:	O	O:0.999995
apply	O	O:0.926762
a	O	O:0.999943
function	O	O:0.999144
to	O	O:0.999985
the	O	O:1.000000
many	O	O:0.999986
columns	O	O:0.999966
of	O	O:0.999999
a	O	O:0.999987
large	O	O:0.999561
DataFrame	B-API	O:0.982580
to	O	O:0.999953
return	O	O:0.999997
multiple	O	O:0.999956
rows	O	O:0.999133
	
Taking	O	O:0.999395
the	O	O:0.999975
idea	O	O:0.999504
from	O	O:0.999610
From	O	O:0.999985
this	O	O:0.999818
answer	O	O:0.999504
:	O	O:0.999949
pandas	O	O:0.999093
:	O	O:0.999997
apply	O	B-API:0.522626
function	O	O:0.999567
to	O	O:0.999920
DataFrame	B-API	O:0.999973
that	O	O:0.999905
can	O	O:0.999994
return	O	O:0.999999
multiple	O	O:0.999980
rows	O	O:0.998879
	
If	O	O:0.999972
you	O	O:0.999992
have	O	O:0.999926
"	O	O:0.999998
oddly-shaped	O	O:0.998488
"	O	O:0.999996
json	O	O:0.999337
,	O	O:0.999999
then	O	O:0.999949
you	O	O:0.999998
can	O	O:0.999995
either	O	O:0.999999
`	O	O:0.999993
json_normalize	B-API	B-API:0.994980
`	O	O:0.999995
when	O	O:0.999373
reading	O	O:0.999967
,	O	O:0.999996
or	O	O:0.999995
parse	O	O:0.999520
the	O	O:0.999998
columns	O	O:0.999699
which	O	O:0.999879
contain	O	O:0.999969
multiple	O	O:0.999996
columns	O	O:0.999804
after	O	O:0.999989
reading	O	O:0.998648
in	O	O:0.999784
the	O	O:0.999961
DataFrame	B-API	O:0.941479
(	O	O:0.999978
e.g.	O	O:0.999971
using	O	O:0.999963
a	O	O:0.999878
Series	O	O:0.954590
string	O	O:0.999597
method	O	O:0.999911
or	O	O:0.999995
apply	O	O:0.535142
)	O	O:0.999849
.	O	O:0.999090
	
just	O	O:0.999433
use	O	O:0.999986
an	O	O:0.999820
`	O	O:0.999982
apply	O	B-API:0.972389
`	O	O:0.999979
with	O	O:0.999864
a	O	O:0.999968
function	O	O:0.999919
that	O	O:0.999933
creates	O	O:0.999947
a	O	O:0.999999
dictionary	O	O:0.999942
based	O	O:0.999776
on	O	O:0.999991
the	O	O:0.999965
`	O	O:0.999989
str.count	B-API	B-API:0.989386
`	O	O:0.999997
of	O	O:0.999983
the	O	O:0.999981
substrings	O	O:0.998641
	
Well	O	O:0.999685
,	O	O:0.999991
I	O	O:0.999986
am	O	O:0.999998
creating	O	O:0.999751
somewhat	O	O:0.999878
of	O	O:0.999998
a	O	O:0.999995
randomizer	O	O:0.998941
for	O	O:0.999984
an	O	O:0.999934
experiment	O	O:0.997125
.	O	O:0.999843
	
In	O	O:0.999970
order	O	O:0.999800
to	O	O:0.999999
counterbalance	O	O:0.999992
appropriately	O	O:0.999975
,	O	O:0.999993
I	O	O:0.999997
want	O	O:0.999974
to	O	O:0.999951
be	O	O:1.000000
able	O	O:0.999993
to	O	O:0.999991
randomize	O	O:0.999995
the	O	O:0.999997
rows	O	O:0.998924
and	O	O:0.999997
the	O	O:0.999999
columns	O	O:0.999915
independently	O	O:0.999925
from	O	O:0.999984
each	O	O:0.999858
other	O	O:0.999866
,	O	O:0.999980
but	O	O:0.999995
the	O	O:0.999997
data	O	O:0.999966
inside	O	O:0.999926
the	O	O:0.999997
table	O	O:0.999593
isn't	O	O:0.999894
all	O	O:0.999989
ints	O	O:0.998941
,	O	O:0.999991
but	O	O:0.999981
rather	O	O:0.999922
,	O	O:0.999999
lists	O	O:0.999882
of	O	O:0.999986
strings	O	O:0.999665
,	O	O:0.999998
dictionaries	O	O:0.999498
,	O	O:0.999979
and	O	O:0.999998
such	O	O:0.999726
.	O	O:0.999796
	
That	O	O:0.999866
said	O	O:0.999941
,	O	O:0.999997
I	O	O:0.999986
am	O	O:0.999997
trying	O	O:0.999675
to	O	O:0.999998
find	O	O:0.999984
out	O	O:0.999980
if	O	O:0.999997
there	O	O:0.999867
is	O	O:0.999997
a	O	O:0.999988
way	O	O:0.999886
to	O	O:0.999994
basically	O	O:0.999995
do	O	O:0.999987
what	O	O:0.999713
was	O	O:0.999988
done	O	O:0.999874
in	O	O:0.999985
the	O	O:0.999989
link	O	O:0.999595
I	O	O:0.999959
posted	O	O:0.999544
(	O	O:0.999933
randomize	O	O:0.999387
column-wise	O	O:0.998698
)	O	O:0.999981
and	O	O:0.999982
apply	O	O:0.852373
that	O	O:0.999496
to	O	O:0.999997
rows	O	O:0.999959
.	O	O:0.999887
	
I	O	O:0.999815
was	O	O:0.999993
able	O	O:0.999800
to	O	O:0.999995
make	O	O:0.999996
this	O	O:0.999976
work	O	O:0.999851
,	O	O:0.999997
but	O	O:0.999998
only	O	O:0.999942
if	O	O:0.999995
the	O	O:0.999990
dataframe	B-API	O:0.998995
contains	O	O:0.999733
numbers	O	O:0.999968
only	O	O:0.999928
,	O	O:0.999999
though	O	O:0.999953
I	O	O:0.999999
want	O	O:0.999987
to	O	O:0.999938
extend	O	O:0.999978
the	O	O:0.999990
possibility	O	O:0.999823
to	O	O:0.999979
strings	O	O:0.999957
and	O	O:0.999996
such	O	O:0.999893
.	O	O:0.999819
	
Tried	O	O:0.999125
using	O	O:0.999546
:	O	O:0.999498
apply	O	B-API:0.963612
(	O	O:0.999827
pd.Series.interpolate	B-API	B-API:0.980956
(	O	O:0.999944
method=	O	O:0.999263
'	O	O:0.999977
linear	O	O:0.998170
'))	O	O:0.999963
however	O	O:0.999832
I	O	O:0.999992
get	O	O:0.999989
the	O	O:0.999975
following	O	O:0.999362
error	O	O:0.997998
:	O	O:0.999906
	
My	O	O:0.999907
idea	O	O:0.998822
was	O	O:0.999948
to	O	O:0.999986
apply	O	O:0.991867
this	O	O:0.995632
function	O	O:0.999583
(	O	O:0.999993
or	O	O:0.999998
similar	O	O:0.999861
)	O	O:0.999998
column	O	O:0.999802
wise	O	O:0.999604
.	O	O:0.999888
	
Have	O	O:0.999673
played	O	O:0.999534
with	O	O:0.999629
.apply()	B-API	B-API:0.999790
but	O	O:0.999962
because	O	O:0.999980
its	O	O:0.999988
a	O	O:0.999992
double	O	O:0.853086
(	O	O:0.999971
or	O	O:0.999994
triple	O	O:0.999901
)	O	O:0.999964
function	O	O:0.999897
call	O	O:0.998288
i.e.	O	O:0.999487
f1	O	O:0.995378
.	O	O:0.999717
	
(	O	O:0.999882
)	O	O:0.999979
.f2	O	O:0.959697
(	O	O:0.999980
x	O	O:0.999902
,	O	O:0.999995
y	O	O:0.999982
)	O	O:0.999987
or	O	O:0.999957
f1	O	O:0.999683
.	O	O:0.999869
	
(	O	O:0.999882
)	O	O:0.999979
.f2	O	O:0.959697
(	O	O:0.999980
x	O	O:0.999906
,	O	O:0.999995
y	O	O:0.999941
)	O	O:0.999974
.f3	O	O:0.969291
(	O	O:0.999983
x	O	O:0.999867
,	O	O:0.999993
y	O	O:0.999943
)	O	O:0.999975
it	O	O:0.999979
gives	O	O:0.999953
me	O	O:0.999988
an	O	O:0.999970
error	O	O:0.999549
.	O	O:0.999774
	
Any	O	O:0.999782
ideas	O	O:0.999261
would	O	O:0.999881
be	O	O:0.999994
greatly	O	O:0.999886
appreciated	O	O:0.999285
and	O	O:0.999967
I	O	O:0.999980
think	O	O:0.999943
this	O	O:0.999255
would	O	O:0.999977
be	O	O:0.999999
a	O	O:0.999999
very	O	O:0.996194
useful	O	O:0.999898
bit	O	O:0.999901
of	O	O:0.999988
code	O	O:0.999674
to	O	O:0.999999
have	O	O:0.999995
out	O	O:0.999987
there	O	O:0.999922
!	O	O:0.999927
	
how	O	O:0.999918
to	O	O:0.999988
apply	O	O:0.990584
preprocessing	O	O:0.999658
methods	O	O:0.998494
on	O	O:0.999992
several	O	O:0.999983
columns	O	O:0.999948
at	O	O:0.999996
one	O	O:0.999997
time	O	O:0.999951
in	O	O:0.999984
sklearn	O	O:0.998191
	
My	O	O:0.999918
question	O	O:0.999120
is	O	O:0.999990
I	O	O:0.999995
have	O	O:0.999971
so	O	O:0.999993
many	O	O:0.999991
columns	O	O:0.999850
in	O	O:0.999991
my	O	O:0.999998
pandas	O	O:0.999962
data	O	O:0.999980
frame	O	O:0.999992
and	O	O:0.999996
I	O	O:0.999985
am	O	O:0.999994
trying	O	O:0.999697
to	O	O:0.999991
apply	O	O:0.955515
the	O	O:0.999898
sklearn	O	O:0.998305
preprocessing	O	O:0.999852
using	O	O:0.999929
dataframe	B-API	O:0.996731
mapper	O	O:0.991388
from	O	O:0.999714
sklearn-pandas	O	O:0.987556
library	O	O:0.999987
such	O	O:0.999746
as	O	O:0.999980
#CODE	O	O:0.995605
	
Typically	O	O:0.999945
everything	O	O:0.999973
that	O	O:0.999975
you	O	O:0.999996
do	O	O:0.999995
within	O	O:0.999719
`	O	O:0.999961
groupby	B-API	B-API:0.999393
`	O	O:0.999984
should	O	O:0.998952
be	O	O:0.999998
group	O	O:0.999160
independent	O	O:0.996966
.	O	O:0.999716
	
So	O	O:0.999924
,	O	O:0.999992
within	O	O:0.999889
any	O	O:0.999872
`	O	O:0.999979
groupby.apply()	B-API	B-API:0.999940
`	O	O:0.999989
,	O	O:0.999954
you	O	O:0.999994
will	O	O:0.999994
only	O	O:0.999995
get	O	O:0.999995
the	O	O:0.999999
group	O	O:0.999621
itself	O	O:0.999480
,	O	O:0.999990
not	O	O:0.999981
the	O	O:0.999975
context	O	O:0.998994
.	O	O:0.999917
	
An	O	O:0.999915
alternative	O	O:0.999792
is	O	O:0.999997
to	O	O:0.999969
compute	O	O:0.999959
the	O	O:0.999901
`	O	O:0.999975
index	O	O:0.998915
`	O	O:0.999999
value	O	O:0.999872
for	O	O:0.999995
the	O	O:0.999988
whole	O	O:0.998644
sample	O	O:0.996754
(	O	O:0.999984
following	O	O:0.999783
,	O	O:0.999798
`	O	O:0.999991
index	O	O:0.999769
`)	O	O:0.999999
out	O	O:0.999975
of	O	O:0.999997
the	O	O:0.999981
indices	O	O:0.999571
for	O	O:0.999983
the	O	O:0.999969
groups	O	O:0.984575
(	O	O:0.999985
here	O	O:0.999825
,	O	O:0.999987
`	O	O:0.999997
selected	O	O:0.996763
`)	O	O:0.999980
.	O	O:0.999720
	
Note	O	O:0.999939
that	O	O:0.999967
the	O	O:0.999997
dataset	O	O:0.999661
is	O	O:0.999986
sorted	O	O:0.999895
by	O	O:0.999992
groups	O	O:0.999610
,	O	O:0.999972
which	O	O:0.999975
you	O	O:0.999993
need	O	O:0.999994
to	O	O:0.999999
do	O	O:1.000000
if	O	O:0.999995
you	O	O:0.999994
want	O	O:0.999987
to	O	O:0.999994
apply	O	O:0.979922
the	O	O:0.999893
following	O	O:0.995892
.	O	O:0.999778
	
Thanks	O	O:0.999562
@USER	O	O:0.999488
for	O	O:0.999968
the	O	O:0.999967
quick	O	O:0.997077
reply	O	O:0.998821
.	O	O:0.999768
	
Unfortunately	O	O:0.999627
it	O	O:0.999948
does	O	O:0.999824
not	O	O:0.999995
work	O	O:0.999983
for	O	O:0.999986
me	O	O:0.999855
:	O	O:0.999980
I	O	O:0.999996
get	O	O:0.999977
`	O	O:0.999846
ValueError	O	O:0.999277
:	O	O:0.999994
level	O	O:0.999616
>	O	O:0.999984
0	O	O:0.999971
only	O	O:0.999948
valid	O	O:0.999584
with	O	O:0.999821
MultiIndex	O	O:0.942036
`	O	O:0.999994
when	O	O:0.999811
trying	O	O:0.999990
to	O	O:0.999998
apply	O	O:0.988581
your	O	O:0.999632
line	O	O:0.999153
`	O	O:0.999996
c	O	O:0.999210
=	O	O:0.999984
test.groupby	O	O:0.996293
(	O	O:0.999972
level=1	O	O:0.999160
)	O	O:0.999963
.count()	B-API	B-API:0.999056
`	O	O:0.999930
.	O	O:0.999442
	
I	O	O:0.999966
think	O	O:0.999885
it	O	O:0.999964
must	O	O:0.999967
be	O	O:0.999998
due	O	O:0.999983
to	O	O:0.999980
the	O	O:0.999998
fact	O	O:0.999891
that	O	O:0.999973
my	O	O:0.999999
original	O	O:0.999981
data	O	O:0.999267
is	O	O:0.999960
not	O	O:0.999987
indexed	O	O:0.999984
as	O	O:0.999990
yours	O	O:0.996304
(	O	O:0.999977
0	O	O:0.999958
,	O	O:0.999979
1	O	O:0.999937
,	O	O:0.999972
2	O	O:0.999973
,	O	O:0.999986
0	O	O:0.999967
,	O	O:0.999985
1	O	O:0.999931
,	O	O:0.999981
2	O	O:0.999751
)	O	O:0.999926
but	O	O:0.999712
(	O	O:0.999983
0	O	O:0.999959
,	O	O:0.999978
1	O	O:0.999931
,	O	O:0.999972
2	O	O:0.999961
,	O	O:0.999978
3	O	O:0.999953
,	O	O:0.999964
4	O	O:0.999940
,...	O	O:0.998987
)	O	O:0.999960
.	O	O:0.999711
	
Did	O	O:0.999879
you	O	O:0.999943
already	O	O:0.999981
group	O	O:0.999939
text	O	O:0.999894
by	O	O:0.999904
'	O	O:0.999978
name	O	O:0.999588
'	O	O:0.999971
before	O	O:0.999966
applying	O	O:0.999984
your	O	O:0.998953
solution	O	O:0.999656
here	O	O:0.999831
?	O	O:0.999959
	
Sounds	O	O:0.999926
like	O	O:0.999930
you	O	O:0.999996
are	O	O:0.999997
on	O	O:0.999998
the	O	O:0.999993
right	O	O:0.999930
track	O	O:0.997311
.	O	O:0.999955
	
Creating	O	O:0.999227
two	O	O:0.999912
groups	O	O:0.998655
is	O	O:0.999993
a	O	O:0.999994
good	O	O:0.997515
approach	O	O:0.999833
.	O	O:0.999712
	
Since	O	O:0.999969
your	O	O:0.999865
precip_avg	O	O:0.999916
starts	O	O:0.999885
as	O	O:0.999986
"	O	O:0.999985
the	O	O:0.999967
average	O	O:0.998275
precip	O	O:0.999367
level	O	O:0.999544
for	O	O:0.999989
all	O	O:0.999738
Jan	O	O:0.999730
1st	O	O:0.999792
2pm	O	O:0.999936
across	O	O:0.999924
all	O	O:0.999981
years	O	O:0.999188
"	O	O:0.999997
this	O	O:0.999884
average	O	O:0.998606
will	O	O:0.999915
not	O	O:0.999996
change	O	O:0.999936
when	O	O:0.999896
you	O	O:0.999983
apply	O	O:0.988530
other	O	O:0.999636
filters	O	O:0.990096
.	O	O:0.999765
	
The	O	O:0.999955
average	O	O:0.997895
would	O	O:0.999958
be	O	O:0.999997
the	O	O:0.999999
same	O	O:0.999879
if	O	O:0.999982
you	O	O:0.999991
looked	O	O:0.999918
at	O	O:0.999997
the	O	O:0.999992
past	O	O:0.999626
50	O	O:0.999987
years	O	O:0.999806
or	O	O:0.999994
the	O	O:0.999994
past	O	O:0.999635
5	O	O:0.999953
years	O	O:0.999653
.	O	O:0.999897
	
This	O	O:0.999744
may	O	O:0.999978
be	O	O:0.999998
desirable	O	O:0.999894
or	O	O:0.999964
it	O	O:0.999805
may	O	O:0.999986
not	O	O:0.999988
be	O	O:0.999989
.	O	O:0.999942
	
Previously	O	O:0.999697
answered	O	O:0.999801
questions	O	O:0.999300
don't	O	O:0.999891
seem	O	O:0.999930
to	O	O:0.999993
apply	O	O:0.912039
.	O	O:0.999359
	
Someone	O	O:0.999770
good	O	O:0.999350
with	O	O:0.999989
lambda	O	O:0.999905
functions	O	O:0.999888
or	O	O:0.999979
the	O	O:0.999606
.asfreq	B-API	B-API:0.988093
method	O	O:0.999836
might	O	O:0.999922
be	O	O:1.000000
able	O	O:0.999993
to	O	O:0.999998
come	O	O:0.999982
up	O	O:0.999974
with	O	O:0.999971
something	O	O:0.999633
.	O	O:0.999897
	
#CODE	O	O:0.998453
	
Using	O	O:0.998795
StackOverflow	O	O:0.994118
and	O	O:0.999985
the	O	O:0.999968
documentation	O	O:0.999106
I	O	O:0.999997
have	O	O:0.999988
only	O	O:0.999851
been	O	O:0.999978
able	O	O:0.999986
to	O	O:0.999996
find	O	O:0.999987
how	O	O:0.999993
to	O	O:0.999998
apply	O	O:0.997187
a	O	O:0.999893
function	O	O:0.999741
dependent	O	O:0.999934
on	O	O:0.999998
a	O	O:0.999997
single	O	O:0.999869
variable	O	O:0.999950
to	O	O:0.999993
more	O	O:0.999994
than	O	O:0.999950
one	O	O:0.999994
column	O	O:0.999871
(	O	O:0.999998
using	O	O:0.999955
the	O	O:0.999850
axis	O	O:0.998618
option	O	O:0.999703
)	O	O:0.999974
.	O	O:0.999831
	
Please	O	O:0.999480
help	O	O:0.996755
.	O	O:0.999894
	
This	O	O:0.999781
will	O	O:0.999890
be	O	O:0.999999
much	O	O:0.999803
faster	O	O:0.999582
than	O	O:0.999848
performing	O	O:0.999651
an	O	O:0.999982
apply	O	O:0.700492
operation	O	O:0.999177
as	O	O:0.999955
it	O	O:0.999686
is	O	O:0.999983
vectorised	O	O:0.996584
.	O	O:0.999730
	
@USER	O	O:0.998873
you're	O	O:0.999798
welcome	O	O:0.999777
,	O	O:0.999999
you	O	O:0.999978
can	O	O:0.999962
accept	O	O:0.999999
this	O	O:0.999993
as	O	O:0.999994
answer	O	O:0.999686
,	O	O:0.999991
there	O	O:0.999934
will	O	O:0.999945
be	O	O:0.999999
a	O	O:0.999999
tick	O	O:0.997864
mark	O	O:0.999274
underneath	O	O:0.999753
the	O	O:0.999957
voting	O	O:0.995962
buttons	O	O:0.997452
.	O	O:0.999844
	
Using	O	O:0.998801
apply	O	B-API:0.969858
and	O	O:0.999841
iterating	O	O:0.995543
should	O	O:0.999647
always	O	O:0.999966
be	O	O:0.999997
the	O	O:0.999993
last	O	O:0.997755
choice	O	O:0.999831
,	O	O:0.999994
if	O	O:0.999993
possible	O	O:0.999959
find	O	O:0.999749
a	O	O:0.999990
method	O	O:0.999959
that	O	O:0.999987
operates	O	O:0.999947
on	O	O:0.999997
the	O	O:0.999991
whole	O	O:0.999861
dataframe	B-API	O:0.997894
	
This	O	O:0.999706
means	O	O:0.999975
that	O	O:0.999981
all	O	O:0.999995
you	O	O:0.999998
have	O	O:0.999979
to	O	O:0.999999
do	O	O:0.999999
to	O	O:0.999999
group	O	O:0.999985
by	O	O:0.999995
year	O	O:0.995428
is	O	O:0.999955
leverage	O	O:0.997465
the	O	O:0.999932
apply	O	B-API:0.978081
function	O	O:0.998478
and	O	O:0.999950
re-work	O	O:0.999337
the	O	O:0.999164
syntax	O	O:0.999405
	
Dynamically	O	O:0.999894
creating	O	O:0.999764
variables	O	O:0.998962
,	O	O:0.999993
while	O	O:0.999992
doing	O	O:0.999293
map	O	B-API:0.870840
/	O	O:0.999953
apply	O	O:0.586807
on	O	O:0.999944
a	O	O:0.999992
dataframe	B-API	O:0.993746
in	O	O:0.999993
pandas	O	O:0.999965
to	O	O:0.999994
get	O	O:0.999995
key	O	O:0.999997
names	O	O:0.999902
for	O	O:0.999996
the	O	O:0.999991
values	O	O:0.995660
in	O	O:0.999922
Series	O	O:0.999797
object	O	O:0.999929
returned	O	O:0.999267
	
It	O	O:0.999933
looks	O	O:0.999908
like	O	O:0.999920
THIS	O	O:0.999897
loop	O	O:0.998911
is	O	O:0.999981
the	O	O:0.999826
killer	O	O:0.999889
here.Also	O	O:0.993740
,	O	O:0.999996
intutively	O	O:0.999489
,	O	O:0.999994
looping	O	O:0.999780
on	O	O:0.999979
a	O	O:0.999995
dataframe	B-API	O:0.994013
is	O	O:0.999997
a	O	O:0.999972
BAD	O	O:0.999055
practice	O	O:0.999397
.	O	O:0.999724
	
How	O	O:0.999899
can	O	O:0.999953
I	O	O:0.999999
rewrite	O	O:0.999980
this	O	O:0.999669
,	O	O:0.999998
perhaps	O	O:0.999959
using	O	O:0.999916
Map	O	O:0.998048
/	O	O:0.999678
Apply	O	O:0.998244
?	O	O:0.999773
	
#CODE	O	O:0.998453
	
I	O	O:0.999990
also	O	O:0.999979
know	O	O:0.999944
that	O	O:0.999873
`	O	O:0.999988
df2.apply	O	O:0.793474
(	O	O:0.999987
funct1	O	O:0.997789
,	O	O:0.999983
axis=1	O	O:0.999733
)`	O	O:0.999836
contains	O	O:0.999866
part	O	O:0.999958
of	O	O:0.999997
mycustom	O	O:0.999089
"	O	O:0.999995
names	O	O:0.997376
"	O	O:0.999878
(	O	O:0.999969
ie	O	O:0.999996
feature	O	O:0.999978
values	O	O:0.999655
)	O	O:0.999987
,	O	O:0.999993
how	O	O:0.999968
would	O	O:0.999957
I	O	O:1.000000
then	O	O:0.999984
build	O	O:0.999889
these	O	O:0.999987
names	O	O:0.999938
using	O	O:0.999750
map	O	B-API:0.961653
/	O	O:0.999775
apply	O	B-API:0.714960
?	O	O:0.999305
	
Ie	O	O:0.999841
.	O	O:0.999811
	
I	O	O:0.999979
will	O	O:0.999983
have	O	O:0.999969
the	O	O:0.999997
values	O	O:0.998633
,	O	O:0.999971
but	O	O:0.999990
how	O	O:0.999974
would	O	O:0.999991
I	O	O:1.000000
create	O	O:0.999979
the	O	O:0.999904
"	O	O:0.999981
key	O	O:0.999755
"	O	O:0.999977
`'	O	O:0.999919
P_	O	O:0.997277
'	O	O:0.999977
+feature_name+	O	O:0.996467
'	O	O:0.999956
_	O	O:0.999483
'	O	O:0.999983
+feature_value+	O	O:0.996968
'	O	O:0.999966
_C	O	O:0.999768
'`	O	O:0.999956
,	O	O:0.999984
since	O	O:0.999938
feature	O	O:0.999948
value	O	O:0.999996
post	O	O:0.999668
apply	O	B-API:0.520180
is	O	O:0.999963
returned	O	O:0.998817
as	O	O:0.999996
a	O	O:0.999937
series	O	O:0.997620
object	O	O:0.999656
.	O	O:0.999889
	
Gregor	O	O:0.998785
-	O	O:0.999983
+1	O	O:0.999869
for	O	O:0.999978
making	O	O:0.998724
the	O	O:0.999896
time	O	O:0.999469
&	O	O:0.999950
effort	O	O:0.999709
.	O	O:0.999873
	
I	O	O:0.999993
have	O	O:0.999982
to	O	O:0.999975
admit	O	O:0.999998
that	O	O:0.999551
itertuples()	B-API	B-API:0.941248
struck	O	O:0.999820
me	O	O:0.999937
,	O	O:0.999999
omly	O	O:0.999938
when	O	O:0.999878
I	O	O:0.999994
saw	O	O:0.999997
the	O	O:0.999955
tuples	O	O:0.997632
in	O	O:0.999998
your	O	O:0.999958
code	O	O:0.999509
.	O	O:0.999964
	
I	O	O:0.999839
am	O	O:0.999989
not	O	O:0.999932
accepting	O	O:0.999932
,	O	O:0.999994
since	O	O:0.999949
I	O	O:0.999988
am	O	O:0.999999
still	O	O:0.999829
looking	O	O:0.999971
at	O	O:0.999997
a	O	O:0.999955
map	O	B-API:0.965376
/	O	O:0.999969
apply	O	B-API:0.681037
way	O	O:0.995798
(	O	O:0.999980
possibly	O	O:0.999934
)	O	O:0.999995
to	O	O:0.999955
solve	O	O:0.999987
this	O	O:0.999783
.	O	O:0.999951
	
itertuples()	B-API	B-API:0.999217
is	O	O:0.999927
what	O	O:0.998267
worked	O	O:0.999847
for	O	O:0.999963
me	O	O:0.993913
(	O	O:0.999846
worked	O	O:0.999685
at	O	O:0.999993
lightspeed	O	O:0.998130
)	O	O:0.999985
-	O	O:0.999979
though	O	O:0.999736
It	O	O:0.999959
is	O	O:0.999970
still	O	O:0.999738
not	O	O:0.999994
using	O	O:0.999980
the	O	O:0.999481
map	O	B-API:0.981044
/	O	O:0.999977
apply	O	O:0.524137
approach	O	O:0.999917
that	O	O:0.999697
I	O	O:0.999997
so	O	O:0.999998
much	O	O:0.998121
wanted	O	O:0.999951
to	O	O:0.999947
see	O	O:0.999994
.	O	O:0.999927
	
Itertuples	B-API	O:0.651900
on	O	O:0.999990
a	O	O:0.999997
pandas	O	O:0.999897
dataframe	B-API	O:0.999369
returns	O	O:0.999758
the	O	O:0.999997
whole	O	O:0.999695
row	O	O:0.999962
,	O	O:0.999998
so	O	O:0.999995
I	O	O:0.999995
no	O	O:0.999996
longer	O	O:0.999976
have	O	O:0.999980
to	O	O:0.999997
do	O	O:0.999999
`	O	O:0.999992
df2	O	O:0.998710
[	O	O:0.999989
df2	O	O:0.998032
[	O	O:0.999962
feature_name	O	O:0.996882
]=	O	O:0.999959
=feature_value	O	O:0.996496
]	O	O:0.999894
[	O	O:0.999888
'	O	O:0.999980
click	O	O:0.999054
']`	O	O:0.999958
-	O	O:0.999995
be	O	O:0.999985
aware	O	O:0.999955
that	O	O:0.999953
this	O	O:0.999994
matching	O	O:0.999979
by	O	O:0.999978
value	O	O:0.998032
is	O	O:0.999949
not	O	O:0.999981
only	O	O:0.999981
expensive	O	O:0.999729
,	O	O:0.999981
but	O	O:0.999992
also	O	O:0.999884
undesired	O	O:0.999955
,	O	O:0.999983
since	O	O:0.999907
it	O	O:0.999976
may	O	O:0.999999
return	O	O:0.999946
a	O	O:0.999989
series	O	O:0.999741
,	O	O:0.999993
if	O	O:0.999993
there	O	O:0.999926
were	O	O:0.999977
duplicate	O	O:0.999996
rows	O	O:0.999788
.	O	O:0.999960
itertuples	B-API	B-API:0.878894
solves	O	O:0.999885
that	O	O:0.999693
problem	O	O:0.999972
were	O	O:0.999963
elegantly	O	O:0.999884
,	O	O:0.999998
though	O	O:0.999934
I	O	O:0.999998
need	O	O:0.999992
to	O	O:0.999999
then	O	O:0.999998
access	O	O:0.999939
the	O	O:0.999993
individual	O	O:0.999503
objects	O	O:0.999725
/	O	O:0.999995
columns	O	O:0.999952
by	O	O:0.999987
integer	O	O:0.999813
indexes	O	O:0.998699
,	O	O:0.999947
which	O	O:0.999958
means	O	O:0.999946
less	O	O:0.999766
re-usable	O	O:0.999804
code	O	O:0.998805
.	O	O:0.999926
	
I	O	O:0.999975
could	O	O:0.999937
abstract	O	O:0.999939
this	O	O:0.999834
,	O	O:0.999984
but	O	O:0.999935
It	O	O:0.999988
wont	O	O:0.999976
be	O	O:0.999999
like	O	O:0.999996
accessing	O	O:0.999947
by	O	O:0.999968
column	O	O:0.999928
names	O	O:0.999700
,	O	O:0.999993
the	O	O:0.999987
status-quo	O	O:0.985838
.	O	O:0.999900
	
#CODE	O	O:0.998453
	
Then	O	O:0.999607
,	O	O:1.000000
pass	O	O:0.999845
that	O	O:0.999946
into	O	O:0.999967
the	O	O:0.999979
`	O	O:0.999870
groupby	B-API	B-API:0.999677
`	O	O:0.999973
object	O	O:0.999105
with	O	O:0.999925
apply	O	B-API:0.826741
.	O	O:0.999213
	
#CODE	O	O:0.998453
	
the	O	O:0.999972
final	O	O:0.998971
line	O	O:0.999848
uses	O	O:0.999707
the	O	O:0.999868
apply	O	B-API:0.875131
method	O	O:0.999613
,	O	O:0.999981
with	O	O:0.999987
the	O	O:0.999945
paramater	O	O:0.999929
key	O	O:0.999992
set	O	O:0.999972
to	O	O:0.999990
1	O	O:0.999998
,	O	O:0.999991
which	O	O:0.999944
applies	O	O:0.998645
the	O	O:0.999926
method	O	O:0.999860
-first	O	O:0.998941
parameter	O	O:0.999974
-	O	O:0.999992
row	O	O:0.999973
wise	O	O:0.999837
along	O	O:0.999466
the	O	O:0.999863
DataFrame	B-API	O:0.937499
and	O	O:0.999975
Returns	O	O:0.999947
a	O	O:0.999972
Series	O	O:0.997385
which	O	O:0.999730
is	O	O:0.999997
appended	O	O:0.999702
to	O	O:0.999934
the	O	O:0.999996
DataFrame	B-API	O:0.982574
.	O	O:0.999874
	
How	O	O:0.999899
can	O	O:0.999929
I	O	O:0.999999
accomplish	O	O:0.999992
this	O	O:0.999414
concisely	O	O:0.999752
and	O	O:0.999993
efficiently	O	O:0.999287
?	O	O:0.999790
	
I've	O	O:0.999661
tried	O	O:0.999964
using	O	O:0.999964
combinations	O	O:0.998357
of	O	O:0.999761
`	O	O:0.999955
groupby	B-API	B-API:0.999541
`	O	O:0.999960
and	O	O:0.999223
`	O	O:0.999993
apply	O	B-API:0.996065
`	O	O:0.999692
,	O	O:0.999374
but	O	O:0.999981
I'm	O	O:0.999975
new	O	O:0.999863
to	O	O:0.999967
PANDAS	O	O:0.999957
and	O	O:0.999989
keep	O	O:0.999154
throwing	O	O:0.998676
Exceptions	O	O:0.998957
.	O	O:0.999453
	
next	O	O:0.998960
you	O	O:0.999993
just	O	O:0.999983
apply	O	O:0.966829
a	O	O:0.999967
lambda	O	O:0.983685
function	O	O:0.999959
that	O	O:0.999744
finds	O	O:0.999965
the	O	O:0.999993
union	O	O:0.997174
between	O	O:0.999773
columns	O	O:0.999629
.	O	O:0.999931
	
Had	O	O:0.999867
trouble	O	O:0.999915
finding	O	O:0.999886
a	O	O:0.999889
quick	O	O:0.997702
method	O	O:0.999853
for	O	O:0.999986
the	O	O:0.999952
union	O	O:0.956416
but	O	O:0.999985
this	O	O:0.999419
works	O	O:0.999904
#CODE	O	O:0.999741
	
Pandas	O	O:0.999363
apply	O	B-API:0.913135
and	O	O:0.999878
lambda	O	O:0.993113
function	O	O:0.999438
efficiency	O	O:0.998860
	
The	O	O:0.999842
`	O	O:0.999979
apply	O	B-API:0.948542
`	O	O:0.999985
operation	O	O:0.997773
of	O	O:0.999996
pandas	O	O:0.998223
is	O	O:0.999996
quite	O	O:0.999638
expressive	O	O:0.999920
,	O	O:0.999993
I	O	O:0.999993
could	O	O:0.999988
first	O	O:0.999857
`	O	O:0.999997
group	O	O:0.951984
`	O	O:0.999991
,	O	O:0.999928
and	O	O:1.000000
then	O	O:0.999847
do	O	O:0.999991
the	O	O:0.999995
Cartesian	O	O:0.999288
product	O	O:0.999905
on	O	O:0.999993
each	O	O:0.999964
group	O	O:0.999816
using	O	O:0.999910
`	O	O:0.999826
apply	O	B-API:0.996577
`	O	O:0.999845
,	O	O:0.999742
and	O	O:1.000000
then	O	O:0.999851
aggregate	O	O:0.928459
the	O	O:0.999989
result	O	O:0.999926
using	O	O:0.999896
`	O	O:0.999952
sum	O	O:0.950777
`	O	O:0.999986
.	O	O:0.999345
	
The	O	O:0.999937
problem	O	O:0.999376
with	O	O:0.999989
this	O	O:0.999905
approach	O	O:0.999979
,	O	O:0.999992
however	O	O:0.999879
,	O	O:0.999948
is	O	O:0.999998
that	O	O:0.999801
`	O	O:0.999998
apply	O	B-API:0.949291
`	O	O:0.999052
is	O	O:0.999574
not	O	O:0.999979
lazy	O	O:0.999562
,	O	O:0.999989
it	O	O:0.999995
will	O	O:0.999949
compute	O	O:0.999869
all	O	O:0.999996
the	O	O:0.999998
intermediate	O	O:0.998982
results	O	O:0.999720
before	O	O:0.999708
the	O	O:0.999981
aggregation	O	O:0.995602
,	O	O:0.999967
and	O	O:0.999991
the	O	O:0.999997
intermediate	O	O:0.995222
results	O	O:0.997304
(	O	O:0.999961
Cartesian	O	O:0.999965
production	O	O:0.999796
on	O	O:0.999993
each	O	O:0.999938
group	O	O:0.999495
)	O	O:0.999954
is	O	O:0.999972
very	O	O:0.999285
large	O	O:0.999149
.	O	O:0.998832
	
Intermediate	O	O:0.999854
result	O	O:0.999717
after	O	O:0.999950
the	O	O:0.999922
`	O	O:0.999948
apply	O	B-API:0.990667
`	O	O:0.999680
(	O	O:0.999804
can	O	O:0.999984
be	O	O:1.000000
large	O	O:0.999751
)	O	O:0.999699
#CODE	O	O:0.998607
	
Could	O	O:0.999415
you	O	O:0.999987
give	O	O:0.999981
a	O	O:0.999998
small	O	O:0.998445
self-contained	O	O:0.999787
example	O	O:0.999565
with	O	O:0.999991
fake	O	O:0.999985
data	O	O:0.999987
to	O	O:0.999994
show	O	O:0.999995
what	O	O:0.999960
you	O	O:0.999993
want	O	O:0.999973
?	O	O:0.999968
	
(	O	O:0.999944
E.g.	O	O:0.999756
I	O	O:0.999991
don't	O	O:0.999965
see	O	O:0.999940
why	O	O:0.999985
you	O	O:0.999969
can't	O	O:0.999996
move	O	O:0.999990
a	O	O:0.999997
summation	O	O:0.999787
into	O	O:0.999860
the	O	O:0.999990
apply	O	B-API:0.855500
to	O	O:0.999868
avoid	O	O:0.999962
expanding	O	O:0.999920
more	O	O:0.999701
than	O	O:0.999928
one	O	O:0.999998
group	O	O:0.999678
at	O	O:0.999998
a	O	O:0.999991
time	O	O:0.999093
,	O	O:0.999988
but	O	O:0.999989
maybe	O	O:0.999957
that	O	O:0.999947
doesn't	O	O:0.999992
work	O	O:0.999956
in	O	O:0.999998
a	O	O:0.999998
real	O	O:0.997583
case	O	O:0.999868
for	O	O:0.999995
some	O	O:0.998901
reason	O	O:0.999667
.	O	O:0.999956
)	O	O:0.999977
	
Why	O	O:0.999791
are	O	O:0.999988
vectorized	O	O:0.999861
operations	O	O:0.999941
like	O	O:0.999911
apply	O	O:0.779792
so	O	O:0.999962
much	O	O:0.998626
quicker	O	O:0.999723
?	O	O:0.999898
	
I	O	O:0.999951
imagine	O	O:0.999960
there	O	O:0.999844
must	O	O:0.999915
be	O	O:1.000000
some	O	O:0.999986
row	O	O:0.999981
by	O	O:0.999972
row	O	O:0.999901
iteration	O	O:0.999933
going	O	O:0.999689
on	O	O:0.999982
there	O	O:0.999825
too	O	O:0.999890
.	O	O:0.999946
	
``	O	O:0.999857
apply	O	B-API:0.968769
``	O	O:0.996094
is	O	O:0.997998
NOT	O	O:0.999362
vectorized	O	O:0.999121
.	O	O:0.999380
	
``	O	O:0.999668
iterrows	B-API	B-API:0.998033
``	O	O:0.999793
is	O	O:0.999932
even	O	O:0.999858
worse	O	O:0.999962
as	O	O:0.999991
it	O	O:0.999945
boxes	O	O:0.999800
everything	O	O:0.999210
(	O	O:0.999996
that	O	O:0.999860
'	O	O:0.999997
the	O	O:0.999997
perf	O	O:0.999892
diff	O	B-API:0.742212
with	O	O:0.999684
``	O	O:0.999867
apply	O	B-API:0.898454
``)	O	O:0.997031
.	O	O:0.997890
	
You	O	O:0.999797
should	O	O:0.999986
only	O	O:0.999958
use	O	O:0.999955
``	O	O:0.999435
iterrows	B-API	B-API:0.998064
``	O	O:0.999829
in	O	O:0.999821
very	O	O:0.999917
very	O	O:0.999826
few	O	O:0.999877
situations	O	O:0.999135
.	O	O:0.999776
	
IMHO	O	O:0.998154
never	O	O:0.998857
.	O	O:0.999810
	
Show	O	O:0.999744
what	O	O:0.999847
you	O	O:0.999984
are	O	O:0.999998
actually	O	O:0.999995
doing	O	O:0.999931
with	O	O:0.999185
``	O	O:0.999219
iterrows	B-API	B-API:0.997911
``	O	O:0.999778
.	O	O:0.998409
	
3	O	O:0.999591
)	O	O:0.999947
Apply	O	O:0.999667
involves	O	O:0.999221
can	O	O:0.999941
usually	O	O:0.999992
be	O	O:0.999999
done	O	O:0.999969
by	O	O:0.999952
an	O	O:0.999977
iterator	O	O:0.999439
in	O	O:0.999967
cython	O	O:0.999282
space	O	O:0.999096
(	O	O:0.999993
this	O	O:0.999795
is	O	O:0.999998
done	O	O:0.999850
internally	O	O:0.999442
in	O	O:0.999990
pandas	O	O:0.998991
)	O	O:0.999899
(	O	O:0.999988
this	O	O:0.999865
is	O	O:0.999998
a	O	O:0.999978
)	O	O:0.999958
case	O	O:0.999580
.	O	O:0.999940
	
This	O	O:0.999323
is	O	O:0.999994
dependent	O	O:0.999347
on	O	O:0.999991
what	O	O:0.998883
is	O	O:0.999999
going	O	O:0.999514
on	O	O:0.999968
inside	O	O:0.999848
the	O	O:0.999985
apply	O	B-API:0.839770
expression	O	O:0.996175
.	O	O:0.999670
	
e.g.	O	O:0.997851
`	O	O:0.999939
df.apply	B-API	B-API:0.996662
(	O	O:0.999975
lambda	O	O:0.998507
x	O	O:0.999252
:	O	O:0.999782
np.sum	B-API	B-API:0.978984
(	O	O:0.999982
x	O	O:0.999951
))`	O	O:0.999590
will	O	O:0.999865
be	O	O:0.999987
executed	O	O:0.999950
pretty	O	O:0.999369
swiftly	O	O:0.999339
(	O	O:0.999990
of	O	O:0.999993
course	O	O:0.999795
`	O	O:0.999992
df.sum	B-API	B-API:0.996920
(	O	O:0.999978
1	O	O:0.999943
)`	O	O:0.999587
is	O	O:0.999988
even	O	O:0.999677
better	O	O:0.999912
)	O	O:0.999970
.	O	O:0.999607
	
However	O	O:0.999957
something	O	O:0.999866
like	O	O:0.999644
:	O	O:0.999991
`	O	O:0.999982
df.apply	B-API	B-API:0.992904
(	O	O:0.999977
lambda	O	O:0.998783
x	O	O:0.999106
:	O	O:0.999947
x	O	O:0.999921
[	O	O:0.999970
'	O	O:0.999994
b	O	O:0.999962
']	O	O:0.999960
+	O	O:0.999698
1	O	O:0.999887
)`	O	O:0.999899
will	O	O:0.999751
be	O	O:0.999996
executed	O	O:0.999836
in	O	O:0.999954
python	O	O:0.999744
space	O	O:0.999771
,	O	O:0.999966
and	O	O:0.999997
consequently	O	O:0.997896
is	O	O:0.999948
slower	O	O:0.993880
.	O	O:0.999792
	
The	O	O:0.999886
examples	O	O:0.999469
I've	O	O:0.999966
seen	O	O:0.999883
using	O	O:0.999816
'	O	O:0.999540
map	O	B-API:0.948737
'	O	O:0.999949
or	O	O:0.999963
'	O	O:0.999983
apply	O	O:0.536775
'	O	O:0.999956
generally	O	O:0.999783
show	O	O:0.999716
one	O	O:0.999988
datatable	O	O:0.999950
which	O	O:0.999924
seems	O	O:0.999921
intuitive	O	O:0.999872
enough	O	O:0.999342
.	O	O:0.999856
	
However	O	O:0.999854
,	O	O:0.999991
I	O	O:0.999994
am	O	O:0.999995
working	O	O:0.998343
across	O	O:0.999944
two	O	O:0.999965
tables	O	O:0.998732
and	O	O:0.999996
they	O	O:0.999949
are	O	O:0.999961
large	O	O:0.996640
(	O	O:0.999818
T1	O	O:0.998986
is	O	O:0.999994
2.5million	O	O:0.999496
rows	O	O:0.999847
,	O	O:0.999985
T2	O	O:0.999809
is	O	O:0.999993
96000	O	O:0.999940
rows	O	O:0.999530
)	O	O:0.999954
.	O	O:0.999916
	
Unfortunatley	O	O:0.996398
not	O	O:0.999827
.	O	O:0.999940
	
I	O	O:0.999945
get	O	O:0.999993
this	O	O:0.999534
message	O	O:0.999671
:	O	O:0.999953
"	O	O:0.999944
ValueError	O	O:0.998867
:	O	O:0.999972
array	O	O:0.999593
is	O	O:0.999971
too	O	O:0.999597
big	O	O:0.999754
.	O	O:0.999204
	
"	O	O:0.999894
I'm	O	O:0.999918
pretty	O	O:0.999823
sure	O	O:0.999971
that	O	O:0.999891
I	O	O:0.999999
will	O	O:0.999992
get	O	O:0.999854
5	O	O:0.999995
billion	O	O:0.999959
rows	O	O:0.999617
having	O	O:0.999199
looked	O	O:0.999878
into	O	O:0.999890
the	O	O:0.999992
data	O	O:0.997567
(	O	O:0.999985
I	O	O:0.999996
agree	O	O:0.999909
it	O	O:0.998510
is	O	O:0.999970
not	O	O:0.999986
creating	O	O:0.999966
a	O	O:0.999988
cartesian	O	O:0.998518
product	O	O:0.999864
)	O	O:0.999953
.	O	O:0.999838
	
I	O	O:0.999987
plan	O	O:0.999654
on	O	O:0.999989
trying	O	O:0.999929
itertools	O	O:0.996661
with	O	O:0.999891
the	O	O:0.999920
groupby	B-API	B-API:0.983167
feature	O	O:0.999485
.	O	O:0.999577
	
I	O	O:0.999924
might	O	O:0.999977
make	O	O:0.999487
two	O	O:0.999974
grouped	O	O:0.999874
objects	O	O:0.999726
,	O	O:0.999994
one	O	O:0.999991
for	O	O:0.999988
each	O	O:0.999945
table	O	O:0.999902
,	O	O:0.999997
to	O	O:0.999988
start	O	O:0.999938
.	O	O:0.999950
	
Then	O	O:0.999783
iterate	O	O:0.999951
to	O	O:0.999998
find	O	O:0.999996
the	O	O:0.999987
"	O	O:0.999995
matching	O	O:0.998414
"	O	O:0.999971
groups	O	O:0.995964
.	O	O:0.999781
	
I	O	O:0.999969
will	O	O:0.999987
then	O	O:0.999750
merge	O	O:0.930221
and	O	O:0.999996
apply	O	O:0.703996
on	O	O:0.999938
each	O	O:0.999714
as	O	O:0.999996
you	O	O:0.999985
have	O	O:0.999989
done	O	O:0.999921
,	O	O:0.999999
aggregating	O	O:0.999700
to	O	O:0.999992
a	O	O:0.999999
new	O	O:0.999916
table	O	O:0.999822
.	O	O:0.999893
	
If	O	O:0.999967
you	O	O:0.999984
know	O	O:0.999963
how	O	O:0.999995
to	O	O:0.999988
do	O	O:1.000000
that	O	O:0.999960
I'd	O	O:0.999996
be	O	O:0.999998
grateful	O	O:0.999637
to	O	O:0.999949
see	O	O:0.999997
it	O	O:0.999986
on	O	O:0.999996
this	O	O:0.999587
(	O	O:0.999999
tiny	O	O:0.999581
)	O	O:0.999974
example	O	O:0.998850
.	O	O:0.999887
	
If	O	O:0.999950
I	O	O:0.999988
succeed	O	O:0.999695
,	O	O:0.999919
I'll	O	O:0.999738
post	O	O:0.999450
it	O	O:0.999986
myself	O	O:0.999471
:)	O	O:0.999867
	
I	O	O:0.999957
cannot	O	O:0.999979
apply	O	O:0.805828
a	O	O:0.999967
rolling	O	B-API:0.954592
window	O	O:0.999083
because	O	O:0.999971
this	O	O:0.999862
would	O	O:0.999995
first	O	O:0.999981
be	O	O:0.999998
daily	O	O:0.999411
and	O	O:0.999992
secondly	O	O:0.999919
I	O	O:0.999996
need	O	O:0.999991
to	O	O:0.999989
specify	O	O:0.999993
the	O	O:0.999994
number	O	O:0.999948
of	O	O:0.999975
values	O	O:0.998892
(	O	O:0.999998
a	O	O:0.999997
rolling	O	B-API:0.879807
window	O	O:0.999165
does	O	O:0.999708
not	O	O:0.999996
aggregate	O	O:0.938023
by	O	O:0.999976
time	O	O:0.999959
frame	O	O:0.999982
,	O	O:0.999999
some	O	O:0.999967
posts	O	O:0.999531
addressed	O	O:0.999984
this	O	O:0.999755
issue	O	O:0.999493
but	O	O:0.999984
they	O	O:0.999487
are	O	O:0.999994
not	O	O:0.999985
relevant	O	O:0.999909
to	O	O:0.999998
my	O	O:1.000000
problem	O	O:0.999914
as	O	O:0.999996
the	O	O:0.999983
rolling	O	O:0.911262
would	O	O:0.999833
still	O	O:0.999974
be	O	O:0.999999
for	O	O:0.999996
each	O	O:0.999554
new	O	O:0.999829
day	O	O:0.999920
)	O	O:0.999939
.	O	O:0.999707
	
I	O	O:0.999955
cannot	O	O:0.999951
apply	O	O:0.803386
resampling	O	O:0.995198
,	O	O:0.999956
because	O	O:0.999984
then	O	O:0.999793
the	O	O:1.000000
sample	O	O:0.999690
would	O	O:0.999946
be	O	O:1.000000
every	O	O:0.999978
5	O	O:0.999877
months	O	O:0.999738
,	O	O:0.999981
e	O	O:0.999960
..	O	O:0.999646
	
g	O	O:0.999742
I	O	O:0.999968
would	O	O:0.999994
only	O	O:0.999988
have	O	O:0.999997
values	O	O:0.999741
for	O	O:0.999984
May	O	O:0.999941
2012	O	O:0.998236
,	O	O:0.999938
Oct	O	O:0.999903
2012	O	O:0.999256
,	O	O:0.999970
March	O	O:0.998322
2013	O	O:0.998824
...	O	O:0.998975
	
Finally	O	O:0.999922
,	O	O:0.999994
as	O	O:0.999996
the	O	O:0.999699
function	O	O:0.997404
is	O	O:0.999969
not	O	O:0.999978
linear	O	O:0.999119
I	O	O:0.999982
cannot	O	O:0.999937
reconstruct	O	O:0.998886
it	O	O:0.999997
by	O	O:0.999993
first	O	O:0.999963
doing	O	O:0.999921
a	O	O:0.999974
monthly	O	O:0.985226
sample	O	O:0.999063
and	O	O:0.999994
then	O	O:0.999963
applying	O	O:0.999992
a	O	O:0.999936
5	O	O:0.998548
period	O	O:0.999832
rolling	O	O:0.890493
window	O	O:0.999529
on	O	O:0.999940
it	O	O:0.999976
.	O	O:0.999967
	
To	O	O:0.999837
clarify	O	O:0.998638
:	O	O:0.999989
I	O	O:0.999987
am	O	O:0.999999
looking	O	O:0.999466
for	O	O:0.999979
5	O	O:0.999897
calendar	O	O:0.997618
months	O	O:0.999160
(	O	O:0.999990
data	O	O:0.999423
is	O	O:0.999980
not	O	O:0.999981
necessarily	O	O:0.999965
evenly	O	O:0.999870
spaced	O	O:0.999230
)	O	O:0.999970
,	O	O:0.999991
including	O	O:0.999855
the	O	O:0.999975
current	O	O:0.999074
month	O	O:0.999514
,	O	O:0.999997
so	O	O:0.999963
for	O	O:0.999978
May	O	O:0.999955
2012	O	O:0.999524
I	O	O:0.999990
go	O	O:0.999996
from	O	O:0.999707
Jan	O	O:0.999759
2012	O	O:0.999662
to	O	O:0.999981
May	O	O:0.999994
2012	O	O:0.995453
(	O	O:0.999992
the	O	O:0.999996
length	O	O:0.999472
of	O	O:0.999968
the	O	O:0.999958
windows	O	O:0.999304
is	O	O:0.999958
5	O	O:0.999898
months	O	O:0.999834
,	O	O:0.999996
regardless	O	O:0.999991
if	O	O:0.999992
I	O	O:0.999999
have	O	O:0.999995
only	O	O:0.999972
one	O	O:0.999998
day	O	O:0.999984
per	O	O:0.999973
month	O	O:0.998147
or	O	O:0.999981
20	O	O:0.999572
)	O	O:0.999968
.	O	O:0.999733
	
User	O	O:0.995654
@USER	O	O:0.998998
is	O	O:0.999970
correct	O	O:0.999752
,	O	O:0.999995
in	O	O:0.999994
addition	O	O:0.999957
I	O	O:0.999999
only	O	O:0.999993
care	O	O:0.999927
of	O	O:0.999999
a	O	O:0.999997
monthly	O	O:0.998761
result	O	O:0.999901
,	O	O:0.999996
so	O	O:0.999992
I	O	O:0.999998
need	O	O:0.999995
to	O	O:0.999981
apply	O	O:0.980859
the	O	O:0.999975
same	O	O:0.999585
for	O	O:0.999981
June	O	O:0.999298
2012	O	O:0.998758
,	O	O:0.999981
July	O	O:0.999323
2012	O	O:0.999377
,	O	O:0.999978
etc	O	O:0.999912
.	O	O:0.999923
	
If	O	O:0.999939
pandas	O	O:0.999135
has	O	O:0.999969
imported	O	O:0.999890
you	O	O:0.999960
date	O	O:0.998311
and	O	O:0.999999
time	O	O:0.999995
data	O	O:0.999922
,	O	O:0.999995
you	O	O:0.999982
should	O	O:0.999978
be	O	O:1.000000
able	O	O:0.999997
to	O	O:0.999998
get	O	O:0.999999
select	O	O:0.999933
data	O	O:0.999996
from	O	O:0.999994
given	O	O:0.999881
months	O	O:0.999978
using	O	O:0.999925
the	O	O:0.999682
syntax	O	O:0.998115
`	O	O:0.999975
dft	O	O:0.992841
[	O	O:0.999984
datetime	O	O:0.982615
(	O	O:0.999914
2013	O	O:0.999348
,	O	O:0.999974
1	O	O:0.999950
,	O	O:0.999947
1	O	O:0.999762
):	O	O:0.999955
datetime	O	O:0.987463
(	O	O:0.999976
2013	O	O:0.999116
,	O	O:0.999970
6	O	O:0.999871
)]`	O	O:0.998996
.	O	O:0.999692
	
Just	O	O:0.999574
program	O	O:0.999969
a	O	O:0.999998
loop	O	O:0.999666
or	O	O:0.999997
equivalent	O	O:0.999816
to	O	O:0.999990
cycle	O	O:0.999998
the	O	O:0.999982
start	O	O:0.999178
and	O	O:0.999997
end	O	O:0.999972
month	O	O:0.997186
values	O	O:0.998944
and	O	O:0.999978
apply	O	O:0.985538
your	O	O:0.994363
function	O	O:0.999628
to	O	O:0.999999
the	O	O:1.000000
values	O	O:0.999271
in	O	O:0.999992
the	O	O:1.000000
resulting	O	O:0.999865
dataframes	O	O:0.999049
.	O	O:0.999873
	
(	O	O:0.999894
Sorry	O	O:0.999808
,	O	O:0.999987
I	O	O:0.999990
don't	O	O:0.999992
have	O	O:0.999990
a	O	O:0.999999
date	O	O:0.999248
stamped	O	O:0.999985
data	O	O:0.999975
set	O	O:0.999984
handy	O	O:0.999931
to	O	O:0.999991
test	O	O:0.999989
this	O	O:0.999984
myself	O	O:0.999963
right	O	O:0.999959
now	O	O:0.999905
)	O	O:0.999983
	
I	O	O:0.999940
would	O	O:0.999984
consider	O	O:0.999897
yours	O	O:0.999983
a	O	O:0.999999
dupe	O	O:0.999608
of	O	O:0.999892
[	O	O:0.999991
this	O	O:0.999912
]	O	O:0.999726
(	O	O:0.999932
#URL	O	O:0.999748
)	O	O:0.999980
question	O	O:0.998348
,	O	O:0.999983
but	O	O:0.999975
the	O	O:0.999984
accepted	O	O:0.999596
answer	O	O:0.999930
there	O	O:0.997746
is	O	O:0.999964
not	O	O:0.999982
what	O	O:0.999948
I	O	O:0.999991
would	O	O:0.999966
use	O	O:0.999706
.	O	O:0.999783
	
Still	O	O:0.999566
,	O	O:0.999993
the	O	O:0.999947
[	O	O:0.999950
higher	O	O:0.999917
voted	O	O:0.999825
answers	O	O:0.999555
]	O	O:0.999548
(	O	O:0.999889
#URL	O	O:0.999507
)	O	O:0.999995
there	O	O:0.999942
apply	O	O:0.612946
to	O	O:0.999993
your	O	O:0.999944
situation	O	O:0.999400
.	O	O:0.999963
	
Call	O	O:0.996682
`	O	O:0.999984
apply	O	B-API:0.969919
`	O	O:0.999966
on	O	O:0.999685
the	O	O:0.999993
dataframe	B-API	O:0.984379
(	O	O:0.999989
note	O	O:0.999968
the	O	O:0.999985
double	O	O:0.993160
square	O	O:0.999807
brackets	O	O:0.999620
`	O	O:0.999992
df	O	O:0.998250
[[	O	O:0.999965
'	O	O:0.999864
A	O	O:0.999997
']]`	O	O:0.999798
rather	O	O:0.999833
than	O	O:0.999849
`	O	O:0.999993
df	O	O:0.999031
[	O	O:0.999968
'	O	O:0.999886
A	O	O:0.999985
']`)	O	O:0.999424
and	O	O:0.999956
call	O	O:0.998606
the	O	O:0.999237
string	O	O:0.990324
method	O	O:0.999783
`	O	O:0.999966
isdigit()	B-API	B-API:0.999521
`	O	O:0.999990
,	O	O:0.999975
we	O	O:1.000000
then	O	O:0.999942
set	O	O:0.999996
param	O	O:0.999908
`	O	O:0.999985
axis=1	O	O:0.997173
`	O	O:0.999997
to	O	O:0.999954
apply	O	O:0.974921
the	O	O:0.999913
lambda	O	O:0.989391
function	O	O:0.999855
row-wise	O	O:0.990826
.	O	O:0.999877
	
What	O	O:0.999468
happens	O	O:0.999944
here	O	O:0.999057
is	O	O:0.999993
that	O	O:0.999420
the	O	O:0.999994
index	O	O:0.999168
is	O	O:0.999990
used	O	O:0.999943
to	O	O:0.999996
create	O	O:0.999983
a	O	O:0.999993
boolean	O	O:0.997675
mask	O	O:0.868447
.	O	O:0.999810
	
#CODE	O	O:0.998453
	
This	O	O:0.999792
will	O	O:0.999910
be	O	O:0.999999
considerably	O	O:0.999828
faster	O	O:0.999884
that	O	O:0.999910
using	O	O:0.999947
`	O	O:0.999949
apply	O	B-API:0.992162
`	O	O:0.999970
on	O	O:0.999931
a	O	O:0.999996
larger	O	O:0.999765
frame	O	O:0.999969
as	O	O:0.999997
this	O	O:0.999393
is	O	O:0.999992
all	O	O:0.999942
implemented	O	O:0.999424
in	O	O:0.999902
cython	O	O:0.996579
.	O	O:0.999942
	
#CODE	O	O:0.998453
	
Do	O	O:0.999963
you	O	O:0.999988
want	O	O:0.999969
`	O	O:0.999995
transform	O	B-API:0.884937
`	O	O:0.999991
so	O	O:0.999965
that	O	O:0.999966
it	O	O:0.999999
returns	O	O:0.999889
an	O	O:0.999954
object	O	O:0.999925
with	O	O:0.999764
its	O	O:0.999956
index	O	O:0.999986
aligned	O	O:0.999814
to	O	O:0.999995
the	O	O:0.999999
original	O	O:0.999627
dataframe	B-API	O:0.998500
?	O	O:0.999967
	
like	O	O:0.999043
`	O	O:0.999991
b	O	O:0.999623
=	O	O:0.999971
stock_data_df.groupby	O	O:0.986456
(	O	O:0.999880
'	O	O:0.999992
stock	O	O:0.999536
id	O	O:0.999808
')	O	O:0.999659
.transform	B-API	B-API:0.997508
(	O	O:0.999909
apply	O	B-API:0.959992
(	O	O:0.999752
lambda	O	O:0.998200
x	O	O:0.999247
:	O	O:0.999940
x	O	O:0.999919
[	O	O:0.999976
'	O	O:0.999994
price	O	O:0.999362
']	O	O:0.999878
>	O	O:0.999694
=	O	O:0.999070
pd.rolling_max	B-API	B-API:0.996692
(	O	O:0.999919
x	O	O:0.999852
[	O	O:0.999944
'	O	O:0.999994
price	O	O:0.999367
']	O	O:0.999966
,	O	O:0.999838
20	O	O:0.999814
)))`	O	O:0.994539
	
Not	O	O:0.999983
sure	O	O:0.999931
if	O	O:0.999996
you	O	O:0.999987
so	O	O:0.999995
the	O	O:0.999997
edit	O	O:0.997755
,	O	O:0.999994
but	O	O:0.999981
I	O	O:0.999991
tried	O	O:0.999908
`	O	O:0.999933
b	O	O:0.999110
=	O	O:0.999967
stock_data_df.groupby	O	O:0.985827
(	O	O:0.999880
'	O	O:0.999992
stock	O	O:0.999536
id	O	O:0.999808
')	O	O:0.999659
.transform	B-API	B-API:0.997508
(	O	O:0.999909
apply	O	B-API:0.959992
(	O	O:0.999752
lambda	O	O:0.998200
x	O	O:0.999247
:	O	O:0.999940
x	O	O:0.999919
[	O	O:0.999976
'	O	O:0.999994
price	O	O:0.999362
']	O	O:0.999878
>	O	O:0.999694
=	O	O:0.999070
pd.rolling_max	B-API	B-API:0.996692
(	O	O:0.999919
x	O	O:0.999852
[	O	O:0.999944
'	O	O:0.999994
price	O	O:0.999367
']	O	O:0.999955
,	O	O:0.999790
20	O	O:0.999808
)))`	O	O:0.994593
and	O	O:0.999997
then	O	O:0.999925
I	O	O:0.999998
get	O	O:0.999978
`	O	O:0.999822
TypeError	O	O:0.997275
:	O	O:0.999927
(	O	O:0.999957
)	O	O:0.999997
takes	O	O:0.999845
exactly	O	O:0.999917
1	O	O:0.999798
argument	O	O:0.999536
(	O	O:0.999957
0	O	O:0.999980
given	O	O:0.998899
)`	O	O:0.999770
	
edit	O	O:0.996432
:	O	O:0.999982
I	O	O:0.999995
shoudl	O	O:0.999931
add	O	O:0.999923
that	O	O:0.999907
I	O	O:0.999995
already	O	O:0.999991
know	O	O:0.999385
what	O	O:0.999820
the	O	O:0.999990
95%CI	O	O:0.999803
values	O	O:0.999066
are	O	O:0.999947
.	O	O:0.999972
	
This	O	O:0.998611
is	O	O:0.999997
just	O	O:0.999914
a	O	O:0.999999
plotting	O	O:0.993273
question	O	O:0.994528
(	O	O:0.999991
how	O	O:0.999987
to	O	O:0.999994
apply	O	O:0.991885
the	O	O:0.999897
axvline	B-API	B-API:0.859736
to	O	O:0.999997
each	O	O:0.999986
of	O	O:0.999995
these	O	O:0.999973
subplots	O	O:0.999872
)	O	O:0.999963
.	O	O:0.999841
	
Thx	O	O:0.998749
.	O	O:0.999753
	
Note	O	O:0.999961
that	O	O:0.999973
when	O	O:0.999984
setting	O	O:0.999990
properties	O	O:0.999919
of	O	O:0.999989
an	O	O:0.999994
axis	O	O:0.999988
using	O	O:0.999940
its	O	O:0.999623
methods	O	O:0.999150
,	O	O:0.999999
most	O	O:0.999875
of	O	O:0.999992
the	O	O:0.999947
`	O	O:0.999992
plt	O	O:0.952315
`	O	O:0.999999
attributes	O	O:0.999717
become	O	O:0.999547
`	O	O:0.999990
set_X	B-API	B-API:0.977563
`	O	O:0.999975
.	O	O:0.999535
	
For	O	O:0.999919
example	O	O:0.999634
,	O	O:0.999997
instead	O	O:0.999992
of	O	O:0.999978
`	O	O:0.999936
plt.ylabel	B-API	B-API:0.995348
(	O	O:0.999955
'	O	O:0.999969
my_y	O	O:0.998660
')`	O	O:0.999973
you	O	O:0.999945
do	O	O:0.999975
`	O	O:0.999983
ax1.set_ylabel	O	O:0.602399
(	O	O:0.999954
'	O	O:0.999946
my_y	O	O:0.996212
')`	O	O:0.999817
.	O	O:0.999616
	
You	O	O:0.999902
can	O	O:0.999989
still	O	O:0.999981
use	O	O:0.999992
the	O	O:0.999806
`	O	O:0.999939
plt	O	O:0.920241
`	O	O:0.999996
methods	O	O:0.996715
,	O	O:0.999973
but	O	O:0.999986
they	O	O:0.999921
will	O	O:0.999986
apply	O	O:0.902241
to	O	O:0.999958
whatever	O	O:0.999997
the	O	O:0.999990
current	O	O:0.999846
plot	O	O:0.998230
is	O	O:0.999971
.	O	O:0.999848
	
The	O	O:0.999964
variables	O	O:0.995362
`	O	O:0.999982
ax1	O	O:0.996036
`	O	O:0.999974
and	O	O:0.999696
`	O	O:0.999994
ax2	O	O:0.976753
`	O	O:0.999996
give	O	O:0.998852
you	O	O:0.999997
a	O	O:0.999997
little	O	O:0.999907
more	O	O:0.999923
freedom	O	O:0.999936
about	O	O:0.999975
when	O	O:0.999810
you	O	O:0.999980
do	O	O:0.999996
things	O	O:0.999776
.	O	O:0.999808
	
You	O	O:0.999960
have	O	O:0.999965
the	O	O:0.999991
right	O	O:0.999909
idea	O	O:0.999731
with	O	O:0.999852
groupby	B-API	B-API:0.992210
.	O	O:0.999849
	
It	O	O:0.999880
has	O	O:0.999963
the	O	O:0.999994
ability	O	O:0.999814
to	O	O:0.999996
split	O	O:0.999650
up	O	O:0.999999
your	O	O:0.999994
data	O	O:0.999986
by	O	O:0.999999
the	O	O:0.999994
day	O	O:0.999964
then	O	O:0.999934
give	O	O:0.999993
you	O	O:0.999998
access	O	O:0.999758
to	O	O:0.999998
those	O	O:0.999997
groups	O	O:0.999182
.	O	O:0.999898
	
The	O	O:0.999941
trick	O	O:0.999939
here	O	O:0.999444
is	O	O:0.999995
using	O	O:0.999889
the	O	O:0.998755
apply	O	B-API:0.954270
method	O	O:0.999414
on	O	O:0.999934
the	O	O:0.999995
Series	O	O:0.999884
df	O	O:0.999491
[	O	O:0.999982
'	O	O:0.999982
date_time	O	O:0.998437
']	O	O:0.999821
.	O	O:0.998782
	
Apply	O	O:0.999705
on	O	O:0.999993
a	O	O:0.999993
series	O	O:0.999893
applies	O	O:0.999871
the	O	O:0.999895
input	O	O:0.998720
method	O	O:0.999928
element	O	O:0.999771
wise	O	O:0.999596
and	O	O:0.999990
returns	O	O:0.999931
a	O	O:0.999906
new	O	O:0.998210
Series	O	O:0.999140
.	O	O:0.999793
	
You	O	O:0.999933
can	O	O:0.999872
use	O	O:0.999999
this	O	O:0.999899
to	O	O:0.999998
split	O	O:0.999911
up	O	O:0.999986
by	O	O:0.999989
days	O	O:0.999622
and	O	O:0.999998
then	O	O:0.999938
again	O	O:0.999987
to	O	O:1.000000
split	O	O:0.999865
up	O	O:0.999989
by	O	O:0.999977
hours	O	O:0.999322
.	O	O:0.999785
	
But	O	O:0.999823
in	O	O:0.999988
the	O	O:0.999991
code	O	O:0.999673
below	O	O:0.999748
,	O	O:0.999994
it	O	O:0.999983
seems	O	O:0.999968
there	O	O:0.999958
are	O	O:0.999997
just	O	O:0.999770
too	O	O:0.999992
many	O	O:0.999890
lines	O	O:0.996648
.	O	O:0.999886
	
That	O	O:0.999107
is	O	O:0.999984
,	O	O:0.999993
the	O	O:0.999982
rank()	B-API	B-API:0.722744
function	O	O:0.999458
in	O	O:0.999990
pandas	O	O:0.999598
is	O	O:0.999993
super	O	O:0.998625
convenient	O	O:0.998985
.	O	O:0.999852
	
Seems	O	O:0.999834
to	O	O:0.999987
me	O	O:0.999999
there	O	O:0.999929
should	O	O:0.999975
be	O	O:1.000000
some	O	O:0.999983
parameter	O	O:0.999889
somewhere	O	O:0.999784
that	O	O:0.999979
says	O	O:0.999969
to	O	O:0.999999
the	O	O:1.000000
data	O	O:0.999974
frame	O	O:0.999998
,	O	O:0.999992
"	O	O:0.999982
Hey	O	O:0.999825
,	O	O:0.999987
apply	O	O:0.866293
this	O	O:0.997252
function	O	O:0.999883
you	O	O:0.999974
already	O	O:0.999991
know	O	O:0.999940
about	O	O:0.999578
,	O	O:0.999935
but	O	O:0.999969
instead	O	O:0.999988
of	O	O:0.999999
doing	O	O:0.999926
to	O	O:0.999992
the	O	O:0.999999
original	O	O:0.999933
column	O	O:0.999980
itself	O	O:0.999970
,	O	O:0.999999
as	O	O:0.999993
you	O	O:0.999897
do	O	O:0.999981
it	O	O:0.999994
,	O	O:0.999996
make	O	O:0.999949
it	O	O:0.999998
a	O	O:0.999999
new	O	O:0.999968
column	O	O:0.999917
at	O	O:0.999997
the	O	O:0.999998
end	O	O:0.999919
of	O	O:0.999996
the	O	O:0.999993
data	O	O:0.999992
frame	O	O:0.999980
"	O	O:0.999979
	
Please	O	O:0.999751
explain	O	O:0.999135
exactly	O	O:0.999978
what	O	O:0.999935
you	O	O:0.999994
want	O	O:0.999987
to	O	O:0.999994
achieve	O	O:0.999998
,	O	O:0.999982
in	O	O:0.999992
general	O	O:0.999657
you	O	O:0.999994
want	O	O:0.999966
to	O	O:0.999992
avoid	O	O:0.999994
any	O	O:0.999991
form	O	O:0.999922
of	O	O:0.999931
iteration	O	O:0.999703
and	O	O:0.999999
using	O	O:0.999951
apply	O	B-API:0.943299
if	O	O:0.999461
the	O	O:0.999911
calculation	O	O:0.999231
can	O	O:0.999965
be	O	O:0.999999
vectorised	O	O:0.999838
.	O	O:0.999475
	
It	O	O:0.999942
looks	O	O:0.999963
like	O	O:0.999936
you	O	O:0.999976
are	O	O:0.999998
just	O	O:0.999987
adding	O	O:0.999988
a	O	O:0.999977
new	O	O:0.999683
column	O	O:0.999924
,	O	O:0.999993
in	O	O:0.999976
which	O	O:0.999942
case	O	O:0.999994
just	O	O:0.999987
do	O	O:0.999992
df	O	O:0.999559
[	O	O:0.999870
'	O	O:0.999983
new_col	O	O:0.997577
']	O	O:0.999942
=	O	O:0.999537
some_calc_on_df	O	O:0.990316
.	O	O:0.999750
	
If	O	O:0.999966
you	O	O:0.999991
want	O	O:0.999991
to	O	O:0.999998
append	O	O:0.994394
another	O	O:0.999942
dataframe	B-API	O:0.996027
which	O	O:0.999782
has	O	O:0.999979
the	O	O:0.999979
same	O	O:0.999908
index	O	O:0.999984
then	O	O:0.999960
use	O	O:0.999999
append	O	B-API:0.560344
or	O	O:0.999869
concat	O	B-API:0.914900
,	O	O:0.999996
no	O	O:0.999996
need	O	O:0.999969
to	O	O:0.999998
merge	O	O:0.986565
unless	O	O:0.999911
the	O	O:0.999992
order	O	O:0.998518
is	O	O:0.999988
different	O	O:0.999406
and	O	O:0.999993
you	O	O:0.999990
want	O	O:0.999899
to	O	O:0.999998
join	O	O:0.965086
on	O	O:0.999998
some	O	O:0.999892
id	O	O:0.999969
column	O	O:0.999640
	
You	O	O:0.999770
are	O	O:0.999966
getting	O	O:0.999950
this	O	O:0.999838
error	O	O:0.999887
because	O	O:0.999967
the	O	O:0.999905
function	O	O:0.999959
you	O	O:0.999951
are	O	O:0.999999
passing	O	O:0.999892
to	O	O:0.999948
apply	O	O:0.881384
doesn't	O	O:0.998601
return	O	O:0.998697
anything	O	O:0.999732
.	O	O:0.999717
	
If	O	O:0.999972
all	O	O:0.999966
you	O	O:0.999996
care	O	O:0.999964
about	O	O:0.999907
is	O	O:0.999980
the	O	O:0.999939
printed	O	O:0.999199
output	O	O:0.999821
,	O	O:0.999995
you	O	O:0.999980
could	O	O:0.999991
just	O	O:0.999996
return	O	O:0.999972
the	O	O:0.999988
df	O	O:0.999928
back	O	O:0.999410
,	O	O:0.999997
like	O	O:0.999978
this	O	O:0.999888
.	O	O:0.999957
	
#CODE	O	O:0.998453
	
Then	O	O:0.999733
the	O	O:0.999995
apply	O	B-API:0.571715
will	O	O:0.999034
run	O	O:0.999835
through	O	O:0.999914
without	O	O:0.999581
error	O	O:0.998258
.	O	O:0.999576
	
#CODE	O	O:0.998453
	
For	O	O:0.999944
example	O	O:0.999810
,	O	O:0.999995
if	O	O:0.999996
the	O	O:0.999995
value	O	O:0.999727
in	O	O:0.999985
float_col	O	O:0.996486
is	O	O:0.999987
greater	O	O:0.999809
than	O	O:0.999736
5	O	O:0.999935
,	O	O:0.999993
I	O	O:0.999998
want	O	O:0.999980
to	O	O:0.999969
multiply	O	O:0.999995
the	O	O:0.999992
value	O	O:0.999666
in	O	O:0.999966
in_col	O	O:0.995673
(	O	O:0.999984
in	O	O:0.999987
the	O	O:0.999997
same	O	O:0.999966
row	O	O:0.999970
)	O	O:0.999998
by	O	O:0.999879
2	O	O:0.999772
.	O	O:0.999535
	
I'm	O	O:0.999885
guessing	O	O:0.999806
I'm	O	O:0.999977
supposed	O	O:0.999968
to	O	O:0.999993
use	O	O:1.000000
one	O	O:0.999960
of	O	O:0.999991
the	O	O:0.999982
`	O	O:0.999966
map	O	B-API:0.992884
`	O	O:0.999989
`	O	O:0.999969
apply	O	B-API:0.881036
`	O	O:0.999959
or	O	O:0.999359
`	O	O:0.999993
applymap	B-API	B-API:0.986211
`	O	O:0.999982
functions	O	O:0.994999
,	O	O:0.999973
but	O	O:0.999829
I'm	O	O:0.999933
not	O	O:0.999996
sure	O	O:0.999931
which	O	O:0.999969
,	O	O:0.999992
or	O	O:0.999990
how	O	O:0.999862
.	O	O:0.999963
	
Apply	O	O:0.999557
regex	O	O:0.999773
replace	O	O:0.990055
to	O	O:0.999983
python	O	O:0.999999
pandas	O	O:0.999978
data	O	O:0.999976
frame	O	O:0.999987
	
For	O	O:0.999985
some	O	O:0.999746
reason	O	O:0.999855
,	O	O:0.999997
the	O	O:0.999920
function	O	O:0.999927
runs	O	O:0.999938
properly	O	O:0.999988
on	O	O:0.999995
strings	O	O:0.999136
,	O	O:0.999991
but	O	O:0.999992
when	O	O:0.999663
running	O	O:0.999940
it	O	O:0.999994
on	O	O:0.999998
the	O	O:0.999998
data	O	O:0.999980
frame	O	O:0.999998
with	O	O:0.999973
apply	O	O:0.523857
it	O	O:0.999902
returns	O	O:0.999865
empty	O	O:0.999726
strings	O	O:0.998999
,	O	O:0.999878
and	O	O:0.999994
not	O	O:0.999984
the	O	O:0.999984
first	O	O:0.999915
three	O	O:0.999709
octets	O	O:0.999586
.	O	O:0.999874
	
Turns	O	O:0.999526
out	O	O:0.999968
that	O	O:0.999950
the	O	O:0.999995
errors	O	O:0.999860
raised	O	O:0.999745
on	O	O:0.999952
version	O	O:0.999889
0.12	O	O:0.999223
*	O	O:0.999978
should	O	O:0.999721
*	O	O:0.999998
be	O	O:0.999996
raised	O	O:0.999530
on	O	O:0.999806
0.14.1	O	O:0.999128
.	O	O:0.999891
	
The	O	O:0.999842
bug	O	O:0.999955
here	O	O:0.998572
is	O	O:0.999994
that	O	O:0.999697
`	O	O:0.999997
Grouby.filter	O	O:0.964974
`	O	O:0.999991
should	O	O:0.999875
apply	O	O:0.899849
to	O	O:0.999980
the	O	O:0.999999
entire	O	O:0.999785
subframe	O	O:0.999867
,	O	O:0.999998
not	O	O:0.999999
rows	O	O:0.999856
within	O	O:0.999890
the	O	O:0.999991
subframe	O	O:0.999645
.	O	O:0.999795
	
I	O	O:0.999945
am	O	O:0.999998
calculating	O	O:0.999649
a	O	O:0.999996
series	O	O:0.999918
by	O	O:0.999986
multiplying	O	O:0.999900
two	O	O:0.999971
columns	O	O:0.999981
of	O	O:0.999996
a	O	O:0.999990
dataframe	B-API	O:0.992692
.	O	O:0.999865
	
I	O	O:0.999963
apply	O	O:0.867691
groupby	B-API	B-API:0.998916
on	O	O:0.999946
that	O	O:0.999629
series	O	O:0.999972
.	O	O:0.999946
	
Get	O	O:0.998597
`	O	O:0.999846
ValueError	O	O:0.995968
:	O	O:0.999939
Buffer	O	O:0.999741
has	O	O:0.999982
wrong	O	O:0.999955
number	O	O:0.999952
of	O	O:0.999977
dimensions	O	O:0.998052
(	O	O:0.999996
expected	O	O:0.999938
1	O	O:0.999931
,	O	O:0.999991
got	O	O:0.999832
2	O	O:0.999908
)`	O	O:0.999751
	
python	O	O:0.999674
pandas	O	O:0.999882
apply	O	B-API:0.644971
function	O	O:0.999840
group	O	O:0.998187
by	O	O:0.999984
group	O	O:0.990436
	
My	O	O:0.999913
question	O	O:0.994633
is	O	O:0.999968
:	O	O:0.999972
can	O	O:0.999982
I	O	O:1.000000
avoid	O	O:0.999976
to	O	O:0.999940
iterate	O	O:0.999990
group	O	O:0.999645
by	O	O:0.999994
group	O	O:0.999143
to	O	O:0.999971
apply	O	O:0.891802
my_stat_function	O	O:0.937405
,	O	O:0.999909
and	O	O:0.999949
is	O	O:0.999991
there	O	O:0.999777
exist	O	O:0.999985
something	O	O:0.999930
faster	O	O:0.999643
,	O	O:0.999998
maybe	O	O:0.999951
applying	O	O:0.999870
the	O	O:0.999679
function	O	O:0.999774
apply	O	B-API:0.579235
?	O	O:0.999759
	
I	O	O:0.999916
would	O	O:0.999988
really	O	O:0.999928
like	O	O:0.999991
something	O	O:0.999980
more	O	O:0.999168
"	O	O:0.999983
pandas-ish	O	O:0.988265
'	O	O:0.999943
and	O	O:0.999977
faster	O	O:0.998779
.	O	O:0.999263
	
You	O	O:0.999900
can	O	O:0.999991
apply	O	O:0.974145
functions	O	O:0.999833
to	O	O:0.999867
groups	O	O:0.999909
:	O	O:0.999967
`	O	O:0.999988
df.groupby	B-API	B-API:0.986940
(	O	O:0.999964
'	O	O:0.999940
user_id	O	O:0.997594
')	O	O:0.999737
.apply	B-API	B-API:0.998128
(	O	O:0.999902
my_stat_function	O	O:0.997404
)`	O	O:0.999922
or	O	O:0.999989
similar	O	O:0.999920
,	O	O:0.999999
have	O	O:0.999947
you	O	O:0.999968
tried	O	O:0.999986
this	O	O:0.999938
?	O	O:0.999965
	
Thank	O	O:0.999688
you	O	O:0.999932
for	O	O:0.999999
your	O	O:0.999948
help	O	O:0.998365
,	O	O:0.999999
my	O	O:0.999981
problem	O	O:0.998179
is	O	O:0.999998
that	O	O:0.999816
I	O	O:0.999997
don't	O	O:0.999989
know	O	O:0.999482
how	O	O:0.999988
to	O	O:0.999990
define	O	O:0.999985
my_stat_function	O	O:0.992029
in	O	O:0.999988
order	O	O:0.999912
to	O	O:0.999989
apply	O	O:0.962396
it	O	O:0.999963
like	O	O:0.999953
this	O	O:0.999976
,	O	O:0.999998
because	O	O:0.999980
I	O	O:0.999995
need	O	O:0.999994
the	O	O:0.999995
full	O	O:0.999985
data	O	O:0.999981
of	O	O:0.999997
each	O	O:0.999900
group	O	O:0.999355
,	O	O:0.999989
It	O	O:0.999629
is	O	O:0.999986
not	O	O:0.999996
a	O	O:0.999999
row	O	O:0.999965
by	O	O:0.999962
row	O	O:0.999892
execution	O	O:0.999263
.	O	O:0.999927
	
Do	O	O:0.999970
you	O	O:0.999959
see	O	O:0.999996
what	O	O:0.999931
I	O	O:0.999998
mean	O	O:0.999943
?	O	O:0.999873
	
You	O	O:0.999761
could	O	O:0.999761
groupby	B-API	B-API:0.716606
user	O	O:0.999325
and	O	O:0.999915
apply	O	O:0.552620
the	O	O:0.997341
function	O	O:0.999197
,	O	O:0.999986
you'd	O	O:0.999991
have	O	O:0.999979
to	O	O:0.999998
rewrite	O	O:0.999999
your	O	O:0.999450
function	O	O:0.999884
though	O	O:0.999858
	
generally	O	O:0.999640
speaking	O	O:0.999445
you	O	O:0.999869
don't	O	O:0.999981
want	O	O:0.999988
to	O	O:0.999996
iterate	O	O:0.999996
through	O	O:0.999896
a	O	O:0.999988
dataframe	B-API	O:0.992071
.	O	O:0.999979
look	O	O:0.999884
into	O	O:0.999728
the	O	O:0.999971
`	O	O:0.999909
apply	O	B-API:0.998777
`	O	O:0.999660
method	O	O:0.997644
:	O	O:0.999964
#URL	O	O:0.999879
Also	O	O:0.999934
,	O	O:0.999997
the	O	O:0.999997
point	O	O:0.999854
of	O	O:0.999989
stackoverflow	O	O:0.998397
is	O	O:0.999995
to	O	O:0.999981
be	O	O:1.000000
a	O	O:0.999998
resource	O	O:0.998756
for	O	O:0.999979
future	O	O:0.999797
readers	O	O:0.998216
who	O	O:0.999786
might	O	O:0.999989
have	O	O:0.999991
a	O	O:0.999999
similar	O	O:0.999391
question	O	O:0.999540
.	O	O:0.999871
	
There	O	O:0.999804
are	O	O:0.999995
currently	O	O:0.999973
over	O	O:0.999777
7100	O	O:0.999620
pandas	O	O:0.999771
questions	O	O:0.999612
.	O	O:0.999766
	
Your	O	O:0.999554
title	O	O:0.999909
,	O	O:0.999995
as	O	O:0.999996
it	O	O:0.999961
current	O	O:0.999853
reads	O	O:0.999745
,	O	O:0.999961
will	O	O:0.999933
not	O	O:0.999993
at	O	O:0.999999
all	O	O:0.999990
help	O	O:0.999680
future	O	O:0.999881
readers	O	O:0.999223
understand	O	O:0.999858
what	O	O:0.999906
the	O	O:0.999989
topic	O	O:0.999893
of	O	O:0.999998
this	O	O:0.999836
question	O	O:0.999607
is	O	O:0.999961
.	O	O:0.999676
	
You	O	O:0.999893
can	O	O:0.999992
then	O	O:0.999994
apply	O	O:0.992311
some	O	O:0.999707
boolean	O	O:0.998417
logic	O	O:0.999955
to	O	O:0.999987
find	O	O:0.999996
the	O	O:0.999999
count	O	O:0.997332
which	O	O:0.999923
you're	O	O:0.999931
interested	O	O:0.999233
in	O	O:0.999899
:	O	O:0.999903
#CODE	O	O:0.999863
	
Python	O	O:0.993533
:	O	O:0.999936
Pandas	O	O:0.998907
:	O	O:0.999993
Speeding	O	O:0.999860
up	O	O:0.999957
an	O	O:0.999956
Apply	O	O:0.999528
Function	O	O:0.997909
	
I	O	O:0.999925
am	O	O:0.999997
trying	O	O:0.999671
to	O	O:0.999994
do	O	O:0.999998
a	O	O:0.999998
pandas	O	O:0.999568
apply	O	O:0.705847
function	O	O:0.999674
on	O	O:0.999991
a	O	O:0.999995
33	O	O:0.999393
MB	O	O:0.999921
dataframe	B-API	O:0.986677
(	O	O:0.999964
in	O	O:0.999987
CSV	O	O:0.999893
form	O	O:0.999864
)	O	O:0.999927
and	O	O:0.999988
it	O	O:0.999924
is	O	O:0.999942
going	O	O:0.999411
incredibly	O	O:0.999475
slow	O	O:0.996947
.	O	O:0.999775
	
And	O	O:0.999921
I	O	O:0.999981
am	O	O:0.999998
trying	O	O:0.999606
out	O	O:0.999968
figure	O	O:0.999429
out	O	O:0.999905
why	O	O:0.999901
.	O	O:0.999846
	
I	O	O:0.999815
was	O	O:0.999982
doing	O	O:0.999745
an	O	O:0.999985
apply	O	B-API:0.665151
on	O	O:0.999956
a	O	O:0.999979
much	O	O:0.998481
bigger	O	O:0.999618
dataframe	B-API	O:0.966753
(	O	O:0.999958
16	O	O:0.999924
GB	O	O:0.999790
)	O	O:0.999912
and	O	O:0.999989
it	O	O:0.999990
finished	O	O:0.999339
in	O	O:0.999992
about	O	O:0.999846
6	O	O:0.999906
hours	O	O:0.998337
.	O	O:0.999896
	
This	O	O:0.998305
function	O	O:0.999629
is	O	O:0.999994
operating	O	O:0.999724
on	O	O:0.999993
a	O	O:0.999994
much	O	O:0.998469
,	O	O:0.999996
much	O	O:0.999207
smaller	O	O:0.999607
dataframe	B-API	O:0.989945
and	O	O:0.999988
I	O	O:0.999985
let	O	O:0.999242
it	O	O:0.999885
run	O	O:0.998763
for	O	O:0.999974
1.5	O	O:0.998229
hours	O	O:0.997252
and	O	O:0.999987
still	O	O:0.999840
nothing	O	O:0.997588
.	O	O:0.999724
	
PS-	O	O:0.999921
also	O	O:0.999917
if	O	O:0.999997
someone	O	O:0.999812
knows	O	O:0.999631
how	O	O:0.999978
to	O	O:0.999994
add	O	O:0.999999
a	O	O:0.999992
progress	O	O:0.999351
bar	O	O:0.999974
on	O	O:0.999993
an	O	O:0.999987
apply	O	B-API:0.661591
function	O	O:0.999850
that	O	O:0.999540
would	O	O:0.999996
be	O	O:1.000000
a	O	O:0.999999
great	O	O:0.994091
added	O	O:0.999859
bonus	O	O:0.999407
:)	O	O:0.999937
Thanks	O	O:0.999416
again	O	O:0.999555
!	O	O:0.999910
	
#CODE	O	O:0.998453
	
Then	O	O:0.999823
,	O	O:0.999997
rather	O	O:0.999986
than	O	O:0.999967
using	O	O:0.999965
apply	O	B-API:0.681432
,	O	O:0.999835
you	O	O:0.999927
could	O	O:0.999980
merge	O	O:0.996928
your	O	O:0.999995
existing	O	O:0.999950
data	O	O:0.999941
against	O	O:0.999973
the	O	O:0.999995
stock	O	O:0.999492
df	O	O:0.999767
,	O	O:0.999999
something	O	O:0.999948
like	O	O:0.999890
this	O	O:0.999747
:	O	O:0.999984
#CODE	O	O:0.999846
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999972
to	O	O:0.999996
fill	O	O:0.999976
missing	O	O:0.999882
values	O	O:0.999858
,	O	O:0.999989
rather	O	O:0.999976
than	O	O:0.999801
having	O	O:0.999809
custom	O	O:0.998914
logic	O	O:0.999696
in	O	O:0.999963
apply	O	B-API:0.713421
,	O	O:0.999884
it's	O	O:0.999775
much	O	O:0.999779
faster	O	O:0.999857
use	O	O:0.999854
`	O	O:0.999666
fillna	B-API	B-API:0.999729
`	O	O:0.999968
#CODE	O	O:0.997534
	
You	O	O:0.999975
need	O	O:0.999970
to	O	O:0.999996
combine	O	O:0.999991
the	O	O:0.999980
functions	O	O:0.999970
that	O	O:0.999974
apply	O	O:0.929372
to	O	O:0.999984
the	O	O:0.999999
same	O	O:0.999966
column	O	O:0.999918
,	O	O:0.999999
like	O	O:0.999967
this	O	O:0.999388
:	O	O:0.999983
#CODE	O	O:0.999879
	
Then	O	O:0.999829
apply	O	O:0.841114
to	O	O:0.999982
the	O	O:0.999998
columns	O	O:0.999759
and	O	O:0.999981
assign	O	O:0.996069
:	O	O:0.999849
#CODE	O	O:0.999740
	
Why	O	O:0.999792
?	O	O:0.999934
	
I	O	O:0.999973
thought	O	O:0.999774
I	O	O:0.999965
could	O	O:0.999988
pass	O	O:0.999610
any	O	O:0.999927
function	O	O:0.999912
to	O	O:0.999918
`	O	O:0.999999
apply	O	B-API:0.940889
`	O	O:0.999984
on	O	O:0.999957
a	O	O:0.999997
group	O	O:0.987002
.	O	O:0.999870
	
@USER	O	O:0.999455
I	O	O:0.999990
agree	O	O:0.999954
about	O	O:0.998838
`	O	O:0.999960
transform	O	B-API:0.983960
`	O	O:0.999982
,	O	O:0.999981
although	O	O:0.999984
I	O	O:0.999985
thought	O	O:0.999961
you	O	O:0.999951
can	O	O:0.999980
mimic	O	O:0.999996
the	O	O:0.999996
behavior	O	O:0.999888
of	O	O:0.999972
`	O	O:0.999938
transform	O	B-API:0.888098
`	O	O:0.999992
with	O	O:0.999281
apply	O	B-API:0.809324
(	O	O:0.999828
which	O	O:0.998488
is	O	O:0.999993
more	O	O:0.999863
generic	O	O:0.999352
)	O	O:0.999906
	
If	O	O:0.999965
you	O	O:0.999989
want	O	O:0.999991
to	O	O:0.999991
compute	O	O:0.999981
stats	O	O:0.999954
across	O	O:0.999985
each	O	O:0.999980
set	O	O:0.999990
of	O	O:1.000000
rows	O	O:0.999511
with	O	O:0.999981
the	O	O:0.999991
same	O	O:0.999969
index	O	O:0.999820
in	O	O:0.999994
the	O	O:0.999999
two	O	O:0.999978
datasets	O	O:0.999949
,	O	O:0.999997
you	O	O:0.999995
can	O	O:0.999979
use	O	O:0.999998
`	O	O:0.999978
.groupby()	B-API	B-API:0.999926
`	O	O:0.999992
to	O	O:0.999951
group	O	O:0.999994
the	O	O:0.999998
data	O	O:0.999988
by	O	O:0.999955
row	O	O:0.999968
index	O	O:0.999853
,	O	O:0.999999
then	O	O:0.999957
apply	O	O:0.898732
the	O	O:0.999989
mean	O	O:0.998723
,	O	O:0.999996
median	O	O:0.653768
etc	O	O:0.999935
.	O	O:0.999961
	
:	O	O:0.999820
#CODE	O	O:0.999729
	
much	O	O:0.998212
faster	O	O:0.999893
than	O	O:0.999772
my	O	O:0.999984
general	O	O:0.998340
function	O	O:0.999949
,	O	O:0.999995
you	O	O:0.999980
can	O	O:0.999996
also	O	O:0.999999
use	O	O:0.999998
apply	O	B-API:0.926512
on	O	O:0.999962
this	O	O:0.999656
for	O	O:0.999996
more	O	O:0.999908
general	O	O:0.997633
functions	O	O:0.999516
	
Is	O	O:0.999986
this	O	O:0.999989
something	O	O:0.999948
I	O	O:0.999988
would	O	O:0.999982
use	O	O:0.999771
`	O	O:0.999950
groupby	B-API	B-API:0.999641
`	O	O:0.999965
for	O	O:0.999188
and	O	O:0.999998
then	O	O:0.999818
apply	O	O:0.921072
a	O	O:0.999871
function	O	O:0.998252
to	O	O:0.999981
it	O	O:0.999998
?	O	O:0.999975
	
I	O	O:0.999959
tried	O	O:0.999969
doing	O	O:0.999852
a	O	O:0.999900
`	O	O:0.999574
groupby	B-API	B-API:0.998462
`	O	O:0.999977
for	O	O:0.999742
the	O	O:0.999944
cust_id	O	O:0.997694
and	O	O:0.999994
date	O	O:0.999927
columns	O	O:0.998637
,	O	O:0.999988
but	O	O:0.999972
I	O	O:0.999966
was	O	O:0.999994
given	O	O:0.998318
an	O	O:0.999976
object	O	O:0.999893
so	O	O:0.999888
I'm	O	O:0.999964
not	O	O:0.999994
sure	O	O:0.999933
if	O	O:0.999990
it	O	O:0.999910
is	O	O:0.999995
formatted	O	O:0.999725
properly	O	O:0.999775
.	O	O:0.999893
	
You	O	O:0.999838
can	O	O:0.999991
just	O	O:0.999996
get	O	O:0.999998
a	O	O:0.999999
list	O	O:0.999325
of	O	O:0.999997
the	O	O:0.999993
columns	O	O:0.999956
you	O	O:0.999996
want	O	O:0.999993
to	O	O:0.999998
multiply	O	O:0.999995
the	O	O:0.999992
scores	O	O:0.999402
by	O	O:0.999936
and	O	O:0.999999
then	O	O:0.999926
an	O	O:0.999997
apply	O	B-API:0.866343
function	O	O:0.999189
...	O	O:0.997964
	
#CODE	O	O:0.998453
	
Both	O	O:0.999911
of	O	O:0.999992
you	O	O:0.999986
have	O	O:0.999993
the	O	O:0.999998
desired	O	O:0.999529
answer	O	O:0.999671
.	O	O:0.999814
	
I	O	O:0.999954
really	O	O:0.999810
appreciated	O	O:0.998308
it	O	O:0.999896
.	O	O:0.999874
	
In	O	O:0.999972
fact	O	O:0.999863
I	O	O:0.999998
have	O	O:0.999987
a	O	O:0.999990
more	O	O:0.999656
generalised	O	O:0.999445
question	O	O:0.999524
.	O	O:0.999897
	
I	O	O:0.999992
have	O	O:0.999995
a	O	O:0.999945
function	O	O:0.999411
which	O	O:0.999937
takes	O	O:0.999942
a	O	O:0.999999
couple	O	O:0.999476
of	O	O:0.999997
column	O	O:0.999931
values	O	O:0.999960
as	O	O:0.999989
input	O	O:0.999647
and	O	O:0.999984
outputs	O	O:0.999827
an	O	O:0.999922
value	O	O:0.999909
and	O	O:0.999985
I	O	O:0.999997
wanna	O	O:0.999919
apply	O	O:0.512584
that	O	O:0.998643
function	O	O:0.999956
to	O	O:0.999999
each	O	O:0.999991
row	O	O:0.999943
in	O	O:0.999994
a	O	O:0.999995
dataframe	B-API	O:0.987195
.	O	O:0.999871
	
Is	O	O:0.999980
that	O	O:0.999879
possible	O	O:0.999964
not	O	O:0.999996
to	O	O:0.999996
use	O	O:0.999995
for	O	O:0.999952
loop	O	O:0.999588
to	O	O:0.999968
achieve	O	O:0.999992
that	O	O:0.999832
?	O	O:0.999989
	
thanks	O	O:0.998302
in	O	O:0.999935
advance	O	O:0.999428
.	O	O:0.999839
	
This	O	O:0.997801
roundabout	O	O:0.999740
method	O	O:0.999973
of	O	O:0.999995
converting	O	O:0.999656
my	O	O:0.999940
`	O	O:0.999988
array	O	O:0.999259
`	O	O:0.999997
to	O	O:0.999977
a	O	O:1.000000
nested	O	O:0.954850
`	O	O:0.999978
list	O	O:0.762927
`	O	O:0.999986
and	O	O:0.999981
then	O	O:0.999959
converting	O	O:0.999896
it	O	O:0.999995
back	O	O:0.999811
to	O	O:0.999997
an	O	O:0.999999
array	O	O:0.999978
via	O	O:0.999825
`	O	O:0.999981
apply	O	B-API:0.984585
`	O	O:0.999651
is	O	O:0.999574
bothersome	O	O:0.998783
.	O	O:0.999814
	
Is	O	O:0.999985
there	O	O:0.999977
a	O	O:0.999998
more	O	O:0.999428
straightforward	O	O:0.999637
way	O	O:0.999980
that	O	O:0.999804
I'm	O	O:0.999991
just	O	O:0.999949
not	O	O:0.999999
aware	O	O:0.999931
of	O	O:0.999968
?	O	O:0.999814
	
I	O	O:0.999943
don't	O	O:0.999931
think	O	O:0.999706
that's	O	O:0.999991
a	O	O:0.999996
supported	O	O:0.999027
use	O	O:0.999977
case	O	O:0.999267
for	O	O:0.999989
DataFrames	O	O:0.998567
;	O	O:0.999977
while	O	O:0.999971
you	O	O:0.999990
can	O	O:0.999997
cram	O	O:0.999992
nonscalar	O	O:0.999993
data	O	O:0.999987
into	O	O:0.999976
a	O	O:0.999998
cell	O	O:0.995215
,	O	O:0.999982
there's	O	O:0.999828
not	O	O:0.999988
much	O	O:0.999968
you	O	O:0.999989
can	O	O:0.999984
do	O	O:0.999999
with	O	O:0.999993
it	O	O:0.999924
after	O	O:0.999980
that	O	O:0.999544
.	O	O:0.999951
	
You'll	O	O:0.999919
have	O	O:0.999986
a	O	O:0.999998
column	O	O:0.999966
dtype	B-API	B-API:0.930437
of	O	O:0.999931
object	O	O:0.998794
,	O	O:0.999993
which	O	O:0.999812
is	O	O:0.999994
slow	O	O:0.999728
to	O	O:0.999997
begin	O	O:0.999995
with	O	O:0.999961
,	O	O:0.999987
and	O	O:0.999997
you	O	O:0.999958
can't	O	O:0.999939
really	O	O:0.999976
do	O	O:0.999993
any	O	O:0.999984
fast	O	O:0.999285
aggregation	O	O:0.999642
ops	O	O:0.999872
,	O	O:0.999989
so	O	O:0.999988
you'll	O	O:0.999965
have	O	O:0.999979
to	O	O:1.000000
fall	O	O:0.999998
back	O	O:0.999773
to	O	O:0.999997
relatively	O	O:0.999994
slow	O	O:0.999873
apply	O	O:0.679955
ops	O	O:0.998252
.	O	O:0.999341
	
Depending	O	O:0.999279
on	O	O:0.999971
preference	O	O:0.999844
you	O	O:0.999978
might	O	O:0.999984
be	O	O:0.999998
more	O	O:0.999973
interested	O	O:0.999524
in	O	O:0.999994
using	O	O:0.999893
a	O	O:0.999954
MultiIndex	O	O:0.658263
or	O	O:0.999987
a	O	O:0.999986
Panel	O	O:0.999946
instead	O	O:0.999955
of	O	O:0.999998
this	O	O:0.999812
approach	O	O:0.999924
.	O	O:0.999784
	
You	O	O:0.999914
can	O	O:0.999971
perform	O	O:0.999987
a	O	O:0.999986
`	O	O:0.999906
groupby	B-API	B-API:0.998132
`	O	O:0.999992
on	O	O:0.998705
'	O	O:0.999989
Product	O	O:0.999916
ID	O	O:0.999201
'	O	O:0.999949
,	O	O:0.999998
then	O	O:0.999927
apply	O	O:0.753206
`	O	O:0.999928
idxmax	B-API	B-API:0.998994
`	O	O:0.999994
on	O	O:0.999616
'	O	O:0.999989
Sales	O	O:0.998769
'	O	O:0.999964
column	O	O:0.999704
.	O	O:0.999924
	
And	O	O:0.999983
a	O	O:0.999953
function	O	O:0.999775
,	O	O:0.999993
which	O	O:0.999956
I	O	O:0.999996
want	O	O:0.999990
to	O	O:0.999970
apply	O	O:0.982679
to	O	O:0.999988
each	O	O:0.999968
row	O	O:0.999973
,	O	O:0.999997
storing	O	O:0.999972
the	O	O:0.999933
result	O	O:0.999974
into	O	O:0.999941
a	O	O:0.999997
new	O	O:0.999438
column	O	O:0.999611
.	O	O:0.999885
	
#CODE	O	O:0.998453
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999994
`	O	O:0.999987
apply	O	B-API:0.978591
`	O	O:0.999966
with	O	O:0.999247
the	O	O:0.999983
`	O	O:0.999978
axis=1	O	O:0.986725
`	O	O:0.999992
argument	O	O:0.999810
to	O	O:0.999996
apply	O	O:0.993081
by	O	O:0.999728
row	O	O:0.999357
.	O	O:0.999689
	
The	O	O:0.999924
more	O	O:0.999770
general	O	O:0.999541
apply	O	O:0.550106
will	O	O:0.999004
be	O	O:0.999964
slower	O	O:0.999587
.	O	O:0.999538
	
It's	O	O:0.999723
better	O	O:0.999813
to	O	O:0.999997
find	O	O:0.999998
a	O	O:0.999998
way	O	O:0.999957
to	O	O:0.999987
vectorize	B-API	O:0.993086
the	O	O:0.999934
operations	O	O:0.998978
.	O	O:0.999857
	
When	O	O:0.999694
you	O	O:0.999994
have	O	O:0.999998
more	O	O:0.999996
data	O	O:0.999991
a	O	O:0.999998
general	O	O:0.998515
apply	O	B-API:0.727955
will	O	O:0.997969
not	O	O:0.999974
scale	O	O:0.999975
very	O	O:0.999950
well	O	O:0.999945
especially	O	O:0.999976
the	O	O:0.999986
row	O	O:0.999977
by	O	O:0.999968
row	O	O:0.999957
version	O	O:0.999863
since	O	O:0.999988
each	O	O:0.999806
row	O	O:0.999952
is	O	O:0.999993
converted	O	O:0.999621
to	O	O:0.999998
a	O	O:1.000000
series	O	O:0.999858
of	O	O:0.999985
uniform	O	O:0.999750
type	O	O:0.999531
which	O	O:0.999953
if	O	O:0.999992
you	O	O:0.999992
have	O	O:0.999982
mixed	O	O:0.999848
types	O	O:0.999722
will	O	O:0.999908
be	O	O:0.999999
very	O	O:0.999948
annoying	O	O:0.999766
to	O	O:0.999895
use	O	O:0.999948
and	O	O:0.999875
inefficient	O	O:0.998116
.	O	O:0.999510
	
Actually	O	O:0.999977
most	O	O:0.999792
of	O	O:0.999995
those	O	O:0.999785
are	O	O:0.999994
implemented	O	O:0.999436
in	O	O:0.999973
Cython	O	O:0.999080
which	O	O:0.999985
speeds	O	O:0.999379
up	O	O:0.999972
loops	O	O:0.999701
considerably	O	O:0.997876
.	O	O:0.999890
	
By	O	O:0.999952
vectorization	O	O:0.999854
I	O	O:0.999996
simply	O	O:0.999974
meant	O	O:0.999920
applying	O	O:0.999866
operations	O	O:0.999572
on	O	O:0.999996
whole	O	O:0.999990
sequences	O	O:0.999807
rather	O	O:0.999963
than	O	O:0.999992
single	O	O:0.999974
elements	O	O:0.999963
at	O	O:0.999996
a	O	O:0.999997
time	O	O:0.999812
,	O	O:0.999990
which	O	O:0.999860
is	O	O:0.999992
unrelated	O	O:0.999753
to	O	O:0.999996
the	O	O:0.999999
use	O	O:0.999887
of	O	O:0.999849
BLAS	O	O:0.997092
.	O	O:0.999906
	
What	O	O:0.998370
I'm	O	O:0.999946
saying	O	O:0.999149
is	O	O:0.999990
that	O	O:0.999873
spending	O	O:0.999979
a	O	O:0.999996
bit	O	O:0.999518
of	O	O:0.999986
time	O	O:0.999896
trying	O	O:0.999962
to	O	O:0.999993
avoid	O	O:0.999946
apply	O	O:0.560990
will	O	O:0.999196
probably	O	O:0.999923
yield	O	O:0.999935
reusable	O	O:0.998684
and	O	O:0.999996
more	O	O:0.999843
performant	O	O:0.998951
code	O	O:0.999392
.	O	O:0.999930
	
Try	O	O:0.999914
the	O	O:0.999993
simplest	O	O:0.999804
of	O	O:0.999947
operations	O	O:0.998090
:	O	O:0.999992
string	O	O:0.999917
concatenation	O	O:0.999850
,	O	O:0.999996
with	O	O:0.999932
two	O	O:0.999979
Series	O	O:0.999968
of	O	O:0.999973
length	O	O:0.997895
1,000,000	O	O:0.998083
.	O	O:0.999719
	
Do	O	O:0.999995
this	O	O:0.999970
by	O	O:0.999995
adding	O	O:0.999993
them	O	O:0.999839
together	O	O:0.999896
directly	O	O:0.999793
`	O	O:0.999994
a	O	O:0.999847
+	O	O:0.999948
b	O	O:0.999891
`	O	O:0.999996
then	O	O:0.998978
try	O	O:0.999999
putting	O	O:0.999991
them	O	O:0.999566
in	O	O:0.999999
a	O	O:0.999959
`	O	O:0.999943
DataFrame	B-API	O:0.848250
`	O	O:0.999978
and	O	O:0.999977
calling	O	O:0.999453
`	O	O:0.999634
df.apply	B-API	B-API:0.999100
(	O	O:0.999969
lambda	O	O:0.998552
x	O	O:0.998837
:	O	O:0.999949
x.a	O	O:0.999467
+	O	O:0.999978
x.b	O	O:0.999320
,	O	O:0.999982
axis=1	O	O:0.999527
)`	O	O:0.999408
.	O	O:0.999644
	
The	O	O:0.999747
latter	O	O:0.999733
takes	O	O:0.999596
an	O	O:0.999970
unbearably	O	O:0.999811
long	O	O:0.999645
time	O	O:0.999021
(	O	O:0.999994
about	O	O:0.999945
22	O	O:0.999920
seconds	O	O:0.999539
)	O	O:0.999998
where	O	O:0.999959
as	O	O:0.999994
the	O	O:0.999937
former	O	O:0.999768
takes	O	O:0.999761
about	O	O:0.999792
60	O	O:0.999956
milliseconds	O	O:0.999534
on	O	O:0.999987
my	O	O:0.999972
machine	O	O:0.999793
.	O	O:0.999877
	
Trust	O	O:0.999625
me	O	O:0.999947
,	O	O:0.999990
the	O	O:0.999983
string	O	O:0.999791
methods	O	O:0.999093
in	O	O:0.999990
pandas	O	O:0.999911
are	O	O:0.999998
orders	O	O:0.999786
of	O	O:0.999989
magnitude	O	O:0.999866
faster	O	O:0.999891
than	O	O:0.999899
calling	O	O:0.998007
`	O	O:0.999984
apply	O	B-API:0.994094
`	O	O:0.999870
.	O	O:0.998019
	
What	O	O:0.999697
you	O	O:0.999956
are	O	O:0.999998
looking	O	O:0.999907
for	O	O:0.999844
is	O	O:0.999941
`	O	O:0.999853
apply	O	B-API:0.990244
(	O	O:0.999928
func	O	O:0.982371
,	O	O:0.999983
axis=1	O	O:0.999411
)`	O	O:0.999634
This	O	O:0.999883
will	O	O:0.999972
apply	O	O:0.971288
a	O	O:0.999946
function	O	O:0.999066
row	O	O:0.999975
wise	O	O:0.999786
through	O	O:0.999943
your	O	O:0.999790
dataframe	B-API	O:0.988209
.	O	O:0.999938
	
I	O	O:0.999992
have	O	O:0.999995
a	O	O:0.999946
function	O	O:0.999593
which	O	O:0.999912
returns	O	O:0.999841
a	O	O:0.999998
list	O	O:0.998464
of	O	O:0.999989
length	O	O:0.996180
2	O	O:0.999752
.	O	O:0.999798
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999939
to	O	O:0.999998
apply	O	O:0.992825
this	O	O:0.998962
function	O	O:0.999931
to	O	O:0.999997
one	O	O:1.000000
column	O	O:0.999913
in	O	O:0.999993
my	O	O:0.999989
dataframe	B-API	O:0.997517
and	O	O:0.999993
assign	O	O:0.999939
the	O	O:0.999951
result	O	O:0.999788
to	O	O:0.999994
two	O	O:0.999999
columns	O	O:0.999905
.	O	O:0.999935
	
That's	O	O:0.999588
too	O	O:0.999879
bad	O	O:0.999951
,	O	O:0.999988
since	O	O:0.999913
performance	O	O:0.999166
is	O	O:0.999998
much	O	O:0.999705
better	O	O:0.999960
when	O	O:0.999828
you	O	O:0.999987
can	O	O:0.999999
apply	O	O:0.991136
functions	O	O:0.999884
to	O	O:0.999968
whole	O	O:0.999997
Series	O	O:0.999821
rather	O	O:0.999975
than	O	O:0.999888
to	O	O:0.999998
individual	O	O:0.999991
values	O	O:0.999729
one-at-a-time	O	O:0.999245
.	O	O:0.999946
	
2	O	O:0.999628
)	O	O:0.999973
group	O	O:0.998314
it	O	O:0.999970
up	O	O:0.999810
and	O	O:0.999995
apply	O	O:0.851592
a	O	O:0.999330
function	O	O:0.994727
to	O	O:0.999959
index	O	O:1.000000
your	O	O:0.999905
values	O	O:0.999415
.	O	O:0.999950
	
#CODE	O	O:0.998453
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.993303
a	O	O:0.999547
function	O	O:0.989115
(	O	O:0.999991
numpy	O	O:0.999976
ufunc	O	O:0.997104
)	O	O:0.999978
with	O	O:0.999809
two	O	O:0.999975
array	O	O:0.999989
arguments	O	O:0.999775
to	O	O:0.999980
one	O	O:0.999999
pandas	O	O:0.999834
Series	O	O:0.999901
?	O	O:0.999933
	
As	O	O:0.999922
for	O	O:0.999967
`	O	O:0.999978
apply	O	B-API:0.990317
`	O	O:0.999893
,	O	O:0.999857
you're	O	O:0.999991
looking	O	O:0.999778
at	O	O:0.999995
the	O	O:0.999981
wrong	O	O:0.998107
documentation	O	O:0.999326
.	O	O:0.999896
	
You're	O	O:0.999908
looking	O	O:0.999808
at	O	O:0.999955
`	O	O:0.999982
Dataframe.apply	B-API	B-API:0.913088
`	O	O:0.999957
,	O	O:0.999902
but	O	O:0.999993
you	O	O:0.999993
have	O	O:0.999996
a	O	O:0.999999
series	O	O:0.999926
,	O	O:0.999998
so	O	O:0.999993
you	O	O:0.999965
should	O	O:0.999991
be	O	O:1.000000
looking	O	O:0.999977
at	O	O:0.999921
`	O	O:0.999959
Series.apply	B-API	B-API:0.998759
`	O	O:0.999953
.	O	O:0.998851
	
`	O	O:0.999942
Series.apply	B-API	B-API:0.998791
`	O	O:0.999982
doesn't	O	O:0.999856
take	O	O:0.999993
a	O	O:0.999996
`	O	O:0.999968
raw	O	O:0.996909
`	O	O:0.999972
argument	O	O:0.998855
.	O	O:0.999893
	
You	O	O:0.999772
might	O	O:0.999957
think	O	O:0.999972
that	O	O:0.999990
removing	O	O:0.999890
the	O	O:0.999924
`	O	O:0.999984
raw	O	O:0.996357
`	O	O:0.999990
argument	O	O:0.999430
would	O	O:0.999929
fix	O	O:0.999987
your	O	O:0.999951
attempt	O	O:0.998559
,	O	O:0.999993
but	O	O:0.999945
`	O	O:0.999983
Series.apply	B-API	B-API:0.998015
`	O	O:0.999988
has	O	O:0.999941
a	O	O:0.999998
peculiar	O	O:0.998797
behavior	O	O:0.999954
where	O	O:0.999907
if	O	O:0.999935
`	O	O:0.999997
f	O	O:0.998507
`	O	O:0.999979
is	O	O:0.999970
a	O	O:0.999991
ufunc	O	O:0.972590
and	O	O:0.999972
no	O	O:0.999923
keyword	O	O:0.999713
arguments	O	O:0.999885
to	O	O:0.999976
`	O	O:1.000000
f	O	O:0.998772
`	O	O:0.999992
are	O	O:0.999942
supplied	O	O:0.999762
,	O	O:0.999985
it	O	O:0.999979
completely	O	O:0.999837
ignores	O	O:0.999609
`	O	O:0.999982
args	O	O:0.977159
`	O	O:0.999983
.	O	O:0.999262
	
I	O	O:0.999962
think	O	O:0.999981
this	O	O:0.998742
is	O	O:0.999994
actually	O	O:0.999955
a	O	O:0.999978
bug	O	O:0.998477
.	O	O:0.999774
	
The	O	O:0.999811
workaround	O	O:0.999104
is	O	O:0.999955
to	O	O:0.999979
not	O	O:0.999997
use	O	O:0.999960
`	O	O:0.999955
apply	O	B-API:0.975083
`	O	O:0.999923
for	O	O:0.999955
this	O	O:0.999803
;	O	O:0.999978
the	O	O:0.999975
broadcasting	O	O:0.999876
rules	O	O:0.999833
make	O	O:0.999592
`	O	O:0.999994
apply	O	B-API:0.955724
`	O	O:0.999984
redundant	O	O:0.983808
for	O	O:0.999999
your	O	O:0.999486
situation	O	O:0.997940
.	O	O:0.999946
	
Beautiful	O	O:0.996827
.	O	O:0.999738
	
I	O	O:0.999975
still	O	O:0.999831
don't	O	O:0.999863
know	O	O:0.999882
how	O	O:0.999978
apply	O	B-API:0.581075
should	O	O:0.999864
work	O	O:0.999908
if	O	O:0.999997
I	O	O:0.999997
need	O	O:0.999975
it	O	O:0.999956
again	O	O:0.999876
,	O	O:0.999984
but	O	O:0.999994
this	O	O:0.999854
solves	O	O:0.999929
the	O	O:0.999993
problem	O	O:0.999666
at	O	O:0.999983
hand	O	O:0.999571
.	O	O:0.999953
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
Actually	O	O:0.999635
,	O	O:0.999993
note	O	O:0.999911
that	O	O:0.999984
this	O	O:0.999607
is	O	O:0.999996
not	O	O:0.999975
really	O	O:0.999978
an	O	O:0.999991
answer	O	O:0.999795
for	O	O:0.999981
the	O	O:0.999945
question	O	O:0.999349
as	O	O:0.999967
stated	O	O:0.995581
.	O	O:0.999866
	
I	O	O:0.999881
would	O	O:0.999991
give	O	O:0.999594
you	O	O:0.999985
credit	O	O:0.999777
,	O	O:0.999988
but	O	O:0.999996
this	O	O:0.999840
would	O	O:0.999989
mislead	O	O:0.999944
others	O	O:0.999980
finding	O	O:0.999826
the	O	O:0.999971
question	O	O:0.999561
for	O	O:0.999992
an	O	O:0.999973
answer	O	O:0.999850
on	O	O:0.999919
`	O	O:0.999968
apply	O	B-API:0.846240
.	O	O:0.999599
	
`	O	O:0.999872
Sorry	O	O:0.996878
	
@USER	O	O:0.997817
szl	O	O:0.996310
:	O	O:0.999972
Well	O	O:0.999802
,	O	O:0.999999
this	O	O:0.999834
*	O	O:0.999978
is	O	O:0.999973
*	O	O:0.999983
how	O	O:0.999984
you	O	O:0.999989
apply	O	O:0.953578
a	O	O:0.999984
NumPy	O	O:0.999457
ufunc	O	O:0.988463
in	O	O:0.999963
the	O	O:0.999957
way	O	O:0.999930
you	O	O:0.999958
want	O	O:0.999909
.	O	O:0.999938
	
I've	O	O:0.999636
expanded	O	O:0.999844
the	O	O:0.999952
answer	O	O:0.999856
explaining	O	O:0.999411
why	O	O:0.999997
your	O	O:0.999815
attempt	O	O:0.999619
failed	O	O:0.999815
;	O	O:0.999991
does	O	O:0.999875
that	O	O:0.999982
answer	O	O:0.999999
your	O	O:0.999820
question	O	O:0.998985
?	O	O:0.999977
	
Thanks	O	O:0.999710
,	O	O:0.999989
I	O	O:0.999989
accepted	O	O:0.999963
the	O	O:0.999659
answer	O	O:0.998942
.	O	O:0.999689
	
Maybe	O	O:0.999866
you	O	O:0.999971
could	O	O:0.999991
be	O	O:1.000000
even	O	O:0.999980
clearer	O	O:0.999942
about	O	O:0.999967
no	O	O:0.999970
use	O	O:0.999928
of	O	O:0.999949
apply	O	B-API:0.900722
could	O	O:0.999290
broadcast	O	O:0.998014
(	O	O:0.999993
if	O	O:0.999983
that's	O	O:0.999969
the	O	O:0.999990
right	O	O:0.999915
word	O	O:0.999911
)	O	O:0.999997
the	O	O:0.999991
second	O	O:0.999583
argument	O	O:0.999939
if	O	O:0.999975
the	O	O:0.999983
ufunc	O	O:0.997323
expects	O	O:0.999559
an	O	O:0.999955
array	O	O:0.999878
.	O	O:0.999769
	
2	O	O:0.999759
)	O	O:0.999978
apply	O	O:0.523238
it	O	O:0.999909
to	O	O:0.999993
your	O	O:0.999997
Series	O	O:0.999034
after	O	O:0.999990
converting	O	O:0.998272
to	O	O:0.999897
dataframe	B-API	O:0.999722
#CODE	O	O:0.999697
	
to	O	O:0.999977
individually	O	O:0.999995
query	O	O:0.999865
each	O	O:0.999849
column	O	O:0.999863
and	O	O:0.999998
find	O	O:0.999907
the	O	O:0.999869
information	O	O:0.999441
I'm	O	O:0.999981
looking	O	O:0.999556
for	O	O:0.999890
but	O	O:0.999972
this	O	O:0.999375
is	O	O:0.999997
tedious	O	O:0.999788
even	O	O:0.999958
if	O	O:0.999997
I	O	O:0.999996
figure	O	O:0.999864
out	O	O:0.999881
how	O	O:0.999991
to	O	O:0.999985
use	O	O:0.999999
the	O	O:0.999861
abs	O	B-API:0.837678
function	O	O:0.999966
to	O	O:0.999984
combine	O	O:0.999960
the	O	O:0.999998
two	O	O:0.999983
queries	O	O:0.999884
into	O	O:0.999867
one.How	O	O:0.999352
can	O	O:0.999918
I	O	O:0.999999
apply	O	O:0.979298
this	O	O:0.998610
filtration	O	O:0.999272
to	O	O:0.999995
the	O	O:1.000000
whole	O	O:0.999793
dataframe	B-API	O:0.998554
?	O	O:0.999969
	
You	O	O:0.999824
don't	O	O:0.999975
have	O	O:0.999974
to	O	O:0.999997
apply	O	O:0.974457
the	O	O:0.999919
filtration	O	O:0.998744
to	O	O:0.999997
columns	O	O:0.999997
,	O	O:0.999999
you	O	O:0.999991
can	O	O:0.999997
also	O	O:0.999998
do	O	O:0.999994
#CODE	O	O:0.999699
	
I	O	O:0.999920
use	O	O:0.999993
this	O	O:0.990503
function	O	O:0.999812
with	O	O:0.999951
pandas	O	O:0.999888
to	O	O:0.999995
apply	O	O:0.960056
it	O	O:0.999958
to	O	O:0.999995
each	O	O:0.999997
month	O	O:0.999806
of	O	O:0.999996
a	O	O:0.999987
historical	O	O:0.995910
record	O	O:0.987003
:	O	O:0.999926
#CODE	O	O:0.999817
	
and	O	O:0.999993
when	O	O:0.999858
I	O	O:0.999990
apply	O	O:0.920832
the	O	O:0.994891
command	O	O:0.998629
pd.to_datetime()	B-API	B-API:0.997087
to	O	O:0.999991
these	O	O:1.000000
columns	O	O:0.999967
I	O	O:0.999998
get	O	O:0.999997
fields	O	O:0.999844
resulting	O	O:0.999922
that	O	O:0.999925
look	O	O:0.999904
like	O	O:0.999583
:	O	O:0.999972
#CODE	O	O:0.999768
	
I	O	O:0.999937
would	O	O:0.999996
like	O	O:0.999966
to	O	O:1.000000
create	O	O:0.999997
a	O	O:0.999999
new	O	O:0.999946
column	O	O:0.999748
`	O	O:0.999994
time_hour	O	O:0.956263
`	O	O:0.999980
.	O	O:0.999521
	
I	O	O:0.999975
can	O	O:0.999989
create	O	O:0.999936
it	O	O:0.999999
by	O	O:0.999996
writing	O	O:0.999948
a	O	O:0.999966
short	O	O:0.995888
function	O	O:0.999967
as	O	O:0.999989
so	O	O:0.999957
and	O	O:0.999997
using	O	O:0.999950
`	O	O:0.998747
apply()	B-API	B-API:0.999967
`	O	O:0.999971
to	O	O:0.999846
apply	O	O:0.988338
it	O	O:0.999791
iteratively	O	O:0.986717
:	O	O:0.999973
#CODE	O	O:0.999644
	
You	O	O:0.999901
can	O	O:0.999979
apply	O	O:0.980237
a	O	O:0.999981
lambda	O	O:0.988767
,	O	O:0.999962
e.g	O	O:0.998819
.	O	O:0.999771
	
how	O	O:0.999924
to	O	O:0.999992
apply	O	O:0.998604
different	O	O:0.999669
functions	O	O:0.999700
to	O	O:0.999992
each	O	O:0.999998
group	O	O:0.999290
of	O	O:0.999996
pandas	O	O:0.999276
groupby	B-API	B-API:0.898600
?	O	O:0.999810
	
I	O	O:0.999992
want	O	O:0.999969
to	O	O:0.999949
group	O	O:0.999961
the	O	O:0.999996
dataframe	B-API	O:0.999569
by	O	O:0.999987
the	O	O:0.999995
column	O	O:0.996579
'	O	O:0.999988
type	O	O:0.998800
'	O	O:0.999976
and	O	O:0.999994
apply	O	O:0.878548
different	O	O:0.991357
function	O	O:0.999606
to	O	O:0.999989
each	O	O:0.999993
group	O	O:0.999020
,	O	O:0.999998
say	O	O:0.999955
,	O	O:0.999985
`	O	O:0.999988
min	O	B-API:0.720691
`	O	O:0.999993
for	O	O:0.999969
group	O	O:0.997377
with	O	O:0.999897
type	O	O:0.996797
A	O	O:0.999994
,	O	O:0.999970
`	O	O:0.999975
max	O	B-API:0.835420
`	O	O:0.999988
for	O	O:0.999973
group	O	O:0.996547
with	O	O:0.999918
type	O	O:0.997217
B	O	O:0.999924
and	O	O:0.999950
`	O	O:0.999994
mean	O	O:0.988982
`	O	O:0.999995
for	O	O:0.999965
group	O	O:0.996818
with	O	O:0.999904
type	O	O:0.996930
C	O	O:0.999756
.	O	O:0.999836
	
I	O	O:0.999985
think	O	O:0.999919
you	O	O:0.999870
might	O	O:0.999979
be	O	O:0.999998
misunderstanding	O	O:0.999963
the	O	O:0.999704
intent	O	O:0.998395
behind	O	O:0.998091
`	O	O:0.999948
groupby	B-API	B-API:0.999794
`	O	O:0.999967
.	O	O:0.998236
	
No	O	O:0.999924
worries	O	O:0.999355
,	O	O:0.999986
it	O	O:0.999993
happens	O	O:0.999919
to	O	O:0.999993
the	O	O:1.000000
best	O	O:0.999875
of	O	O:0.999987
us	O	O:0.999826
too	O	O:0.999857
.	O	O:0.999895
	
The	O	O:0.999632
intent	O	O:0.999297
behind	O	O:0.998904
`	O	O:0.999939
groupby	B-API	B-API:0.999689
`	O	O:0.999983
is	O	O:0.999925
such	O	O:0.999959
that	O	O:0.999986
you	O	O:0.999978
can	O	O:0.999993
apply	O	O:0.980697
the	O	O:0.999993
same	O	O:0.999841
operations	O	O:0.999953
to	O	O:0.999999
subgroups	O	O:0.999998
of	O	O:1.000000
your	O	O:0.999992
data	O	O:0.999989
,	O	O:0.999999
as	O	O:0.999999
grouped	O	O:0.999661
by	O	O:0.999983
the	O	O:0.999922
`	O	O:0.999836
groupby	B-API	B-API:0.998998
`	O	O:0.999984
operation	O	O:0.995098
.	O	O:0.999943
	
My	O	O:0.999801
system	O	O:0.998877
has	O	O:0.999967
16gb	O	O:0.999880
of	O	O:0.999888
RAM	O	O:0.999650
and	O	O:0.999961
is	O	O:0.999966
running	O	O:0.991219
Debian	O	O:0.979099
(	O	O:0.999972
Mint	O	O:0.999248
)	O	O:0.999938
.	O	O:0.999660
	
After	O	O:0.999704
creating	O	O:0.998710
the	O	O:0.999977
dataframe	B-API	O:0.996178
I	O	O:0.999975
was	O	O:0.999991
using	O	O:0.999913
~600mb	O	O:0.996060
of	O	O:0.999541
RAM	O	O:0.999303
.	O	O:0.999876
	
As	O	O:0.999988
soon	O	O:0.999644
as	O	O:0.999998
the	O	O:0.999557
apply	O	B-API:0.897877
method	O	O:0.999637
began	O	O:0.999304
to	O	O:0.999997
execute	O	O:0.999922
,	O	O:0.999998
that	O	O:0.999985
value	O	O:0.999990
started	O	O:0.999842
to	O	O:0.999995
soar	O	O:0.999756
.	O	O:0.999906
	
It	O	O:0.999954
steadily	O	O:0.999931
climbed	O	O:0.999775
up	O	O:0.999945
to	O	O:0.999931
around	O	O:0.999976
7gb	O	O:0.997187
(	O	O:0.999961
!	O	O:0.999963
)	O	O:0.999950
before	O	O:0.999664
finishing	O	O:0.999575
the	O	O:0.998534
command	O	O:0.998855
and	O	O:0.999997
settling	O	O:0.999965
back	O	O:0.999282
down	O	O:0.999449
to	O	O:0.999989
5.4gb	O	O:0.999530
(	O	O:0.999986
while	O	O:0.999969
the	O	O:0.999945
shell	O	O:0.999056
was	O	O:0.999949
still	O	O:0.999831
active	O	O:0.999862
)	O	O:0.999952
.	O	O:0.999772
	
The	O	O:0.999921
problem	O	O:0.998113
is	O	O:0.999982
,	O	O:0.999991
my	O	O:0.999985
work	O	O:0.999805
requires	O	O:0.999938
doing	O	O:0.999980
more	O	O:0.999729
than	O	O:0.999640
the	O	O:0.999931
'	O	O:0.999968
do_nothing	O	O:0.954425
'	O	O:0.999859
method	O	O:0.999944
and	O	O:0.999998
as	O	O:0.999999
such	O	O:0.999241
while	O	O:0.999955
executing	O	O:0.997303
the	O	O:0.999979
real	O	O:0.992844
program	O	O:0.999886
,	O	O:0.999991
I	O	O:0.999996
cap	O	O:0.999961
my	O	O:0.999949
16gb	O	O:0.999859
of	O	O:0.999919
RAM	O	O:0.999800
and	O	O:0.999993
start	O	O:0.999921
swapping	O	O:0.998337
,	O	O:0.999983
making	O	O:0.999227
the	O	O:0.999785
program	O	O:0.999729
unusable	O	O:0.999272
.	O	O:0.999920
	
Is	O	O:0.999984
this	O	O:0.999788
intended	O	O:0.999799
?	O	O:0.999952
	
I	O	O:0.999956
can't	O	O:0.999912
see	O	O:0.999908
why	O	O:0.999977
Pandas	O	O:0.999768
should	O	O:0.999930
need	O	O:0.999988
7gb	O	O:0.999956
of	O	O:0.999987
RAM	O	O:0.999923
to	O	O:0.999998
effectively	O	O:0.999948
'	O	O:0.999993
do_nothing	O	O:0.997072
'	O	O:0.999974
,	O	O:0.999998
even	O	O:0.999873
if	O	O:0.999990
it	O	O:0.999994
has	O	O:0.999988
to	O	O:0.999996
store	O	O:0.999931
the	O	O:0.999962
grouped	O	O:0.995332
object	O	O:0.999680
.	O	O:0.999778
	
That	O	O:0.999750
example	O	O:0.999417
is	O	O:0.999985
somewhat	O	O:0.999439
pathological	O	O:0.998457
.	O	O:0.999867
	
The	O	O:0.999828
groupby	B-API	B-API:0.937356
creates	O	O:0.999697
a	O	O:0.999988
separate	O	O:0.999731
group	O	O:0.998446
for	O	O:0.999994
each	O	O:0.999544
distinct	O	O:0.999094
value	O	O:0.999751
.	O	O:0.999806
	
Since	O	O:0.999853
you	O	O:0.999978
generated	O	O:0.999979
the	O	O:0.999997
values	O	O:0.999773
as	O	O:0.999994
random	O	O:0.999621
floats	O	O:0.999531
,	O	O:0.999966
it's	O	O:0.999883
likely	O	O:0.999769
that	O	O:0.999986
they	O	O:0.999970
are	O	O:0.999999
all	O	O:0.999987
distinct	O	O:0.999688
,	O	O:0.999921
which	O	O:0.999912
means	O	O:0.999949
there	O	O:0.999985
are	O	O:0.999974
3	O	O:0.999964
million	O	O:0.999525
groups	O	O:0.998719
.	O	O:0.999810
	
Each	O	O:0.999674
group	O	O:0.999132
passed	O	O:0.999544
to	O	O:0.999998
your	O	O:0.999989
`	O	O:0.999992
do_nothing	O	O:0.991287
`	O	O:0.999984
is	O	O:0.999945
a	O	O:0.999991
DataFrame	B-API	O:0.989458
,	O	O:0.999994
so	O	O:0.999992
you	O	O:0.999974
are	O	O:0.999999
creating	O	O:0.999819
3	O	O:0.999919
million	O	O:0.999566
DataFrames	O	O:0.997778
(	O	O:0.999958
which	O	O:0.999944
`	O	O:0.999989
apply	O	B-API:0.937759
`	O	O:0.999982
then	O	O:0.997305
has	O	O:0.999999
to	O	O:0.999996
aggregate	O	O:0.983608
into	O	O:0.999852
a	O	O:0.999999
single	O	O:0.998623
result	O	O:0.999886
)	O	O:0.999959
.	O	O:0.999792
	
Even	O	O:0.999677
if	O	O:0.999992
each	O	O:0.999726
has	O	O:0.999985
only	O	O:0.999989
one	O	O:0.999994
row	O	O:0.999908
,	O	O:0.999999
this	O	O:0.999865
is	O	O:0.999997
a	O	O:0.999995
lot	O	O:0.999845
of	O	O:0.999928
overhead	O	O:0.998481
.	O	O:0.999925
	
It	O	O:0.999904
might	O	O:0.999903
be	O	O:0.999997
more	O	O:0.999969
illuminating	O	O:0.999528
to	O	O:0.999992
create	O	O:0.999972
an	O	O:0.999997
exmaple	O	O:0.999983
whose	O	O:0.999240
"	O	O:0.999992
groupiness	O	O:0.992344
"	O	O:0.999750
(	O	O:0.999924
i.e.	O	O:0.999755
,	O	O:0.999997
number	O	O:0.999961
of	O	O:0.999988
distinct	O	O:0.999945
groups	O	O:0.999767
)	O	O:0.999916
is	O	O:0.999996
more	O	O:0.999019
in	O	O:0.999986
line	O	O:0.999832
with	O	O:0.999990
your	O	O:0.999977
actual	O	O:0.999947
data	O	O:0.999925
.	O	O:0.999896
	
I	O	O:0.999990
need	O	O:0.999978
to	O	O:0.999964
expand	O	O:0.999997
this	O	O:0.999936
as	O	O:0.999979
matrix	O	O:0.999197
.	O	O:0.999808
	
How	O	O:0.999913
to	O	O:0.999979
do	O	O:0.999999
that	O	O:0.999917
?	O	O:0.999985
	
My	O	O:0.999966
first	O	O:0.999490
thought	O	O:0.999437
was	O	O:0.999969
iterate	O	O:0.999573
through	O	O:0.999941
the	O	O:0.999993
rows	O	O:0.998135
and	O	O:0.999992
apply	O	O:0.833947
numpy.hstack	B-API	B-API:0.998357
for	O	O:0.999777
joining	O	O:0.993144
,	O	O:0.999950
store	O	O:0.997844
it	O	O:0.999959
and	O	O:0.999982
numpy.vstack	B-API	B-API:0.811519
the	O	O:0.999954
stored	O	O:0.999910
rows	O	O:0.997583
,	O	O:0.999971
but	O	O:0.999989
it	O	O:0.999967
doesn't	O	O:0.999980
work	O	O:0.999956
as	O	O:0.999993
intended	O	O:0.999109
.	O	O:0.999828
	
I	O	O:0.999887
had	O	O:0.999953
the	O	O:0.999970
same	O	O:0.999460
issue	O	O:0.998634
:	O	O:0.999968
This	O	O:0.999958
does	O	O:0.999940
it	O	O:0.999998
all	O	O:0.999995
in	O	O:0.999998
place	O	O:0.999840
using	O	O:0.999990
pandas	O	O:0.999407
apply	O	B-API:0.926479
function	O	O:0.996804
.	O	O:0.999168
	
Should	O	O:0.999801
be	O	O:0.999988
the	O	O:0.999911
fastest	O	O:0.991449
method	O	O:0.999715
.	O	O:0.999830
	
#CODE	O	O:0.998453
	
A	O	O:0.999972
more	O	O:0.999778
memory	O	O:0.999873
efficient	O	O:0.999864
way	O	O:0.999977
to	O	O:0.999973
do	O	O:0.999999
this	O	O:0.999876
.	O	O:0.999921
	
The	O	O:0.999856
key	O	O:0.999739
is	O	O:0.999990
to	O	O:0.999983
apply	O	O:0.916470
`	O	O:0.999951
usecols	O	O:0.838008
`	O	O:0.999986
in	O	O:0.998828
`	O	O:0.999984
pd.read_csv	B-API	B-API:0.998646
`	O	O:0.999968
.	O	O:0.999481
	
#CODE	O	O:0.998453
	
Looking	O	O:0.999555
at	O	O:0.999997
your	O	O:0.999882
code	O	O:0.999550
,	O	O:0.999997
it	O	O:0.999991
seems	O	O:0.999959
you	O	O:0.999993
could	O	O:0.999956
use	O	O:0.999998
pandas	O	O:0.999824
built	O	O:0.999225
in	O	O:0.999975
moving	O	O:0.999289
average	O	O:0.997933
/	O	O:0.999983
sliding	O	O:0.999580
windows	O	O:0.999547
functionality	O	O:0.999702
,	O	O:0.999991
combined	O	O:0.999757
with	O	O:0.999983
a	O	O:0.999996
group	O	O:0.997987
by	O	O:0.999935
and	O	O:0.999958
apply	O	B-API:0.866727
.	O	O:0.995607
	
this	O	O:0.999763
makes	O	O:0.999891
me	O	O:0.999983
think	O	O:0.999931
that	O	O:0.999966
there	O	O:0.999985
must	O	O:0.999983
be	O	O:0.999999
an	O	O:0.999996
easier	O	O:0.999656
,	O	O:0.999990
perhaps	O	O:0.999895
vectorized	O	O:0.999418
way	O	O:0.999980
...	O	O:0.999940
perhaps	O	O:0.999950
using	O	O:0.999974
some	O	O:0.999696
kind	O	O:0.999731
of	O	O:0.999973
"	O	O:0.999957
apply	O	B-API:0.659503
"	O	O:0.999819
,	O	O:0.999851
however	O	O:0.998991
i'm	O	O:0.999784
not	O	O:0.999993
sure	O	O:0.999966
how	O	O:0.999990
to	O	O:0.999993
do	O	O:1.000000
that	O	O:0.999991
when	O	O:0.999983
each	O	O:0.999980
column	O	O:0.999989
needs	O	O:0.999978
to	O	O:0.999997
be	O	O:0.999999
shifted	O	O:0.999966
down	O	O:0.999737
as	O	O:0.999999
a	O	O:0.999961
function	O	O:0.999868
of	O	O:0.999996
its	O	O:0.999943
position	O	O:0.999915
in	O	O:0.999973
the	O	O:0.999980
array	O	O:0.999739
.	O	O:0.999772
	
Apply	O	O:0.999303
still	O	O:0.999661
uses	O	O:0.999922
loops	O	O:0.999892
by	O	O:0.999964
the	O	O:0.999943
way	O	O:0.999134
	
Just	O	O:0.999758
apply	O	O:0.716793
the	O	O:0.999868
function	O	O:0.999722
directly	O	O:0.999767
-	O	O:0.999991
I	O	O:0.999988
guess	O	O:0.999983
this	O	O:0.999778
will	O	O:0.999970
take	O	O:0.999987
more	O	O:0.999952
CPU	O	O:0.999977
as	O	O:0.999976
it's	O	O:0.999857
calculating	O	O:0.999774
all	O	O:0.999972
the	O	O:0.999985
maxes	O	O:0.999215
,	O	O:0.999998
then	O	O:0.999979
just	O	O:0.999992
getting	O	O:0.999989
the	O	O:0.999991
ones	O	O:0.999634
you	O	O:0.999992
want	O	O:0.999972
,	O	O:0.999980
but	O	O:0.999989
doesn't	O	O:0.999966
create	O	O:0.999955
a	O	O:0.999998
new	O	O:0.999729
variable	O	O:0.999664
.	O	O:0.999799
	
#CODE	O	O:0.998453
	
Then	O	O:0.999742
apply	O	O:0.963565
a	O	O:0.999984
groupby	B-API	B-API:0.998285
on	O	O:0.999981
the	O	O:0.999993
first	O	O:0.999993
level	O	O:0.999816
of	O	O:0.999970
the	O	O:0.999954
MultiIndex	O	O:0.989992
to	O	O:0.999988
apply	O	O:0.991364
the	O	O:0.999933
operation	O	O:0.999049
you	O	O:0.999979
want	O	O:0.999922
.	O	O:0.999943
	
#CODE	O	O:0.998453
	
That	O	O:0.999308
isn't	O	O:0.999931
fully	O	O:0.999927
vectorized	O	O:0.999759
,	O	O:0.999971
though	O	O:0.999872
,	O	O:0.999999
because	O	O:0.999972
of	O	O:0.999990
the	O	O:0.999983
`	O	O:0.999992
apply	O	B-API:0.989876
`	O	O:0.999890
.	O	O:0.998539
	
Something	O	O:0.999883
like	O	O:0.999596
`	O	O:0.999966
np.isfinite	B-API	B-API:0.996027
(	O	O:0.999995
df	O	O:0.999753
)	O	O:0.999899
.sum	B-API	B-API:0.998222
(	O	O:0.999981
axis=1	O	O:0.999793
)	O	O:0.999959
-1	O	O:0.999143
`	O	O:0.999964
should	O	O:0.999517
bypass	O	O:0.999870
all	O	O:0.999978
Python	O	O:0.999470
loops	O	O:0.999327
.	O	O:0.999738
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999275
to	O	O:0.999983
understand	O	O:0.999975
how	O	O:0.999978
to	O	O:0.999995
apply	O	O:0.949779
function	O	O:0.999661
within	O	O:0.999535
the	O	O:0.999920
'	O	O:0.999902
groupby	B-API	B-API:0.949604
'	O	O:0.999974
or	O	O:0.999995
each	O	O:0.999971
groups	O	O:0.999910
of	O	O:0.999995
the	O	O:0.999992
groups	O	O:0.999658
in	O	O:0.999987
a	O	O:0.999995
dataframe	B-API	O:0.990304
.	O	O:0.999868
	
#CODE	O	O:0.998453
	
I'm	O	O:0.999865
having	O	O:0.999916
some	O	O:0.999852
trouble	O	O:0.999930
figuring	O	O:0.999596
out	O	O:0.999960
what	O	O:0.999818
I'm	O	O:0.999989
doing	O	O:0.999967
wrong	O	O:0.999799
here	O	O:0.997525
,	O	O:0.999998
trying	O	O:0.999964
to	O	O:0.999991
append	O	O:0.991422
columns	O	O:0.999905
to	O	O:0.999996
an	O	O:1.000000
existing	O	O:0.999078
pd.DataFrame	B-API	B-API:0.982154
object	O	O:0.999315
.	O	O:0.999790
	
Specifically	O	O:0.999760
,	O	O:0.999994
my	O	O:0.999990
original	O	O:0.999452
dataframe	B-API	O:0.998676
has	O	O:0.999981
n-many	O	O:0.999903
columns	O	O:0.999694
,	O	O:0.999991
and	O	O:0.999996
I	O	O:0.999997
want	O	O:0.999955
to	O	O:0.999906
use	O	O:0.999998
apply	O	B-API:0.696825
to	O	O:0.999869
append	O	O:0.894300
an	O	O:0.999974
additional	O	O:0.999840
2n-many	O	O:0.999777
columns	O	O:0.999525
to	O	O:0.999982
it	O	O:0.999998
.	O	O:0.999946
	
The	O	O:0.999880
problem	O	O:0.999719
seems	O	O:0.999959
to	O	O:0.999993
be	O	O:1.000000
that	O	O:0.999974
doing	O	O:0.999989
this	O	O:0.999971
via	O	O:0.999034
apply()	B-API	B-API:0.993680
doesn't	O	O:0.999603
work	O	O:0.999899
,	O	O:0.999997
in	O	O:0.999998
that	O	O:0.999971
if	O	O:0.999998
I	O	O:0.999998
try	O	O:0.999995
to	O	O:0.999937
append	O	O:0.990294
more	O	O:0.999672
than	O	O:0.999926
n-many	O	O:0.999928
columns	O	O:0.999855
,	O	O:0.999996
it	O	O:0.999998
falls	O	O:0.999823
over	O	O:0.999596
.	O	O:0.999701
	
This	O	O:0.999471
doesn't	O	O:0.999960
make	O	O:0.999958
sense	O	O:0.999969
to	O	O:0.999985
me	O	O:0.999995
,	O	O:0.999986
and	O	O:0.999992
I	O	O:0.999954
was	O	O:0.999927
hoping	O	O:0.998994
somebody	O	O:0.999597
could	O	O:0.999817
either	O	O:0.999992
shed	O	O:0.999929
some	O	O:0.999946
light	O	O:0.999924
on	O	O:0.999988
to	O	O:0.999990
why	O	O:0.999999
I'm	O	O:0.999957
seeing	O	O:0.999980
this	O	O:0.999871
behaviour	O	O:0.999939
,	O	O:0.999990
or	O	O:0.999985
suggest	O	O:0.999928
a	O	O:0.999996
better	O	O:0.998638
approach	O	O:0.999801
.	O	O:0.999644
	
In	O	O:0.999947
general	O	O:0.999466
you	O	O:0.999989
want	O	O:0.999959
apply	O	B-API:0.505072
to	O	O:0.999959
return	O	O:0.998981
either	O	O:0.998953
:	O	O:0.999945
	
why	O	O:0.999904
are	O	O:0.999985
you	O	O:0.999992
showing	O	O:0.999943
using	O	O:0.999972
apply	O	B-API:0.933273
anyhow	O	O:0.972120
?	O	O:0.999611
	
this	O	O:0.999365
should	O	O:0.999985
just	O	O:0.999981
be	O	O:0.999999
column	O	O:0.999923
assignment	O	O:0.999724
,	O	O:0.999987
no	O	O:0.999920
?	O	O:0.999946
	
Here	O	O:0.999638
are	O	O:0.999982
solutions	O	O:0.999959
using	O	O:0.999793
apply	O	B-API:0.930680
.	O	O:0.994039
	
#CODE	O	O:0.998453
	
Can't	O	O:0.999953
think	O	O:0.999871
of	O	O:0.999998
anything	O	O:0.999846
great	O	O:0.999380
for	O	O:0.999953
unique	O	B-API:0.715648
.	O	O:0.999003
	
This	O	O:0.999767
uses	O	O:0.999510
apply	O	B-API:0.708784
,	O	O:0.999564
but	O	O:0.999889
may	O	O:0.999987
be	O	O:0.999992
faster	O	O:0.999940
,	O	O:0.999994
depending	O	O:0.999778
on	O	O:0.999987
the	O	O:0.999997
shape	O	O:0.999956
of	O	O:0.999996
the	O	O:0.999995
data	O	O:0.999914
.	O	O:0.999907
	
#CODE	O	O:0.998453
	
apply	O	B-API:0.804914
function	O	O:0.998961
on	O	O:0.999932
dataframe	B-API	O:0.998860
involving	O	O:0.999980
two	O	O:0.999982
rows	O	O:0.998838
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.995981
a	O	O:0.999855
function	O	O:0.999704
to	O	O:0.999992
calculate	O	O:0.999977
distance	O	O:0.999996
based	O	O:0.999877
on	O	O:0.999994
the	O	O:0.999947
longitude	O	O:0.999181
and	O	O:0.999957
latitude	O	O:0.996722
.	O	O:0.999361
	
Basically	O	O:0.999848
I	O	O:0.999997
need	O	O:0.999996
a	O	O:0.999989
way	O	O:0.999958
to	O	O:0.999987
express	O	O:0.999995
the	O	O:0.999967
function	O	O:0.999898
can	O	O:0.999944
handle	O	O:0.999997
two	O	O:0.999999
adjacent	O	O:0.999991
rows	O	O:0.998386
in	O	O:0.999968
dataframe	B-API	O:0.999182
	
I	O	O:0.999975
know	O	O:0.999951
there	O	O:0.999566
are	O	O:0.999988
ways	O	O:0.999909
to	O	O:0.999992
apply	O	O:0.885139
function	O	O:0.999720
along	O	O:0.999748
axis	O	O:0.999595
1	O	O:0.999804
and	O	O:0.999976
0	O	O:0.999686
,	O	O:0.999842
but	O	O:0.999973
they	O	O:0.999947
seem	O	O:0.999989
only	O	O:0.999981
apply	O	O:0.878601
to	O	O:0.999990
single	O	O:0.999978
row	O	O:0.999959
or	O	O:0.999986
column	O	O:0.999831
.	O	O:0.999957
	
How	O	O:0.999902
can	O	O:0.999940
I	O	O:1.000000
express	O	O:0.999992
something	O	O:0.998892
involving	O	O:0.999945
several	O	O:0.999960
rows	O	O:0.999505
or	O	O:0.999994
columns	O	O:0.999902
.	O	O:0.999953
	
Apply	O	O:0.998905
won't	O	O:0.999762
be	O	O:0.999998
able	O	O:0.999979
to	O	O:0.999996
this	O	O:0.999983
,	O	O:0.999993
but	O	O:0.999995
you	O	O:0.999985
can	O	O:0.999992
do	O	O:1.000000
something	O	O:0.999994
simple	O	O:0.999847
like	O	O:0.999926
the	O	O:0.999973
following	O	O:0.993957
:	O	O:0.999910
#CODE	O	O:0.999803
	
I	O	O:0.999937
would	O	O:0.999997
like	O	O:0.999934
to	O	O:0.999999
group	O	O:0.999961
the	O	O:0.999993
series	O	O:0.999977
by	O	O:0.999995
hours	O	O:0.999911
or	O	O:0.999991
days	O	O:0.999620
and	O	O:0.999998
apply	O	O:0.920567
a	O	O:0.998733
function	O	O:0.999447
group-wise	O	O:0.999610
which	O	O:0.999930
calculate	O	O:0.999627
the	O	O:0.999990
ratio	O	O:0.999297
#CODE	O	O:0.999580
	
Why	O	O:0.999945
does	O	O:0.999815
the	O	O:0.999992
second	O	O:0.999977
block	O	O:0.999926
of	O	O:0.999975
code	O	O:0.999626
not	O	O:0.999994
work	O	O:0.999899
?	O	O:0.999983
	
Doesn't	O	O:0.999293
DataFrame.apply()	B-API	B-API:0.994421
default	O	O:0.999169
to	O	O:0.999929
inplace	O	O:0.997997
?	O	O:0.999929
	
There	O	O:0.998992
is	O	O:0.999973
no	O	O:0.999972
inplace	O	O:0.996198
parameter	O	O:0.999870
to	O	O:0.999977
the	O	O:0.999999
apply	O	B-API:0.949105
function	O	O:0.998879
.	O	O:0.999700
	
If	O	O:0.999901
it	O	O:0.999964
doesn't	O	O:0.999975
work	O	O:0.999942
in	O	O:0.999999
place	O	O:0.999856
,	O	O:0.999989
doesn't	O	O:0.999980
this	O	O:0.999955
make	O	O:0.999987
pandas	O	O:0.999981
a	O	O:0.999997
terrible	O	O:0.998727
memory	O	O:0.999641
handler	O	O:0.999769
?	O	O:0.999922
	
Do	O	O:0.999909
all	O	O:0.999995
pandas	O	O:0.999988
data	O	O:0.999989
frame	O	O:0.999997
operations	O	O:0.999981
copy	O	O:0.999517
everything	O	O:0.999956
in	O	O:0.999930
situations	O	O:0.999943
like	O	O:0.999973
this	O	O:0.999948
?	O	O:0.999977
	
Wouldn't	O	O:0.999764
it	O	O:0.999991
be	O	O:0.999993
better	O	O:0.999847
to	O	O:0.999990
just	O	O:0.999984
do	O	O:0.999979
it	O	O:0.999980
inplace	O	O:0.984641
?	O	O:0.999937
	
Even	O	O:0.999363
if	O	O:0.999984
it	O	O:0.999990
doesn't	O	O:0.999915
default	O	O:0.999780
to	O	O:0.999982
inplace	O	O:0.997789
,	O	O:0.999960
shouldn't	O	O:0.999841
it	O	O:0.999997
provide	O	O:0.999906
an	O	O:0.999992
inplace	O	O:0.993395
parameter	O	O:0.999903
the	O	O:0.999963
way	O	O:0.999846
replace()	B-API	O:0.815676
does	O	O:0.999360
?	O	O:0.999973
	
No	O	O:0.999956
,	O	O:0.999989
apply	O	B-API:0.583258
does	O	O:0.997314
not	O	O:0.999940
work	O	O:0.999969
inplace*	O	O:0.998862
.	O	O:0.999914
	
In	O	O:0.999951
general	O	O:0.999487
apply	O	B-API:0.630801
is	O	O:0.999677
slow	O	O:0.962628
(	O	O:0.999994
since	O	O:0.999932
you	O	O:0.999966
are	O	O:1.000000
basically	O	O:0.999995
iterating	O	O:0.999938
through	O	O:0.999893
each	O	O:0.999678
row	O	O:0.999834
in	O	O:0.999988
python	O	O:0.999854
)	O	O:0.999992
,	O	O:0.999937
and	O	O:0.999996
the	O	O:0.999906
"	O	O:0.999942
game	O	O:0.999630
"	O	O:0.999959
is	O	O:0.999989
to	O	O:0.999961
rewrite	O	O:0.999989
that	O	O:0.999628
function	O	O:0.999963
in	O	O:0.999998
terms	O	O:0.999899
of	O	O:0.999994
pandas	O	O:0.998657
/	O	O:0.999991
numpy	O	O:0.999872
native	O	O:0.997855
functions	O	O:0.997644
and	O	O:0.999866
indexing	O	O:0.999077
.	O	O:0.998985
	
If	O	O:0.999965
you	O	O:0.999991
want	O	O:0.999989
to	O	O:0.999995
delve	O	O:0.999995
into	O	O:0.999955
more	O	O:0.999932
details	O	O:0.999886
about	O	O:0.999916
the	O	O:0.999947
internals	O	O:0.999737
,	O	O:0.999998
check	O	O:0.999886
out	O	O:0.999987
the	O	O:0.999987
BlockManager	O	O:0.991411
in	O	O:0.999971
core	O	O:0.998736
/	O	O:0.999984
internals.py	O	O:0.996591
,	O	O:0.999997
this	O	O:0.999259
is	O	O:0.999987
the	O	O:0.999960
object	O	O:0.999186
which	O	O:0.999865
holds	O	O:0.999742
the	O	O:0.999993
underlying	O	O:0.999076
numpy	O	O:0.999328
arrays	O	O:0.998916
.	O	O:0.999841
	
But	O	O:0.999932
to	O	O:0.999990
be	O	O:1.000000
honest	O	O:0.999844
I	O	O:0.999993
think	O	O:0.999992
your	O	O:0.999849
most	O	O:0.998968
useful	O	O:0.999868
tool	O	O:0.998688
is	O	O:0.999946
`	O	O:0.999959
%timeit	O	O:0.805133
`	O	O:0.999981
and	O	O:0.999987
looking	O	O:0.999944
at	O	O:0.999941
the	O	O:0.999954
source	O	O:0.999778
code	O	O:0.999614
for	O	O:0.999998
specific	O	O:0.999414
functions	O	O:0.997007
(	O	O:0.999735
`	O	O:0.999990
??	O	O:0.999765
`	O	O:0.999984
in	O	O:0.999942
ipython	O	O:0.999630
)	O	O:0.999971
.	O	O:0.999599
	
*	O	O:0.999964
apply	O	B-API:0.950487
is	O	O:0.999790
not	O	O:0.999791
usually	O	O:0.999982
going	O	O:0.999547
to	O	O:0.999984
make	O	O:0.999960
sense	O	O:0.999781
inplace	O	O:0.928788
(	O	O:0.999950
and	O	O:0.999940
IMO	O	O:0.999978
this	O	O:0.999716
behaviour	O	O:0.999686
would	O	O:0.999942
rarely	O	O:0.999854
be	O	O:0.999997
desired	O	O:0.999402
)	O	O:0.999903
.	O	O:0.999713
	
Just	O	O:0.999620
apply	O	O:0.785095
it	O	O:0.999933
to	O	O:0.999995
every	O	O:0.999989
column	O	O:0.999194
:	O	O:0.999979
#CODE	O	O:0.999897
	
There's	O	O:0.999719
nothing	O	O:0.999686
built-in	O	O:0.999188
,	O	O:0.999992
so	O	O:0.999974
you'll	O	O:0.999935
need	O	O:0.999988
to	O	O:0.999996
calculate	O	O:0.999976
it	O	O:0.999998
with	O	O:0.999965
apply	O	B-API:0.687728
.	O	O:0.999417
	
For	O	O:0.999898
example	O	O:0.999742
,	O	O:0.999994
for	O	O:0.999995
an	O	O:0.999985
easy	O	O:0.998181
'	O	O:0.999968
how	O	O:0.999992
many	O	O:0.999948
7	O	O:0.999983
day	O	O:0.999989
periods	O	O:0.999848
have	O	O:0.999872
passed	O	O:0.999402
'	O	O:0.999983
measure	O	O:0.999177
.	O	O:0.999900
	
#CODE	O	O:0.998453
	
JohnB	O	O:0.997259
-	O	O:0.999980
Yes	O	O:0.999899
I	O	O:0.999996
know	O	O:0.999936
how	O	O:0.999702
to	O	O:0.999989
group-by	O	O:0.999999
based	O	O:0.999714
on	O	O:0.999994
the	O	O:0.999979
location	O	O:0.999701
.	O	O:0.999871
	
That	O	O:0.999708
it	O	O:0.999989
actually	O	O:0.999986
included	O	O:0.999914
as	O	O:0.999998
part	O	O:0.999789
of	O	O:0.999995
the	O	O:0.999952
question	O	O:0.999422
.	O	O:0.999841
	
But	O	O:0.999977
when	O	O:0.999852
you	O	O:0.999998
group	O	O:0.999979
by	O	O:0.999994
you	O	O:0.999991
end	O	O:0.999972
up	O	O:0.999986
with	O	O:0.999950
a	O	O:0.999986
group-by	O	O:0.998932
object	O	O:0.999849
which	O	O:0.999960
you	O	O:0.999987
can	O	O:0.999996
iterate	O	O:0.999995
over	O	O:0.999925
.	O	O:0.999971
for	O	O:0.999998
a	O	O:0.999991
specific	O	O:0.999261
group	O	O:0.988598
is	O	O:0.999995
there	O	O:0.999948
a	O	O:0.999995
way	O	O:0.999895
to	O	O:0.999991
apply	O	O:0.993085
a	O	O:0.999958
shift	O	B-API:0.967272
to	O	O:0.999951
it	O	O:0.999997
.	O	O:0.999943
	
Or	O	O:0.999980
do	O	O:0.999957
I	O	O:0.999999
need	O	O:0.999975
to	O	O:0.999983
iterate	O	O:0.999993
over	O	O:0.999589
it	O	O:0.999932
.	O	O:0.999953
	
Also	O	O:0.999974
once	O	O:0.999950
you	O	O:0.999997
have	O	O:0.999990
the	O	O:0.999998
groups	O	O:0.999789
there	O	O:0.999961
seems	O	O:0.999979
to	O	O:0.999998
be	O	O:1.000000
options	O	O:0.999980
to	O	O:0.999983
process	O	O:0.999997
the	O	O:0.999989
data	O	O:0.999347
but	O	O:0.999987
not	O	O:0.999998
add	O	O:0.999996
another	O	O:0.999984
column	O	O:0.999849
to	O	O:0.999990
the	O	O:0.999999
group	O	O:0.993027
.	O	O:0.999902
	
This	O	O:0.996700
is	O	O:0.999994
kind	O	O:0.999877
of	O	O:0.999991
where	O	O:0.999779
I'm	O	O:0.999973
stuck	O	O:0.999321
.	O	O:0.999876
	
Use	O	O:0.999696
transform	O	B-API:0.964764
(	O	O:0.999974
instead	O	O:0.999989
of	O	O:0.999994
apply	O	B-API:0.584832
)	O	O:0.999979
,	O	O:0.999982
as	O	O:0.999971
chrisb	O	O:0.997259
suggests	O	O:0.999752
,	O	O:0.999986
and	O	O:0.999990
assign	O	O:0.999893
the	O	O:0.999960
result	O	O:0.999924
to	O	O:0.999983
`	O	O:1.000000
portfolios	O	O:0.995726
[	O	O:0.999998
columname	O	O:0.999806
]`	O	O:0.999547
:	O	O:0.999878
#CODE	O	O:0.999829
	
Thanks	O	O:0.998978
@USER	O	O:0.999576
,	O	O:0.999991
thanks	O	O:0.999555
for	O	O:0.999984
code	O	O:0.999705
,	O	O:0.999994
I	O	O:0.999997
have	O	O:0.999986
small	O	O:0.999672
problem	O	O:0.999888
now	O	O:0.999812
,	O	O:0.999998
two	O	O:0.999994
months	O	O:0.999880
of	O	O:0.999983
cvs1	O	O:0.997601
has	O	O:0.999988
50,000	O	O:0.999873
data	O	O:0.999798
Value	O	O:0.998031
and	O	O:0.999995
two	O	O:0.999986
months	O	O:0.999670
of	O	O:0.999957
csv2	O	O:0.997379
has	O	O:0.999986
4,000	O	O:0.999908
data	O	O:0.999703
Value	O	O:0.999073
and	O	O:0.999997
so	O	O:0.999987
on	O	O:0.999939
,	O	O:0.999989
it's	O	O:0.999955
really	O	O:0.999933
hard	O	O:0.999926
to	O	O:0.999993
fit	O	O:0.999988
all	O	O:0.999981
the	O	O:0.999983
graph	O	O:0.999520
for	O	O:0.999986
two	O	O:0.999976
months	O	O:0.999789
at	O	O:0.999996
same	O	O:0.999971
size	O	O:0.999833
,	O	O:0.999956
[	O	O:0.999990
link	O	O:0.999563
]	O	O:0.999691
(	O	O:0.999972
#URL	O	O:0.999870
)	O	O:0.999993
from	O	O:0.999868
the	O	O:0.999974
graph	O	O:0.999862
,	O	O:0.999995
only	O	O:0.999982
two	O	O:0.999997
months	O	O:0.999987
of	O	O:0.999997
data	O	O:0.999633
is	O	O:0.999993
shown	O	O:0.999078
but	O	O:0.999981
all	O	O:0.999989
the	O	O:0.999967
signals	O	O:0.993791
doesn't	O	O:0.999463
fit	O	O:0.999565
.	O	O:0.999943
	
Python	O	O:0.993370
is	O	O:0.999990
plotting	O	O:0.999776
based	O	O:0.999575
on	O	O:0.999996
the	O	O:0.999996
data	O	O:0.999910
points	O	O:0.999636
but	O	O:0.999991
I	O	O:0.999999
want	O	O:0.999973
to	O	O:0.999954
plot	O	O:0.999997
based	O	O:0.999932
on	O	O:0.999992
days	O	O:0.998463
(	O	O:0.999991
for	O	O:0.999913
ex	O	O:0.999782
:	O	O:0.999935
2	O	O:0.999977
months	O	O:0.999798
/	O	O:0.999975
60	O	O:0.999974
days	O	O:0.999265
)	O	O:0.999971
.	O	O:0.999835
	
Is	O	O:0.999974
there	O	O:0.999950
any	O	O:0.999971
logic	O	O:0.999884
to	O	O:0.999978
apply	O	O:0.972353
,	O	O:0.999963
or	O	O:0.999984
methods	O	O:0.999711
,	O	O:0.999998
any	O	O:0.999983
suggestions	O	O:0.999248
are	O	O:0.999965
highly	O	O:0.999920
appreciable	O	O:0.999846
,	O	O:0.999994
since	O	O:0.999938
I	O	O:0.999993
am	O	O:0.999998
in	O	O:0.999993
this	O	O:0.999906
for	O	O:0.999995
long	O	O:0.999631
time	O	O:0.999225
.	O	O:0.999867
	
Thank	O	O:0.999084
you	O	O:0.999961
very	O	O:0.999865
much	O	O:0.999631
.	O	O:0.999892
	
and	O	O:0.999995
then	O	O:0.999852
apply	O	O:0.870343
the	O	O:0.999835
above	O	O:0.997685
technique	O	O:0.999840
.	O	O:0.999872
	
(	O	O:0.999966
I	O	O:0.999995
sometimes	O	O:0.999986
toss	O	O:0.998406
in	O	O:0.999998
a	O	O:0.999988
`	O	O:0.999801
reset_index	B-API	B-API:0.999080
(	O	O:0.999985
drop=True	O	O:0.999677
)`	O	O:0.999191
,	O	O:0.999896
but	O	O:0.999992
that's	O	O:0.999931
up	O	O:0.999979
to	O	O:0.999990
you	O	O:0.999998
.	O	O:0.999988
)	O	O:0.999990
	
I	O	O:0.999927
am	O	O:0.999998
trying	O	O:0.999757
to	O	O:0.999984
run	O	O:0.999977
the	O	O:0.999979
`	O	O:0.999972
scipy.stats.entropy	O	O:0.847525
`	O	O:0.999980
function	O	O:0.999445
on	O	O:0.999994
two	O	O:0.999956
arrays	O	O:0.999827
.	O	O:0.999809
	
It	O	O:0.999481
is	O	O:0.999992
being	O	O:0.999428
run	O	O:0.999583
on	O	O:0.999992
each	O	O:0.999933
row	O	O:0.999994
of	O	O:0.999996
a	O	O:0.999972
Pandas	O	O:0.999857
DataFrame	B-API	O:0.994540
via	O	O:0.999878
the	O	O:0.999974
apply	O	B-API:0.983974
function	O	O:0.993194
:	O	O:0.999861
#CODE	O	O:0.999876
	
Turns	O	O:0.999642
out	O	O:0.999935
if	O	O:0.999996
any	O	O:0.999995
column	O	O:0.999588
in	O	O:0.999986
the	O	O:0.999992
original	O	O:0.999723
dataframe	B-API	O:0.996988
is	O	O:0.999990
an	O	O:0.999963
object	O	O:0.999894
,	O	O:0.999992
the	O	O:0.999984
series	O	O:0.999910
created	O	O:0.999836
via	O	O:0.999988
apply	O	B-API:0.565843
is	O	O:0.999814
of	O	O:0.998997
object	O	O:0.999719
type	O	O:0.998728
.	O	O:0.999886
	
Thanks	O	O:0.998922
again	O	O:0.999391
.	O	O:0.999904
	
#URL	O	O:0.997160
	
Then	O	O:0.999653
define	O	O:0.999888
my	O	O:0.999993
group	O	O:0.995105
operation	O	O:0.999702
and	O	O:0.999973
apply	O	B-API:0.691165
it	O	O:0.994428
:	O	O:0.999851
#CODE	O	O:0.999804
	
Then	O	O:0.999732
,	O	O:0.999999
using	O	O:0.999988
the	O	O:0.999901
approach	O	O:0.999654
from	O	O:0.999978
this	O	O:0.999872
answer	O	O:0.999981
,	O	O:0.999987
pivot	B-API	O:0.861522
into	O	O:0.999840
columns	O	O:0.999908
,	O	O:0.999988
and	O	O:0.999997
drop	O	O:0.991393
the	O	O:0.999897
sentinel	O	O:0.998953
.	O	O:0.999780
	
This	O	O:0.999568
won't	O	O:0.999939
be	O	O:0.999996
ultra	O	O:0.999957
performant	O	O:0.999817
because	O	O:0.999936
of	O	O:0.999993
the	O	O:0.999983
apply	O	B-API:0.805172
,	O	O:0.999659
but	O	O:0.999920
probably	O	O:0.999963
reasonable	O	O:0.999978
on	O	O:0.999999
data	O	O:0.999979
of	O	O:1.000000
your	O	O:0.999896
size	O	O:0.999741
.	O	O:0.999924
	
#CODE	O	O:0.998453
	
How	O	O:0.999914
do	O	O:0.999933
I	O	O:0.999997
apply	O	O:0.786275
filters	O	O:0.979367
and	O	O:0.999953
functions	O	O:0.999940
to	O	O:0.999987
previous	O	O:0.999999
rows	O	O:0.999144
in	O	O:0.999988
pandas	O	O:0.999927
?	O	O:0.999978
	
The	O	O:0.999974
proper	O	O:0.999794
use	O	O:0.999974
of	O	O:0.999893
apply	O	B-API:0.960102
is	O	O:0.999980
a	O	O:0.999937
bit	O	O:0.999627
unclear	O	O:0.999654
to	O	O:0.999939
me	O	O:0.999983
.	O	O:0.999885
	
Further	O	O:0.999775
,	O	O:0.999980
you	O	O:0.999891
should	O	O:0.999984
not	O	O:0.999998
repeatedly	O	O:0.999991
using	O	O:0.999846
`	O	O:0.999588
get_group	B-API	B-API:0.999953
`	O	O:0.999985
,	O	O:0.999967
instead	O	O:0.999980
use	O	O:0.999960
the	O	O:0.999982
cythonized	O	O:0.998237
functions	O	O:0.999881
,	O	O:0.999975
`	O	O:0.999995
apply	O	B-API:0.980090
`	O	O:0.999980
,	O	O:0.999928
or	O	O:0.999994
iteration	O	O:0.999842
,	O	O:0.999996
see	O	O:0.999973
docs	O	O:0.999890
here	O	O:0.999585
	
Say	O	O:0.999857
I	O	O:0.999996
have	O	O:0.999990
a	O	O:0.999974
large	O	O:0.999183
dataframe	B-API	O:0.966508
and	O	O:0.999996
that	O	O:0.999951
I	O	O:0.999997
want	O	O:0.999988
to	O	O:0.999926
apply	O	O:0.991864
one	O	O:0.999931
operation	O	O:0.999732
to	O	O:0.999998
every	O	O:0.999994
element	O	O:0.999891
in	O	O:0.999996
a	O	O:0.999997
column	O	O:0.999151
.	O	O:0.999922
	
I	O	O:0.999804
was	O	O:0.999973
looking	O	O:0.999302
for	O	O:0.999981
an	O	O:0.999941
option	O	O:0.999959
like	O	O:0.999964
example	O	O:0.999852
2	O	O:0.999924
,	O	O:0.999984
except	O	O:0.999889
it	O	O:0.999980
won't	O	O:0.999977
apply	O	O:0.783888
the	O	O:0.999964
formatting	O	O:0.999213
to	O	O:0.999969
future	O	O:0.999994
dataframes	O	O:0.999447
.	O	O:0.999896
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
You	O	O:0.999899
can	O	O:0.999958
apply	O	O:0.922252
any	O	O:0.999945
operator	O	O:0.999409
or	O	O:0.999982
across	O	O:0.999961
a	O	O:0.999992
column	O	O:0.998863
.	O	O:0.999928
	
To	O	O:0.999925
mutate	O	O:0.998325
it	O	O:0.999963
in-place	O	O:0.999747
,	O	O:0.999999
just	O	O:0.999945
multiply	O	O:0.999915
the	O	O:0.999992
column	O	O:0.999988
by	O	O:0.999916
-1	O	O:0.999036
:	O	O:0.999870
#CODE	O	O:0.999721
	
You	O	O:0.999867
don't	O	O:0.999927
need	O	O:0.999968
the	O	O:0.999994
apply	O	B-API:0.674834
,	O	O:0.999983
just	O	O:0.999754
do	O	O:0.999982
`	O	O:0.999987
-	O	O:0.999972
frame.abs()	O	O:0.985332
`	O	O:0.999932
	
The	O	O:0.999915
online	O	O:0.999789
docs	O	O:0.999942
show	O	O:0.999552
how	O	O:0.999985
to	O	O:0.999997
apply	O	O:0.993219
an	O	O:0.999921
operation	O	O:0.999644
element	O	O:0.999941
wise	O	O:0.999918
,	O	O:0.999997
as	O	O:0.999996
does	O	O:0.999756
the	O	O:0.999989
excellent	O	O:0.999635
book	O	O:0.999463
	
The	O	O:0.999951
typical	O	O:0.999090
trick	O	O:0.999789
is	O	O:0.999984
to	O	O:0.999986
write	O	O:0.999996
a	O	O:0.999984
general	O	O:0.999557
mathematical	O	O:0.999152
operation	O	O:0.999841
to	O	O:0.999993
apply	O	O:0.973405
to	O	O:0.999978
the	O	O:0.999999
whole	O	O:0.999928
column	O	O:0.999816
,	O	O:0.999995
but	O	O:0.999998
then	O	O:0.999727
use	O	O:0.999998
indicators	O	O:0.999750
to	O	O:0.999991
select	O	O:0.999996
rows	O	O:0.999850
for	O	O:0.999987
which	O	O:0.999960
we	O	O:0.999987
actually	O	O:0.999957
apply	O	B-API:0.651523
it	O	O:0.997852
:	O	O:0.999877
#CODE	O	O:0.999837
	
pandas	O	O:0.999694
apply	O	O:0.667738
with	O	O:0.999393
inputs	O	O:0.999579
from	O	O:0.999996
multiple	O	O:0.999990
rows	O	O:0.999464
	
I	O	O:0.999988
need	O	O:0.999974
to	O	O:0.999980
do	O	O:1.000000
an	O	O:0.999996
apply	O	O:0.640180
on	O	O:0.999967
a	O	O:0.999992
dataframe	B-API	O:0.999104
using	O	O:0.999928
inputs	O	O:0.999346
from	O	O:0.999957
multiple	O	O:0.999984
rows	O	O:0.999272
.	O	O:0.999884
	
As	O	O:0.999985
a	O	O:0.999994
simple	O	O:0.999542
example	O	O:0.999904
,	O	O:0.999997
I	O	O:0.999997
can	O	O:0.999986
do	O	O:0.999995
the	O	O:0.999999
following	O	O:0.999634
if	O	O:0.999980
all	O	O:0.999985
the	O	O:0.999980
inputs	O	O:0.999503
are	O	O:0.999995
from	O	O:0.999997
a	O	O:0.999999
single	O	O:0.998380
row	O	O:0.999340
:	O	O:0.999936
#CODE	O	O:0.999847
	
However	O	O:0.999793
,	O	O:0.999996
if	O	O:0.999995
I	O	O:0.999997
need	O	O:0.999945
'	O	O:0.999995
a	O	O:0.999994
'	O	O:0.999966
from	O	O:0.999977
the	O	O:0.999996
current	O	O:0.999650
row	O	O:0.999905
,	O	O:0.999976
and	O	O:0.999977
'	O	O:0.999985
b	O	O:0.999848
'	O	O:0.999993
from	O	O:0.999914
the	O	O:0.999995
previous	O	O:0.999729
row	O	O:0.999927
,	O	O:0.999956
is	O	O:0.999998
there	O	O:0.999967
a	O	O:0.999997
way	O	O:0.999942
to	O	O:0.999979
do	O	O:0.999999
that	O	O:0.999974
with	O	O:0.999972
apply	O	O:0.503531
?	O	O:0.999742
	
I	O	O:0.999974
could	O	O:0.999988
add	O	O:0.999987
a	O	O:0.999997
new	O	O:0.994189
'	O	O:0.999977
bshift	O	O:0.998039
'	O	O:0.999980
column	O	O:0.999791
and	O	O:0.999999
then	O	O:0.999987
just	O	O:0.999969
use	O	O:0.999993
df	O	O:0.993409
[[	O	O:0.999874
'	O	O:0.999993
a	O	O:0.999965
'	O	O:0.999911
,	O	O:0.999947
'	O	O:0.999977
bshift	O	O:0.997885
']]	O	O:0.999757
but	O	O:0.999744
it	O	O:0.999950
seems	O	O:0.999975
there	O	O:0.999977
must	O	O:0.999968
be	O	O:0.999999
a	O	O:0.999999
more	O	O:0.997933
direct	O	O:0.999303
way	O	O:0.999748
.	O	O:0.999716
	
Point	O	O:0.999841
taken	O	O:0.999584
about	O	O:0.999742
apply	O	B-API:0.741002
not	O	O:0.999315
being	O	O:0.999612
magically	O	O:0.999730
faster	O	O:0.998245
.	O	O:0.999840
	
Come	O	O:0.999586
to	O	O:0.999996
think	O	O:0.999995
of	O	O:0.999994
it	O	O:0.999985
I	O	O:0.999999
suppose	O	O:0.999981
doing	O	O:0.999841
multiple	O	O:0.999654
applies	O	O:0.998746
could	O	O:0.999944
well	O	O:0.999986
end	O	O:0.999980
up	O	O:0.999976
being	O	O:0.999406
slower	O	O:0.999812
than	O	O:0.999919
a	O	O:0.999998
single	O	O:0.999724
large	O	O:0.999509
for	O	O:0.999755
loop	O	O:0.997046
.	O	O:0.999603
	
The	O	O:0.999975
first	O	O:0.999732
answer	O	O:0.999898
to	O	O:0.999893
#URL	O	O:0.999990
made	O	O:0.999846
me	O	O:0.999989
want	O	O:0.999874
to	O	O:0.999956
try	O	O:0.999997
it	O	O:0.999959
.	O	O:0.999965
	
Added	O	O:0.999741
a	O	O:0.999954
little	O	O:0.990294
background	O	O:0.999681
.	O	O:0.999789
	
Considering	O	O:0.999958
your	O	O:0.999776
point	O	O:0.999903
about	O	O:0.999937
apply	O	B-API:0.786568
and	O	O:0.999794
speed	O	O:0.998751
,	O	O:0.999970
I	O	O:0.999986
think	O	O:0.999914
what	O	O:0.999656
I'll	O	O:0.999796
do	O	O:0.999883
is	O	O:0.999986
try	O	O:0.999871
to	O	O:0.999996
vectorize	B-API	O:0.992129
as	O	O:0.999994
much	O	O:0.999804
as	O	O:0.999996
I	O	O:0.999957
can	O	O:0.999963
,	O	O:0.999995
and	O	O:0.999994
see	O	O:0.999971
what	O	O:0.999651
I'm	O	O:0.999991
left	O	O:0.999584
with	O	O:0.999752
,	O	O:0.999976
and	O	O:0.999999
then	O	O:0.999978
come	O	O:0.999989
back	O	O:0.999907
with	O	O:0.999986
more	O	O:0.999928
questions	O	O:0.999976
as	O	O:0.999992
I	O	O:0.999995
have	O	O:0.999997
them	O	O:0.998006
.	O	O:0.999955
	
If	O	O:0.999933
I	O	O:0.999990
tried	O	O:0.999946
to	O	O:0.999967
post	O	O:0.999959
all	O	O:0.999990
my	O	O:0.999995
code	O	O:0.999791
as	O	O:0.999996
it	O	O:0.999749
is	O	O:0.999946
it'd	O	O:0.999808
just	O	O:0.999840
be	O	O:0.999991
overload	O	O:0.999159
.	O	O:0.999590
	
Appreciate	O	O:0.999944
your	O	O:0.999569
advice	O	O:0.999358
.	O	O:0.999901
	
This	O	O:0.999896
should	O	O:0.999979
directly	O	O:0.999918
answer	O	O:0.999994
your	O	O:0.999285
question	O	O:0.998903
and	O	O:0.999995
let	O	O:0.999761
you	O	O:0.999842
use	O	O:0.999952
apply	O	B-API:0.814425
,	O	O:0.999737
although	O	O:0.998982
I'm	O	O:0.999914
not	O	O:0.999991
sure	O	O:0.999933
it's	O	O:0.999946
ultimately	O	O:0.999980
any	O	O:0.999977
better	O	O:0.999833
than	O	O:0.999879
a	O	O:0.999996
two-line	O	O:0.998721
solution	O	O:0.999331
.	O	O:0.999894
	
It	O	O:0.999971
does	O	O:0.999769
avoid	O	O:0.999927
creating	O	O:0.999980
extra	O	O:0.999707
variables	O	O:0.999696
at	O	O:0.999985
least	O	O:0.999600
.	O	O:0.999933
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
I	O	O:0.999960
timed	O	O:0.999983
your	O	O:0.997832
first	O	O:0.999529
method	O	O:0.999966
vs	O	O:0.999986
adding	O	O:0.999918
a	O	O:0.999957
shifted	O	O:0.997518
column	O	O:0.999674
and	O	O:0.999998
then	O	O:0.999933
deleting	O	O:0.999927
it	O	O:0.999983
after	O	O:0.999960
I	O	O:0.999974
finished	O	O:0.999871
the	O	O:0.999868
apply	O	B-API:0.891663
,	O	O:0.999706
and	O	O:0.999969
interestingly	O	O:0.999839
they	O	O:0.999662
were	O	O:0.999921
virtually	O	O:0.999333
identical	O	O:0.995990
(	O	O:0.999511
and	O	O:0.999984
not	O	O:0.999985
very	O	O:0.999877
fast	O	O:0.999838
)	O	O:0.999983
for	O	O:0.999988
any	O	O:0.999949
df	O	O:0.999809
size	O	O:0.999592
I	O	O:0.999979
tried	O	O:0.999967
,	O	O:0.999990
so	O	O:0.999986
I	O	O:0.999995
guess	O	O:0.999971
the	O	O:0.999977
time	O	O:0.999222
is	O	O:0.999996
all	O	O:0.999988
spent	O	O:0.999637
in	O	O:0.999977
the	O	O:0.999991
apply	O	B-API:0.551567
itself	O	O:0.994423
.	O	O:0.999759
	
Indeed	O	O:0.999376
the	O	O:0.999546
2nd	O	O:0.998395
method	O	O:0.998628
(	O	O:0.999988
vectorized	O	O:0.999858
)	O	O:0.999808
is	O	O:0.999976
much	O	O:0.998440
faster	O	O:0.998765
and	O	O:0.999946
I'll	O	O:0.999295
try	O	O:0.999879
to	O	O:0.999992
do	O	O:0.999999
as	O	O:0.999999
much	O	O:0.999391
of	O	O:0.999998
that	O	O:0.999895
as	O	O:0.999998
possible	O	O:0.999561
but	O	O:0.999991
unfortunately	O	O:0.999795
I	O	O:0.999988
don't	O	O:0.999955
think	O	O:0.999178
it's	O	O:0.999975
possible	O	O:0.999896
to	O	O:0.999994
vectorize	B-API	O:0.995130
all	O	O:0.999948
of	O	O:0.999976
it	O	O:0.999899
.	O	O:0.999969
	
@USER	O	O:0.997283
It's	O	O:0.999789
not	O	O:0.999990
just	O	O:0.999979
the	O	O:0.999997
apply	O	B-API:0.875235
,	O	O:0.999874
it's	O	O:0.999872
also	O	O:0.999953
somewhat	O	O:0.999984
expensive	O	O:0.999923
to	O	O:0.999991
concatenate	O	O:0.958965
/	O	O:0.999996
merge	O	O:0.698592
or	O	O:0.999995
create	O	O:0.999905
a	O	O:0.999998
new	O	O:0.999767
variable	O	O:0.999692
.	O	O:0.999799
	
In	O	O:0.999961
my	O	O:0.999994
example	O	O:0.999982
data	O	O:0.999984
,	O	O:0.999999
about	O	O:0.999971
half	O	O:0.999677
the	O	O:0.999981
time	O	O:0.999977
cost	O	O:0.997688
is	O	O:0.999998
due	O	O:0.999816
to	O	O:0.999955
concat	O	B-API:0.698937
and	O	O:0.999990
half	O	O:0.999894
due	O	O:0.999837
to	O	O:0.999983
apply	O	O:0.718601
.	O	O:0.999315
	
Just	O	O:0.999632
replace	O	O:0.997908
the	O	O:0.999969
apply	O	B-API:0.971689
(	O	O:0.999974
mean	O	O:0.999404
)	O	O:0.999995
with	O	O:0.999517
mean()	B-API	B-API:0.760755
and	O	O:0.999981
you'll	O	O:0.999604
see	O	O:0.999674
it's	O	O:0.999930
still	O	O:0.999608
slower	O	O:0.999534
.	O	O:0.999813
	
Apply	O	O:0.997798
function	O	O:0.999670
to	O	O:0.999976
pandas	O	O:0.999996
dataframe	B-API	O:0.999749
that	O	O:0.999838
returns	O	O:0.999998
multiple	O	O:0.999984
rows	O	O:0.998645
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999940
to	O	O:0.999999
apply	O	O:0.993433
a	O	O:0.999871
function	O	O:0.999534
to	O	O:0.999997
a	O	O:1.000000
pandas	O	O:0.999478
DataFrame	B-API	O:0.998993
that	O	O:0.999925
splits	O	O:0.999996
some	O	O:0.999982
of	O	O:0.999997
the	O	O:0.999997
rows	O	O:0.999856
into	O	O:0.999387
two	O	O:0.999975
.	O	O:0.999865
	
So	O	O:0.999922
for	O	O:0.999986
example	O	O:0.999819
,	O	O:0.999977
I	O	O:0.999995
may	O	O:0.999994
have	O	O:0.999986
this	O	O:0.999992
as	O	O:0.999995
input	O	O:0.998122
:	O	O:0.999952
#CODE	O	O:0.999679
	
Then	O	O:0.999411
I	O	O:0.999997
would	O	O:0.999998
simply	O	O:0.999936
apply	O	O:0.966613
the	O	O:0.999925
extract	O	O:0.950952
function	O	O:0.999970
with	O	O:0.999985
a	O	O:0.999976
regex	O	O:0.992709
:	O	O:0.999948
#CODE	O	O:0.999863
	
That	O	O:0.999169
is	O	O:0.999986
,	O	O:0.999991
the	O	O:0.999991
first	O	O:0.999861
two	O	O:0.999993
lines	O	O:0.999945
together	O	O:0.999874
constitute	O	O:0.999818
the	O	O:0.999951
headers	O	O:0.999265
.	O	O:0.999805
	
Is	O	O:0.999974
there	O	O:0.999965
any	O	O:0.999983
way	O	O:0.999958
to	O	O:0.999978
apply	O	O:0.961166
`	O	O:0.999857
read_csv()	B-API	B-API:0.999908
`	O	O:0.999987
to	O	O:0.999992
this	O	O:0.999998
without	O	O:0.999936
any	O	O:0.999949
major	O	O:0.999030
hassle	O	O:0.999316
?	O	O:0.999885
	
I	O	O:0.999933
would	O	O:0.999997
like	O	O:0.999967
to	O	O:0.999997
map	O	O:0.974273
the	O	O:0.999996
values	O	O:0.999329
in	O	O:0.999983
the	O	O:0.999992
Probability	O	O:0.999965
column	O	O:0.999889
to	O	O:0.999964
'	O	O:0.999999
s	O	O:0.999851
'	O	O:0.999980
for	O	O:0.999948
'	O	O:0.999965
success	O	O:0.999374
'	O	O:0.999968
for	O	O:0.999990
the	O	O:0.999986
first	O	O:0.999212
10	O	O:0.999921
values	O	O:0.999030
,	O	O:0.999973
and	O	O:0.999991
'	O	O:0.999980
f	O	O:0.999785
'	O	O:0.999972
for	O	O:0.999824
'	O	O:0.999977
fail	O	O:0.998844
'	O	O:0.999975
for	O	O:0.999992
the	O	O:0.999981
rest	O	O:0.997051
.	O	O:0.999872
	
To	O	O:0.999922
do	O	O:0.999992
this	O	O:0.999977
,	O	O:0.999996
I	O	O:0.999999
create	O	O:0.999966
a	O	O:0.999996
dummy	O	O:0.999663
column	O	O:0.999515
called	O	O:0.999576
Index	O	O:0.998686
,	O	O:0.999982
apply	O	O:0.597132
a	O	O:0.999890
transformation	O	O:0.996928
,	O	O:0.999994
and	O	O:0.999999
then	O	O:0.999935
drop	O	O:0.998901
the	O	O:0.999998
dummy	O	O:0.999465
column	O	O:0.999545
.	O	O:0.999883
	
#CODE	O	O:0.998453
	
If	O	O:0.999967
you	O	O:0.999990
want	O	O:0.999987
to	O	O:0.999989
use	O	O:0.999997
`	O	O:0.999950
apply	O	B-API:0.991288
`	O	O:0.999979
it	O	O:0.999782
can	O	O:0.999985
be	O	O:1.000000
done	O	O:0.999864
,	O	O:0.999970
but	O	O:0.999981
you	O	O:0.999983
will	O	O:0.999987
loose	O	O:0.999959
the	O	O:0.999994
column	O	O:0.999468
names	O	O:0.999002
:	O	O:0.999978
#CODE	O	O:0.999922
	
See	O	O:0.999912
edit	O	O:0.999254
,	O	O:0.999997
if	O	O:0.999994
you	O	O:0.999994
want	O	O:0.999984
to	O	O:0.999991
use	O	O:0.999998
`	O	O:0.999946
apply	O	B-API:0.989679
`	O	O:0.999922
,	O	O:0.999922
it	O	O:0.999994
can	O	O:0.999960
be	O	O:0.999999
done	O	O:0.999938
but	O	O:0.999958
you	O	O:0.999987
will	O	O:0.999980
loose	O	O:0.999940
the	O	O:0.999994
column	O	O:0.999711
names	O	O:0.999694
.	O	O:0.999932
	
Basically	O	O:0.999835
the	O	O:0.999964
`	O	O:0.999979
apply	O	B-API:0.975539
`	O	O:0.999733
function	O	O:0.998219
should	O	O:0.999957
return	O	O:0.999918
a	O	O:0.999937
`	O	O:0.999916
Series	O	O:0.997933
`	O	O:0.999998
of	O	O:0.999980
length	O	O:0.999900
of	O	O:0.999964
3	O	O:0.999878
,	O	O:0.999996
compare	O	O:0.999699
the	O	O:0.999989
two	O	O:0.999976
new	O	O:0.999925
edits	O	O:0.999355
.	O	O:0.999866
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
Probably	O	O:0.999804
the	O	O:0.999991
most	O	O:0.999780
readable	O	O:0.999803
way	O	O:0.999970
to	O	O:0.999986
do	O	O:0.999998
it	O	O:0.999987
,	O	O:0.999996
although	O	O:0.999976
I	O	O:0.999991
generally	O	O:0.999950
try	O	O:0.999886
to	O	O:0.999985
avoid	O	O:0.999986
apply	O	B-API:0.558245
/	O	O:0.999834
lambda	O	O:0.998881
if	O	O:0.999989
possible	O	O:0.999638
for	O	O:0.999991
speed	O	O:0.999209
reasons	O	O:0.999462
if	O	O:0.999989
there	O	O:0.999849
is	O	O:0.999996
a	O	O:0.999990
good	O	O:0.997629
alternative	O	O:0.999414
(	O	O:0.999981
though	O	O:0.999931
speed	O	O:0.993094
is	O	O:0.999987
not	O	O:0.999989
a	O	O:0.999996
concern	O	O:0.999305
here	O	O:0.999679
)	O	O:0.999970
.	O	O:0.999812
	
I'd	O	O:0.999936
apply	O	B-API:0.574806
`	O	O:0.999771
value_counts	B-API	B-API:0.999862
`	O	O:0.999997
columnwise	O	O:0.998386
rather	O	O:0.999986
than	O	O:0.999938
doing	O	O:0.999681
`	O	O:0.999965
groupby	B-API	B-API:0.999949
`	O	O:0.999884
:	O	O:0.999327
#CODE	O	O:0.999908
	
Thanks	O	O:0.999815
a	O	O:0.999989
lot	O	O:0.999628
Jeff	O	O:0.999857
,	O	O:0.999992
I	O	O:0.999989
updated	O	O:0.999918
the	O	O:0.999845
OP	O	O:0.999929
with	O	O:0.999840
an	O	O:0.999971
example	O	O:0.999824
.	O	O:0.999862
	
I	O	O:0.999984
basically	O	O:0.999995
want	O	O:0.999920
to	O	O:0.999983
apply	O	O:0.990125
the	O	O:0.999866
solution	O	O:0.999710
that	O	O:0.999972
you	O	O:0.999996
described	O	O:0.999978
to	O	O:0.999987
**	O	O:1.000000
each	O	O:0.999905
item	O	O:0.999856
**	O	O:0.999990
in	O	O:0.999989
the	O	O:0.999966
series	O	O:0.999124
(	O	O:0.999990
i.e.	O	O:0.999953
get	O	O:0.999963
the	O	O:0.999987
offset	O	O:0.999944
with	O	O:0.999937
respect	O	O:0.999868
to	O	O:0.999987
**	O	O:1.000000
each	O	O:0.999880
timestamp**	O	O:0.999095
'	O	O:0.999994
s	O	O:0.999973
hour	O	O:0.998391
in	O	O:0.999965
`	O	O:0.999993
ms	O	O:0.999722
`)	O	O:0.999972
	
See	O	O:0.999726
the	O	O:0.999962
docs	O	O:0.999782
on	O	O:0.999974
apply	O	B-API:0.578548
.	O	O:0.999688
	
Pandas	O	O:0.999697
will	O	O:0.999776
call	O	O:0.999520
the	O	O:0.999982
function	O	O:0.999853
twice	O	O:0.999964
on	O	O:0.999998
the	O	O:0.999996
first	O	O:0.999854
group	O	O:0.991158
(	O	O:0.999992
to	O	O:0.999996
determine	O	O:0.999976
between	O	O:0.999905
a	O	O:0.999995
fast	O	O:0.997792
/	O	O:0.999990
slow	O	O:0.999369
code	O	O:0.999903
path	O	O:0.999935
)	O	O:0.999996
,	O	O:0.999995
so	O	O:0.999991
the	O	O:0.999994
side	O	O:0.999982
effects	O	O:0.999914
of	O	O:0.999996
the	O	O:0.999757
function	O	O:0.999543
(	O	O:0.999969
IO	O	O:0.999973
)	O	O:0.999987
will	O	O:0.999890
happen	O	O:0.999986
twice	O	O:0.999985
for	O	O:0.999996
the	O	O:0.999975
first	O	O:0.999276
group	O	O:0.995362
.	O	O:0.999854
	
Yeah	O	O:0.999709
,	O	O:0.999990
or	O	O:0.999994
you	O	O:0.999979
could	O	O:0.999996
even	O	O:0.999997
still	O	O:0.999988
use	O	O:0.999994
apply	O	B-API:0.818474
on	O	O:0.999752
the	O	O:0.999981
main	O	O:0.999788
df	O	O:0.999663
,	O	O:0.999989
but	O	O:0.999996
then	O	O:0.999917
change	O	O:0.999976
item_grouper	O	O:0.999525
to	O	O:0.999925
iterate	O	O:0.999877
.	O	O:0.999907
	
I	O	O:0.999952
didn't	O	O:0.999973
step	O	O:0.999885
through	O	O:0.999913
all	O	O:0.999981
the	O	O:0.999984
code	O	O:0.997709
,	O	O:0.999990
but	O	O:0.999991
if	O	O:0.999995
possible	O	O:0.999900
,	O	O:0.999999
your	O	O:0.999904
life	O	O:0.999434
might	O	O:0.999989
be	O	O:0.999997
easier	O	O:0.999974
if	O	O:0.999978
you	O	O:0.999977
avoid	O	O:0.999941
any	O	O:0.999988
IO	O	O:0.999821
in	O	O:0.999960
the	O	O:0.999934
groupby	B-API	B-API:0.991332
and	O	O:0.999933
use	O	O:0.999782
standard	O	O:0.998157
pandas	O	O:0.998523
IO	O	O:0.999653
(	O	O:0.999944
i.e.	O	O:0.999652
`	O	O:0.999912
df.to_csv	B-API	B-API:0.998422
(	O	O:0.999973
sep=	O	O:0.999456
'	O	O:0.999936
\t	O	O:0.999869
')`	O	O:0.999972
to	O	O:0.999969
write	O	O:0.999997
your	O	O:0.999886
tab	O	O:0.999975
separated	O	O:0.999961
file	O	O:0.999692
.	O	O:0.999863
	
So	O	O:0.999962
I	O	O:0.999998
have	O	O:0.999998
a	O	O:0.999968
dataset	O	O:0.999971
consisting	O	O:0.999676
of	O	O:0.999992
several	O	O:0.999913
million	O	O:0.999995
rows	O	O:0.999803
of	O	O:0.999997
trading	O	O:0.999928
data	O	O:0.999991
that	O	O:0.999936
I	O	O:0.999997
am	O	O:0.999999
trying	O	O:0.999662
to	O	O:0.999996
apply	O	O:0.990071
a	O	O:0.999971
filter	O	O:0.987343
to	O	O:0.999998
as	O	O:0.999999
in	O	O:0.999978
the	O	O:0.999987
following	O	O:0.999767
code	O	O:0.998830
.	O	O:0.999922
	
The	O	O:0.999597
function	O	O:0.999684
`	O	O:0.999990
trade_quant_filter	O	O:0.928854
`	O	O:0.999992
looks	O	O:0.999400
for	O	O:0.999989
outliers	O	O:0.998390
and	O	O:0.999983
then	O	O:0.999951
adds	O	O:0.999686
the	O	O:0.999996
index	O	O:0.999916
of	O	O:0.999992
all	O	O:0.999993
the	O	O:0.999998
outliers	O	O:0.999553
to	O	O:0.999991
a	O	O:1.000000
list	O	O:0.998573
to	O	O:0.999997
deal	O	O:0.999996
with	O	O:0.999924
later	O	O:0.999422
.	O	O:0.999944
	
#CODE	O	O:0.998453
	
I'm	O	O:0.999940
really	O	O:0.999926
struggling	O	O:0.999632
with	O	O:0.999831
the	O	O:0.999971
Pandas	O	O:0.999835
`	O	O:0.999963
rolling_apply	B-API	B-API:0.999792
function	O	O:0.999740
`	O	O:0.999910
.	O	O:0.999630
	
I'm	O	O:0.999933
trying	O	O:0.999903
to	O	O:0.999995
apply	O	O:0.990673
a	O	O:0.999970
filter	O	O:0.965513
to	O	O:0.999996
some	O	O:0.999997
time	O	O:0.999992
series	O	O:0.999995
data	O	O:0.999996
like	O	O:0.999942
below	O	O:0.999839
and	O	O:0.999998
make	O	O:0.999967
a	O	O:0.999986
new	O	O:0.999669
series	O	O:0.999910
for	O	O:0.999957
outliers	O	O:0.998195
.	O	O:0.999559
	
I	O	O:0.999982
want	O	O:0.999977
the	O	O:0.999949
value	O	O:0.999938
to	O	O:0.999981
return	O	O:0.999842
`	O	O:0.999988
True	O	O:0.998677
`	O	O:0.999999
when	O	O:0.999536
the	O	O:0.999998
value	O	O:0.999863
is	O	O:0.999983
an	O	O:0.999969
outlier	O	O:0.999180
.	O	O:0.999581
	
#CODE	O	O:0.998453
	
`	O	O:0.999977
group_user=	O	O:0.955623
store.select	O	O:0.886252
(	O	O:0.999840
'	O	O:0.999979
clean_input	O	O:0.995880
'	O	O:0.999987
,	O	O:0.999998
where	O	O:0.999807
=[	O	O:0.999854
'	O	O:0.999953
user_id	O	O:0.996109
==	O	O:0.999843
%s	O	O:0.999114
'	O	O:0.999976
%user	O	O:0.999735
])`	O	O:0.999533
is	O	O:0.999939
too	O	O:0.999942
heavy	O	O:0.999743
in	O	O:0.999958
time	O	O:0.999900
complexity	O	O:0.999982
since	O	O:0.999971
I	O	O:0.999997
have	O	O:0.999998
really	O	O:0.999899
a	O	O:0.999999
lot	O	O:0.999776
of	O	O:0.999984
groups	O	O:0.997146
,	O	O:0.999993
and	O	O:0.999995
I	O	O:0.999986
am	O	O:0.999993
sure	O	O:0.999740
there	O	O:0.999886
is	O	O:0.999996
a	O	O:0.999995
lot	O	O:0.999912
of	O	O:0.999985
redundant	O	O:0.999530
sorting	O	O:0.999555
in	O	O:0.999975
the	O	O:0.999988
routine	O	O:0.999945
of	O	O:0.999958
`	O	O:0.999980
store.select	O	O:0.843489
`	O	O:0.999995
if	O	O:0.999911
I	O	O:0.999996
apply	O	O:0.820898
it	O	O:0.997798
10	O	O:0.999791
millions	O	O:0.999872
times	O	O:0.998941
.	O	O:0.999931
	
But	O	O:0.999933
you	O	O:0.999975
have	O	O:0.999961
not	O	O:0.999991
introduced	O	O:0.999959
the	O	O:0.999985
variable	O	O:0.999843
sub_group_chunk	O	O:0.994853
,	O	O:0.999981
and	O	O:0.999986
If	O	O:0.999975
i	O	O:0.999731
try	O	O:0.999974
chunk.groupby	O	O:0.982259
(	O	O:0.999995
sub_group_hash	O	O:0.998306
)	O	O:0.999992
I	O	O:0.999994
get	O	O:0.999996
an	O	O:0.999994
error	O	O:0.999955
of	O	O:0.999983
the	O	O:0.999860
form	O	O:0.999651
:	O	O:0.999988
long	O	O:0.999867
object	O	O:0.999977
have	O	O:0.999917
no	O	O:0.999984
attribute	O	O:0.999985
_____get.item____	O	O:0.998370
because	O	O:0.999696
It	O	O:0.999994
tries	O	O:0.999930
to	O	O:0.999994
apply	O	O:0.951622
the	O	O:0.999748
function	O	O:0.999586
to	O	O:0.999951
the	O	O:0.999998
index	O	O:0.999683
.	O	O:0.999898
	
In	O	O:0.999970
my	O	O:0.999984
experience	O	O:0.999670
,	O	O:0.999999
this	O	O:0.999949
approach	O	O:0.999970
seems	O	O:0.999863
slower	O	O:0.999900
than	O	O:0.999967
using	O	O:0.999972
an	O	O:0.999936
approach	O	O:0.999922
like	O	O:0.999511
`	O	O:0.999988
apply	O	B-API:0.939787
`	O	O:0.999962
or	O	O:0.999495
`	O	O:0.999977
map	O	B-API:0.988218
`	O	O:0.999964
,	O	O:0.999958
but	O	O:0.999987
as	O	O:0.999993
always	O	O:0.999795
,	O	O:0.999997
it's	O	O:0.999767
up	O	O:0.999958
to	O	O:0.999996
you	O	O:0.999999
to	O	O:0.999997
decide	O	O:0.999998
how	O	O:0.999990
to	O	O:0.999997
make	O	O:0.999997
the	O	O:0.999990
performance	O	O:0.999494
/	O	O:0.999996
ease	O	O:0.999902
of	O	O:0.999987
coding	O	O:0.998894
tradeoff	O	O:0.999762
.	O	O:0.999755
	
You	O	O:0.999898
could	O	O:0.999946
apply	O	O:0.889817
`	O	O:0.999975
f	O	O:0.993497
`	O	O:0.999997
first	O	O:0.998682
,	O	O:0.999992
and	O	O:0.999996
pass	O	O:0.998454
the	O	O:0.999949
return	O	O:0.999605
value	O	O:0.999845
to	O	O:0.999953
`	O	O:0.999999
groupby	B-API	B-API:0.999756
`	O	O:0.999922
:	O	O:0.999569
#CODE	O	O:0.999908
	
pandas	O	O:0.999669
apply	O	B-API:0.516617
function	O	O:0.999280
to	O	O:0.999992
corresponding	O	O:0.999998
cells	O	O:0.999780
of	O	O:0.999995
multiple	O	O:0.999799
frames	O	O:0.999482
	
I'm	O	O:0.999933
trying	O	O:0.999904
to	O	O:0.999995
apply	O	O:0.987692
a	O	O:0.999872
function	O	O:0.999211
to	O	O:0.999999
corresponding	O	O:0.999998
cells	O	O:0.999820
of	O	O:0.999987
two	O	O:0.999984
identically	O	O:0.999972
sized	O	O:0.999930
dataFrames	O	O:0.999836
to	O	O:0.999995
create	O	O:0.999998
a	O	O:0.999997
new	O	O:0.999866
frame	O	O:0.999975
.	O	O:0.999850
	
Did	O	O:0.999897
you	O	O:0.999990
test	O	O:0.999780
if	O	O:0.999997
looping	O	O:0.998459
is	O	O:0.999965
actually	O	O:0.999827
too	O	O:0.999943
slow	O	O:0.999249
?	O	O:0.999901
	
(	O	O:0.999890
it	O	O:0.999991
will	O	O:0.999956
depend	O	O:0.999948
on	O	O:0.999995
the	O	O:0.999994
timing	O	O:0.999928
of	O	O:0.999990
the	O	O:0.999988
applied	O	O:0.999756
function	O	O:0.999892
if	O	O:0.999985
the	O	O:0.999991
looping	O	O:0.999053
will	O	O:0.999624
be	O	O:0.999996
determinant	O	O:0.999966
for	O	O:0.999956
speed	O	O:0.998565
)	O	O:0.999968
And	O	O:0.999942
can	O	O:0.999985
the	O	O:0.999996
function	O	O:0.999956
you	O	O:0.999990
want	O	O:0.999990
to	O	O:0.999997
apply	O	O:0.978234
be	O	O:0.999921
vectorized	O	O:0.998859
?	O	O:0.999813
	
_	O	O:0.997753
"	O	O:0.999967
What	O	O:0.999877
fast	O	O:0.999801
methods	O	O:0.999922
could	O	O:0.999925
I	O	O:0.999999
use	O	O:0.999981
to	O	O:0.999878
load	O	O:0.999573
/	O	O:0.999993
save	O	O:0.999780
the	O	O:0.999998
data	O	O:0.999984
from	O	O:0.999970
disk	O	O:0.999666
?	O	O:0.999985
	
"	O	O:0.999930
_	O	O:0.999471
I	O	O:0.999982
don't	O	O:0.999983
know	O	O:0.998896
if	O	O:0.999999
this	O	O:0.999930
can	O	O:0.999991
apply	O	O:0.972065
to	O	O:0.999999
your	O	O:0.999968
use	O	O:0.999945
case	O	O:0.999478
,	O	O:0.999988
but	O	O:0.999992
have	O	O:0.999902
you	O	O:0.999978
investigated	O	O:0.999798
[	O	O:0.999995
PyTables	O	O:0.999514
]	O	O:0.999508
(	O	O:0.999921
#URL	O	O:0.999526
)	O	O:0.999959
?	O	O:0.999890
	
Its	O	O:0.999901
blazing	O	O:0.999893
fast	O	O:0.999081
at	O	O:0.999995
loading	O	O:0.999806
data	O	O:0.999804
and	O	O:0.999996
interfaces	O	O:0.999907
nicely	O	O:0.999655
with	O	O:0.999815
`	O	O:0.999988
numpy	O	O:0.997039
`	O	O:0.999982
.	O	O:0.999466
	
Don't	O	O:0.999907
know	O	O:0.999902
about	O	O:0.999766
`	O	O:0.999939
Panda	O	O:0.985795
`	O	O:0.999983
though	O	O:0.998072
.	O	O:0.999969
	
You're	O	O:0.999860
looking	O	O:0.999807
for	O	O:0.999992
a	O	O:0.999946
groupby	B-API	B-API:0.997482
with	O	O:0.999917
an	O	O:0.999879
apply	O	B-API:0.621486
.	O	O:0.998937
	
#CODE	O	O:0.998453
	
Hi	O	O:0.999918
zerovector	O	O:0.999832
,	O	O:0.999991
I	O	O:0.999986
am	O	O:0.999997
getting	O	O:0.999541
an	O	O:0.999988
error	O	O:0.999968
when	O	O:0.999636
I	O	O:0.999995
try	O	O:0.999998
to	O	O:0.999949
apply	O	O:0.984258
that	O	O:0.999180
idea	O	O:0.999552
:	O	O:0.999990
def	O	O:0.999689
func	O	O:0.968450
(	O	O:0.999925
x	O	O:0.999122
):	O	O:0.999887
	
Thank	O	O:0.999162
you	O	O:0.999965
zerovector	O	O:0.999791
--	O	O:0.999999
your	O	O:0.999945
help	O	O:0.999930
put	O	O:0.999974
me	O	O:0.999982
on	O	O:0.999992
the	O	O:0.999988
right	O	O:0.999925
path	O	O:0.999942
to	O	O:0.999996
solve	O	O:0.999996
the	O	O:0.999981
problem	O	O:0.998608
!	O	O:0.999912
	
An	O	O:0.999929
apply	O	B-API:0.816498
function	O	O:0.998091
was	O	O:0.999895
what	O	O:0.999857
I	O	O:0.999971
was	O	O:0.999990
looking	O	O:0.998636
for	O	O:0.999860
!	O	O:0.999530
	
I	O	O:0.999956
am	O	O:0.999996
wondering	O	O:0.998972
if	O	O:0.999993
there	O	O:0.999831
is	O	O:0.999998
a	O	O:0.999989
way	O	O:0.999901
to	O	O:0.999989
do	O	O:0.999999
a	O	O:0.999995
pandas	O	O:0.999710
dataframe	B-API	O:0.999765
apply	O	B-API:0.684884
function	O	O:0.998812
in	O	O:0.999889
parallel	O	O:0.998437
.	O	O:0.999873
	
I	O	O:0.999963
have	O	O:0.999866
looked	O	O:0.997235
around	O	O:0.999367
and	O	O:0.999901
haven't	O	O:0.998972
found	O	O:0.999435
anything	O	O:0.999707
.	O	O:0.999583
	
At	O	O:0.999985
least	O	O:0.999410
in	O	O:0.999996
theory	O	O:0.999580
I	O	O:0.999993
think	O	O:0.999689
it	O	O:0.999887
should	O	O:0.999950
be	O	O:0.999996
fairly	O	O:0.999968
simple	O	O:0.999391
to	O	O:0.999840
implement	O	O:0.999709
but	O	O:0.999906
haven't	O	O:0.999754
seen	O	O:0.999766
anything	O	O:0.999902
.	O	O:0.999770
	
This	O	O:0.998880
is	O	O:0.999991
practically	O	O:0.999811
the	O	O:0.999981
textbook	O	O:0.999842
definition	O	O:0.999920
of	O	O:0.999998
parallel	O	O:0.998528
after	O	O:0.999942
all	O	O:0.999778
..	O	O:0.999416
	
Has	O	O:0.999767
anyone	O	O:0.999882
else	O	O:0.999453
tried	O	O:0.999971
this	O	O:0.999932
or	O	O:0.999999
know	O	O:0.999950
of	O	O:0.999999
a	O	O:0.999951
way	O	O:0.999788
?	O	O:0.999908
	
If	O	O:0.999965
no	O	O:0.999971
one	O	O:0.999971
has	O	O:0.999984
any	O	O:0.999991
ideas	O	O:0.999587
I	O	O:0.999993
think	O	O:0.999888
I	O	O:0.999898
might	O	O:0.999980
just	O	O:0.999381
try	O	O:0.999991
writing	O	O:0.999464
it	O	O:0.999934
myself	O	O:0.999172
.	O	O:0.999906
	
That	O	O:0.999198
is	O	O:0.999996
a	O	O:0.999987
good	O	O:0.998325
idea	O	O:0.999435
.	O	O:0.999831
	
I	O	O:0.999839
was	O	O:0.999989
planning	O	O:0.998807
on	O	O:0.999988
doing	O	O:0.999957
something	O	O:0.999888
much	O	O:0.999028
more	O	O:0.999753
dynamic	O	O:0.995130
but	O	O:0.999910
much	O	O:0.999697
more	O	O:0.999740
complicated	O	O:0.998665
.	O	O:0.999909
	
I	O	O:0.999979
think	O	O:0.999993
your	O	O:0.999549
way	O	O:0.998983
is	O	O:0.999989
much	O	O:0.998047
better	O	O:0.999623
and	O	O:0.999973
simpler	O	O:0.999100
though	O	O:0.998749
.	O	O:0.999919
	
I	O	O:0.999927
will	O	O:0.999955
give	O	O:0.999770
it	O	O:0.999999
a	O	O:0.999995
try	O	O:0.999888
with	O	O:0.999960
the	O	O:0.999985
apply	O	B-API:0.930764
function	O	O:0.998229
and	O	O:0.999982
report	O	O:0.999842
back	O	O:0.993554
.	O	O:0.999850
	
(	O	O:0.999867
Note	O	O:0.999979
that	O	O:0.999973
there	O	O:0.999938
is	O	O:0.999995
no	O	O:0.999930
.fit	O	O:0.889899
function	O	O:0.999909
for	O	O:0.999945
OLS	O	O:0.999492
in	O	O:0.999955
Pandas	O	O:0.999654
)	O	O:0.999970
Could	O	O:0.999630
somebody	O	O:0.999878
shed	O	O:0.999862
some	O	O:0.999890
light	O	O:0.999864
on	O	O:0.999990
how	O	O:0.999969
I	O	O:0.999997
might	O	O:0.999993
get	O	O:0.999893
future	O	O:0.999990
predictions	O	O:0.999768
from	O	O:0.999966
my	O	O:0.999955
OLS	O	O:0.999976
model	O	O:0.999730
in	O	O:0.999951
either	O	O:0.999989
pandas	O	O:0.999846
or	O	O:0.999997
statsmodel-I	O	O:0.998405
realize	O	O:0.999610
I	O	O:0.999966
must	O	O:0.999941
not	O	O:0.999981
be	O	O:0.999999
using	O	O:0.999946
.predict	O	O:0.655735
properly	O	O:0.996946
and	O	O:0.999974
I've	O	O:0.999923
read	O	O:0.994664
the	O	O:0.999985
multiple	O	O:0.999866
other	O	O:0.999934
problems	O	O:0.999903
people	O	O:0.999835
have	O	O:0.999316
had	O	O:0.999782
but	O	O:0.999996
they	O	O:0.999791
do	O	O:0.999971
not	O	O:0.999992
seem	O	O:0.999923
to	O	O:0.999997
apply	O	O:0.976375
to	O	O:0.999964
my	O	O:0.999995
case	O	O:0.999825
.	O	O:0.999968
	
You	O	O:0.999932
can	O	O:0.999897
use	O	O:0.999996
numpy	O	O:0.999747
where	O	O:0.999552
and	O	O:0.999990
apply	O	O:0.690821
to	O	O:0.999531
do	O	O:0.999992
it	O	O:0.999987
for	O	O:0.999994
all	O	O:0.999995
columns	O	O:0.999827
in	O	O:0.999985
a	O	O:0.999983
DataFrame	B-API	O:0.871634
:	O	O:0.999946
#CODE	O	O:0.999851
	
I	O	O:0.999991
start	O	O:0.999968
by	O	O:0.999956
chunking	O	O:0.999645
the	O	O:0.999788
CSV	O	O:0.999825
file	O	O:0.999537
,	O	O:0.999985
and	O	O:0.999998
apply	O	O:0.846618
a	O	O:0.999503
`	O	O:0.999459
groupby	B-API	B-API:0.999666
`	O	O:0.999942
(	O	O:0.999816
on	O	O:0.999994
the	O	O:0.999988
two	O	O:0.999997
last	O	O:0.999965
figures	O	O:0.999922
of	O	O:0.999989
the	O	O:0.999961
`	O	O:0.999990
user_id	O	O:0.993428
`)	O	O:0.999991
on	O	O:0.999973
the	O	O:0.999994
chunks	O	O:0.999956
files	O	O:0.999949
so	O	O:0.999996
I	O	O:0.999998
can	O	O:0.999998
store	O	O:0.999926
a	O	O:0.999999
total	O	O:0.999467
of	O	O:0.999989
100	O	O:0.999410
files	O	O:0.999880
containing	O	O:0.999869
groups	O	O:0.999903
of	O	O:0.999978
users	O	O:0.999205
,	O	O:0.999979
and	O	O:0.999993
storing	O	O:0.999985
them	O	O:0.998108
in	O	O:0.999997
a	O	O:0.999994
HDF5	O	O:0.999286
store	O	O:0.995037
.	O	O:0.999810
	
The	O	O:0.999972
difference	O	O:0.999969
lies	O	O:0.998897
in	O	O:0.999994
the	O	O:0.999976
fact	O	O:0.999910
that	O	O:0.999721
`	O	O:0.999997
grouped.median()	O	O:0.869295
`	O	O:0.999993
calls	O	O:0.999251
an	O	O:0.999986
optimized	O	O:0.981136
(	O	O:0.999982
cythonized	O	O:0.999603
)	O	O:0.999980
`	O	O:0.999981
median	O	B-API:0.947474
`	O	O:0.999996
aggregation	O	O:0.985870
function	O	O:0.999972
,	O	O:0.999987
while	O	O:0.999903
`	O	O:0.999984
grouped.quantile()	O	O:0.600181
`	O	O:0.999995
calls	O	O:0.999725
a	O	O:0.999998
generic	O	O:0.976361
wrapper	O	O:0.999928
to	O	O:0.999979
apply	O	O:0.979598
the	O	O:0.999826
function	O	O:0.999668
on	O	O:0.999991
the	O	O:0.999992
groups	O	O:0.999092
.	O	O:0.999829
	
So	O	O:0.999837
`	O	O:0.999990
grouped.quantile()	O	B-API:0.565293
`	O	O:0.999997
does	O	O:0.999522
a	O	O:0.999998
general	O	O:0.997435
apply	O	B-API:0.947815
and	O	O:0.999824
not	O	O:0.999909
an	O	O:0.999934
aggregation	O	O:0.997073
.	O	O:0.999807
	
The	O	O:0.999930
reason	O	O:0.999353
for	O	O:0.999997
this	O	O:0.999124
is	O	O:0.999992
that	O	O:0.999728
`	O	O:0.999998
quantile	O	O:0.998415
`	O	O:0.999989
can	O	O:0.999932
also	O	O:0.999999
return	O	O:0.999910
a	O	O:0.999824
DataFrame	B-API	O:0.794067
(	O	O:0.999950
and	O	O:0.999999
thus	O	O:0.994746
is	O	O:0.999957
not	O	O:0.999972
always	O	O:0.999992
a	O	O:0.999998
pure	O	O:0.997233
aggregation	O	O:0.999527
)	O	O:0.999987
,	O	O:0.999988
if	O	O:0.999997
you	O	O:0.999974
calculate	O	O:0.999978
multiple	O	O:0.999998
quantiles	O	O:0.999955
at	O	O:0.999999
once	O	O:0.999927
,	O	O:0.999996
eg	O	O:0.999989
with	O	O:0.999021
`	O	O:0.999991
grouped.quantile	O	O:0.989956
([	O	O:0.999970
0.1	O	O:0.996480
,	O	O:0.999965
0.5	O	O:0.997967
,	O	O:0.999966
0.9	O	O:0.998036
])`	O	O:0.998980
:	O	O:0.999865
#CODE	O	O:0.999838
	
In	O	O:0.999986
terms	O	O:0.999913
of	O	O:0.999991
how	O	O:0.999898
you	O	O:0.999998
make	O	O:0.999995
a	O	O:0.999999
new	O	O:0.999895
column	O	O:0.999970
based	O	O:0.999855
on	O	O:0.999996
other	O	O:0.999969
columns	O	O:0.999953
-	O	O:0.999996
if	O	O:0.999994
you	O	O:0.999990
absolutely	O	O:0.999980
need	O	O:0.999975
to	O	O:0.999994
iterate	O	O:0.999993
,	O	O:0.999999
then	O	O:0.999971
you	O	O:0.999999
can	O	O:0.999998
assign	O	O:0.999996
using	O	O:0.999949
`	O	O:0.999881
loc	O	B-API:0.993740
`	O	O:0.999994
,	O	O:0.999966
as	O	O:0.999996
you	O	O:0.999874
did	O	O:0.999945
in	O	O:0.999997
one	O	O:0.999985
example	O	O:0.999776
.	O	O:0.999912
	
But	O	O:0.999865
you	O	O:0.999882
should	O	O:0.999973
always	O	O:0.999993
look	O	O:0.999948
for	O	O:0.999990
a	O	O:0.999990
vectorized	O	O:0.996602
solution	O	O:0.999724
,	O	O:0.999997
then	O	O:0.999931
look	O	O:0.999978
at	O	O:0.999996
`	O	O:0.999986
apply	O	B-API:0.982572
`	O	O:0.999842
,	O	O:0.999610
and	O	O:0.999999
only	O	O:0.999983
then	O	O:0.999911
think	O	O:0.999992
about	O	O:0.999960
iterating	O	O:0.997243
.	O	O:0.999173
	
See	O	O:0.999963
this	O	O:0.999852
answer	O	O:0.999910
for	O	O:0.999986
some	O	O:0.999554
more	O	O:0.997807
background	O	O:0.999749
.	O	O:0.999843
	
This	O	O:0.999762
give	O	O:0.999963
yous	O	O:0.999912
a	O	O:0.999987
boolean	O	O:0.998979
mask	O	O:0.894783
for	O	O:0.999982
groupby	B-API	B-API:0.972603
of	O	O:0.999972
each	O	O:0.999524
store	O	O:0.999540
for	O	O:0.999998
each	O	O:0.999711
date	O	O:0.999120
where	O	O:0.999977
there	O	O:0.999946
are	O	O:0.999996
exactly	O	O:0.999972
two	O	O:0.999986
unique	O	O:0.756432
`	O	O:0.999942
Item_Id	O	O:0.799330
`	O	O:0.999993
present	O	O:0.990068
.	O	O:0.999933
	
From	O	O:0.999944
this	O	O:0.999946
you	O	O:0.999995
can	O	O:0.999993
now	O	O:0.999999
apply	O	O:0.954771
the	O	O:0.999631
function	O	O:0.999737
that	O	O:0.999807
concatenates	O	O:0.999990
your	O	O:0.999932
prices	O	O:0.985804
:	O	O:0.999979
#CODE	O	O:0.999900
	
@USER	O	O:0.998567
Not	O	O:0.999949
quite	O	O:0.999325
.	O	O:0.999882
	
`	O	O:0.999969
join	O	B-API:0.995286
`	O	O:0.999966
is	O	O:0.999948
shorthand	O	O:0.998238
for	O	O:0.999993
merging	O	O:0.994802
on	O	O:0.999865
index	O	O:0.999885
with	O	O:0.999985
both	O	O:0.999959
frames	O	O:0.999925
,	O	O:0.999997
so	O	O:0.999997
the	O	O:0.999987
indices	O	O:0.999859
need	O	O:0.999984
only	O	O:0.999988
be	O	O:0.999994
consistent	O	O:0.998247
(	O	O:0.999907
which	O	O:0.999814
it	O	O:0.999987
will	O	O:0.999979
be	O	O:0.999999
here	O	O:0.999933
as	O	O:0.999989
the	O	O:0.999917
apply	O	B-API:0.975598
and	O	O:0.999887
col	O	O:0.998221
selection	O	O:0.999714
don't	O	O:0.999473
affect	O	O:0.999662
it	O	O:0.999972
)	O	O:0.999921
.	O	O:0.999836
	
I'll	O	O:0.999357
edit	O	O:0.999673
the	O	O:0.999938
answer	O	O:0.999282
.	O	O:0.999707
	
You	O	O:0.999932
could	O	O:0.999740
use	O	O:0.999988
lambda	O	O:0.991065
function	O	O:0.999009
and	O	O:0.999894
`	O	O:0.999987
apply	O	B-API:0.997045
`	O	O:0.999824
.	O	O:0.997519
	
In	O	O:0.999983
this	O	O:0.999966
case	O	O:0.999989
,	O	O:0.999997
I	O	O:0.999994
made	O	O:0.999935
the	O	O:0.999761
new	O	O:0.999899
index	O	O:0.999981
level	O	O:0.999914
by	O	O:0.999995
taking	O	O:0.999665
the	O	O:0.999979
first	O	O:0.999923
character	O	O:0.999950
of	O	O:0.999991
the	O	O:0.999995
original	O	O:0.999949
columns	O	O:0.999681
,	O	O:0.999997
but	O	O:0.999997
of	O	O:0.999994
course	O	O:0.999956
you	O	O:0.999997
can	O	O:0.999994
apply	O	O:0.997389
another	O	O:0.999268
function	O	O:0.999863
here	O	O:0.999645
if	O	O:0.999971
wanted	O	O:0.999758
.	O	O:0.999734
	
As	O	O:0.999947
user	O	O:0.998727
@USER	O	O:0.999311
has	O	O:0.999907
pointed	O	O:0.999754
out	O	O:0.999982
using	O	O:0.999921
`	O	O:0.999673
map	O	B-API:0.996449
`	O	O:0.999989
or	O	O:0.999732
`	O	O:0.999994
apply	O	B-API:0.975328
`	O	O:0.999931
should	O	O:0.999523
be	O	O:0.999999
a	O	O:0.999999
last	O	O:0.995980
resort	O	O:0.999845
if	O	O:0.999993
a	O	O:0.999998
vectorised	O	O:0.999121
solution	O	O:0.999718
can	O	O:0.999972
be	O	O:0.999999
applied	O	O:0.999856
.	O	O:0.999401
	
What	O	O:0.999781
you	O	O:0.999965
wrote	O	O:0.999740
is	O	O:0.999991
incorrect	O	O:0.999686
,	O	O:0.999993
you	O	O:0.999942
are	O	O:0.999997
calling	O	O:0.999966
apply	O	O:0.563264
on	O	O:0.999936
the	O	O:0.999936
df	O	O:0.999427
but	O	O:0.999974
the	O	O:0.999996
column	O	O:0.999976
as	O	O:0.999999
a	O	O:0.999983
label	O	O:0.997981
does	O	O:0.999645
not	O	O:0.999991
exist	O	O:0.999980
,	O	O:0.999998
see	O	O:0.999892
below	O	O:0.997721
:	O	O:0.999978
#CODE	O	O:0.999795
	
in	O	O:0.999967
general	O	O:0.998868
I	O	O:0.999984
wouldn't	O	O:0.999979
show	O	O:0.999737
a	O	O:0.999988
map	O	B-API:0.962066
/	O	O:0.999981
apply	O	O:0.810276
based	O	O:0.999392
soln	O	O:0.998494
if	O	O:0.999970
the	O	O:0.999988
vectorized	O	O:0.999268
one	O	O:0.999810
works	O	O:0.998200
(	O	O:0.999982
it's	O	O:0.999729
confusing	O	O:0.998270
and	O	O:0.999996
much	O	O:0.999637
slower	O	O:0.998455
)	O	O:0.999892
	
I've	O	O:0.999575
managed	O	O:0.999806
to	O	O:0.999957
do	O	O:0.999999
this	O	O:0.999975
with	O	O:0.999967
apply	O	O:0.585764
,	O	O:0.999979
like	O	O:0.999789
this	O	O:0.999376
:	O	O:0.999982
#CODE	O	O:0.999879
	
Is	O	O:0.999985
there	O	O:0.999977
a	O	O:0.999999
more	O	O:0.999522
efficient	O	O:0.999878
way	O	O:0.999982
to	O	O:0.999986
compare	O	O:0.999997
every	O	O:0.999973
column	O	O:0.999928
in	O	O:0.999999
every	O	O:0.999932
row	O	O:0.999948
in	O	O:0.999980
one	O	O:0.999988
DF	O	O:0.999999
to	O	O:0.999998
every	O	O:0.999998
column	O	O:0.999922
in	O	O:0.999999
every	O	O:0.999977
row	O	O:0.999995
of	O	O:0.999989
another	O	O:0.999566
DF	O	O:0.999997
?	O	O:0.999870
	
This	O	O:0.999713
feels	O	O:0.999899
sloppy	O	O:0.999844
to	O	O:0.999982
me	O	O:0.999988
,	O	O:0.999983
but	O	O:0.999984
my	O	O:0.999976
loop	O	O:0.999769
/	O	O:0.999979
apply	O	O:0.589895
attempts	O	O:0.999169
have	O	O:0.999184
been	O	O:0.999552
much	O	O:0.999856
slower	O	O:0.999337
.	O	O:0.999763
	
#CODE	O	O:0.998453
	
I	O	O:0.999951
forgot	O	O:0.999889
to	O	O:0.999913
mention	O	O:0.999979
,	O	O:0.999997
my	O	O:0.999989
actual	O	O:0.999867
DF's	O	O:0.999948
have	O	O:0.999945
millions	O	O:0.999995
of	O	O:0.999998
rows	O	O:0.998373
and	O	O:0.999999
dozens	O	O:0.999989
of	O	O:0.999981
columns	O	O:0.999891
to	O	O:0.999993
compare	O	O:0.999943
.	O	O:0.999927
	
With	O	O:0.999909
that	O	O:0.999932
size	O	O:0.999961
,	O	O:0.999998
the	O	O:0.999981
apply	O	B-API:0.899025
attempts	O	O:0.997446
were	O	O:0.999771
taking	O	O:0.999401
hours	O	O:0.998754
.	O	O:0.999895
	
I	O	O:0.999936
would	O	O:0.999983
go	O	O:0.999957
for	O	O:0.999989
apply	O	B-API:0.979450
:	O	O:0.998991
#CODE	O	O:0.999133
	
You	O	O:0.999893
can	O	O:0.999993
then	O	O:0.999990
use	O	O:0.999999
apply	O	B-API:0.584556
to	O	O:0.999318
concatenate	O	B-API:0.633867
:	O	O:0.999938
#CODE	O	O:0.999852
	
`	O	O:0.999914
drop_duplicates()	B-API	B-API:0.999840
'	O	O:0.999920
is	O	O:0.999990
the	O	O:0.999958
right	O	O:0.997034
function	O	O:0.999775
.	O	O:0.999908
	
Coming	O	O:0.999321
from	O	O:0.999868
sql	O	O:0.999849
I	O	O:0.999991
immediately	O	O:0.999902
thought	O	O:0.997023
to	O	O:0.999935
GROUP	O	O:0.999871
BY	O	O:0.999875
.	O	O:0.999732
	
If	O	O:0.999958
the	O	O:0.999986
fierst	O	O:0.999495
column	O	O:0.999549
is	O	O:0.999982
intger	O	O:0.999804
type	O	O:0.999561
you	O	O:0.999976
suggest	O	O:0.999921
to	O	O:0.999998
cast	O	O:0.999875
to	O	O:0.999995
string	O	O:0.999973
and	O	O:0.999995
the	O	O:0.999996
to	O	O:0.999929
use	O	O:0.999990
apply	O	B-API:0.866829
?	O	O:0.999412
	
You	O	O:0.999876
can	O	O:0.999908
groupby	B-API	B-API:0.803796
the	O	O:0.999963
Label	O	O:0.999547
column	O	O:0.999926
,	O	O:0.999994
apply	O	B-API:0.578114
the	O	O:0.999600
list	O	O:0.985385
constructor	O	O:0.999713
.	O	O:0.999879
	
Here	O	O:0.998668
is	O	O:0.999974
an	O	O:0.999970
minimal	O	O:0.999556
example	O	O:0.999164
.	O	O:0.999796
	
#CODE	O	O:0.998453
	
if	O	O:0.999960
you	O	O:0.999989
want	O	O:0.999962
to	O	O:0.999993
convert	O	O:0.999947
it	O	O:0.999997
to	O	O:0.999997
strings	O	O:0.999990
,	O	O:0.999997
you	O	O:0.999994
can	O	O:0.999993
apply	O	O:0.974141
`	O	O:0.999994
strfitme	O	O:0.970865
`	O	O:0.999963
(	O	O:0.999669
`	O	O:0.999997
df	O	O:0.998208
[	O	O:0.999983
'	O	O:0.999983
timestamp	O	O:0.999118
']	O	O:0.999918
.apply	B-API	B-API:0.999255
(	O	O:0.999886
lambda	O	O:0.998787
x	O	O:0.999366
:	O	O:0.999853
x.strftime	O	O:0.988496
(	O	O:0.999929
'	O	O:0.999945
%Y-%m-%d	O	O:0.998851
'))`)	O	O:0.997044
.	O	O:0.999783
	
Or	O	O:0.999941
if	O	O:0.999977
it	O	O:0.999954
is	O	O:0.999991
to	O	O:0.999964
write	O	O:0.999993
it	O	O:0.999995
as	O	O:0.999999
strings	O	O:0.999598
to	O	O:0.999993
csv	O	O:0.999998
,	O	O:0.999992
use	O	O:0.999963
the	O	O:0.999792
`	O	O:0.999950
date_format	O	O:0.718770
`	O	O:0.999992
keyword	O	O:0.998943
in	O	O:0.999984
`	O	O:0.999971
to_csv	B-API	B-API:0.999121
`	O	O:0.999972
	
The	O	O:0.999944
reason	O	O:0.999761
I	O	O:0.999994
say	O	O:0.999998
this	O	O:0.998185
is	O	O:0.999996
that	O	O:0.999655
Jeff	O	O:0.999778
has	O	O:0.999983
always	O	O:0.999891
commented	O	O:0.999915
to	O	O:0.999976
me	O	O:0.999999
that	O	O:0.999892
`	O	O:0.999994
map	O	B-API:0.986981
`	O	O:0.999972
and	O	O:0.999763
`	O	O:0.999995
apply	O	B-API:0.995842
`	O	O:0.999903
are	O	O:0.999908
last	O	O:0.999840
resort	O	O:0.999775
methods	O	O:0.999917
so	O	O:0.999981
I	O	O:0.999993
thought	O	O:0.999858
`	O	O:0.999952
update	O	O:0.982684
`	O	O:0.999990
would	O	O:0.999758
perform	O	O:0.999731
better	O	O:0.999665
	
I	O	O:0.999992
have	O	O:0.999990
a	O	O:0.999974
large	O	O:0.999049
dataframe	B-API	O:0.975309
.	O	O:0.999749
	
I	O	O:0.999988
want	O	O:0.999956
to	O	O:0.999824
groupby	B-API	O:0.919729
three	O	O:0.999972
columns	O	O:0.999398
in	O	O:0.999983
the	O	O:0.999993
dataframe	B-API	O:0.995434
,	O	O:0.999976
and	O	O:0.999999
then	O	O:0.999947
apply	O	O:0.965922
a	O	O:0.999939
function	O	O:0.998879
to	O	O:0.999992
each	O	O:0.999987
group	O	O:0.997213
.	O	O:0.999937
	
However	O	O:0.999579
,	O	O:0.999981
I'm	O	O:0.999989
also	O	O:0.999946
interested	O	O:0.999931
in	O	O:0.999991
some	O	O:0.999856
groups	O	O:0.999522
and	O	O:0.999994
keys	O	O:0.999904
that	O	O:0.999615
are	O	O:0.999998
NOT	O	O:0.999611
in	O	O:0.999954
the	O	O:0.999955
dataframe	B-API	O:0.994548
.	O	O:0.999848
	
How	O	O:0.999930
do	O	O:0.999957
I	O	O:0.999997
add	O	O:0.999982
those	O	O:0.999756
to	O	O:0.999985
the	O	O:0.999997
groupby	B-API	B-API:0.992142
object	O	O:0.999838
,	O	O:0.999995
so	O	O:0.999993
I	O	O:0.999996
may	O	O:0.999995
use	O	O:0.999721
`	O	O:0.999933
groupby.apply()	B-API	B-API:0.999969
`	O	O:0.999996
uniformly	O	O:0.998462
on	O	O:0.999994
all	O	O:0.999965
groups	O	O:0.999596
?	O	O:0.999908
	
The	O	O:0.999884
reason	O	O:0.999931
that	O	O:0.999939
`	O	O:0.999999
df	O	O:0.999364
[	O	O:0.999973
'	O	O:0.999979
column_with_times	O	O:0.994950
']	O	O:0.999912
.apply	B-API	B-API:0.999114
(	O	O:0.999887
lambda	O	O:0.998834
x	O	O:0.998751
:	O	O:0.999979
x.days	O	O:0.999501
)`	O	O:0.999896
does	O	O:0.999642
not	O	O:0.999992
work	O	O:0.999866
is	O	O:0.999999
that	O	O:0.999958
apply	O	O:0.690828
is	O	O:0.999961
given	O	O:0.993907
the	O	O:0.999928
`	O	O:0.999965
timedelta64	O	O:0.918613
`	O	O:0.999988
values	O	O:0.961545
(	O	O:0.999919
and	O	O:0.999995
not	O	O:0.999980
the	O	O:0.999964
`	O	O:0.999932
Timedelta	O	B-API:0.710293
`	O	O:0.999992
pandas	O	O:0.999626
type	O	O:0.999755
)	O	O:0.999967
,	O	O:0.999914
and	O	O:0.999994
these	O	O:0.999896
don't	O	O:0.999934
have	O	O:0.999987
such	O	O:0.999973
attributes	O	O:0.999655
.	O	O:0.999262
	
I	O	O:0.999906
would	O	O:0.999991
assume	O	O:0.999801
to_excel()	B-API	B-API:0.986542
would	O	O:0.999941
only	O	O:0.999985
try	O	O:0.999998
to	O	O:0.999995
apply	O	O:0.982943
the	O	O:0.999925
parameter	O	O:0.999413
to	O	O:0.999991
float-formatted	O	O:0.999993
columns	O	O:0.999654
(	O	O:0.999995
or	O	O:0.999999
even	O	O:0.999971
specific	O	O:0.999998
cells	O	O:0.999941
)	O	O:0.999988
rather	O	O:0.999965
than	O	O:0.999910
to	O	O:0.999997
every	O	O:0.999998
piece	O	O:0.999992
of	O	O:0.999998
data	O	O:0.999965
,	O	O:0.999998
so	O	O:0.999962
I'm	O	O:0.999961
not	O	O:0.999993
sure	O	O:0.999962
what	O	O:0.999866
I'm	O	O:0.999976
missing	O	O:0.999116
.	O	O:0.999772
	
If	O	O:0.999982
need	O	O:0.999879
be	O	O:0.999990
I'll	O	O:0.999974
post	O	O:0.999771
a	O	O:0.999990
cleaned	O	O:0.999379
version	O	O:0.999963
of	O	O:0.999994
the	O	O:0.999977
specific	O	O:0.999986
table	O	O:0.999979
that	O	O:0.999918
reproduces	O	O:0.999973
the	O	O:0.999989
error	O	O:0.998839
,	O	O:0.999979
but	O	O:0.999973
I	O	O:0.999993
thought	O	O:0.999922
perhaps	O	O:0.999552
someone	O	O:0.999104
would	O	O:0.999943
recognize	O	O:0.999945
what	O	O:0.999911
I'm	O	O:0.999961
facing	O	O:0.999480
.	O	O:0.999702
	
I	O	O:0.999986
think	O	O:0.999932
you	O	O:0.999837
are	O	O:0.999996
looking	O	O:0.999939
for	O	O:0.999991
a	O	O:0.999991
rolling	O	O:0.682797
apply	O	B-API:0.961496
(	O	O:0.999784
rolling	O	O:0.996083
mean	O	O:0.997231
in	O	O:0.999996
this	O	O:0.999985
case	O	O:0.999959
)	O	O:0.999992
?	O	O:0.999893
	
See	O	O:0.999772
the	O	O:0.999789
docs	O	O:0.996975
:	O	O:0.999924
#URL	O	O:0.999731
.	O	O:0.999930
	
But	O	O:0.999981
then	O	O:0.999929
applied	O	O:0.999984
for	O	O:0.999996
each	O	O:0.999532
weekday	B-API	O:0.726994
seperately	O	O:0.999795
,	O	O:0.999999
this	O	O:0.999952
can	O	O:0.999983
be	O	O:1.000000
achieved	O	O:0.999992
by	O	O:0.999969
combining	O	O:0.998869
`	O	O:0.999890
rolling_mean	B-API	B-API:0.999858
`	O	O:0.999984
with	O	O:0.999941
grouping	O	O:0.999939
on	O	O:0.999994
the	O	O:0.999977
weekday	B-API	O:0.735450
with	O	O:0.999529
`	O	O:0.999960
groupby	B-API	B-API:0.999026
`	O	O:0.999970
.	O	O:0.998394
	
Cleaner	O	O:0.999842
pandas	O	O:0.999821
apply	O	O:0.787808
with	O	O:0.995198
function	O	O:0.999856
that	O	O:0.999948
cannot	O	O:0.999970
use	O	O:0.999976
pandas.Series	B-API	B-API:0.999615
and	O	O:0.999809
non-unique	O	O:0.999669
index	O	O:0.996962
	
The	O	O:0.999869
use	O	O:0.999755
case	O	O:0.998931
:	O	O:0.999974
I	O	O:0.999997
want	O	O:0.999990
to	O	O:0.999967
apply	O	O:0.996543
a	O	O:0.999861
function	O	O:0.999387
to	O	O:0.999998
each	O	O:0.999990
row	O	O:0.999973
via	O	O:0.999984
a	O	O:0.999997
parallel	O	O:0.994381
map	O	B-API:0.887579
in	O	O:0.999863
IPython	O	O:0.998923
.	O	O:0.999896
	
It	O	O:0.999904
doesn't	O	O:0.999890
matter	O	O:0.999975
which	O	O:0.999998
rows	O	O:0.999843
go	O	O:0.999991
to	O	O:0.999996
which	O	O:0.999983
back-end	O	O:0.999929
engine	O	O:0.999983
,	O	O:0.999997
as	O	O:0.999997
the	O	O:0.999610
function	O	O:0.999903
calculates	O	O:0.999974
a	O	O:0.999997
result	O	O:0.999938
based	O	O:0.999836
on	O	O:0.999997
one	O	O:0.999990
row	O	O:0.999989
at	O	O:0.999997
a	O	O:0.999992
time	O	O:0.999124
.	O	O:0.999900
	
(	O	O:0.999964
Conceptually	O	O:0.999975
at	O	O:0.999997
least	O	O:0.999834
;	O	O:0.999993
in	O	O:0.999845
reality	O	O:0.999579
it's	O	O:0.999655
vectorized	O	O:0.999581
.	O	O:0.999920
)	O	O:0.999954
	
Pandas	O	O:0.999030
-	O	O:0.999978
Create	O	O:0.999966
a	O	O:0.999994
new	O	O:0.999832
column	O	O:0.999933
with	O	O:0.999965
apply	O	B-API:0.764661
for	O	O:0.999719
float	O	O:0.981661
indexed	O	O:0.999613
dataframe	B-API	O:0.994177
	
No	O	O:0.999889
worries	O	O:0.998689
.	O	O:0.999820
	
As	O	O:0.999979
a	O	O:0.999993
general	O	O:0.999162
rule	O	O:0.999916
avoid	O	O:0.999653
using	O	O:0.999815
`	O	O:0.999817
apply	O	B-API:0.994335
`	O	O:0.999941
if	O	O:0.999860
there	O	O:0.999911
is	O	O:0.999993
a	O	O:0.999994
vectorised	O	O:0.998583
operation	O	O:0.999799
,	O	O:0.999981
for	O	O:0.999996
basic	O	O:0.999565
operations	O	O:0.999945
such	O	O:0.999929
as	O	O:0.999997
add	O	O:0.998423
/	O	O:0.999969
subtract	O	O:0.985220
/	O	O:0.999947
div	O	O:0.977056
and	O	O:0.999988
multiply	O	O:0.999457
there	O	O:0.999653
are	O	O:0.999992
built	O	O:0.998449
in	O	O:0.999951
operator	O	O:0.999902
support	O	O:0.998619
for	O	O:0.999980
these	O	O:0.999895
that	O	O:0.999564
are	O	O:0.999999
many	O	O:0.999988
orders	O	O:0.999686
of	O	O:0.999989
magnitude	O	O:0.999773
faster	O	O:0.999388
.	O	O:0.999874
	
Returning	O	O:0.999749
multiple	O	O:0.999824
columns	O	O:0.999593
with	O	O:0.999975
pandas	O	O:0.999862
apply	O	B-API:0.675361
and	O	O:0.999955
user-defined	O	O:0.995655
functions	O	O:0.994595
	
And	O	O:0.999922
I	O	O:0.999997
want	O	O:0.999989
to	O	O:0.999900
use	O	O:0.999998
`	O	O:0.999954
df	O	O:0.997453
[	O	O:0.999966
'	O	O:0.999975
x	O	O:0.999942
']	O	O:0.999919
.apply	B-API	B-API:0.998081
(	O	O:0.999890
lambda	O	O:0.998829
x	O	O:0.999719
:	O	O:0.999887
fn	O	O:0.999367
(	O	O:0.999991
x	O	O:0.999967
))`	O	O:0.999450
to	O	O:0.999960
return	O	O:0.999961
both	O	O:0.999312
`	O	O:0.999994
y	O	O:0.997994
`	O	O:0.999983
and	O	O:0.999768
`	O	O:0.999996
z	O	O:0.996106
`	O	O:0.999988
in	O	O:0.999975
separate	O	O:0.999961
columns	O	O:0.999626
.	O	O:0.999906
	
Is	O	O:0.999985
there	O	O:0.999981
a	O	O:0.999997
good	O	O:0.999133
way	O	O:0.999985
to	O	O:0.999977
do	O	O:1.000000
this	O	O:0.999986
by	O	O:0.999991
still	O	O:0.999954
using	O	O:0.999906
`	O	O:0.999717
fn	O	O:0.945171
(	O	O:0.999992
x	O	O:0.999867
)`	O	O:0.999692
?	O	O:0.999928
	
In	O	O:0.999939
reality	O	O:0.999706
,	O	O:0.999996
my	O	O:0.999773
function	O	O:0.999910
will	O	O:0.999930
be	O	O:0.999997
much	O	O:0.999962
more	O	O:0.999579
complicated	O	O:0.999544
-	O	O:0.999998
so	O	O:0.999988
I	O	O:0.999999
only	O	O:0.999994
want	O	O:0.999870
to	O	O:0.999959
run	O	O:0.999995
it	O	O:0.999998
once	O	O:0.999910
within	O	O:0.999961
the	O	O:0.999972
apply	O	B-API:0.884671
and	O	O:0.999928
assign	O	O:0.996539
`	O	O:0.999910
output	O	O:0.998874
[	O	O:0.999990
0	O	O:0.999914
]`	O	O:0.999916
,	O	O:0.999933
`	O	O:0.999983
output	O	O:0.998735
[	O	O:0.999993
1	O	O:0.999934
]`	O	O:0.999927
,	O	O:0.999988
etc	O	O:0.999938
to	O	O:0.999998
individual	O	O:0.999988
columns	O	O:0.999827
.	O	O:0.999897
	
How	O	O:0.999812
about	O	O:0.999516
this	O	O:0.999528
method	O	O:0.999858
?	O	O:0.999954
	
(	O	O:0.999888
n.b.	O	O:0.999628
,	O	O:0.999990
I	O	O:0.999989
edited	O	O:0.999977
this	O	O:0.999761
answer	O	O:0.999921
in	O	O:0.999991
light	O	O:0.999873
of	O	O:0.999996
the	O	O:0.999965
comment	O	O:0.999937
below	O	O:0.999865
)	O	O:0.999994
so	O	O:0.999988
the	O	O:0.999995
apply	O	O:0.539885
step	O	O:0.999592
could	O	O:0.999990
take	O	O:0.999999
a	O	O:1.000000
single	O	O:0.997947
function	O	O:0.999954
with	O	O:0.999957
shared	O	O:0.999387
calculations	O	O:0.999530
and	O	O:0.999987
return	O	O:0.999698
the	O	O:0.999921
required	O	O:0.999828
series	O	O:0.999902
for	O	O:0.999995
the	O	O:0.999991
merge	O	B-API:0.746963
step	O	O:0.999460
.	O	O:0.999947
	
#CODE	O	O:0.998453
	
`	O	O:0.999888
apply	O	B-API:0.994895
(	O	O:0.999919
Series	O	O:0.999306
)`	O	O:0.999862
gives	O	O:0.999870
me	O	O:0.999985
a	O	O:0.999992
DataFrame	B-API	O:0.987470
with	O	O:0.999958
two	O	O:0.999986
columns	O	O:0.999895
.	O	O:0.999914
	
To	O	O:0.999974
join	O	O:0.880647
them	O	O:0.999937
into	O	O:0.999962
one	O	O:0.999992
while	O	O:0.999940
keeping	O	O:0.999711
the	O	O:0.999912
original	O	O:0.999280
index	O	O:0.999956
,	O	O:0.999997
I	O	O:0.999996
use	O	O:0.999967
`	O	O:0.999627
unstack	O	B-API:0.999107
`	O	O:0.999924
.	O	O:0.999298
	
`	O	O:0.999932
reset_index	B-API	B-API:0.999300
`	O	O:0.999988
removes	O	O:0.998553
the	O	O:0.999998
first	O	O:0.999978
level	O	O:0.999733
of	O	O:0.999959
the	O	O:0.999953
index	O	O:0.999950
,	O	O:0.999991
which	O	O:0.999977
basically	O	O:0.999969
holds	O	O:0.999796
the	O	O:0.999993
index	O	O:0.999918
of	O	O:0.999996
the	O	O:0.999997
value	O	O:0.999957
in	O	O:0.999982
the	O	O:0.999992
original	O	O:0.999833
list	O	O:0.997985
which	O	O:0.999844
was	O	O:0.999915
in	O	O:0.999963
C	O	O:0.999415
.	O	O:0.999870
	
Then	O	O:0.999570
I	O	O:0.999999
join	O	O:0.852916
it	O	O:0.999985
back	O	O:0.999885
into	O	O:0.999912
the	O	O:0.999980
df	O	O:0.997173
.	O	O:0.999815
	
Anyway	O	O:0.999840
,	O	O:0.999996
you	O	O:0.999988
can	O	O:0.999971
do	O	O:1.000000
this	O	O:0.999996
using	O	O:0.999828
apply	O	B-API:0.984702
:	O	O:0.997835
#CODE	O	O:0.998935
	
The	O	O:0.999769
function	O	O:0.999676
in	O	O:0.999991
the	O	O:0.999972
apply	O	B-API:0.730257
works	O	O:0.999607
by	O	O:0.999964
first	O	O:0.999867
seeing	O	O:0.999066
if	O	O:0.999970
the	O	O:0.999956
ID	O	O:0.998885
is	O	O:0.999946
in	O	O:0.999907
the	O	O:0.999975
dictionary	O	O:0.997433
(	O	O:0.999934
and	O	O:0.999993
tuples	O	O:0.999168
won't	O	O:0.999851
be	O	O:0.999989
)	O	O:0.999990
and	O	O:0.999945
if	O	O:0.999983
it	O	O:0.999632
is	O	O:0.999991
,	O	O:0.999991
go	O	O:0.999945
for	O	O:0.999994
that	O	O:0.999569
,	O	O:0.999989
and	O	O:0.999995
if	O	O:0.999971
it	O	O:0.999907
isn't	O	O:0.999968
find	O	O:0.999880
the	O	O:0.999997
first	O	O:0.999854
one	O	O:0.999994
that	O	O:0.998653
is	O	O:0.999996
...	O	O:0.999475
	
This	O	O:0.999374
was	O	O:0.999972
a	O	O:0.999990
bit	O	O:0.999868
more	O	O:0.999911
annoying	O	O:0.999705
to	O	O:0.999987
code	O	O:0.999979
,	O	O:0.999999
basically	O	O:0.999988
we	O	O:0.999997
can	O	O:0.999985
apply	O	O:0.994269
a	O	O:0.999989
custom	O	O:0.919144
function	O	O:0.999963
that	O	O:0.999729
performs	O	O:0.999976
the	O	O:0.999985
lookup	O	O:0.964294
for	O	O:0.999919
you	O	O:0.998793
:	O	O:0.999971
#CODE	O	O:0.999910
	
OK	O	O:0.999502
but	O	O:0.999968
generally	O	O:0.999883
using	O	O:0.999881
`	O	O:0.999811
apply	O	B-API:0.997525
`	O	O:0.999911
should	O	O:0.999271
be	O	O:0.999999
a	O	O:0.999999
last	O	O:0.994940
resort	O	O:0.999445
,	O	O:0.999994
there	O	O:0.999909
are	O	O:0.999997
vectorised	O	O:0.999898
functions	O	O:0.999282
in	O	O:0.999967
pandas	O	O:0.999695
and	O	O:0.999996
numpy	O	O:0.999908
that	O	O:0.999758
will	O	O:0.999943
perform	O	O:0.999948
math	O	O:0.999975
operations	O	O:0.999911
on	O	O:0.999993
the	O	O:0.999999
whole	O	O:0.999935
df	O	O:0.999860
,	O	O:0.999996
please	O	O:0.999867
check	O	O:0.999920
the	O	O:0.999997
numbers	O	O:0.998820
I	O	O:0.999979
can't	O	O:0.999981
guarantee	O	O:0.999815
anything	O	O:0.999759
	
Compared	O	O:0.999338
to	O	O:0.999988
the	O	O:0.999999
apply	O	B-API:0.863651
function	O	O:0.999114
which	O	O:0.999402
took	O	O:0.999922
4.3s	O	O:0.999235
so	O	O:0.999984
nearly	O	O:0.999786
250	O	O:0.999962
times	O	O:0.999708
quicker	O	O:0.999733
,	O	O:0.999999
something	O	O:0.999907
to	O	O:0.999996
note	O	O:0.999991
in	O	O:0.999996
the	O	O:0.999970
future	O	O:0.999384
	
Use	O	O:0.999636
`	O	O:0.999957
axis=0	O	O:0.992067
`	O	O:0.999995
to	O	O:0.999972
apply	O	O:0.956559
a	O	O:0.999937
method	O	O:0.999700
down	O	O:0.999870
each	O	O:0.999961
column	O	O:0.999961
,	O	O:0.999998
or	O	O:0.999996
to	O	O:0.999996
the	O	O:1.000000
row	O	O:0.999914
labels	O	O:0.997009
(	O	O:0.999960
the	O	O:0.999988
index	O	O:0.999579
)	O	O:0.999969
.	O	O:0.999923
	
Use	O	O:0.999663
`	O	O:0.999961
axis=1	O	O:0.991655
`	O	O:0.999995
to	O	O:0.999969
apply	O	O:0.956957
a	O	O:0.999899
method	O	O:0.999495
across	O	O:0.999973
each	O	O:0.999803
row	O	O:0.999978
,	O	O:0.999997
or	O	O:0.999996
to	O	O:0.999991
the	O	O:1.000000
column	O	O:0.999875
labels	O	O:0.999580
.	O	O:0.999934
	
You	O	O:0.999911
can	O	O:0.999959
call	O	O:0.999928
the	O	O:0.999978
`	O	O:0.999472
str	O	O:0.810437
`	O	O:0.999961
method	O	O:0.999541
and	O	O:0.999998
apply	O	O:0.909945
a	O	O:0.999846
slice	O	O:0.966105
,	O	O:0.999998
this	O	O:0.999919
will	O	O:0.999942
be	O	O:0.999999
much	O	O:0.999932
quicker	O	O:0.999803
than	O	O:0.999823
the	O	O:0.999893
other	O	O:0.999891
method	O	O:0.999949
as	O	O:0.999998
this	O	O:0.999425
is	O	O:0.999986
vectorised	O	O:0.992577
(	O	O:0.999944
thanks	O	O:0.998949
@USER	O	O:0.994381
):	O	O:0.999880
#CODE	O	O:0.999506
	
Just	O	O:0.999922
out	O	O:0.999981
of	O	O:0.999994
interest	O	O:0.999281
how	O	O:0.999985
would	O	O:0.999976
I	O	O:0.999999
go	O	O:0.999999
about	O	O:0.999807
apply	O	O:0.899424
this	O	O:0.998958
to	O	O:0.999918
the	O	O:0.999999
index	O	O:0.999926
column	O	O:0.999873
?	O	O:0.999992
	
As	O	O:0.999938
I	O	O:0.999981
can't	O	O:0.999991
seem	O	O:0.999882
to	O	O:0.999995
get	O	O:0.999999
that	O	O:0.999983
to	O	O:0.999999
work	O	O:0.999998
-	O	O:0.999998
I	O	O:0.999992
can	O	O:0.999996
always	O	O:0.999999
just	O	O:0.999946
reset_index()	B-API	B-API:0.991294
the	O	O:0.999915
column	O	O:0.999634
and	O	O:0.999992
do	O	O:0.999986
it	O	O:0.999984
then	O	O:0.999599
..	O	O:0.999982
	
Furthermore	O	O:0.999738
,	O	O:0.999988
the	O	O:0.999993
mean	O	O:0.997662
(	O	O:0.999993
or	O	O:0.999997
whatever	O	O:0.999985
other	O	O:0.999883
function	O	O:0.999975
I	O	O:0.999996
want	O	O:0.999990
to	O	O:0.999917
use	O	O:0.999999
to	O	O:0.999988
generate	O	O:0.999995
a	O	O:0.999999
value	O	O:0.999864
)	O	O:0.999994
must	O	O:0.999929
be	O	O:0.999999
based	O	O:0.999932
on	O	O:0.999965
the	O	O:0.999997
original	O	O:0.999933
data	O	O:0.999912
and	O	O:0.999997
applied	O	O:0.999958
to	O	O:0.999972
new	O	O:0.999997
data	O	O:0.999781
.	O	O:0.999927
	
Imagine	O	O:0.999867
the	O	O:0.999976
situation	O	O:0.999918
where	O	O:0.999981
I	O	O:0.999989
calculate	O	O:0.999965
mean	O	O:0.999834
bad	O	O:0.999990
rates	O	O:0.999623
for	O	O:0.999992
a	O	O:0.999988
continuous	O	O:0.997429
variable	O	O:0.999965
on	O	O:0.999993
a	O	O:0.999999
training	O	O:0.999930
data	O	O:0.999965
set	O	O:0.999811
,	O	O:0.999997
build	O	O:0.999746
a	O	O:0.999984
model	O	O:0.997876
and	O	O:0.999999
then	O	O:0.999976
have	O	O:0.999991
to	O	O:0.999998
apply	O	O:0.991403
that	O	O:0.999855
same	O	O:0.999959
transformation	O	O:0.999972
logic	O	O:0.999966
to	O	O:0.999996
new	O	O:0.999998
data	O	O:0.999824
.	O	O:0.999927
	
yes	O	O:0.999221
,	O	O:0.999994
thank	O	O:0.999939
you	O	O:0.999939
for	O	O:0.999995
the	O	O:0.999972
suggestions	O	O:0.996990
.	O	O:0.999837
	
I	O	O:0.999940
should	O	O:0.999906
clarify	O	O:0.980927
(	O	O:0.999967
and	O	O:0.999989
will	O	O:0.999922
do	O	O:0.999984
so	O	O:0.999994
in	O	O:0.999988
an	O	O:0.999998
edit	O	O:0.999647
)	O	O:0.999999
that	O	O:0.999930
I	O	O:1.000000
need	O	O:0.999992
to	O	O:0.999971
be	O	O:1.000000
able	O	O:0.999985
to	O	O:0.999993
apply	O	O:0.936959
whatever	O	O:0.999816
transformation	O	O:0.999813
I	O	O:0.999998
devise	O	O:0.999856
to	O	O:0.999980
new	O	O:0.999999
data	O	O:0.999813
.	O	O:0.999927
	
So	O	O:0.999962
I	O	O:0.999999
have	O	O:0.999985
to	O	O:0.999990
save	O	O:0.999991
the	O	O:0.999964
lookup	O	O:0.995602
information	O	O:0.999963
somehow	O	O:0.999978
so	O	O:0.999996
I	O	O:0.999997
can	O	O:0.999969
use	O	O:0.999995
it	O	O:0.999919
later	O	O:0.999255
.	O	O:0.999903
	
Thanks	O	O:0.998903
for	O	O:0.999995
your	O	O:0.999385
comments	O	O:0.997408
.	O	O:0.999947
	
The	O	O:0.999876
documentation	O	O:0.999733
I	O	O:0.999929
linked	O	O:0.999831
says	O	O:0.999614
that	O	O:0.999952
the	O	O:0.999998
`	O	O:0.999998
data	O	O:0.998323
`	O	O:0.999994
argument	O	O:0.999908
may	O	O:0.999994
be	O	O:0.999999
a	O	O:0.999991
"	O	O:0.999819
numpy	O	O:0.999254
ndarray	B-API	B-API:0.955971
(	O	O:0.999983
structured	O	O:0.998715
or	O	O:0.999994
homogeneous	O	O:0.999370
)	O	O:0.999984
,	O	O:0.999986
dict	O	O:0.999935
,	O	O:0.999973
or	O	O:0.999993
DataFrame	B-API	O:0.988690
"	O	O:0.999982
,	O	O:0.999977
and	O	O:0.999989
follows	O	O:0.999863
this	O	O:0.999884
line	O	O:0.999916
with	O	O:0.999951
one	O	O:0.999968
that	O	O:0.999967
says	O	O:0.999926
"	O	O:0.999981
***	O	O:0.999836
Dict	O	O:0.999669
can	O	O:0.999739
contain	O	O:0.999789
***	O	O:0.999983
Series	O	O:0.999753
,	O	O:0.999986
arrays	O	O:0.999872
,	O	O:0.999990
constants	O	O:0.999800
,	O	O:0.999992
or	O	O:0.999981
list-like	O	O:0.999921
objects	O	O:0.999374
"	O	O:0.999900
(	O	O:0.999988
my	O	O:0.999984
emphasis	O	O:0.999474
)	O	O:0.999966
.	O	O:0.999807
	
I	O	O:0.999930
interpret	O	O:0.999986
this	O	O:0.999690
to	O	O:0.999998
mean	O	O:0.999998
that	O	O:0.999968
*	O	O:1.000000
when	O	O:0.999961
the	O	O:0.999996
`	O	O:0.999999
data	O	O:0.998155
`	O	O:0.999995
argument	O	O:0.999721
is	O	O:0.999998
a	O	O:0.999943
`	O	O:0.999957
dict	O	O:0.992334
`	O	O:0.999990
*	O	O:0.999975
,	O	O:0.999999
its	O	O:0.999974
values	O	O:0.999754
can	O	O:0.999928
be	O	O:1.000000
Series	O	O:0.999945
,	O	O:0.999975
arrays	O	O:0.999861
,	O	O:0.999977
etc	O	O:0.999921
.	O	O:0.999941
	
IOW	O	O:0.999262
,	O	O:0.999990
the	O	O:0.999884
"	O	O:0.999792
list-like	O	O:0.999841
objects	O	O:0.999379
"	O	O:0.999986
bit	O	O:0.996333
is	O	O:0.999985
not	O	O:0.999965
referring	O	O:0.999888
to	O	O:0.999982
the	O	O:0.999999
`	O	O:0.999998
data	O	O:0.998628
`	O	O:0.999999
argument	O	O:0.999926
itself	O	O:0.999606
.	O	O:0.999902
	
I	O	O:0.999946
am	O	O:0.999995
specifically	O	O:0.999821
looking	O	O:0.999927
for	O	O:0.999994
a	O	O:0.999989
`	O	O:0.999984
data	O	O:0.998780
`	O	O:0.999991
argument	O	O:0.999953
that	O	O:0.999857
is	O	O:0.999999
a	O	O:0.999963
Python	O	O:0.999008
list	O	O:0.996835
,	O	O:0.999991
not	O	O:0.999991
a	O	O:0.999998
dict	O	O:0.999728
,	O	O:0.999995
so	O	O:0.999995
this	O	O:0.999746
clause	O	O:0.999888
does	O	O:0.999859
not	O	O:0.999987
apply	O	O:0.753557
.	O	O:0.999319
	
I'm	O	O:0.999934
looking	O	O:0.999814
for	O	O:0.999940
a	O	O:0.999963
method	O	O:0.999745
to	O	O:0.999989
perform	O	O:0.999972
an	O	O:0.999940
ANOVA	O	O:0.999707
and	O	O:0.999989
HSD	O	O:0.999910
tests	O	O:0.999745
from	O	O:0.999943
a	O	O:0.999996
dataframe	B-API	O:0.993287
in	O	O:0.999955
Python	O	O:0.999385
.	O	O:0.999921
	
I	O	O:0.999968
tried	O	O:0.999820
to	O	O:0.999958
read	O	O:0.999978
some	O	O:0.999965
examples	O	O:0.999922
on	O	O:0.999978
forums	O	O:0.999892
and	O	O:0.999987
tutorials	O	O:0.999426
but	O	O:0.999755
i	O	O:0.999892
didn't	O	O:0.999824
achieve	O	O:0.999812
to	O	O:0.999988
apply	O	O:0.965453
it	O	O:0.999935
to	O	O:0.999987
my	O	O:0.999999
work	O	O:0.999544
.	O	O:0.999976
	
but	O	O:0.999743
i	O	O:0.999879
can't	O	O:0.999944
achieve	O	O:0.999950
to	O	O:0.999995
apply	O	O:0.998832
them	O	O:0.999308
to	O	O:0.999990
my	O	O:0.999999
example	O	O:0.999555
	
For	O	O:0.999914
pairwise	O	O:0.999352
comparison	O	O:0.999715
for	O	O:0.999997
only	O	O:0.999961
some	O	O:0.999933
effects	O	O:0.999877
,	O	O:0.999995
we	O	O:0.999993
would	O	O:0.999985
need	O	O:0.999993
the	O	O:0.999999
pairwise	O	O:0.999831
comparison	O	O:0.999459
after	O	O:0.999979
estimating	O	O:0.999329
the	O	O:0.999959
multiway	O	O:0.998921
ANOVA	O	O:0.999832
with	O	O:0.999624
OLS	O	O:0.999640
.	O	O:0.999887
	
This	O	O:0.999098
is	O	O:0.999971
currently	O	O:0.999817
not	O	O:0.999995
available	O	O:0.999766
in	O	O:0.999963
statsmodels	O	O:0.994479
.	O	O:0.999885
	
The	O	O:0.999960
critical	O	O:0.998808
values	O	O:0.999728
and	O	O:0.999995
p-values	O	O:0.999675
of	O	O:0.999931
Tukey-HSD	O	O:0.993544
would	O	O:0.999970
not	O	O:0.999996
apply	O	O:0.763391
in	O	O:0.999956
that	O	O:0.999754
case	O	O:0.999956
.	O	O:0.999973
	
What	O	O:0.999403
would	O	O:0.999963
be	O	O:0.999999
possible	O	O:0.999919
in	O	O:0.999993
this	O	O:0.999960
case	O	O:0.999923
is	O	O:0.999998
to	O	O:0.999980
estimate	O	O:0.999988
the	O	O:0.999992
full	O	O:0.999680
model	O	O:0.999909
with	O	O:0.999861
OLS	O	O:0.999913
,	O	O:0.999996
define	O	O:0.999688
all	O	O:0.999959
desired	O	O:0.999934
pairwise	O	O:0.999784
contrasts	O	O:0.999683
,	O	O:0.999995
use	O	O:0.999974
the	O	O:0.999518
`	O	O:0.999972
t_test	O	O:0.978574
`	O	O:0.999999
to	O	O:0.999977
get	O	O:0.999999
the	O	O:0.999997
raw	O	O:0.999963
p-values	O	O:0.998777
for	O	O:0.999994
the	O	O:0.999983
comparisons	O	O:0.995188
,	O	O:0.999977
and	O	O:0.999999
then	O	O:0.999946
apply	O	O:0.973064
one	O	O:0.999982
of	O	O:0.999963
the	O	O:0.999994
multiple	O	O:0.999930
p-value	O	O:0.999821
corrections	O	O:0.999897
that	O	O:0.999955
are	O	O:0.999996
available	O	O:0.999857
.	O	O:0.999788
	
The	O	O:0.999819
reason	O	O:0.999376
it	O	O:0.999994
overwrites	O	O:0.998599
is	O	O:0.999986
because	O	O:0.999819
the	O	O:0.999981
indexing	O	O:0.999808
on	O	O:0.999973
the	O	O:0.999992
left	O	O:0.999577
hand	O	O:0.999841
side	O	O:0.999706
is	O	O:0.999995
defaulting	O	O:0.999217
to	O	O:0.999989
the	O	O:0.999999
entire	O	O:0.999835
dataframe	B-API	O:0.999456
,	O	O:0.999998
if	O	O:0.999998
you	O	O:0.999983
apply	O	O:0.801081
the	O	O:0.999981
mask	O	O:0.651305
to	O	O:0.999990
the	O	O:1.000000
left	O	O:0.999511
hand	O	O:0.999958
also	O	O:0.999991
using	O	O:0.999982
`	O	O:0.999604
loc	O	B-API:0.994483
`	O	O:0.999996
then	O	O:0.998471
it	O	O:1.000000
only	O	O:0.999974
affects	O	O:0.999994
those	O	O:0.999996
rows	O	O:0.999801
where	O	O:0.999971
the	O	O:0.999993
condition	O	O:0.999341
is	O	O:0.999968
met	O	O:0.998104
:	O	O:0.999971
#CODE	O	O:0.999746
	
How	O	O:0.999895
to	O	O:0.999981
apply	O	O:0.965966
Pandas	O	O:0.999594
Groupby	B-API	O:0.664877
with	O	O:0.999921
multiple	O	O:0.999703
conditions	O	O:0.999422
for	O	O:0.999983
split	O	O:0.983358
and	O	O:0.999967
apply	O	O:0.962925
multiple	O	O:0.994879
calculations	O	O:0.997346
?	O	O:0.999950
	
I	O	O:0.999974
could	O	O:0.999988
possibly	O	O:0.999975
live	O	O:0.999866
without	O	O:0.999698
floats	O	O:0.999003
and	O	O:0.999973
use	O	O:0.999963
strings	O	O:0.973395
,	O	O:0.999964
but	O	O:0.999990
curiously	O	O:0.999774
the	O	O:0.999996
things	O	O:0.999422
in	O	O:0.999977
my	O	O:0.999990
Dataframe	B-API	O:0.998001
appear	O	O:0.999928
to	O	O:0.999991
BE	O	O:0.999995
strings	O	O:0.999549
,	O	O:0.999998
since	O	O:0.999996
when	O	O:0.999768
I	O	O:1.000000
try	O	O:0.999999
to	O	O:0.999966
apply	O	O:0.987389
the	O	O:0.999828
round()	B-API	O:0.548241
function	O	O:0.999916
on	O	O:0.999996
any	O	O:0.999994
value	O	O:0.999988
extracted	O	O:0.999671
from	O	O:0.999969
there	O	O:0.999887
,	O	O:0.999996
it	O	O:0.999995
will	O	O:0.999911
protest	O	O:0.999962
that	O	O:0.999982
the	O	O:0.999998
input	O	O:0.998515
is	O	O:0.999985
not	O	O:0.999971
a	O	O:0.999993
float	O	O:0.988177
...	O	O:0.999274
	
I	O	O:0.999922
would	O	O:0.999994
like	O	O:0.999938
to	O	O:0.999998
apply	O	O:0.966456
dummy-coding	O	O:0.999055
contrasting	O	O:0.997089
on	O	O:0.999989
it	O	O:0.999987
so	O	O:0.999999
that	O	O:0.999979
I	O	O:0.999996
get	O	O:0.999886
:	O	O:0.999866
#CODE	O	O:0.999871
	
But	O	O:0.999921
I	O	O:0.999997
need	O	O:0.999973
to	O	O:0.999987
time	O	O:0.999999
where	O	O:0.999989
those	O	O:0.999990
peaks	O	O:0.999928
occur	O	O:0.999788
as	O	O:0.999994
well	O	O:0.998526
.	O	O:0.999942
	
I	O	O:0.999990
know	O	O:0.999914
I	O	O:0.999987
could	O	O:0.999990
iterate	O	O:0.999889
over	O	O:0.999919
the	O	O:0.999890
output	O	O:0.999199
and	O	O:0.999996
find	O	O:0.999968
where	O	O:0.999857
in	O	O:0.999989
the	O	O:0.999998
original	O	O:0.999520
dataset	O	O:0.999990
those	O	O:0.999963
values	O	O:0.999901
occur	O	O:0.998911
,	O	O:0.999983
but	O	O:0.999981
that	O	O:0.999935
seems	O	O:0.999998
like	O	O:0.999998
a	O	O:0.999993
rather	O	O:0.999624
brute-force	O	O:0.999794
way	O	O:0.999912
to	O	O:0.999967
do	O	O:0.999995
it	O	O:0.999974
.	O	O:0.999899
	
I	O	O:0.999989
also	O	O:0.999978
could	O	O:0.999956
write	O	O:0.999990
a	O	O:0.999999
different	O	O:0.999002
function	O	O:0.999955
to	O	O:0.999995
apply	O	O:0.969432
to	O	O:0.999951
the	O	O:0.999996
grouped	O	O:0.997419
object	O	O:0.999969
that	O	O:0.999815
returns	O	O:0.999958
both	O	O:0.999913
the	O	O:0.999957
max	O	B-API:0.601245
and	O	O:0.999977
the	O	O:0.999996
time	O	O:0.999811
where	O	O:0.999969
that	O	O:0.999881
max	O	O:0.900503
occurs	O	O:0.999487
(	O	O:0.999993
at	O	O:0.999998
least	O	O:0.999500
in	O	O:0.999991
theory	O	O:0.999042
-	O	O:0.999968
haven't	O	O:0.999225
tried	O	O:0.999907
to	O	O:0.999978
do	O	O:0.999999
this	O	O:0.999845
,	O	O:0.999992
but	O	O:0.999987
I	O	O:0.999992
assume	O	O:0.999965
it's	O	O:0.999464
pretty	O	O:0.999617
straightforward	O	O:0.999582
)	O	O:0.999960
.	O	O:0.999808
	
As	O	O:0.999974
an	O	O:0.999990
alternative	O	O:0.999977
you	O	O:0.999841
could	O	O:0.999963
index	O	O:0.999996
the	O	O:0.999999
group	O	O:0.999885
by	O	O:0.999991
using	O	O:0.999946
the	O	O:0.999852
`	O	O:0.997618
argmin()	B-API	B-API:0.999654
`	O	O:0.999858
function	O	O:0.999233
.	O	O:0.999930
	
I	O	O:0.999968
tried	O	O:0.999948
to	O	O:0.999909
do	O	O:0.999999
this	O	O:0.999959
with	O	O:0.999824
transform	O	B-API:0.775317
but	O	O:0.999923
it	O	O:0.999949
was	O	O:0.999981
just	O	O:0.999931
returning	O	O:0.999942
the	O	O:0.999888
entire	O	O:0.999639
dataframe	B-API	O:0.997628
.	O	O:0.999879
	
I'm	O	O:0.999853
not	O	O:0.999988
sure	O	O:0.999928
why	O	O:0.999989
that	O	O:0.999844
should	O	O:0.999990
be	O	O:0.999996
,	O	O:0.999996
it	O	O:0.999990
does	O	O:0.999860
however	O	O:0.999984
work	O	O:0.999981
with	O	O:0.999980
`	O	O:0.999991
apply	O	B-API:0.988823
`	O	O:0.999591
:	O	O:0.999364
#CODE	O	O:0.999898
	
In	O	O:0.999982
my	O	O:0.999962
opinion	O	O:0.999898
the	O	O:0.999973
`	O	O:0.999978
transform	O	B-API:0.985655
`	O	O:0.999972
and	O	O:0.999846
`	O	O:0.999995
apply	O	B-API:0.982643
`	O	O:0.999913
functions	O	O:0.994799
are	O	O:0.999994
very	O	O:0.999720
opaque	O	O:0.999182
and	O	O:0.999987
the	O	O:0.999975
docs	O	O:0.994261
are	O	O:0.999984
not	O	O:0.999996
a	O	O:0.999997
great	O	O:0.998726
help	O	O:0.998603
.	O	O:0.999892
	
They	O	O:0.999777
are	O	O:0.999983
however	O	O:0.999962
extremely	O	O:0.999954
useful	O	O:0.999969
once	O	O:0.999887
you	O	O:0.999991
get	O	O:0.999992
to	O	O:0.999999
grips	O	O:0.999989
with	O	O:0.999993
them	O	O:0.999190
.	O	O:0.999969
	
is	O	O:0.999915
incorrect	O	O:0.999588
,	O	O:0.999997
as	O	O:0.999994
you	O	O:0.999968
have	O	O:0.999872
18:00	O	O:0.999761
:	O	O:0.999989
00	O	O:0.999997
twice	O	O:0.999959
for	O	O:0.999994
the	O	O:0.999995
same	O	O:0.999821
date	O	O:0.998333
,	O	O:0.999993
and	O	O:0.999988
in	O	O:0.999996
your	O	O:0.999902
initial	O	O:0.999916
data	O	O:0.999931
,	O	O:0.999998
they	O	O:0.999987
apply	O	O:0.669809
to	O	O:0.999992
different	O	O:0.999982
dates	O	O:0.995038
.	O	O:0.999856
	
it	O	O:0.999651
is	O	O:0.999991
probably	O	O:0.999790
better	O	O:0.999916
to	O	O:0.999992
do	O	O:0.999995
datetime	O	O:0.999167
conversion	O	O:0.999844
doing	O	O:0.999878
`	O	O:0.999982
df	O	O:0.994192
[	O	O:0.999977
'	O	O:0.999983
t	B-API	O:0.978576
']	O	O:0.999978
=	O	O:0.998681
pd.to_datetime	B-API	B-API:0.993401
(	O	O:0.999960
df	O	O:0.999673
[	O	O:0.999932
'	O	O:0.999981
t	B-API	O:0.996406
'])`	O	O:0.999849
rather	O	O:0.999845
than	O	O:0.999878
call	O	O:0.998143
`	O	O:0.999995
apply	O	B-API:0.998355
`	O	O:0.999824
	
we	O	O:0.999990
need	O	O:0.999962
to	O	O:0.999996
write	O	O:0.999999
a	O	O:0.999994
apply	O	B-API:0.906082
function	O	O:0.999734
first	O	O:0.998785
and	O	O:0.999999
then	O	O:0.999582
use	O	O:0.999994
group	O	O:0.997891
by	O	O:0.999794
.	O	O:0.999741
	
This	O	O:0.999015
is	O	O:0.999988
my	O	O:0.999943
latest	O	O:0.999592
guess	O	O:0.998882
	
There	O	O:0.999928
maybe	O	O:0.999962
actually	O	O:0.999996
something	O	O:0.999973
a	O	O:0.999993
little	O	O:0.998260
cleaner	O	O:0.998854
.	O	O:0.999844
	
The	O	O:0.999941
solution	O	O:0.999824
above	O	O:0.999568
is	O	O:0.999996
just	O	O:0.999818
a	O	O:0.999999
general	O	O:0.996809
solution	O	O:0.999899
for	O	O:0.999955
quickly	O	O:0.999827
merging	O	O:0.999686
a	O	O:0.999995
bunch	O	O:0.999772
of	O	O:0.999991
dataframes	O	O:0.996681
.	O	O:0.999939
	
Your	O	O:0.999939
particular	O	O:0.999683
problem	O	O:0.999674
might	O	O:0.999903
be	O	O:0.999999
more	O	O:0.999901
cleanly	O	O:0.989352
(	O	O:0.999985
and	O	O:0.999977
quickly	O	O:0.999830
?	O	O:0.999964
)	O	O:0.999975
solved	O	O:0.999761
with	O	O:0.999979
a	O	O:0.999978
cross-product	O	O:0.999077
solution	O	O:0.998976
(	O	O:0.999985
#URL	O	O:0.999634
)	O	O:0.999933
,	O	O:0.999952
but	O	O:0.999972
I'd	O	O:0.999994
have	O	O:0.999975
to	O	O:0.999995
think	O	O:0.999999
more	O	O:0.999916
about	O	O:0.999886
how	O	O:0.999992
something	O	O:0.999873
like	O	O:0.999976
this	O	O:0.999950
would	O	O:0.999963
apply	O	O:0.677325
.	O	O:0.999753
	
I	O	O:0.999985
think	O	O:0.999975
split	O	O:0.927831
is	O	O:0.999994
a	O	O:0.999978
little	O	O:0.999777
more	O	O:0.999695
clear	O	O:0.999724
than	O	O:0.999615
regex	O	O:0.999640
but	O	O:0.999987
you	O	O:0.999979
can	O	O:0.999985
`	O	O:1.000000
apply	O	B-API:0.919629
`	O	O:0.999991
any	O	O:0.997830
function	O	O:0.999973
you	O	O:0.999962
choose	O	O:0.999959
to	O	O:0.999999
a	O	O:0.999999
series	O	O:0.999418
.	O	O:0.999916
	
#CODE	O	O:0.998453
	
Sorry	O	O:0.998728
,	O	O:0.999909
I'm	O	O:0.999951
not	O	O:0.999993
sure	O	O:0.999966
about	O	O:0.999958
that	O	O:0.999474
.	O	O:0.999934
	
I	O	O:0.999917
misread	O	O:0.999605
and	O	O:0.999905
thought	O	O:0.999926
the	O	O:0.999974
data	O	O:0.998253
was	O	O:0.999969
more	O	O:0.999917
regular	O	O:0.999209
.	O	O:0.999731
	
Perhaps	O	O:0.998088
resample()	B-API	B-API:0.995916
and	O	O:0.999997
then	O	O:0.999877
apply	O	O:0.885776
the	O	O:0.999615
above	O	O:0.996049
method	O	O:0.999877
?	O	O:0.999943
	
If	O	O:0.999998
your	O	O:0.999980
data	O	O:0.999850
is	O	O:0.999995
consistently	O	O:0.999849
spaced	O	O:0.999718
except	O	O:0.999799
for	O	O:0.999994
some	O	O:0.999964
missing	O	O:0.999902
rows	O	O:0.999641
,	O	O:0.999997
then	O	O:0.999978
resampling	O	O:0.999924
ought	O	O:0.999774
to	O	O:0.999992
work	O	O:0.999995
fine	O	O:0.999900
and	O	O:0.999998
be	O	O:0.999998
easy	O	O:0.999595
to	O	O:0.999963
do	O	O:0.999986
.	O	O:0.999924
	
I'm	O	O:0.999964
sure	O	O:0.999884
you	O	O:0.999988
could	O	O:0.999982
do	O	O:1.000000
something	O	O:0.999970
with	O	O:0.999236
groupby	B-API	B-API:0.994562
but	O	O:0.999987
that	O	O:0.999818
could	O	O:0.999995
be	O	O:1.000000
a	O	O:0.999998
lot	O	O:0.998516
slower	O	O:0.998407
.	O	O:0.999668
	
Maybe	O	O:0.999808
someone	O	O:0.999862
else	O	O:0.999918
will	O	O:0.999978
have	O	O:0.999997
a	O	O:0.999996
better	O	O:0.999644
idea	O	O:0.999712
though	O	O:0.999595
.	O	O:0.999936
	
Where	O	O:0.999887
the	O	O:0.999981
"	O	O:0.999966
0	O	O:0.999597
"	O	O:0.999990
column	O	O:0.998782
is	O	O:0.999993
no	O	O:0.999916
longer	O	O:0.999874
the	O	O:0.999988
index	O	O:0.999938
for	O	O:0.999994
rows	O	O:0.999029
.	O	O:0.999784
	
Then	O	O:0.999728
we	O	O:0.999998
can	O	O:0.999991
apply	O	O:0.955430
`	O	O:0.999973
df1	O	O:0.994850
=	O	O:0.999955
df1	O	O:0.997450
[	O	O:0.999932
df1	O	O:0.999400
[	O	O:0.999953
3	O	O:0.999931
]	O	O:0.999811
.isin	B-API	B-API:0.996339
(	O	O:0.999957
df2	O	O:0.999646
[	O	O:0.999936
0	O	O:0.999889
])]`	O	O:0.999104
.	O	O:0.999313
	
NOTE	O	O:0.998784
:	O	O:0.999991
application	O	O:0.999982
of	O	O:0.999980
`	O	O:0.999970
df1	O	O:0.999325
=	O	O:0.999948
df1	O	O:0.997494
[	O	O:0.999932
df1	O	O:0.999397
[	O	O:0.999957
3	O	O:0.999928
]	O	O:0.999931
==	O	O:0.999847
df2	O	O:0.999606
[	O	O:0.999958
0	O	O:0.999934
]]`	O	O:0.999935
will	O	O:0.999516
raise	O	O:0.999936
the	O	O:0.999986
error	O	O:0.999731
message	O	O:0.998056
`	O	O:0.999991
Series	O	O:0.999459
lengths	O	O:0.999761
must	O	O:0.999924
match	O	O:0.999957
to	O	O:0.999996
compare	O	O:0.999905
`	O	O:0.999975
	
2	O	O:0.999891
ways	O	O:0.999565
,	O	O:0.999995
define	O	O:0.999864
a	O	O:0.999974
func	O	O:0.958659
and	O	O:0.999994
call	O	O:0.995017
apply	O	B-API:0.829419
#CODE	O	O:0.964453
	
@USER	O	O:0.999703
you	O	O:0.999943
can	O	O:0.999976
upvote	O	O:0.999995
too	O	O:0.999967
;)	O	O:0.999974
,	O	O:0.999976
the	O	O:0.999995
thing	O	O:0.999889
to	O	O:0.999998
take	O	O:0.999997
from	O	O:0.999996
this	O	O:0.999887
is	O	O:0.999997
to	O	O:0.999982
avoid	O	O:0.999968
loops	O	O:0.999409
and	O	O:0.999988
using	O	O:0.999870
apply	O	B-API:0.985194
unless	O	O:0.990989
it	O	O:0.998301
is	O	O:0.999982
not	O	O:0.999980
possible	O	O:0.999887
,	O	O:0.999998
what	O	O:0.999940
you	O	O:0.999994
want	O	O:0.999992
to	O	O:0.999996
do	O	O:0.999996
is	O	O:0.999995
to	O	O:0.999987
find	O	O:0.999996
if	O	O:0.999996
you	O	O:0.999989
vectorise	O	O:0.999994
your	O	O:0.999940
operation	O	O:0.999752
,	O	O:0.999999
that	O	O:0.999865
is	O	O:0.999995
perform	O	O:0.999967
your	O	O:0.999954
operation	O	O:0.999823
on	O	O:0.999996
the	O	O:0.999995
entire	O	O:0.999961
dataframe	B-API	O:0.999369
or	O	O:0.999997
series	O	O:0.999950
rather	O	O:0.999987
than	O	O:0.999994
a	O	O:0.999997
row	O	O:0.999915
at	O	O:0.999996
a	O	O:0.999992
time	O	O:0.999115
.	O	O:0.999900
	
apply	O	B-API:0.920597
is	O	O:0.999944
just	O	O:0.999460
a	O	O:0.999996
loop	O	O:0.993203
and	O	O:0.999980
should	O	O:0.999968
be	O	O:0.999982
avoided	O	O:0.999975
where	O	O:0.999878
possible	O	O:0.999609
,	O	O:1.000000
your	O	O:0.999905
solution	O	O:0.997759
is	O	O:0.999998
fine	O	O:0.999553
,	O	O:0.999998
there	O	O:0.999882
are	O	O:0.999992
many	O	O:0.999991
ways	O	O:0.999910
of	O	O:0.999993
doing	O	O:0.999932
what	O	O:0.999906
you	O	O:0.999930
want	O	O:0.999922
.	O	O:0.999917
	
It	O	O:0.999983
depends	O	O:0.999665
on	O	O:0.999993
the	O	O:0.999997
size	O	O:0.999949
of	O	O:0.999997
the	O	O:0.999998
data	O	O:0.999969
,	O	O:0.999999
your	O	O:0.999979
sample	O	O:0.999879
code	O	O:0.999929
could	O	O:0.999962
be	O	O:0.999996
simplified	O	O:0.999673
:	O	O:0.999819
`	O	O:0.999990
df.loc	B-API	B-API:0.970190
[	O	O:0.999990
df	O	O:0.999532
[	O	O:0.999930
'	O	O:0.999977
C	O	O:0.999859
']	O	O:0.999883
==	O	O:0.999122
'	O	O:0.999988
a	O	O:0.999971
'	O	O:0.999912
,	O	O:0.999984
'	O	O:0.999994
new	O	O:0.999933
']	O	O:0.999969
=	O	O:0.999752
df	O	O:0.998949
[	O	O:0.999867
'	O	O:0.999898
A	O	O:0.999980
']`	O	O:0.999888
and	O	O:0.999987
likewise	O	O:0.999569
for	O	O:0.999977
the	O	O:0.999972
other	O	O:0.998859
condition	O	O:0.999543
	
You	O	O:0.999954
create	O	O:0.999893
a	O	O:0.999989
lookup	O	O:0.759506
function	O	O:0.999676
and	O	O:0.999984
call	O	O:0.998217
`	O	O:0.999968
apply	O	B-API:0.995800
`	O	O:0.999955
on	O	O:0.999954
your	O	O:0.999980
dataframe	B-API	O:0.999171
row-wise	O	O:0.998912
,	O	O:0.999996
this	O	O:0.999638
isn't	O	O:0.999976
very	O	O:0.999924
efficient	O	O:0.999860
for	O	O:0.999992
large	O	O:0.999495
dfs	O	O:0.996970
though	O	O:0.999400
#CODE	O	O:0.999865
	
There	O	O:0.999420
is	O	O:0.999997
a	O	O:0.999993
built	O	O:0.998325
in	O	O:0.999965
`	O	O:0.999950
lookup	O	O:0.793118
`	O	O:0.999957
function	O	O:0.999929
that	O	O:0.999959
can	O	O:0.999978
handle	O	O:0.999997
this	O	O:0.999995
type	O	O:0.999866
of	O	O:0.999981
situation	O	O:0.992716
(	O	O:0.999997
looks	O	O:0.999911
up	O	O:0.999991
by	O	O:0.999971
row	O	O:0.999812
/	O	O:0.999972
column	O	O:0.999701
)	O	O:0.999977
.	O	O:0.999825
	
I	O	O:0.999950
don't	O	O:0.999961
know	O	O:0.999173
how	O	O:0.999972
optimized	O	O:0.999594
it	O	O:0.999953
is	O	O:0.999970
,	O	O:0.999949
but	O	O:0.999976
may	O	O:0.999991
be	O	O:0.999992
faster	O	O:0.999941
than	O	O:0.999710
the	O	O:0.999981
apply	O	B-API:0.775988
solution	O	O:0.995355
.	O	O:0.999688
	
#CODE	O	O:0.998453
	
On	O	O:0.999888
the	O	O:0.999986
toy	O	O:0.999899
dataset	O	O:0.999916
apply	O	B-API:0.559607
takes	O	O:0.999529
470us	O	O:0.998718
,	O	O:0.999948
lookup	O	O:0.972380
takes	O	O:0.999638
531us	O	O:0.998147
	
Hmm	O	O:0.999693
for	O	O:0.999993
some	O	O:0.999563
reason	O	O:0.998362
timeit	O	O:0.998096
gets	O	O:0.999926
a	O	O:0.999994
memory	O	O:0.999693
error	O	O:0.999971
when	O	O:0.999688
I	O	O:0.999986
try	O	O:0.999999
this	O	O:0.999839
on	O	O:0.999999
even	O	O:0.999979
a	O	O:0.999999
modest	O	O:0.999498
sized	O	O:0.999931
df	O	O:0.999861
of	O	O:0.999991
say	O	O:0.999947
4000	O	O:0.999988
rows	O	O:0.999669
,	O	O:0.999989
for	O	O:0.999998
400	O	O:0.999977
rows	O	O:0.999633
I	O	O:0.999982
get	O	O:0.999995
8.17ms	O	O:0.997551
using	O	O:0.999886
apply	O	B-API:0.985236
and	O	O:0.999793
3.05ms	O	O:0.996554
using	O	O:0.998423
lookup	O	O:0.902855
,	O	O:0.999978
so	O	O:0.999984
I	O	O:0.999993
expect	O	O:0.999975
lookup	O	O:0.977879
to	O	O:0.999994
scale	O	O:0.999894
better	O	O:0.999497
	
You	O	O:0.999941
can	O	O:0.999989
create	O	O:0.999995
a	O	O:0.999993
function	O	O:0.999953
that	O	O:0.999969
determines	O	O:0.999933
if	O	O:0.999997
the	O	O:0.999994
value	O	O:0.999935
column	O	O:0.999976
ends	O	O:0.999802
in	O	O:0.999984
`'	O	O:0.999919
_regen	O	O:0.988185
'`	O	O:0.999897
and	O	O:0.999993
then	O	O:0.999843
apply	O	O:0.771364
it	O	O:0.999998
your	O	O:0.999478
values	O	O:0.996239
:	O	O:0.999974
#CODE	O	O:0.999921
	
Yes	O	O:0.999127
but	O	O:0.999961
how	O	O:0.999981
to	O	O:0.999996
you	O	O:1.000000
actually	O	O:0.999997
pass	O	O:0.999874
the	O	O:0.999979
arguments	O	O:0.999756
within	O	O:0.999680
the	O	O:0.999984
apply	O	B-API:0.946844
function	O	O:0.998386
.	O	O:0.999572
	
You	O	O:0.999869
can't	O	O:0.999940
simply	O	O:0.999986
have	O	O:0.999970
a.loc	O	O:0.979607
[	O	O:0.999995
a	O	O:0.999958
[	O	O:0.999597
'	O	O:0.999993
value	O	O:0.999954
']	O	O:0.999882
.apply	B-API	B-API:0.998332
(	O	O:0.999879
has_substring	O	O:0.973313
(	O	O:0.999973
s	O	O:0.999903
,	O	O:0.999982
"	O	O:0.999994
regen	O	O:0.996270
"))	O	O:0.999954
,	O	O:0.999903
'	O	O:0.999978
key	O	O:0.999972
']	O	O:0.999923
+=	O	O:0.999456
'	O	O:0.999926
_regen	O	O:0.981895
'	O	O:0.999950
.	O	O:0.999874
	
Within	O	O:0.999818
the	O	O:0.999985
apply	O	B-API:0.876412
function	O	O:0.999535
arguments	O	O:0.999544
are	O	O:0.999992
passed	O	O:0.999700
with	O	O:0.999946
the	O	O:0.999969
"	O	O:0.999970
args=	O	O:0.973162
"	O	O:0.999975
parameter	O	O:0.999474
,	O	O:0.999998
something	O	O:0.999970
like	O	O:0.999943
this	O	O:0.999975
a.loc	O	O:0.991381
[	O	O:0.999992
a	O	O:0.999957
[	O	O:0.999584
'	O	O:0.999993
value	O	O:0.999954
']	O	O:0.999887
.apply	B-API	B-API:0.997049
(	O	O:0.999960
func=has_substring	O	O:0.996261
args=	O	O:0.983384
"	O	O:0.999991
regen	O	O:0.989546
"	O	O:0.999988
,	O	O:0.999891
'	O	O:0.999979
key	O	O:0.999968
']	O	O:0.999912
+=	O	O:0.999562
'	O	O:0.999941
_regen	O	O:0.987693
'	O	O:0.999959
How	O	O:0.999992
ever	O	O:0.999844
I	O	O:0.999996
can't	O	O:0.999920
get	O	O:0.999982
this	O	O:0.999984
to	O	O:0.999996
work	O	O:0.999980
.	O	O:0.999967
	
What	O	O:0.999810
you	O	O:0.999988
have	O	O:0.999983
will	O	O:0.999988
work	O	O:0.999985
,	O	O:0.999999
args	O	O:0.999938
just	O	O:0.999878
needs	O	O:0.999988
to	O	O:0.999996
be	O	O:1.000000
an	O	O:0.999994
array	O	O:0.999923
within	O	O:0.999788
the	O	O:0.999970
apply	O	B-API:0.974700
function	O	O:0.997860
:	O	O:0.999745
`	O	O:0.999995
a.loc	O	O:0.966180
[	O	O:0.999996
a	O	O:0.999954
[	O	O:0.999487
'	O	O:0.999993
value	O	O:0.999954
']	O	O:0.999887
.apply	B-API	B-API:0.998308
(	O	O:0.999948
has_substring	O	O:0.993813
,	O	O:0.999985
args	O	O:0.998919
=[	O	O:0.999877
'	O	O:0.999980
regen	O	O:0.999457
'])	O	O:0.999943
,	O	O:0.999818
'	O	O:0.999968
key	O	O:0.999972
']	O	O:0.999921
+=	O	O:0.999556
'	O	O:0.999947
_regen	O	O:0.993804
'`	O	O:0.999922
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999977
apply	O	B-API:0.984714
`	O	O:0.999976
to	O	O:0.999933
check	O	O:0.999995
whether	O	O:0.999991
each	O	O:0.999623
row	O	O:0.999938
satisfy	O	O:0.999822
the	O	O:0.999963
condition	O	O:0.999538
,	O	O:0.999995
and	O	O:0.999991
use	O	O:0.999981
the	O	O:0.999793
resulting	O	O:0.997265
boolean	O	O:0.998923
Series	O	O:0.999926
to	O	O:0.999987
do	O	O:0.999999
the	O	O:0.999936
slicing	O	O:0.989225
:	O	O:0.999936
#CODE	O	O:0.999811
	
Thank	O	O:0.999328
you	O	O:0.999761
!	O	O:0.999952
	
`	O	O:0.999973
apply	O	B-API:0.983231
`	O	O:0.999969
does	O	O:0.997851
the	O	O:0.999991
trick	O	O:0.999770
.	O	O:0.999876
	
I	O	O:0.999983
need	O	O:0.999973
the	O	O:0.999637
try	O	O:0.999901
statement	O	O:0.999966
to	O	O:0.999994
filter	O	O:0.999984
some	O	O:0.999634
NaNs	O	O:0.999874
...	O	O:0.999544
	
1st	O	O:0.998628
problem	O	O:0.999292
:	O	O:0.999971
I	O	O:0.999992
couldnt	O	O:0.999972
figure	O	O:0.999570
out	O	O:0.999971
how	O	O:0.999985
to	O	O:0.999983
use	O	O:0.999992
'	O	O:0.999937
apply	O	O:0.539444
'	O	O:0.999872
or	O	O:0.999994
something	O	O:0.999964
instead	O	O:0.999984
of	O	O:0.999998
the	O	O:0.999965
for	O	O:0.999973
loop	O	O:0.998123
.	O	O:0.999699
	
Does	O	O:0.999426
anyone	O	O:0.999936
know	O	O:0.999905
a	O	O:0.999997
more	O	O:0.998934
efficient	O	O:0.999700
way	O	O:0.999924
?	O	O:0.999925
	
Second	O	O:0.998918
problem	O	O:0.996448
:	O	O:0.999962
#CODE	O	O:0.999803
	
I	O	O:0.999954
use	O	O:0.999939
`	O	O:0.998981
np.vectorize	B-API	B-API:0.997860
`	O	O:0.999994
to	O	O:0.999942
apply	O	O:0.995872
this	O	O:0.998924
function	O	O:0.999948
on	O	O:0.999998
a	O	O:0.999977
`	O	O:0.999977
DataFrame	B-API	O:0.911015
`	O	O:0.999993
-	O	O:0.999632
`	O	O:0.999997
dataFrame	B-API	O:0.951860
`	O	O:0.999988
-	O	O:0.999981
that	O	O:0.999954
has	O	O:0.999996
about	O	O:0.999889
22	O	O:0.999953
million	O	O:0.999688
rows	O	O:0.998626
.	O	O:0.999840
	
#CODE	O	O:0.998453
	
plz	O	O:0.999790
show	O	O:0.999732
the	O	O:0.999980
related	O	O:0.999758
code	O	O:0.999920
where	O	O:0.999983
you	O	O:0.999989
apply	O	O:0.834280
`	O	O:0.999972
getData	B-API	B-API:0.959368
`	O	O:0.999997
over	O	O:0.998174
the	O	O:0.999967
data-frame	O	O:0.999975
	
Warning	O	O:0.997054
:	O	O:0.999901
In	O	O:0.999990
the	O	O:0.999997
current	O	O:0.999572
implementation	O	O:0.999881
apply	O	O:0.629478
calls	O	O:0.999463
func	O	O:0.999208
twice	O	O:0.999601
on	O	O:0.999990
the	O	O:0.999944
	
@USER	O	O:0.999497
I	O	O:0.999979
agree	O	O:0.999915
that	O	O:0.999796
this	O	O:0.999939
should	O	O:0.999989
raise	O	O:0.999889
for	O	O:0.999963
now	O	O:0.999393
.	O	O:0.999819
	
I	O	O:0.999832
wasn't	O	O:0.999952
sure	O	O:0.999643
if	O	O:0.999986
I	O	O:0.999978
was	O	O:0.999971
using	O	O:0.998934
this	O	O:0.998197
method	O	O:0.999670
wrong	O	O:0.999634
but	O	O:0.999981
an	O	O:0.999987
obvious	O	O:0.999616
workaround	O	O:0.999743
would	O	O:0.999966
be	O	O:0.999999
to	O	O:0.999999
iterate	O	O:0.999968
through	O	O:0.999909
each	O	O:0.999686
column	O	O:0.999838
and	O	O:0.999998
apply	O	B-API:0.501219
fillna()	B-API	B-API:0.999433
with	O	O:0.997651
axis=0	O	O:0.997830
.	O	O:0.999841
	
Would	O	O:0.999471
it	O	O:0.999991
be	O	O:0.999995
so	O	O:0.999997
hard	O	O:0.999471
to	O	O:0.999988
incorporate	O	O:0.999995
this	O	O:0.999953
for	O	O:0.999997
when	O	O:0.998311
the	O	O:0.999964
method	O	O:0.999899
is	O	O:0.999989
applied	O	O:0.999897
to	O	O:0.999987
dataframes	O	O:0.999947
?	O	O:0.999948
	
Hi	O	O:0.999806
CT	O	O:0.999894
--	O	O:0.999992
so	O	O:0.999990
a	O	O:0.999999
bit	O	O:0.999913
of	O	O:0.999998
a	O	O:0.999978
problem	O	O:0.999415
/	O	O:0.999969
update	O	O:0.999871
that	O	O:0.999931
I	O	O:0.999997
am	O	O:0.999999
struggling	O	O:0.997416
with	O	O:0.999880
here	O	O:0.998509
.	O	O:0.999942
	
This	O	O:0.999263
solution	O	O:0.998694
works	O	O:0.999946
..	O	O:0.999926
sorta	O	O:0.997024
.	O	O:0.999898
	
I	O	O:0.999961
tried	O	O:0.999932
to	O	O:0.999904
apply	O	O:0.987747
this	O	O:0.999709
solution	O	O:0.999800
to	O	O:0.999997
my	O	O:0.999999
larger	O	O:0.999890
data	O	O:0.999942
frame	O	O:0.999995
and	O	O:0.999995
at	O	O:0.999996
first	O	O:0.998827
glance	O	O:0.998090
it	O	O:0.999691
worked	O	O:0.999808
wonders	O	O:0.998539
,	O	O:0.999981
but	O	O:0.999955
now	O	O:0.999972
taking	O	O:0.999985
a	O	O:0.999976
closer	O	O:0.996544
look	O	O:0.999857
there	O	O:0.999846
are	O	O:0.999992
several	O	O:0.999977
instances	O	O:0.999747
of	O	O:0.999969
"	O	O:0.999990
looped	O	O:0.999817
phrases	O	O:0.997267
"	O	O:0.999995
that	O	O:0.999939
slipped	O	O:0.999944
through	O	O:0.999854
the	O	O:0.999938
cracks	O	O:0.996865
.	O	O:0.999904
	
Any	O	O:0.999842
idea	O	O:0.999204
why	O	O:0.999991
this	O	O:0.999932
could	O	O:0.999972
be	O	O:0.999997
?	O	O:0.999985
	
You	O	O:0.999924
could	O	O:0.999973
sort	O	O:0.999961
the	O	O:0.999998
values	O	O:0.999517
in	O	O:0.999992
columns	O	O:0.999958
`	O	O:0.999988
A	O	O:0.999691
`	O	O:0.999986
and	O	O:0.999774
`	O	O:0.999994
B	O	O:0.995087
`	O	O:0.999993
so	O	O:0.999975
that	O	O:0.999984
for	O	O:1.000000
each	O	O:0.999614
row	O	O:0.999947
the	O	O:0.999993
value	O	O:0.999872
in	O	O:0.999948
`	O	O:0.999984
A	O	O:0.999867
`	O	O:0.999976
is	O	O:0.999936
less	O	O:0.999850
than	O	O:0.999904
or	O	O:0.999998
equal	O	O:0.999803
to	O	O:0.999998
the	O	O:1.000000
value	O	O:0.999898
in	O	O:0.999973
`	O	O:0.999993
B	O	O:0.998652
`	O	O:0.999982
.	O	O:0.999051
	
Once	O	O:0.999943
the	O	O:0.999985
values	O	O:0.999562
are	O	O:0.999982
ordered	O	O:0.999940
,	O	O:0.999998
then	O	O:0.999916
you	O	O:0.999998
could	O	O:0.999996
apply	O	O:0.880090
`	O	O:0.999976
groupby-transform-max	O	O:0.971495
`	O	O:0.999996
as	O	O:0.999917
usual	O	O:0.997768
:	O	O:0.999909
#CODE	O	O:0.999441
	
I	O	O:0.999971
first	O	O:0.999920
tried	O	O:0.999587
using	O	O:0.999347
apply	O	B-API:0.987973
but	O	O:0.988151
it's	O	O:0.998501
not	O	O:0.999989
possible	O	O:0.999934
to	O	O:0.999985
return	O	O:0.999976
multiple	O	O:0.999862
Series	O	O:0.999951
as	O	O:0.999996
far	O	O:0.999945
as	O	O:0.999987
I	O	O:0.999962
know	O	O:0.999863
.	O	O:0.999678
iterrows	B-API	B-API:0.938294
seems	O	O:0.999939
to	O	O:0.999985
be	O	O:1.000000
the	O	O:0.999987
trick	O	O:0.999205
.	O	O:0.999910
	
But	O	O:0.999932
the	O	O:0.999992
code	O	O:0.999375
below	O	O:0.999885
gives	O	O:0.999953
me	O	O:0.999976
an	O	O:0.999988
empty	O	O:0.999284
dataframe	B-API	O:0.996054
...	O	O:0.998972
	
#CODE	O	O:0.998453
	
no	O	O:0.999973
need	O	O:0.999908
for	O	O:0.999995
apply	O	B-API:0.669036
;	O	O:0.999898
you	O	O:0.999935
can	O	O:0.999999
directly	O	O:0.999999
subtract	O	O:0.999823
a	O	O:0.999993
Timestamp	O	O:0.997554
from	O	O:0.999981
a	O	O:0.999997
column	O	O:0.999909
to	O	O:0.999998
yield	O	O:0.999998
a	O	O:0.999994
timedelta64	O	O:0.989517
dtype	B-API	B-API:0.985962
	
Desired	O	O:0.998985
output	O	O:0.999597
-	O	O:0.999973
A	O	O:0.999967
new	O	O:0.999971
DataFrame	B-API	O:0.996369
of	O	O:0.999976
grouped	O	O:0.996880
/	O	O:0.999996
aggregated	O	O:0.999834
coordinates	O	O:0.998892
in	O	O:0.999989
an	O	O:0.999995
array	O	O:0.999975
so	O	O:0.999995
that	O	O:0.999962
I	O	O:0.999999
can	O	O:0.999997
apply	O	O:0.960823
a	O	O:0.999952
fuction	O	O:0.998754
to	O	O:0.999994
each	O	O:0.999943
array	O	O:0.999544
:	O	O:0.999967
#CODE	O	O:0.999825
	
Distance	O	O:0.999761
calculation	O	O:0.999836
I	O	O:0.999999
wish	O	O:0.999979
to	O	O:0.999858
apply	O	O:0.954635
...	O	O:0.997367
	
#CODE	O	O:0.998453
	
note	O	O:0.999819
that	O	O:0.999960
to	O	O:0.999998
apply	O	O:0.998486
your	O	O:0.999684
distance	O	O:0.999047
function	O	O:0.999990
you	O	O:0.999995
have	O	O:0.999988
to	O	O:0.999994
do	O	O:0.999986
:	O	O:0.999982
#CODE	O	O:0.999772
	
One	O	O:0.999693
method	O	O:0.999903
could	O	O:0.999961
be	O	O:0.999999
to	O	O:0.999998
apply	O	O:0.974192
a	O	O:0.999984
lambda	O	O:0.995465
to	O	O:0.999989
the	O	O:0.999999
column	O	O:0.999879
and	O	O:0.999992
use	O	O:0.999969
the	O	O:0.997776
boolean	O	O:0.992459
index	O	O:0.999758
returned	O	O:0.999950
this	O	O:0.999806
to	O	O:0.999986
index	O	O:0.999982
against	O	O:0.999350
:	O	O:0.999973
#CODE	O	O:0.999837
	
FYI	O	O:0.999206
-	O	O:0.999991
no	O	O:0.999990
need	O	O:0.999970
to	O	O:0.999995
use	O	O:0.999998
apply	O	B-API:0.764012
here	O	O:0.955585
(	O	O:0.999876
tz_localize	B-API	B-API:0.985743
/	O	O:0.999934
convert	O	O:0.991937
are	O	O:0.999992
methods	O	O:0.999059
on	O	O:0.999911
index	O	O:0.999847
and	O	O:0.999997
series	O	O:0.999950
)	O	O:0.999852
	
Thanks	O	O:0.998129
@USER	O	O:0.998815
.	O	O:0.999745
	
I	O	O:0.999957
tried	O	O:0.999979
that	O	O:0.999249
in	O	O:0.999993
the	O	O:0.999995
past	O	O:0.999476
without	O	O:0.999840
luck	O	O:0.997944
.	O	O:0.999774
	
I	O	O:0.999881
opened	O	O:0.999971
this	O	O:0.999858
question	O	O:0.999938
separately	O	O:0.999434
:	O	O:0.999846
[	O	O:0.999988
Unable	O	O:0.999959
to	O	O:0.999984
apply	O	O:0.988874
methods	O	O:0.999520
on	O	O:0.999981
timestamps	O	O:0.998244
in	O	O:0.999992
Pandas	O	O:0.999945
using	O	O:0.999826
Series	O	O:0.997718
built-ins	O	O:0.997099
]	O	O:0.999523
(	O	O:0.999886
#URL	O	O:0.999477
)	O	O:0.999917
	
Unable	O	O:0.999571
to	O	O:0.999983
apply	O	O:0.987434
methods	O	O:0.999474
on	O	O:0.999975
timestamps	O	O:0.999484
using	O	O:0.999913
Series	O	O:0.997946
built-ins	O	O:0.996378
	
In	O	O:0.999626
norm.ppf	O	O:0.807514
(	O	O:0.999985
probability	O	O:0.999554
,	O	O:0.999996
mean	O	O:0.999731
,	O	O:0.999998
standard	O	O:0.999918
deviation	O	O:0.999935
)	O	O:0.999997
so	O	O:0.999960
10	O	O:0.999001
is	O	O:0.999986
mean	O	O:0.998678
and	O	O:0.999989
5	O	O:0.999363
is	O	O:0.999709
std	O	O:0.975391
.	O	O:0.999763
	
My	O	O:0.999957
code	O	O:0.999815
will	O	O:0.999941
apply	O	O:0.825107
the	O	O:0.999908
norm.ppf	O	O:0.866159
for	O	O:0.999988
every	O	O:0.999793
element	O	O:0.999877
of	O	O:0.999929
lts	O	O:0.998094
.	O	O:0.999925
	
Using	O	O:0.999005
Apply	O	O:0.999027
Map	O	O:0.999536
to	O	O:0.999850
Remove	O	O:0.999926
Unwanted	O	O:0.999859
Phrases	O	O:0.999747
from	O	O:0.999359
DF	O	O:0.999951
(	O	O:0.999988
Pandas	O	O:0.999810
,	O	O:0.999991
Python	O	O:0.999607
3	O	O:0.999895
)	O	O:0.999940
	
What	O	O:0.999836
do	O	O:0.999956
you	O	O:0.999998
mean	O	O:0.999972
by	O	O:0.999989
"	O	O:0.999997
remove	O	O:0.998331
cells	O	O:0.999140
"	O	O:0.999965
?	O	O:0.999909
	
I	O	O:0.999986
think	O	O:0.999931
you	O	O:0.999981
mean	O	O:0.999986
remove	O	O:0.999978
rows	O	O:0.999848
right	O	O:0.999784
?	O	O:0.999990
	
Then	O	O:0.999839
this	O	O:0.999986
will	O	O:0.999985
be	O	O:0.999998
an	O	O:0.999995
`	O	O:0.999978
apply	O	B-API:0.978866
`	O	O:0.999964
since	O	O:0.998863
you'll	O	O:0.999910
consider	O	O:0.999982
things	O	O:0.999837
rowwise	O	O:0.999349
.	O	O:0.999882
	
#CODE	O	O:0.998453
	
You	O	O:0.999899
can	O	O:0.999960
vectorize	B-API	O:0.867881
'	O	O:0.999990
Words1	O	O:0.999036
'	O	O:0.999990
into	O	O:0.999907
a	O	O:0.999984
series	O	O:0.998650
and	O	O:0.999998
then	O	O:0.999959
apply	O	O:0.916907
a	O	O:0.999886
regex	O	O:0.946831
:	O	O:0.999945
#CODE	O	O:0.999833
	
The	O	O:0.999867
second	O	O:0.999932
part	O	O:0.999939
of	O	O:0.999994
my	O	O:0.999986
code	O	O:0.999576
is	O	O:0.999972
function	O	O:0.999854
I	O	O:0.999977
am	O	O:0.999997
trying	O	O:0.999535
to	O	O:0.999978
apply	O	O:0.761834
#CODE	O	O:0.998208
	
Pandas	O	O:0.999309
Groupby	B-API	O:0.810217
Apply	O	O:0.999357
Function	O	O:0.997954
to	O	O:0.999866
Level	O	O:0.999921
	
Assuming	O	O:0.999774
you	O	O:0.999989
have	O	O:0.999995
a	O	O:0.999999
series	O	O:0.999880
`	O	O:0.999995
s	O	O:0.999066
`	O	O:0.999994
,	O	O:0.999983
with	O	O:0.999978
a	O	O:0.999953
MultiIndex	O	O:0.948853
andthe	O	O:0.999906
two	O	O:0.999985
levels	O	O:0.999915
you	O	O:0.999994
have	O	O:0.999990
shown	O	O:0.999943
,	O	O:0.999999
you	O	O:0.999988
can	O	O:0.999976
groupby	B-API	O:0.617267
the	O	O:0.999997
first	O	O:0.999683
level	O	O:0.999357
and	O	O:0.999991
apply	O	O:0.621106
the	O	O:0.999150
`'	O	O:0.999786
first	O	O:0.999278
'`	O	O:0.999939
/	O	O:0.999899
`'	O	O:0.999972
last	O	O:0.999454
'`	O	O:0.999993
aggregations	O	O:0.999607
to	O	O:0.999988
get	O	O:0.999999
the	O	O:0.999997
values	O	O:0.999751
you	O	O:0.999977
want	O	O:0.999963
.	O	O:0.999943
	
#CODE	O	O:0.998453
	
What	O	O:0.999922
have	O	O:0.999917
you	O	O:0.999988
tried	O	O:0.999962
here	O	O:0.999753
?	O	O:0.999940
	
You	O	O:0.999907
could	O	O:0.999941
apply	O	O:0.991825
your	O	O:0.998491
function	O	O:0.999800
row-wise	O	O:0.999009
which	O	O:0.999662
would	O	O:0.999933
look	O	O:0.999990
something	O	O:0.999995
like	O	O:0.999882
`	O	O:0.999996
df	O	O:0.998530
[	O	O:0.999985
'	O	O:0.999980
ls	O	O:0.999882
']	O	O:0.999951
=	O	O:0.998494
df.apply	B-API	B-API:0.990149
(	O	O:0.999975
lambda	O	O:0.998699
row	O	O:0.999691
:	O	O:0.999838
checker	O	O:0.999164
(	O	O:0.999996
x.Review	O	O:0.998208
)	O	O:0.999983
,	O	O:0.999983
axis=1	O	O:0.999517
)`	O	O:0.999764
but	O	O:0.999968
ideally	O	O:0.999972
you	O	O:0.999997
want	O	O:0.999975
to	O	O:0.999994
vectorise	O	O:0.999999
your	O	O:0.999637
function	O	O:0.999935
so	O	O:0.999998
that	O	O:0.999977
it	O	O:0.999998
can	O	O:0.999992
be	O	O:1.000000
done	O	O:0.999979
on	O	O:0.999989
the	O	O:0.999998
whole	O	O:0.999963
column	O	O:0.999979
,	O	O:0.999998
at	O	O:0.999998
the	O	O:0.999964
moment	O	O:0.999992
your	O	O:0.998905
function	O	O:0.999891
looks	O	O:0.999965
incomplete	O	O:0.999874
so	O	O:0.999960
it's	O	O:0.999968
hard	O	O:0.999838
to	O	O:0.999989
suggest	O	O:0.999992
what	O	O:0.999957
improvements	O	O:0.999913
can	O	O:0.999983
be	O	O:0.999999
made	O	O:0.999804
	
The	O	O:0.999928
easiest	O	O:0.999416
way	O	O:0.999927
would	O	O:0.999955
be	O	O:0.999998
to	O	O:0.999999
specific	O	O:0.999997
a	O	O:0.999999
single	O	O:0.999928
column	O	O:0.999984
of	O	O:0.999992
the	O	O:0.999872
groupby	B-API	B-API:0.998236
(	O	O:0.999913
doesn't	O	O:0.999804
matter	O	O:0.999915
which	O	O:0.999986
one	O	O:0.999980
)	O	O:0.999990
,	O	O:0.999985
and	O	O:0.999989
use	O	O:0.999890
`	O	O:0.999820
transform	O	B-API:0.982140
`	O	O:0.999992
instead	O	O:0.999924
of	O	O:0.999995
`	O	O:0.999981
apply	O	B-API:0.958608
`	O	O:0.999942
,	O	O:0.999919
like	O	O:0.999983
this	O	O:0.999826
.	O	O:0.999948
	
#CODE	O	O:0.998453
	
The	O	O:0.999802
reason	O	O:0.999906
this	O	O:0.999912
didn't	O	O:0.999963
work	O	O:0.999931
while	O	O:0.999998
your	O	O:0.999960
first	O	O:0.999778
did	O	O:0.999820
is	O	O:0.999993
that	O	O:0.999988
your	O	O:0.999891
function	O	O:0.999976
returns	O	O:0.999965
a	O	O:0.999998
single	O	O:0.999546
value	O	O:0.999983
,	O	O:0.999983
rather	O	O:0.999983
than	O	O:0.999916
an	O	O:0.999998
array	O	O:0.999996
of	O	O:0.999986
values	O	O:0.999436
,	O	O:0.999998
so	O	O:0.999994
`	O	O:0.999992
transform	O	B-API:0.975659
`	O	O:0.999997
broadcasts	O	O:0.999894
back	O	O:0.999834
to	O	O:0.999988
the	O	O:1.000000
original	O	O:0.999767
frame's	O	O:0.999962
shape	O	O:0.999931
,	O	O:0.999996
while	O	O:0.999946
`	O	O:0.999983
apply	O	B-API:0.950002
`	O	O:0.999712
is	O	O:0.999874
more	O	O:0.999731
flexible	O	O:0.999157
and	O	O:0.999979
generally	O	O:0.999925
passes	O	O:0.999665
back	O	O:0.999183
whatever	O	O:0.999965
shape	O	O:0.999987
your	O	O:0.999354
function	O	O:0.999886
returns	O	O:0.999500
.	O	O:0.999837
	
If	O	O:0.999967
you	O	O:0.999994
just	O	O:0.999985
want	O	O:0.999995
the	O	O:0.999985
column	O	O:0.999969
headings	O	O:0.999945
,	O	O:0.999998
you	O	O:0.999994
can	O	O:0.999988
apply	O	O:0.983551
the	O	O:0.999981
mask	O	O:0.826463
to	O	O:0.999985
itself	O	O:0.999980
.	O	O:0.999954
	
#CODE	O	O:0.998453
	
But	O	O:0.999960
what	O	O:0.999957
if	O	O:0.999991
I	O	O:0.999999
want	O	O:0.999989
to	O	O:0.999940
get	O	O:0.999999
the	O	O:0.999999
percentage	O	O:0.999885
of	O	O:0.999991
the	O	O:0.999994
vote	O	O:0.999951
each	O	O:0.999835
candidate	O	O:0.999819
got	O	O:0.999955
?	O	O:0.999953
	
Would	O	O:0.999443
I	O	O:0.999997
have	O	O:0.999990
to	O	O:0.999984
apply	O	O:0.997333
some	O	O:0.999939
sort	O	O:0.999325
of	O	O:0.999985
function	O	O:0.999913
on	O	O:0.999999
each	O	O:0.999960
data	O	O:0.999904
object	O	O:0.999898
?	O	O:0.999970
	
Ideally	O	O:0.999857
I	O	O:0.999985
would	O	O:0.999995
like	O	O:0.999937
the	O	O:1.000000
final	O	O:0.999880
data	O	O:0.999927
object	O	O:0.999930
to	O	O:0.999995
look	O	O:0.999986
like	O	O:0.999348
:	O	O:0.999981
#CODE	O	O:0.999847
	
We	O	O:0.999967
can	O	O:0.999957
perform	O	O:0.999988
a	O	O:0.999996
groupby	B-API	B-API:0.991439
on	O	O:0.999887
'	O	O:0.999812
A	O	O:0.999964
'	O	O:0.999948
and	O	O:0.999998
then	O	O:0.999940
apply	O	O:0.954230
a	O	O:0.999727
function	O	O:0.976552
(	O	O:0.999990
lambda	O	O:0.999321
in	O	O:0.999992
this	O	O:0.999951
case	O	O:0.999982
)	O	O:0.999999
where	O	O:0.999954
we	O	O:0.999995
join	O	O:0.622608
the	O	O:0.999990
desired	O	O:0.999667
delimiter	O	O:0.999848
`	O	O:0.999986
;	O	O:0.999862
`	O	O:0.999995
with	O	O:0.999945
a	O	O:0.999998
list	O	O:0.999498
comprehension	O	O:0.999874
of	O	O:0.999997
the	O	O:0.999957
B	O	O:0.999956
values	O	O:0.998884
.	O	O:0.999756
	
In	O	O:0.999938
Python	O	O:0.999887
you	O	O:0.999988
can	O	O:0.999994
join	O	O:0.988949
things	O	O:0.999990
by	O	O:0.999996
using	O	O:0.999885
`	O	O:0.999562
some_delimiter.join	O	O:0.598365
(	O	O:0.999994
things_you_want_to_join	O	O:0.998865
)`	O	O:0.999863
,	O	O:0.999982
e.g.	O	O:0.999734
`'	O	O:0.999912
,	O	O:0.999955
'	O	O:0.999905
.join	B-API	B-API:0.994122
(	O	O:0.999967
"	O	O:0.999990
abc	O	O:0.999411
")	O	O:0.999798
==	O	O:0.999355
'	O	O:0.999992
a	O	O:0.999991
,	O	O:0.999970
b	O	O:0.999927
,	O	O:0.999989
c	O	O:0.999792
'`	O	O:0.999945
.	O	O:0.999654
	
We	O	O:0.999966
can	O	O:0.999962
apply	O	O:0.996107
that	O	O:0.999880
to	O	O:0.999995
the	O	O:1.000000
`	O	O:0.999973
B	O	O:0.998878
`	O	O:0.999999
column	O	O:0.996621
after	O	O:0.999994
grouping	O	O:0.999371
on	O	O:0.999815
`	O	O:0.999961
A	O	O:0.999496
`	O	O:0.999951
:	O	O:0.999712
#CODE	O	O:0.999908
	
I	O	O:0.999869
wouldn't	O	O:0.999971
worry	O	O:0.998976
about	O	O:0.999920
it	O	O:0.999899
,	O	O:0.999970
it	O	O:0.999992
seems	O	O:0.999706
ok	O	O:0.999956
but	O	O:0.999980
I	O	O:0.999998
think	O	O:0.999975
you	O	O:0.999976
have	O	O:0.999983
to	O	O:0.999998
show	O	O:0.999989
what	O	O:0.999956
you've	O	O:0.999983
tried	O	O:0.999932
at	O	O:0.999991
the	O	O:0.999988
very	O	O:0.999732
least	O	O:0.999918
plus	O	O:0.999962
any	O	O:0.999967
code	O	O:0.999478
and	O	O:0.999988
approaches	O	O:0.999786
,	O	O:0.999937
it	O	O:0.999965
would	O	O:0.999973
help	O	O:0.999981
also	O	O:0.999995
to	O	O:0.999998
show	O	O:0.999956
what	O	O:0.999925
you've	O	O:0.999914
tried	O	O:0.999915
that	O	O:0.999901
works	O	O:0.999960
on	O	O:0.999999
simple	O	O:0.999934
data	O	O:0.999856
i.e.	O	O:0.999879
not	O	O:0.999985
in	O	O:0.999996
a	O	O:0.999994
pandas	O	O:0.999643
dataframe	B-API	O:0.996865
and	O	O:0.999977
are	O	O:0.999989
asking	O	O:0.998969
how	O	O:0.999931
to	O	O:0.999981
apply	O	O:0.994721
that	O	O:0.999506
to	O	O:0.999997
pandas	O	O:0.999987
would	O	O:0.999975
probably	O	O:0.999950
help	O	O:0.999737
.	O	O:0.999886
	
I	O	O:0.999992
guess	O	O:0.999896
at	O	O:0.999991
this	O	O:0.999733
point	O	O:0.999929
this	O	O:0.999924
looks	O	O:0.999989
like	O	O:0.999959
an	O	O:0.999997
open	O	O:0.999572
exercise	O	O:0.999958
without	O	O:0.999904
demonstrating	O	O:0.999910
your	O	O:0.999345
efforts	O	O:0.998544
	
since	O	O:0.999817
,	O	O:0.999986
per	O	O:0.999985
the	O	O:0.999954
docs	O	O:0.999812
,	O	O:0.999982
"	O	O:0.999983
[	O	O:0.999992
a	O	O:0.999986
]	O	O:0.999920
dditional	O	O:0.998087
keyword	O	O:0.999886
arguments	O	O:0.999326
[	O	O:0.999976
to	O	O:0.999982
`	O	O:0.999999
apply	O	B-API:0.990951
`]	O	O:0.998738
will	O	O:0.999269
be	O	O:0.999998
passed	O	O:0.999944
as	O	O:0.999990
keywords	O	O:0.999287
to	O	O:0.999989
the	O	O:0.999996
function	O	O:0.999392
"	O	O:0.999959
.	O	O:0.999875
	
hmmm	O	O:0.999375
this	O	O:0.999959
gets	O	O:0.999932
me	O	O:0.999999
sort	O	O:0.999655
of	O	O:0.999995
the	O	O:0.999946
way	O	O:0.999924
here	O	O:0.996122
but	O	O:0.999977
not	O	O:0.999989
quite	O	O:0.999874
--	O	O:0.999991
how	O	O:0.999938
can	O	O:0.999990
I	O	O:1.000000
apply	O	O:0.980590
that	O	O:0.999347
if	O	O:0.999989
I	O	O:0.999999
need	O	O:0.999984
to	O	O:0.999977
actually	O	O:0.999999
CALL	O	O:0.999524
the	O	O:0.999991
dataframe	B-API	O:0.997000
in	O	O:0.999986
the	O	O:0.999975
arguement	O	O:0.999768
?	O	O:0.999912
	
Edited	O	O:0.999609
OP	O	O:0.999930
above	O	O:0.998901
	
One	O	O:0.999845
way	O	O:0.999833
would	O	O:0.999962
be	O	O:0.999999
to	O	O:0.999999
create	O	O:0.999979
a	O	O:0.999997
custom	O	O:0.997841
apply	O	B-API:0.728167
function	O	O:0.997852
and	O	O:0.999982
check	O	O:0.999937
each	O	O:0.999455
datum's	O	O:0.999082
YMD	O	O:0.999267
and	O	O:0.999997
look	O	O:0.999579
up	O	O:0.999833
the	O	O:0.999990
corresponding	O	O:0.998203
low	O	O:0.999921
frequency	O	O:0.999966
data	O	O:0.999429
,	O	O:0.999978
but	O	O:0.999993
that	O	O:0.999866
seems	O	O:0.999984
pretty	O	O:0.999788
inefficient	O	O:0.999270
.	O	O:0.999771
	
It	O	O:0.999945
does	O	O:0.999909
what	O	O:0.999975
you	O	O:0.999996
describe	O	O:0.999971
,	O	O:0.999998
go	O	O:0.999939
row-wise	O	O:0.994784
(	O	O:0.999991
so	O	O:0.999997
apply	O	O:0.906054
over	O	O:0.996902
`	O	O:0.999952
axis=1	O	O:0.998280
`)	O	O:0.999994
along	O	O:0.998213
`	O	O:0.999978
df	O	O:0.992227
`	O	O:0.999993
and	O	O:0.999894
use	O	O:0.999995
the	O	O:0.999936
entries	O	O:0.995048
as	O	O:0.999979
index	O	O:0.999930
for	O	O:0.999995
selecting	O	O:0.999287
in	O	O:0.999760
`	O	O:0.999980
P	O	O:0.997933
`	O	O:0.999982
.	O	O:0.999040
	
Parallelize	O	O:0.999683
apply	O	B-API:0.848404
after	O	O:0.999487
pandas	O	O:0.993763
groupby	B-API	B-API:0.980888
	
I	O	O:0.999984
have	O	O:0.999973
used	O	O:0.999848
rosetta.parallel.pandas_easy	O	O:0.996411
to	O	O:0.999988
parallelize	O	O:0.999982
apply	O	B-API:0.509146
after	O	O:0.999907
group	O	O:0.997472
by	O	O:0.999955
,	O	O:0.999977
for	O	O:0.999878
example	O	O:0.993111
:	O	O:0.999918
#CODE	O	O:0.999890
	
I	O	O:0.999992
have	O	O:0.999991
a	O	O:0.999991
hack	O	O:0.999791
I	O	O:0.999994
use	O	O:0.999979
for	O	O:0.999480
getting	O	O:0.997331
parallelization	O	O:0.995708
in	O	O:0.999950
Pandas	O	O:0.999625
.	O	O:0.999840
	
I	O	O:0.999977
break	O	O:0.999518
my	O	O:0.999889
dataframe	B-API	O:0.998694
into	O	O:0.999727
chunks	O	O:0.999904
,	O	O:0.999992
put	O	O:0.999964
each	O	O:0.999892
chunk	O	O:0.999908
into	O	O:0.999881
the	O	O:0.999995
element	O	O:0.999797
of	O	O:0.999985
a	O	O:0.999988
list	O	O:0.997397
,	O	O:0.999985
and	O	O:0.999999
then	O	O:0.999686
use	O	O:0.999956
ipython's	O	O:0.999636
parallel	O	O:0.999324
bits	O	O:0.999822
to	O	O:0.999990
do	O	O:1.000000
a	O	O:0.999998
parallel	O	O:0.999200
apply	O	O:0.725796
on	O	O:0.999729
the	O	O:0.999982
list	O	O:0.999749
of	O	O:0.999989
dataframes	O	O:0.998805
.	O	O:0.999957
	
Then	O	O:0.999768
I	O	O:0.999999
put	O	O:0.999862
the	O	O:0.999973
list	O	O:0.999757
back	O	O:0.999886
together	O	O:0.999887
using	O	O:0.999974
pandas	O	O:0.997773
`	O	O:0.999920
concat	O	B-API:0.997270
`	O	O:0.999898
function	O	O:0.999249
.	O	O:0.999932
	
This	O	O:0.995618
is	O	O:0.999970
not	O	O:0.999963
generally	O	O:0.999963
applicable	O	O:0.999936
,	O	O:0.999961
however	O	O:0.999668
.	O	O:0.999900
	
It	O	O:0.999906
works	O	O:0.999919
for	O	O:0.999989
me	O	O:0.999776
because	O	O:0.999900
the	O	O:0.999942
function	O	O:0.999944
I	O	O:0.999996
want	O	O:0.999990
to	O	O:0.999970
apply	O	O:0.982058
to	O	O:0.999988
each	O	O:0.999994
chunk	O	O:0.999950
of	O	O:0.999991
the	O	O:0.999976
dataframe	B-API	O:0.999616
takes	O	O:0.999886
about	O	O:0.999991
a	O	O:0.999964
minute	O	O:0.961928
.	O	O:0.999821
	
And	O	O:0.999896
the	O	O:0.999996
pulling	O	O:0.998934
apart	O	O:0.999155
and	O	O:0.999997
putting	O	O:0.999933
together	O	O:0.998259
of	O	O:0.999998
my	O	O:0.999976
data	O	O:0.999918
does	O	O:0.999877
not	O	O:0.999999
take	O	O:0.999983
all	O	O:0.999993
that	O	O:0.999974
long	O	O:0.999760
.	O	O:0.999923
	
So	O	O:0.999989
this	O	O:0.999780
is	O	O:0.999996
clearly	O	O:0.999708
a	O	O:0.999979
kludge	O	O:0.996390
.	O	O:0.999797
	
With	O	O:0.999866
that	O	O:0.999935
said	O	O:0.999946
,	O	O:0.999997
here's	O	O:0.999825
an	O	O:0.999971
example	O	O:0.999813
.	O	O:0.999883
	
I'm	O	O:0.999926
using	O	O:0.999769
Ipython	O	O:0.997579
notebook	O	O:0.999648
so	O	O:0.999970
you'll	O	O:0.999882
see	O	O:0.999919
`	O	O:0.999992
%%time	O	O:0.996213
`	O	O:0.999993
magic	O	O:0.999347
in	O	O:0.999993
my	O	O:0.999943
code	O	O:0.997970
:	O	O:0.999980
#CODE	O	O:0.999831
	
write	O	O:0.999890
a	O	O:0.999994
silly	O	O:0.997807
function	O	O:0.999967
to	O	O:0.999992
apply	O	O:0.977528
to	O	O:0.999989
our	O	O:0.999995
data	O	O:0.999746
#CODE	O	O:0.999840
	
I	O	O:0.999967
will	O	O:0.999883
try	O	O:0.999988
this	O	O:0.999974
with	O	O:0.999988
my	O	O:0.999990
code	O	O:0.999780
,	O	O:0.999997
thank	O	O:0.999790
you	O	O:0.999883
.	O	O:0.999960
	
Can	O	O:0.999814
you	O	O:0.999974
explain	O	O:0.999835
to	O	O:0.999995
me	O	O:0.999998
why	O	O:0.999976
apply	O	B-API:0.512625
does	O	O:0.999718
not	O	O:0.999971
automatically	O	O:0.999994
parallelize	O	O:0.999028
operations	O	O:0.999330
?	O	O:0.999941
	
It	O	O:0.999969
seems	O	O:0.999971
like	O	O:0.999975
the	O	O:0.999998
whole	O	O:0.999908
benefit	O	O:0.999922
of	O	O:0.999981
having	O	O:0.999674
the	O	O:0.999984
apply	O	B-API:0.951593
function	O	O:0.998395
is	O	O:0.999966
to	O	O:0.999977
avoid	O	O:0.999974
looping	O	O:0.997386
,	O	O:0.999842
but	O	O:0.999949
if	O	O:0.999982
it	O	O:0.999860
is	O	O:0.999990
not	O	O:0.999976
doing	O	O:0.999985
that	O	O:0.999781
with	O	O:0.999963
these	O	O:0.999984
groups	O	O:0.999438
,	O	O:0.999993
what	O	O:0.999871
gives	O	O:0.999696
?	O	O:0.999981
	
There's	O	O:0.999907
a	O	O:0.999998
long	O	O:0.999694
story	O	O:0.999869
about	O	O:0.999662
parallelization	O	O:0.999815
being	O	O:0.999769
hard	O	O:0.998731
in	O	O:0.999966
Python	O	O:0.999947
because	O	O:0.999977
of	O	O:0.999980
the	O	O:0.999924
GIL	O	O:0.999886
.	O	O:0.999763
	
Keep	O	O:0.998495
in	O	O:0.999960
mind	O	O:0.999967
that	O	O:0.999964
apply	O	B-API:0.516261
is	O	O:0.999943
usually	O	O:0.999162
syntactic	O	O:0.998907
sugar	O	O:0.998151
and	O	O:0.999957
underneath	O	O:0.999550
it's	O	O:0.999127
doing	O	O:0.999804
the	O	O:0.999883
implied	O	O:0.995787
loop	O	O:0.999137
.	O	O:0.999764
	
Using	O	O:0.999099
parallelization	O	O:0.995355
is	O	O:0.999985
somewhat	O	O:0.999527
tricky	O	O:0.999844
because	O	O:0.999969
there	O	O:0.999840
are	O	O:0.999997
runtime	O	O:0.999971
costs	O	O:0.999744
to	O	O:0.999993
parallelization	O	O:0.999988
which	O	O:0.999989
sometimes	O	O:0.999887
negate	O	O:0.999783
the	O	O:0.999995
benefits	O	O:0.999836
of	O	O:0.999952
parallelization	O	O:0.999162
.	O	O:0.999966
	
By	O	O:0.999976
doing	O	O:0.999875
small	O	O:0.999631
modification	O	O:0.998478
to	O	O:0.999988
the	O	O:0.999991
function	O	O:0.999936
it	O	O:0.999990
can	O	O:0.999992
be	O	O:1.000000
made	O	O:0.999957
to	O	O:0.999971
return	O	O:0.999889
the	O	O:0.999899
hierarchical	O	O:0.998552
index	O	O:0.999936
that	O	O:0.999925
the	O	O:0.999999
regular	O	O:0.999554
apply	O	B-API:0.834862
returns	O	O:0.963981
:	O	O:0.999676
	
pandas	O	O:0.995614
:	O	O:0.999986
how	O	O:0.999982
to	O	O:0.999997
apply	O	O:0.966643
scipy.stats	O	O:0.982615
test	O	O:0.998878
on	O	O:0.999999
a	O	O:0.999983
groupby	B-API	B-API:0.996331
object	O	O:0.999526
?	O	O:0.999786
	
How	O	O:0.999930
to	O	O:0.999953
use	O	O:0.999994
groupby	B-API	B-API:0.992524
to	O	O:0.999953
apply	O	O:0.995137
multiple	O	O:0.999499
functions	O	O:0.999577
to	O	O:0.999997
multiple	O	O:0.999999
columns	O	O:0.999767
in	O	O:0.999985
Pandas	O	O:0.999886
?	O	O:0.999933
	
Since	O	O:0.999813
you	O	O:0.999899
are	O	O:0.999999
aggregating	O	O:0.999948
each	O	O:0.999635
grouped	O	O:0.999727
column	O	O:0.999963
into	O	O:0.999866
one	O	O:0.999995
value	O	O:0.999920
,	O	O:0.999998
you	O	O:0.999992
can	O	O:0.999978
use	O	O:0.999998
`	O	O:0.999965
agg	O	B-API:0.998478
`	O	O:0.999993
instead	O	O:0.999794
of	O	O:0.999994
`	O	O:0.999978
apply	O	B-API:0.977629
`	O	O:0.999851
.	O	O:0.997815
	
The	O	O:0.999774
`	O	O:0.999939
agg	O	B-API:0.999730
`	O	O:0.999978
method	O	O:0.999495
can	O	O:0.999997
take	O	O:0.999998
a	O	O:1.000000
list	O	O:0.999731
of	O	O:0.999993
functions	O	O:0.999850
as	O	O:0.999993
input	O	O:0.999567
.	O	O:0.999871
	
The	O	O:0.999859
functions	O	O:0.999816
will	O	O:0.999917
be	O	O:0.999999
applied	O	O:0.999956
to	O	O:0.999969
each	O	O:0.999958
column	O	O:0.999026
:	O	O:0.999987
#CODE	O	O:0.999898
	
ok	O	O:0.999863
,	O	O:0.999996
I	O	O:0.999998
can	O	O:0.999990
combine	O	O:0.999838
the	O	O:0.999983
function	O	O:0.999660
`	O	O:0.999963
value_counts	B-API	B-API:0.999642
`	O	O:0.999977
and	O	O:0.999508
`	O	O:0.999990
groupby	B-API	B-API:0.999825
`	O	O:0.999988
through	O	O:0.965142
`	O	O:0.999990
apply	O	B-API:0.983693
`	O	O:0.999495
function	O	O:0.996918
.	O	O:0.999923
	
Thank	O	O:0.999255
you	O	O:0.999969
very	O	O:0.999915
much	O	O:0.999569
!	O	O:0.999916
	
@USER	O	O:0.999221
I	O	O:0.999980
tried	O	O:0.999948
with	O	O:0.999890
a	O	O:0.999981
100,000	O	O:0.997449
row	O	O:0.999928
dataframe	B-API	O:0.991978
and	O	O:0.999992
the	O	O:0.999986
difference	O	O:0.998496
becomes	O	O:0.999688
11.4ms	O	O:0.996889
vs	O	O:0.999879
.	O	O:0.999774
	
8.9ms	O	O:0.989408
for	O	O:0.999985
my	O	O:0.999711
implementation	O	O:0.999153
versus	O	O:0.999897
yours	O	O:0.998342
.	O	O:0.999783
	
There	O	O:0.998759
is	O	O:0.999992
probably	O	O:0.999920
some	O	O:0.999938
battle	O	O:0.999193
/	O	O:0.999987
tradeoff	O	O:0.999562
between	O	O:0.999396
the	O	O:0.999984
vectorised	O	O:0.998245
`	O	O:0.999924
value_counts	B-API	B-API:0.999775
`	O	O:0.999967
and	O	O:0.999952
calling	O	O:0.999512
`	O	O:0.999905
apply	O	B-API:0.992373
`	O	O:0.999902
,	O	O:0.999961
there	O	O:0.999994
maybe	O	O:0.999982
a	O	O:0.999994
better	O	O:0.996912
way	O	O:0.999715
but	O	O:0.999622
I've	O	O:0.999772
not	O	O:0.999956
figured	O	O:0.999864
out	O	O:0.999990
a	O	O:0.999990
better	O	O:0.999179
way	O	O:0.999932
yet	O	O:0.999335
	
Panda's	O	O:0.999401
DataFrame	B-API	O:0.993605
dup	O	O:0.999978
each	O	O:0.999765
row	O	O:0.999948
,	O	O:0.999999
apply	O	O:0.950663
changes	O	O:0.998029
to	O	O:0.999982
the	O	O:0.999999
duplicate	O	O:0.999854
and	O	O:0.999998
combine	O	O:0.999877
back	O	O:0.999760
into	O	O:0.999862
a	O	O:0.999987
dataframe	B-API	O:0.969234
	
I	O	O:0.999990
need	O	O:0.999989
to	O	O:0.999993
create	O	O:0.999998
a	O	O:0.999998
duplicate	O	O:0.999900
for	O	O:0.999998
each	O	O:0.999728
row	O	O:0.999861
in	O	O:0.999991
a	O	O:0.999995
dataframe	B-API	O:0.996658
,	O	O:0.999995
apply	O	O:0.920683
some	O	O:0.999823
basic	O	O:0.999691
operations	O	O:0.999889
to	O	O:0.999976
the	O	O:1.000000
duplicate	O	O:0.999839
row	O	O:0.999908
and	O	O:0.999999
then	O	O:0.999944
combine	O	O:0.999578
these	O	O:0.999997
dupped	O	O:0.999965
rows	O	O:0.999937
along	O	O:0.999814
with	O	O:0.999984
the	O	O:0.999994
originals	O	O:0.999979
back	O	O:0.999827
into	O	O:0.999931
a	O	O:0.999992
dataframe	B-API	O:0.957847
.	O	O:0.999863
	
I'm	O	O:0.999935
trying	O	O:0.999910
to	O	O:0.999980
use	O	O:0.999990
apply	O	B-API:0.923237
for	O	O:0.999542
it	O	O:0.999651
and	O	O:0.999988
the	O	O:0.999979
print	O	O:0.995851
shows	O	O:0.999882
that	O	O:0.999805
it's	O	O:0.999990
working	O	O:0.999776
correctly	O	O:0.999859
but	O	O:0.999996
when	O	O:0.999763
I	O	O:0.999997
return	O	O:0.999980
these	O	O:0.999685
2	O	O:0.999997
rows	O	O:0.999829
from	O	O:0.999965
the	O	O:0.999956
function	O	O:0.999716
and	O	O:0.999982
the	O	O:0.999994
dataframe	B-API	O:0.959366
is	O	O:0.999989
assembled	O	O:0.999744
I	O	O:0.999995
get	O	O:0.999989
an	O	O:0.999976
error	O	O:0.999952
message	O	O:0.998710
"	O	O:0.999974
cannot	O	O:0.999899
copy	O	O:0.999150
sequence	O	O:0.999985
with	O	O:0.999744
size	O	O:0.999903
7	O	O:0.999961
to	O	O:0.999990
array	O	O:0.999998
axis	O	O:0.999960
with	O	O:0.999961
dimension	O	O:0.999874
2	O	O:0.999880
"	O	O:0.999953
.	O	O:0.999687
	
It	O	O:0.999887
is	O	O:0.999992
as	O	O:0.999974
if	O	O:0.999859
it's	O	O:0.999894
trying	O	O:0.999869
to	O	O:0.999979
fit	O	O:0.999991
these	O	O:0.999943
2	O	O:0.999995
new	O	O:0.999998
rows	O	O:0.999934
back	O	O:0.999755
into	O	O:0.999950
the	O	O:0.999997
original	O	O:0.998975
1	O	O:0.999946
row	O	O:0.999958
slot	O	O:0.999690
.	O	O:0.999908
	
Any	O	O:0.999789
insight	O	O:0.999672
on	O	O:0.999981
how	O	O:0.999981
I	O	O:0.999996
can	O	O:0.999988
achieve	O	O:0.999936
it	O	O:0.999992
within	O	O:0.999400
apply	O	B-API:0.875450
(	O	O:0.998237
and	O	O:0.999981
not	O	O:0.999987
by	O	O:0.999991
iterating	O	O:0.999885
over	O	O:0.999850
every	O	O:0.999763
row	O	O:0.999953
in	O	O:0.999993
a	O	O:0.999997
loop	O	O:0.999179
)	O	O:0.999976
?	O	O:0.999909
	
#CODE	O	O:0.998453
	
The	O	O:0.999849
`	O	O:0.999980
apply	O	B-API:0.966133
`	O	O:0.999933
function	O	O:0.998720
of	O	O:0.999996
pandas	O	O:0.999847
operates	O	O:0.999948
along	O	O:0.999624
an	O	O:0.999882
axis	O	O:0.999431
.	O	O:0.999826
	
With	O	O:0.999221
`	O	O:0.999967
axis=1	O	O:0.990152
`	O	O:0.999985
,	O	O:0.999965
it	O	O:0.999996
operates	O	O:0.999779
along	O	O:0.999986
every	O	O:0.998961
row	O	O:0.999629
.	O	O:0.999799
	
To	O	O:0.999955
do	O	O:0.999993
something	O	O:0.999968
like	O	O:0.999807
what	O	O:0.999884
you're	O	O:0.999979
trying	O	O:0.999961
to	O	O:0.999996
do	O	O:0.999996
,	O	O:0.999999
think	O	O:0.999928
of	O	O:0.999992
how	O	O:0.999946
you	O	O:0.999991
would	O	O:0.999997
construct	O	O:0.999987
a	O	O:1.000000
new	O	O:0.999833
row	O	O:0.999978
from	O	O:0.999987
your	O	O:0.999988
existing	O	O:0.999432
row	O	O:0.999768
.	O	O:0.999758
	
Something	O	O:0.999759
like	O	O:0.999907
this	O	O:0.999925
should	O	O:0.999917
work	O	O:0.999581
:	O	O:0.999992
#CODE	O	O:0.999898
	
But	O	O:0.999888
I	O	O:0.999975
don't	O	O:0.999922
understand	O	O:0.999111
how	O	O:0.999972
to	O	O:0.999980
apply	O	O:0.986673
it	O	O:0.999943
to	O	O:0.999987
my	O	O:0.999999
case	O	O:0.999756
.	O	O:0.999972
	
Any	O	O:0.999846
idea	O	O:0.999627
how	O	O:0.999963
to	O	O:0.999990
solve	O	O:0.999998
this	O	O:0.999969
problem	O	O:0.999920
in	O	O:0.999998
a	O	O:0.999990
efficient	O	O:0.999858
pandas	O	O:0.999802
approach	O	O:0.999918
?	O	O:0.999841
	
(	O	O:0.999979
using	O	O:0.999916
apply	O	B-API:0.817696
,	O	O:0.999592
map	O	B-API:0.941021
or	O	O:0.999974
rolling	O	O:0.990756
?	O	O:0.999961
)	O	O:0.999928
	
What	O	O:0.999783
you	O	O:0.999987
needed	O	O:0.999994
to	O	O:0.999999
do	O	O:1.000000
from	O	O:0.999988
the	O	O:0.999978
answer	O	O:0.999905
you	O	O:0.999929
linked	O	O:0.999740
to	O	O:0.999992
was	O	O:0.999998
to	O	O:0.999998
turn	O	O:0.999901
the	O	O:0.999992
index	O	O:0.999969
into	O	O:0.999954
a	O	O:0.999998
series	O	O:0.999825
so	O	O:0.999996
you	O	O:0.999991
can	O	O:0.999997
then	O	O:0.999998
call	O	O:0.999982
apply	O	O:0.839919
on	O	O:0.998587
it	O	O:0.999875
.	O	O:0.999960
	
The	O	O:0.999935
other	O	O:0.999701
key	O	O:0.999981
thing	O	O:0.999927
here	O	O:0.997817
is	O	O:0.999997
that	O	O:0.999902
you	O	O:0.999998
also	O	O:0.999998
have	O	O:0.999981
to	O	O:0.999989
index	O	O:0.999999
the	O	O:0.999993
constructed	O	O:0.999754
series	O	O:0.999974
the	O	O:0.999998
same	O	O:0.999984
as	O	O:0.999999
your	O	O:0.999794
df	O	O:0.999933
index	O	O:0.999962
as	O	O:0.999994
the	O	O:0.999981
default	O	O:0.997730
is	O	O:0.999966
to	O	O:0.999993
just	O	O:0.999999
create	O	O:0.999701
an	O	O:0.999993
index	O	O:0.999997
from	O	O:0.999941
scratch	O	O:0.999987
like	O	O:0.999917
0	O	O:0.999979
,	O	O:0.999985
1	O	O:0.999927
,	O	O:0.999968
2	O	O:0.999960
,	O	O:0.999910
3	O	O:0.999916
...	O	O:0.999384
	
#CODE	O	O:0.998453
	
You	O	O:0.999904
can	O	O:0.999971
apply	O	O:0.938158
`	O	O:0.999983
merge	O	B-API:0.986622
`	O	O:0.999994
to	O	O:0.999972
a	O	O:1.000000
list	O	O:0.998542
of	O	O:0.999995
DataFrames	O	O:0.999785
using	O	O:0.999833
reduce	O	O:0.946202
:	O	O:0.999534
#CODE	O	O:0.999636
	
Probably	O	O:0.999843
the	O	O:0.999989
simplest	O	O:0.999481
solution	O	O:0.999654
is	O	O:0.999997
to	O	O:0.999970
use	O	O:0.999997
the	O	O:0.999953
APPLYMAP	B-API	B-API:0.735114
or	O	O:0.999988
APPLY	O	O:0.999862
fucntions	O	O:0.999820
which	O	O:0.999891
applies	O	O:0.999884
the	O	O:0.999919
function	O	O:0.999673
to	O	O:0.999999
every	O	O:1.000000
data	O	O:0.999995
value	O	O:0.999965
in	O	O:0.999996
the	O	O:0.999999
entire	O	O:0.999981
data	O	O:0.999966
set	O	O:0.999745
.	O	O:0.999968
	
Apply	O	O:0.998211
Docs	O	O:0.997900
	
So	O	O:0.999965
I	O	O:0.999999
have	O	O:0.999996
data	O	O:0.999976
that	O	O:0.999983
I	O	O:0.999998
am	O	O:0.999999
outputting	O	O:0.999217
to	O	O:0.999977
an	O	O:1.000000
excel	O	O:0.999940
file	O	O:0.999956
using	O	O:0.999956
pandas	O	O:0.998199
'	O	O:0.999698
ExcelWriter	O	O:0.959102
.	O	O:0.999703
	
After	O	O:0.999716
the	O	O:0.999995
entire	O	O:0.999943
data	O	O:0.999835
is	O	O:0.999997
outputted	O	O:0.999806
to	O	O:0.999983
the	O	O:0.999999
Excel	O	O:0.999712
file	O	O:0.999851
,	O	O:0.999998
what	O	O:0.999812
is	O	O:0.999992
the	O	O:0.999984
easiest	O	O:0.999601
way	O	O:0.999962
to	O	O:0.999952
apply	O	O:0.975990
conditional	O	O:0.993790
formatting	O	O:0.999398
to	O	O:0.999986
it	O	O:1.000000
programmatically	O	O:0.999935
using	O	O:0.999931
Python	O	O:0.994675
?	O	O:0.999773
	
After	O	O:0.999890
the	O	O:0.999991
data	O	O:0.999313
is	O	O:0.999987
written	O	O:0.999587
,	O	O:0.999996
I	O	O:0.999998
need	O	O:0.999991
a	O	O:0.999989
way	O	O:0.999967
to	O	O:0.999984
apply	O	O:0.882298
the	O	O:0.999893
conditional	O	O:0.992410
formatting	O	O:0.999900
using	O	O:0.999425
python	O	O:0.994721
.	O	O:0.999497
	
To	O	O:0.999961
make	O	O:0.999730
it	O	O:0.999994
simple	O	O:0.999939
,	O	O:0.999995
I	O	O:0.999996
want	O	O:0.999979
the	O	O:0.999934
colors	O	O:0.999627
to	O	O:0.999995
be	O	O:1.000000
darker	O	O:0.999983
shades	O	O:0.999175
of	O	O:0.999990
blue	O	O:0.999723
the	O	O:0.999994
more	O	O:0.999080
positive	O	O:0.994659
(	O	O:0.999984
>	O	O:0.999988
0	O	O:0.999920
)	O	O:0.999995
the	O	O:0.999946
values	O	O:0.998485
are	O	O:0.999943
and	O	O:0.999998
to	O	O:0.999996
be	O	O:0.999999
darker	O	O:0.999970
shades	O	O:0.999316
of	O	O:0.999975
red	O	O:0.999926
the	O	O:0.999994
more	O	O:0.999628
negative	O	O:0.999894
the	O	O:0.999981
values	O	O:0.998578
are	O	O:0.999874
(	O	O:0.999997
0	O	O:0.999909
)	O	O:0.999948
and	O	O:0.999986
the	O	O:0.999997
cell	O	O:0.998887
to	O	O:0.999995
be	O	O:1.000000
white	O	O:0.999945
if	O	O:0.999980
the	O	O:0.999992
value	O	O:0.999574
is	O	O:0.999925
0	O	O:0.999488
.	O	O:0.999874
	
Here	O	O:0.998693
is	O	O:0.999987
an	O	O:0.999993
example	O	O:0.999945
of	O	O:0.999984
how	O	O:0.999972
to	O	O:0.999998
apply	O	O:0.982014
a	O	O:0.999974
conditional	O	O:0.983219
format	O	O:0.999912
to	O	O:0.999972
the	O	O:0.999998
XlsxWriter	O	O:0.999719
Excel	O	O:0.999844
file	O	O:0.999968
created	O	O:0.999815
by	O	O:0.999968
Pandas	O	O:0.997848
:	O	O:0.999822
#CODE	O	O:0.999652
	
I	O	O:0.999990
need	O	O:0.999980
to	O	O:0.999993
split	O	O:0.999967
a	O	O:0.999995
dataframe	B-API	O:0.998820
into	O	O:0.999795
groups	O	O:0.999515
,	O	O:0.999953
and	O	O:0.999989
for	O	O:0.999993
those	O	O:0.999721
groups	O	O:0.999718
that	O	O:0.999969
have	O	O:0.999987
odd	O	O:0.999995
number	O	O:0.999989
of	O	O:0.999982
lines	O	O:0.999508
,	O	O:0.999995
i	O	O:0.999994
need	O	O:0.999969
to	O	O:0.999999
pull	O	O:0.999961
in	O	O:0.999993
the	O	O:0.999991
first	O	O:0.999886
line	O	O:0.999914
whose	O	O:0.999911
column	O	O:0.999940
matches	O	O:0.999964
a	O	O:0.999994
certain	O	O:0.991473
condition	O	O:0.999849
and	O	O:0.999999
then	O	O:0.999876
i	O	O:0.999997
need	O	O:0.999987
to	O	O:0.999999
assemble	O	O:0.999998
back	O	O:0.999858
all	O	O:0.999995
such	O	O:0.999984
first	O	O:0.999842
lines	O	O:0.988233
(	O	O:0.999988
so	O	O:0.999998
only	O	O:0.999970
the	O	O:0.999999
first	O	O:0.999974
ones	O	O:0.999649
in	O	O:0.999983
odd	O	O:0.999992
numbered	O	O:0.999931
groups	O	O:0.999913
matching	O	O:0.999932
a	O	O:0.999987
condition	O	O:0.998849
)	O	O:0.999984
.	O	O:0.999803
	
I	O	O:0.999960
can	O	O:0.999975
do	O	O:0.999995
it	O	O:0.999996
in	O	O:0.999995
a	O	O:0.999997
loop	O	O:0.999884
like	O	O:0.999649
below	O	O:0.998025
(	O	O:0.999964
it	O	O:0.999972
works	O	O:0.999752
)	O	O:0.999969
but	O	O:0.999883
can't	O	O:0.999766
rework	O	O:0.999625
it	O	O:0.999996
into	O	O:0.999929
a	O	O:0.999988
groupby	B-API	B-API:0.997430
with	O	O:0.999729
apply	O	B-API:0.942623
.	O	O:0.999310
	
Could	O	O:0.999575
you	O	O:0.999957
help	O	O:0.999648
?	O	O:0.999984
	
#CODE	O	O:0.998453
	
Interesting	O	O:0.999500
problem	O	O:0.999582
which	O	O:0.999869
I	O	O:0.999986
would	O	O:0.999996
solve	O	O:0.999811
by	O	O:0.999996
writing	O	O:0.999938
a	O	O:0.999786
function	O	O:0.999536
which	O	O:0.999966
you	O	O:0.999996
then	O	O:0.999992
pass	O	O:0.999969
to	O	O:0.999995
apply	O	O:0.926483
.	O	O:0.999349
	
Note	O	O:0.999961
that	O	O:0.999971
when	O	O:0.999982
calling	O	O:0.999974
passing	O	O:0.999949
a	O	O:0.999653
function	O	O:0.999852
to	O	O:0.999994
apply	O	O:0.963794
,	O	O:0.999977
the	O	O:0.999986
fist	O	O:0.998731
argument	O	O:0.999972
passed	O	O:0.997808
is	O	O:0.999952
the	O	O:0.999974
DataFrame	B-API	O:0.997632
itself	O	O:0.997875
and	O	O:0.999999
this	O	O:0.999535
is	O	O:0.999990
done	O	O:0.999895
so	O	O:0.999987
automatically	O	O:0.999409
.	O	O:0.999852
	
That	O	O:0.998717
is	O	O:0.999992
why	O	O:0.999953
you	O	O:0.999966
don't	O	O:0.999994
need	O	O:0.999993
to	O	O:0.999999
specify	O	O:0.999994
the	O	O:0.999963
'	O	O:0.999973
df	O	O:0.999760
'	O	O:0.999985
argument	O	O:0.999988
when	O	O:0.999831
passing	O	O:0.999848
the	O	O:0.999923
function	O	O:0.999875
to	O	O:0.999977
apply	O	O:0.918867
.	O	O:0.999531
	
In	O	O:0.999961
fact	O	O:0.999911
if	O	O:0.999994
you	O	O:0.999978
do	O	O:0.999992
you	O	O:0.999997
get	O	O:0.999991
an	O	O:0.999994
error	O	O:0.999917
saying	O	O:0.999830
you	O	O:0.999977
have	O	O:0.999957
passed	O	O:0.999768
too	O	O:0.999985
many	O	O:0.999912
arguments	O	O:0.998666
.	O	O:0.999843
	
Also	O	O:0.999883
somewhat	O	O:0.999907
strangely	O	O:0.999927
in	O	O:0.999995
my	O	O:0.999996
view	O	O:0.999545
when	O	O:0.999957
passing	O	O:0.999798
the	O	O:0.999925
function	O	O:0.999915
the	O	O:0.999963
arguments	O	O:0.999672
are	O	O:0.999992
supplied	O	O:0.999813
after	O	O:0.999976
commas	O	O:0.998847
rather	O	O:0.999958
than	O	O:0.999724
in	O	O:0.999987
parenthese	O	O:0.998223
.	O	O:0.999911
	
This	O	O:0.999779
I	O	O:0.999996
find	O	O:0.999975
confusing	O	O:0.998945
to	O	O:0.999994
look	O	O:0.999954
at	O	O:0.999962
,	O	O:0.999956
but	O	O:0.999969
it	O	O:0.999697
is	O	O:0.999991
what	O	O:0.999773
it	O	O:0.999729
is	O	O:0.999988
....	O	O:0.996298
	
Is	O	O:0.999984
this	O	O:0.999881
expected	O	O:0.999923
?	O	O:0.999970
	
I	O	O:0.999989
know	O	O:0.999932
I	O	O:0.999974
can	O	O:0.999983
apply	O	O:0.817302
`	O	O:0.999954
dropna()	B-API	B-API:0.998849
`	O	O:0.999989
on	O	O:0.999989
this	O	O:0.999954
output	O	O:0.999867
,	O	O:0.999971
but	O	O:0.999860
isn't	O	O:0.999950
the	O	O:0.999987
above	O	O:0.999717
already	O	O:0.999946
supposed	O	O:0.999973
to	O	O:0.999994
filter	O	O:0.999855
out	O	O:0.999988
the	O	O:0.999997
values	O	O:0.999569
I	O	O:0.999990
ask	O	O:0.999962
for	O	O:0.999745
?	O	O:0.999746
	
(	O	O:0.999877
it	O	O:0.999981
typically	O	O:0.999936
works	O	O:0.999986
on	O	O:0.999995
dataframes	O	O:0.999791
wihtout	O	O:0.999925
having	O	O:0.999558
to	O	O:0.999971
call	O	O:0.999873
`	O	O:0.999991
dropna	B-API	B-API:0.998818
`)	O	O:0.999960
	
I	O	O:0.999908
use	O	O:0.999995
this	O	O:0.999263
to	O	O:0.999986
get	O	O:0.999998
the	O	O:0.999996
vote	O	O:0.999606
totals	O	O:0.999737
and	O	O:0.999996
I	O	O:0.999998
apply	O	O:0.906972
a	O	O:0.999205
function	O	O:0.998726
to	O	O:0.999991
the	O	O:1.000000
group	O	O:0.999346
to	O	O:0.999994
get	O	O:0.999999
the	O	O:0.999998
number	O	O:0.999954
of	O	O:0.999992
precincts	O	O:0.999891
reporting	O	O:0.999704
and	O	O:0.999976
the	O	O:0.999991
total	O	O:0.994370
number	O	O:0.999619
.	O	O:0.999685
	
#CODE	O	O:0.998453
	
I	O	O:0.999987
think	O	O:0.999981
you	O	O:0.999956
can	O	O:0.999967
use	O	O:1.000000
the	O	O:0.999708
select	O	O:0.982959
method	O	O:0.999973
to	O	O:0.999996
apply	O	O:0.998512
a	O	O:0.999975
filter	O	O:0.949366
to	O	O:0.999957
the	O	O:0.999996
index	O	O:0.999260
:	O	O:0.999972
`	O	O:0.999997
df_raw.select	O	O:0.981286
(	O	O:0.999997
lambda	O	O:0.999528
r	O	O:0.999598
:	O	O:0.999981
r.lower	O	O:0.996808
in	O	O:0.999993
my_list_of_rows	O	O:0.998265
)`	O	O:0.999857
	
Compare	O	O:0.999521
what	O	O:0.999665
happens	O	O:0.999971
when	O	O:0.999921
you	O	O:0.999993
call	O	O:0.999955
apply	O	O:0.844547
with	O	O:0.983700
`	O	O:0.999982
mean	O	O:0.986332
`	O	O:0.999970
:	O	O:0.999881
#CODE	O	O:0.999909
	
How	O	O:0.999951
do	O	O:0.999961
I	O	O:0.999997
define	O	O:0.999792
the	O	O:0.999779
function	O	O:0.999528
which	O	O:0.999845
calculates	O	O:0.999685
the	O	O:0.999997
percentage	O	O:0.999726
columns	O	O:0.999198
and	O	O:0.999998
how	O	O:0.999995
to	O	O:0.999974
apply	O	O:0.993874
that	O	O:0.998820
function	O	O:0.999974
to	O	O:0.999997
my	O	O:1.000000
two	O	O:0.999991
columns	O	O:0.999967
namely	O	O:0.999913
`	O	O:0.999984
Qd	O	O:0.998339
(	O	O:0.999991
cb	O	O:0.999875
)`	O	O:0.999646
and	O	O:0.999854
`	O	O:0.999985
Autopass	O	O:0.970598
(	O	O:0.999993
cb	O	O:0.999941
)`	O	O:0.999865
to	O	O:0.999989
give	O	O:0.999980
me	O	O:0.999994
additional	O	O:0.999896
calculated	O	O:0.999825
columns	O	O:0.999442
	
How	O	O:0.999897
to	O	O:0.999992
apply	O	O:0.989053
a	O	O:0.999967
custom	O	O:0.983659
formula	O	O:0.999975
over	O	O:0.999869
a	O	O:0.999991
group	O	O:0.996605
element	O	O:0.999890
in	O	O:0.999987
a	O	O:0.999998
grouped.apply()	O	O:0.618358
.unstack()	B-API	B-API:0.998138
method	O	O:0.999756
?	O	O:0.999932
	
Looks	O	O:0.999946
like	O	O:0.999981
when	O	O:0.999949
you	O	O:0.999992
group	O	O:0.999776
the	O	O:0.999989
dataframe	B-API	O:0.995191
it	O	O:0.999988
returns	O	O:0.999974
a	O	O:0.999999
bunch	O	O:0.999708
of	O	O:0.999992
series	O	O:0.999884
due	O	O:0.999975
to	O	O:0.999999
your	O	O:0.999998
original	O	O:0.999869
only	O	O:0.999958
having	O	O:0.999951
two	O	O:0.999952
columns	O	O:0.999756
.	O	O:0.999907
	
`	O	O:0.999952
applymap	B-API	B-API:0.997604
`	O	O:0.999963
is	O	O:0.999924
a	O	O:0.999841
Dataframe	B-API	O:0.914947
method	O	O:0.999956
that	O	O:0.999954
applies	O	O:0.999922
a	O	O:0.999972
method	O	O:0.998938
element	O	O:0.999767
wise	O	O:0.999477
.	O	O:0.999879
	
It	O	O:0.999942
looks	O	O:0.999963
like	O	O:0.999929
you	O	O:0.999973
are	O	O:0.999997
looking	O	O:0.999944
for	O	O:0.999985
apply	O	B-API:0.926510
in	O	O:0.999799
this	O	O:0.999251
instance	O	O:0.999700
.	O	O:0.999836
	
Try	O	O:0.999904
the	O	O:0.999918
following	O	O:0.998681
...	O	O:0.998862
	
#CODE	O	O:0.998453
	
and	O	O:0.999992
then	O	O:0.999897
apply	O	O:0.690842
a	O	O:0.999963
method	O	O:0.999299
to	O	O:0.999994
the	O	O:1.000000
groups	O	O:0.999542
or	O	O:0.999995
whatever	O	O:0.999987
you	O	O:0.999996
want	O	O:0.999986
to	O	O:0.999989
do	O	O:0.999997
.	O	O:0.999948
	
If	O	O:0.999949
you	O	O:0.999990
just	O	O:0.999973
want	O	O:0.999994
these	O	O:0.999957
groups	O	O:0.999905
separated	O	O:0.999915
call	O	O:0.992232
`	O	O:0.999982
grouped.groups	O	B-API:0.900748
`	O	O:0.999947
	
If	O	O:0.999957
you	O	O:0.999987
want	O	O:0.999983
to	O	O:0.999990
apply	O	O:0.997118
additional	O	O:0.999505
filtering	O	O:0.997442
,	O	O:0.999940
with	O	O:0.999919
this	O	O:0.999895
index	O	O:0.999975
,	O	O:0.999998
you	O	O:0.999994
can	O	O:0.999999
even	O	O:0.999999
select	O	O:0.999985
a	O	O:0.999999
specific	O	O:0.999827
year	O	O:0.999673
using	O	O:0.999854
`	O	O:0.999894
df	O	O:0.991458
[	O	O:0.999949
'	O	O:0.999909
2013	O	O:0.999298
']`	O	O:0.999727
.	O	O:0.999557
	
It's	O	O:0.999814
still	O	O:0.999821
quite	O	O:0.999925
misleading	O	O:0.999017
.	O	O:0.999671
	
Imagine	O	O:0.999630
if	O	O:0.999993
this	O	O:0.999871
happened	O	O:0.999971
when	O	O:0.999862
you	O	O:0.999993
called	O	O:0.999950
`	O	O:0.999989
to_dict	B-API	B-API:0.999809
`	O	O:0.999983
.	O	O:0.999363
	
You	O	O:0.999820
could	O	O:0.999988
just	O	O:0.999991
as	O	O:1.000000
well	O	O:0.999749
say	O	O:0.999997
that	O	O:0.999942
you	O	O:0.999991
are	O	O:0.999993
"	O	O:0.999994
leaving	O	O:0.997439
Pandas	O	O:0.998506
"	O	O:0.999862
and	O	O:0.999988
going	O	O:0.999936
back	O	O:0.997603
to	O	O:0.999933
"	O	O:0.999999
pure	O	O:0.999365
Python	O	O:0.999292
"	O	O:0.999965
,	O	O:0.999918
and	O	O:0.999998
then	O	O:0.999882
apply	O	O:0.920514
some	O	O:0.999807
type	O	O:0.998651
conversion	O	O:0.999925
on	O	O:0.999998
the	O	O:0.999992
values	O	O:0.999866
that	O	O:0.999934
will	O	O:0.999996
be	O	O:0.999996
`	O	O:0.999996
dict	O	O:0.992445
`	O	O:0.999994
values	O	O:0.996210
.	O	O:0.999922
	
Then	O	O:0.999166
`	O	O:0.999995
o.head()	O	O:0.990219
.datetime	O	O:0.998819
.to_dict()	B-API	B-API:0.997127
[	O	O:0.999936
0	O	O:0.999934
]`	O	O:0.999880
would	O	O:0.999833
be	O	O:0.999999
different	O	O:0.999991
than	O	O:0.999309
`	O	O:0.999982
o.head()	O	O:0.961066
.datetime	O	O:0.998481
[	O	O:0.999927
0	O	O:0.999818
]`	O	O:0.999773
.	O	O:0.999354
	
In	O	O:0.999989
any	O	O:0.999976
of	O	O:0.999994
these	O	O:0.999870
cases	O	O:0.999902
,	O	O:0.999997
if	O	O:0.999983
you	O	O:0.999971
are	O	O:0.999997
asking	O	O:0.999881
for	O	O:0.999978
some	O	O:0.999552
iterable	O	O:0.999400
thing	O	O:0.999905
that	O	O:0.999832
has	O	O:0.999994
values	O	O:0.999609
in	O	O:0.999988
it	O	O:0.999998
as	O	O:0.999998
a	O	O:0.999967
sequence	O	O:0.997899
(	O	O:0.999962
whether	O	O:0.999938
dict	O	O:0.999481
,	O	O:0.999986
Series	O	O:0.999894
,	O	O:0.999979
or	O	O:0.999998
ndarray	B-API	O:0.785890
)	O	O:0.999996
,	O	O:0.999992
you	O	O:0.999983
expect	O	O:0.999991
the	O	O:0.999999
entries	O	O:0.999883
to	O	O:0.999996
be	O	O:1.000000
references	O	O:0.999922
to	O	O:0.999995
a	O	O:1.000000
single	O	O:0.999695
value	O	O:0.999922
in	O	O:0.999948
memory	O	O:0.999616
.	O	O:0.999884
	
You	O	O:0.999861
don't	O	O:0.999929
expect	O	O:0.999965
to	O	O:0.999997
get	O	O:0.999999
a	O	O:0.999999
different	O	O:0.999807
value	O	O:0.999805
.	O	O:0.999809
	
To	O	O:0.999930
do	O	O:0.999992
this	O	O:0.999967
,	O	O:0.999996
you	O	O:0.999968
would	O	O:0.999983
group	O	O:0.999971
the	O	O:0.999999
data	O	O:0.999886
and	O	O:0.999989
use	O	O:0.999984
the	O	O:0.999416
`	O	O:0.999920
apply	O	B-API:0.999013
`	O	O:0.999914
method	O	O:0.999681
to	O	O:0.999998
apply	O	O:0.995539
a	O	O:0.999780
function	O	O:0.999668
that	O	O:0.999960
does	O	O:0.999983
the	O	O:0.999994
above	O	O:0.999665
.	O	O:0.999822
	
And	O	O:0.999983
then	O	O:0.999950
pass	O	O:0.999961
that	O	O:0.999858
function	O	O:0.999991
to	O	O:0.999985
`	O	O:1.000000
apply	O	B-API:0.936600
`	O	O:0.999988
using	O	O:0.999254
the	O	O:0.999730
groupby	B-API	B-API:0.998328
object	O	O:0.999814
as	O	O:0.999868
follows	O	O:0.991796
:	O	O:0.999959
#CODE	O	O:0.999735
	
In	O	O:0.999921
Pandas	O	O:0.999766
,	O	O:0.999991
how	O	O:0.999973
to	O	O:0.999997
apply	O	O:0.977088
2	O	O:0.999927
custom	O	O:0.999057
formulas	O	O:0.999367
in	O	O:0.999986
a	O	O:0.999958
groupby.agg()	O	O:0.856456
method	O	O:0.999860
?	O	O:0.999940
	
The	O	O:0.999981
apply	O	O:0.593225
functionality	O	O:0.995305
is	O	O:0.999909
probably	O	O:0.999720
what	O	O:0.999988
your	O	O:0.999855
are	O	O:0.999992
looking	O	O:0.999708
for	O	O:0.999588
:	O	O:0.999804
#CODE	O	O:0.999519
	
How	O	O:0.999910
to	O	O:0.999974
concatenate	O	O:0.978527
within	O	O:0.999434
'	O	O:0.999986
apply	O	O:0.688859
'	O	O:0.999939
on	O	O:0.999987
a	O	O:0.999991
grouped	O	O:0.993866
object	O	O:0.999621
	
I	O	O:0.999992
have	O	O:0.999987
a	O	O:0.999991
dataframe	B-API	O:0.999377
where	O	O:0.999960
I	O	O:0.999999
wish	O	O:0.999992
to	O	O:0.999974
edit	O	O:0.999987
the	O	O:0.999989
information	O	O:0.999869
in	O	O:0.999997
columns	O	O:0.999984
a	O	O:0.999991
and	O	O:0.999974
b	O	O:0.999920
,	O	O:0.999960
within	O	O:0.999822
groups	O	O:0.999799
defined	O	O:0.999932
by	O	O:0.999994
columns	O	O:0.999722
d	O	O:0.999786
and	O	O:0.999989
e	O	O:0.999821
.	O	O:0.999472
	
The	O	O:0.999931
procedure	O	O:0.999980
to	O	O:0.999996
apply	O	O:0.984078
to	O	O:0.999977
a	O	O:0.999996
and	O	O:0.999966
b	O	O:0.999196
is	O	O:0.999919
:	O	O:0.999969
set	O	O:0.999979
all	O	O:0.999999
rows	O	O:0.999952
equal	O	O:0.999753
to	O	O:0.999999
the	O	O:0.999999
row	O	O:0.999970
where	O	O:0.999946
c	O	O:0.999884
is	O	O:0.999999
a	O	O:0.999966
minimum	O	O:0.997270
.	O	O:0.999757
	
Columns	O	O:0.999254
c	O	O:0.999746
,	O	O:0.999984
d	O	O:0.999822
and	O	O:0.999985
e	O	O:0.999981
must	O	O:0.999784
remain	O	O:0.999747
unchanged	O	O:0.999742
.	O	O:0.999844
	
I	O	O:0.999962
am	O	O:0.999998
using	O	O:0.999846
an	O	O:0.999932
apply	O	B-API:0.899839
function	O	O:0.999609
on	O	O:0.999971
a	O	O:0.999991
grouped	O	O:0.993009
object	O	O:0.999630
.	O	O:0.999720
	
I	O	O:0.999949
use	O	O:0.999880
'	O	O:0.999175
reindex	O	B-API:0.925647
'	O	O:0.999942
to	O	O:0.999995
change	O	O:0.999981
a	O	O:0.999969
and	O	O:0.999835
b	O	O:0.999849
.	O	O:0.999403
	
The	O	O:0.999971
difficulty	O	O:0.999842
comes	O	O:0.999484
with	O	O:0.999980
concatenating	O	O:0.998487
,	O	O:0.999973
"	O	O:0.999988
cannot	O	O:0.999874
concatenate	O	O:0.957202
a	O	O:0.999993
non-NDFrame	O	O:0.998449
object	O	O:0.999344
"	O	O:0.999917
	
Either	O	O:0.999886
apply	O	O:0.728530
a	O	O:0.999919
regex	O	O:0.998107
pattern	O	O:0.999829
or	O	O:0.999997
apply	O	O:0.930916
a	O	O:0.999869
function	O	O:0.999671
that	O	O:0.999879
returns	O	O:0.999971
the	O	O:0.999995
characters	O	O:0.999531
you	O	O:0.999988
want	O	O:0.999990
,	O	O:0.999999
even	O	O:0.999972
if	O	O:0.999993
length	O	O:0.999505
did	O	O:0.999904
work	O	O:0.999751
,	O	O:0.999995
it'll	O	O:0.999969
just	O	O:0.999879
return	O	O:0.999884
the	O	O:0.999976
length	O	O:0.999597
of	O	O:0.999990
each	O	O:0.999704
row	O	O:0.999971
which	O	O:0.999700
is	O	O:0.999991
no	O	O:0.999994
different	O	O:0.999914
to	O	O:0.999985
doing	O	O:0.999989
nothing	O	O:0.997408
.	O	O:0.999316
	
You've	O	O:0.999621
not	O	O:0.999929
clarified	O	O:0.999908
the	O	O:0.999986
requirement	O	O:0.999521
,	O	O:0.999989
are	O	O:0.999988
you	O	O:0.999995
just	O	O:0.999978
wanting	O	O:0.999991
numbers	O	O:0.999620
only	O	O:0.999883
?	O	O:0.999992
	
Is	O	O:0.999975
the	O	O:0.999981
number	O	O:0.999790
length	O	O:0.999643
fixed	O	O:0.999711
etc	O	O:0.999936
..	O	O:0.999783
	
docs	O	O:0.999660
,	O	O:0.999994
so	O	O:0.999994
I'd	O	O:0.999974
use	O	O:0.999992
numpy	O	O:0.999695
to	O	O:0.999982
get	O	O:0.999999
a	O	O:0.999989
"	O	O:0.999950
windowing	O	O:0.999312
"	O	O:0.999994
view	O	O:0.993463
on	O	O:0.999985
the	O	O:0.999939
array	O	O:0.999880
and	O	O:0.999992
apply	O	O:0.830176
a	O	O:0.999799
ufunc	O	O:0.837893
	
Group	O	O:0.999833
this	O	O:0.999731
new	O	O:0.999964
dataframe	B-API	O:0.999443
on	O	O:0.999938
ID	O	O:0.999855
,	O	O:0.999993
and	O	O:0.999974
use	O	O:0.999959
the	O	O:0.999519
`	O	O:0.999821
shift()	B-API	B-API:0.999993
`	O	O:0.999987
method	O	O:0.999945
to	O	O:0.999996
get	O	O:0.999999
the	O	O:0.999997
differences	O	O:0.999764
in	O	O:0.999991
the	O	O:0.999997
stock	O	O:0.999866
prices	O	O:0.999561
using	O	O:0.999948
the	O	O:0.999928
`	O	O:0.999858
apply	O	B-API:0.998769
`	O	O:0.999771
method	O	O:0.997680
	
No	O	O:0.999986
,	O	O:0.999995
of	O	O:0.999997
that	O	O:0.999763
you'd	O	O:0.999998
have	O	O:0.999988
to	O	O:0.999998
apply	O	O:0.993610
a	O	O:0.999982
regex	O	O:0.998694
or	O	O:0.999997
a	O	O:0.999996
lambda	O	O:0.999208
to	O	O:0.999992
test	O	O:0.999948
each	O	O:0.999951
word	O	O:0.999885
for	O	O:0.999998
that	O	O:0.999642
character	O	O:0.999789
and	O	O:0.999990
strip	O	B-API:0.641018
it	O	O:0.999590
	
You	O	O:0.999898
can	O	O:0.999978
apply	O	O:0.984722
a	O	O:0.999988
post-processing	O	O:0.998280
step	O	O:0.999967
that	O	O:0.999971
first	O	O:0.999984
converts	O	O:0.999816
the	O	O:0.999983
string	O	O:0.999601
to	O	O:0.999996
a	O	O:1.000000
datetime	O	O:0.987954
and	O	O:0.999996
then	O	O:0.999892
applies	O	O:0.999976
a	O	O:0.999996
lambda	O	O:0.998576
to	O	O:0.999995
keep	O	O:0.999965
just	O	O:0.999988
the	O	O:0.999998
date	O	O:0.997474
portion	O	O:0.998441
:	O	O:0.999976
#CODE	O	O:0.999897
	
Create	O	O:0.999937
a	O	O:0.999991
new	O	O:0.999857
column	O	O:0.999895
,	O	O:0.999998
then	O	O:0.999979
just	O	O:0.999988
apply	O	O:0.976925
simple	O	O:0.997925
`	O	O:0.999963
datetime	O	O:0.990883
`	O	O:0.999993
functions	O	O:0.999671
using	O	O:0.999563
`	O	O:0.999905
lambda	O	O:0.908366
`	O	O:0.999957
and	O	O:0.999099
`	O	O:0.999993
apply	O	B-API:0.997461
`	O	O:0.999795
.	O	O:0.997519
	
#CODE	O	O:0.998453
	
That	O	O:0.999537
error	O	O:0.999787
should	O	O:0.999987
only	O	O:0.999983
occur	O	O:0.999975
if	O	O:0.999991
you	O	O:0.999995
have	O	O:0.999998
a	O	O:0.999999
date	O	O:0.999610
whose	O	O:0.999928
year	O	O:0.990967
is	O	O:0.999978
below	O	O:0.998034
1900	O	O:0.999049
.	O	O:0.999654
	
Otherwise	O	O:0.999806
,	O	O:0.999984
`	O	O:0.999994
strftime	B-API	B-API:0.987940
`	O	O:0.999979
is	O	O:0.999946
smart	O	O:0.999751
enough	O	O:0.999769
to	O	O:0.999975
convert	O	O:0.999779
it	O	O:0.999997
as	O	O:0.999998
shown	O	O:0.999760
above	O	O:0.999889
without	O	O:0.999654
errors	O	O:0.997404
.	O	O:0.999697
	
Are	O	O:0.999948
you	O	O:0.999988
sure	O	O:0.999998
your	O	O:0.999979
values	O	O:0.999774
are	O	O:0.999991
correct	O	O:0.999925
?	O	O:0.999975
	
Try	O	O:0.999963
exporting	O	O:0.999540
to	O	O:0.999970
CSV	O	O:0.999997
right	O	O:0.999829
before	O	O:0.999926
doing	O	O:0.999928
the	O	O:0.999895
`	O	O:0.999880
apply	O	B-API:0.990478
`	O	O:0.999890
.	O	O:0.998539
	
A	O	O:0.999960
date	O	O:0.998417
might	O	O:0.999903
have	O	O:0.999959
been	O	O:0.999856
incorrectly	O	O:0.999989
converted	O	O:0.999870
from	O	O:0.999532
`	O	O:0.999962
Created	O	O:0.999634
Date	O	O:0.998337
`	O	O:0.999929
.	O	O:0.999364
	
You	O	O:0.999885
can	O	O:0.999992
pass	O	O:0.999981
a	O	O:0.999984
function	O	O:0.999858
to	O	O:0.999984
apply	O	O:0.819270
,	O	O:0.999788
but	O	O:0.999875
it	O	O:0.999961
shouldn't	O	O:0.999966
return	O	O:0.999789
a	O	O:0.999984
dict	O	O:0.997547
.	O	O:0.999879
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999985
to	O	O:0.999997
add	O	O:1.000000
a	O	O:0.999997
sum	O	O:0.999363
column	O	O:0.999996
your	O	O:0.999883
way	O	O:0.999926
-	O	O:0.999992
do	O	O:0.999967
it	O	O:0.999994
like	O	O:0.999878
this	O	O:0.999611
:	O	O:0.999979
#CODE	O	O:0.999846
	
I've	O	O:0.999061
designed	O	O:0.999216
this	O	O:0.999720
method	O	O:0.999984
so	O	O:0.999994
I	O	O:0.999998
can	O	O:0.999992
apply	O	O:0.940282
any	O	O:0.999816
function	O	O:0.999826
I	O	O:0.999996
wish	O	O:0.999981
to	O	O:0.999956
the	O	O:1.000000
table	O	O:0.999922
at	O	O:0.999997
any	O	O:0.999973
point	O	O:0.999383
.	O	O:0.999700
	
It	O	O:0.999965
needs	O	O:0.999951
to	O	O:0.999996
stay	O	O:0.999995
this	O	O:0.999968
flexible	O	O:0.999644
,	O	O:0.999979
but	O	O:0.999966
it	O	O:0.999993
just	O	O:0.999910
seems	O	O:0.999990
horrible	O	O:0.999187
!	O	O:0.999928
	
Is	O	O:0.999985
there	O	O:0.999977
a	O	O:0.999999
more	O	O:0.999511
efficient	O	O:0.999883
way	O	O:0.999981
to	O	O:0.999987
do	O	O:1.000000
something	O	O:0.999969
like	O	O:0.999936
this	O	O:0.999961
?	O	O:0.999977
	
Is	O	O:0.999979
iterating	O	O:0.999900
over	O	O:0.999690
groups	O	O:0.997949
+	O	O:0.999989
appending	O	O:0.999766
better	O	O:0.997260
?	O	O:0.999910
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
I	O	O:0.999887
was	O	O:0.999993
aware	O	O:0.999488
of	O	O:0.999991
this	O	O:0.999930
type	O	O:0.999929
of	O	O:0.999979
solution	O	O:0.998634
.	O	O:0.999953
	
But	O	O:0.999949
the	O	O:0.999978
problem	O	O:0.991054
is	O	O:0.999953
:	O	O:0.999946
I	O	O:0.999996
may	O	O:0.999999
need	O	O:0.999883
to	O	O:0.999998
apply	O	O:0.989415
an	O	O:0.999942
aggregate	O	B-API:0.913541
function	O	O:0.999613
which	O	O:0.999934
needs	O	O:0.999989
access	O	O:0.999645
to	O	O:0.999994
more	O	O:0.999993
than	O	O:0.999950
one	O	O:0.999991
column	O	O:0.999474
(	O	O:0.999998
table	O	O:0.999977
manipulation	O	O:0.999813
)	O	O:0.999983
.	O	O:0.999821
	
And	O	O:0.999889
I	O	O:0.999991
will	O	O:0.999987
need	O	O:0.999943
to	O	O:0.999996
apply	O	O:0.994651
more	O	O:0.999556
than	O	O:0.999933
one	O	O:0.999993
of	O	O:0.999997
these	O	O:0.999881
in	O	O:0.999997
batch	O	O:0.999811
to	O	O:0.999999
different	O	O:0.999998
data	O	O:0.999760
!	O	O:0.999946
	
Any	O	O:0.999931
chance	O	O:0.999879
of	O	O:0.999994
a	O	O:0.999984
little	O	O:0.999607
spoonfeeding	O	O:0.997783
?	O	O:0.999863
	
Not	O	O:0.999969
sure	O	O:0.999849
how	O	O:0.999984
to	O	O:0.999990
apply	O	O:0.996700
this	O	O:0.999764
to	O	O:0.999983
my	O	O:0.999998
dataframe	B-API	O:0.996022
...	O	O:0.999706
	
there	O	O:0.999230
is	O	O:0.999993
an	O	O:0.999981
apply	O	B-API:0.760766
function	O	O:0.998586
,	O	O:0.999950
e.g.	O	O:0.999449
frame.apply	O	O:0.907012
(	O	O:0.999981
f	O	O:0.999872
,	O	O:0.999991
axis=1	O	O:0.999512
)	O	O:0.999996
where	O	O:0.999897
f	O	O:0.999888
is	O	O:0.999998
a	O	O:0.999833
function	O	O:0.999893
that	O	O:0.999958
does	O	O:0.999992
something	O	O:0.999989
with	O	O:0.999996
a	O	O:0.999971
row	O	O:0.999730
...	O	O:0.999426
	
It	O	O:0.999961
seems	O	O:0.999921
to	O	O:0.999996
cast	O	O:0.999966
all	O	O:0.999995
values	O	O:0.999865
to	O	O:0.999636
`	O	O:1.000000
bool	O	O:0.870600
`	O	O:0.999996
,	O	O:0.999979
unless	O	O:0.999969
I	O	O:0.999981
"	O	O:0.999999
touch	O	O:0.994777
"	O	O:0.999993
the	O	O:0.999176
`	O	O:0.999965
DataFrame	B-API	O:0.940146
`	O	O:0.999997
by	O	O:0.999983
adding	O	O:0.999972
a	O	O:0.999924
new	O	O:0.999184
column	O	O:0.999599
.	O	O:0.999885
	
This	O	O:0.999583
happens	O	O:0.999973
regardless	O	O:0.999991
of	O	O:0.999994
whether	O	O:0.999914
I	O	O:0.999996
use	O	O:0.999985
row	O	O:0.994445
or	O	O:0.999971
column-based	O	O:0.998596
`	O	O:0.999991
apply	O	B-API:0.990572
`	O	O:0.999035
(	O	O:0.999617
i.e.	O	O:0.999767
`	O	O:0.999976
axis=0	O	O:0.995963
`	O	O:0.999993
or	O	O:0.999637
`	O	O:0.999995
axis=1	O	O:0.998014
`)	O	O:0.999966
.	O	O:0.999587
	
The	O	O:0.999951
problem	O	O:0.999901
comes	O	O:0.999819
from	O	O:0.999976
the	O	O:0.999983
`	O	O:0.999990
samples	O	O:0.998555
=	O	O:0.999993
data	O	O:0.999881
[	O	O:0.999966
idx	O	O:0.999814
]`	O	O:0.999922
line	O	O:0.998208
.	O	O:0.999879
	
I	O	O:0.999977
suspect	O	O:0.999874
I	O	O:0.999984
need	O	O:0.999974
to	O	O:0.999973
be	O	O:1.000000
more	O	O:0.999935
specific	O	O:0.999924
than	O	O:0.999955
using	O	O:0.999514
'	O	O:0.999927
grouped	O	O:0.997798
'	O	O:0.999954
for	O	O:0.999992
the	O	O:0.999995
data	O	O:0.999917
field	O	O:0.999827
in	O	O:0.999991
bootstrap	O	O:0.997862
,	O	O:0.999995
but	O	O:0.999963
I	O	O:0.999989
am	O	O:0.999997
unsure	O	O:0.999390
how	O	O:0.999980
to	O	O:0.999981
do	O	O:1.000000
this	O	O:0.999895
.	O	O:0.999933
	
Do	O	O:0.999947
I	O	O:0.999997
need	O	O:0.999988
to	O	O:0.999958
apply	O	O:0.997795
this	O	O:0.999886
as	O	O:0.999996
a	O	O:0.999993
lambda	O	O:0.988195
function	O	O:0.999774
?	O	O:0.999824
	
Or	O	O:0.999984
maybe	O	O:0.999946
with	O	O:0.999995
a	O	O:0.999988
for	O	O:0.999923
loop	O	O:0.999024
?	O	O:0.999862
	
Any	O	O:0.999778
suggestions	O	O:0.999164
would	O	O:0.999864
be	O	O:0.999997
much	O	O:0.999878
appreciated	O	O:0.999111
.	O	O:0.999657
	
Pandas	O	O:0.998700
:	O	O:0.999977
apply	O	O:0.959128
different	O	O:0.999786
functions	O	O:0.999501
to	O	O:0.999996
different	O	O:0.999998
columns	O	O:0.999603
	
At	O	O:0.999989
this	O	O:0.999905
point	O	O:0.999966
,	O	O:0.999991
I	O	O:0.999993
should	O	O:0.999976
be	O	O:0.999998
able	O	O:0.999996
to	O	O:0.999968
use	O	O:0.999999
something	O	O:0.999882
like	O	O:0.999885
an	O	O:0.999993
"	O	O:0.999987
apply	O	B-API:0.820828
"	O	O:0.999643
function	O	O:0.999536
on	O	O:0.999959
`	O	O:0.999996
df	O	O:0.999149
`	O	O:0.999998
using	O	O:0.998166
`	O	O:0.999961
months	O	O:0.963377
`	O	O:0.999972
,	O	O:0.999923
but	O	O:0.999989
am	O	O:0.999995
a	O	O:0.999994
bit	O	O:0.999431
lost	O	O:0.999368
...	O	O:0.999332
	
I	O	O:0.999987
think	O	O:0.999988
a	O	O:0.999939
way	O	O:0.999394
should	O	O:0.999973
exist	O	O:0.999980
to	O	O:0.999998
avoid	O	O:0.999991
the	O	O:0.999987
use	O	O:0.999912
of	O	O:0.999796
apply	O	B-API:0.900212
but	O	O:0.999776
I	O	O:0.999809
didn't	O	O:0.999881
find	O	O:0.997865
it	O	O:0.999979
.	O	O:0.999931
	
I	O	O:0.999976
think	O	O:0.999783
'	O	O:0.999934
apply	O	B-API:0.644675
'	O	O:0.999532
is	O	O:0.999986
a	O	O:0.999989
good	O	O:0.998597
way	O	O:0.999983
to	O	O:0.999969
go	O	O:0.999993
.	O	O:0.999947
	
Is	O	O:0.999987
there	O	O:0.999991
a	O	O:0.999990
solution	O	O:0.999374
that	O	O:0.999911
works	O	O:0.999973
for	O	O:0.999992
all	O	O:0.999976
three	O	O:0.999575
cases	O	O:0.998718
?	O	O:0.999961
	
Or	O	O:0.999719
is	O	O:0.999991
there	O	O:0.999971
some	O	O:0.999923
way	O	O:0.999977
to	O	O:0.999992
apply	O	O:0.991734
a	O	O:0.999969
condition	O	O:0.997262
in	O	O:0.999981
string	O	O:0.999855
splits	O	O:0.999264
,	O	O:0.999988
without	O	O:0.999915
iterating	O	O:0.999717
over	O	O:0.999884
each	O	O:0.999767
row	O	O:0.999913
in	O	O:0.999997
the	O	O:0.999998
data	O	O:0.999960
frame	O	O:0.999991
?	O	O:0.999983
	
How	O	O:0.999931
can	O	O:0.999974
I	O	O:0.999999
use	O	O:0.999994
the	O	O:0.999457
`	O	O:0.999874
drop_duplicates	B-API	B-API:0.999991
`	O	O:0.999986
method	O	O:0.999949
to	O	O:0.999997
remove	O	O:0.999958
all	O	O:0.999976
the	O	O:0.999996
duplicate	O	O:0.999962
dates	O	O:0.998948
for	O	O:0.999997
each	O	O:0.999866
persons	O	O:0.999875
set	O	O:0.999976
of	O	O:0.999995
records	O	O:0.998562
?	O	O:0.999970
	
Or	O	O:0.999734
is	O	O:0.999997
there	O	O:0.999970
another	O	O:0.999894
way	O	O:0.999943
-	O	O:0.999994
such	O	O:0.999962
as	O	O:0.999993
apply	O	B-API:0.964987
?	O	O:0.999306
	
#CODE	O	O:0.998453
	
I	O	O:0.999977
made	O	O:0.999958
something	O	O:0.999571
that	O	O:0.999705
works	O	O:0.999926
,	O	O:0.999987
but	O	O:0.999979
there	O	O:0.999528
is	O	O:0.999997
probably	O	O:0.999947
a	O	O:0.999993
better	O	O:0.998823
way	O	O:0.999965
to	O	O:0.999957
do	O	O:0.999999
this	O	O:0.999876
.	O	O:0.999921
	
For	O	O:0.999962
each	O	O:0.999837
column	O	O:0.999878
in	O	O:0.999993
my	O	O:0.999991
dataframe	B-API	O:0.998055
`	O	O:0.999993
df	O	O:0.999117
[	O	O:0.999997
column	O	O:0.999874
]	O	O:0.999983
=	O	O:0.999917
df	O	O:0.999511
[	O	O:0.999987
column	O	O:0.999901
]	O	O:0.999912
.map	B-API	B-API:0.998274
(	O	O:0.999977
mapdict	O	O:0.999392
)`	O	O:0.999654
.	O	O:0.999746
	
`	O	O:0.999960
apply	O	B-API:0.989249
`	O	O:0.999905
doesn't	O	O:0.999121
seem	O	O:0.999946
to	O	O:0.999998
work	O	O:0.999998
on	O	O:0.999998
a	O	O:0.999997
dataframe	B-API	O:0.994636
.	O	O:0.999883
	
Thank	O	O:0.999328
you	O	O:0.999761
!	O	O:0.999952
	
Very	O	O:0.999672
slow	O	O:0.999517
single	O	O:0.999919
pandas	O	O:0.999941
apply	O	O:0.558003
/	O	O:0.999550
groupby	B-API	B-API:0.989792
call	O	O:0.988134
	
I	O	O:0.999992
have	O	O:0.999991
a	O	O:0.999980
small	O	O:0.998500
dataframe	B-API	O:0.972994
(	O	O:0.999943
200	O	O:0.999756
*	O	O:0.999978
19	O	O:0.999674
)	O	O:0.999945
.	O	O:0.999728
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.996071
a	O	O:0.999861
function	O	O:0.999240
to	O	O:0.999998
each	O	O:0.999973
row	O	O:0.999853
.	O	O:0.999914
	
There's	O	O:0.999686
no	O	O:0.999978
sub-loops	O	O:0.997276
.	O	O:0.999886
	
I've	O	O:0.999527
tried	O	O:0.999789
using	O	O:0.999075
groupby	B-API	B-API:0.999175
and	O	O:0.999849
row	O	O:0.999011
apply	O	B-API:0.973131
:	O	O:0.999591
#CODE	O	O:0.999058
	
Incidentally	O	O:0.999868
,	O	O:0.999993
I	O	O:0.999995
don't	O	O:0.999946
see	O	O:0.999979
the	O	O:0.999998
use	O	O:0.999941
of	O	O:0.999899
the	O	O:0.999819
groupby	B-API	B-API:0.977000
version	O	O:0.998568
.	O	O:0.999610
	
If	O	O:0.999957
you	O	O:0.999987
want	O	O:0.999984
to	O	O:0.999997
apply	O	O:0.997135
a	O	O:0.999895
function	O	O:0.999239
to	O	O:0.999979
*	O	O:1.000000
every	O	O:0.999783
*	O	O:0.999991
row	O	O:0.999918
,	O	O:0.999959
groupby	B-API	B-API:0.978405
doesn't	O	O:0.999873
make	O	O:0.999577
sense	O	O:0.999890
.	O	O:0.999850
	
was	O	O:0.999894
just	O	O:0.999874
using	O	O:0.999984
it	O	O:0.999866
for	O	O:0.999945
clarity	O	O:0.998954
/	O	O:0.999973
possible	O	O:0.999549
future	O	O:0.999782
abstraction	O	O:0.999937
.	O	O:0.999968
at	O	O:0.999993
the	O	O:0.999990
time	O	O:0.999887
,	O	O:0.999999
each	O	O:0.999867
row	O	O:0.999658
is	O	O:0.999972
it's	O	O:0.999780
own	O	O:0.999960
round	O	O:0.998857
,	O	O:0.999990
so	O	O:0.999992
each	O	O:0.999897
group	O	O:0.998835
is	O	O:0.999999
a	O	O:0.999989
df	O	O:0.999489
with	O	O:0.999973
one	O	O:0.999935
row	O	O:0.999909
.	O	O:0.999913
	
This	O	O:0.998056
might	O	O:0.999844
not	O	O:0.999996
always	O	O:0.999994
be	O	O:0.999997
the	O	O:0.999992
case	O	O:0.999849
,	O	O:0.999996
so	O	O:0.999996
the	O	O:0.999990
row	O	O:0.999944
apply	O	B-API:0.522766
would	O	O:0.999950
only	O	O:0.999980
be	O	O:1.000000
a	O	O:0.999998
temporary	O	O:0.992130
fix	O	O:0.977626
(	O	O:0.999777
but	O	O:0.999783
it's	O	O:0.999806
not	O	O:0.999972
faster	O	O:0.999924
,	O	O:0.999995
anyway	O	O:0.999930
,	O	O:0.999997
so	O	O:0.999987
I	O	O:0.999988
guess	O	O:0.999973
not	O	O:0.999857
)	O	O:0.999980
	
As	O	O:0.999987
a	O	O:0.999960
work-around	O	O:0.998570
I'm	O	O:0.999987
trying	O	O:0.999962
to	O	O:0.999990
do	O	O:0.999998
the	O	O:0.999995
same	O	O:0.999958
thing	O	O:0.999922
filter	O	O:0.998419
does	O	O:0.999662
with	O	O:0.999847
groupby	B-API	B-API:0.989707
and	O	O:0.999938
apply	O	B-API:0.943617
but	O	O:0.997844
it	O	O:0.999858
doesn't	O	O:0.999963
work	O	O:0.999940
as	O	O:0.999996
expected	O	O:0.999666
.	O	O:0.999891
	
Any	O	O:0.999679
suggestions	O	O:0.999103
?	O	O:0.999884
	
#CODE	O	O:0.998453
	
The	O	O:0.999943
problem	O	O:0.999666
with	O	O:0.999992
your	O	O:0.999920
example	O	O:0.999966
code	O	O:0.999765
is	O	O:0.999998
that	O	O:0.999883
the	O	O:0.999996
`	O	O:0.999984
apply	O	B-API:0.990886
`	O	O:0.999945
doesn't	O	O:0.998545
know	O	O:0.999980
what	O	O:0.999981
to	O	O:0.999993
do	O	O:0.999999
with	O	O:0.999973
the	O	O:0.999771
`	O	O:0.999986
None	O	O:0.997893
`	O	O:0.999999
when	O	O:0.999555
putting	O	O:0.999805
the	O	O:0.999994
dataframe	B-API	O:0.999691
back	O	O:0.999496
together	O	O:0.999554
.	O	O:0.999913
	
Your	O	O:0.999525
`	O	O:0.999982
apply	O	B-API:0.962208
`	O	O:0.999746
function	O	O:0.999398
needs	O	O:0.999984
to	O	O:0.999985
output	O	O:0.999991
the	O	O:0.999988
same	O	O:0.999983
type	O	O:0.999568
of	O	O:0.999981
object	O	O:0.999960
every	O	O:0.999934
time	O	O:0.999833
.	O	O:0.999885
	
If	O	O:0.999950
you	O	O:0.999974
return	O	O:0.999647
`	O	O:0.999973
pd.DataFrame()	B-API	B-API:0.999327
`	O	O:0.999997
instead	O	O:0.999660
of	O	O:0.999996
None	O	O:0.999631
you	O	O:0.999979
should	O	O:0.999946
get	O	O:0.999990
what	O	O:0.999953
you're	O	O:0.999986
looking	O	O:0.999768
for	O	O:0.999960
.	O	O:0.999609
	
I	O	O:0.999679
did	O	O:0.999966
not	O	O:0.999962
play	O	O:0.999813
around	O	O:0.999879
with	O	O:0.999971
that	O	O:0.999789
approach	O	O:0.999994
long	O	O:0.999892
enough	O	O:0.999526
to	O	O:0.999989
figure	O	O:0.999965
out	O	O:0.999973
how	O	O:0.999988
to	O	O:0.999990
"	O	O:1.000000
enlarge	O	O:0.996035
"	O	O:0.999995
batches	O	O:0.999876
of	O	O:0.999986
indexes	O	O:0.999755
all	O	O:0.999993
at	O	O:0.999999
once	O	O:0.998712
.	O	O:0.999938
	
But	O	O:0.999914
,	O	O:0.999996
if	O	O:0.999994
you	O	O:0.999969
figure	O	O:0.999971
that	O	O:0.999984
out	O	O:0.999992
,	O	O:0.999999
you	O	O:0.999967
can	O	O:0.999995
just	O	O:0.999998
"	O	O:1.000000
enlarge	O	O:0.993162
"	O	O:0.999989
the	O	O:0.999996
original	O	O:0.999906
data	O	O:0.999984
frame	O	O:0.999998
with	O	O:0.999987
all	O	O:0.999983
NaN	O	O:0.998961
values	O	O:0.997968
(	O	O:0.999913
at	O	O:0.999998
index	O	O:0.999960
values	O	O:0.999937
from	O	O:0.999804
`	O	O:0.999997
DatesEOY	O	O:0.998253
`)	O	O:0.999982
,	O	O:0.999965
and	O	O:0.999999
then	O	O:0.999876
apply	O	O:0.883685
the	O	O:0.999870
function	O	O:0.999838
about	O	O:0.999922
to	O	O:0.999961
`	O	O:0.999999
YTDSales	O	O:0.990099
`	O	O:0.999998
instead	O	O:0.999944
of	O	O:0.999997
bringing	O	O:0.999421
`	O	O:0.999973
output	O	O:0.994062
`	O	O:0.999994
into	O	O:0.998198
it	O	O:0.999995
at	O	O:0.999979
all	O	O:0.999873
.	O	O:0.999874
	
I	O	O:0.999994
came	O	O:0.999925
up	O	O:0.999830
with	O	O:0.999984
this	O	O:0.999443
function	O	O:0.999983
,	O	O:0.999998
using	O	O:0.999932
`	O	O:0.999869
apply	O	B-API:0.998607
`	O	O:0.999492
:	O	O:0.999009
#CODE	O	O:0.999898
	
then	O	O:0.999713
I	O	O:0.999999
apply	O	O:0.836570
the	O	O:0.998568
multi-indexing	O	O:0.991509
and	O	O:0.999986
unstacking	O	O:0.999561
so	O	O:0.999955
I	O	O:0.999992
can	O	O:0.999994
plot	O	O:0.999932
the	O	O:0.999999
yearly	O	O:0.999955
data	O	O:0.999939
on	O	O:0.999997
top	O	O:0.999988
of	O	O:0.999997
each	O	O:0.999673
other	O	O:0.999980
like	O	O:0.999935
this	O	O:0.999209
:	O	O:0.999980
#CODE	O	O:0.999849
	
AttributeError	O	O:0.995253
:	O	O:0.999967
Cannot	O	O:0.999934
access	O	O:0.999860
callable	O	O:0.999727
attribute	O	O:0.999954
'	O	O:0.999840
to_csv	B-API	B-API:0.952093
'	O	O:0.999987
of	O	O:0.999802
'	O	O:0.999934
DataFrameGroupBy	B-API	B-API:0.739934
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954730
'	O	O:0.999052
method	O	O:0.999572
	
@USER	O	O:0.999386
-Hypothesis	O	O:0.999677
my	O	O:0.999989
original	O	O:0.999354
answer	O	O:0.999785
was	O	O:0.999807
incorrect	O	O:0.999599
,	O	O:0.999997
have	O	O:0.999860
corrected	O	O:0.999919
it	O	O:0.999996
now	O	O:0.999975
,	O	O:0.999998
I	O	O:0.999996
now	O	O:0.999985
apply	O	O:0.611379
row-wise	O	O:0.999004
dividing	O	O:0.999255
each	O	O:0.999826
item	O	O:0.999942
by	O	O:0.999995
the	O	O:0.999990
row	O	O:0.999888
sum	O	O:0.999769
,	O	O:0.999999
the	O	O:0.999993
values	O	O:0.999804
seem	O	O:0.999906
correct	O	O:0.999991
to	O	O:0.999999
me	O	O:0.999997
now	O	O:0.999828
	
If	O	O:0.999974
I	O	O:0.999992
apply	O	O:0.881940
the	O	O:0.999854
rule	O	O:0.998601
in	O	O:0.999989
the	O	O:0.999995
df	O	O:0.999922
example	O	O:0.999806
,	O	O:0.999996
the	O	O:0.999982
output	O	O:0.999247
should	O	O:0.999808
be	O	O:0.999958
:	O	O:0.999989
#CODE	O	O:0.999508
	
Thanks	O	O:0.998776
for	O	O:0.999968
the	O	O:0.999915
example	O	O:0.997618
.	O	O:0.999833
	
In	O	O:0.999963
my	O	O:0.999987
case	O	O:0.999900
,	O	O:0.999999
there	O	O:0.999930
are	O	O:0.999973
around	O	O:0.999907
30	O	O:0.999812
columns	O	O:0.998832
:	O	O:0.999937
'	O	O:0.999994
measure1	O	O:0.999380
'	O	O:0.999969
,	O	O:0.999927
'	O	O:0.999986
measure2	O	O:0.996411
'	O	O:0.999975
...	O	O:0.999686
	
'	O	O:0.999938
measure30	O	O:0.996413
'	O	O:0.999926
.	O	O:0.999897
	
However	O	O:0.999854
,	O	O:0.999991
I	O	O:0.999999
only	O	O:0.999990
want	O	O:0.999929
to	O	O:0.999996
apply	O	O:0.959952
sum()	B-API	O:0.504567
to	O	O:0.999620
'	O	O:0.999999
measure1	O	O:0.994998
'	O	O:0.999966
...	O	O:0.999567
	
'	O	O:0.999938
measure20	O	O:0.996416
'	O	O:0.999926
.	O	O:0.999897
	
is	O	O:0.999982
there	O	O:0.999958
a	O	O:0.999995
way	O	O:0.999635
df.groupby	B-API	B-API:0.983364
([	O	O:0.999668
'	O	O:0.999862
dim1	O	O:0.999100
'])	O	O:0.999436
[	O	O:0.999379
'	O	O:0.999967
measure1	O	O:0.997936
'	O	O:0.999966
,	O	O:0.999927
'	O	O:0.999990
measure2	O	O:0.999902
']	O	O:0.999978
.sum()	B-API	B-API:0.996852
can	O	O:0.999912
be	O	O:0.999999
written	O	O:0.999823
without	O	O:0.999787
having	O	O:0.999386
to	O	O:0.999936
write	O	O:0.999994
all	O	O:0.999949
20	O	O:0.999986
column	O	O:0.999785
names	O	O:0.999669
.	O	O:0.999913
	
This	O	O:0.998986
is	O	O:0.999978
important	O	O:0.999545
because	O	O:0.999995
some	O	O:0.999894
of	O	O:0.999998
my	O	O:0.999986
column	O	O:0.999966
names	O	O:0.999881
are	O	O:0.999996
generated	O	O:0.999965
programatically	O	O:0.999409
,	O	O:0.999987
and	O	O:0.999991
I	O	O:0.999971
do	O	O:0.999946
not	O	O:0.999954
know	O	O:0.999954
their	O	O:0.999916
names	O	O:0.999575
beforehand	O	O:0.999198
.	O	O:0.999948
	
I	O	O:0.999991
need	O	O:0.999986
to	O	O:0.999977
apply	O	O:0.978621
the	O	O:0.999857
formula	O	O:0.999733
above	O	O:0.999850
for	O	O:0.999993
each	O	O:0.999194
chunk	O	O:0.998537
.	O	O:0.999900
	
So	O	O:0.999920
following	O	O:0.999935
this	O	O:0.999838
recipe	O	O:0.999833
I	O	O:0.999957
tried	O	O:0.999300
:	O	O:0.999723
#CODE	O	O:0.999586
	
You	O	O:0.999967
just	O	O:0.999967
need	O	O:0.999991
to	O	O:0.999995
add	O	O:0.999998
the	O	O:0.999988
param	O	O:0.998346
`	O	O:0.999986
axis=1	O	O:0.982421
`	O	O:0.999983
:	O	O:0.999823
apply	O	B-API:0.713571
(	O	O:0.999971
lambda	O	O:0.997549
row	O	O:0.999453
:	O	O:0.999905
func	O	O:0.996045
(	O	O:0.999994
row	O	O:0.999911
)	O	O:0.999987
,	O	O:0.999990
axis=1	O	O:0.999908
)`	O	O:0.999970
then	O	O:0.999621
whatever	O	O:1.000000
your	O	O:0.999967
func	O	O:0.999686
does	O	O:0.999950
access	O	O:0.999846
the	O	O:0.999999
columns	O	O:0.999932
of	O	O:0.999978
interest	O	O:0.999090
:	O	O:0.999995
`	O	O:0.999992
def	O	O:0.999189
func	O	O:0.976440
(	O	O:0.999908
x	O	O:0.999108
):	O	O:0.999957
return	O	O:0.999304
x	O	O:0.999708
[	O	O:0.999942
'	O	O:0.999978
A	O	O:0.999985
']	O	O:0.999876
+	O	O:0.999707
x	O	O:0.999541
[	O	O:0.999949
'	O	O:0.999978
C	O	O:0.999942
']`	O	O:0.999973
as	O	O:0.999973
an	O	O:0.999944
example	O	O:0.999552
	
using	O	O:0.998336
right_on	O	O:0.977032
:	O	O:0.999973
result	O	O:0.999981
of	O	O:0.999973
function	O	O:0.999939
f	O	O:0.999992
apply	O	O:0.542384
to	O	O:0.999858
col	O	O:0.999706
'	O	O:0.999986
Y	O	O:0.999863
'	O	O:0.999996
from	O	O:0.999807
df2	O	O:0.999089
.	O	O:0.999894
	
Can	O	O:0.999662
anyone	O	O:0.999883
suggest	O	O:0.999928
a	O	O:0.999987
way	O	O:0.999900
to	O	O:0.999993
apply	O	O:0.992680
a	O	O:0.999927
function	O	O:0.999628
sequentially	O	O:0.999691
,	O	O:0.999986
so	O	O:0.999986
not	O	O:0.999997
only	O	O:0.999995
using	O	O:0.999990
the	O	O:0.999963
last	O	O:0.998076
calculated	O	O:0.999958
value	O	O:0.999975
of	O	O:0.999992
the	O	O:0.999977
column	O	O:0.999977
being	O	O:0.999227
computed	O	O:0.999483
but	O	O:0.999991
also	O	O:0.999958
using	O	O:0.999990
the	O	O:0.999717
present	O	O:0.979195
and	O	O:0.999996
past	O	O:0.999948
values	O	O:0.999805
of	O	O:0.999995
other	O	O:0.999988
columns	O	O:0.999951
in	O	O:0.999991
a	O	O:0.999995
pandas	O	O:0.999631
dataframe	B-API	O:0.997294
.	O	O:0.999785
	
@USER	O	O:0.993711
:	O	O:0.999960
Thanks	O	O:0.999778
for	O	O:0.999988
responding	O	O:0.999104
,	O	O:0.999978
I	O	O:0.999996
have	O	O:0.999982
added	O	O:0.999857
clarification	O	O:0.999939
as	O	O:0.999994
asked	O	O:0.998947
for	O	O:0.999895
.	O	O:0.999377
	
The	O	O:0.999980
crux	O	O:0.999514
of	O	O:0.999998
what	O	O:0.999859
I	O	O:0.999995
am	O	O:0.999999
trying	O	O:0.999653
to	O	O:0.999992
do	O	O:0.999983
is	O	O:0.999995
to	O	O:0.999963
be	O	O:1.000000
able	O	O:0.999984
to	O	O:0.999994
apply	O	O:0.993905
a	O	O:0.999870
function	O	O:0.999464
such	O	O:0.999961
that	O	O:0.999930
it	O	O:0.999985
has	O	O:0.999995
access	O	O:0.999691
to	O	O:0.999996
current	O	O:0.999997
values	O	O:0.999923
of	O	O:0.999993
all	O	O:0.999992
columns	O	O:0.999881
and	O	O:0.999993
past	O	O:0.999955
calculated	O	O:0.999919
values	O	O:0.999935
of	O	O:0.999989
the	O	O:0.999993
current	O	O:0.999860
column	O	O:0.999725
.	O	O:0.999924
	
Resample	O	O:0.999772
everything	O	O:0.999878
to	O	O:0.999981
5	O	O:0.999999
minute	O	O:0.999706
data	O	O:0.999883
and	O	O:0.999999
then	O	O:0.999968
apply	O	O:0.922845
a	O	O:0.999988
rolling	O	O:0.690131
average	O	O:0.994329
.	O	O:0.999745
	
Something	O	O:0.999832
like	O	O:0.999929
that	O	O:0.999785
is	O	O:0.999997
apllied	O	O:0.999331
here	O	O:0.997954
:	O	O:0.999924
Pandas	O	O:0.999643
:	O	O:0.999989
rolling	O	O:0.999035
mean	O	O:0.999814
by	O	O:0.999982
time	O	O:0.999901
interval	O	O:0.999180
	
Resample	O	O:0.999772
everything	O	O:0.999878
to	O	O:0.999981
5	O	O:0.999999
minute	O	O:0.999706
data	O	O:0.999880
and	O	O:0.999999
then	O	O:0.999902
apply	O	O:0.804405
linear	O	O:0.988705
interpolation	O	O:0.997562
.	O	O:0.999770
	
This	O	O:0.999233
method	O	O:0.999811
is	O	O:0.999993
close	O	O:0.996943
to	O	O:0.999987
method	O	O:0.999987
3	O	O:0.999771
.	O	O:0.999939
	
Pandas	O	O:0.999875
data	O	O:0.999860
frame	O	O:0.999979
:	O	O:0.999996
resample	O	O:0.548701
with	O	O:0.999886
linear	O	O:0.994563
interpolation	O	O:0.999636
	
Apply	O	O:0.999765
the	O	O:0.999832
function	O	O:0.999790
to	O	O:0.999990
the	O	O:1.000000
array	O	O:0.999965
like	O	O:0.999912
this	O	O:0.999658
:	O	O:0.999984
#CODE	O	O:0.999843
	
groupby	B-API	B-API:0.989722
the	O	O:0.999928
user	O	O:0.993520
and	O	O:0.999983
apply	O	O:0.712592
a	O	O:0.999483
lambda	O	O:0.889181
:	O	O:0.999894
#CODE	O	O:0.999456
	
Python	O	O:0.999718
pandas	O	O:0.999915
apply	O	B-API:0.529486
function	O	O:0.999767
if	O	O:0.999989
a	O	O:0.999998
column	O	O:0.999789
value	O	O:0.999461
is	O	O:0.999958
not	O	O:0.999866
NULL	O	O:0.997750
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999962
apply	O	O:0.992296
a	O	O:0.999980
simple	O	O:0.991429
function	O	O:0.999980
for	O	O:0.999995
rows	O	O:0.999642
that	O	O:0.999668
does	O	O:0.999963
not	O	O:0.999982
contain	O	O:0.999953
NULL	O	O:0.999802
values	O	O:0.999677
in	O	O:0.999994
a	O	O:0.999999
specific	O	O:0.999657
column	O	O:0.999698
.	O	O:0.999899
	
My	O	O:0.999625
function	O	O:0.999765
is	O	O:0.999989
as	O	O:0.999995
simple	O	O:0.999714
as	O	O:0.999966
possible	O	O:0.990993
:	O	O:0.999959
#CODE	O	O:0.999785
	
And	O	O:0.999962
my	O	O:0.999987
apply	O	O:0.853918
code	O	O:0.995658
is	O	O:0.999969
the	O	O:0.999894
following	O	O:0.992607
:	O	O:0.999887
#CODE	O	O:0.999764
	
Just	O	O:0.999482
apply	O	O:0.735235
this	O	O:0.995406
:	O	O:0.999910
#CODE	O	O:0.999827
	
Thought	O	O:0.999937
this	O	O:0.999884
would	O	O:0.999971
be	O	O:0.999998
straight	O	O:0.999912
forward	O	O:0.998363
but	O	O:0.999908
had	O	O:0.999966
some	O	O:0.999893
trouble	O	O:0.999953
tracking	O	O:0.999952
down	O	O:0.999751
an	O	O:0.999992
elegant	O	O:0.999823
way	O	O:0.999969
to	O	O:0.999987
search	O	O:0.999993
all	O	O:0.999996
columns	O	O:0.999952
in	O	O:0.999995
a	O	O:0.999999
dataframe	B-API	O:0.997400
at	O	O:0.999995
same	O	O:0.999985
time	O	O:0.999958
for	O	O:0.999995
a	O	O:0.999980
partial	O	O:0.984878
string	O	O:0.999676
match	O	O:0.997961
.	O	O:0.999887
	
Basically	O	O:0.999695
how	O	O:0.999930
would	O	O:0.999976
I	O	O:0.999999
apply	O	O:0.958272
`	O	O:0.999752
df	O	O:0.994661
[	O	O:0.999964
'	O	O:0.999973
col1	O	O:0.999150
']	O	O:0.999844
.str	B-API	B-API:0.989716
.contains	B-API	B-API:0.989717
(	O	O:0.999727
'	O	O:0.999911
^	O	O:0.999975
')`	O	O:0.999971
to	O	O:0.999988
an	O	O:0.999999
entire	O	O:0.999963
dataframe	B-API	O:0.999807
at	O	O:0.999997
once	O	O:0.999753
and	O	O:0.999996
filter	O	O:0.999338
down	O	O:0.998443
to	O	O:0.999999
any	O	O:1.000000
rows	O	O:0.999897
that	O	O:0.999992
have	O	O:0.999997
records	O	O:0.999962
containing	O	O:0.999723
the	O	O:0.999989
match	O	O:0.998504
?	O	O:0.999945
	
You	O	O:0.999917
can	O	O:0.999952
do	O	O:0.999999
that	O	O:0.999993
using	O	O:0.999967
`	O	O:0.999962
apply	O	B-API:0.995846
`	O	O:0.999940
to	O	O:0.999753
traverse	O	O:0.999961
and	O	O:0.999988
apply	O	B-API:0.668282
function	O	O:0.998902
on	O	O:0.999969
every	O	O:0.999784
element	O	O:0.999859
,	O	O:0.999942
and	O	O:0.999996
lambda	O	O:0.999820
to	O	O:0.999960
write	O	O:0.999996
a	O	O:0.999978
function	O	O:0.999957
to	O	O:0.999993
replace	O	O:0.999890
the	O	O:0.999989
key	O	O:0.999972
with	O	O:0.999974
the	O	O:0.999998
value	O	O:0.999990
of	O	O:0.999969
in	O	O:0.999997
your	O	O:0.999962
dictionary	O	O:0.999712
.	O	O:0.999913
	
You	O	O:0.999933
can	O	O:0.999867
use	O	O:0.999999
this	O	O:0.999947
to	O	O:0.999995
go	O	O:0.999999
through	O	O:0.999981
the	O	O:0.999989
dates	O	O:0.999258
that	O	O:0.999946
you	O	O:0.999999
have	O	O:0.999997
classified	O	O:0.999979
as	O	O:0.999992
"	O	O:0.999922
year-month	O	O:0.984418
"	O	O:0.999886
and	O	O:0.999938
apply	O	O:0.820770
cretiria	O	O:0.981224
on	O	O:0.999962
it	O	O:0.999995
to	O	O:0.999998
get	O	O:0.999999
related	O	O:0.999970
data	O	O:0.999926
.	O	O:0.999926
	
#CODE	O	O:0.998453
	
But	O	O:0.999954
those	O	O:0.999986
have	O	O:0.999950
to	O	O:0.999995
be	O	O:1.000000
ints	O	O:0.999300
.	O	O:0.999816
	
Add	O	O:0.999931
a	O	O:0.999991
separate	O	O:0.999207
issue	O	O:0.999839
on	O	O:0.999990
Github	O	O:0.999877
to	O	O:0.999997
have	O	O:0.999997
the	O	O:0.999850
str.slice	B-API	B-API:0.984969
method	O	O:0.999975
take	O	O:0.999373
series	O	O:0.999987
objects	O	O:0.999643
and	O	O:0.999989
apply	O	O:0.640857
element-wise	O	O:0.975230
.	O	O:0.998570
	
getting	O	O:0.994478
the	O	O:0.999965
index	O	O:0.999950
of	O	O:0.999999
a	O	O:0.999997
row	O	O:0.999911
in	O	O:0.999990
a	O	O:0.999998
pandas	O	O:0.999753
apply	O	B-API:0.661037
function	O	O:0.997522
	
I	O	O:0.999955
can	O	O:0.999977
apply	O	O:0.894508
it	O	O:0.999992
like	O	O:0.999522
so	O	O:0.999929
:	O	O:0.999966
#CODE	O	O:0.999869
	
Aside	O	O:0.998253
:	O	O:0.999836
is	O	O:0.999998
there	O	O:0.999989
a	O	O:0.999996
reason	O	O:0.999673
you	O	O:0.999994
need	O	O:0.999992
to	O	O:0.999996
use	O	O:0.999998
`	O	O:0.999962
apply	O	B-API:0.990795
`	O	O:0.999922
?	O	O:0.998984
	
It's	O	O:0.999879
much	O	O:0.999602
slower	O	O:0.999886
than	O	O:0.999698
performing	O	O:0.999886
vectorized	O	O:0.999816
ops	O	O:0.999857
on	O	O:0.999977
the	O	O:0.999998
frame	O	O:0.999997
itself	O	O:0.999467
.	O	O:0.999957
	
(	O	O:0.999926
Sometimes	O	O:0.999926
apply	O	O:0.637926
*	O	O:0.999892
is	O	O:0.999859
*	O	O:0.999984
the	O	O:0.999989
simplest	O	O:0.999524
way	O	O:0.999968
to	O	O:0.999985
do	O	O:0.999999
something	O	O:0.999882
,	O	O:0.999926
and	O	O:0.999997
performance	O	O:0.999865
considerations	O	O:0.998908
are	O	O:0.999990
often	O	O:0.999477
exaggerated	O	O:0.999523
,	O	O:0.999983
but	O	O:0.999966
for	O	O:0.999997
your	O	O:0.999938
particular	O	O:0.999625
example	O	O:0.999936
it's	O	O:0.999901
as	O	O:0.999998
easy	O	O:0.995901
*	O	O:0.999992
not	O	O:0.999924
*	O	O:0.999997
to	O	O:0.999977
use	O	O:0.999990
it	O	O:0.999923
.	O	O:0.999946
)	O	O:0.999979
	
`	O	O:0.999959
apply	O	B-API:0.982072
`	O	O:0.999698
is	O	O:0.999772
too	O	O:0.999885
slow	O	O:0.999101
.	O	O:0.999712
	
@USER	O	O:0.998461
:	O	O:0.999974
I	O	O:0.999999
have	O	O:0.999997
a	O	O:0.999919
script	O	O:0.999933
that	O	O:0.999841
I	O	O:0.999983
(	O	O:0.999995
would	O	O:0.999954
like	O	O:0.999987
to	O	O:0.999999
)	O	O:0.999999
run	O	O:0.999843
fairly	O	O:0.999889
frequently	O	O:0.999964
that	O	O:0.999914
spent	O	O:0.999931
about	O	O:0.999948
300	O	O:0.999833
seconds	O	O:0.997609
in	O	O:0.999995
this	O	O:0.999949
computation	O	O:0.999983
when	O	O:0.999959
using	O	O:0.999949
`	O	O:0.999980
apply	O	B-API:0.998324
`	O	O:0.998136
(	O	O:0.999898
more	O	O:0.999984
like	O	O:0.999827
100	O	O:0.999926
with	O	O:0.999947
the	O	O:0.999970
awful	O	O:0.999817
hack	O	O:0.999942
above	O	O:0.999777
)	O	O:0.999987
.	O	O:0.999712
	
It	O	O:0.999982
goes	O	O:0.999527
through	O	O:0.999979
tens	O	O:0.999857
of	O	O:0.999997
thousands	O	O:0.999985
of	O	O:0.999999
rows	O	O:0.998933
,	O	O:0.999999
tens	O	O:0.999981
of	O	O:0.999983
times	O	O:0.999034
.	O	O:0.999965
	
Pandas	O	O:0.998464
0.14.1	O	O:0.998560
.	O	O:0.999610
	
I	O	O:0.999466
was	O	O:0.999912
not	O	O:0.999980
able	O	O:0.999985
to	O	O:0.999998
find	O	O:0.999998
a	O	O:0.999997
way	O	O:0.999962
without	O	O:0.999888
at	O	O:0.999991
least	O	O:0.999874
using	O	O:0.999971
an	O	O:0.999603
`	O	O:0.999933
apply	O	B-API:0.980742
`	O	O:0.999936
for	O	O:0.999133
setup	O	O:0.996661
but	O	O:0.999949
assuming	O	O:0.999972
that	O	O:0.999252
is	O	O:0.999990
okay	O	O:0.996311
:	O	O:0.999963
#CODE	O	O:0.999667
	
Note	O	O:0.999961
that	O	O:0.999956
you	O	O:0.999999
must	O	O:0.999975
use	O	O:0.999994
the	O	O:0.999945
`	O	O:0.999973
datetime	O	O:0.979285
`	O	O:0.999997
from	O	O:0.999764
the	O	O:0.999991
`	O	O:0.999987
datetime	O	O:0.915004
`	O	O:0.999997
module	O	O:0.999526
rather	O	O:0.999975
than	O	O:0.999928
the	O	O:0.999965
`	O	O:0.999992
numpy	O	O:0.997864
`	O	O:0.999999
one	O	O:0.999950
or	O	O:0.999998
the	O	O:0.999952
`	O	O:0.999992
pandas	O	O:0.992529
`	O	O:0.999998
one	O	O:0.999795
.	O	O:0.999952
	
Since	O	O:0.999804
you	O	O:0.999972
are	O	O:0.999999
only	O	O:0.999992
creating	O	O:0.999938
the	O	O:0.999992
delta	O	O:0.993840
with	O	O:0.999936
the	O	O:0.999986
apply	O	B-API:0.527912
I	O	O:0.999779
would	O	O:0.999983
hope	O	O:0.999584
you	O	O:0.999996
experience	O	O:0.999983
a	O	O:0.999991
speedup	O	O:0.998264
.	O	O:0.999881
	
Here	O	O:0.998669
is	O	O:0.999996
a	O	O:0.999981
way	O	O:0.999862
to	O	O:0.999974
do	O	O:0.999993
it	O	O:0.999960
(	O	O:0.999993
by	O	O:0.999994
adding	O	O:0.999820
NumPy	O	O:0.999270
datetime64s	O	O:0.995252
with	O	O:0.999846
timedelta64s	O	O:0.998650
)	O	O:0.999984
without	O	O:0.999823
calling	O	O:0.997341
`	O	O:0.999944
apply	O	B-API:0.997659
`	O	O:0.999512
:	O	O:0.999308
#CODE	O	O:0.999898
	
`	O	O:0.999844
array_split	B-API	B-API:0.997941
`	O	O:0.999984
accepts	O	O:0.999067
any	O	O:0.999978
array-like	O	O:0.997729
argument	O	O:0.994278
(	O	O:0.999966
including	O	O:0.998353
`	O	O:0.999945
pandas.DataFrame	B-API	B-API:0.998704
`	O	O:0.999996
objects	O	O:0.998808
)	O	O:0.999976
,	O	O:0.999969
but	O	O:0.999992
only	O	O:0.999701
returns	O	O:0.999771
guarantees	O	O:0.999807
that	O	O:0.999875
it	O	O:0.999997
return	O	O:0.999939
a	O	O:0.999866
`	O	O:0.999866
numpy.ndarray	B-API	B-API:0.990681
`	O	O:0.999916
(	O	O:0.999816
which	O	O:0.999976
DataFrames	O	O:0.996927
are	O	O:0.999986
not	O	O:0.999976
)	O	O:0.999982
.	O	O:0.999817
	
Of	O	O:0.999968
course	O	O:0.999870
,	O	O:0.999998
ndarrays	O	O:0.999771
don't	O	O:0.999967
have	O	O:0.999986
an	O	O:0.999996
`	O	O:0.999995
apply	O	B-API:0.998003
`	O	O:0.999877
method	O	O:0.999410
,	O	O:0.999995
which	O	O:0.999907
is	O	O:0.999990
exactly	O	O:0.999960
the	O	O:0.999985
error	O	O:0.998561
you're	O	O:0.999660
seeing	O	O:0.998690
.	O	O:0.999888
	
I'm	O	O:0.999944
actually	O	O:0.999941
surprised	O	O:0.999875
that	O	O:0.999944
this	O	O:0.999972
works	O	O:0.999941
in	O	O:0.999993
any	O	O:0.999919
scenario	O	O:0.999249
.	O	O:0.999725
	
You'll	O	O:0.999490
either	O	O:0.999987
need	O	O:0.999961
to	O	O:0.999998
split	O	O:0.999888
the	O	O:0.999988
dataframe	B-API	O:0.999635
into	O	O:0.999918
sub-frames	O	O:0.999877
or	O	O:0.999994
apply	O	O:0.955860
a	O	O:0.999786
function	O	O:0.999783
that	O	O:0.999952
operations	O	O:0.999973
on	O	O:0.999986
ndarrays	O	O:0.999735
.	O	O:0.999934
	
Since	O	O:0.999648
Limit	O	O:0.999919
varies	O	O:0.999848
on	O	O:0.999995
each	O	O:0.999834
row	O	O:0.999981
,	O	O:0.999993
you	O	O:0.999985
should	O	O:0.999949
use	O	O:0.999994
,	O	O:0.999975
for	O	O:0.999968
example	O	O:0.999525
,	O	O:0.999990
apply	O	O:0.827061
like	O	O:0.997711
following	O	O:0.995390
:	O	O:0.999935
#CODE	O	O:0.999701
	
Since	O	O:0.999821
you	O	O:0.999990
want	O	O:0.999990
to	O	O:0.999995
apply	O	O:0.992735
the	O	O:0.999944
operation	O	O:0.999296
generically	O	O:0.999920
,	O	O:0.999996
to	O	O:0.999997
any	O	O:0.999999
given	O	O:0.998328
`	O	O:0.999990
foo	O	O:0.998469
`	O	O:0.999980
function	O	O:0.999441
,	O	O:0.999998
you	O	O:0.999992
have	O	O:0.999969
no	O	O:0.999988
choice	O	O:0.999905
but	O	O:0.999988
to	O	O:0.999981
call	O	O:0.999977
that	O	O:0.999747
function	O	O:0.999773
`	O	O:0.999995
na	O	O:0.989356
`	O	O:0.999995
-times-	O	O:0.990148
`	O	O:0.999987
nb	O	O:0.999107
`	O	O:0.999992
times	O	O:0.996787
.	O	O:0.999952
	
That	O	O:0.999791
part	O	O:0.997638
is	O	O:0.999985
not	O	O:0.999981
likely	O	O:0.999891
to	O	O:0.999996
be	O	O:0.999995
further	O	O:0.999878
optimizable	O	O:0.998597
.	O	O:0.999905
	
The	O	O:0.999620
`	O	O:0.999989
pandas	O	O:0.995266
`	O	O:0.999996
way	O	O:0.999762
actively	O	O:0.999967
shuns	O	O:0.999700
looping	O	O:0.999303
in	O	O:0.999979
favor	O	O:0.999849
of	O	O:0.999976
proper	O	O:0.996343
indexing	O	O:0.999539
and	O	O:0.999991
selecting	O	O:0.999780
due	O	O:0.999137
to	O	O:0.999989
the	O	O:0.999998
expensive	O	O:0.999536
overhead	O	O:0.999945
incurred	O	O:0.999670
in	O	O:0.999974
looping	O	O:0.997244
.	O	O:0.999672
	
Are	O	O:0.999947
you	O	O:0.999990
sure	O	O:0.999935
you	O	O:0.999989
cannot	O	O:0.999960
apply	O	O:0.940502
indexing	O	O:0.999782
plus	O	O:0.999530
,	O	O:0.999988
for	O	O:0.999990
example	O	O:0.999687
,	O	O:0.999995
a	O	O:0.999997
lambda	O	O:0.998759
expression	O	O:0.999860
to	O	O:0.999979
apply	O	O:0.990246
these	O	O:0.999665
filters	O	O:0.995137
?	O	O:0.999945
	
You	O	O:0.999869
could	O	O:0.999987
also	O	O:0.999998
create	O	O:0.999987
a	O	O:0.999997
mask	O	O:0.762342
in	O	O:0.999992
a	O	O:0.999989
loop	O	O:0.998486
and	O	O:0.999984
apply	O	O:0.600896
it	O	O:0.999848
all	O	O:0.999967
at	O	O:0.999996
once	O	O:0.993926
:	O	O:0.999972
#CODE	O	O:0.999850
	
set	O	O:0.998940
`	O	O:0.999991
ts	O	O:0.998283
`	O	O:0.999986
as	O	O:0.999849
index	O	O:0.999805
and	O	O:0.999997
then	O	O:0.999815
`	O	O:0.999993
groupby	B-API	B-API:0.998648
`	O	O:0.999986
second	O	O:0.994084
,	O	O:0.999993
and	O	O:0.999993
transform	O	O:0.708691
with	O	O:0.999430
`	O	O:0.999975
cumsum()	B-API	B-API:0.998696
`	O	O:0.999998
as	O	O:0.999994
a	O	O:0.999997
new	O	O:0.999823
column	O	O:0.999860
s	O	O:0.999923
,	O	O:0.999999
then	O	O:0.999900
apply	O	O:0.851400
`	O	O:0.999951
reset_index	B-API	B-API:0.999652
`	O	O:0.999991
,	O	O:0.999985
like	O	O:0.999972
this	O	O:0.999265
:	O	O:0.999980
#CODE	O	O:0.999879
	
Apply	O	O:0.999817
the	O	O:0.999882
ranker	O	O:0.860290
function	O	O:0.999929
on	O	O:0.999985
each	O	O:0.999983
group	O	O:0.999603
separately	O	O:0.999362
:	O	O:0.999928
	
Another	O	O:0.999412
option	O	O:0.999640
,	O	O:0.999994
inspired	O	O:0.999872
by	O	O:0.999986
HYRY's	O	O:0.999533
solution	O	O:0.999316
,	O	O:0.999986
would	O	O:0.999986
be	O	O:0.999998
to	O	O:0.999999
hide	O	O:0.999935
the	O	O:0.999993
common	O	O:0.999933
columns	O	O:0.999886
in	O	O:0.999906
the	O	O:0.999989
index	O	O:0.999679
,	O	O:0.999979
and	O	O:0.999999
then	O	O:0.999854
apply	O	O:0.923020
HYRY's	O	O:0.998866
`	O	O:0.999921
stack	O	B-API:0.986132
`	O	O:0.999994
ing	O	O:0.985610
trick	O	O:0.999098
:	O	O:0.999880
#CODE	O	O:0.999827
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999945
apply	O	O:0.986959
one	O	O:0.999973
single	O	O:0.997458
function	O	O:0.999993
call	O	O:0.999144
on	O	O:0.999986
"	O	O:0.999936
df	O	O:0.999073
"	O	O:0.999928
.	O	O:0.999543
	
Sometimes	O	O:0.999812
the	O	O:0.999878
function	O	O:0.999905
will	O	O:0.999842
call	O	O:0.999963
member	O	O:0.999952
functions	O	O:0.999703
of	O	O:0.999944
"	O	O:0.999983
df	O	O:0.999159
"	O	O:0.999924
.	O	O:0.999458
	
Sometimes	O	O:0.999519
it	O	O:0.999985
will	O	O:0.999986
just	O	O:0.999982
print	O	O:0.999941
"	O	O:0.999987
df	O	O:0.997631
"	O	O:0.999937
.	O	O:0.999508
	
I	O	O:0.999979
dont	O	O:0.999986
want	O	O:0.999968
a	O	O:0.999993
switch	O	O:0.998971
case	O	O:0.999821
.	O	O:0.999930
	
I	O	O:0.999973
am	O	O:0.999998
a	O	O:0.999950
Python	O	O:0.998963
newbie	O	O:0.999957
,	O	O:0.999996
so	O	O:0.999993
I	O	O:0.999996
dont	O	O:0.999980
really	O	O:0.999613
understand	O	O:0.999881
how	O	O:0.999975
my	O	O:0.999943
question	O	O:0.999528
is	O	O:0.999979
unclear	O	O:0.994052
.	O	O:0.999799
	
As	O	O:0.999956
I	O	O:0.999997
know	O	O:0.999964
so	O	O:0.999966
little	O	O:0.999738
,	O	O:0.999989
I	O	O:0.999995
tend	O	O:0.999938
to	O	O:0.999994
skip	O	O:0.999969
over	O	O:0.999865
crucial	O	O:0.998334
details	O	O:0.999783
.	O	O:0.999726
	
What	O	O:0.999446
are	O	O:0.999993
those	O	O:0.999971
crucial	O	O:0.999433
details	O	O:0.999943
you	O	O:0.999986
need	O	O:0.999987
to	O	O:0.999998
know	O	O:0.999990
?	O	O:0.999978
	
In	O	O:0.999878
Pandas	O	O:0.999383
version	O	O:0.999697
0.14	O	O:0.997258
and	O	O:0.999990
older	O	O:0.999770
,	O	O:0.999971
you	O	O:0.999977
can	O	O:0.999967
use	O	O:0.999998
`	O	O:0.999987
apply	O	B-API:0.971437
`	O	O:0.999992
to	O	O:0.999879
extract	O	O:0.999995
the	O	O:0.999997
dates	O	O:0.999319
from	O	O:0.999957
the	O	O:0.999991
`	O	O:0.999992
datetime	O	O:0.980349
`	O	O:0.999985
values	O	O:0.981424
:	O	O:0.999974
#CODE	O	O:0.999900
	
I	O	O:0.999986
think	O	O:0.999939
you	O	O:0.999843
should	O	O:0.999973
wrap	O	O:0.999819
the	O	O:0.999996
dict	O	O:0.999725
in	O	O:0.999989
a	O	O:0.999992
Series	O	O:0.998904
,	O	O:0.999980
and	O	O:0.999997
then	O	O:0.999944
this	O	O:0.999977
will	O	O:0.999975
already	O	O:0.999994
expand	O	O:0.999351
in	O	O:0.999984
the	O	O:0.999934
groupby	B-API	B-API:0.986147
call	O	O:0.874109
(	O	O:0.999927
but	O	O:0.999967
then	O	O:0.999929
using	O	O:0.999993
`	O	O:0.999966
apply	O	B-API:0.995355
`	O	O:0.999977
instead	O	O:0.999725
of	O	O:0.999992
`	O	O:0.999924
agg	O	B-API:0.993130
`	O	O:0.999986
as	O	O:0.999866
it	O	O:0.999618
is	O	O:0.999986
not	O	O:0.999933
an	O	O:0.999994
aggregated	O	O:0.998736
(	O	O:0.999963
scalar	O	O:0.999961
)	O	O:0.999991
result	O	O:0.999890
anymore	O	O:0.999300
):	O	O:0.999958
#CODE	O	O:0.999521
	
Using	O	O:0.999619
apply	O	B-API:0.953831
in	O	O:0.999963
pandas	O	O:0.999936
data	O	O:0.999981
frame	O	O:0.999989
gives	O	O:0.999782
ValueError	O	O:0.999592
	
I	O	O:0.999993
have	O	O:0.999992
a	O	O:0.999964
vector	O	O:0.999953
that	O	O:0.999894
I	O	O:0.999999
want	O	O:0.999991
to	O	O:0.999960
apply	O	O:0.994856
a	O	O:0.999960
pearson	O	O:0.994269
correlation	O	O:0.999945
to	O	O:0.999999
all	O	O:1.000000
rows	O	O:0.999949
of	O	O:0.999995
a	O	O:0.999999
pandas	O	O:0.999964
data	O	O:0.999972
frame	O	O:0.999980
.	O	O:0.999943
	
I	O	O:0.999948
am	O	O:0.999995
trying	O	O:0.999502
the	O	O:0.999959
following	O	O:0.989200
:	O	O:0.999916
#CODE	O	O:0.999804
	
Apply	O	O:0.999672
func	O	O:0.994658
simply	O	O:0.999715
takes	O	O:0.999853
two	O	O:0.999891
`	O	O:0.999995
numpy	O	O:0.996305
`	O	O:0.999993
arrays	O	O:0.997503
and	O	O:0.999987
calculates	O	O:0.999489
the	O	O:0.999776
correlation	O	O:0.997938
#CODE	O	O:0.999754
	
python	O	O:0.998258
pandas	O	O:0.998986
:	O	O:0.999995
apply	O	O:0.912011
a	O	O:0.999905
function	O	O:0.999362
with	O	O:0.999943
arguments	O	O:0.999883
to	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999317
.	O	O:0.999916
	
Update	O	O:0.998709
	
I	O	O:0.999969
ensure	O	O:0.999896
that	O	O:0.999763
args	O	O:0.999454
is	O	O:0.999995
a	O	O:0.999985
tuple	O	O:0.998437
which	O	O:0.999547
is	O	O:0.999987
what	O	O:0.999855
the	O	O:0.999986
`	O	O:0.999983
apply	O	B-API:0.979276
`	O	O:0.999796
function	O	O:0.996021
is	O	O:0.999992
expecting	O	O:0.999704
and	O	O:0.999994
I	O	O:0.999994
get	O	O:0.999985
the	O	O:0.999970
result	O	O:0.999846
I	O	O:0.999962
was	O	O:0.999976
expecting	O	O:0.998712
	
`	O	O:0.999935
df.apply	B-API	B-API:0.990241
`	O	O:0.999966
is	O	O:0.999908
to	O	O:0.999997
each	O	O:0.999995
value	O	O:0.999897
in	O	O:0.999987
array	O	O:0.999981
,	O	O:0.999996
so	O	O:0.999975
`	O	O:0.999968
df.apply	B-API	B-API:0.996640
(	O	O:0.999988
list	O	O:0.996881
,	O	O:0.999990
axis=1	O	O:0.999850
)`	O	O:0.999420
is	O	O:0.999975
equivalent	O	O:0.998309
to	O	O:0.999968
:	O	O:0.999999
apply	O	O:0.532047
`	O	O:0.999953
list()	B-API	B-API:0.666479
`	O	O:0.999995
on	O	O:0.999984
each	O	O:0.999981
value	O	O:0.999957
in	O	O:0.999987
the	O	O:0.999988
array	O	O:0.999922
,	O	O:0.999969
ie	O	O:0.999981
.	O	O:0.999905
	
`	O	O:0.999911
81	O	O:0.998955
=	O	O:0.999888
[	O	O:0.999971
81	O	O:0.999872
]	O	O:0.999955
,	O	O:0.999941
88	O	O:0.999796
=	O	O:0.999653
[	O	O:0.999977
8	O	O:0.999835
8]	O	O:0.999678
,	O	O:0.999975
...	O	O:0.999408
	
`	O	O:0.999944
individually	O	O:0.996603
.	O	O:0.999957
	
So	O	O:0.999932
it	O	O:0.999990
will	O	O:0.999975
have	O	O:0.999984
no	O	O:0.999993
effects	O	O:0.999558
.	O	O:0.999903
	
Actually	O	O:0.999600
no	O	O:0.999969
.	O	O:0.999966
apply	O	O:0.565809
works	O	O:0.999604
with	O	O:0.999966
entire	O	O:0.999263
row	O	O:0.999735
(	O	O:0.999978
if	O	O:0.999995
axis	O	O:0.999913
parameter	O	O:0.999902
=	O	O:0.999886
1	O	O:0.999931
)	O	O:0.999945
.	O	O:0.999733
	
If	O	O:0.999959
you	O	O:0.999988
make	O	O:0.999835
df.apply	B-API	B-API:0.901766
(	O	O:0.999980
sum	O	O:0.999536
,	O	O:0.999995
axis=1	O	O:0.999714
)	O	O:0.999984
you	O	O:0.999960
will	O	O:0.999983
receive	O	O:0.999986
sum	O	O:0.999960
of	O	O:0.999998
entire	O	O:0.999433
row	O	O:0.999932
.	O	O:0.999778
	
Additionally	O	O:0.999709
,	O	O:0.999989
try	O	O:0.999904
df.apply	B-API	B-API:0.988987
(	O	O:0.999990
lambda	O	O:0.999202
r	O	O:0.999742
:	O	O:0.999830
'	O	O:0.999986
,	O	O:0.999987
'	O	O:0.999942
.join	B-API	B-API:0.990345
([	O	O:0.999862
str	O	O:0.985811
(	O	O:0.999984
e	O	O:0.999952
)	O	O:0.999988
for	O	O:0.999982
e	O	O:0.999935
in	O	O:0.999965
r	O	O:0.999937
])	O	O:0.999935
,	O	O:0.999969
axis=1	O	O:0.999207
)	O	O:0.999952
and	O	O:0.999982
you	O	O:0.999991
will	O	O:0.999880
get	O	O:0.999999
one	O	O:0.999997
result	O	O:0.999974
for	O	O:0.999998
each	O	O:0.998698
row	O	O:0.999547
.	O	O:0.999868
	
@USER	O	O:0.999531
,	O	O:0.999979
I	O	O:0.999989
can't	O	O:0.999922
see	O	O:0.999965
why	O	O:0.999989
`	O	O:0.999993
sum	O	O:0.995537
`	O	O:0.999981
is	O	O:0.999963
applicable	O	O:0.999899
here	O	O:0.998922
.	O	O:0.999738
	
The	O	O:0.999851
OP	O	O:0.999371
is	O	O:0.999976
asking	O	O:0.998578
for	O	O:0.999886
a	O	O:0.999969
method	O	O:0.999513
of	O	O:0.999997
aggregating	O	O:0.999626
values	O	O:0.999874
into	O	O:0.999418
a	O	O:0.999997
list	O	O:0.995392
structure	O	O:0.999707
,	O	O:0.999994
not	O	O:0.999995
a	O	O:0.999999
numerical	O	O:0.995786
operation	O	O:0.999557
.	O	O:0.999851
	
From	O	O:0.999961
your	O	O:0.999937
first	O	O:0.999684
comment	O	O:0.999765
,	O	O:0.999971
it	O	O:0.999983
looks	O	O:0.999957
like	O	O:0.999951
you're	O	O:0.999947
arguing	O	O:0.999892
that	O	O:0.999880
`	O	O:0.999994
list()	B-API	O:0.709142
`	O	O:0.999982
in	O	O:0.999808
Python	O	O:0.999838
takes	O	O:0.999936
more	O	O:0.999849
than	O	O:0.999913
one	O	O:0.999970
parameter	O	O:0.999797
.	O	O:0.999894
	
It	O	O:0.999766
doesn't	O	O:0.999380
.	O	O:0.999923
	
The	O	O:0.999837
behavior	O	O:0.999150
you're	O	O:0.999924
attributing	O	O:0.999422
to	O	O:0.999985
apply	O	O:0.917530
,	O	O:0.999981
element-wise	O	O:0.999443
operations	O	O:0.999731
,	O	O:0.999913
is	O	O:0.999995
what	O	O:0.998913
df.applymap	B-API	B-API:0.855052
does	O	O:0.999435
.	O	O:0.999895
	
Can	O	O:0.999876
you	O	O:0.999950
clarify	O	O:0.999918
what	O	O:0.999952
you	O	O:0.999993
mean	O	O:0.999966
,	O	O:0.999997
please	O	O:0.999643
?	O	O:0.999940
	
I	O	O:0.999982
think	O	O:0.999956
my	O	O:0.999943
presentation	O	O:0.999891
skills	O	O:0.999912
need	O	O:0.999931
improving	O	O:0.999894
,	O	O:0.999992
I	O	O:0.999998
only	O	O:0.999987
refer	O	O:0.999579
to	O	O:0.999980
`	O	O:1.000000
sum	O	O:0.997736
`	O	O:0.999998
as	O	O:0.999953
@USER	O	O:0.999865
mentioned	O	O:0.999627
in	O	O:0.999967
comment	O	O:0.999878
about	O	O:0.999955
why	O	O:0.999912
`	O	O:0.999976
sum	O	O:0.988858
`	O	O:0.999995
works	O	O:0.999737
on	O	O:0.999987
`	O	O:0.999981
apply	O	B-API:0.986647
`	O	O:0.999886
but	O	O:0.990551
`	O	O:0.999993
list	O	O:0.712548
`	O	O:0.999979
doesn't	O	O:0.997947
.	O	O:0.999960
	
my	O	O:0.999973
first	O	O:0.999471
comment	O	O:0.998982
was	O	O:0.999954
trying	O	O:0.999857
to	O	O:0.999997
make	O	O:0.999997
a	O	O:0.999995
point	O	O:0.999556
how	O	O:0.999840
`	O	O:0.999994
list	O	O:0.912751
`	O	O:0.999997
doesn't	O	O:0.999709
change	O	O:0.999866
the	O	O:0.999993
element	O	O:0.998676
in	O	O:0.999992
the	O	O:0.999987
row	O	O:0.999952
array	O	O:0.999963
,	O	O:0.999994
I	O	O:0.999998
guess	O	O:0.999833
I	O	O:0.999937
didn't	O	O:0.999855
explain	O	O:0.998405
it	O	O:0.999989
in	O	O:0.999998
a	O	O:0.999996
clear	O	O:0.998269
way	O	O:0.999902
.	O	O:0.999650
	
Just	O	O:0.999924
assign	O	O:0.999883
another	O	O:0.999984
column	O	O:0.999970
as	O	O:0.999998
a	O	O:0.999988
`	O	O:0.999654
cumsum	B-API	B-API:0.994089
`	O	O:0.999997
of	O	O:0.998970
`	O	O:0.999988
indicator	O	O:0.996406
`	O	O:0.999991
,	O	O:0.999995
then	O	O:0.999963
apply	O	O:0.777905
`	O	O:0.999956
groupby	B-API	B-API:0.999699
`	O	O:0.999975
,	O	O:0.999969
this	O	O:0.999974
should	O	O:0.999944
do	O	O:0.999994
the	O	O:0.999989
trick	O	O:0.996074
:	O	O:0.999961
#CODE	O	O:0.999892
	
I'm	O	O:0.999947
trying	O	O:0.999945
to	O	O:0.999979
use	O	O:0.999995
multiprocessing	O	O:0.996644
with	O	O:0.999613
pandas	O	O:0.999898
dataframe	B-API	O:0.998893
,	O	O:0.999997
that	O	O:0.999901
is	O	O:0.999998
split	O	O:0.994407
the	O	O:0.999993
dataframe	B-API	O:0.998087
to	O	O:0.999975
8	O	O:0.999998
parts	O	O:0.999736
.	O	O:0.999988
apply	O	O:0.986579
some	O	O:0.998235
function	O	O:0.999854
to	O	O:0.999989
each	O	O:0.999994
part	O	O:0.999971
using	O	O:0.999950
apply	O	B-API:0.936478
(	O	O:0.999396
with	O	O:0.999785
each	O	O:0.999561
part	O	O:0.999970
processed	O	O:0.999889
in	O	O:0.999997
different	O	O:0.999966
process	O	O:0.998658
)	O	O:0.999974
.	O	O:0.999834
	
there	O	O:0.999370
is	O	O:0.999998
a	O	O:0.999995
space	O	O:0.999109
in	O	O:0.999984
the	O	O:0.999976
`	O	O:0.999979
res	O	O:0.997436
=	O	O:0.999928
df.apply	B-API	B-API:0.973925
(	O	O:0.999965
process	O	O:0.999482
apply	O	O:0.717790
,	O	O:0.999959
axis=1	O	O:0.999399
)`	O	O:0.999801
,	O	O:0.999881
is	O	O:0.999998
that	O	O:0.999755
right	O	O:0.999957
?	O	O:0.999985
	
currently	O	O:0.999813
apply	O	O:0.875649
only	O	O:0.999761
saturates	O	O:0.999390
one	O	O:0.999998
core	O	O:0.999892
of	O	O:0.999995
the	O	O:0.999770
CPU	O	O:0.999862
.	O	O:0.999755
	
I	O	O:0.999989
want	O	O:0.999976
to	O	O:0.999768
use	O	O:0.999996
multiprocess	O	O:0.997137
and	O	O:0.999968
use	O	O:0.999983
all	O	O:0.999673
cores	O	O:0.999460
to	O	O:0.999973
decrease	O	O:0.999983
processing	O	O:0.999714
time	O	O:0.999603
	
Iam	O	O:0.999967
trying	O	O:0.999958
to	O	O:0.999993
get	O	O:0.999999
the	O	O:0.999994
row	O	O:0.999968
with	O	O:0.999958
maximum	O	O:0.999936
value	O	O:0.999990
based	O	O:0.999954
on	O	O:0.999997
another	O	O:0.999983
column	O	O:0.999988
of	O	O:0.999997
a	O	O:0.999979
groupby	B-API	B-API:0.982273
,	O	O:0.999985
I	O	O:0.999941
am	O	O:0.999998
trying	O	O:0.999760
to	O	O:0.999987
follow	O	O:0.999991
the	O	O:0.999993
solutions	O	O:0.999908
given	O	O:0.999624
here	O	O:0.999800
Python	O	O:0.999468
:	O	O:0.999989
How	O	O:0.999986
can	O	O:0.999990
I	O	O:1.000000
get	O	O:0.999995
the	O	O:0.999932
Row	O	O:0.999761
which	O	O:0.999746
has	O	O:0.999945
the	O	O:0.999992
max	O	O:0.859986
value	O	O:0.999749
in	O	O:0.999984
goups	O	O:0.999949
making	O	O:0.999357
groupby	B-API	B-API:0.988676
?	O	O:0.999878
	
,	O	O:0.999953
however	O	O:0.999848
it	O	O:0.999979
doesn't	O	O:0.999980
work	O	O:0.999982
when	O	O:0.999979
you	O	O:0.999990
apply	O	O:0.874944
#CODE	O	O:0.998905
	
Alternatively	O	O:0.999768
,	O	O:0.999991
you	O	O:0.999984
could	O	O:0.999954
use	O	O:0.999996
`	O	O:0.999983
apply	O	B-API:0.981014
`	O	O:0.999973
to	O	O:0.999911
split	O	O:0.999961
each	O	O:0.999859
variant	O	O:0.999948
on	O	O:0.999957
commas	O	O:0.997881
:	O	O:0.999987
#CODE	O	O:0.999862
	
Thus	O	O:0.999806
,	O	O:0.999995
to	O	O:0.999996
avoid	O	O:0.999988
possibly	O	O:0.999906
complicated	O	O:0.999925
regex	O	O:0.999950
or	O	O:0.999997
a	O	O:0.999997
relatively	O	O:0.999693
slow	O	O:0.999806
call	O	O:0.998978
to	O	O:0.999980
`	O	O:0.999993
apply	O	B-API:0.971701
`	O	O:0.999978
,	O	O:0.999938
I	O	O:0.999998
think	O	O:0.999984
your	O	O:0.999783
best	O	O:0.999464
bet	O	O:0.999879
is	O	O:0.999983
to	O	O:0.999948
build	O	O:0.999948
the	O	O:0.999980
DataFrame	B-API	O:0.995479
with	O	O:0.999958
one	O	O:0.999985
integer	O	O:0.999764
variant	O	O:0.999908
per	O	O:0.999614
row	O	O:0.999723
.	O	O:0.999832
	
This	O	O:0.999060
is	O	O:0.999988
slow	O	O:0.995844
,	O	O:0.999990
but	O	O:0.999972
I	O	O:0.999943
am	O	O:0.999995
not	O	O:0.999966
sure	O	O:0.999942
how	O	O:0.999986
to	O	O:0.999995
translate	O	O:0.998316
it	O	O:0.999997
into	O	O:0.999974
something	O	O:0.999985
using	O	O:0.999483
apply	O	B-API:0.936673
.	O	O:0.993994
	
Any	O	O:0.999735
hints	O	O:0.999234
?	O	O:0.999896
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999977
apply	O	B-API:0.988262
`	O	O:0.999766
function	O	O:0.994234
,	O	O:0.999991
but	O	O:0.999984
you	O	O:0.999989
need	O	O:0.999990
to	O	O:0.999998
do	O	O:1.000000
extra	O	O:0.999887
work	O	O:0.999640
here	O	O:0.998617
(	O	O:0.999999
just	O	O:0.999950
to	O	O:0.999998
simplify	O	O:0.999977
the	O	O:0.999996
work	O	O:0.999621
)	O	O:0.999990
.	O	O:0.999909
	
It	O	O:0.998971
is	O	O:0.999975
not	O	O:0.999948
`	O	O:0.999990
map	O	B-API:0.992278
`	O	O:0.999997
that	O	O:0.998715
is	O	O:0.999999
fast	O	O:0.997347
,	O	O:0.999981
but	O	O:0.999947
`	O	O:0.999971
iterrows	B-API	B-API:0.998294
`	O	O:0.999998
that	O	O:0.996653
is	O	O:0.999999
very	O	O:0.999576
slow	O	O:0.998811
.	O	O:0.999820
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999991
`	O	O:0.999930
itertuples	B-API	B-API:0.999761
`	O	O:0.999969
and	O	O:0.999958
will	O	O:0.999960
get	O	O:0.999973
something	O	O:0.999981
almost	O	O:0.999954
as	O	O:0.999999
fast	O	O:0.999143
as	O	O:0.999988
`	O	O:0.999855
map	O	B-API:0.993717
`	O	O:0.999964
,	O	O:0.999944
but	O	O:0.999988
as	O	O:0.999841
@USER	O	O:0.999488
says	O	O:0.999763
,	O	O:0.999989
you	O	O:0.999953
should	O	O:0.999975
try	O	O:0.999998
to	O	O:0.999998
see	O	O:0.999999
if	O	O:0.999995
you	O	O:0.999991
can	O	O:0.999982
apply	O	O:0.998086
this	O	O:0.999755
function	O	O:0.999931
on	O	O:0.999994
the	O	O:0.999999
whole	O	O:0.999947
columns	O	O:0.999766
.	O	O:0.999935
	
Dear	O	O:0.998916
JD	O	O:0.999901
,	O	O:0.999987
I	O	O:0.999995
dont	O	O:0.999990
want	O	O:0.999962
to	O	O:0.999998
create	O	O:0.999989
the	O	O:0.999997
custom	O	O:0.999877
column	O	O:0.999792
in	O	O:0.999982
the	O	O:0.999988
dataframe	B-API	O:0.999093
gain.I	O	O:0.999153
want	O	O:0.999972
to	O	O:0.999989
apply	O	O:0.982990
the	O	O:0.999973
where	O	O:0.999793
condition	O	O:0.999880
for	O	O:0.999997
the	O	O:0.999986
custome	O	O:0.998593
column	O	O:0.999699
	
Then	O	O:0.999805
go	O	O:0.999996
through	O	O:0.999953
the	O	O:0.999930
`	O	O:0.999976
rno_cd	O	O:0.949226
`	O	O:0.999996
column	O	O:0.999282
,	O	O:0.999995
and	O	O:0.999997
apply	O	O:0.854154
a	O	O:0.999238
function	O	O:0.999805
that	O	O:0.999914
transform	O	O:0.974844
the	O	O:0.999994
data	O	O:0.999625
.	O	O:0.999910
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999991
`	O	O:0.999969
apply	O	B-API:0.994377
`	O	O:0.999890
and	O	O:0.998580
function	O	O:0.999956
`	O	O:0.999944
tranform	O	O:0.973803
`	O	O:0.999997
where	O	O:0.999902
you	O	O:0.999988
can	O	O:0.999995
verify	O	O:0.999988
whether	O	O:0.999963
x	O	O:0.999580
is	O	O:0.999995
a	O	O:0.999991
key	O	O:0.999958
so	O	O:0.999995
you	O	O:0.999985
get	O	O:0.999997
the	O	O:0.999999
values	O	O:0.999904
using	O	O:0.999988
your	O	O:0.999874
dictionary	O	O:0.999636
`	O	O:0.999981
D	O	O:0.998463
[	O	O:0.999994
x	O	O:0.999864
]`	O	O:0.999941
if	O	O:0.999865
it's	O	O:0.999818
not	O	O:0.999982
the	O	O:0.999998
case	O	O:0.999915
,	O	O:0.999996
you	O	O:0.999993
just	O	O:0.999975
return	O	O:0.999774
`"	O	O:0.999940
unknown	O	O:0.996857
"`	O	O:0.999845
#CODE	O	O:0.998489
	
Is	O	O:0.999987
there	O	O:0.999987
a	O	O:0.999992
way	O	O:0.999959
that	O	O:0.999940
I	O	O:0.999998
can	O	O:0.999997
apply	O	O:0.966292
a	O	O:0.999929
function	O	O:0.999344
to	O	O:0.999996
a	O	O:1.000000
pandas	O	O:0.999692
dataframe	B-API	O:0.999727
that	O	O:0.999917
returns	O	O:0.999955
a	O	O:0.999996
list	O	O:0.995759
for	O	O:0.999995
each	O	O:0.998481
row	O	O:0.999917
that	O	O:0.999935
it	O	O:0.999986
is	O	O:0.999997
applied	O	O:0.999599
to	O	O:0.999938
,	O	O:0.999999
and	O	O:0.999999
then	O	O:0.999967
take	O	O:0.999976
that	O	O:0.999980
list	O	O:0.999670
and	O	O:0.999998
put	O	O:0.999839
each	O	O:0.999504
item	O	O:0.999908
into	O	O:0.999918
new	O	O:0.999996
columns	O	O:0.999821
of	O	O:0.999996
that	O	O:0.999951
existing	O	O:0.999960
dataframe	B-API	O:0.996437
?	O	O:0.999905
	
Right	O	O:0.999581
now	O	O:0.999953
the	O	O:0.999998
return	O	O:0.999029
of	O	O:0.999982
the	O	O:0.999976
apply	O	B-API:0.776551
function	O	O:0.998483
is	O	O:0.999969
a	O	O:0.999997
list	O	O:0.998849
of	O	O:0.999995
lists	O	O:0.999917
each	O	O:0.999954
of	O	O:0.999993
the	O	O:0.999980
inner	O	O:0.999873
lists	O	O:0.995402
is	O	O:0.999995
a	O	O:0.999973
9	O	O:0.999437
item	O	O:0.999877
list	O	O:0.999651
like	O	O:0.999981
that	O	O:0.999983
shown	O	O:0.999917
above	O	O:0.999893
.	O	O:0.999850
	
I	O	O:0.999961
am	O	O:0.999997
fine	O	O:0.999803
putting	O	O:0.999906
the	O	O:0.999954
response	O	O:0.999927
into	O	O:0.999885
a	O	O:0.999994
new	O	O:0.999843
dataframe	B-API	O:0.999853
such	O	O:0.999928
as	O	O:0.999998
the	O	O:0.999735
below	O	O:0.996974
,	O	O:0.999985
but	O	O:0.999948
I	O	O:0.999982
haven't	O	O:0.999912
figured	O	O:0.999185
out	O	O:0.999974
how	O	O:0.999986
to	O	O:0.999989
get	O	O:0.999999
the	O	O:0.999995
apply	O	B-API:0.751085
function	O	O:0.999764
to	O	O:0.999973
write	O	O:0.999996
to	O	O:0.999996
each	O	O:0.999999
new	O	O:0.999965
row	O	O:0.999960
for	O	O:0.999984
each	O	O:0.999853
return	O	O:0.998765
or	O	O:0.999987
get	O	O:0.999865
the	O	O:0.999999
list	O	O:0.999713
of	O	O:0.999997
lists	O	O:0.999478
in	O	O:0.999995
to	O	O:0.999996
the	O	O:0.999999
right	O	O:0.999692
form	O	O:0.999908
.	O	O:0.999951
	
#CODE	O	O:0.998453
	
I	O	O:0.999981
like	O	O:0.999988
this	O	O:0.999972
structure	O	O:0.999992
of	O	O:0.999996
data	O	O:0.999873
before	O	O:0.999932
`	O	O:0.999992
apply	O	B-API:0.989693
`	O	O:0.999953
ing	O	O:0.965533
,	O	O:0.999988
before	O	O:0.999424
I	O	O:0.999975
am	O	O:0.999996
usually	O	O:0.999949
able	O	O:0.999962
to	O	O:0.999997
just	O	O:0.999993
`	O	O:0.999998
df	O	O:0.998709
[	O	O:0.999986
'	O	O:0.999993
someNewColumn	O	O:0.999475
']	O	O:0.999970
=	O	O:0.999124
df.apply	B-API	B-API:0.996642
(	O	O:0.999942
...	O	O:0.999675
)`	O	O:0.998895
.	O	O:0.999766
	
But	O	O:0.999939
strangely	O	O:0.999732
,	O	O:0.999998
this	O	O:0.999963
time	O	O:0.999932
,	O	O:0.999981
I'm	O	O:0.999978
not	O	O:0.999996
able	O	O:0.999996
to	O	O:0.999996
instantly	O	O:0.999994
remerge	O	O:0.999942
the	O	O:0.999931
results	O	O:0.999712
.	O	O:0.999884
	
@USER	O	O:0.999250
,	O	O:0.999984
`	O	O:0.999985
level=0	O	O:0.978264
`	O	O:0.999994
will	O	O:0.999602
give	O	O:0.999974
the	O	O:0.999999
same	O	O:0.999953
result	O	O:0.999985
as	O	O:0.999999
above	O	O:0.999943
as	O	O:0.999994
you	O	O:0.999980
have	O	O:0.999996
only	O	O:0.999919
1	O	O:0.999996
index	O	O:0.999969
by	O	O:0.999980
the	O	O:0.999997
time	O	O:0.999903
you	O	O:0.999983
do	O	O:0.999995
the	O	O:0.999993
`	O	O:0.999969
apply	O	B-API:0.981808
`	O	O:0.999939
.	O	O:0.999775
the	O	O:0.999910
**	O	O:0.999950
...	O	O:0.999272
	
**	O	O:0.999908
is	O	O:0.999995
exactly	O	O:0.999930
from	O	O:0.999975
the	O	O:0.999982
output	O	O:0.999840
as	O	O:0.999967
you're	O	O:0.999924
trying	O	O:0.999953
to	O	O:0.999995
apply	O	O:0.931805
the	O	O:0.999110
`	O	O:0.999869
...	O	O:0.998225
	
/	O	O:0.999936
x.coef.mean()	O	O:0.968780
`	O	O:0.999992
on	O	O:0.999989
a	O	O:0.999999
group	O	O:0.998479
level	O	O:0.999104
.	O	O:0.999815
	
However	O	O:0.999857
,	O	O:0.999990
I	O	O:0.999999
think	O	O:0.999823
JD	O	O:0.999924
Long's	O	O:0.999554
suggestion	O	O:0.998315
is	O	O:0.999991
more	O	O:0.999258
likely	O	O:0.999696
what	O	O:0.999703
you're	O	O:0.999918
trying	O	O:0.999934
to	O	O:0.999990
achieve	O	O:0.999927
.	O	O:0.999880
	
And	O	O:0.999918
my	O	O:0.999981
pandas's	O	O:0.998493
version	O	O:0.999264
is	O	O:0.999838
**	O	O:0.999951
0.14.1	O	O:0.998621
**	O	O:0.999895
	
It's	O	O:0.999700
not	O	O:0.999987
obvious	O	O:0.999949
to	O	O:0.999995
me	O	O:0.999995
which	O	O:0.999972
version	O	O:0.999924
of	O	O:0.999994
pandas	O	O:0.999610
you're	O	O:0.999990
using	O	O:0.999418
,	O	O:0.999895
but	O	O:0.999988
your	O	O:0.999766
apply	O	B-API:0.660447
does	O	O:0.999232
not	O	O:0.999976
work	O	O:0.999983
for	O	O:0.999997
me	O	O:0.999962
at	O	O:0.999965
all	O	O:0.999853
.	O	O:0.999860
	
whoops	O	O:0.996257
.	O	O:0.999804
	
You	O	O:0.999895
are	O	O:0.999972
correct	O	O:0.999671
.	O	O:0.999936
	
I	O	O:0.999969
read	O	O:0.999603
his	O	O:0.999634
code	O	O:0.999912
too	O	O:0.999917
quickly	O	O:0.999679
and	O	O:0.999937
didn't	O	O:0.999421
notice	O	O:0.999720
the	O	O:0.999984
apply	O	B-API:0.830200
was	O	O:0.999364
on	O	O:0.999956
the	O	O:0.999997
grouped	O	O:0.999874
data	O	O:0.999822
.	O	O:0.999907
	
I'll	O	O:0.998799
fix	O	O:0.999686
my	O	O:0.999963
comments	O	O:0.999732
above	O	O:0.999796
.	O	O:0.999821
	
I	O	O:0.999964
already	O	O:0.999991
know	O	O:0.999206
about	O	O:0.999861
the	O	O:0.999612
np.isfinite	B-API	B-API:0.994047
and	O	O:0.999960
pd.notnull	B-API	B-API:0.945780
commands	O	O:0.999197
from	O	O:0.999979
this	O	O:0.999673
question	O	O:0.999906
but	O	O:0.999984
I	O	O:0.999974
do	O	O:0.999985
not	O	O:0.999941
know	O	O:0.999853
how	O	O:0.999988
to	O	O:0.999990
apply	O	O:0.999537
them	O	O:0.999778
to	O	O:0.999997
combinations	O	O:0.999997
of	O	O:0.999993
columns	O	O:0.999810
.	O	O:0.999973
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999991
`	O	O:0.999970
apply	O	B-API:0.994423
`	O	O:0.999773
and	O	O:0.999881
lambda	O	O:0.999512
function	O	O:0.999836
where	O	O:0.999884
you	O	O:0.999968
choose	O	O:0.999967
non-Nan	O	O:0.999838
value	O	O:0.999872
.	O	O:0.999898
	
You	O	O:0.999871
can	O	O:0.999977
verify	O	O:0.999976
if	O	O:0.999989
it's	O	O:0.999799
Nan	O	O:0.999610
value	O	O:0.999989
using	O	O:0.999551
`	O	O:0.999818
Numpy.isNan	B-API	B-API:0.996669
(	O	O:0.999989
..	O	O:0.999881
)`	O	O:0.998572
.	O	O:0.999799
	
#CODE	O	O:0.998453
	
What	O	O:0.999761
do	O	O:0.999999
your	O	O:0.999991
data	O	O:0.999861
actually	O	O:0.999989
look	O	O:0.999930
like	O	O:0.999748
?	O	O:0.999977
	
Also	O	O:0.999679
,	O	O:0.999995
are	O	O:0.999994
you	O	O:0.999994
sure	O	O:0.999962
you	O	O:0.999997
want	O	O:0.999988
a	O	O:0.999983
groupby	B-API	B-API:0.995523
and	O	O:0.999991
apply	O	B-API:0.657239
together	O	O:0.720556
(	O	O:0.999606
i.e.	O	O:0.999613
not	O	O:0.999923
`	O	O:0.999988
agg	O	B-API:0.996484
`	O	O:0.999989
instead	O	O:0.999405
)	O	O:0.999993
?	O	O:0.999929
	
When	O	O:0.999665
you	O	O:0.999995
say	O	O:0.999974
"	O	O:0.999999
they	O	O:0.999830
all	O	O:0.999995
fail	O	O:0.999150
"	O	O:0.999988
,	O	O:0.999997
a	O	O:0.999998
specific	O	O:0.999445
error	O	O:0.999876
message	O	O:0.999366
would	O	O:0.999929
be	O	O:0.999995
helpful	O	O:0.999954
,	O	O:0.999991
as	O	O:0.999982
would	O	O:0.999963
a	O	O:0.999999
description	O	O:0.999896
of	O	O:0.999997
what	O	O:0.999948
exactly	O	O:0.999981
you	O	O:0.999976
are	O	O:0.999997
trying	O	O:0.999979
to	O	O:0.999996
do	O	O:0.999999
by	O	O:0.999982
doing	O	O:0.999969
this	O	O:0.999397
operation	O	O:0.998383
.	O	O:0.999895
	
So	O	O:0.999972
if	O	O:0.999994
apply	O	O:0.872312
a	O	O:0.999968
simple	O	O:0.977052
function	O	O:0.999912
,	O	O:0.999941
`	O	O:0.999998
mean	O	O:0.995948
`	O	O:0.999999
,	O	O:0.999986
to	O	O:0.999996
the	O	O:1.000000
grouped	O	O:0.999962
data	O	O:0.999990
we	O	O:0.999996
get	O	O:0.999990
the	O	O:0.999983
following	O	O:0.996398
:	O	O:0.999913
#CODE	O	O:0.999809
	
This	O	O:0.999178
works	O	O:0.999960
just	O	O:0.999869
fine	O	O:0.999100
(	O	O:0.999980
i.e.	O	O:0.999637
`	O	O:0.999975
ctt_ask	O	O:0.937540
(	O	O:0.999997
example_data	O	O:0.998940
)`	O	O:0.999511
yields	O	O:0.999913
2.90	O	O:0.999452
)	O	O:0.999984
for	O	O:0.999983
the	O	O:0.999965
above	O	O:0.998472
example	O	O:0.999559
but	O	O:0.999966
my	O	O:0.999997
real	O	O:0.996792
dataset	O	O:0.999637
has	O	O:0.999888
several	O	O:0.999829
stocks	O	O:0.996930
and	O	O:0.999999
many	O	O:0.999956
date	O	O:0.996207
times	O	O:0.996811
(	O	O:0.999959
it	O	O:0.999989
has	O	O:0.999993
a	O	O:0.999937
`	O	O:0.999914
MultiIndex	O	O:0.729517
`)	O	O:0.999970
.	O	O:0.999795
	
When	O	O:0.999758
I	O	O:0.999994
use	O	O:0.999962
`	O	O:0.999299
groupby	B-API	B-API:0.999854
`	O	O:0.999962
and	O	O:0.998877
`	O	O:0.999983
agg	O	B-API:0.999434
`	O	O:0.999988
to	O	O:0.999806
apply	O	O:0.996358
this	O	O:0.998562
function	O	O:0.999894
to	O	O:0.999998
every	O	O:0.999993
stock-date	O	O:0.999799
time	O	O:0.999867
combination	O	O:0.999793
(	O	O:0.999979
`	O	O:0.999991
full_book_ask.groupby	O	O:0.984355
(	O	O:0.999996
level	O	O:0.999653
=[	O	O:0.999937
0	O	O:0.999911
,	O	O:0.999984
1	O	O:0.999863
])	O	O:0.999703
.agg	B-API	B-API:0.997925
(	O	O:0.999976
ctt_ask	O	O:0.998844
)`)	O	O:0.999852
I	O	O:0.999992
get	O	O:0.999992
an	O	O:0.999912
error	O	O:0.999522
:	O	O:0.999904
`	O	O:0.999954
KeyError	O	O:0.998953
:	O	O:0.999966
'	O	O:0.999984
avail_shares	O	O:0.999449
'`	O	O:0.999922
.	O	O:0.999733
	
This	O	O:0.999202
is	O	O:0.999980
strange	O	O:0.999466
because	O	O:0.999958
I	O	O:0.999991
do	O	O:0.999999
have	O	O:0.999951
a	O	O:0.999997
column	O	O:0.999889
named	O	O:0.999965
avail_shares	O	O:0.999300
in	O	O:0.999980
my	O	O:0.999986
actual	O	O:0.999664
dataset	O	O:0.999828
.	O	O:0.999727
	
I	O	O:0.999991
have	O	O:0.999989
also	O	O:0.999831
tried	O	O:0.999990
the	O	O:0.999991
same	O	O:0.999865
with	O	O:0.999949
the	O	O:0.999987
`	O	O:0.999987
apply	O	B-API:0.934010
`	O	O:0.999922
functionality	O	O:0.993302
but	O	O:0.999996
this	O	O:0.999823
raises	O	O:0.999893
the	O	O:0.999988
error	O	O:0.999731
message	O	O:0.998554
`	O	O:0.999900
Exception	O	O:0.996412
:	O	O:0.999989
cannot	O	O:0.999926
handle	O	O:0.999987
a	O	O:0.999991
non-unique	O	O:0.998778
multi-index	O	O:0.999584
!	O	O:0.999870
	
Thank	O	O:0.999750
you	O	O:0.999906
for	O	O:0.999994
the	O	O:0.999958
comments	O	O:0.997287
.	O	O:0.999898
	
@USER	O	O:0.999072
H	O	O:0.999928
,	O	O:0.999997
as	O	O:0.999995
I	O	O:0.999990
state	O	O:0.999936
in	O	O:0.999922
the	O	O:0.999972
description	O	O:0.999899
there	O	O:0.999855
is	O	O:0.999999
a	O	O:0.999992
column	O	O:0.999838
called	O	O:0.999927
avail_shares	O	O:0.999296
in	O	O:0.999983
my	O	O:0.999985
dataset	O	O:0.999936
so	O	O:0.999997
this	O	O:0.999973
can't	O	O:0.999956
be	O	O:0.999998
the	O	O:0.999986
issue	O	O:0.997782
.	O	O:0.999728
	
@USER	O	O:0.999392
Pride	O	O:0.999702
,	O	O:0.999988
you	O	O:0.999983
are	O	O:0.999994
correct	O	O:0.999984
,	O	O:0.999995
I	O	O:0.999998
understand	O	O:0.999840
now	O	O:0.999866
why	O	O:0.999961
I	O	O:0.999993
can't	O	O:0.999957
use	O	O:0.999720
`	O	O:0.999882
agg	O	B-API:0.999491
`	O	O:0.999949
.	O	O:0.998273
	
However	O	O:0.999286
,	O	O:0.999993
both	O	O:0.999873
`	O	O:0.999987
apply	O	B-API:0.986594
`	O	O:0.999903
and	O	O:0.999298
`	O	O:0.999996
transform	O	B-API:0.995304
`	O	O:0.999995
give	O	O:0.999323
me	O	O:0.999994
an	O	O:0.999992
error	O	O:0.999934
as	O	O:0.999980
well	O	O:0.997494
:	O	O:0.999978
`	O	O:0.999931
Exception	O	O:0.998056
:	O	O:0.999990
cannot	O	O:0.999935
handle	O	O:0.999987
a	O	O:0.999991
non-unique	O	O:0.998778
multi-index	O	O:0.999584
!	O	O:0.999870
	
`	O	O:0.999846
.	O	O:0.999408
	
So	O	O:0.999972
there	O	O:0.999969
must	O	O:0.999949
be	O	O:0.999999
something	O	O:0.999982
else	O	O:0.999837
going	O	O:0.999635
on	O	O:0.999914
.	O	O:0.999833
	
I	O	O:0.999975
guess	O	O:0.999968
there	O	O:0.999456
is	O	O:0.999999
a	O	O:0.999991
problem	O	O:0.999440
with	O	O:0.999972
the	O	O:0.999989
use	O	O:0.999966
of	O	O:0.999768
`	O	O:0.999874
ix	O	B-API:0.986778
`	O	O:0.999983
but	O	O:0.999785
I	O	O:0.999994
don't	O	O:0.999977
know	O	O:0.999759
why	O	O:0.999973
or	O	O:0.999995
what	O	O:0.999872
I	O	O:0.999995
should	O	O:0.999990
do	O	O:0.999944
to	O	O:0.999995
solve	O	O:0.999870
it	O	O:0.999960
.	O	O:0.999943
	
OP	O	O:0.999910
asked	O	O:0.999537
for	O	O:0.999990
a	O	O:0.999968
way	O	O:0.999731
to	O	O:0.999978
apply	O	O:0.995101
multiple	O	O:0.999905
aggregate	O	O:0.620770
functions	O	O:0.999826
at	O	O:0.999973
the	O	O:0.999986
same	O	O:0.999903
time	O	O:0.999791
.	O	O:0.999953
	
A	O	O:0.999980
short	O	O:0.999459
answer	O	O:0.998831
is	O	O:0.999985
still	O	O:0.999644
an	O	O:0.999984
answer	O	O:0.999540
.	O	O:0.999638
	
There	O	O:0.999844
ought	O	O:0.999804
to	O	O:0.999997
be	O	O:1.000000
a	O	O:0.999995
metric	O	O:0.999338
you	O	O:0.999986
can	O	O:0.999987
apply	O	O:0.992227
that	O	O:0.999906
takes	O	O:0.999937
a	O	O:0.999996
baseline	O	O:0.999915
picture	O	O:0.999931
of	O	O:0.999977
memory	O	O:0.999943
usage	O	O:0.999994
prior	O	O:0.999785
to	O	O:0.999993
creating	O	O:0.999966
the	O	O:0.999944
object	O	O:0.999806
under	O	O:0.999871
inspection	O	O:0.999920
,	O	O:1.000000
then	O	O:0.999950
another	O	O:0.999994
picture	O	O:0.999958
afterwards	O	O:0.999242
.	O	O:0.999920
	
Comparison	O	O:0.999602
of	O	O:0.999980
the	O	O:0.999960
two	O	O:0.999938
memory	O	O:0.999828
maps	O	O:0.997436
(	O	O:0.999994
assuming	O	O:0.999970
nothing	O	O:0.999601
else	O	O:0.998646
has	O	O:0.999969
been	O	O:0.999462
created	O	O:0.999695
and	O	O:0.999997
we	O	O:0.999997
can	O	O:0.999887
isolate	O	O:0.999988
the	O	O:0.999997
change	O	O:0.996817
is	O	O:0.999991
due	O	O:0.999619
to	O	O:0.999994
the	O	O:0.999998
new	O	O:0.999577
object	O	O:0.999749
)	O	O:0.999982
should	O	O:0.999947
provide	O	O:0.999868
an	O	O:0.999998
idea	O	O:0.999921
of	O	O:0.999989
whether	O	O:0.999949
a	O	O:0.999999
view	O	O:0.981841
or	O	O:0.999996
copy	O	O:0.938639
has	O	O:0.999981
been	O	O:0.995917
produced	O	O:0.999546
.	O	O:0.999837
	
Next	O	O:0.999860
,	O	O:0.999989
use	O	O:0.999975
the	O	O:0.999897
apply	O	B-API:0.934780
function	O	O:0.997679
in	O	O:0.999977
pandas	O	O:0.999969
to	O	O:0.999996
apply	O	O:0.957667
the	O	O:0.999396
function	O	O:0.999137
-	O	O:0.999965
e.g.	O	O:0.999404
#CODE	O	O:0.999745
	
Finally	O	O:0.999841
we	O	O:0.999995
must	O	O:0.999943
replace	O	O:0.999049
the	O	O:0.999988
obtained	O	O:0.999581
Series	O	O:0.999844
with	O	O:0.999885
`	O	O:0.999996
value	O	O:0.999393
`	O	O:0.999997
if	O	O:0.999551
`	O	O:0.999995
col	O	O:0.995255
==	O	O:0.999975
"	O	O:0.999900
E	O	O:0.999634
"`	O	O:0.999866
and	O	O:0.999886
`	O	O:0.999992
value	O	O:0.990836
==	O	O:0.999962
False	O	O:0.998488
`	O	O:0.999913
.	O	O:0.999551
	
You	O	O:0.999857
can't	O	O:0.999918
apply	O	O:0.942460
a	O	O:0.999984
condition	O	O:0.998670
on	O	O:0.999974
the	O	O:0.999995
index	O	O:0.999978
of	O	O:0.999995
a	O	O:0.999992
Series	O	O:0.999428
,	O	O:0.999992
thats	O	O:0.999923
why	O	O:0.999991
you	O	O:0.999992
need	O	O:0.999991
the	O	O:0.999995
`	O	O:0.999978
reset_index	B-API	B-API:0.999254
`	O	O:0.999993
first	O	O:0.999069
.	O	O:0.999940
	
I	O	O:0.999940
would	O	O:0.999997
like	O	O:0.999971
to	O	O:0.999998
use	O	O:0.999998
the	O	O:0.997760
to_datetime	B-API	B-API:0.985324
method	O	O:0.999965
to	O	O:0.999991
convert	O	O:0.999961
the	O	O:0.999987
recognized	O	O:0.999901
string	O	O:0.999950
date	O	O:0.999661
formats	O	O:0.999986
into	O	O:0.999885
datetimes	O	O:0.999348
in	O	O:0.999925
the	O	O:0.999994
dataframe	B-API	O:0.999722
column	O	O:0.999890
,	O	O:0.999998
leaving	O	O:0.999365
the	O	O:0.999958
unrecognized	O	O:0.999747
strings	O	O:0.998756
in	O	O:0.999989
excel	O	O:0.999881
format	O	O:0.999957
which	O	O:0.999944
I	O	O:0.999994
can	O	O:0.999999
then	O	O:0.999942
isolate	O	O:0.999971
and	O	O:0.999999
correct	O	O:0.999915
off	O	O:0.999863
line	O	O:0.999498
.	O	O:0.999825
	
But	O	O:0.999950
unless	O	O:0.999927
I	O	O:0.999991
apply	O	B-API:0.632253
the	O	O:0.999038
method	O	O:0.999795
row	O	O:0.999990
by	O	O:0.999972
row	O	O:0.999607
(	O	O:0.999919
way	O	O:0.999985
too	O	O:0.999937
slow	O	O:0.999750
)	O	O:0.999973
,	O	O:0.999980
it	O	O:0.999990
fails	O	O:0.999846
to	O	O:0.999986
do	O	O:0.999999
this	O	O:0.999887
.	O	O:0.999927
	
My	O	O:0.999927
idea	O	O:0.998845
was	O	O:0.999960
to	O	O:0.999999
then	O	O:0.999994
apply	O	O:0.941822
the	O	O:0.999966
rolling	O	O:0.988010
mean	O	O:0.998985
on	O	O:0.999996
this	O	O:0.999973
time	O	O:0.999965
period	O	O:0.999757
.	O	O:0.999919
	
How	O	O:0.999916
do	O	O:0.999953
I	O	O:0.999998
apply	O	O:0.861271
a	O	O:0.999776
lambda	O	O:0.984585
function	O	O:0.999829
on	O	O:0.999981
pandas	O	O:0.999945
slices	O	O:0.999872
,	O	O:0.999958
and	O	O:0.999996
return	O	O:0.999231
the	O	O:0.999947
same	O	O:0.999945
format	O	O:0.999904
as	O	O:0.999996
the	O	O:0.999996
input	O	O:0.999972
data	O	O:0.999970
frame	O	O:0.999990
?	O	O:0.999983
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.996058
a	O	O:0.999857
function	O	O:0.999689
to	O	O:0.999993
row	O	O:0.999999
slices	O	O:0.999735
of	O	O:0.999996
dataframe	B-API	O:0.997029
in	O	O:0.999997
pandas	O	O:0.999866
for	O	O:0.999997
each	O	O:0.997816
row	O	O:0.999379
and	O	O:0.999996
returning	O	O:0.999901
a	O	O:0.999922
dataframe	B-API	O:0.997607
with	O	O:0.999932
for	O	O:0.999998
each	O	O:0.999378
row	O	O:0.999928
the	O	O:0.999979
value	O	O:0.999816
and	O	O:0.999995
number	O	O:0.999987
of	O	O:0.999937
slices	O	O:0.999776
that	O	O:0.999785
was	O	O:0.999977
calculated	O	O:0.999591
.	O	O:0.999907
	
What	O	O:0.999720
I	O	O:0.999994
want	O	O:0.999848
is	O	O:0.999934
to	O	O:0.999983
apply	O	O:0.982056
lambda	O	O:0.997106
function	O	O:0.999868
f	O	O:0.999969
from	O	O:0.999983
column	O	O:0.999883
0	O	O:0.999989
to	O	O:0.999967
5	O	O:0.999986
and	O	O:0.999996
from	O	O:0.999987
column	O	O:0.999764
5	O	O:0.999983
to	O	O:0.999942
10	O	O:0.999973
.	O	O:0.999807
	
let's	O	O:0.997677
see	O	O:0.999898
..	O	O:0.999787
	
I	O	O:0.999990
want	O	O:0.999981
to	O	O:0.999939
apply	O	O:0.989352
the	O	O:0.999757
function	O	O:0.999630
to	O	O:0.999993
the	O	O:1.000000
slice	O	O:0.999752
on	O	O:0.999999
columns	O	O:0.999947
0	O	O:0.999995
,	O	O:0.999993
1	O	O:0.999937
,	O	O:0.999970
2	O	O:0.999961
,	O	O:0.999971
3	O	O:0.999937
,	O	O:0.999973
4	O	O:0.999893
and	O	O:0.999997
then	O	O:0.999982
also	O	O:0.999995
on	O	O:0.999998
5	O	O:0.999931
,	O	O:0.999994
6	O	O:0.999932
,	O	O:0.999981
7	O	O:0.999934
,	O	O:0.999980
8	O	O:0.999919
,	O	O:0.999964
9	O	O:0.999804
.	O	O:0.999830
	
However	O	O:0.999899
,	O	O:0.999993
I	O	O:0.999998
want	O	O:0.999977
the	O	O:0.999592
function	O	O:0.999969
to	O	O:0.999991
run	O	O:0.999991
on	O	O:0.999995
the	O	O:1.000000
original	O	O:0.999988
data	O	O:0.999983
where	O	O:0.999976
the	O	O:0.999998
mean	O	O:0.998832
is	O	O:0.999998
taken	O	O:0.999864
only	O	O:0.999988
from	O	O:0.999980
the	O	O:0.999997
first	O	O:0.999912
5	O	O:0.999873
in	O	O:0.999979
the	O	O:0.999995
first	O	O:0.999554
round	O	O:0.996086
and	O	O:0.999998
then	O	O:0.999926
on	O	O:0.999998
the	O	O:0.999999
last	O	O:0.999753
5	O	O:0.999917
in	O	O:0.999982
the	O	O:0.999991
second	O	O:0.999336
round	O	O:0.994188
.	O	O:0.999724
	
Does	O	O:0.999798
that	O	O:0.999974
make	O	O:0.999935
sense	O	O:0.999909
?	O	O:0.999935
	
hmmmm	O	O:0.998867
....	O	O:0.997232
	
it's	O	O:0.999618
so	O	O:0.999951
weird	O	O:0.999732
..	O	O:0.999815
	
it	O	O:0.998657
worked	O	O:0.999514
and	O	O:0.999975
now	O	O:0.999761
it	O	O:0.999950
doesn't	O	O:0.999919
apply	O	O:0.637874
any	O	O:0.999963
kind	O	O:0.999481
of	O	O:0.999956
calculation	O	O:0.999657
,	O	O:1.000000
even	O	O:0.999967
when	O	O:0.999960
I	O	O:1.000000
take	O	O:0.999996
exactly	O	O:0.999985
your	O	O:0.999937
code	O	O:0.999436
..	O	O:0.999928
	
>>>	O	O:0.999240
When	O	O:0.999896
I	O	O:0.999993
use	O	O:0.999975
`	O	O:0.999659
df1	O	O:0.992635
=d	O	O:0.999975
f.copy()	O	O:0.930794
`	O	O:0.999923
it	O	O:0.999855
works	O	O:0.999910
,	O	O:0.999948
but	O	O:0.999944
not	O	O:0.999974
with	O	O:0.999963
`	O	O:0.999990
df1	O	O:0.999398
=d	O	O:0.999988
f	O	O:0.999545
`	O	O:0.999967
..	O	O:0.998814
	
don't	O	O:0.999801
know	O	O:0.999760
how	O	O:0.999991
that	O	O:0.999929
makes	O	O:0.999948
sense	O	O:0.999935
..	O	O:0.999675
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999962
apply	O	O:0.995986
a	O	O:0.999889
function	O	O:0.999548
f	O	O:0.999935
to	O	O:0.999997
many	O	O:0.999992
slices	O	O:0.999759
within	O	O:0.999978
each	O	O:0.999964
row	O	O:0.999985
of	O	O:0.999995
a	O	O:0.999978
pandas	O	O:0.999586
DataFrame	B-API	O:0.992471
.	O	O:0.999726
	
If	O	O:0.999950
you're	O	O:0.999954
applying	O	O:0.999871
the	O	O:0.999987
same	O	O:0.999412
function	O	O:0.999961
to	O	O:0.999999
all	O	O:1.000000
of	O	O:0.999996
the	O	O:0.999979
groups	O	O:0.999745
,	O	O:0.999960
why	O	O:0.999959
not	O	O:0.999991
just	O	O:0.999980
apply	O	O:0.928452
it	O	O:0.999891
to	O	O:0.999990
the	O	O:1.000000
whole	O	O:0.999767
dataframe	B-API	O:0.998589
?	O	O:0.999969
	
does	O	O:0.999711
the	O	O:0.999967
function	O	O:0.999961
aggregate	O	O:0.698093
the	O	O:0.999990
values	O	O:0.998978
in	O	O:0.999993
some	O	O:0.999944
why	O	O:0.999973
?	O	O:0.999953
	
(	O	O:0.999985
all	O	O:0.999972
of	O	O:0.999995
these	O	O:0.999934
questions	O	O:0.999955
I	O	O:0.999997
have	O	O:0.999984
could	O	O:0.999934
be	O	O:0.999999
avoided	O	O:0.999969
if	O	O:0.999971
you	O	O:0.999974
simply	O	O:0.999953
included	O	O:0.999990
some	O	O:0.999936
example	O	O:0.999862
output	O	O:0.999969
that	O	O:0.999967
you	O	O:0.999989
would	O	O:0.999998
like	O	O:0.999994
to	O	O:0.999999
see	O	O:0.999997
)	O	O:0.999976
	
First	O	O:0.999800
,	O	O:0.999990
I	O	O:0.999998
want	O	O:0.999971
to	O	O:0.999958
say	O	O:0.999999
that	O	O:0.999960
I've	O	O:0.999930
studied	O	O:0.999842
basic	O	O:0.998780
python	O	O:0.998230
and	O	O:0.999978
had	O	O:0.999908
an	O	O:0.999887
intro	O	O:0.999886
into	O	O:0.999741
pandas	O	O:0.999369
,	O	O:0.999951
but	O	O:0.999917
I'm	O	O:0.999981
overwhelmed	O	O:0.999923
by	O	O:0.999995
pandas	O	O:0.999974
a	O	O:0.999970
bit	O	O:0.998608
..	O	O:0.999674
	
So	O	O:0.999953
,	O	O:0.999990
I	O	O:0.999984
found	O	O:0.999765
it	O	O:0.999966
hard	O	O:0.999778
for	O	O:0.999994
me	O	O:0.999944
to	O	O:0.999977
breakdown	O	O:0.999978
my	O	O:0.999996
eventual	O	O:0.999648
goals	O	O:0.999965
into	O	O:0.999805
one	O	O:0.999984
question	O	O:0.999711
,	O	O:0.999998
so	O	O:0.999984
I	O	O:0.999982
thought	O	O:0.999859
it	O	O:0.999961
made	O	O:0.999938
more	O	O:0.999950
sense	O	O:0.999961
to	O	O:0.999993
go	O	O:0.999996
in	O	O:0.999996
little	O	O:0.999842
steps	O	O:0.999693
and	O	O:0.999994
build	O	O:0.999793
on	O	O:0.999983
top	O	O:0.999940
of	O	O:0.999996
each	O	O:0.999723
other	O	O:0.999991
to	O	O:0.999996
finally	O	O:0.999982
get	O	O:0.999958
the	O	O:0.999992
full	O	O:0.999648
picture	O	O:0.999643
,	O	O:0.999987
but	O	O:0.999985
I	O	O:0.999945
was	O	O:0.999941
worried	O	O:0.999492
that	O	O:0.999878
it	O	O:0.999986
would	O	O:0.999993
seem	O	O:0.999983
like	O	O:0.999963
I'm	O	O:0.999998
repeating	O	O:0.999611
myself	O	O:0.997795
.	O	O:0.999858
	
But	O	O:0.999903
yes	O	O:0.999862
,	O	O:0.999999
one	O	O:0.999994
of	O	O:0.999995
the	O	O:0.999992
things	O	O:0.999890
I	O	O:0.999997
want	O	O:0.999989
to	O	O:0.999970
do	O	O:0.999999
I	O	O:0.999997
guess	O	O:0.999719
is	O	O:0.999983
transform	O	O:0.513424
matrices	O	O:0.999727
into	O	O:0.999793
same-size	O	O:0.999621
output	O	O:0.999744
matrices	O	O:0.999303
,	O	O:0.999989
not	O	O:0.999985
so	O	O:0.999994
much	O	O:0.999646
aggregating-	O	O:0.999567
but	O	O:0.999969
mostly	O	O:0.999642
I	O	O:0.999997
need	O	O:0.999969
to	O	O:0.999994
apply	O	O:0.989167
functions	O	O:0.999839
to	O	O:0.999993
slices	O	O:0.999996
of	O	O:0.999998
the	O	O:1.000000
rows	O	O:0.999950
of	O	O:0.999993
my	O	O:0.999985
input	O	O:0.999877
matrix	O	O:0.999794
..	O	O:0.999440
	
it'll	O	O:0.999883
take	O	O:0.999925
me	O	O:0.999995
a	O	O:0.999996
bit	O	O:0.999780
to	O	O:0.999985
digest	O	O:0.999993
your	O	O:0.999863
answer	O	O:0.999452
,	O	O:0.999974
but	O	O:0.999990
this	O	O:0.999523
is	O	O:0.999997
very	O	O:0.999132
useful	O	O:0.999749
info	O	O:0.999683
for	O	O:0.999987
me	O	O:0.999871
at	O	O:0.999993
this	O	O:0.999802
point	O	O:0.999629
.	O	O:0.999879
	
I	O	O:0.999972
do	O	O:0.999993
want	O	O:0.999875
eventually	O	O:0.999789
be	O	O:0.999996
fluent	O	O:0.999559
in	O	O:0.999946
applying	O	O:0.999835
these	O	O:0.999901
things	O	O:0.999914
as	O	O:0.999997
such	O	O:0.999411
,	O	O:0.999976
but	O	O:0.999665
didn't	O	O:0.999734
know	O	O:0.999905
how	O	O:0.999996
to	O	O:0.999996
step	O	O:0.999999
into	O	O:0.999908
the	O	O:0.999994
whole	O	O:0.997778
indexing	O	O:0.997889
and	O	O:0.999989
grouping	O	O:0.999577
with	O	O:0.999348
pandas	O	O:0.998804
.	O	O:0.999940
	
Delicate	O	O:0.999513
balancing	O	O:0.998681
between	O	O:0.999548
learning	O	O:0.998855
code	O	O:0.997282
and	O	O:0.999988
getting	O	O:0.999813
my	O	O:0.999316
project	O	O:0.999615
done	O	O:0.999767
...	O	O:0.999703
	
I'll	O	O:0.998332
be	O	O:0.999990
trying	O	O:0.999925
to	O	O:0.999977
apply	O	O:0.995590
your	O	O:0.999527
answer	O	O:0.999588
to	O	O:0.999994
my	O	O:0.999996
needs	O	O:0.999774
.	O	O:0.999951
	
Thank	O	O:0.999328
you	O	O:0.999761
!	O	O:0.999952
	
Read	O	O:0.999862
my	O	O:0.999988
data	O	O:0.999930
from	O	O:0.999969
file	O	O:0.999644
and	O	O:0.999998
trying	O	O:0.999965
to	O	O:0.999984
apply	O	O:0.987758
indexes	O	O:0.998103
to	O	O:0.999944
the	O	O:0.999997
(	O	O:0.999941
43	O	O:0.999925
,	O	O:0.999990
49	O	O:0.999927
)	O	O:0.999976
df	O	O:0.999148
.	O	O:0.999883
	
I	O	O:0.999977
put	O	O:0.999885
all	O	O:0.999959
my	O	O:0.999993
indexes	O	O:0.999738
as	O	O:0.999995
a	O	O:0.999997
list	O	O:0.998739
of	O	O:0.999977
tuples	O	O:0.972002
(	O	O:0.999996
idx_tuple	O	O:0.998035
)	O	O:0.999966
and	O	O:0.999997
then	O	O:0.999775
created	O	O:0.999904
multi-index	O	O:0.999990
by	O	O:0.999488
`	O	O:0.999988
index	O	O:0.999406
=	O	O:0.999894
pd.MultiIndex.from_tuples	B-API	B-API:0.994719
(	O	O:0.999965
idx_tuple	O	O:0.998549
,	O	O:0.999990
names	O	O:0.999524
=[	O	O:0.999934
'	O	O:0.999981
nr	O	O:0.999751
'	O	O:0.999974
,	O	O:0.999964
'	O	O:0.999992
date_sample	O	O:0.998182
'	O	O:0.999979
,	O	O:0.999987
'	O	O:0.999983
month	O	O:0.997701
'	O	O:0.999978
,	O	O:0.999966
'	O	O:0.999985
conc	O	O:0.996929
'	O	O:0.999988
,	O	O:0.999937
'	O	O:0.999987
time	O	O:0.999943
'])`	O	O:0.999664
.	O	O:0.999785
	
Now	O	O:0.999919
tried	O	O:0.999878
to	O	O:0.999988
update	O	O:0.999987
my	O	O:0.999993
df	O	O:0.999959
as	O	O:0.999993
such	O	O:0.997062
:	O	O:0.999964
	
Sorry	O	O:0.998035
but	O	O:0.999901
how	O	O:0.999928
would	O	O:0.999966
I	O	O:0.999998
apply	O	O:0.990344
this	O	O:0.998196
for	O	O:0.999983
a	O	O:0.999980
dataframe	B-API	O:0.965732
?	O	O:0.999942
	
df.values.apply	O	O:0.950364
(	O	O:0.999941
lambda	O	O:0.999248
x	O	O:0.999687
:	O	O:0.999915
round	O	O:0.992653
(	O	O:0.999989
x	O	O:0.999882
))	O	O:0.999001
??	O	O:0.999868
	
This	O	O:0.999867
code	O	O:0.999785
generates	O	O:0.999935
the	O	O:0.999986
error	O	O:0.997119
'	O	O:0.999930
Int64Index	O	O:0.998597
'	O	O:0.999882
object	O	O:0.999771
has	O	O:0.999952
no	O	O:0.999974
attribute	O	O:0.999898
'	O	O:0.999984
apply	O	B-API:0.762579
'	O	O:0.999369
	
Index	O	O:0.994387
types	O	O:0.998444
don't	O	O:0.999959
have	O	O:0.999980
an	O	O:0.999995
`	O	O:0.999995
apply	O	B-API:0.998275
`	O	O:0.999868
method	O	O:0.996658
,	O	O:0.999989
but	O	O:0.999924
`	O	O:0.999970
Series	O	O:0.990329
`	O	O:0.999995
does	O	O:0.998037
.	O	O:0.999971
	
To	O	O:0.999976
apply	O	O:0.900016
a	O	O:0.999856
function	O	O:0.998920
to	O	O:0.999994
your	O	O:0.999995
index	O	O:0.999921
,	O	O:0.999999
you	O	O:0.999991
can	O	O:0.999984
convert	O	O:0.999969
it	O	O:0.999999
to	O	O:0.999999
a	O	O:1.000000
series	O	O:0.999922
first	O	O:0.999943
,	O	O:0.999999
using	O	O:0.999969
its	O	O:0.998872
`	O	O:0.999942
to_series	B-API	B-API:0.999937
`	O	O:0.999911
method	O	O:0.997696
:	O	O:0.999978
#CODE	O	O:0.999874
	
and	O	O:0.999988
then	O	O:0.999932
pass	O	O:0.999524
it	O	O:0.999994
to	O	O:0.999993
`	O	O:0.999999
apply	O	B-API:0.950107
`	O	O:0.999994
on	O	O:0.999967
data	O	O:0.999993
grouped	O	O:0.999951
by	O	O:0.999906
s_id	O	O:0.919408
:	O	O:0.999839
#CODE	O	O:0.999733
	
So	O	O:0.999899
`	O	O:0.999991
apply	O	B-API:0.982974
`	O	O:0.999953
passes	O	O:0.997871
each	O	O:0.999979
chunk	O	O:0.999877
of	O	O:0.999998
grouped	O	O:0.999948
data	O	O:0.999976
to	O	O:0.999995
the	O	O:0.999997
function	O	O:0.999759
and	O	O:0.999994
the	O	O:0.999998
the	O	O:0.999916
pieces	O	O:0.997927
are	O	O:0.999998
glues	O	O:0.999987
back	O	O:0.999947
together	O	O:0.999956
once	O	O:0.999941
this	O	O:0.999745
has	O	O:0.999972
been	O	O:0.999857
done	O	O:0.999928
for	O	O:0.999991
each	O	O:0.999849
group	O	O:0.999569
of	O	O:0.999996
data	O	O:0.999385
.	O	O:0.999967
	
One	O	O:0.999445
possible	O	O:0.999268
method	O	O:0.999971
without	O	O:0.999904
using	O	O:0.999647
`	O	O:0.999749
regex	O	O:0.978407
`	O	O:0.999976
is	O	O:0.999966
to	O	O:0.999986
write	O	O:0.999997
your	O	O:0.999827
own	O	O:0.999663
function	O	O:0.999847
and	O	O:0.999996
just	O	O:0.999827
`	O	O:0.999985
apply	O	B-API:0.987628
`	O	O:0.999979
it	O	O:0.999854
to	O	O:0.999998
the	O	O:1.000000
column	O	O:0.999397
/	O	O:0.999996
Series	O	O:0.999926
of	O	O:0.999998
your	O	O:0.999770
choosing	O	O:0.999171
.	O	O:0.999822
	
You	O	O:0.999905
could	O	O:0.999923
apply	O	O:0.958243
that	O	O:0.999902
regular	O	O:0.999876
expression	O	O:0.999823
to	O	O:0.999993
the	O	O:1.000000
elements	O	O:0.999483
in	O	O:0.999996
the	O	O:0.999999
data	O	O:0.999825
.	O	O:0.999915
	
However	O	O:0.999728
,	O	O:0.999995
the	O	O:0.999997
solution	O	O:0.999796
of	O	O:0.999991
mapping	O	O:0.999963
your	O	O:0.999960
own	O	O:0.999848
function	O	O:0.999988
over	O	O:0.999948
the	O	O:0.999984
data	O	O:0.999673
works	O	O:0.999948
well	O	O:0.999843
.	O	O:0.999945
	
Thought	O	O:0.999695
you	O	O:0.999957
might	O	O:0.999993
want	O	O:0.999987
to	O	O:0.999996
see	O	O:0.999999
how	O	O:0.999986
you	O	O:0.999992
could	O	O:0.999986
approach	O	O:0.999999
this	O	O:0.999984
using	O	O:0.999994
your	O	O:0.999770
original	O	O:0.997870
idea	O	O:0.999571
.	O	O:0.999752
	
I'm	O	O:0.999881
having	O	O:0.999834
problems	O	O:0.999804
when	O	O:0.999854
trying	O	O:0.999978
to	O	O:0.999997
use	O	O:0.999997
apply	O	B-API:0.807372
on	O	O:0.999971
the	O	O:0.999989
result	O	O:0.999982
of	O	O:0.999996
a	O	O:0.999988
groupby	B-API	B-API:0.988003
operation	O	O:0.999013
.	O	O:0.999537
	
And	O	O:0.999954
I	O	O:0.999990
now	O	O:0.999969
would	O	O:0.999967
like	O	O:0.999991
to	O	O:0.999998
use	O	O:0.999995
apply	O	B-API:0.935813
,	O	O:0.999807
but	O	O:0.999937
I	O	O:0.999995
need	O	O:0.999985
to	O	O:0.999985
feed	O	O:0.999931
it	O	O:0.999976
id1	O	O:0.999921
,	O	O:0.999990
which	O	O:0.999432
is	O	O:0.999998
part	O	O:0.999877
of	O	O:0.999979
the	O	O:0.999974
index	O	O:0.999938
,	O	O:0.999997
so	O	O:0.999998
I	O	O:0.999998
get	O	O:0.999997
an	O	O:0.999987
error	O	O:0.999983
when	O	O:0.999659
I	O	O:0.999997
try	O	O:0.999999
to	O	O:0.999950
do	O	O:0.999999
the	O	O:0.999974
following	O	O:0.992041
:	O	O:0.999936
#CODE	O	O:0.999802
	
The	O	O:0.999353
`	O	O:0.999970
DataFrame	B-API	O:0.871483
`	O	O:0.999970
object	O	O:0.999416
doesn't	O	O:0.999975
have	O	O:0.999845
`	O	O:0.999994
nunique	B-API	B-API:0.996955
`	O	O:0.999974
.	O	O:0.999304
	
You	O	O:0.999973
have	O	O:0.999948
to	O	O:0.999999
pick	O	O:0.999989
out	O	O:0.999964
which	O	O:0.999990
column	O	O:0.999927
you	O	O:0.999996
want	O	O:0.999986
to	O	O:0.999996
apply	O	O:0.966911
`	O	O:0.999875
nunique()	B-API	B-API:0.999572
`	O	O:0.999989
on	O	O:0.999823
.	O	O:0.999959
	
You	O	O:0.999921
can	O	O:0.999939
do	O	O:1.000000
this	O	O:0.999991
with	O	O:0.999986
a	O	O:0.999994
simple	O	O:0.997654
dot	O	O:0.995424
operator	O	O:0.998900
:	O	O:0.999864
#CODE	O	O:0.999843
	
To	O	O:0.999916
answer	O	O:0.999992
your	O	O:0.999894
question	O	O:0.999787
about	O	O:0.999968
why	O	O:0.999991
your	O	O:0.999806
recursive	O	O:0.999664
lambda	O	O:0.999710
prints	O	O:0.999349
the	O	O:0.999914
`	O	O:0.999936
A	O	O:0.999689
`	O	O:0.999999
column	O	O:0.999760
as	O	O:0.999999
well	O	O:0.999601
,	O	O:0.999991
it's	O	O:0.999839
because	O	O:0.999984
when	O	O:0.999929
you	O	O:0.999999
do	O	O:1.000000
a	O	O:0.999994
`	O	O:0.999824
groupby	B-API	B-API:0.999142
`	O	O:0.999970
/	O	O:0.997638
`	O	O:0.999990
apply	O	B-API:0.964079
`	O	O:0.999945
operation	O	O:0.995394
,	O	O:0.999997
you're	O	O:0.999897
now	O	O:0.999978
iterating	O	O:0.999955
through	O	O:0.999881
three	O	O:0.996243
`	O	O:0.999965
DataFrame	B-API	O:0.708125
`	O	O:0.999991
objects	O	O:0.997983
.	O	O:0.999927
	
Each	O	O:0.994612
`	O	O:0.999967
DataFrame	B-API	O:0.802799
`	O	O:0.999982
object	O	O:0.999083
is	O	O:0.999996
a	O	O:0.999985
sub-	O	O:0.911303
`	O	O:0.999982
DataFrame	B-API	O:0.973312
`	O	O:0.999997
of	O	O:0.999972
the	O	O:0.999991
original	O	O:0.999074
.	O	O:0.999823
	
Applying	O	O:0.999666
an	O	O:0.999952
operation	O	O:0.999764
to	O	O:0.999990
that	O	O:0.999997
will	O	O:0.999977
apply	O	O:0.957489
it	O	O:0.999974
to	O	O:0.999989
each	O	O:0.999942
`	O	O:0.999980
Series	O	O:0.993154
`	O	O:0.999987
.	O	O:0.999598
	
There	O	O:0.999568
are	O	O:0.999994
three	O	O:0.999472
`	O	O:0.999978
Series	O	O:0.994499
`	O	O:0.999994
per	O	O:0.992894
`	O	O:0.999985
DataFrame	B-API	O:0.889076
`	O	O:0.999993
you're	O	O:0.999883
applying	O	O:0.999931
the	O	O:0.999905
`	O	O:0.999868
nunique()	B-API	B-API:0.999846
`	O	O:0.999988
operator	O	O:0.999528
to	O	O:0.999974
.	O	O:0.999993
	
I	O	O:0.999962
am	O	O:0.999995
using	O	O:0.998575
groupby	B-API	B-API:0.998138
and	O	O:0.999894
apply	O	B-API:0.741357
,	O	O:0.999867
so	O	O:0.999957
I	O	O:0.999954
am	O	O:0.999999
not	O	O:0.999973
explicitly	O	O:0.999982
pulling	O	O:0.999694
the	O	O:0.999948
groups	O	O:0.999326
,	O	O:0.999984
which	O	O:0.999819
is	O	O:0.999986
why	O	O:0.999964
i	O	O:0.999989
need	O	O:0.999974
to	O	O:0.999980
do	O	O:1.000000
this	O	O:0.999886
.	O	O:0.999923
	
Apply	O	O:0.999565
will	O	O:0.999684
break	O	O:0.999238
the	O	O:0.999990
dataframe	B-API	O:0.998359
into	O	O:0.999904
multiple	O	O:0.999986
smaller	O	O:0.999921
dataframes	O	O:0.999865
by	O	O:0.999961
the	O	O:0.999979
groupby	B-API	B-API:0.980850
columns	O	O:0.999158
.	O	O:0.999774
	
The	O	O:0.999978
columns	O	O:0.999811
you	O	O:0.999995
group	O	O:0.999903
by	O	O:0.999990
are	O	O:0.999985
still	O	O:0.999801
inside	O	O:0.999947
the	O	O:0.999984
smaller	O	O:0.999117
dataframes	O	O:0.998150
.	O	O:0.999882
	
Is	O	O:0.999968
that	O	O:0.999971
what	O	O:0.999980
you	O	O:0.999996
are	O	O:0.999989
after	O	O:0.999949
?	O	O:0.999884
	
so	O	O:0.999979
you	O	O:0.999987
can	O	O:0.999996
see	O	O:0.999999
in	O	O:0.999999
the	O	O:0.999999
resulting	O	O:0.999834
printed	O	O:0.999103
output	O	O:0.999959
that	O	O:0.999983
each	O	O:0.999976
iteration	O	O:0.999976
of	O	O:0.999992
the	O	O:0.999952
`	O	O:0.999991
apply	O	B-API:0.993537
`	O	O:0.999979
gets	O	O:0.998244
all	O	O:0.999999
columns	O	O:0.999955
of	O	O:0.999987
the	O	O:0.999977
input	O	O:0.999939
dataframe	B-API	O:0.995703
.	O	O:0.999838
	
I'm	O	O:0.999844
not	O	O:0.999988
sure	O	O:0.999953
how	O	O:0.999991
to	O	O:0.999998
grab	O	O:0.999977
a	O	O:0.999999
tuple	O	O:0.999734
of	O	O:0.999998
keys	O	O:0.999819
from	O	O:0.999984
an	O	O:0.999987
`	O	O:0.999993
apply	O	B-API:0.992798
`	O	O:0.999941
but	O	O:0.999770
I	O	O:0.999997
can	O	O:0.999996
from	O	O:0.999994
a	O	O:0.999990
loop	O	O:0.993860
:	O	O:0.999960
#CODE	O	O:0.999822
	
so	O	O:0.999949
are	O	O:0.999989
you	O	O:0.999989
asking	O	O:0.999893
how	O	O:0.999981
to	O	O:0.999991
write	O	O:0.999999
a	O	O:0.999981
function	O	O:0.999824
which	O	O:0.999948
,	O	O:0.999998
when	O	O:0.999923
you	O	O:0.999987
apply	O	O:0.976483
it	O	O:0.999964
to	O	O:0.999993
grouped	O	O:0.999998
data	O	O:0.999980
,	O	O:0.999997
can	O	O:0.999989
see	O	O:0.999999
the	O	O:0.999998
keys	O	O:0.999090
?	O	O:0.999954
	
I	O	O:0.999944
get	O	O:0.999975
it	O	O:0.999908
now	O	O:0.999809
.	O	O:0.999984
not	O	O:0.999993
sure	O	O:0.999954
how	O	O:0.999988
to	O	O:0.999986
do	O	O:1.000000
this	O	O:0.999987
from	O	O:0.999957
apply	O	B-API:0.705581
,	O	O:0.999940
but	O	O:0.999902
I	O	O:0.999994
added	O	O:0.999978
an	O	O:0.999984
example	O	O:0.999923
of	O	O:0.999984
how	O	O:0.999974
to	O	O:0.999996
do	O	O:0.999999
it	O	O:0.999998
from	O	O:0.999987
a	O	O:0.999994
loop	O	O:0.998573
	
Parallelizing	O	O:0.999330
apply	O	B-API:0.884147
function	O	O:0.996227
in	O	O:0.999908
pandas	O	O:0.999709
python	O	O:0.999439
.	O	O:0.999837
worked	O	O:0.999745
on	O	O:0.999938
groupby	B-API	B-API:0.992484
	
The	O	O:0.999972
same	O	O:0.999842
"	O	O:0.999991
apply	O	B-API:0.792470
"	O	O:0.999408
pattern	O	O:0.996557
works	O	O:0.999724
for	O	O:0.999991
SFrames	O	O:0.999423
as	O	O:0.999972
well	O	O:0.999185
.	O	O:0.999935
	
You	O	O:0.999884
could	O	O:0.999748
do	O	O:0.999900
:	O	O:0.999984
#CODE	O	O:0.999658
	
I'm	O	O:0.999902
guessing	O	O:0.999962
that	O	O:0.999858
I	O	O:0.999997
can't	O	O:0.999989
apply	O	O:0.795350
a	O	O:0.999909
sort	O	O:0.982206
method	O	O:0.999975
to	O	O:0.999991
the	O	O:0.999999
returned	O	O:0.998159
groupby	B-API	B-API:0.985229
object	O	O:0.999480
.	O	O:0.999577
	
so	O	O:0.999970
that	O	O:0.999965
fills	O	O:0.999920
in	O	O:0.999994
all	O	O:0.999982
the	O	O:0.999998
missing	O	O:0.999102
dates	O	O:0.998882
with	O	O:0.999881
zeros	B-API	O:0.782850
.	O	O:0.999904
	
Now	O	O:0.999960
we	O	O:0.999995
can	O	O:0.999982
apply	O	O:0.966650
the	O	O:0.999979
rolling	O	O:0.897084
sum	O	O:0.997832
.	O	O:0.999890
	
#CODE	O	O:0.998453
	
You	O	O:0.999886
can	O	O:0.999982
define	O	O:0.999992
a	O	O:0.999991
function	O	O:0.999248
which	O	O:0.999886
returns	O	O:0.999971
your	O	O:0.999929
different	O	O:0.999692
states	O	O:0.995175
"	O	O:0.999973
Full	O	O:0.997773
"	O	O:0.999985
,	O	O:0.999822
"	O	O:0.999963
Partial	O	O:0.997785
"	O	O:0.999980
,	O	O:0.999880
"	O	O:0.999987
Empty	O	O:0.997860
"	O	O:0.999970
,	O	O:0.999952
etc	O	O:0.999903
and	O	O:0.999999
then	O	O:0.999850
use	O	O:0.999976
`	O	O:0.999950
df.apply	B-API	B-API:0.992506
`	O	O:0.999995
to	O	O:0.999917
apply	O	O:0.987971
the	O	O:0.999651
function	O	O:0.999627
to	O	O:0.999997
each	O	O:0.999980
row	O	O:0.999893
.	O	O:0.999914
	
Note	O	O:0.999962
that	O	O:0.999960
you	O	O:0.999999
have	O	O:0.999995
to	O	O:0.999999
pass	O	O:0.999973
the	O	O:0.999978
keyword	O	O:0.999759
argument	O	O:0.999856
`	O	O:0.999984
axis=1	O	O:0.996045
`	O	O:0.999995
to	O	O:0.999945
ensure	O	O:0.999994
that	O	O:0.999957
it	O	O:0.999997
applies	O	O:0.999976
the	O	O:0.999909
function	O	O:0.999899
to	O	O:0.999996
rows	O	O:0.999965
.	O	O:0.999928
	
#CODE	O	O:0.998453
	
Then	O	O:0.999823
using	O	O:0.999928
apply	O	B-API:0.977748
:	O	O:0.998024
#CODE	O	O:0.999008
	
I	O	O:0.999965
am	O	O:0.999997
creating	O	O:0.996959
the	O	O:0.999991
dataframe	B-API	O:0.999527
by	O	O:0.999981
concatenating	O	O:0.999644
two	O	O:0.999950
other	O	O:0.999972
frames	O	O:0.999419
immediately	O	O:0.999312
before	O	O:0.999957
trying	O	O:0.999834
to	O	O:0.999980
apply	O	O:0.954181
the	O	O:0.999772
filter	O	O:0.923145
.	O	O:0.999856
	
an	O	O:0.999943
intuitive	O	O:0.999917
way	O	O:0.999959
to	O	O:0.999971
understand	O	O:0.999985
the	O	O:0.999986
pandas	O	O:0.999268
groupby	B-API	B-API:0.950759
is	O	O:0.999969
to	O	O:0.999951
treat	O	O:0.999975
the	O	O:0.999986
return	O	O:0.999467
obj	O	O:0.999583
of	O	O:0.999989
DataFrame.groupby()	B-API	B-API:0.997267
as	O	O:0.999993
a	O	O:0.999987
list	O	O:0.994900
of	O	O:0.999979
dataframe	B-API	O:0.989449
.	O	O:0.999942
	
so	O	O:0.999988
when	O	O:0.999812
u	O	O:0.999988
try	O	O:0.999994
to	O	O:0.999996
using	O	O:0.999998
filter	O	O:0.989301
to	O	O:0.999966
apply	O	O:0.955277
the	O	O:0.999916
lambda	O	O:0.991627
function	O	O:0.999946
upon	O	O:0.999344
x	O	O:0.999922
,	O	O:0.999989
x	O	O:0.999786
is	O	O:0.999990
actually	O	O:0.999991
one	O	O:0.999993
of	O	O:0.999995
those	O	O:0.999884
dataframes	O	O:0.998956
:	O	O:0.999951
#CODE	O	O:0.999878
	
What	O	O:0.999649
I'd	O	O:0.999996
like	O	O:0.999974
to	O	O:0.999994
do	O	O:0.999943
is	O	O:0.999973
:	O	O:0.999938
for	O	O:0.999998
each	O	O:0.999569
day	O	O:0.999931
,	O	O:0.999997
apply	O	O:0.855705
a	O	O:0.999706
function	O	O:0.999590
that	O	O:0.999916
takes	O	O:0.999971
the	O	O:0.999998
sum	O	O:0.999780
of	O	O:0.999985
all	O	O:0.999969
logvol	O	O:0.999032
between	O	O:0.997036
14:40	O	O:0.996660
:	O	O:0.999871
00	O	O:0.999891
and	O	O:0.999936
15:00	O	O:0.997856
:	O	O:0.999511
00	O	O:0.999878
.	O	O:0.999877
	
`	O	O:0.999965
apply	O	B-API:0.985169
`	O	O:0.999989
that	O	O:0.994481
function	O	O:0.999994
to	O	O:0.999998
each	O	O:0.999986
row	O	O:0.999946
,	O	O:0.999999
save	O	O:0.999242
in	O	O:0.999987
the	O	O:0.999994
original	O	O:0.999481
dataframe	B-API	O:0.996961
#CODE	O	O:0.999669
	
Apply	O	O:0.999939
multiple	O	O:0.999700
functions	O	O:0.999710
to	O	O:0.999991
multiple	O	O:0.999993
groupby	B-API	B-API:0.848269
columns	O	O:0.999507
	
You	O	O:0.999848
might	O	O:0.999964
start	O	O:0.999919
by	O	O:0.999996
looking	O	O:0.998910
for	O	O:0.999956
conditional	O	O:0.989798
`	O	O:0.999973
apply	O	B-API:0.990494
`	O	O:0.999879
-	O	O:0.999921
there	O	O:0.999916
are	O	O:0.999991
plenty	O	O:0.999967
examples	O	O:0.999769
on	O	O:0.999972
how	O	O:0.999999
this	O	O:0.999976
can	O	O:0.999989
be	O	O:1.000000
done	O	O:0.999901
.	O	O:0.999780
	
Alternatively	O	O:0.999520
`	O	O:0.999889
numpy.where	B-API	B-API:0.996927
`	O	O:0.999993
can	O	O:0.999907
do	O	O:0.999999
`	O	O:0.999990
if	O	O:0.999937
...	O	O:0.999989
else	O	O:0.999541
`	O	O:0.999988
replacement	O	O:0.999443
/	O	O:0.999971
assignment	O	O:0.999053
.	O	O:0.999692
	
And	O	O:0.999821
for	O	O:0.999990
comparing	O	O:0.999840
current	O	O:0.998882
value	O	O:0.999671
(	O	O:0.999989
s	O	O:0.999935
)	O	O:0.999989
with	O	O:0.999948
previous	O	O:0.999936
ones	O	O:0.999189
`	O	O:0.999997
pandas	O	O:0.996904
`	O	O:0.999995
has	O	O:0.997888
`	O	O:0.999987
.shift	B-API	B-API:0.999874
`	O	O:0.999966
method	O	O:0.999760
,	O	O:0.999996
which	O	O:0.999983
you	O	O:0.999985
could	O	O:0.999985
use	O	O:0.999998
with	O	O:0.999986
any	O	O:0.999977
of	O	O:0.999991
the	O	O:0.999939
first	O	O:0.999968
two	O	O:0.999952
approaches	O	O:0.999710
.	O	O:0.999817
	
It's	O	O:0.999829
a	O	O:0.999971
list	O	O:0.994075
...	O	O:0.999539
	
In	O	O:0.999734
[	O	O:0.999944
81	O	O:0.999540
]:	O	O:0.999891
type	O	O:0.981681
(	O	O:0.999991
parsedSeries.ix	O	O:0.996741
[	O	O:0.999978
0	O	O:0.999952
])	O	O:0.999823
Out	O	O:0.999473
[8	O	O:0.999896
1	O	O:0.997813
]:	O	O:0.999886
list	O	O:0.995168
.	O	O:0.999898
	
I	O	O:0.999976
apply	O	O:0.798773
str.split	B-API	B-API:0.995553
to	O	O:0.999989
a	O	O:1.000000
df	O	O:0.999811
to	O	O:0.999993
create	O	O:0.999962
that	O	O:0.999965
list	O	O:0.999776
	
The	O	O:0.999701
"	O	O:0.999986
best	O	O:0.998822
"	O	O:0.999972
solution	O	O:0.999197
probably	O	O:0.998742
involves	O	O:0.999728
not	O	O:0.999976
finding	O	O:0.999908
yourself	O	O:0.999076
in	O	O:0.999998
this	O	O:0.999985
situation	O	O:0.999923
in	O	O:0.999991
the	O	O:0.999992
first	O	O:0.999895
place	O	O:0.999422
.	O	O:0.999941
	
Most	O	O:0.999854
of	O	O:0.999988
the	O	O:0.999991
time	O	O:0.999990
when	O	O:0.999908
you	O	O:0.999998
have	O	O:0.999998
non-scalar	O	O:0.999948
quantities	O	O:0.999477
in	O	O:0.999992
a	O	O:0.999998
Series	O	O:0.997210
or	O	O:0.999974
DataFrame	B-API	O:0.997026
you've	O	O:0.999880
already	O	O:0.999985
taken	O	O:0.999948
a	O	O:0.999999
step	O	O:0.999640
in	O	O:0.999995
the	O	O:0.999996
wrong	O	O:0.999805
direction	O	O:0.999080
,	O	O:0.999998
because	O	O:0.999958
you	O	O:0.999944
can't	O	O:0.999993
really	O	O:0.999979
apply	O	O:0.912308
vector	O	O:0.998946
ops	O	O:0.997959
.	O	O:0.999800
	
This	O	O:0.999883
tells	O	O:0.999900
u	O	O:0.999987
that	O	O:0.999947
the	O	O:0.999995
datetime	O	O:0.999439
format	O	O:0.999771
of	O	O:0.999976
variable	O	O:0.999588
{	O	O:0.999991
b	O	O:0.999793
}	O	O:0.999796
is	O	O:0.999941
wrong	O	O:0.997094
.	O	O:0.999841
	
so	O	O:0.999972
two	O	O:0.999978
choices	O	O:0.999875
here	O	O:0.999655
.	O	O:0.999992
the	O	O:0.999995
first	O	O:0.999887
one	O	O:0.999961
is	O	O:0.999997
to	O	O:0.999986
correct	O	O:0.999996
the	O	O:0.999985
str	O	O:0.998070
format	O	O:0.998923
(	O	O:0.999990
modify	O	O:0.999325
"	O	O:0.999965
24	O	O:0.998984
"	O	O:0.999981
to	O	O:0.999893
"	O	O:0.999997
00	O	O:0.999879
")	O	O:0.999967
,	O	O:0.999996
then	O	O:0.999898
apply	O	O:0.914080
the	O	O:0.999912
{	O	O:0.999755
pd.to_datetime	B-API	B-API:0.986430
}	O	O:0.999851
func	O	O:0.973337
:	O	O:0.999943
#CODE	O	O:0.999728
	
I	O	O:0.999990
know	O	O:0.999952
about	O	O:0.999524
`	O	O:0.999903
scipy.interpolate	O	B-API:0.613227
`	O	O:0.999996
mentioned	O	O:0.997728
in	O	O:0.999998
this	O	O:0.999775
article	O	O:0.999673
(	O	O:0.999967
which	O	O:0.999779
is	O	O:0.999998
where	O	O:0.999915
I	O	O:0.999973
got	O	O:0.999990
the	O	O:0.999913
images	O	O:0.999375
from	O	O:0.999867
)	O	O:0.999983
,	O	O:0.999983
but	O	O:0.999979
how	O	O:0.999958
can	O	O:0.999969
I	O	O:1.000000
apply	O	O:0.949944
it	O	O:0.999137
for	O	O:0.999930
Pandas	O	O:0.999882
time	O	O:0.999687
series	O	O:0.999825
?	O	O:0.999964
	
Your	O	O:0.999519
`	O	O:0.999981
apply	O	B-API:0.957288
`	O	O:0.999955
approach	O	O:0.997542
would	O	O:0.999967
work	O	O:0.999946
too	O	O:0.999994
if	O	O:0.999996
you	O	O:0.999979
used	O	O:0.999818
`	O	O:0.999992
x	O	O:0.998094
`	O	O:0.999998
instead	O	O:0.999967
of	O	O:0.999988
`	O	O:0.999988
df.radon	O	O:0.898067
`	O	O:0.999951
:	O	O:0.999821
#CODE	O	O:0.999908
	
I	O	O:0.999971
struggled	O	O:0.999831
with	O	O:0.999947
this	O	O:0.999940
problem	O	O:0.999774
for	O	O:0.999990
several	O	O:0.999770
hours	O	O:0.999305
to	O	O:0.999992
little	O	O:0.999982
avail	O	O:0.999487
.	O	O:0.999828
	
Ultimately	O	O:0.999866
,	O	O:0.999989
I	O	O:0.999997
wound	O	O:0.999868
up	O	O:0.999887
writing	O	O:0.999837
a	O	O:0.999953
nested	O	O:0.990440
for	O	O:0.999952
loop	O	O:0.998939
and	O	O:0.999947
solved	O	O:0.999868
the	O	O:0.999933
problem	O	O:0.999399
iteratively	O	O:0.997400
.	O	O:0.999899
	
Unfortunately	O	O:0.999665
,	O	O:0.999998
that	O	O:0.999939
solution	O	O:0.999512
is	O	O:0.999997
painfully	O	O:0.999399
slow	O	O:0.998693
and	O	O:0.999975
I'd	O	O:0.999991
much	O	O:0.999389
prefer	O	O:0.999930
something	O	O:0.999923
that	O	O:0.999840
utilizes	O	O:0.999991
nice	O	O:0.999950
features	O	O:0.998883
in	O	O:0.999991
Pandas	O	O:0.999991
such	O	O:0.999905
as	O	O:0.999988
groupby	B-API	B-API:0.998254
or	O	O:0.999948
apply	O	B-API:0.923797
.	O	O:0.999283
	
I	O	O:0.999985
have	O	O:0.999932
found	O	O:0.999325
workaround	O	O:0.999879
which	O	O:0.999449
is	O	O:0.999996
extremely	O	O:0.999928
slow	O	O:0.999892
due	O	O:0.999925
to	O	O:0.999990
the	O	O:0.999997
"	O	O:0.999937
in	O	O:0.999964
python	O	O:0.999756
"	O	O:0.999979
apply	O	B-API:0.975229
:	O	O:0.999505
#CODE	O	O:0.999094
	
Apply	O	O:0.999898
a	O	O:0.999903
function	O	O:0.999741
to	O	O:0.999998
a	O	O:1.000000
specific	O	O:0.999741
row	O	O:0.999981
using	O	O:0.999682
the	O	O:0.999897
index	O	O:0.999290
value	O	O:0.999734
	
How	O	O:0.999708
can	O	O:0.999921
i	O	O:0.999999
apply	O	O:0.989664
a	O	O:0.999858
function	O	O:0.999123
to	O	O:0.999995
the	O	O:0.999999
dataframes	O	O:0.999673
index	O	O:0.999794
?	O	O:0.999985
	
I	O	O:0.999992
want	O	O:0.999985
to	O	O:0.999900
round	O	O:0.999984
the	O	O:0.999982
numbers	O	O:0.998844
for	O	O:0.999997
every	O	O:0.999964
column	O	O:0.999934
where	O	O:0.999835
the	O	O:0.999980
index	O	O:0.999620
is	O	O:0.999965
"	O	O:0.999988
c	O	O:0.999374
"	O	O:0.999953
.	O	O:0.999386
	
#CODE	O	O:0.998453
	
I	O	O:0.999979
think	O	O:0.999989
your	O	O:0.999597
title	O	O:0.999504
is	O	O:0.999998
a	O	O:0.999977
bit	O	O:0.999735
misleading	O	O:0.999284
,	O	O:0.999990
what	O	O:0.999872
you	O	O:0.999912
are	O	O:0.999996
saying	O	O:0.999970
really	O	O:0.998983
is	O	O:0.999981
you	O	O:0.999966
want	O	O:0.999981
to	O	O:0.999996
apply	O	O:0.996512
a	O	O:0.999896
function	O	O:0.999541
to	O	O:0.999999
a	O	O:1.000000
specific	O	O:0.999741
row	O	O:0.999981
using	O	O:0.999682
the	O	O:0.999897
index	O	O:0.999290
value	O	O:0.999734
	
I	O	O:0.999968
think	O	O:0.999974
what	O	O:0.999633
you	O	O:0.999993
want	O	O:0.999989
to	O	O:0.999991
do	O	O:0.999998
won't	O	O:0.999990
work	O	O:0.999966
due	O	O:0.999993
to	O	O:0.999996
the	O	O:1.000000
shape	O	O:0.999923
of	O	O:0.999987
the	O	O:0.999994
returned	O	O:0.999860
values	O	O:0.997717
and	O	O:0.999978
expected	O	O:0.999954
return	O	O:0.997316
type	O	O:0.996229
.	O	O:0.999863
	
Another	O	O:0.999548
way	O	O:0.999751
would	O	O:0.999943
be	O	O:0.999998
to	O	O:0.999999
apply	O	O:0.950149
a	O	O:0.999950
lambda	O	O:0.993313
and	O	O:0.999985
concatenate	O	O:0.831458
the	O	O:0.999693
result	O	O:0.997575
:	O	O:0.999935
#CODE	O	O:0.999873
	
Is	O	O:0.999973
there	O	O:0.999961
any	O	O:0.999984
magic	O	O:0.999904
I	O	O:0.999986
can	O	O:0.999995
apply	O	O:0.857595
to	O	O:0.999982
the	O	O:0.999999
code	O	O:0.999634
below	O	O:0.999787
?	O	O:0.999981
	
#CODE	O	O:0.998453
	
One	O	O:0.999918
way	O	O:0.999935
I	O	O:0.999982
could	O	O:0.999992
conceive	O	O:0.999940
a	O	O:0.999996
solution	O	O:0.998204
would	O	O:0.999980
be	O	O:0.999997
to	O	O:0.999997
groupby	B-API	B-API:0.852722
all	O	O:0.999976
duplicated	O	O:0.999256
columns	O	O:0.999534
and	O	O:0.999999
then	O	O:0.999967
apply	O	O:0.924424
a	O	O:0.999978
concatenation	O	O:0.997400
operation	O	O:0.999959
on	O	O:0.999995
unique	O	O:0.852769
values	O	O:0.997776
:	O	O:0.999931
#CODE	O	O:0.999925
	
Now	O	O:0.999730
,	O	O:0.999987
I've	O	O:0.999955
made	O	O:0.999920
a	O	O:0.999914
little	O	O:0.996760
method	O	O:0.999967
that	O	O:0.999918
will	O	O:0.999998
take	O	O:0.999988
an	O	O:0.999997
input	O	O:0.999921
string	O	O:0.999547
and	O	O:0.999959
do	O	O:0.999992
this	O	O:0.999843
,	O	O:0.999998
spitting	O	O:0.999877
back	O	O:0.999621
the	O	O:0.999994
value	O	O:0.999867
I	O	O:0.999979
desire	O	O:0.999814
.	O	O:0.999185
	
However	O	O:0.999549
,	O	O:0.999983
it	O	O:0.999994
seems	O	O:0.999964
to	O	O:0.999994
be	O	O:0.999999
horribly	O	O:0.999778
inefficient	O	O:0.998647
.	O	O:0.999816
	
I'm	O	O:0.999889
using	O	O:0.999970
pandas	O	O:0.999420
for	O	O:0.999977
data	O	O:0.999286
manipulation	O	O:0.998691
and	O	O:0.999988
this	O	O:0.999625
method	O	O:0.999963
gets	O	O:0.999838
applied	O	O:0.999960
to	O	O:0.999996
a	O	O:1.000000
whole	O	O:0.999944
column	O	O:0.999974
of	O	O:0.999993
timeseries	O	O:0.999910
string	O	O:0.999994
data	O	O:0.999887
in	O	O:0.999997
the	O	O:0.999992
above	O	O:0.999710
string	O	O:0.999471
format	O	O:0.999386
.	O	O:0.999883
	
Calling	O	O:0.998900
the	O	O:0.999208
apply	O	B-API:0.897279
method	O	O:0.999036
via	O	O:0.999701
interactive	O	O:0.999701
shell	O	O:0.999593
finished	O	O:0.999753
execution	O	O:0.999725
in	O	O:0.999985
~2sec	O	O:0.998087
,	O	O:0.999990
but	O	O:0.999987
strangely	O	O:0.999915
,	O	O:0.999996
letting	O	O:0.999750
the	O	O:0.999980
code	O	O:0.999663
run	O	O:0.999926
as	O	O:0.999992
compiled	O	O:0.998270
/	O	O:0.999990
interpreted	O	O:0.999476
on	O	O:0.999982
the	O	O:0.999986
same	O	O:0.999948
dataframe	B-API	O:0.997951
takes	O	O:0.999975
more	O	O:0.999968
like	O	O:0.999819
15-20	O	O:0.999605
seconds	O	O:0.999062
.	O	O:0.999812
	
Why	O	O:0.999466
is	O	O:0.999986
that	O	O:0.999630
?	O	O:0.999989
	
This	O	O:0.998843
is	O	O:0.999956
how	O	O:0.999836
I'm	O	O:0.999982
calling	O	O:0.999793
it	O	O:0.999951
for	O	O:0.999963
the	O	O:0.999974
dataframe	B-API	O:0.988995
/	O	O:0.999901
series	O	O:0.999544
:	O	O:0.999947
	
Pandas	O	O:0.999784
apply	O	B-API:0.545693
with	O	O:0.997387
argument	O	O:0.999942
that	O	O:0.999969
varies	O	O:0.999988
by	O	O:0.999982
row	O	O:0.999760
	
I	O	O:0.999930
am	O	O:0.999998
attempting	O	O:0.999074
to	O	O:0.999992
apply	O	O:0.988297
a	O	O:0.999887
function	O	O:0.999431
to	O	O:0.999998
each	O	O:0.999991
row	O	O:0.999971
,	O	O:0.999998
where	O	O:0.999987
the	O	O:0.999786
function	O	O:0.999965
takes	O	O:0.999949
a	O	O:0.999983
'	O	O:0.999945
size	O	O:0.999625
'	O	O:0.999915
argument	O	O:0.999900
.	O	O:0.999786
	
#CODE	O	O:0.998453
	
but	O	O:0.999188
is	O	O:0.999994
there	O	O:0.999976
a	O	O:0.999991
better	O	O:0.999080
way	O	O:0.999985
using	O	O:0.999950
apply	O	B-API:0.885351
functions	O	O:0.990402
?	O	O:0.999506
	
Why	O	O:0.999900
don't	O	O:0.999892
you	O	O:0.999994
make	O	O:0.999934
`	O	O:0.999998
size	O	O:0.999465
`	O	O:0.999999
another	O	O:0.999920
column	O	O:0.999933
in	O	O:0.999999
your	O	O:0.999987
data	O	O:0.999948
,	O	O:0.999998
so	O	O:0.999994
it	O	O:0.999922
is	O	O:0.999998
passed	O	O:0.999549
as	O	O:0.999999
part	O	O:0.999781
of	O	O:0.999992
the	O	O:0.999976
`	O	O:0.999989
apply	O	B-API:0.988599
`	O	O:0.999926
?	O	O:0.999375
	
You	O	O:0.999919
can	O	O:0.999980
create	O	O:0.999682
function	O	O:0.999969
and	O	O:0.999980
`	O	O:0.999990
apply	O	B-API:0.995755
`	O	O:0.999967
it	O	O:0.999775
to	O	O:1.000000
your	O	O:0.999980
dataset	O	O:0.998961
:	O	O:0.999982
#CODE	O	O:0.999909
	
`	O	O:0.999852
read_csv	B-API	B-API:0.999713
`	O	O:0.999990
accepts	O	O:0.999352
an	O	O:0.999969
argument	O	O:0.999920
named	O	O:0.997394
`	O	O:0.999990
converters	O	O:0.760084
`	O	O:0.999986
.	O	O:0.999068
	
This	O	O:0.999781
can	O	O:0.999952
be	O	O:1.000000
used	O	O:0.999981
to	O	O:0.999991
apply	O	O:0.972682
functions	O	O:0.999399
to	O	O:0.999990
particular	O	O:1.000000
columns	O	O:0.999974
as	O	O:0.999998
a	O	O:0.999997
file	O	O:0.990985
is	O	O:0.999994
read	O	O:0.992854
in	O	O:0.999952
.	O	O:0.999899
	
`	O	O:0.999966
converters	O	O:0.742043
`	O	O:0.999993
should	O	O:0.999562
be	O	O:0.999999
passed	O	O:0.999871
in	O	O:0.999978
as	O	O:0.999998
a	O	O:0.999998
dictionary	O	O:0.999843
of	O	O:0.999985
the	O	O:0.999960
following	O	O:0.999540
form	O	O:0.998793
:	O	O:0.999942
#CODE	O	O:0.999914
	
You	O	O:0.999932
could	O	O:0.999729
use	O	O:0.999997
this	O	O:0.999862
to	O	O:0.999994
apply	O	O:0.995549
a	O	O:0.999895
function	O	O:0.999378
to	O	O:0.999992
the	O	O:1.000000
third	O	O:0.999807
column	O	O:0.999805
.	O	O:0.999941
	
All	O	O:0.999909
you	O	O:0.999992
need	O	O:0.999984
to	O	O:0.999998
do	O	O:0.999998
is	O	O:0.999996
set	O	O:0.999692
the	O	O:0.999974
function	O	O:0.999915
to	O	O:0.999993
get	O	O:1.000000
a	O	O:0.999999
value	O	O:0.999979
from	O	O:0.999983
a	O	O:0.999997
dictionary	O	O:0.999683
`	O	O:0.999987
d	O	O:0.999254
`	O	O:0.999985
which	O	O:0.999722
maps	O	O:0.999540
`"	O	O:0.999991
male	O	O:0.997368
"`	O	O:0.999976
to	O	O:0.999955
`	O	O:0.999999
0	O	O:0.997439
`	O	O:0.999988
and	O	O:0.999843
`"	O	O:0.999986
female	O	O:0.996922
"`	O	O:0.999959
to	O	O:0.999914
`	O	O:0.999999
1	O	O:0.995350
`	O	O:0.999957
:	O	O:0.999853
#CODE	O	O:0.999910
	
Can	O	O:0.999758
someone	O	O:0.999863
point	O	O:0.999949
me	O	O:0.999983
to	O	O:0.999997
a	O	O:1.000000
link	O	O:0.999132
or	O	O:0.999997
provide	O	O:0.999899
an	O	O:0.999998
explanation	O	O:0.999937
of	O	O:0.999993
the	O	O:0.999993
benefits	O	O:0.999827
of	O	O:0.999972
indexing	O	O:0.998804
in	O	O:0.999990
pandas	O	O:0.999306
?	O	O:0.999975
	
I	O	O:0.999982
routinely	O	O:0.999955
deal	O	O:0.998785
with	O	O:0.999961
tables	O	O:0.997919
and	O	O:0.999996
join	O	O:0.966300
them	O	O:0.999825
based	O	O:0.999934
on	O	O:0.999992
columns	O	O:0.999766
,	O	O:0.999986
and	O	O:0.999998
this	O	O:0.999942
joining	O	O:0.991775
/	O	O:0.999980
merging	O	O:0.999253
process	O	O:0.999190
seems	O	O:0.999922
to	O	O:0.999993
re-index	O	O:0.999923
things	O	O:0.999847
anyway	O	O:0.999979
,	O	O:0.999997
so	O	O:0.999975
it's	O	O:0.999960
a	O	O:0.999995
bit	O	O:0.999855
cumbersome	O	O:0.999892
to	O	O:0.999956
apply	O	O:0.991437
index	O	O:0.999521
criteria	O	O:0.999847
considering	O	O:0.999853
I	O	O:0.999980
don't	O	O:0.999972
think	O	O:0.999573
I	O	O:0.999998
need	O	O:0.999948
to	O	O:0.999903
.	O	O:0.999996
	
This	O	O:0.999842
needs	O	O:0.999958
to	O	O:0.999994
be	O	O:1.000000
done	O	O:0.999894
to	O	O:0.999986
several	O	O:0.999998
million	O	O:0.999987
rows	O	O:0.999962
of	O	O:0.999995
data	O	O:0.999890
.	O	O:0.999968
	
Any	O	O:0.999923
thoughts	O	O:0.999790
on	O	O:0.999982
how	O	O:0.999991
to	O	O:0.999999
speed	O	O:0.999989
up	O	O:0.999981
the	O	O:0.999984
process	O	O:0.997529
?	O	O:0.999955
	
I	O	O:0.999970
am	O	O:0.999995
using	O	O:0.999950
pandas	O	O:0.999904
data	O	O:0.999938
frame's	O	O:0.999779
map	O	B-API:0.849334
function	O	O:0.999973
to	O	O:0.999991
apply	O	O:0.980563
the	O	O:0.999601
function	O	O:0.998999
`	O	O:0.999995
toTheExp	O	O:0.995764
`	O	O:0.999999
to	O	O:0.999977
my	O	O:1.000000
column	O	O:0.999978
of	O	O:0.999998
data	O	O:0.999787
already	O	O:0.999926
.	O	O:0.999930
	
This	O	O:0.999903
step	O	O:0.999726
is	O	O:0.999995
still	O	O:0.999854
pretty	O	O:0.999910
slow	O	O:0.999357
though	O	O:0.999596
.	O	O:0.999934
	
Currently	O	O:0.999464
I'm	O	O:0.999970
trying	O	O:0.999977
something	O	O:0.999887
like	O	O:0.997453
:	O	O:0.999979
#CODE	O	O:0.999817
	
A	O	O:0.999977
little	O	O:0.999453
unclear	O	O:0.999692
what	O	O:0.999845
you	O	O:0.999986
want	O	O:0.999983
,	O	O:0.999995
`	O	O:0.999995
applymap	B-API	B-API:0.996979
`	O	O:0.999969
is	O	O:0.999859
for	O	O:0.999986
a	O	O:0.999973
dataframe	B-API	O:0.958283
it	O	O:0.999952
doesn't	O	O:0.999963
make	O	O:0.999958
much	O	O:0.999940
sense	O	O:0.999954
to	O	O:0.999984
call	O	O:0.999876
`	O	O:0.999992
applymap	B-API	B-API:0.999041
`	O	O:0.999996
on	O	O:0.999976
a	O	O:0.999998
series	O	O:0.999953
when	O	O:0.999613
`	O	O:0.999998
apply	O	B-API:0.902347
`	O	O:0.999748
is	O	O:0.999863
specifically	O	O:0.999545
for	O	O:0.999992
this	O	O:0.999043
.	O	O:0.999820
	
You	O	O:0.999930
can	O	O:0.999979
get	O	O:1.000000
a	O	O:1.000000
df	O	O:0.999944
by	O	O:0.999994
using	O	O:0.999751
double	O	O:0.934792
square	O	O:0.996546
brackets	O	O:0.998003
:	O	O:0.999936
`	O	O:0.999976
pd.DataFrame	B-API	B-API:0.983376
(	O	O:0.999991
df	O	O:0.999306
[[	O	O:0.999752
'	O	O:0.999965
col	O	O:0.999825
']])	O	O:0.999459
.applymap	B-API	B-API:0.999714
(	O	O:0.999924
isnan	B-API	B-API:0.612501
)`	O	O:0.999702
	
Apply	O	O:0.999778
FROM_UNIXTIME	O	O:0.996550
on	O	O:0.999977
column	O	O:0.999949
,	O	O:0.999997
c	O	O:0.999851
	
If	O	O:0.999961
you	O	O:0.999983
want	O	O:0.999964
sequential	O	O:0.999562
index	O	O:0.999941
,	O	O:0.999997
you	O	O:0.999991
can	O	O:0.999990
apply	O	O:0.980843
`	O	O:0.999923
reset_index	B-API	B-API:0.999649
(	O	O:0.999992
drop=True	O	O:0.999873
)`	O	O:0.999819
to	O	O:0.999995
the	O	O:0.999998
result	O	O:0.999730
.	O	O:0.999927
	
the	O	O:0.999970
code	O	O:0.999559
below	O	O:0.999891
perfectly	O	O:0.999935
fine	O	O:0.999278
,	O	O:0.999976
but	O	O:0.999975
i	O	O:0.999985
need	O	O:0.999990
to	O	O:0.999999
create	O	O:0.999998
a	O	O:0.999984
function	O	O:0.999956
that	O	O:0.999969
will	O	O:0.999976
do	O	O:0.999999
that	O	O:0.999975
for	O	O:0.999998
me	O	O:0.999927
rather	O	O:0.999884
than	O	O:0.999906
creating	O	O:0.999916
lambda	O	O:0.999802
functions	O	O:0.999775
for	O	O:0.999984
every	O	O:0.999965
block	O	O:0.999927
of	O	O:0.999992
columns	O	O:0.999920
that	O	O:0.999980
i	O	O:0.999999
like	O	O:0.999983
to	O	O:0.999993
merge	O	O:0.896295
.	O	O:0.999799
	
(	O	O:0.999934
I	O	O:0.999995
still	O	O:0.999979
have	O	O:0.999960
other	O	O:0.999984
similar	O	O:0.999973
columns	O	O:0.999944
that	O	O:0.999939
i	O	O:0.999999
like	O	O:0.999990
to	O	O:0.999994
apply	O	O:0.961472
the	O	O:0.999954
same	O	O:0.999653
logic	O	O:0.999916
on	O	O:0.999998
them	O	O:0.999798
.	O	O:0.999982
)	O	O:0.999980
#CODE	O	O:0.999472
	
I	O	O:0.999968
don't	O	O:0.999960
get	O	O:0.999900
how	O	O:0.999994
I	O	O:0.999997
can	O	O:0.999979
use	O	O:0.999930
groupby	B-API	B-API:0.995713
and	O	O:0.999966
apply	O	O:0.752557
some	O	O:0.999643
sort	O	O:0.998812
of	O	O:0.999997
concatenation	O	O:0.999810
of	O	O:0.999999
the	O	O:0.999990
strings	O	O:0.999594
in	O	O:0.999988
the	O	O:0.999998
column	O	O:0.999579
"	O	O:0.999996
text	O	O:0.997915
"	O	O:0.999967
.	O	O:0.999570
	
Any	O	O:0.999864
help	O	O:0.998746
appreciated	O	O:0.999378
!	O	O:0.999842
	
You	O	O:0.999878
can	O	O:0.999905
groupby	B-API	B-API:0.688369
the	O	O:0.999961
`'	O	O:0.999753
name	O	O:0.999752
'`	O	O:0.999928
and	O	O:0.999988
`'	O	O:0.999958
month	O	O:0.995386
'`	O	O:0.999985
columns	O	O:0.999558
,	O	O:0.999999
then	O	O:0.999960
call	O	O:0.999830
`	O	O:0.999998
transform	O	B-API:0.989404
`	O	O:0.999978
which	O	O:0.999551
will	O	O:0.999986
return	O	O:0.999982
data	O	O:0.999978
aligned	O	O:0.999918
to	O	O:0.999993
the	O	O:0.999999
original	O	O:0.999531
df	O	O:0.999788
and	O	O:0.999996
apply	O	O:0.790019
a	O	O:0.999882
lambda	O	O:0.998303
where	O	O:0.999910
we	O	O:0.999978
`	O	O:0.999998
join	O	B-API:0.988847
`	O	O:0.999992
the	O	O:0.999992
text	O	O:0.999812
entries	O	O:0.997443
:	O	O:0.999952
#CODE	O	O:0.999942
	
EDIT	O	O:0.999786
actually	O	O:0.999958
I	O	O:0.999984
can	O	O:0.999992
just	O	O:0.999975
call	O	O:0.999729
`	O	O:0.999987
apply	O	B-API:0.998203
`	O	O:0.999907
and	O	O:0.999967
then	O	O:0.999896
`	O	O:0.999989
reset_index	B-API	B-API:0.999577
`	O	O:0.999881
:	O	O:0.999881
#CODE	O	O:0.999908
	
I	O	O:0.999975
have	O	O:0.999970
been	O	O:0.999037
messing	O	O:0.999848
around	O	O:0.999625
with	O	O:0.999528
groupby	B-API	B-API:0.991384
/	O	O:0.999962
transform	O	B-API:0.880367
/	O	O:0.999851
apply	O	B-API:0.858423
but	O	O:0.999086
haven't	O	O:0.998154
gotten	O	O:0.999866
anything	O	O:0.999967
to	O	O:0.999988
work	O	O:0.999996
so	O	O:0.999990
far	O	O:0.999911
.	O	O:0.999930
	
If	O	O:0.999919
I	O	O:0.999957
groupby	B-API	B-API:0.956594
and	O	O:0.999982
then	O	O:0.999538
shift	O	O:0.572944
,	O	O:0.999984
it	O	O:0.999984
shifts	O	O:0.999924
each	O	O:0.999937
group	O	O:0.998935
giving	O	O:0.999912
the	O	O:0.999978
output	O	O:0.999219
of	O	O:0.999811
:	O	O:0.999881
#CODE	O	O:0.999935
	
Is	O	O:0.999984
there	O	O:0.999965
anyway	O	O:0.999990
to	O	O:0.999997
randomly	O	O:0.999996
apply	O	O:0.962706
changes	O	O:0.999666
of	O	O:0.999988
stings	O	O:0.999952
by	O	O:0.999992
row	O	O:0.999982
to	O	O:0.999986
a	O	O:1.000000
Pandas	O	O:0.999915
data	O	O:0.999953
frame	O	O:0.999985
.	O	O:0.999942
	
Pandas	O	O:0.999076
use	O	O:0.999741
groupby	B-API	B-API:0.996634
to	O	O:0.999975
apply	O	O:0.957299
a	O	O:0.999986
different	O	O:0.995246
function	O	O:0.999904
for	O	O:0.999993
each	O	O:0.999934
value	O	O:0.999933
of	O	O:0.999989
the	O	O:0.999906
groupby	B-API	B-API:0.941306
variable	O	O:0.999452
	
I'd	O	O:0.999985
like	O	O:0.999971
to	O	O:0.999986
use	O	O:0.999989
groupby	B-API	B-API:0.998503
,	O	O:0.999905
but	O	O:0.999974
instead	O	O:0.999986
of	O	O:0.999998
applying	O	O:0.999858
the	O	O:0.999995
same	O	O:0.999875
functions	O	O:0.999911
to	O	O:0.999996
each	O	O:0.999996
group	O	O:0.999503
,	O	O:0.999997
I	O	O:0.999997
want	O	O:0.999982
to	O	O:0.999987
specify	O	O:0.999969
which	O	O:0.999719
function	O	O:0.999950
to	O	O:0.999997
apply	O	O:0.982589
to	O	O:0.999871
which	O	O:0.999994
group	O	O:0.999401
value	O	O:0.999922
.	O	O:0.999818
	
I'm	O	O:0.999947
providing	O	O:0.999953
a	O	O:0.999991
very	O	O:0.999426
simple	O	O:0.999889
example	O	O:0.999945
here	O	O:0.999860
to	O	O:0.999994
illustrate	O	O:0.999989
the	O	O:0.999984
point	O	O:0.999417
,	O	O:0.999991
but	O	O:0.999981
in	O	O:0.999982
reality	O	O:0.999912
there	O	O:0.999838
are	O	O:0.999997
many	O	O:0.999987
values	O	O:0.999804
of	O	O:0.999992
my	O	O:0.999914
groupby	B-API	B-API:0.808492
variable	O	O:0.999692
,	O	O:0.999897
and	O	O:0.999999
my	O	O:0.999961
functions	O	O:0.999393
are	O	O:0.999966
all	O	O:0.999960
user-defined	O	O:0.996749
and	O	O:0.999917
fairly	O	O:0.999552
complex	O	O:0.996450
--	O	O:0.999991
so	O	O:0.999950
solutions	O	O:0.999973
that	O	O:0.999938
involve	O	O:0.999980
selecting	O	O:0.999923
each	O	O:0.999723
group	O	O:0.999893
separately	O	O:0.999948
or	O	O:0.999991
apply	O	O:0.532188
the	O	O:0.999992
same	O	O:0.999731
functions	O	O:0.999911
to	O	O:0.999994
all	O	O:0.999999
groups	O	O:0.999044
will	O	O:0.999802
not	O	O:0.999994
be	O	O:0.999997
practical	O	O:0.999123
.	O	O:0.999592
	
(	O	O:0.999972
Answers	O	O:0.999816
of	O	O:0.999996
that	O	O:0.999874
sort	O	O:0.999876
were	O	O:0.999976
provided	O	O:0.999672
to	O	O:0.999998
this	O	O:0.999999
very	O	O:0.999927
similar	O	O:0.999782
question	O	O:0.999332
:	O	O:0.999986
how	O	O:0.999989
to	O	O:0.999998
apply	O	O:0.998775
different	O	O:0.999709
functions	O	O:0.999700
to	O	O:0.999992
each	O	O:0.999998
group	O	O:0.999290
of	O	O:0.999995
pandas	O	O:0.999101
groupby	B-API	B-API:0.944928
?	O	O:0.999815
but	O	O:0.999943
they	O	O:0.999945
don't	O	O:0.999981
address	O	O:0.999809
my	O	O:0.999983
question	O	O:0.998911
)	O	O:0.999978
#CODE	O	O:0.999241
	
This	O	O:0.999703
makes	O	O:0.999823
sense	O	O:0.999653
,	O	O:0.999972
but	O	O:0.999978
how	O	O:0.999983
do	O	O:0.999990
I	O	O:0.999999
specify	O	O:0.999789
function_map	O	O:0.983889
so	O	O:0.999984
that	O	O:0.999919
it	O	O:0.999999
contains	O	O:0.999936
functions	O	O:0.999855
in	O	O:0.999961
valid	O	O:0.999699
python	O	O:0.998900
syntax	O	O:0.999815
?	O	O:0.999919
	
Or	O	O:0.999970
,	O	O:0.999994
alternatively	O	O:0.999947
,	O	O:0.999997
if	O	O:0.999992
I	O	O:0.999998
store	O	O:0.999882
the	O	O:0.999988
names	O	O:0.999843
of	O	O:0.999998
the	O	O:0.999993
functions	O	O:0.999986
as	O	O:0.999989
strings	O	O:0.999331
,	O	O:0.999994
how	O	O:0.999993
do	O	O:0.999976
I	O	O:1.000000
then	O	O:0.999986
pass	O	O:0.999992
them	O	O:0.999986
as	O	O:0.999997
functions	O	O:0.999873
to	O	O:0.999974
apply	O	O:0.927279
?	O	O:0.999710
	
i.e.	O	O:0.999808
to	O	O:0.999984
compute	O	O:0.999967
the	O	O:0.999999
value	O	O:0.999981
of	O	O:0.999992
C	O	O:0.999871
I	O	O:0.999998
need	O	O:0.999937
the	O	O:0.999932
previously	O	O:0.999826
computed	O	O:0.999940
value	O	O:0.999984
of	O	O:0.999953
C	O	O:0.998930
.	O	O:0.999918
	
This	O	O:0.999782
can	O	O:0.999963
be	O	O:1.000000
done	O	O:0.999993
by	O	O:0.999980
a	O	O:0.999995
simple	O	O:0.993590
for	O	O:0.999964
loop	O	O:0.997955
,	O	O:0.999963
but	O	O:0.999974
I	O	O:0.999980
would	O	O:0.999998
like	O	O:0.999964
to	O	O:0.999998
use	O	O:0.999985
map	O	B-API:0.933672
,	O	O:0.999992
apply	O	O:0.590897
or	O	O:0.999979
some	O	O:0.999515
other	O	O:0.999995
pandas	O	O:0.999724
functionality	O	O:0.999656
.	O	O:0.999711
	
Can	O	O:0.999942
this	O	O:0.999912
be	O	O:0.999996
done	O	O:0.999940
i	O	O:0.999972
a	O	O:0.999997
simple	O	O:0.998301
manner	O	O:0.999485
?	O	O:0.999915
	
Thanks	O	O:0.998228
@USER	O	O:0.999463
Paulo	O	O:0.999459
-	O	O:0.999972
Is	O	O:0.999993
there	O	O:0.999992
a	O	O:0.999999
way	O	O:0.999926
of	O	O:0.999987
specifying	O	O:0.999504
the	O	O:0.999996
size	O	O:0.999863
of	O	O:0.999977
the	O	O:0.999980
title	O	O:0.999975
when	O	O:0.999827
it	O	O:0.999979
is	O	O:0.999999
inside	O	O:0.999686
the	O	O:0.999826
df.plot	B-API	B-API:0.995632
(	O	O:0.999972
title=MyTitle	O	O:0.999677
)	O	O:0.999975
.	O	O:0.999837
	
if	O	O:0.999970
I	O	O:0.999998
move	O	O:0.999793
the	O	O:0.999648
plt.title	B-API	B-API:0.996971
(	O	O:0.999977
MyTitle	O	O:0.999743
,	O	O:0.999991
size=20	O	O:0.999535
)	O	O:0.999997
outside	O	O:0.999847
of	O	O:0.999987
the	O	O:0.999921
PLOT	O	O:0.999839
brackets	O	O:0.999964
then	O	O:0.999665
in	O	O:1.000000
my	O	O:0.999981
for	O	O:0.999977
loop	O	O:0.999632
it	O	O:0.999966
creates	O	O:0.999810
a	O	O:0.999997
title	O	O:0.999804
above	O	O:0.999978
every	O	O:0.999684
subplot	O	O:0.927664
and	O	O:0.999984
I	O	O:0.999988
don't	O	O:0.999900
want	O	O:0.999703
that	O	O:0.999731
.	O	O:0.999984
	
I	O	O:0.999989
want	O	O:0.999991
a	O	O:0.999980
single	O	O:0.999628
title	O	O:0.999964
for	O	O:0.999994
a	O	O:0.999997
group	O	O:0.994770
of	O	O:0.999988
subplots	O	O:0.996008
-	O	O:0.999993
but	O	O:0.999975
I	O	O:0.999990
don't	O	O:0.999978
know	O	O:0.999622
how	O	O:0.999992
to	O	O:0.999989
apply	O	O:0.982644
the	O	O:0.999808
size	O	O:0.999542
property	O	O:0.999971
when	O	O:0.999902
it's	O	O:0.999930
in	O	O:0.999998
the	O	O:0.999987
brackets	O	O:0.999704
plot	O	O:0.991745
(	O	O:0.999996
title=MyTitle	O	O:0.999840
)	O	O:0.999965
.	O	O:0.999837
	
I	O	O:0.999944
can	O	O:0.999994
tell	O	O:0.999959
you	O	O:0.999998
from	O	O:0.999976
experience	O	O:0.999959
that	O	O:0.999991
this	O	O:0.999994
will	O	O:0.999992
need	O	O:0.999989
to	O	O:0.999998
be	O	O:1.000000
performed	O	O:0.999848
in	O	O:0.999966
some	O	O:0.999959
kind	O	O:0.999967
of	O	O:0.999973
for	O	O:0.999939
loop	O	O:0.999531
/	O	O:0.999234
apply	O	B-API:0.879616
method	O	O:0.998193
.	O	O:0.999449
	
As	O	O:0.999973
there	O	O:0.999912
are	O	O:0.999996
no	O	O:0.999994
exact	O	O:0.999961
matches	O	O:0.999887
you	O	O:0.999996
have	O	O:0.999982
to	O	O:0.999999
find	O	O:0.999999
the	O	O:0.999988
appropriate	O	O:0.999970
index	O	O:0.999985
value	O	O:0.999994
to	O	O:0.999996
set	O	O:0.999997
the	O	O:0.999995
new	O	O:0.999974
column	O	O:0.999955
values	O	O:0.999921
,	O	O:0.999995
I	O	O:0.999996
would	O	O:0.999967
use	O	O:0.999840
`	O	O:0.999946
numpy.searchsorted	B-API	B-API:0.994772
`	O	O:0.999994
or	O	O:0.999983
you	O	O:0.999994
could	O	O:0.999985
use	O	O:0.999999
a	O	O:0.999982
filter	O	O:0.972006
,	O	O:0.999985
in	O	O:0.999937
`	O	O:0.999975
0.15.1	O	O:0.998959
`	O	O:0.999996
I	O	O:0.999989
think	O	O:0.999991
you	O	O:0.999899
can	O	O:0.999983
do	O	O:1.000000
some	O	O:0.999983
fancy	O	O:0.999827
filtering	O	O:0.999658
if	O	O:0.999933
you	O	O:0.999996
pass	O	O:0.999807
a	O	O:0.999987
range	O	O:0.995897
but	O	O:0.999913
not	O	O:0.999970
sure	O	O:0.999913
it	O	O:0.999993
applies	O	O:0.999962
to	O	O:0.999993
dates	O	O:0.999764
,	O	O:0.999993
worth	O	O:0.999966
a	O	O:0.999991
try	O	O:0.999639
though	O	O:0.999769
.	O	O:0.999959
	
I	O	O:0.999986
want	O	O:0.999973
to	O	O:0.999871
apply	O	O:0.995109
this	O	O:0.998962
function	O	O:0.999930
on	O	O:0.999999
my	O	O:0.999998
data	O	O:0.999965
,	O	O:0.999998
stored	O	O:0.999764
in	O	O:0.999998
a	O	O:0.999999
data	O	O:0.999918
frame	O	O:0.999989
.	O	O:0.999942
	
However	O	O:0.999697
,	O	O:0.999998
the	O	O:0.999998
data	O	O:0.999941
frame	O	O:0.999996
consists	O	O:0.999981
many	O	O:0.999963
experiment	O	O:0.999705
subjects	O	O:0.999759
and	O	O:0.999985
4	O	O:0.999981
experiment	O	O:0.999285
conditions	O	O:0.999669
,	O	O:0.999995
while	O	O:0.999984
the	O	O:0.999984
outlier	O	O:0.999598
detection	O	O:0.997941
function	O	O:0.999942
should	O	O:0.999975
be	O	O:0.999999
applied	O	O:0.999951
on	O	O:0.999955
the	O	O:0.999987
level	O	O:0.999391
and	O	O:0.999990
for	O	O:0.999995
each	O	O:0.993004
subject	O	O:0.998437
+	O	O:0.999979
trialcode	O	O:0.998857
.	O	O:0.999863
	
Is	O	O:0.999986
there	O	O:0.999983
a	O	O:0.999995
way	O	O:0.999913
to	O	O:0.999974
apply	O	O:0.990581
this	O	O:0.998978
function	O	O:0.999933
on	O	O:0.999998
groups	O	O:0.999878
of	O	O:0.999992
subject+trialcode	O	O:0.997991
?	O	O:0.999972
	
Groupby	B-API	O:0.578135
and	O	O:0.999966
apply	O	B-API:0.800220
`	O	O:0.999104
.mean	B-API	B-API:0.999763
`	O	O:0.999997
multiplying	O	O:0.999499
by	O	O:0.999801
30	O	O:0.998161
:	O	O:0.999780
#CODE	O	O:0.999765
	
My	O	O:0.999942
problem	O	O:0.997813
is	O	O:0.999990
that	O	O:0.999583
I'm	O	O:0.999991
having	O	O:0.999869
trouble	O	O:0.999541
getting	O	O:0.999838
pandas	O	O:0.999883
to	O	O:0.999998
create	O	O:0.999998
a	O	O:0.999999
date	O	O:0.999779
column	O	O:0.999956
which	O	O:0.999972
I	O	O:0.999995
can	O	O:0.999999
then	O	O:0.999985
apply	O	O:0.993570
a	O	O:0.999986
timedelta	O	O:0.909633
to	O	O:0.999944
.	O	O:0.999985
	
Here's	O	O:0.999533
my	O	O:0.999953
offending	O	O:0.999331
line	O	O:0.997131
:	O	O:0.999947
#CODE	O	O:0.999858
	
Yes	O	O:0.999446
,	O	O:0.999998
this	O	O:0.999675
is	O	O:0.999995
the	O	O:0.999980
output	O	O:0.999769
I	O	O:0.999995
want	O	O:0.999970
to	O	O:0.999964
have	O	O:0.999991
.	O	O:0.999950
	
However	O	O:0.999860
,	O	O:0.999988
I	O	O:0.999998
want	O	O:0.999975
to	O	O:0.999909
apply	O	O:0.994004
this	O	O:0.999163
procedure	O	O:0.999990
several	O	O:0.999962
times	O	O:0.999873
with	O	O:0.999990
different	O	O:0.999968
filter	O	O:0.998574
criteria	O	O:0.999784
to	O	O:0.999978
df1	O	O:0.999923
.	O	O:0.999853
	
Using	O	O:0.999766
the	O	O:0.999927
above	O	O:0.999818
code	O	O:0.999668
snippet	O	O:0.999935
would	O	O:0.999980
overwrite	O	O:0.999950
older	O	O:0.999975
inserted	O	O:0.999815
values	O	O:0.999293
in	O	O:0.999847
'	O	O:0.999998
eins	O	O:0.999255
'	O	O:0.999988
everytime	O	O:0.999944
with	O	O:0.999591
NaN	O	O:0.991053
.	O	O:0.999892
	
Therefor	O	O:0.999365
I	O	O:0.999991
look	O	O:0.999718
for	O	O:0.999954
joining	O	O:0.998663
only	O	O:0.999926
those	O	O:0.999999
rows	O	O:0.999883
of	O	O:0.999985
df1	O	O:0.999861
,	O	O:0.999996
which	O	O:0.999943
fulfill	O	O:0.999065
the	O	O:0.999995
filter	O	O:0.989989
criteria	O	O:0.999287
.	O	O:0.999926
	
When	O	O:0.999722
you	O	O:0.999994
apply	O	O:0.979010
a	O	O:0.999960
function	O	O:0.999291
on	O	O:0.999990
the	O	O:0.999981
groupby	B-API	B-API:0.955119
,	O	O:0.999971
in	O	O:0.999997
your	O	O:0.999944
example	O	O:0.999844
`	O	O:0.999984
df.groupby	B-API	B-API:0.998457
(	O	O:0.999992
...	O	O:0.999507
)	O	O:0.999919
.agg	B-API	B-API:0.999399
(	O	O:0.999965
...	O	O:0.999487
)`	O	O:0.987903
(	O	O:0.999858
but	O	O:0.999997
this	O	O:0.999927
can	O	O:0.999996
also	O	O:0.999999
be	O	O:0.999999
`	O	O:0.999992
transform	O	B-API:0.980038
`	O	O:0.999985
,	O	O:0.999809
`	O	O:0.999996
apply	O	B-API:0.981814
`	O	O:0.999952
,	O	O:0.999002
`	O	O:0.999999
mean	O	O:0.992499
`	O	O:0.999989
,	O	O:0.999992
...	O	O:0.999941
)	O	O:0.999990
,	O	O:0.999997
you	O	O:0.999992
combine	O	O:0.999880
the	O	O:0.999999
result	O	O:0.999979
of	O	O:0.999996
applying	O	O:0.999900
the	O	O:0.999920
function	O	O:0.999820
to	O	O:0.999990
the	O	O:1.000000
different	O	O:0.999970
groups	O	O:0.999891
together	O	O:0.999684
in	O	O:0.999993
one	O	O:0.999970
dataframe	B-API	O:0.987849
(	O	O:0.999991
the	O	O:0.999983
apply	O	B-API:0.903795
and	O	O:0.999972
combine	O	O:0.999697
step	O	O:0.999946
of	O	O:0.999995
the	O	O:0.999919
'	O	O:0.999969
split-apply-combine	O	O:0.911919
'	O	O:0.999993
paradigm	O	O:0.999953
of	O	O:0.999982
groupby	B-API	B-API:0.990034
)	O	O:0.999967
.	O	O:0.999128
	
So	O	O:0.999993
the	O	O:0.999995
result	O	O:0.999919
of	O	O:0.999996
this	O	O:0.999811
will	O	O:0.999989
always	O	O:0.999994
be	O	O:0.999998
again	O	O:0.999916
a	O	O:0.999962
DataFrame	B-API	O:0.916079
(	O	O:0.999983
or	O	O:0.999997
a	O	O:0.999991
Series	O	O:0.999879
depending	O	O:0.999889
on	O	O:0.999993
the	O	O:0.999986
applied	O	O:0.999465
function	O	O:0.999681
)	O	O:0.999964
.	O	O:0.999868
	
Now	O	O:0.999965
you	O	O:0.999985
can	O	O:0.999991
apply	O	O:0.986541
the	O	O:0.999964
condition	O	O:0.999707
like	O	O:0.999962
this	O	O:0.999650
:	O	O:0.999984
#CODE	O	O:0.999843
	
You	O	O:0.999958
need	O	O:0.999919
to	O	O:0.999991
`	O	O:1.000000
apply	O	B-API:0.969832
`	O	O:0.999996
your	O	O:0.998655
logic	O	O:0.999943
to	O	O:0.999998
each	O	O:0.999975
row	O	O:0.999961
,	O	O:0.999997
like	O	O:0.999967
this	O	O:0.999404
:	O	O:0.999984
#CODE	O	O:0.999879
	
This	O	O:0.999458
works	O	O:0.999883
,	O	O:0.999990
except	O	O:0.999940
that	O	O:0.999786
it's	O	O:0.999993
very	O	O:0.999953
slow	O	O:0.999726
,	O	O:0.999998
presumably	O	O:0.999969
due	O	O:0.999930
to	O	O:0.999973
the	O	O:0.999998
nested	O	O:0.997306
`	O	O:0.999985
apply	O	B-API:0.973531
`	O	O:0.999833
calls	O	O:0.981471
:	O	O:0.999998
one	O	O:0.999927
on	O	O:0.999996
each	O	O:0.999922
group	O	O:0.999169
,	O	O:0.999989
and	O	O:0.999997
then	O	O:0.999963
one	O	O:0.999997
for	O	O:0.999998
each	O	O:0.999882
column	O	O:0.999704
in	O	O:0.999994
each	O	O:0.999795
group	O	O:0.997528
.	O	O:0.999911
	
I	O	O:0.999931
tried	O	O:0.999906
getting	O	O:0.999338
rid	O	O:0.999866
of	O	O:0.999980
the	O	O:0.999963
second	O	O:0.999739
`	O	O:0.999987
apply	O	B-API:0.949783
`	O	O:0.999986
by	O	O:0.999877
computing	O	O:0.999948
quantiles	O	O:0.998820
for	O	O:0.999992
all	O	O:0.999996
columns	O	O:0.999938
at	O	O:0.999997
once	O	O:0.999491
,	O	O:0.999986
but	O	O:0.999957
got	O	O:0.999839
stuck	O	O:0.999885
trying	O	O:0.999867
to	O	O:0.999987
threshold	O	O:0.999999
each	O	O:0.999969
column	O	O:0.999992
by	O	O:0.999998
a	O	O:0.999998
different	O	O:0.998887
value	O	O:0.999712
.	O	O:0.999805
	
Is	O	O:0.999985
there	O	O:0.999991
a	O	O:0.999994
faster	O	O:0.999290
way	O	O:0.999958
to	O	O:0.999939
accomplish	O	O:0.999991
this	O	O:0.999848
procedure	O	O:0.999982
?	O	O:0.999981
	
I	O	O:0.999996
have	O	O:0.999995
data	O	O:0.999961
stored	O	O:0.999882
in	O	O:0.999991
a	O	O:0.999975
DataFrameGroupBy	B-API	B-API:0.950840
object	O	O:0.999113
.	O	O:0.999662
	
Therefore	O	O:0.999867
,	O	O:0.999992
I	O	O:0.999990
would	O	O:0.999996
like	O	O:0.999962
to	O	O:0.999999
apply	O	O:0.982241
the	O	O:0.999789
function	O	O:0.999718
to	O	O:0.999994
the	O	O:1.000000
entire	O	O:0.999857
column	O	O:0.999857
.	O	O:0.999950
	
Also	O	O:0.999643
,	O	O:0.999995
the	O	O:0.999982
`	O	O:0.999967
apply	O	B-API:0.997630
`	O	O:0.999980
method	O	O:0.999835
of	O	O:0.999996
a	O	O:0.999971
GroupBy	B-API	B-API:0.586970
object	O	O:0.999825
doesnt	O	O:0.999932
have	O	O:0.999978
the	O	O:0.999991
`	O	O:0.999991
axis	O	O:0.996153
`	O	O:0.999994
keyword	O	O:0.999503
,	O	O:0.999996
die	O	O:0.999695
`	O	O:0.999986
apply	O	B-API:0.996726
`	O	O:0.999973
method	O	O:0.999789
of	O	O:0.999995
a	O	O:0.999977
DataFrame	B-API	O:0.991643
does	O	O:0.999088
.	O	O:0.999948
	
@USER	O	O:0.998352
:	O	O:0.999965
I	O	O:0.999998
think	O	O:0.999966
I	O	O:0.999994
read	O	O:0.999133
in	O	O:0.999940
the	O	O:0.999980
linked	O	O:0.999617
stackoverflow	O	O:0.999376
question	O	O:0.999934
that	O	O:0.999814
`	O	O:0.999998
axis	O	O:0.997779
`	O	O:0.999980
has	O	O:0.999848
been	O	O:0.999901
added	O	O:0.999930
to	O	O:0.999984
the	O	O:0.999998
`	O	O:0.999980
apply	O	B-API:0.996302
`	O	O:0.999987
method	O	O:0.999745
of	O	O:0.999996
the	O	O:0.999889
`	O	O:0.999976
GroupBy	B-API	B-API:0.961214
`	O	O:0.999950
object	O	O:0.998418
.	O	O:0.999922
	
But	O	O:0.999975
this	O	O:0.999669
is	O	O:0.999984
obviously	O	O:0.999860
not	O	O:0.999987
the	O	O:0.999997
case	O	O:0.999931
,	O	O:0.999998
given	O	O:0.999803
the	O	O:0.999993
error	O	O:0.999909
message	O	O:0.999849
I	O	O:0.999998
get	O	O:0.999997
back	O	O:0.999498
from	O	O:0.999969
the	O	O:0.999961
Python	O	O:0.998919
console	O	O:0.999671
.	O	O:0.999893
	
You	O	O:0.999931
could	O	O:0.999962
set	O	O:0.999968
`	O	O:0.999999
files	O	O:0.997551
`	O	O:0.999998
as	O	O:0.999924
the	O	O:0.999986
index	O	O:0.999679
in	O	O:0.999907
`	O	O:0.999993
df1	O	O:0.991627
`	O	O:0.999984
and	O	O:0.999992
then	O	O:0.999969
apply	O	O:0.943467
a	O	O:0.999909
function	O	O:0.994498
which	O	O:0.999936
uses	O	O:0.999075
`	O	O:0.999979
loc	O	B-API:0.976746
`	O	O:0.999994
to	O	O:0.999969
look	O	O:0.999991
up	O	O:0.999966
the	O	O:0.999964
`	O	O:0.999983
pkid	O	O:0.977743
`	O	O:0.999998
value	O	O:0.999965
corresponding	O	O:0.999728
to	O	O:0.999915
the	O	O:0.999991
index	O	O:0.997863
:	O	O:0.999968
#CODE	O	O:0.999950
	
A	O	O:0.999331
faster	O	O:0.998453
method	O	O:0.999918
than	O	O:0.999542
@USER	O	O:0.999778
'	O	O:0.999982
s	O	O:0.999736
is	O	O:0.999993
to	O	O:0.999957
use	O	O:0.999996
`	O	O:0.999811
map	O	B-API:0.994393
`	O	O:0.999996
here	O	O:0.999309
because	O	O:0.999988
you	O	O:0.999994
have	O	O:0.999998
a	O	O:0.999997
unique	O	O:0.826030
index	O	O:0.999927
then	O	O:0.999946
this	O	O:0.999998
will	O	O:0.999980
be	O	O:0.999999
much	O	O:0.999815
faster	O	O:0.999709
than	O	O:0.999803
calling	O	O:0.999555
apply	O	B-API:0.557526
which	O	O:0.993682
is	O	O:0.999983
essentially	O	O:0.999978
a	O	O:0.999989
for	O	O:0.999574
loop	O	O:0.990480
:	O	O:0.999869
#CODE	O	O:0.999795
	
yep	O	O:0.999158
,	O	O:0.999997
this	O	O:0.999599
is	O	O:0.999988
MUCH	O	O:0.999093
better	O	O:0.999925
than	O	O:0.999924
using	O	O:0.999961
apply	O	B-API:0.700071
as	O	O:0.999861
its	O	O:0.999229
fully	O	O:0.999732
vectorized	O	O:0.998798
	
It	O	O:0.999774
is	O	O:0.999988
possible	O	O:0.999679
that	O	O:0.999922
pandas	O	O:0.999978
gets	O	O:0.999917
confused	O	O:0.999726
if	O	O:0.999999
your	O	O:0.999755
function	O	O:0.999930
sometimes	O	O:0.999900
returns	O	O:0.999823
a	O	O:0.999974
list	O	O:0.992895
and	O	O:0.999997
sometimes	O	O:0.999979
a	O	O:0.999996
single	O	O:0.999497
value	O	O:0.999945
,	O	O:0.999992
since	O	O:0.999991
different	O	O:0.999827
dtypes	B-API	B-API:0.915990
would	O	O:0.999924
be	O	O:0.999999
used	O	O:0.999956
for	O	O:0.999894
those	O	O:0.999910
two	O	O:0.999886
cases	O	O:0.999364
.	O	O:0.999897
	
It	O	O:0.999613
is	O	O:0.999989
probably	O	O:0.998624
better	O	O:0.999838
not	O	O:0.999964
to	O	O:0.999992
do	O	O:0.999997
it	O	O:0.999997
that	O	O:0.999887
way	O	O:0.999976
.	O	O:0.999902
	
The	O	O:0.999962
calling-twice	O	O:0.999079
behavior	O	O:0.999938
could	O	O:0.999943
be	O	O:0.999995
related	O	O:0.999928
to	O	O:0.999981
the	O	O:0.999998
issue	O	O:0.999615
described	O	O:0.999299
[	O	O:0.999992
here	O	O:0.999670
]	O	O:0.999664
(	O	O:0.999931
#URL	O	O:0.999767
)	O	O:0.999973
for	O	O:0.999940
`	O	O:0.999958
apply	O	B-API:0.998305
`	O	O:0.999752
:	O	O:0.999747
it	O	O:0.999993
calls	O	O:0.999931
the	O	O:0.999974
function	O	O:0.999866
twice	O	O:0.999964
on	O	O:0.999998
the	O	O:0.999996
first	O	O:0.999964
group	O	O:0.998650
in	O	O:0.999994
order	O	O:0.999941
to	O	O:0.999998
check	O	O:0.999986
whether	O	O:0.999978
the	O	O:0.999822
function	O	O:0.999806
mutates	O	O:0.998876
the	O	O:0.999998
existing	O	O:0.999771
data	O	O:0.999479
.	O	O:0.999917
	
The	O	O:0.999902
strangest	O	O:0.999680
thing	O	O:0.999653
is	O	O:0.999964
,	O	O:0.999968
im	O	O:0.999978
reuse	O	O:0.999808
this	O	O:0.999968
code	O	O:0.999948
all	O	O:0.999991
the	O	O:0.999995
time	O	O:0.999846
with	O	O:0.999964
no	O	O:0.999967
issues	O	O:0.999466
.	O	O:0.999887
	
I	O	O:0.999982
know	O	O:0.999833
apply	O	B-API:0.904220
and	O	O:0.999888
transform	O	O:0.692291
pass	O	O:0.997991
different	O	O:0.999972
packets	O	O:0.999942
of	O	O:0.999998
data	O	O:0.999953
such	O	O:0.999985
that	O	O:0.999980
it	O	O:0.999903
is	O	O:0.999995
quite	O	O:0.999855
hard	O	O:0.999905
to	O	O:0.999994
ascertain	O	O:0.999995
from	O	O:0.999553
print	O	O:0.999024
statements	O	O:0.999955
what	O	O:0.999142
is	O	O:0.999998
going	O	O:0.999513
on	O	O:0.999888
,	O	O:0.999950
but	O	O:0.999989
agh	O	O:0.998890
is	O	O:0.999985
fairly	O	O:0.998675
straightforward	O	O:0.999020
.	O	O:0.999748
	
Were	O	O:0.999823
you	O	O:0.999997
able	O	O:0.999995
to	O	O:0.999998
recreate	O	O:0.999993
the	O	O:0.999983
error	O	O:0.999665
?	O	O:0.999937
	
I	O	O:0.999951
cannot	O	O:0.999975
send	O	O:0.999745
the	O	O:0.999998
data	O	O:0.999985
frame	O	O:0.999998
to	O	O:0.999998
the	O	O:0.999999
function	O	O:0.999958
row	O	O:0.999993
by	O	O:0.999986
row	O	O:0.999937
because	O	O:0.999926
there	O	O:0.999836
is	O	O:0.999999
a	O	O:0.999998
rank	O	O:0.999097
by	O	O:0.999994
group	O	O:0.999088
aspect	O	O:0.996223
to	O	O:0.999981
the	O	O:0.999996
algorithm	O	O:0.999371
.	O	O:0.999877
	
So	O	O:0.999962
I	O	O:0.999998
have	O	O:0.999983
to	O	O:0.999994
send	O	O:0.999986
at	O	O:0.999997
least	O	O:0.999935
one	O	O:0.999999
group	O	O:0.999640
of	O	O:0.999999
data	O	O:0.999937
at	O	O:1.000000
a	O	O:0.999999
time	O	O:0.999788
to	O	O:0.999995
the	O	O:0.999992
function	O	O:0.999710
.	O	O:0.999884
	
I	O	O:0.999905
tried	O	O:0.999417
groupby.apply	B-API	B-API:0.999171
but	O	O:0.999756
there	O	O:0.999544
were	O	O:0.999984
unexpected	O	O:0.999826
results	O	O:0.999942
due	O	O:0.999865
to	O	O:0.999997
the	O	O:0.999999
apply	O	O:0.566439
calling	O	O:0.997660
the	O	O:0.999826
function	O	O:0.999971
twice	O	O:0.999964
on	O	O:0.999998
the	O	O:0.999995
first	O	O:0.999872
group	O	O:0.996181
.	O	O:0.999880
	
So	O	O:0.999970
now	O	O:0.999962
I	O	O:0.999997
am	O	O:0.999999
using	O	O:0.999886
a	O	O:0.999968
lambda	O	O:0.995770
like	O	O:0.999910
this	O	O:0.999611
.	O	O:0.999945
	
#CODE	O	O:0.998453
	
In	O	O:0.999962
the	O	O:0.999990
current	O	O:0.999513
implementation	O	O:0.999865
apply	O	O:0.629476
calls	O	O:0.999463
func	O	O:0.999263
twice	O	O:0.999629
on	O	O:0.999995
the	O	O:0.999990
first	O	O:0.999482
	
My	O	O:0.999912
recommendation	O	O:0.999278
would	O	O:0.999983
be	O	O:0.999999
to	O	O:0.999997
concat	O	B-API:0.503801
the	O	O:0.999994
list	O	O:0.999672
of	O	O:0.999997
dataframes	O	O:0.999892
using	O	O:0.999851
pd.concat	B-API	B-API:0.998157
.	O	O:0.998760
	
This	O	O:0.999897
will	O	O:0.999948
allow	O	O:0.999968
you	O	O:0.999994
to	O	O:0.999987
use	O	O:0.999998
the	O	O:0.999849
standard	O	O:0.998862
group-by	O	O:0.999703
/	O	O:0.999950
apply	O	B-API:0.739806
.	O	O:0.998751
	
In	O	O:0.999983
this	O	O:0.999940
example	O	O:0.999953
,	O	O:0.999993
multi_df	O	O:0.920734
is	O	O:0.999976
a	O	O:0.999974
MultiIndex	O	O:0.666909
which	O	O:0.999776
behaves	O	O:0.999976
like	O	O:0.999976
a	O	O:0.999999
standard	O	O:0.999756
data	O	O:0.999989
frame	O	O:0.999997
,	O	O:0.999999
only	O	O:0.999916
the	O	O:0.999960
indexing	O	O:0.998487
and	O	O:0.999995
group	O	O:0.999593
by	O	O:0.999819
is	O	O:0.999991
a	O	O:0.999951
little	O	O:0.998495
different	O	O:0.998034
:	O	O:0.999871
#CODE	O	O:0.999781
	
By	O	O:0.999650
"	O	O:0.999931
Finding	O	O:0.998916
it	O	O:0.999968
hard	O	O:0.999554
"	O	O:0.999989
I	O	O:0.999990
mean	O	O:0.999988
that	O	O:0.999893
strptime	O	O:0.998449
on	O	O:0.999991
the	O	O:0.999979
x	O	O:0.999784
[	O	O:0.999940
'	O	O:0.999998
datex	O	O:0.999596
']	O	O:0.999940
doesn't	O	O:0.999421
work	O	O:0.999787
because	O	O:0.999991
those	O	O:0.999937
are	O	O:0.999989
series	O	O:0.999354
and	O	O:0.999992
not	O	O:0.999983
values	O	O:0.998909
and	O	O:0.999975
I	O	O:0.999993
can't	O	O:0.999843
apply	O	O:0.626476
it	O	O:0.999941
to	O	O:0.999974
the	O	O:1.000000
x	O	O:0.999843
in	O	O:0.999944
"	O	O:0.999993
lambda	O	O:0.999771
x	O	O:0.999882
"	O	O:0.999975
or	O	O:0.999967
use	O	O:0.999873
%Y%M%d	O	O:0.998916
instead	O	O:0.999964
of	O	O:0.999973
%s	O	O:0.999589
.	O	O:0.999920
	
An	O	O:0.999918
example	O	O:0.999688
would	O	O:0.999984
be	O	O:0.999997
date1	O	O:0.999829
=	O	O:0.999528
datetime.datetime	O	O:0.936955
(	O	O:0.999883
2014	O	O:0.999572
,	O	O:0.999976
1	O	O:0.999944
,	O	O:0.999980
1	O	O:0.999877
)	O	O:0.999976
and	O	O:0.999978
date2	O	O:0.999315
=	O	O:0.999118
datetime.datetime	O	O:0.919408
(	O	O:0.999877
2014	O	O:0.999561
,	O	O:0.999975
1	O	O:0.999950
,	O	O:0.999982
3	O	O:0.999835
)	O	O:0.999966
.	O	O:0.999868
	
Well	O	O:0.999388
,	O	O:0.999990
since	O	O:0.999777
you're	O	O:0.999896
already	O	O:0.999995
using	O	O:0.999955
`	O	O:0.999861
apply	O	B-API:0.995636
`	O	O:0.999886
,	O	O:0.999844
you're	O	O:0.999980
dealing	O	O:0.998778
with	O	O:0.999981
two	O	O:0.999930
values	O	O:0.995202
(	O	O:0.999986
not	O	O:0.999998
columns	O	O:0.999948
)	O	O:0.999997
,	O	O:0.999998
so	O	O:0.999998
you	O	O:0.999985
can	O	O:0.999995
call	O	O:0.999986
the	O	O:0.999997
`	O	O:0.999885
date	O	O:0.825830
`	O	O:0.999993
method	O	O:0.999885
on	O	O:0.999989
each	O	O:0.997973
:	O	O:0.999970
#CODE	O	O:0.999861
	
python	O	O:0.997227
/	O	O:0.999981
numpy	O	O:0.997834
/	O	O:0.999976
pandas	O	O:0.999643
fastest	O	O:0.999827
way	O	O:0.999960
apply	O	O:0.736517
algorithm	O	O:0.998823
for	O	O:0.999984
expanding	O	O:0.997825
calculations	O	O:0.996159
	
In	O	O:0.999973
other	O	O:0.999945
words	O	O:0.999858
I'd	O	O:0.999995
like	O	O:0.999995
a	O	O:0.999981
function	O	O:0.999702
`	O	O:0.999990
f	O	O:0.999403
`	O	O:0.999996
so	O	O:0.999986
that	O	O:0.999986
I	O	O:0.999999
can	O	O:0.999995
apply	O	O:0.856966
`	O	O:0.999979
f	O	O:0.996700
`	O	O:0.999997
to	O	O:0.999986
a	O	O:1.000000
series	O	O:0.998886
(	O	O:0.999980
or	O	O:0.999999
multiple	O	O:0.999903
series	O	O:0.999985
)	O	O:0.999996
as	O	O:0.999998
well	O	O:0.999887
as	O	O:0.999998
applying	O	O:0.999070
`	O	O:0.999936
f	O	O:0.998296
`	O	O:0.999997
to	O	O:0.999979
a	O	O:1.000000
float	O	O:0.973975
(	O	O:0.999973
or	O	O:0.999998
multiple	O	O:0.999879
floats	O	O:0.999818
)	O	O:0.999974
,	O	O:0.999984
and	O	O:0.999997
ideally	O	O:0.999934
apply	O	B-API:0.693928
`	O	O:0.999919
f	O	O:0.995545
`	O	O:0.999997
to	O	O:0.999985
a	O	O:1.000000
combination	O	O:0.999845
of	O	O:0.999987
floats	O	O:0.999100
and	O	O:0.999986
series	O	O:0.999861
.	O	O:0.999461
	
However	O	O:0.999821
I	O	O:0.999979
am	O	O:0.999999
struggling	O	O:0.998312
to	O	O:0.999990
figure	O	O:0.999969
out	O	O:0.999968
how	O	O:0.999988
to	O	O:0.999996
apply	O	O:0.990348
one	O	O:0.999685
function	O	O:0.999672
`	O	O:0.999998
convertToMeters	O	O:0.994353
`	O	O:0.999998
to	O	O:0.999961
the	O	O:1.000000
first	O	O:0.999810
column	O	O:0.999714
and	O	O:0.999985
`	O	O:0.999998
convertToNewtons	O	O:0.971419
`	O	O:0.999995
for	O	O:0.999923
the	O	O:0.999979
second	O	O:0.998902
column	O	O:0.999556
.	O	O:0.999914
	
it	O	O:0.999969
will	O	O:0.999920
apply	O	O:0.850971
the	O	O:0.999980
respective	O	O:0.992317
function	O	O:0.999881
to	O	O:0.999994
each	O	O:0.999993
column	O	O:0.999469
and	O	O:0.999996
not	O	O:0.999996
just	O	O:0.999879
the	O	O:0.999996
desired	O	O:0.999495
column	O	O:0.999687
.	O	O:0.999944
	
Can	O	O:0.999872
you	O	O:0.999981
show	O	O:0.999834
how	O	O:0.999973
`	O	O:0.999997
convertToMeters	O	O:0.986278
`	O	O:0.999997
looks	O	O:0.999730
like	O	O:0.999907
?	O	O:0.999961
	
Probably	O	O:0.999916
you	O	O:0.999975
can	O	O:0.999971
write	O	O:0.999999
this	O	O:0.999935
function	O	O:0.999992
so	O	O:0.999998
that	O	O:0.999985
you	O	O:0.999995
can	O	O:0.999999
just	O	O:0.999998
do	O	O:0.999997
`	O	O:0.999995
df	O	O:0.998119
[	O	O:0.999969
'	O	O:0.999988
col_meters	O	O:0.998328
']	O	O:0.999961
=	O	O:0.999729
convertToMeters	O	O:0.997604
(	O	O:0.999988
df	O	O:0.999637
[	O	O:0.999856
'	O	O:0.999975
col	O	O:0.999904
'])`	O	O:0.999944
without	O	O:0.999150
using	O	O:0.999826
the	O	O:0.999382
apply	O	B-API:0.979397
.	O	O:0.998040
	
Sorry	O	O:0.999073
I	O	O:0.999954
was	O	O:0.999988
a	O	O:0.999967
little	O	O:0.998458
bit	O	O:0.999960
busy	O	O:0.999776
when	O	O:0.999425
writting	O	O:0.999957
this	O	O:0.999894
question	O	O:0.999380
.	O	O:0.999891
	
Data	O	O:0.999344
are	O	O:0.999978
correct	O	O:0.999756
now	O	O:0.999860
.	O	O:0.999952
	
Well	O	O:0.999286
I	O	O:0.999995
mean	O	O:0.999985
just	O	O:0.999865
to	O	O:1.000000
delete	O	O:0.999990
rows	O	O:0.999936
from	O	O:0.999939
groups	O	O:0.999834
and	O	O:0.999996
keep	O	O:0.999701
these	O	O:0.999957
groups	O	O:0.999720
as	O	O:0.999996
they	O	O:0.999840
are	O	O:0.999994
-	O	O:0.999992
I	O	O:0.999995
need	O	O:0.999988
to	O	O:0.999922
apply	O	O:0.989913
several	O	O:0.998512
filters	O	O:0.994513
and	O	O:0.999972
after	O	O:0.999986
each	O	O:0.997824
apply	O	B-API:0.898563
is	O	O:0.999909
needed	O	O:0.999467
new	O	O:0.999754
groupby	B-API	B-API:0.993568
.	O	O:0.999533
	
You	O	O:0.999969
just	O	O:0.999957
need	O	O:0.999989
to	O	O:0.999986
use	O	O:0.999997
`	O	O:0.999964
apply	O	B-API:0.963248
`	O	O:0.999976
on	O	O:0.999842
the	O	O:0.999986
`	O	O:0.999966
groupby	B-API	B-API:0.999740
`	O	O:0.999960
object	O	O:0.996388
.	O	O:0.999922
	
I	O	O:0.999957
modified	O	O:0.999988
your	O	O:0.999868
example	O	O:0.999979
data	O	O:0.999984
to	O	O:0.999997
make	O	O:0.999999
this	O	O:0.999990
a	O	O:0.999997
little	O	O:0.999824
more	O	O:0.999350
clear	O	O:0.996284
:	O	O:0.999966
#CODE	O	O:0.999679
	
Similarly	O	O:0.999920
if	O	O:0.999993
I	O	O:0.999999
create	O	O:0.999972
a	O	O:0.999997
column	O	O:0.999933
to	O	O:0.999997
store	O	O:0.999955
the	O	O:0.999980
int	O	O:0.999181
day	O	O:0.999972
value	O	O:0.999848
and	O	O:0.999998
then	O	O:0.999871
perform	O	O:0.999833
the	O	O:0.999990
apply	O	B-API:0.566887
then	O	O:0.997033
it	O	O:0.999991
works	O	O:0.999975
also	O	O:0.999471
:	O	O:0.999985
#CODE	O	O:0.999615
	
I	O	O:0.999987
guess	O	O:0.999949
you	O	O:0.999881
could	O	O:0.999978
easily	O	O:0.999998
turn	O	O:0.999911
this	O	O:0.999979
into	O	O:0.999957
a	O	O:0.999971
function	O	O:0.999554
to	O	O:0.999995
apply	O	O:0.981925
on	O	O:0.999964
a	O	O:0.999976
dataframe	B-API	O:0.997152
inplace	O	O:0.980650
.	O	O:0.999848
	
Please	O	O:0.999665
see	O	O:0.999981
edit	O	O:0.999245
in	O	O:0.999996
the	O	O:0.999990
answer	O	O:0.999932
to	O	O:0.999976
see	O	O:0.999998
the	O	O:0.999993
fix	O	O:0.998486
for	O	O:0.999997
this	O	O:0.999729
error	O	O:0.998654
(	O	O:0.999991
since	O	O:0.999936
you	O	O:0.999968
added	O	O:0.999998
more	O	O:0.999975
columns	O	O:0.999831
`	O	O:0.999995
transform	O	B-API:0.950914
`	O	O:0.999932
was	O	O:0.999876
being	O	O:0.999944
applied	O	O:0.999790
on	O	O:0.999932
a	O	O:0.999986
GroupbyDataframe	O	O:0.996603
and	O	O:0.999994
not	O	O:0.999985
on	O	O:0.999972
the	O	O:0.999989
Series	O	O:0.999622
)	O	O:0.999978
-	O	O:0.999989
all	O	O:0.999959
it	O	O:0.999985
takes	O	O:0.998159
is	O	O:0.999993
to	O	O:0.999993
pass	O	O:0.999992
name	O	O:0.999977
of	O	O:0.999996
the	O	O:0.999997
column	O	O:0.999868
after	O	O:0.999850
`	O	O:0.999966
groupby	B-API	B-API:0.999388
`	O	O:0.999994
to	O	O:0.999903
apply	O	O:0.968285
`	O	O:0.999929
transform	O	B-API:0.979241
`	O	O:0.999989
on	O	O:0.999812
.	O	O:0.999959
	
It	O	O:0.999962
seems	O	O:0.999943
I	O	O:0.999995
can	O	O:0.999993
apply	O	O:0.993098
some	O	O:0.999781
functions	O	O:0.999738
without	O	O:0.999911
problems	O	O:0.999792
to	O	O:0.999979
a	O	O:1.000000
DataFrame	B-API	O:0.951884
,	O	O:0.999983
but	O	O:0.999989
other	O	O:0.999973
give	O	O:0.999941
a	O	O:0.999978
Value	O	O:0.992726
Error	O	O:0.999108
.	O	O:0.999491
	
#CODE	O	O:0.998453
	
The	O	O:0.999970
first	O	O:0.999469
apply	O	B-API:0.569249
works	O	O:0.999600
fine	O	O:0.999382
,	O	O:0.999995
the	O	O:0.999989
second	O	O:0.999584
one	O	O:0.999984
generates	O	O:0.999836
a	O	O:0.999971
:	O	O:0.999778
	
I	O	O:0.999991
know	O	O:0.999960
I	O	O:0.999988
can	O	O:0.999993
generate	O	O:0.999943
the	O	O:0.999981
"	O	O:0.999951
max	O	B-API:0.794721
(	O	O:0.999980
df	O	O:0.999948
,	O	O:0.999984
0	O	O:0.999950
)"	O	O:0.999835
in	O	O:0.999950
other	O	O:0.999907
ways	O	O:0.997828
(	O	O:0.999989
e.g.	O	O:0.999981
by	O	O:0.999981
df	O	O:0.999658
[	O	O:0.999991
df	O	O:0.999876
0	O	O:0.999965
]=	O	O:0.999944
0	O	O:0.999770
)	O	O:0.999989
,	O	O:0.999975
so	O	O:0.999922
I'm	O	O:0.999948
not	O	O:0.999994
looking	O	O:0.999964
for	O	O:0.999997
a	O	O:0.999982
solution	O	O:0.997786
to	O	O:0.999997
this	O	O:0.999999
particular	O	O:0.999914
problem	O	O:0.999662
.	O	O:0.999898
	
Rather	O	O:0.999540
,	O	O:0.999953
I'm	O	O:0.999985
interested	O	O:0.999568
in	O	O:0.999984
why	O	O:0.999986
the	O	O:0.999994
apply	O	B-API:0.638110
above	O	O:0.997781
doesn't	O	O:0.999512
work	O	O:0.999660
.	O	O:0.999973
	
Actually	O	O:0.999739
it's	O	O:0.999901
quicker	O	O:0.999918
to	O	O:0.999990
convert	O	O:0.999764
the	O	O:0.999995
type	O	O:0.998627
to	O	O:0.999984
string	O	O:0.999988
and	O	O:0.999999
then	O	O:0.999944
convert	O	O:0.999752
the	O	O:0.999998
entire	O	O:0.999773
series	O	O:0.999985
to	O	O:0.999999
a	O	O:1.000000
datetime	O	O:0.984927
rather	O	O:0.999908
than	O	O:0.999915
calling	O	O:0.999821
apply	O	O:0.577247
on	O	O:0.999945
every	O	O:0.999179
value	O	O:0.999619
:	O	O:0.999930
#CODE	O	O:0.999866
	
How	O	O:0.999700
can	O	O:0.999919
i	O	O:0.999999
apply	O	O:0.974553
do_calcuations	O	O:0.988151
without	O	O:0.999609
loops	O	O:0.999659
like	O	O:0.999853
this	O	O:0.999872
.	O	O:0.999940
	
Loops	O	O:0.999685
like	O	O:0.999908
that	O	O:0.999663
is	O	O:0.999999
discourage	O	O:0.999159
in	O	O:0.999987
panda	O	O:0.999875
because	O	O:0.999971
slow	O	O:0.999358
,	O	O:0.999997
right	O	O:0.999761
?	O	O:0.999962
	
groupby	B-API	B-API:0.985364
these	O	O:0.999798
event	O	O:0.999447
numbers	O	O:0.999120
and	O	O:0.999993
apply	O	O:0.592022
`	O	O:0.999815
do_calculations	O	O:0.882265
`	O	O:0.999994
to	O	O:0.999966
each	O	O:0.999993
group	O	O:0.996762
.	O	O:0.999926
	
Apply	O	O:0.999422
vs	O	O:0.999962
transform	O	O:0.531162
on	O	O:0.999993
a	O	O:0.999995
group	O	O:0.985326
object	O	O:0.999711
	
In	O	O:0.999973
other	O	O:0.999951
words	O	O:0.999923
,	O	O:0.999989
I	O	O:0.999991
thought	O	O:0.999937
that	O	O:0.999813
transform	O	B-API:0.652273
is	O	O:0.999995
essentially	O	O:0.999962
a	O	O:0.999993
specific	O	O:0.999802
type	O	O:0.999730
of	O	O:0.999981
apply	O	B-API:0.951544
(	O	O:0.999964
the	O	O:0.999952
one	O	O:0.999975
that	O	O:0.999868
does	O	O:0.999972
not	O	O:0.999997
aggregate	O	O:0.727454
)	O	O:0.999925
.	O	O:0.999638
	
Where	O	O:0.999851
am	O	O:0.999979
I	O	O:0.999993
wrong	O	O:0.999911
?	O	O:0.999709
	
X	O	O:0.999501
and	O	O:0.999965
Y	O	O:0.999927
are	O	O:0.999986
actually	O	O:0.999993
pairs	O	O:0.999888
of	O	O:0.999984
coordinates	O	O:0.998612
and	O	O:0.999998
the	O	O:0.999961
function	O	O:0.999441
I	O	O:0.999973
would	O	O:0.999997
like	O	O:0.999966
to	O	O:0.999999
apply	O	O:0.760214
is	O	O:0.999944
the	O	O:0.999963
vincenty	O	O:0.999866
distance	O	O:0.999933
from	O	O:0.999895
the	O	O:0.999991
geopy	O	O:0.999020
package	O	O:0.999398
.	O	O:0.999759
	
And	O	O:0.999973
another	O	O:0.999671
problem	O	O:0.997495
:	O	O:0.999962
Even	O	O:0.999973
if	O	O:0.999997
I	O	O:0.999998
just	O	O:0.999990
want	O	O:0.999954
to	O	O:0.999981
apply	O	O:0.981873
the	O	O:0.999962
vincenty	O	O:0.998621
formula	O	O:0.999884
to	O	O:0.999990
the	O	O:1.000000
series	O	O:0.999878
in	O	O:0.999987
my	O	O:0.999996
dataframe	B-API	O:0.998874
,	O	O:0.999995
I	O	O:0.999997
receive	O	O:0.999893
an	O	O:0.999942
error	O	O:0.999729
message	O	O:0.995533
:	O	O:0.999929
#CODE	O	O:0.999758
	
The	O	O:0.999925
problem	O	O:0.997518
is	O	O:0.999996
that	O	O:0.999811
I	O	O:0.999998
have	O	O:0.999981
not	O	O:0.999955
clue	O	O:0.999964
how	O	O:0.999990
I	O	O:0.999991
get	O	O:0.999993
these	O	O:0.999739
errors	O	O:0.999616
.	O	O:0.999863
	
I	O	O:0.999940
can	O	O:0.999990
give	O	O:0.999981
four	O	O:0.999992
single	O	O:0.999940
values	O	O:0.999971
as	O	O:0.999996
coordinates	O	O:0.999620
to	O	O:0.999993
the	O	O:1.000000
vincenty	O	O:0.999623
formula	O	O:0.999912
or	O	O:0.999995
a	O	O:0.999997
list	O	O:0.998118
or	O	O:0.999996
a	O	O:0.999974
string	O	O:0.997406
and	O	O:0.999970
it	O	O:0.999988
will	O	O:0.999680
work	O	O:0.999889
.	O	O:0.999971
	
But	O	O:0.999939
the	O	O:0.999996
only	O	O:0.999883
way	O	O:0.999990
I	O	O:0.999995
can	O	O:0.999992
apply	O	O:0.834322
the	O	O:0.999911
formula	O	O:0.998112
to	O	O:0.999996
several	O	O:0.999998
entries	O	O:0.999362
is	O	O:0.999996
using	O	O:0.999934
lists	O	O:0.986178
.	O	O:0.998968
	
Gives	O	O:0.999664
you	O	O:0.999995
a	O	O:0.999998
generator	O	O:0.999871
with	O	O:0.999980
the	O	O:0.999992
values	O	O:0.999767
,	O	O:0.999990
which	O	O:0.999991
you	O	O:0.999977
can	O	O:0.999987
reshape	O	O:0.966181
and	O	O:0.999997
print	O	O:0.999916
as	O	O:0.999973
you	O	O:0.999929
need	O	O:0.999871
.	O	O:0.999967
	
Substitute	O	O:0.999522
operator.mul	O	O:0.963503
with	O	O:0.999934
the	O	O:0.999988
pertinent	O	O:0.998647
function	O	O:0.999956
you	O	O:0.999993
need	O	O:0.999989
to	O	O:0.999996
apply	O	O:0.944058
.	O	O:0.999496
	
IIUC	O	O:0.997892
,	O	O:0.999999
your	O	O:0.998998
function	O	O:0.999908
probably	O	O:0.999916
doesn't	O	O:0.999978
support	O	O:0.999908
sequences	O	O:0.999938
of	O	O:0.999993
strings	O	O:0.999820
as	O	O:0.999997
input	O	O:0.999897
,	O	O:0.999999
only	O	O:0.999873
strings	O	O:0.999236
.	O	O:0.999908
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999977
apply	O	B-API:0.978574
`	O	O:0.999979
to	O	O:0.999925
pass	O	O:0.999989
the	O	O:0.999993
values	O	O:0.999555
individually	O	O:0.997564
:	O	O:0.999983
#CODE	O	O:0.999782
	
It	O	O:0.999938
works	O	O:0.999824
for	O	O:0.999991
the	O	O:0.999985
first	O	O:0.999535
row	O	O:0.999965
if	O	O:0.999984
all	O	O:0.999995
the	O	O:0.999984
strings	O	O:0.997761
are	O	O:0.999983
inside	O	O:0.999979
one	O	O:0.999973
double	O	O:0.988431
quotes	O	O:0.999252
.	O	O:0.999771
	
But	O	O:0.999731
it	O	O:0.999979
doesn't	O	O:0.999961
apply	O	O:0.517053
for	O	O:0.999912
the	O	O:0.999852
third	O	O:0.997063
and	O	O:0.999993
second	O	O:0.999815
row	O	O:0.999782
if	O	O:0.999981
there're	O	O:0.999888
commas	O	O:0.999843
outside	O	O:0.999949
the	O	O:0.999941
quotes	O	O:0.990064
(	O	O:0.999997
single	O	O:0.999922
or	O	O:0.999994
double	O	O:0.985499
)	O	O:0.999972
	
I	O	O:0.999992
have	O	O:0.999990
a	O	O:0.999981
pandas	O	O:0.999801
DataFrame	B-API	O:0.999033
with	O	O:0.999957
a	O	O:0.999998
mix	O	O:0.999660
of	O	O:0.999988
numerical	O	O:0.958373
(	O	O:0.999991
float	O	O:0.995830
)	O	O:0.999887
and	O	O:0.999993
text	O	O:0.999902
columns	O	O:0.998939
.	O	O:0.999853
	
Some	O	O:0.999895
of	O	O:0.999980
the	O	O:0.999992
numerical	O	O:0.999682
values	O	O:0.999875
seem	O	O:0.999857
to	O	O:0.999999
be	O	O:1.000000
off	O	O:0.999994
by	O	O:0.999988
a	O	O:0.999991
factor	O	O:0.974051
10	O	O:0.999814
and	O	O:0.999966
I	O	O:0.999997
want	O	O:0.999927
to	O	O:0.999936
modify	O	O:0.999999
them	O	O:0.999717
in	O	O:0.999990
place	O	O:0.999717
.	O	O:0.999962
	
I	O	O:0.999970
can	O	O:0.999985
do	O	O:0.999994
with	O	O:0.999980
apply	O	B-API:0.906780
,	O	O:0.999939
but	O	O:0.999867
I	O	O:0.999954
was	O	O:0.999986
wondering	O	O:0.999213
if	O	O:0.999990
there	O	O:0.999661
is	O	O:0.999994
any	O	O:0.999962
way	O	O:0.999942
to	O	O:0.999968
only	O	O:0.999980
indexing	O	O:0.999707
instead	O	O:0.999872
.	O	O:0.999897
	
This	O	O:0.999818
works	O	O:0.999955
of	O	O:0.999993
course	O	O:0.999574
,	O	O:0.999998
it	O	O:0.999955
is	O	O:0.999994
similar	O	O:0.999841
to	O	O:0.999997
the	O	O:0.999999
apply	O	B-API:0.727676
solution	O	O:0.997599
,	O	O:0.999987
it	O	O:0.999998
just	O	O:0.999961
make	O	O:0.999986
the	O	O:0.999995
loop	O	O:0.999925
over	O	O:0.999854
the	O	O:0.999986
columns	O	O:0.999877
explicit	O	O:0.999368
.	O	O:0.999931
	
I	O	O:0.999957
am	O	O:0.999997
still	O	O:0.999165
surprised	O	O:0.999955
that	O	O:0.999982
this	O	O:0.999931
is	O	O:1.000000
a	O	O:0.999977
faster	O	O:0.999632
than	O	O:0.999979
a	O	O:0.999989
solution	O	O:0.999616
with	O	O:0.999909
no	O	O:0.999866
(	O	O:0.999994
apparent	O	O:0.999820
)	O	O:0.999961
loop	O	O:0.998061
.	O	O:0.999872
	
Thanks	O	O:0.999014
for	O	O:0.999957
the	O	O:0.999961
performance	O	O:0.999038
numbers	O	O:0.998198
.	O	O:0.999917
	
I	O	O:0.999970
may	O	O:0.999994
be	O	O:0.999986
doing	O	O:0.999985
something	O	O:0.999437
wrong	O	O:0.993720
,	O	O:0.999985
but	O	O:0.999982
on	O	O:0.999989
my	O	O:0.999994
machine	O	O:0.999964
I	O	O:0.999972
got	O	O:0.999982
the	O	O:0.999879
following	O	O:0.999208
timing	O	O:0.998203
information	O	O:0.999196
:	O	O:0.999986
1.58	O	O:0.999520
ms	O	O:0.999968
for	O	O:0.999989
apply	O	B-API:0.517246
on	O	O:0.999945
subset	O	O:0.999372
of	O	O:0.999998
columns	O	O:0.999448
,	O	O:0.999999
62.3	O	O:0.999678
ms	O	O:0.999945
for	O	O:0.999929
fillna	B-API	B-API:0.984388
,	O	O:0.999830
and	O	O:0.999988
2.65	O	O:0.999291
ms	O	O:0.999722
for	O	O:0.999976
the	O	O:0.999959
explicit	O	O:0.997416
loop	O	O:0.999386
.	O	O:0.999840
	
Second	O	O:0.999441
,	O	O:0.999966
we're	O	O:0.999965
going	O	O:0.999821
to	O	O:0.999977
use	O	O:0.999992
the	O	O:0.999195
dataframe	B-API	O:0.990526
method	O	O:0.999886
`	O	O:0.999992
apply	O	B-API:0.967562
`	O	O:0.999851
.	O	O:0.997852
	
What	O	O:0.999417
`	O	O:0.999990
apply	O	B-API:0.985058
`	O	O:0.999966
does	O	O:0.978601
is	O	O:0.999991
it	O	O:0.999983
takes	O	O:0.999948
a	O	O:0.999938
function	O	O:0.998167
and	O	O:0.999984
runs	O	O:0.999982
every	O	O:0.998731
row	O	O:0.998933
(	O	O:0.999977
axis=1	O	O:0.999839
)	O	O:0.999984
or	O	O:0.999978
column	O	O:0.999202
(	O	O:0.999993
axis=0	O	O:0.999682
)	O	O:0.999963
through	O	O:0.998947
it	O	O:0.999961
,	O	O:0.999945
and	O	O:0.999988
builds	O	O:0.999946
a	O	O:0.999969
new	O	O:0.999593
pandas	O	O:0.999633
object	O	O:0.999953
with	O	O:0.999978
all	O	O:0.999987
of	O	O:0.999995
the	O	O:0.999983
returned	O	O:0.999834
values	O	O:0.998561
.	O	O:0.999833
	
So	O	O:0.999965
we	O	O:0.999998
need	O	O:0.999987
to	O	O:0.999999
set	O	O:0.999997
up	O	O:0.999894
`	O	O:0.999990
haversine	O	O:0.953794
`	O	O:0.999999
totake	O	O:0.999469
row	O	O:0.999993
of	O	O:0.999989
a	O	O:0.999987
dataframe	B-API	O:0.997074
and	O	O:0.999981
unpack	O	O:0.999235
the	O	O:0.999729
values	O	O:0.996753
.	O	O:0.999770
	
It	O	O:0.999739
becomes	O	O:0.992906
:	O	O:0.999966
#CODE	O	O:0.999709
	
So	O	O:0.999970
now	O	O:0.999972
we	O	O:0.999995
can	O	O:0.999979
`	O	O:1.000000
apply	O	B-API:0.932658
`	O	O:0.999957
the	O	O:0.999731
Haversine	O	O:0.996518
function	O	O:0.998622
:	O	O:0.999951
#CODE	O	O:0.999888
	
I	O	O:0.999992
have	O	O:0.999988
a	O	O:0.999993
pandas	O	O:0.999811
series	O	O:0.999912
`	O	O:0.999981
series	O	O:0.998431
`	O	O:0.999986
.	O	O:0.999708
	
If	O	O:0.999957
I	O	O:0.999998
want	O	O:0.999991
to	O	O:0.999936
get	O	O:0.999999
the	O	O:0.999993
element-wise	O	O:0.999911
floor	O	B-API:0.529030
or	O	O:0.999986
ceiling	O	O:0.997356
,	O	O:0.999976
is	O	O:0.999994
there	O	O:0.999966
a	O	O:0.999997
built	O	O:0.982393
in	O	O:0.999966
method	O	O:0.999940
or	O	O:0.999998
do	O	O:0.999984
I	O	O:0.999999
have	O	O:0.999984
to	O	O:0.999963
write	O	O:0.999997
the	O	O:0.999806
function	O	O:0.999897
and	O	O:0.999989
use	O	O:0.999930
apply	O	B-API:0.965220
?	O	O:0.998489
	
I	O	O:0.999955
ask	O	O:0.999870
because	O	O:0.999903
the	O	O:0.999994
data	O	O:0.999603
is	O	O:0.999993
big	O	O:0.999933
so	O	O:0.999979
I	O	O:0.999980
appreciate	O	O:0.999958
efficiency	O	O:0.998013
.	O	O:0.999818
	
Also	O	O:0.999959
this	O	O:0.999842
question	O	O:0.999422
has	O	O:0.999930
not	O	O:0.999977
been	O	O:0.999850
asked	O	O:0.999986
with	O	O:0.999955
respect	O	O:0.999501
to	O	O:0.999990
the	O	O:0.999999
Pandas	O	O:0.999519
package	O	O:0.999457
.	O	O:0.999841
	
Sorry	O	O:0.999149
,	O	O:0.999986
forgot	O	O:0.999793
to	O	O:0.999979
mention	O	O:0.999992
the	O	O:0.999996
first	O	O:0.999746
column	O	O:0.999458
(	O	O:0.999991
which	O	O:0.999961
I	O	O:0.999996
used	O	O:0.999975
as	O	O:0.999839
label	O	O:0.997373
and	O	O:0.999990
really	O	O:0.999358
do	O	O:0.999878
not	O	O:0.999982
need	O	O:0.999744
the	O	O:0.999994
index	O	O:0.999891
)	O	O:0.999916
is	O	O:0.999965
str	O	O:0.994523
.	O	O:0.999810
	
Can	O	O:0.999759
I	O	O:0.999973
ignore	O	O:0.999787
that	O	O:0.999866
while	O	O:0.999989
apply	O	O:0.845351
the	O	O:0.999927
dropna	B-API	B-API:0.983755
or	O	O:0.999964
use	O	O:0.999974
that	O	O:0.999963
column	O	O:0.999968
as	O	O:0.999996
axis	O	O:0.999471
?	O	O:0.999925
	
take	O	O:0.999902
a	O	O:0.999998
look	O	O:0.999309
at	O	O:0.999994
the	O	O:0.999979
example	O	O:0.999958
file	O	O:0.999872
at	O	O:0.999996
the	O	O:0.999981
link	O	O:0.998939
?	O	O:0.999925
	
#URL	O	O:0.997160
	
Is	O	O:0.999928
it	O	O:0.999992
feasible	O	O:0.999947
to	O	O:0.999995
apply	O	O:0.997021
your	O	O:0.999763
techniques	O	O:0.999415
when	O	O:0.999902
no_row=1600000	O	O:0.997263
and	O	O:0.999996
no_colors=230000	O	O:0.994959
?	O	O:0.999715
	
Yon	O	O:0.999746
convert	O	O:0.999387
a	O	O:0.999998
unixtimestamp	O	O:0.999238
by	O	O:0.999973
using	O	O:0.999940
pandas	O	O:0.988787
to_datetime	B-API	B-API:0.993661
.	O	O:0.999485
	
You	O	O:0.999810
can	O	O:0.999990
read	O	O:0.999855
in	O	O:0.999995
the	O	O:0.999995
timecode	O	O:0.999975
from	O	O:0.999941
the	O	O:0.999997
csv	O	O:0.999959
as	O	O:0.999993
an	O	O:0.999917
integer	O	O:0.998671
and	O	O:0.999995
then	O	O:0.999835
apply	O	B-API:0.504413
pd.to_datetime	B-API	B-API:0.991655
#CODE	O	O:0.996680
	
Then	O	O:0.994583
(	O	O:0.999994
since	O	O:0.999944
False	O	O:0.999615
==	O	O:0.999965
0	O	O:0.999268
and	O	O:0.999975
True	O	O:0.999258
==	O	O:0.999792
1	O	O:0.999907
)	O	O:0.999991
we	O	O:0.999984
can	O	O:0.999988
apply	O	O:0.989792
a	O	O:0.999994
cumulative	O	O:0.990481
sum	O	O:0.999931
to	O	O:0.999995
get	O	O:1.000000
a	O	O:0.999998
number	O	O:0.999689
for	O	O:0.999986
the	O	O:0.999972
groups	O	O:0.969350
:	O	O:0.999935
#CODE	O	O:0.999881
	
There	O	O:0.999330
are	O	O:0.999996
lots	O	O:0.999907
of	O	O:0.999992
ways	O	O:0.999826
to	O	O:0.999995
apply	O	O:0.996433
this	O	O:0.999711
to	O	O:0.999998
your	O	O:0.999996
problem	O	O:0.999129
,	O	O:0.999994
but	O	O:0.999994
if	O	O:0.999977
I	O	O:0.999992
understand	O	O:0.999995
your	O	O:0.999813
approach	O	O:0.999852
correctly	O	O:0.999940
--	O	O:0.999999
a	O	O:0.999989
straightforward	O	O:0.998927
application	O	O:0.999991
that	O	O:0.999929
follows	O	O:0.999989
your	O	O:0.999976
structure	O	O:0.999641
would	O	O:0.999982
be	O	O:1.000000
something	O	O:0.999991
like	O	O:0.999747
this	O	O:0.999561
:	O	O:0.999975
#CODE	O	O:0.999846
	
I	O	O:0.999989
think	O	O:0.999942
I	O	O:0.999992
need	O	O:0.999988
to	O	O:0.999939
use	O	O:0.999999
the	O	O:0.999073
apply	O	B-API:0.871480
method	O	O:0.999739
to	O	O:0.999982
trim	O	O:0.999982
the	O	O:0.999997
column	O	O:0.999973
data	O	O:0.999934
.	O	O:0.999958
	
So	O	O:0.999946
if	O	O:0.999994
there	O	O:0.999774
is	O	O:0.999999
anything	O	O:0.999597
after	O	O:0.999908
the	O	O:0.999928
period	O	O:0.999799
keep	O	O:0.999799
the	O	O:0.999999
data	O	O:0.999891
unchanged	O	O:0.999574
but	O	O:0.999984
if	O	O:0.999993
there	O	O:0.999730
is	O	O:0.999998
nothing	O	O:0.998177
after	O	O:0.999899
the	O	O:0.999935
period	O	O:0.999791
then	O	O:0.999820
return	O	O:0.999984
just	O	O:0.999977
the	O	O:0.999998
letters	O	O:0.997805
without	O	O:0.999775
the	O	O:0.999982
period	O	O:0.999423
at	O	O:0.999991
the	O	O:0.999984
end	O	O:0.999621
.	O	O:0.999800
	
I	O	O:0.999991
know	O	O:0.999944
I	O	O:0.999957
can	O	O:0.999991
probably	O	O:0.999964
use	O	O:0.999990
a	O	O:0.999950
lambda	O	O:0.976368
function	O	O:0.999679
and	O	O:0.999991
maybe	O	O:0.999989
a	O	O:0.999984
string	O	O:0.999868
split	O	O:0.992427
or	O	O:0.999999
something	O	O:0.999926
to	O	O:0.999984
do	O	O:0.999999
this	O	O:0.999912
but	O	O:0.999974
have	O	O:0.999915
not	O	O:0.999997
much	O	O:0.999977
of	O	O:0.999994
an	O	O:0.999977
idea	O	O:0.999902
to	O	O:0.999986
make	O	O:0.999983
it	O	O:0.999979
happen	O	O:0.999357
.	O	O:0.999971
	
But	O	O:0.999939
that	O	O:0.999826
does	O	O:0.999922
not	O	O:0.999996
work	O	O:0.999978
,	O	O:0.999982
is	O	O:0.999997
there	O	O:0.999967
some	O	O:0.999965
other	O	O:0.999954
way	O	O:0.999971
to	O	O:0.999967
do	O	O:0.999999
what	O	O:0.999957
I	O	O:0.999995
need	O	O:0.999978
?	O	O:0.999861
	
I	O	O:0.999982
think	O	O:0.999972
my	O	O:0.999880
issue	O	O:0.998255
is	O	O:0.999911
that	O	O:0.999320
method	O	O:0.999953
is	O	O:0.999990
for	O	O:0.999990
a	O	O:0.999958
series	O	O:0.992503
and	O	O:0.999990
not	O	O:0.999997
a	O	O:0.999998
column	O	O:0.999932
of	O	O:0.999988
values	O	O:0.998391
.	O	O:0.999926
	
I	O	O:0.999950
tried	O	O:0.999810
apply	O	B-API:0.947438
and	O	O:0.999178
could	O	O:0.999490
not	O	O:0.999995
seem	O	O:0.999981
to	O	O:0.999992
get	O	O:1.000000
that	O	O:0.999978
to	O	O:0.999999
work	O	O:0.999994
either	O	O:0.999940
.	O	O:0.999953
	
I	O	O:0.999988
also	O	O:0.999977
tried	O	O:0.999900
using	O	O:0.999889
the	O	O:0.999701
apply	O	B-API:0.987430
function	O	O:0.995305
,	O	O:0.999871
but	O	O:0.999987
very	O	O:0.999836
likely	O	O:0.999783
I	O	O:0.999986
am	O	O:0.999989
doing	O	O:0.999303
it	O	O:0.999968
wrong	O	O:0.997979
.	O	O:0.999877
	
My	O	O:0.999971
guess	O	O:0.998054
is	O	O:0.999997
that	O	O:0.999718
I	O	O:0.999998
am	O	O:0.999991
either	O	O:0.999761
not	O	O:0.999991
applying	O	O:0.999984
the	O	O:0.999969
functions	O	O:0.999869
correctly	O	O:0.999921
for	O	O:0.999999
a	O	O:0.999998
column	O	O:0.999112
or	O	O:0.999999
the	O	O:0.999995
values	O	O:0.999678
I	O	O:0.999980
am	O	O:0.999998
getting	O	O:0.998386
arent	O	O:0.999778
integers	O	O:0.998907
.	O	O:0.999892
	
I	O	O:0.999972
have	O	O:0.999930
been	O	O:0.999304
trying	O	O:0.999975
for	O	O:0.999994
days	O	O:0.999721
so	O	O:0.999976
now	O	O:0.999934
am	O	O:0.999997
breaking	O	O:0.999939
down	O	O:0.999552
to	O	O:0.999994
ask	O	O:0.999986
for	O	O:0.999910
help	O	O:0.996838
....	O	O:0.997622
	
I	O	O:0.999940
see	O	O:0.999924
.	O	O:0.999566
	
By	O	O:0.999976
messed	O	O:0.999428
up	O	O:0.999972
,	O	O:0.999990
I	O	O:0.999966
realized	O	O:0.999833
that	O	O:0.999713
what	O	O:0.999951
it	O	O:0.999988
did	O	O:0.999953
was	O	O:0.999974
change	O	O:0.999549
the	O	O:0.999972
ordering	O	O:0.996868
around	O	O:0.998442
.	O	O:0.999766
	
I'll	O	O:0.999705
just	O	O:0.999904
apply	O	O:0.902887
a	O	O:0.999979
sort	O	O:0.962194
again	O	O:0.999845
and	O	O:0.999992
get	O	O:0.999970
it	O	O:0.999960
in	O	O:0.999997
the	O	O:0.999989
correct	O	O:0.999873
order	O	O:0.999611
.	O	O:0.999923
	
This	O	O:0.999027
answer	O	O:0.999150
worked	O	O:0.999670
,	O	O:0.999990
thanks	O	O:0.999907
a	O	O:0.999992
bunch	O	O:0.996784
!	O	O:0.999909
	
I	O	O:0.999983
spent	O	O:0.999888
6	O	O:0.999719
hours	O	O:0.999811
trying	O	O:0.999953
different	O	O:0.999853
methods	O	O:0.998211
.	O	O:0.999795
	
:(	O	O:0.999500
	
Unclear	O	O:0.999253
if	O	O:0.999945
it	O	O:0.999970
should	O	O:0.999984
work	O	O:0.999977
at	O	O:0.999997
all	O	O:0.999931
but	O	O:0.999982
you	O	O:0.999972
could	O	O:0.999981
apply	O	O:0.971475
the	O	O:0.999236
function	O	O:0.997636
:	O	O:0.999934
`	O	O:0.999988
s.apply	O	O:0.803857
(	O	O:0.999992
pd.DataFrame.mean	B-API	B-API:0.764352
)`	O	O:0.999705
	
I	O	O:0.999992
have	O	O:0.999984
to	O	O:0.999988
calibrate	O	O:0.999998
a	O	O:0.999995
distance	O	O:0.999712
measuring	O	O:0.999812
instrument	O	O:0.999408
which	O	O:0.999895
gives	O	O:0.999959
capacitance	O	O:0.999889
as	O	O:0.999985
output	O	O:0.999693
,	O	O:0.999992
I	O	O:0.999985
am	O	O:0.999999
able	O	O:0.999935
to	O	O:0.999995
use	O	O:0.999991
`	O	O:0.999987
numpy	O	O:0.998600
polyfit	B-API	B-API:0.873151
`	O	O:0.999982
to	O	O:0.999980
find	O	O:0.999999
a	O	O:0.999981
relation	O	O:0.998816
and	O	O:0.999992
apply	O	O:0.660955
it	O	O:0.999620
get	O	O:0.999613
distance	O	O:0.999819
.	O	O:0.999904
	
But	O	O:0.999921
I	O	O:0.999997
need	O	O:0.999976
to	O	O:0.999966
include	O	O:0.999997
limits	O	O:0.999820
of	O	O:0.999957
detection	O	O:0.999649
0.0008	O	O:0.999959
m	O	O:0.999952
as	O	O:0.999993
it	O	O:0.999816
is	O	O:0.999996
the	O	O:0.999990
resolution	O	O:0.999743
of	O	O:0.999970
the	O	O:0.999914
instrument	O	O:0.999761
.	O	O:0.999790
	
For	O	O:0.999928
example	O	O:0.999731
If	O	O:0.999991
I	O	O:0.999999
have	O	O:0.999995
a	O	O:0.999992
capacitance	O	O:0.999843
value	O	O:0.999946
of	O	O:0.999972
3044	O	O:0.997914
and	O	O:0.999997
if	O	O:0.999985
you	O	O:0.999907
look	O	O:0.999932
into	O	O:0.999971
calibration	O	O:0.999960
data	O	O:0.999964
the	O	O:0.999957
distance	O	O:0.999833
should	O	O:0.999935
be	O	O:0.999995
between	O	O:0.999856
0.4	O	O:0.999307
m	O	O:0.999945
to	O	O:0.999961
1	O	O:0.999995
m	O	O:0.999853
and	O	O:0.999993
If	O	O:0.999996
I	O	O:0.999971
do	O	O:0.999991
the	O	O:0.999628
present	O	O:0.997400
method	O	O:0.999965
I	O	O:0.999995
get	O	O:0.999994
distance	O	O:0.999886
like	O	O:0.999954
0.8967892678	O	O:0.998965
m	O	O:0.999589
(	O	O:0.999970
for	O	O:0.999993
example	O	O:0.999580
)	O	O:0.999973
,	O	O:0.999985
instead	O	O:0.999994
something	O	O:0.999961
like	O	O:0.999881
0.8008	O	O:0.996542
(	O	O:0.999988
example	O	O:0.999594
)	O	O:0.999965
.	O	O:0.999864
	
Because	O	O:0.999715
the	O	O:0.999930
instrument	O	O:0.999825
will	O	O:0.999948
only	O	O:0.999998
able	O	O:0.999997
to	O	O:0.999994
differentiate	O	O:0.999966
0.0008	O	O:0.999754
m	O	O:0.999854
.	O	O:0.999909
	
I	O	O:0.999987
need	O	O:0.999980
to	O	O:0.999986
apply	O	O:0.996316
a	O	O:0.999972
correction	O	O:0.999573
like	O	O:0.999967
if	O	O:0.999996
the	O	O:0.999995
value	O	O:0.999459
is	O	O:0.999945
between	O	O:0.998561
the	O	O:0.999992
two	O	O:0.999878
numbers	O	O:0.999498
it	O	O:0.999951
is	O	O:0.999996
rounded	O	O:0.997177
and	O	O:0.999985
shows	O	O:0.999926
the	O	O:0.999981
limits	O	O:0.999639
of	O	O:0.999945
detection	O	O:0.999174
	
use	O	O:0.999966
your	O	O:0.999836
raw	O	O:0.999985
data	O	O:0.999986
of	O	O:0.999994
known	O	O:0.999482
distances	O	O:0.999643
(	O	O:0.999996
your	O	O:0.999970
calibration	O	O:0.999755
set	O	O:0.999942
)	O	O:0.999982
and	O	O:0.999976
apply	O	O:0.643159
the	O	O:0.998807
fit	O	O:0.994760
.	O	O:0.999985
you	O	O:0.999986
can	O	O:0.999999
then	O	O:0.999997
see	O	O:0.999999
how	O	O:0.999997
much	O	O:0.999877
variation	O	O:0.999990
you	O	O:0.999996
have	O	O:0.999994
from	O	O:0.999991
the	O	O:0.999998
actual	O	O:0.999802
values	O	O:0.995655
(	O	O:0.999982
range	O	O:0.999940
)	O	O:0.999889
and	O	O:0.999990
standard	O	O:0.999345
deviation	O	O:0.997414
(	O	O:0.999978
1	O	O:0.999984
sigma	O	O:0.998251
)	O	O:0.999936
	
@USER	O	O:0.999198
I	O	O:0.999993
mean	O	O:0.999953
the	O	O:0.999866
logic	O	O:0.999612
behind	O	O:0.999790
the	O	O:0.999970
fact	O	O:0.999826
that	O	O:0.999958
I	O	O:0.999998
can	O	O:0.999997
apply	O	O:0.876099
the	O	O:0.999968
comparison	O	O:0.998707
to	O	O:0.999997
the	O	O:0.999999
whole	O	O:0.999901
DataFrame	B-API	O:0.999830
only	O	O:0.999964
if	O	O:0.999998
the	O	O:0.999988
rhs	O	O:0.979062
is	O	O:0.999995
a	O	O:0.999913
Timedelta	O	O:0.738236
,	O	O:0.999964
although	O	O:0.999827
it	O	O:0.999943
works	O	O:0.999986
just	O	O:0.999968
fine	O	O:0.999955
with	O	O:0.999983
separate	O	O:0.999903
columns	O	O:0.999582
and	O	O:0.999992
ints	O	O:0.999174
.	O	O:0.999575
	
Sorry	O	O:0.998172
for	O	O:0.999980
being	O	O:0.997290
unclear	O	O:0.994465
.	O	O:0.999424
	
How	O	O:0.999914
to	O	O:0.999990
efficiently	O	O:0.999995
apply	O	O:0.935475
a	O	O:0.999816
function	O	O:0.999425
to	O	O:0.999980
each	O	O:0.999996
DataFrame	B-API	O:0.999250
of	O	O:0.999997
a	O	O:0.999967
Pandas	O	O:0.999433
Panel	O	O:0.999722
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999665
to	O	O:0.999996
apply	O	O:0.987637
a	O	O:0.999878
function	O	O:0.999293
to	O	O:0.999992
every	O	O:0.999995
DataFrame	B-API	O:0.998111
in	O	O:0.999991
a	O	O:0.999982
Pandas	O	O:0.998957
Panel	O	O:0.999659
.	O	O:0.999682
	
I	O	O:0.999958
can	O	O:0.999963
write	O	O:0.999974
it	O	O:0.999997
as	O	O:0.999999
a	O	O:0.999975
loop	O	O:0.996518
but	O	O:0.999935
the	O	O:0.999918
indexing	O	O:0.999504
seems	O	O:0.999883
to	O	O:0.999998
take	O	O:0.999999
a	O	O:0.999998
long	O	O:0.999636
time	O	O:0.999787
.	O	O:0.999878
	
I	O	O:0.999942
am	O	O:0.999996
hoping	O	O:0.999147
a	O	O:0.999982
builtin	O	O:0.993860
Pandas	O	O:0.999154
function	O	O:0.999606
might	O	O:0.999917
be	O	O:0.999985
faster	O	O:0.999767
.	O	O:0.999543
	
I	O	O:0.999953
looked	O	O:0.999891
at	O	O:0.999764
`	O	O:0.999980
mypanel.apply	O	O:0.982446
(	O	O:0.999976
condenser	O	O:0.934428
,	O	O:0.999992
axis	O	O:0.999813
=	O	O:0.999894
'	O	O:0.999994
items	O	O:0.999474
'	O	O:0.999940
)`	O	O:0.999797
but	O	O:0.999990
this	O	O:0.999980
loops	O	O:0.999980
over	O	O:0.999922
each	O	O:0.999941
column	O	O:0.999971
of	O	O:0.999997
my	O	O:0.999992
DataFrames	O	O:0.999924
separately	O	O:0.999413
.	O	O:0.999937
	
Is	O	O:0.999972
there	O	O:0.999986
something	O	O:0.999864
which	O	O:0.999846
would	O	O:0.999983
apply	O	O:0.976050
a	O	O:0.999956
function	O	O:0.999213
to	O	O:0.999980
each	O	O:0.999977
DataFrame	B-API	O:0.993356
?	O	O:0.999967
	
apply	O	B-API:0.853589
is	O	O:0.999872
correct	O	O:0.996745
,	O	O:0.999988
but	O	O:0.999969
the	O	O:0.999969
usage	O	O:0.996069
is	O	O:0.999751
:	O	O:0.999858
	
@USER	O	O:0.994264
:	O	O:0.999923
Thanks	O	O:0.999474
!	O	O:0.999939
	
Also	O	O:0.999886
good	O	O:0.999834
to	O	O:0.999997
see	O	O:1.000000
a	O	O:0.999996
solution	O	O:0.999815
using	O	O:0.999920
`	O	O:0.999880
apply	O	B-API:0.995824
`	O	O:0.999841
;	O	O:0.999775
it	O	O:0.999984
could	O	O:0.999986
be	O	O:0.999999
handy	O	O:0.999872
for	O	O:0.999922
implementing	O	O:0.999507
more	O	O:0.997542
exotic	O	O:0.999823
concatenation	O	O:0.999595
functions	O	O:0.999890
.	O	O:0.999797
	
try	O	O:0.999933
to	O	O:0.999960
use	O	O:0.999999
str.cat	B-API	B-API:0.565003
over	O	O:0.999840
apply	O	O:0.750931
whenever	O	O:0.999773
you	O	O:0.999748
can	O	O:0.999982
.	O	O:0.999999
feels	O	O:0.999983
a	O	O:0.999997
gazillion	O	O:0.999528
times	O	O:0.999696
faster	O	O:0.999418
.	O	O:0.999862
	
You	O	O:0.999933
can	O	O:0.999933
use	O	O:0.999981
`	O	O:0.999958
pandas.apply	O	O:0.660566
(	O	O:0.999987
args	O	O:0.999658
)`	O	O:0.999912
to	O	O:0.999985
apply	O	O:0.994149
a	O	O:0.999887
function	O	O:0.999490
to	O	O:0.999999
each	O	O:0.999995
row	O	O:0.999938
in	O	O:0.999993
the	O	O:0.999986
`	O	O:0.999989
transdf	O	O:0.998089
`	O	O:0.999999
data	O	O:0.999947
frame	O	O:0.999999
if	O	O:0.999997
you	O	O:0.999992
know	O	O:0.999969
that	O	O:0.999996
the	O	O:0.999999
rules	O	O:0.999969
set	O	O:0.999660
in	O	O:0.999995
the	O	O:0.999982
`	O	O:0.999993
segmentdf	O	O:0.985521
`	O	O:0.999989
are	O	O:0.999898
static	O	O:0.996638
and	O	O:0.999967
don't	O	O:0.999823
change	O	O:0.991446
.	O	O:0.999872
	
Perhaps	O	O:0.999793
the	O	O:0.999986
following	O	O:0.999824
code	O	O:0.999371
snippet	O	O:0.999929
may	O	O:0.999993
help	O	O:0.999752
you	O	O:0.999966
.	O	O:0.999961
	
I	O	O:0.999890
haven't	O	O:0.999513
tested	O	O:0.999830
this	O	O:0.999974
so	O	O:0.999992
be	O	O:0.999995
wary	O	O:0.999552
,	O	O:0.999965
but	O	O:0.999960
I	O	O:0.999989
think	O	O:0.999935
it	O	O:0.999940
should	O	O:0.999958
get	O	O:0.999993
you	O	O:0.999997
started	O	O:0.999864
in	O	O:0.999995
the	O	O:0.999992
right	O	O:0.999771
direction	O	O:0.998399
.	O	O:0.999955
	
#CODE	O	O:0.998453
	
Basically	O	O:0.999751
,	O	O:0.999989
the	O	O:0.999996
cumulative	O	O:0.999162
sum	O	O:0.999712
operation	O	O:0.999637
(	O	O:0.999995
with	O	O:0.999993
a	O	O:0.999993
factor	O	O:0.998183
)	O	O:0.999943
is	O	O:0.999985
done	O	O:0.999872
using	O	O:0.999796
`	O	O:0.999516
numpy.convolve	B-API	B-API:0.999824
`	O	O:0.999955
.	O	O:0.999417
	
The	O	O:0.999967
rest	O	O:0.997517
is	O	O:0.999993
straight	O	O:0.999264
forward	O	O:0.998986
:	O	O:0.999994
just	O	O:0.999736
`	O	O:0.999998
groupby	B-API	B-API:0.999261
`	O	O:0.999999
the	O	O:0.999964
data	O	O:0.999981
into	O	O:0.999891
groups	O	O:0.999927
,	O	O:0.999988
apply	O	O:0.668665
the	O	O:0.999615
`	O	O:0.999888
convolve	O	B-API:0.988578
`	O	O:0.999982
and	O	O:0.999993
then	O	O:0.999952
`	O	O:0.999995
concat	O	B-API:0.988576
`	O	O:0.999993
the	O	O:0.999982
resultants	O	O:0.999579
together	O	O:0.998613
.	O	O:0.999916
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999977
apply	O	B-API:0.984445
`	O	O:0.999984
to	O	O:0.999930
force	O	O:0.999990
all	O	O:0.999990
your	O	O:0.999951
objects	O	O:0.999746
to	O	O:0.999991
be	O	O:0.999999
immutable	O	O:0.999610
.	O	O:0.999761
	
Try	O	O:0.999633
#CODE	O	O:0.999469
	
However	O	O:0.999899
,	O	O:0.999993
I	O	O:0.999996
think	O	O:0.999949
the	O	O:0.999927
`	O	O:0.999974
apply	O	B-API:0.977716
`	O	O:0.999743
function	O	O:0.997879
does	O	O:0.999935
not	O	O:0.999994
allow	O	O:0.999918
for	O	O:0.999898
`	O	O:0.999901
inplace	O	O:0.591340
`	O	O:0.999989
modification	O	O:0.998333
,	O	O:0.999997
right	O	O:0.999720
?	O	O:0.999951
	
So	O	O:0.999986
what	O	O:0.999931
I	O	O:0.999998
basically	O	O:0.999997
ended	O	O:0.999422
up	O	O:0.999967
doing	O	O:0.996630
is	O	O:0.999450
:	O	O:0.999552
#CODE	O	O:0.999798
	
You	O	O:0.999902
can	O	O:0.999980
apply	O	O:0.989520
a	O	O:0.999934
`	O	O:0.999837
lambda	O	O:0.997176
`	O	O:0.999996
to	O	O:0.999975
only	O	O:0.999999
the	O	O:0.999995
relevant	O	O:0.999874
column	O	O:0.999936
,	O	O:1.000000
instead	O	O:0.999993
of	O	O:0.999997
the	O	O:0.999998
whole	O	O:0.999728
row	O	O:0.999103
:	O	O:0.999954
#CODE	O	O:0.999887
	
I	O	O:0.999959
believe	O	O:0.999989
that	O	O:0.999884
str()	B-API	O:0.977139
or	O	O:0.999999
the	O	O:0.999974
int()	O	O:0.910690
in	O	O:0.999972
the	O	O:0.999988
1st	O	O:0.999969
line	O	O:0.999887
of	O	O:0.999999
your	O	O:0.999088
function	O	O:0.999908
wouldn't	O	O:0.999989
like	O	O:0.999988
a	O	O:0.999995
NaN	O	O:0.972196
.	O	O:0.999824
	
You	O	O:0.999906
could	O	O:0.999950
change	O	O:0.999987
your	O	O:0.999966
apply	O	B-API:0.725372
to	O	O:0.999969
df.new_var	O	O:0.999404
=	O	O:0.999962
df.ID.dropna()	O	O:0.982535
.apply	B-API	B-API:0.989889
(	O	O:0.999962
checker	O	O:0.999813
)	O	O:0.999979
or	O	O:0.999997
test	O	O:0.999274
for	O	O:0.999995
NaN	O	O:0.994745
in	O	O:0.999996
your	O	O:0.998788
function	O	O:0.999771
	
I	O	O:0.999988
think	O	O:0.999979
using	O	O:0.999412
`	O	O:0.999823
nunique	B-API	B-API:0.999509
`	O	O:0.999953
is	O	O:0.999763
better	O	O:0.999823
than	O	O:0.999854
calling	O	O:0.998268
`	O	O:0.999961
apply	O	B-API:0.987597
(	O	O:0.999847
len	O	B-API:0.521096
)`	O	O:0.999889
though	O	O:0.998555
;)	O	O:0.999910
+1	O	O:0.999482
	
@USER	O	O:0.999771
check	O	O:0.999805
out	O	O:0.999969
timings	O	O:0.999815
,	O	O:0.999981
`	O	O:0.999967
nunique()	B-API	B-API:0.999287
`	O	O:0.999974
is	O	O:0.999928
worse	O	O:0.999858
than	O	O:0.999644
`	O	O:0.999969
apply	O	B-API:0.967148
(	O	O:0.999836
len	O	B-API:0.566918
)`	O	O:0.999622
:)	O	O:0.997627
	
Now	O	O:0.999969
add	O	O:0.999981
another	O	O:0.999983
column	O	O:0.999685
for	O	O:0.999987
the	O	O:0.999938
week	O	O:0.998400
and	O	O:0.999976
year	O	O:0.994728
(	O	O:0.999973
one	O	O:0.999974
way	O	O:0.999798
is	O	O:0.999993
to	O	O:0.999962
use	O	O:0.999992
`	O	O:0.999916
apply	O	B-API:0.994250
`	O	O:0.999939
and	O	O:0.999958
generate	O	O:0.999967
a	O	O:0.999993
string	O	O:0.999709
of	O	O:0.999987
the	O	O:0.999968
week	O	O:0.999808
/	O	O:0.999989
year	O	O:0.998575
numbers	O	O:0.993906
):	O	O:0.999901
#CODE	O	O:0.999820
	
However	O	O:0.999814
,	O	O:0.999994
if	O	O:0.999995
you	O	O:0.999991
need	O	O:0.999936
/	O	O:0.999999
want	O	O:0.999978
date	O	O:0.999585
strings	O	O:0.999848
with	O	O:0.999912
3-letter	O	O:0.999863
months	O	O:0.999918
like	O	O:0.999863
`'	O	O:0.999977
NOV	O	O:0.999582
'`	O	O:0.999980
converted	O	O:0.999058
to	O	O:0.999967
`	O	O:0.999999
-11-	O	O:0.992459
`	O	O:0.999997
,	O	O:0.999997
then	O	O:0.999986
you	O	O:0.999998
can	O	O:0.999997
convert	O	O:0.999978
the	O	O:0.999997
Timestamps	O	O:0.998545
with	O	O:0.999782
`	O	O:0.999991
strftime	B-API	B-API:0.986034
`	O	O:0.999971
and	O	O:0.999757
`	O	O:0.999994
apply	O	B-API:0.998795
`	O	O:0.999314
:	O	O:0.999133
#CODE	O	O:0.999898
	
To	O	O:0.999916
answer	O	O:0.999992
your	O	O:0.999765
question	O	O:0.999775
literally	O	O:0.999975
,	O	O:0.999993
in	O	O:0.999995
order	O	O:0.999939
to	O	O:0.999990
use	O	O:0.999993
`	O	O:0.999923
Series.str.replace	B-API	B-API:0.995087
`	O	O:0.999996
you	O	O:0.999975
need	O	O:0.999999
a	O	O:1.000000
column	O	O:0.999899
with	O	O:0.999987
the	O	O:0.999975
month	O	O:0.999396
string	O	O:0.999878
abbreviations	O	O:0.999795
all	O	O:0.999992
by	O	O:0.999991
themselves	O	O:0.998307
.	O	O:0.999824
	
You	O	O:0.999911
can	O	O:0.999984
arrange	O	O:0.999889
for	O	O:0.999998
that	O	O:0.999950
by	O	O:0.999992
first	O	O:0.999941
calling	O	O:0.993130
`	O	O:0.999914
Series.str.extract	B-API	B-API:0.999135
`	O	O:0.999971
.	O	O:0.999351
	
Then	O	O:0.999862
you	O	O:0.999997
can	O	O:0.999998
join	O	O:0.979906
the	O	O:0.999999
columns	O	O:0.999981
back	O	O:0.999901
into	O	O:0.999961
one	O	O:0.999996
using	O	O:0.999788
`	O	O:0.999925
apply	O	B-API:0.998921
`	O	O:0.999348
:	O	O:0.999009
#CODE	O	O:0.999898
	
what	O	O:0.999686
column	O	O:0.999914
are	O	O:0.999997
you	O	O:0.999991
calling	O	O:0.999964
your	O	O:0.999793
`	O	O:0.999973
apply	O	B-API:0.871539
`	O	O:0.999955
on	O	O:0.999510
?	O	O:0.999980
	
A	O	O:0.999991
sample	O	O:0.999802
of	O	O:0.999999
your	O	O:0.999975
data	O	O:0.999932
would	O	O:0.999993
help	O	O:0.999956
you	O	O:0.999998
get	O	O:0.999993
an	O	O:0.999994
answer	O	O:0.999981
much	O	O:0.999102
quicker	O	O:0.999129
.	O	O:0.999764
	
I	O	O:0.999922
would	O	O:0.999996
like	O	O:0.999956
to	O	O:0.999999
apply	O	O:0.982241
the	O	O:0.999794
function	O	O:0.999724
to	O	O:0.999994
the	O	O:1.000000
new	O	O:0.999944
column	O	O:0.999895
and	O	O:0.999997
get	O	O:0.999997
the	O	O:0.999981
results	O	O:0.999974
by	O	O:0.999989
referencing	O	O:0.999886
the	O	O:0.999868
other	O	O:0.999924
two	O	O:0.999978
columns	O	O:0.999819
.	O	O:0.999934
	
The	O	O:0.999981
data	O	O:0.999661
is	O	O:0.999998
a	O	O:0.999988
bit	O	O:0.999616
messy	O	O:0.999072
and	O	O:0.999991
also	O	O:0.999965
confidentially	O	O:0.999419
,	O	O:0.999966
i	O	O:0.999898
will	O	O:0.999809
try	O	O:0.999968
and	O	O:0.999998
knock	O	O:0.999852
together	O	O:0.999695
some	O	O:0.999981
simple	O	O:0.999964
data	O	O:0.999892
for	O	O:0.999994
the	O	O:0.999945
question	O	O:0.996791
.	O	O:0.999857
	
also	O	O:0.999785
avoid	O	O:0.999951
using	O	O:0.999590
`	O	O:0.999818
apply	O	B-API:0.994390
`	O	O:0.999977
where	O	O:0.999747
possible	O	O:0.999922
as	O	O:0.999999
this	O	O:0.998685
is	O	O:0.999996
just	O	O:0.999893
going	O	O:0.999926
to	O	O:0.999987
loop	O	O:0.999994
over	O	O:0.999949
the	O	O:0.999986
values	O	O:0.999570
,	O	O:0.999968
`	O	O:0.999993
np.where	B-API	B-API:0.994498
`	O	O:0.999980
is	O	O:0.999978
a	O	O:0.999921
vectorised	O	O:0.993619
method	O	O:0.999433
and	O	O:0.999986
will	O	O:0.999943
scale	O	O:0.999548
much	O	O:0.999505
better	O	O:0.999341
.	O	O:0.999794
	
@USER	O	O:0.999780
no	O	O:0.999962
worries	O	O:0.999453
,	O	O:0.999994
the	O	O:0.999982
key	O	O:0.999960
thing	O	O:0.999948
to	O	O:0.999999
take	O	O:0.999999
away	O	O:0.999981
from	O	O:0.999993
this	O	O:0.999693
is	O	O:0.999995
to	O	O:0.999986
look	O	O:0.999986
for	O	O:0.999995
a	O	O:0.999894
vectorised	O	O:0.992054
method	O	O:0.999943
that	O	O:0.999930
will	O	O:0.999994
operate	O	O:0.999977
on	O	O:0.999997
the	O	O:0.999998
whole	O	O:0.999972
df	O	O:0.999881
or	O	O:0.999997
series	O	O:0.999872
rather	O	O:0.999974
than	O	O:0.999974
calling	O	O:0.999823
apply	O	O:0.619984
which	O	O:0.999714
loops	O	O:0.999809
over	O	O:0.999924
the	O	O:0.999954
values	O	O:0.997735
	
You'r	O	O:0.999060
lambda	O	O:0.997663
is	O	O:0.999990
operating	O	O:0.998670
on	O	O:0.999995
the	O	O:0.999959
0	O	O:0.999969
axis	O	O:0.999790
which	O	O:0.999605
is	O	O:0.999984
columnwise	O	O:0.997372
.	O	O:0.999901
	
Simply	O	O:0.999775
add	O	O:0.999397
`	O	O:0.999985
axis=1	O	O:0.992924
`	O	O:0.999993
to	O	O:0.999950
the	O	O:0.999999
`	O	O:0.999977
apply	O	B-API:0.984180
`	O	O:0.999844
arg	O	O:0.998822
list	O	O:0.997982
.	O	O:0.999814
	
This	O	O:0.998839
is	O	O:0.999984
clearly	O	O:0.998785
documented	O	O:0.999385
.	O	O:0.999589
	
#CODE	O	O:0.998453
	
How	O	O:0.999531
is	O	O:0.999982
a	O	O:0.999970
DataFrameGroupBy	B-API	B-API:0.701923
structured	O	O:0.999491
to	O	O:0.999993
then	O	O:0.999997
apply	O	O:0.960210
functions	O	O:0.999760
to	O	O:0.999900
it	O	O:0.999995
(	O	O:0.999998
like	O	O:0.999994
a	O	O:0.999996
for	O	O:0.999958
loop	O	O:0.999361
)	O	O:0.999935
?	O	O:0.999898
	
Applying	O	O:0.999468
a	O	O:0.999986
cumulative	O	O:0.996288
sum	O	O:0.999790
on	O	O:0.999992
this	O	O:0.999947
DataFrame	B-API	O:0.993384
is	O	O:0.999995
easy	O	O:0.999325
,	O	O:0.999999
just	O	O:0.999932
using	O	O:0.999961
e.g.	O	O:0.995644
`	O	O:0.999949
df.cumsum()	B-API	B-API:0.996033
`	O	O:0.999960
.	O	O:0.999564
	
But	O	O:0.999240
is	O	O:0.999980
it	O	O:0.999988
possible	O	O:0.999945
to	O	O:0.999997
apply	O	O:0.982642
a	O	O:0.999988
cumulative	O	O:0.987156
sum	O	O:0.999974
every	O	O:0.999686
`	O	O:0.999983
X	O	O:0.998976
`	O	O:0.999995
days	O	O:0.994624
(	O	O:0.999998
or	O	O:0.999999
data	O	O:0.999974
points	O	O:0.999915
)	O	O:0.999998
say	O	O:0.999938
,	O	O:0.999999
yielding	O	O:0.999810
only	O	O:0.999809
the	O	O:0.999999
cumulative	O	O:0.999783
sum	O	O:0.999916
of	O	O:0.999995
the	O	O:0.999993
last	O	O:0.999539
`	O	O:0.999982
Y	O	O:0.999084
`	O	O:0.999996
days	O	O:0.995182
(	O	O:0.999999
data	O	O:0.999986
points	O	O:0.999534
)	O	O:0.999985
.	O	O:0.999880
	
I	O	O:0.999987
suppose	O	O:0.999969
you	O	O:0.999784
could	O	O:0.999983
always	O	O:0.999999
define	O	O:0.999983
a	O	O:0.999939
function	O	O:0.999688
`	O	O:0.999992
f	O	O:0.999092
`	O	O:0.999998
that	O	O:0.999490
accepts	O	O:0.999988
the	O	O:0.999998
parameters	O	O:0.999018
of	O	O:0.999993
column	O	O:0.999928
`	O	O:0.999995
A	O	O:0.999794
`	O	O:0.999993
,	O	O:0.999973
column	O	O:0.999963
`	O	O:0.999982
C	O	O:0.996267
`	O	O:0.999990
,	O	O:0.999850
and	O	O:0.999998
column	O	O:0.999884
`	O	O:0.999956
L	O	O:0.997993
`	O	O:0.999982
and	O	O:0.999983
then	O	O:0.999893
`	O	O:0.999995
apply	O	B-API:0.968169
`	O	O:0.999972
it	O	O:0.999841
to	O	O:1.000000
your	O	O:0.999999
data	O	O:0.999959
frame	O	O:0.999996
.	O	O:0.999960
	
See	O	O:0.998933
-->	O	O:0.999538
#URL	O	O:0.998911
	
You	O	O:0.999963
need	O	O:0.999978
to	O	O:0.999995
explicitly	O	O:0.999998
read	O	O:0.999874
the	O	O:0.999998
data	O	O:0.999979
from	O	O:0.999948
the	O	O:0.999998
table	O	O:0.999882
.	O	O:0.999885
	
Table.read	O	O:0.996902
will	O	O:0.999959
pull	O	O:0.999345
in	O	O:0.999996
the	O	O:0.999987
entire	O	O:0.999954
table	O	O:0.999922
,	O	O:0.999971
and	O	O:0.999996
Table.read_where	O	O:0.999005
allows	O	O:0.999591
you	O	O:0.999977
to	O	O:0.999996
apply	O	O:0.984945
a	O	O:0.999866
conditional	O	O:0.958389
statement	O	O:0.999979
to	O	O:0.999966
filter	O	O:0.999977
the	O	O:0.999995
data	O	O:0.999971
that	O	O:0.999755
is	O	O:0.999998
returned	O	O:0.998468
.	O	O:0.999811
	
#CODE	O	O:0.998453
	
Going	O	O:0.998111
around	O	O:0.999726
,	O	O:0.999981
I	O	O:0.999996
have	O	O:0.999956
found	O	O:0.999687
also	O	O:0.999994
this	O	O:0.999969
solution	O	O:0.999949
based	O	O:0.999907
on	O	O:0.999869
apply	O	B-API:0.862083
method	O	O:0.999307
	
So	O	O:0.999919
for	O	O:0.999987
the	O	O:0.999975
short	O	O:0.999394
example	O	O:0.999745
I	O	O:0.999989
give	O	O:0.999883
df.index	O	O:0.936595
has	O	O:0.999850
shape	O	O:0.999310
(	O	O:0.999937
3	O	O:0.999929
,	O	O:0.999976
)	O	O:0.999976
and	O	O:0.999939
df.T	B-API	B-API:0.804134
has	O	O:0.999418
shape	O	O:0.998799
(	O	O:0.999944
2	O	O:0.999954
,	O	O:0.999978
3	O	O:0.999820
)	O	O:0.999958
.	O	O:0.999860
	
I	O	O:0.999977
think	O	O:0.999939
numpy	O	O:0.997889
broadcasting	O	O:0.996988
(	O	O:0.999968
which	O	O:0.999908
I	O	O:0.999972
thought	O	O:0.999838
should	O	O:0.999792
apply	O	O:0.909135
here	O	O:0.999034
)	O	O:0.999992
goes	O	O:0.999739
from	O	O:0.999992
last	O	O:0.999846
dimension	O	O:0.999956
to	O	O:0.999989
the	O	O:0.999999
first	O	O:0.999299
.	O	O:0.999900
	
So	O	O:0.999981
the	O	O:0.999966
3's	O	O:0.999676
should	O	O:0.999890
match	O	O:0.999885
and	O	O:0.999999
the	O	O:0.999956
operation	O	O:0.996843
should	O	O:0.999905
be	O	O:0.999993
successful	O	O:0.999725
.	O	O:0.999680
	
That's	O	O:0.999572
why	O	O:0.999978
df.T.values	O	O:0.993105
*	O	O:0.999993
df.index.values	O	O:0.977910
will	O	O:0.999876
always	O	O:0.999979
work	O	O:0.999881
.	O	O:0.999905
	
Is	O	O:0.999973
there	O	O:0.999978
any	O	O:0.999989
smart	O	O:0.999766
way	O	O:0.999962
to	O	O:0.999972
do	O	O:1.000000
this	O	O:0.999968
or	O	O:0.999997
to	O	O:0.999993
apply	O	O:0.990253
gensim	O	O:0.998778
from	O	O:0.999952
pandas	O	O:0.999981
data	O	O:0.999958
?	O	O:0.999950
	
Until	O	O:0.999476
I	O	O:0.999988
learn	O	O:0.999416
how	O	O:0.999911
to	O	O:0.999982
use	O	O:0.999992
map	O	B-API:0.957874
/	O	O:0.999956
apply	O	B-API:0.538827
,	O	O:0.999944
looping	O	O:0.999360
through	O	O:0.999360
a	O	O:0.999976
pandas	O	O:0.999696
dataframe	B-API	O:0.993703
is	O	O:0.999971
good	O	O:0.998928
enough	O	O:0.999426
.	O	O:0.999855
	
`	O	O:0.999963
df	O	O:0.998143
[	O	O:0.999981
'	O	O:0.999977
ids	O	O:0.909062
']	O	O:0.999903
.str	B-API	B-API:0.937726
`	O	O:0.999937
allows	O	O:0.999296
us	O	O:0.999982
to	O	O:0.999954
apply	O	O:0.948473
vectorized	O	O:0.998912
string	O	O:0.998824
methods	O	O:0.995295
(	O	O:0.999969
e.g.	O	O:0.999739
,	O	O:0.999982
`	O	O:0.999995
lower	O	O:0.990600
`	O	O:0.999990
,	O	O:0.999609
`	O	O:0.999998
contains	O	O:0.998002
`)	O	O:0.999997
to	O	O:0.999970
the	O	O:0.999998
Series	O	O:0.999032
	
Here	O	O:0.999755
comes	O	O:0.999801
my	O	O:0.999988
problem	O	O:0.999784
,	O	O:0.999993
I	O	O:0.999985
would	O	O:0.999995
like	O	O:0.999953
to	O	O:0.999999
apply	O	O:0.992455
a	O	O:0.999964
PCA	B-API	O:0.701371
on	O	O:0.999980
the	O	O:0.999999
table	O	O:0.999912
which	O	O:0.999916
requires	O	O:0.999917
the	O	O:0.999988
whole	O	O:0.999787
DataFrame	B-API	O:0.998725
to	O	O:0.999987
be	O	O:0.999998
loaded	O	O:0.999705
but	O	O:0.999927
I	O	O:0.999989
don't	O	O:0.999985
have	O	O:0.999620
enough	O	O:0.999938
memory	O	O:0.999962
to	O	O:0.999967
do	O	O:0.999999
that	O	O:0.999886
.	O	O:0.999966
	
The	O	O:0.999812
PCA	B-API	O:0.578566
function	O	O:0.999944
takes	O	O:0.999911
a	O	O:0.999996
numpy	O	O:0.999755
array	O	O:0.999956
or	O	O:0.999994
a	O	O:0.999984
pandas	O	O:0.999876
DataFrame	B-API	O:0.998957
as	O	O:0.999991
input	O	O:0.999886
,	O	O:0.999949
is	O	O:0.999997
there	O	O:0.999937
another	O	O:0.999947
way	O	O:0.999974
to	O	O:0.999985
apply	O	O:0.990797
a	O	O:0.999863
PCA	B-API	O:0.790310
that	O	O:0.999955
would	O	O:0.999995
directly	O	O:0.999974
use	O	O:0.999966
an	O	O:0.999363
object	O	O:0.999914
stored	O	O:0.999727
on	O	O:0.999990
disk	O	O:0.999266
?	O	O:0.999982
	
If	O	O:0.999966
you	O	O:0.999986
look	O	O:0.999849
in	O	O:0.999995
the	O	O:0.999952
[	O	O:0.999946
documentation	O	O:0.999734
]	O	O:0.999720
(	O	O:0.999950
#URL	O	O:0.999740
)	O	O:0.999986
,	O	O:0.999996
you	O	O:0.999990
can	O	O:0.999980
see	O	O:1.000000
the	O	O:0.999997
`	O	O:0.999972
rolling_apply	B-API	B-API:0.999806
`	O	O:0.999942
function	O	O:0.999692
,	O	O:0.999991
which	O	O:0.999949
allows	O	O:0.999768
you	O	O:0.999989
to	O	O:0.999996
apply	O	O:0.993227
any	O	O:0.999687
function	O	O:0.999691
in	O	O:0.999992
a	O	O:0.999996
rolling	O	O:0.886301
way	O	O:0.999390
.	O	O:0.999687
	
Your	O	O:0.998658
function	O	O:0.999935
must	O	O:0.999976
take	O	O:0.999996
the	O	O:1.000000
data	O	O:0.999969
inside	O	O:0.999955
the	O	O:0.999973
"	O	O:0.999973
rolling	O	O:0.709388
window	O	O:0.999621
"	O	O:0.999990
as	O	O:0.999986
an	O	O:0.999855
argument	O	O:0.999715
.	O	O:0.999662
	
It's	O	O:0.999844
not	O	O:0.999983
clear	O	O:0.999885
how	O	O:0.999997
your	O	O:0.999852
hodgesLehmannMean	O	O:0.999346
involves	O	O:0.999973
a	O	O:0.999703
window	O	O:0.997418
.	O	O:0.999826
	
What	O	O:0.998777
is	O	O:0.999948
`	O	O:0.999981
x	O	O:0.997217
`	O	O:0.999986
?	O	O:0.999829
	
Is	O	O:0.999926
it	O	O:0.999988
the	O	O:0.999926
window	O	O:0.999824
or	O	O:0.999994
the	O	O:0.999999
whole	O	O:0.999993
data	O	O:0.999972
set	O	O:0.999853
?	O	O:0.999987
	
Pandas	O	O:0.999788
apply	O	B-API:0.656355
to	O	O:0.999843
dateframe	O	O:0.999999
produces	O	O:0.998952
'	O	O:0.999921
<	O	O:0.999869
built-in	O	O:0.999045
method	O	O:0.999983
values	O	O:0.998860
of	O	O:0.999987
...	O	O:0.999521
	
'	O	O:0.999685
	
The	O	O:0.999849
weirdest	O	O:0.999770
part	O	O:0.999308
is	O	O:0.999987
,	O	O:0.999998
when	O	O:0.999977
I	O	O:0.999998
directly	O	O:0.999992
call	O	O:0.996028
the	O	O:0.999542
function	O	O:0.976926
(	O	O:0.999965
i.e.	O	O:0.999597
`	O	O:0.999982
make_geojson	O	O:0.945634
(	O	O:0.999994
data.loc	O	O:0.997282
[	O	O:0.999945
0	O	O:0.999963
])`	O	O:0.999932
I	O	O:0.999981
do	O	O:0.999986
in	O	O:0.999983
fact	O	O:0.999774
get	O	O:0.999948
the	O	O:0.999976
dictionary	O	O:0.999816
I'm	O	O:0.999955
expecting	O	O:0.999842
.	O	O:0.999919
	
Perhaps	O	O:0.999951
even	O	O:0.999762
weirder	O	O:0.999643
is	O	O:0.999995
that	O	O:0.999841
,	O	O:1.000000
when	O	O:0.999950
I	O	O:0.999996
call	O	O:0.999983
the	O	O:0.999866
functions	O	O:0.995034
I'm	O	O:0.999967
getting	O	O:0.999878
from	O	O:0.999943
the	O	O:0.999952
apply	O	B-API:0.952248
(	O	O:0.999811
e.g.	O	O:0.998340
`	O	O:0.999990
data.output	O	O:0.996965
[	O	O:0.999992
0	O	O:0.999847
]	O	O:0.999524
(	O	O:0.999871
)`	O	O:0.999792
,	O	O:0.999942
`	O	O:0.999992
data.loc	O	O:0.987309
[	O	O:0.999993
0	O	O:0.999911
]	O	O:0.999845
[	O	O:0.999723
'	O	O:0.999981
output	O	O:0.999647
']	O	O:0.999653
(	O	O:0.999939
)`)	O	O:0.999769
I	O	O:0.999985
get	O	O:0.999992
the	O	O:0.999995
equivalent	O	O:0.999844
of	O	O:0.999987
the	O	O:0.999933
following	O	O:0.999666
list	O	O:0.987736
:	O	O:0.999937
	
@USER	O	O:0.999575
I	O	O:0.999980
am	O	O:0.999996
following	O	O:0.999410
the	O	O:0.999975
example	O	O:0.998680
[	O	O:0.999992
here	O	O:0.999794
]	O	O:0.999780
(	O	O:0.999921
#URL	O	O:0.999643
)	O	O:0.999939
,	O	O:0.999964
but	O	O:0.999992
my	O	O:0.999994
equivalent	O	O:0.999898
of	O	O:0.999993
`	O	O:0.999909
f()	B-API	O:0.809871
`	O	O:0.999943
is	O	O:0.999975
returning	O	O:0.999913
a	O	O:0.999835
`	O	O:0.999934
dict	O	O:0.985912
`	O	O:0.999987
.	O	O:0.999578
	
Same	O	O:0.999910
issue	O	O:0.999709
as	O	O:0.999998
this	O	O:0.999266
question	O	O:0.999476
.	O	O:0.999893
	
Yet	O	O:0.999804
it's	O	O:0.999955
possible	O	O:0.999936
to	O	O:0.999998
store	O	O:0.999990
a	O	O:0.999977
`	O	O:0.999977
dict	O	O:0.997789
`	O	O:0.999996
in	O	O:0.999990
a	O	O:0.999979
`	O	O:0.999936
DataFrame	B-API	O:0.825927
`	O	O:0.999979
.	O	O:0.999614
	
I	O	O:0.999950
don't	O	O:0.999978
know	O	O:0.999382
quite	O	O:0.999963
what	O	O:0.999785
you	O	O:0.999997
mean	O	O:0.999992
by	O	O:0.999988
"	O	O:0.999997
a	O	O:0.999935
branch	O	O:0.995413
is	O	O:0.999991
taken	O	O:0.994102
"	O	O:0.999979
--	O	O:0.999954
does	O	O:0.999550
that	O	O:0.999972
mean	O	O:0.999899
:	O	O:0.999994
`	O	O:0.999997
apply	O	B-API:0.929338
`	O	O:0.999983
with	O	O:0.999801
a	O	O:0.999997
returned	O	O:0.996239
`	O	O:0.999985
dict	O	O:0.991904
`	O	O:0.999930
is	O	O:0.999943
not	O	O:0.999994
possible	O	O:0.999952
at	O	O:0.999992
all	O	O:0.999892
?	O	O:0.999951
	
Is	O	O:0.999993
there	O	O:0.999982
another	O	O:0.999937
way	O	O:0.999962
to	O	O:0.999983
operate	O	O:0.999993
on	O	O:0.999998
each	O	O:0.999932
row	O	O:0.999991
while	O	O:0.999970
storing	O	O:0.999746
the	O	O:0.999875
`	O	O:0.999983
dict	O	O:0.998393
`	O	O:0.999998
result	O	O:0.999864
in	O	O:0.999999
a	O	O:0.999997
new	O	O:0.999772
column	O	O:0.999759
?	O	O:0.999955
	
You	O	O:0.999885
can	O	O:0.999992
pass	O	O:0.999985
a	O	O:0.999988
function	O	O:0.999907
to	O	O:0.999998
a	O	O:0.999999
`	O	O:0.999908
groupby	B-API	B-API:0.999279
`	O	O:0.999984
object	O	O:0.999343
using	O	O:0.999904
`	O	O:0.999885
apply	O	B-API:0.999072
`	O	O:0.999345
:	O	O:0.999009
#CODE	O	O:0.999898
	
Then	O	O:0.999760
you	O	O:0.999995
can	O	O:0.999997
apply	O	O:0.997593
a	O	O:0.999958
function	O	O:0.999301
to	O	O:0.999994
each	O	O:0.999988
subset	O	O:0.998222
.	O	O:0.999950
	
It	O	O:0.999941
sounds	O	O:0.999945
like	O	O:0.999958
you	O	O:0.999996
want	O	O:0.999960
either	O	O:0.999960
`	O	O:0.999986
rolling_mean	B-API	B-API:0.999532
`	O	O:0.999992
or	O	O:0.999776
`	O	O:0.999990
expanding_mean	B-API	B-API:0.999171
`	O	O:0.999981
,	O	O:0.999993
both	O	O:0.999983
of	O	O:0.999959
which	O	O:0.999673
are	O	O:0.999992
already	O	O:0.999986
available	O	O:0.999742
in	O	O:0.999820
`	O	O:0.999989
pandas	O	O:0.984866
`	O	O:0.999968
:	O	O:0.999719
#CODE	O	O:0.999908
	
I'm	O	O:0.999857
not	O	O:0.999990
sure	O	O:0.999951
how	O	O:0.999991
you	O	O:0.999985
can	O	O:0.999997
do	O	O:0.999999
things	O	O:0.999969
within	O	O:0.999858
the	O	O:0.999929
function	O	O:0.999726
,	O	O:0.999972
it's	O	O:0.999900
just	O	O:0.999886
not	O	O:0.999996
really	O	O:0.999747
how	O	O:0.999884
groupby	B-API	B-API:0.989089
and	O	O:0.999989
apply	O	B-API:0.752292
work	O	O:0.987625
.	O	O:0.999777
	
`	O	O:0.999825
frame.groupby	O	O:0.637840
(	O	O:0.999971
'	O	O:0.999978
year	O	O:0.998701
')	O	O:0.999812
[[	O	O:0.999363
'	O	O:0.999984
gate	O	O:0.996336
'	O	O:0.999981
,	O	O:0.999978
'	O	O:0.999971
pop	O	O:0.999887
']]`	O	O:0.999575
is	O	O:0.999960
almost	O	O:0.999778
the	O	O:0.999998
same	O	O:0.999905
as	O	O:0.999982
`	O	O:0.999953
frame.groupby	O	O:0.732082
(	O	O:0.999967
'	O	O:0.999945
year	O	O:0.997662
')`	O	O:0.999919
,	O	O:0.999979
it	O	O:0.999994
just	O	O:0.999880
excludes	O	O:0.999952
the	O	O:0.999980
state	O	O:0.999862
column	O	O:0.999635
.	O	O:0.999959
	
You	O	O:0.999967
need	O	O:0.999962
to	O	O:0.999990
use	O	O:0.999994
`	O	O:0.999907
pandas.DataFrame.apply	B-API	B-API:0.999961
`	O	O:0.999969
.	O	O:0.998780
	
The	O	O:0.999960
code	O	O:0.999665
below	O	O:0.999946
will	O	O:0.999929
apply	O	O:0.680958
the	O	O:0.999953
lambda	O	O:0.992935
function	O	O:0.999913
to	O	O:0.999995
each	O	O:0.999998
row	O	O:0.999986
of	O	O:0.999987
`	O	O:0.999991
df	O	O:0.997405
`	O	O:0.999981
.	O	O:0.999226
	
You	O	O:0.999869
could	O	O:0.999968
,	O	O:1.000000
of	O	O:0.999998
course	O	O:0.999843
,	O	O:1.000000
define	O	O:0.999862
a	O	O:0.999995
separate	O	O:0.990479
function	O	O:0.999520
(	O	O:0.999991
if	O	O:0.999994
you	O	O:0.999994
need	O	O:0.999984
to	O	O:0.999997
do	O	O:1.000000
more	O	O:0.999963
something	O	O:0.999934
more	O	O:0.999854
complicated	O	O:0.999583
)	O	O:0.999981
.	O	O:0.999747
	
#CODE	O	O:0.998453
	
Apply	O	O:0.999819
a	O	O:0.999981
lambda	O	O:0.998893
with	O	O:0.999988
a	O	O:0.999986
shift	O	B-API:0.935344
function	O	O:0.999596
in	O	O:0.999969
python	O	O:0.999831
pandas	O	O:0.999808
were	O	O:0.999960
some	O	O:0.999959
null	O	O:0.999772
elements	O	O:0.999876
are	O	O:0.999988
to	O	O:0.999997
be	O	O:0.999998
replaced	O	O:0.999235
	
for	O	O:0.999938
the	O	O:0.999966
last	O	O:0.998642
part	O	O:0.999910
,	O	O:0.999997
in	O	O:0.999997
row	O	O:0.999836
2	O	O:0.999968
period	O	O:0.999878
3	O	O:0.999900
I	O	O:0.999954
was	O	O:0.999960
hoping	O	O:0.999593
this	O	O:0.999723
would	O	O:0.999977
also	O	O:0.999995
subsequently	O	O:0.999991
be	O	O:0.999980
filled	O	O:0.999511
with	O	O:0.999882
the	O	O:0.999985
same	O	O:0.999775
formula	O	O:0.999745
i.e.	O	O:0.999877
period	O	O:0.999485
2	O	O:0.998820
(	O	O:0.999992
0.425	O	O:0.996386
)	O	O:0.999972
x	O	O:0.999582
0.94	O	O:0.995063
.	O	O:0.999841
	
I	O	O:0.999949
am	O	O:0.999998
guessing	O	O:0.999476
I	O	O:0.999977
would	O	O:0.999994
need	O	O:0.999964
to	O	O:1.000000
step	O	O:0.999999
through	O	O:0.999985
each	O	O:0.999962
row	O	O:0.999984
or	O	O:0.999995
repeat	O	O:0.998091
the	O	O:0.999983
lambda	O	O:0.999450
until	O	O:0.999669
there	O	O:0.999783
are	O	O:0.999993
no	O	O:0.999996
more	O	O:0.999663
NaNs	O	O:0.999779
?	O	O:0.999924
	
I	O	O:0.999909
was	O	O:0.999987
assuming	O	O:0.999900
a	O	O:0.999994
lambda	O	O:0.987744
function	O	O:0.999929
would	O	O:0.999944
automatically	O	O:0.999980
apply	O	O:0.885354
the	O	O:0.999194
function	O	O:0.999465
in	O	O:0.999996
a	O	O:1.000000
sort	O	O:0.999275
of	O	O:0.999996
iterrows	B-API	B-API:0.971668
fashion	O	O:0.999722
.	O	O:0.999802
	
(	O	O:0.999594
I'm	O	O:0.999952
not	O	O:0.999995
very	O	O:0.999952
familiar	O	O:0.999795
with	O	O:0.999853
Pandas	O	O:0.999242
,	O	O:0.999959
but	O	O:0.999990
this	O	O:0.999932
describes	O	O:0.999968
a	O	O:0.999997
very	O	O:0.998918
generic	O	O:0.999811
idea	O	O:0.999482
-	O	O:0.999985
you	O	O:0.999962
should	O	O:0.999981
be	O	O:1.000000
able	O	O:0.999990
to	O	O:0.999981
apply	O	O:0.895516
it	O	O:0.999868
.	O	O:0.999934
If	O	O:0.999998
necessary	O	O:0.999967
,	O	O:0.999997
adapt	O	O:0.999455
the	O	O:0.999991
Pandas-specific	O	O:0.997285
functions	O	O:0.999909
.	O	O:0.999917
)	O	O:0.999981
	
The	O	O:0.999834
`	O	O:0.999978
apply	O	B-API:0.996549
`	O	O:0.999887
method	O	O:0.998562
calls	O	O:0.999826
the	O	O:0.999992
lambda	O	O:0.983329
function	O	O:0.999983
once	O	O:0.999701
for	O	O:0.999999
each	O	O:0.999884
row	O	O:0.999932
of	O	O:0.999983
the	O	O:0.999952
Series	O	O:0.999686
,	O	O:0.999952
	
using	O	O:0.999620
Pandas	O	O:0.999071
,	O	O:0.999993
only	O	O:0.999726
use	O	O:0.999967
the	O	O:0.999862
`	O	O:0.999950
apply	O	B-API:0.998406
`	O	O:0.999915
method	O	O:0.999491
if	O	O:0.999997
there	O	O:0.999798
is	O	O:0.999984
no	O	O:0.999971
other	O	O:0.999739
option	O	O:0.999733
.	O	O:0.999817
	
space-efficient	O	O:0.995921
.	O	O:0.999753
	
So	O	O:0.999894
`	O	O:0.999980
zip	O	O:0.975588
`	O	O:0.999995
,	O	O:0.999983
like	O	O:0.999953
`	O	O:0.999992
apply	O	B-API:0.972340
`	O	O:0.999918
,	O	O:0.999827
should	O	O:0.999981
be	O	O:0.999992
avoided	O	O:0.999972
here	O	O:0.999429
if	O	O:0.999977
possible	O	O:0.999576
.	O	O:0.999892
	
Both	O	O:0.998653
functions	O	O:0.999510
works	O	O:0.999293
,	O	O:0.999978
but	O	O:0.999985
they	O	O:0.999864
are	O	O:0.999998
very	O	O:0.999914
slow	O	O:0.999870
if	O	O:0.999992
I	O	O:0.999987
use	O	O:0.999999
them	O	O:0.988852
on	O	O:0.999995
thousands	O	O:0.999953
of	O	O:0.999997
csv	O	O:0.999853
files	O	O:0.999776
.	O	O:0.999795
	
I	O	O:0.999979
think	O	O:0.999936
the	O	O:0.999953
main	O	O:0.999062
bottleneck	O	O:0.999308
is	O	O:0.999991
the	O	O:0.999685
apply	O	B-API:0.938240
method	O	O:0.998093
.	O	O:0.999527
	
Is	O	O:0.999984
there	O	O:0.999960
anyway	O	O:0.999967
to	O	O:0.999990
speed	O	O:0.999980
it	O	O:0.999982
up	O	O:0.999917
?	O	O:0.999966
	
Thank	O	O:0.999047
you	O	O:0.999775
	
You	O	O:0.999901
are	O	O:0.999985
right	O	O:0.999968
that	O	O:0.999975
using	O	O:0.999984
`	O	O:0.999958
apply	O	B-API:0.995344
`	O	O:0.999962
here	O	O:0.979006
is	O	O:0.999999
also	O	O:0.999940
a	O	O:0.999998
potential	O	O:0.992506
bottleneck	O	O:0.999657
,	O	O:0.999984
since	O	O:0.999954
it	O	O:0.999927
is	O	O:0.999999
calling	O	O:0.999667
a	O	O:0.999984
Python	O	O:0.993387
function	O	O:0.999993
once	O	O:0.999796
for	O	O:0.999999
each	O	O:0.999886
row	O	O:0.999916
of	O	O:0.999978
the	O	O:0.999959
dataframe	B-API	O:0.997376
.	O	O:0.999836
	
Instead	O	O:0.999859
of	O	O:0.999988
parsing	O	O:0.999419
the	O	O:0.999994
time	O	O:0.999957
strings	O	O:0.999907
using	O	O:0.999793
`	O	O:0.999926
to_timestamp	B-API	B-API:0.997252
`	O	O:0.999992
,	O	O:0.999965
you	O	O:0.999989
could	O	O:0.999976
instead	O	O:0.999998
use	O	O:0.999983
`	O	O:0.999912
pd.read_csv	B-API	B-API:0.992584
`'	O	O:0.999941
s	O	O:0.999912
built-in	O	O:0.999325
date	O	O:0.998238
string	O	O:0.999819
parsing	O	O:0.998059
ability	O	O:0.996590
:	O	O:0.999918
#CODE	O	O:0.999517
	
Oh	O	O:0.999948
just	O	O:0.999306
noticed	O	O:0.999970
that	O	O:0.999926
you	O	O:0.999991
mentioned	O	O:0.999968
you're	O	O:0.999987
using	O	O:0.999888
`	O	O:0.999980
set_context	O	O:0.843556
`	O	O:0.999994
,	O	O:0.999986
you	O	O:0.999991
can	O	O:0.999995
also	O	O:1.000000
pass	O	O:0.999977
that	O	O:0.999918
information	O	O:0.999990
to	O	O:0.999997
the	O	O:0.999999
`	O	O:0.999967
rc	O	O:0.962614
`	O	O:0.999998
parameter	O	O:0.998958
in	O	O:0.999995
that	O	O:0.999254
function	O	O:0.999906
and	O	O:0.999991
it	O	O:0.999993
will	O	O:0.999842
apply	O	O:0.817727
to	O	O:0.999981
all	O	O:0.999991
figures	O	O:0.999157
.	O	O:0.999781
	
The	O	O:0.999949
main	O	O:0.999279
idea	O	O:0.999761
behind	O	O:0.999027
`	O	O:0.999950
groupby	B-API	B-API:0.999859
`	O	O:0.999979
and	O	O:0.999970
similar	O	O:0.999945
functions	O	O:0.998784
is	O	O:0.999819
"	O	O:0.999927
Split	O	O:0.997635
-	O	O:0.999962
Apply	O	O:0.998462
-	O	O:0.999968
Combine	O	O:0.999242
"	O	O:0.999989
whereby	O	O:0.999449
,	O	O:0.999968
in	O	O:0.999990
general	O	O:0.999345
,	O	O:0.999985
you	O	O:0.999725
:	O	O:0.999974
	
Apply	O	O:0.999904
some	O	O:0.999749
aggregate	O	B-API:0.745550
function	O	O:0.999910
to	O	O:0.999998
each	O	O:0.999995
of	O	O:0.999986
the	O	O:0.999995
individual	O	O:0.999867
groups	O	O:0.999117
,	O	O:0.999944
	
Finally	O	O:0.999391
in	O	O:0.999991
pandas	O	O:0.999901
you	O	O:0.999996
need	O	O:0.999977
to	O	O:0.999998
apply	O	O:0.998335
some	O	O:0.999752
aggregate	O	B-API:0.812251
function	O	O:0.999874
to	O	O:0.999999
your	O	O:0.999996
groups	O	O:0.993982
(	O	O:0.999997
the	O	O:0.999995
apply	O	B-API:0.550941
stage	O	O:0.997999
)	O	O:0.999935
,	O	O:0.999965
we're	O	O:0.999937
going	O	O:0.999748
to	O	O:0.999981
use	O	O:0.999994
`	O	O:0.999893
count()	B-API	B-API:0.915294
`	O	O:0.999998
to	O	O:0.999974
count	O	O:0.999991
the	O	O:0.999996
amount	O	O:0.999977
of	O	O:0.999955
results	O	O:0.999724
.	O	O:0.999967
	
This	O	O:0.999833
line	O	O:0.999919
then	O	O:0.999499
becomes	O	O:0.999597
:	O	O:0.999985
#CODE	O	O:0.999759
	
You	O	O:0.999952
can	O	O:0.999929
use	O	O:0.999997
the	O	O:0.999897
`	O	O:0.999968
xlsxwriter	O	O:0.989245
`	O	O:0.999995
engine	O	O:0.999759
from	O	O:0.999962
Pandas	O	O:0.999940
to	O	O:0.999994
apply	O	O:0.941479
a	O	O:0.999963
conditional	O	O:0.974392
format	O	O:0.999972
to	O	O:0.999995
data	O	O:0.999998
in	O	O:0.999992
an	O	O:0.999996
Excel	O	O:0.999706
worksheet	O	O:0.999665
.	O	O:0.999838
	
See	O	O:0.999968
this	O	O:0.999852
answer	O	O:0.999918
to	O	O:0.999842
[	O	O:0.999998
Easiest	O	O:0.999905
way	O	O:0.999974
to	O	O:0.999994
create	O	O:0.999996
a	O	O:0.999997
color	O	O:0.999863
gradient	O	O:0.960003
on	O	O:0.999995
excel	O	O:0.999838
using	O	O:0.999973
python	O	O:0.990443
/	O	O:0.999927
pandas	O	O:0.999328
?	O	O:0.999960
]	O	O:0.999071
(	O	O:0.999933
#URL	O	O:0.999405
)	O	O:0.999940
.	O	O:0.999740
	
That	O	O:0.999723
may	O	O:0.999992
be	O	O:0.999998
close	O	O:0.999912
to	O	O:0.999994
what	O	O:0.999995
you	O	O:0.999994
want	O	O:0.999991
to	O	O:0.999992
do	O	O:0.999997
.	O	O:0.999948
	
I've	O	O:0.999656
been	O	O:0.998568
through	O	O:0.999971
lots	O	O:0.999932
of	O	O:0.999992
questions	O	O:0.999617
in	O	O:0.999995
stack	O	B-API:0.647984
overflow	O	O:0.999186
but	O	O:0.999978
still	O	O:0.999772
can't	O	O:0.999867
figure	O	O:0.999976
this	O	O:0.999930
out	O	O:0.999868
.	O	O:0.999921
	
I	O	O:0.999924
understand	O	O:0.999610
it's	O	O:0.999705
returning	O	O:0.999283
a	O	O:0.999972
Bool	O	O:0.981513
etc	O	O:0.999872
but	O	O:0.999994
basically	O	O:0.999950
I	O	O:0.999999
want	O	O:0.999971
to	O	O:0.999895
apply	O	O:0.997133
multiple	O	O:0.999661
conditionals	O	O:0.998859
to	O	O:0.999995
a	O	O:0.999999
DataFrame	B-API	O:0.893000
(	O	O:0.999956
If	O	O:0.999968
And	O	O:0.999954
Else	O	O:0.999770
,	O	O:0.999985
Else	O	O:0.999598
if	O	O:0.999988
...	O	O:0.999881
)	O	O:0.999982
But	O	O:0.999974
continue	O	O:0.999849
to	O	O:0.999989
get	O	O:0.999991
Ambiguous	O	O:0.999903
Error	O	O:0.999951
asking	O	O:0.999721
to	O	O:0.999980
you	O	O:0.999997
use	O	O:0.999955
any()	B-API	O:0.952628
,	O	O:0.999927
all()	B-API	O:0.884112
	
I	O	O:0.999951
don't	O	O:0.999974
know	O	O:0.999529
how	O	O:0.999992
to	O	O:0.999982
use	O	O:0.999998
apply	O	B-API:0.626626
,	O	O:0.999922
or	O	O:0.999982
whatever	O	O:0.999971
else	O	O:0.999958
,	O	O:0.999998
to	O	O:0.999986
figure	O	O:0.999996
this	O	O:0.999977
out	O	O:0.999992
by	O	O:0.999992
group	O	O:0.992310
and	O	O:0.999983
return	O	O:0.999430
a	O	O:0.999981
dataframe	B-API	O:0.997483
of	O	O:0.999993
only	O	O:0.999957
those	O	O:0.999991
groups	O	O:0.998723
.	O	O:0.999842
	
I	O	O:0.999992
just	O	O:0.999936
figured	O	O:0.999499
out	O	O:0.999952
the	O	O:0.999949
answer	O	O:0.999103
.	O	O:0.999712
	
I	O	O:0.999805
was	O	O:0.999976
looking	O	O:0.999363
at	O	O:0.999953
apply	O	B-API:0.799381
but	O	O:0.999757
I	O	O:0.999983
needed	O	O:0.999990
to	O	O:0.999962
use	O	O:0.999986
filter	O	O:0.929202
#CODE	O	O:0.999201
	
Create	O	O:0.999881
a	O	O:0.999996
group	O	O:0.999522
by	O	O:0.999987
on	O	O:0.999990
the	O	O:0.999992
column	O	O:0.999949
you	O	O:0.999995
want	O	O:0.999984
to	O	O:0.999997
reduce	O	O:0.999988
over	O	O:0.999236
and	O	O:0.999997
then	O	O:0.999965
apply	O	O:0.959936
a	O	O:0.999889
function	O	O:0.999644
that	O	O:0.999884
returns	O	O:0.999993
the	O	O:0.999996
results	O	O:0.999936
of	O	O:0.999990
the	O	O:0.999996
group	O	O:0.999886
by	O	O:0.999990
an	O	O:0.999990
a	O	O:0.999990
list	O	O:0.993334
per	O	O:0.999931
group	O	O:0.992540
.	O	O:0.999881
	
Note	O	O:0.999958
this	O	O:0.999934
returns	O	O:0.999959
a	O	O:0.999978
series	O	O:0.999040
.	O	O:0.999884
	
Note	O	O:0.999931
that	O	O:0.999920
the	O	O:0.999999
type	O	O:0.999569
on	O	O:0.999998
the	O	O:0.999995
date	O	O:0.998571
is	O	O:0.999955
now	O	O:0.999867
Timestamp	O	O:0.993344
,	O	O:0.999988
not	O	O:0.999922
datetime	O	O:0.996266
.	O	O:0.999836
	
Down	O	O:0.999354
the	O	O:0.999985
other	O	O:0.999964
portion	O	O:0.999880
of	O	O:0.999995
my	O	O:0.999977
code	O	O:0.999788
it	O	O:0.999993
stays	O	O:0.999794
datettime	O	O:0.999767
(	O	O:0.999974
which	O	O:0.999751
is	O	O:0.999995
the	O	O:0.999983
correct	O	O:0.999960
chain	O	O:0.999712
of	O	O:0.999997
events	O	O:0.998947
,	O	O:0.999993
yes	O	O:0.999910
?	O	O:0.999970
)	O	O:0.999977
and	O	O:0.999997
so	O	O:0.999981
now	O	O:0.999919
they	O	O:0.999983
both	O	O:0.999964
reference	O	O:0.999933
the	O	O:0.999996
same	O	O:0.999872
date	O	O:0.996501
but	O	O:0.999997
test	O	O:0.998670
as	O	O:0.999997
not	O	O:0.999984
equal	O	O:0.999937
so	O	O:0.999985
I	O	O:0.999992
can't	O	O:0.999982
apply	O	B-API:0.502504
DataFrame.update	B-API	B-API:0.971912
to	O	O:0.999988
push	O	O:0.999990
data	O	O:0.999992
from	O	O:0.999995
one	O	O:0.999996
to	O	O:0.999997
the	O	O:0.999999
other	O	O:0.999638
.	O	O:0.999892
	
Unfortunately	O	O:0.999928
both	O	O:0.999925
paths	O	O:0.999886
have	O	O:0.999930
strong	O	O:0.999952
data-driven	O	O:0.999690
reasons	O	O:0.999697
why	O	O:0.999985
they	O	O:0.999933
should	O	O:0.999986
be	O	O:0.999998
done	O	O:0.999978
the	O	O:0.999919
way	O	O:0.999945
they	O	O:0.999661
are	O	O:0.999984
.	O	O:0.999919
	
`	O	O:0.999960
df.columns.levels	O	O:0.987069
[	O	O:0.999992
1	O	O:0.999923
]	O	O:0.999944
[	O	O:0.999940
0	O	O:0.999966
]	O	O:0.999940
.to_datetime()	B-API	B-API:0.999634
`	O	O:0.999982
will	O	O:0.999625
convert	O	O:0.999823
the	O	O:0.999998
timestamps	O	O:0.999452
back	O	O:0.999707
to	O	O:0.999993
datetime	O	O:0.999565
.	O	O:0.999796
	
I	O	O:0.999944
can't	O	O:0.999975
find	O	O:0.999902
away	O	O:0.999983
to	O	O:0.999992
apply	O	O:0.992876
this	O	O:0.999730
to	O	O:0.999993
the	O	O:1.000000
whole	O	O:0.999986
level	O	O:0.999916
of	O	O:0.999980
the	O	O:0.999975
index	O	O:0.999977
at	O	O:0.999995
once	O	O:0.999691
.	O	O:0.999955
	
List	O	O:0.998902
comprehension	O	O:0.999412
will	O	O:0.999795
work	O	O:0.999634
but	O	O:0.999986
i	O	O:0.999979
guess	O	O:0.999832
it	O	O:0.999922
isn't	O	O:0.999964
very	O	O:0.999190
`	O	O:0.999996
pandas	O	O:0.987790
`	O	O:0.999988
	
It	O	O:0.999910
should	O	O:0.999934
be	O	O:0.999998
quite	O	O:0.999973
straightforward	O	O:0.999688
to	O	O:0.999986
get	O	O:0.999995
time	O	O:0.999988
objects	O	O:0.999983
into	O	O:0.999912
a	O	O:0.999991
dataframe	B-API	O:0.832644
(	O	O:0.999990
load	O	O:0.999982
them	O	O:0.999880
as	O	O:0.999995
string	O	O:0.999677
,	O	O:0.999998
then	O	O:0.999866
use	O	O:0.999997
an	O	O:0.999989
apply	O	O:0.590523
to	O	O:0.999937
transform	O	O:0.968645
into	O	O:0.999858
a	O	O:0.999995
time	O	O:0.999234
object	O	O:0.999859
)	O	O:0.999962
	
@USER	O	O:0.999606
,	O	O:0.999994
as	O	O:0.999997
a	O	O:0.999976
side	O	O:0.999691
note	O	O:0.999706
,	O	O:0.999996
although	O	O:0.999692
current	O	O:0.998694
method	O	O:0.999833
is	O	O:0.999990
very	O	O:0.999708
quick	O	O:0.999460
,	O	O:0.999978
it	O	O:0.999978
could	O	O:0.999942
benefit	O	O:0.999995
even	O	O:0.999975
more	O	O:0.999962
if	O	O:0.999993
you	O	O:0.999983
apply	O	O:0.587301
**	O	O:0.999941
compiled	O	O:0.994656
**	O	O:0.999973
regexp	O	O:0.999015
.	O	O:0.999816
	
A	O	O:0.999965
simple	O	O:0.999356
`	O	O:0.999977
apply	O	B-API:0.957453
`	O	O:0.999956
can	O	O:0.998856
solve	O	O:0.999993
this	O	O:0.999879
.	O	O:0.999936
	
If	O	O:0.999980
you	O	O:0.999972
can	O	O:0.999992
weather	O	O:0.999999
a	O	O:0.999997
few	O	O:0.999915
seconds	O	O:0.999790
of	O	O:0.999989
processing	O	O:0.999648
,	O	O:0.999992
I	O	O:0.999994
think	O	O:0.999986
this	O	O:0.998785
is	O	O:0.999993
the	O	O:0.999726
simplest	O	O:0.998957
method	O	O:0.999978
available	O	O:0.999932
to	O	O:0.999997
you	O	O:0.999996
without	O	O:0.999975
venturing	O	O:0.999724
outside	O	O:0.998066
`	O	O:0.999987
pandas	O	O:0.983904
`	O	O:0.999990
.	O	O:0.999197
	
#CODE	O	O:0.998453
	
Another	O	O:0.999715
way	O	O:0.999915
to	O	O:0.999963
achieve	O	O:0.999997
this	O	O:0.999808
is	O	O:0.999997
to	O	O:0.999982
use	O	O:0.999996
pd.Series.isin()	B-API	B-API:0.985851
with	O	O:0.998078
map	O	B-API:0.802799
and	O	O:0.999993
apply	O	O:0.606065
,	O	O:0.999776
with	O	O:0.999949
your	O	O:0.999770
sample	O	O:0.999684
it	O	O:0.999994
will	O	O:0.999960
be	O	O:0.999997
like	O	O:0.999590
:	O	O:0.999933
#CODE	O	O:0.999786
	
@USER	O	O:0.999525
,	O	O:0.999984
I	O	O:0.999996
think	O	O:0.999943
speed-wise	O	O:0.999145
,	O	O:0.999995
using	O	O:0.999835
regexp	O	O:0.998739
will	O	O:0.999729
be	O	O:0.999998
faster	O	O:0.999934
as	O	O:0.999837
my	O	O:0.999581
method	O	O:0.999962
requires	O	O:0.998656
3	O	O:0.999946
x	O	O:0.999778
**	O	O:0.999990
apply	O	O:0.553876
**	O	O:0.999967
to	O	O:0.999969
transform	O	O:0.974837
the	O	O:0.999970
string	O	O:0.999794
content	O	O:0.999523
,	O	O:0.999995
efficiency	O	O:0.999968
wise	O	O:0.999710
,	O	O:0.999997
using	O	O:0.999903
**	O	O:0.999602
map	O	B-API:0.985475
**	O	O:0.999983
will	O	O:0.999891
yield	O	O:0.999982
each	O	O:0.999347
**	O	O:0.999990
lambda	O	O:0.999051
**	O	O:0.999966
whereas	O	O:0.999127
**	O	O:0.999964
findall	B-API	B-API:0.954020
**	O	O:0.999979
may	O	O:0.999965
eventually	O	O:0.999947
max	O	O:0.899567
out	O	O:0.999784
memory	O	O:0.999699
	
This	O	O:0.999245
works	O	O:0.999532
,	O	O:0.999987
but	O	O:0.999962
be	O	O:0.999992
very	O	O:0.999980
wary	O	O:0.999789
of	O	O:0.999988
applies	O	O:0.999535
as	O	O:0.999999
they	O	O:0.999750
slow	O	O:0.999926
things	O	O:0.999972
down	O	O:0.999785
as	O	O:1.000000
your	O	O:0.999974
data	O	O:0.999981
grows	O	O:0.999849
in	O	O:0.999973
size	O	O:0.999703
...	O	O:0.999576
	
Regexs	O	O:0.998305
are	O	O:0.999987
so	O	O:0.999993
fast	O	O:0.999346
because	O	O:0.999987
they	O	O:0.999905
are	O	O:0.999999
basically	O	O:0.999982
just	O	O:0.999888
lexical	O	O:0.999491
parsing	O	O:0.996723
.	O	O:0.999409
	
If	O	O:0.999968
you	O	O:0.999980
really	O	O:0.999905
are	O	O:0.999998
that	O	O:0.999965
concerned	O	O:0.999950
about	O	O:0.999937
memory	O	O:0.999179
usage	O	O:0.997534
(	O	O:0.999933
which	O	O:0.999913
shouldn't	O	O:0.999926
be	O	O:0.999996
the	O	O:0.999998
case	O	O:0.999902
here	O	O:0.999926
as	O	O:0.999993
you	O	O:0.999931
are	O	O:0.999987
already	O	O:0.999992
holding	O	O:0.999792
a	O	O:0.999983
DF	O	O:0.999972
in	O	O:0.999961
memory	O	O:0.999954
that	O	O:0.999656
is	O	O:0.999998
bigger	O	O:0.999545
or	O	O:0.999994
equal	O	O:0.999046
in	O	O:0.999997
size	O	O:0.999918
to	O	O:0.999997
the	O	O:1.000000
resulting	O	O:0.999863
df	O	O:0.999680
)	O	O:0.999976
and	O	O:0.999993
want	O	O:0.999968
to	O	O:0.999926
use	O	O:0.999997
apply	O	B-API:0.786911
,	O	O:0.999988
then	O	O:0.999835
at	O	O:1.000000
least	O	O:0.999947
use	O	O:0.999988
regexs	O	O:0.994213
in	O	O:0.999986
your	O	O:0.999948
lambda	O	O:0.997312
function	O	O:0.999877
.	O	O:0.999633
	
This	O	O:0.999815
can	O	O:0.999976
be	O	O:1.000000
accomplished	O	O:0.999975
with	O	O:0.999960
a	O	O:0.999992
one	O	O:0.999974
line	O	O:0.999914
solution	O	O:0.999943
using	O	O:0.999941
Pandas	O	O:0.990569
'	O	O:0.999488
boolean	O	O:0.995789
indexing	O	O:0.998860
.	O	O:0.999611
	
The	O	O:0.999882
one-liner	O	O:0.999820
also	O	O:0.999812
employs	O	O:0.999992
some	O	O:0.999872
other	O	O:0.999763
tricks	O	O:0.998742
:	O	O:0.999973
Pandas	O	O:0.999788
'	O	O:0.999972
`	O	O:0.999951
map	O	B-API:0.993563
`	O	O:0.999979
and	O	O:0.999712
`	O	O:0.999998
diff	O	B-API:0.998595
`	O	O:0.999983
methods	O	O:0.996481
and	O	O:0.999999
a	O	O:0.999980
`	O	O:0.999726
lambda	O	O:0.992541
`	O	O:0.999894
function	O	O:0.998037
.	O	O:0.999931
	
`	O	O:0.999868
map	O	B-API:0.992459
`	O	O:0.999946
is	O	O:0.999968
used	O	O:0.999919
to	O	O:0.999984
apply	O	O:0.942235
the	O	O:0.999579
`	O	O:0.999944
lambda	O	O:0.995690
`	O	O:0.999981
function	O	O:0.999552
to	O	O:0.999999
all	O	O:1.000000
rows	O	O:0.999179
.	O	O:0.999862
	
The	O	O:0.999685
`	O	O:0.999982
lambda	O	O:0.995676
`	O	O:0.999956
function	O	O:0.997254
is	O	O:0.999996
needed	O	O:0.999948
to	O	O:0.999998
create	O	O:0.999993
a	O	O:0.999997
custom	O	O:0.998591
less-then	O	O:0.997070
comparison	O	O:0.999925
that	O	O:0.999977
will	O	O:0.999979
evaluate	O	O:0.999962
NaN	O	O:0.999771
values	O	O:0.999479
to	O	O:0.999951
True	O	O:0.999969
.	O	O:0.999869
	
Please	O	O:0.999703
let	O	O:0.999657
me	O	O:0.999975
know	O	O:0.999575
the	O	O:0.999871
command	O	O:0.999678
,	O	O:0.999996
I	O	O:0.999987
am	O	O:0.999997
trying	O	O:0.999540
with	O	O:0.999794
apply	O	B-API:0.940921
but	O	O:0.999774
it	O	O:0.999936
ll	O	O:0.999995
only	O	O:0.999973
given	O	O:0.999694
the	O	O:0.999986
boolean	O	O:0.997193
expression	O	O:0.999550
.	O	O:0.999878
	
I	O	O:0.999982
want	O	O:0.999980
the	O	O:0.999987
entire	O	O:0.999850
row	O	O:0.999934
with	O	O:0.999915
latest	O	O:0.999650
year	O	O:0.997324
.	O	O:0.999772
	
If	O	O:0.999956
you	O	O:0.999911
are	O	O:0.999997
intending	O	O:0.999974
to	O	O:0.999988
apply	O	O:0.988983
some	O	O:0.999870
sorting	O	O:0.999111
on	O	O:0.999997
the	O	O:0.999996
result	O	O:0.999983
of	O	O:0.999987
`	O	O:0.999989
transform	O	B-API:0.783726
`	O	O:0.999999
then	O	O:0.999818
sort	O	O:0.999990
the	O	O:0.999996
df	O	O:0.999474
first	O	O:0.998285
:	O	O:0.999953
#CODE	O	O:0.999821
	
I	O	O:0.999937
would	O	O:0.999996
like	O	O:0.999947
to	O	O:0.999999
add	O	O:0.999999
a	O	O:0.999996
new	O	O:0.999797
column	O	O:0.999922
,	O	O:0.999987
`	O	O:0.999993
d	O	O:0.998292
`	O	O:0.999996
,	O	O:0.999992
where	O	O:0.999986
I	O	O:0.999994
apply	O	O:0.974980
a	O	O:0.999867
rolling	O	B-API:0.686192
function	O	O:0.999769
,	O	O:0.999993
on	O	O:0.999998
a	O	O:0.999990
fixed	O	O:0.977878
window	O	O:0.999554
(	O	O:0.999955
6	O	O:0.999988
here	O	O:0.999699
)	O	O:0.999993
,	O	O:0.999998
where	O	O:0.999993
I	O	O:0.999992
somehow	O	O:0.999991
,	O	O:0.999983
for	O	O:0.999998
each	O	O:0.997866
row	O	O:0.999519
(	O	O:0.999997
or	O	O:0.999998
date	O	O:0.999330
)	O	O:0.999996
,	O	O:0.999981
fix	O	O:0.999833
the	O	O:0.999982
value	O	O:0.999791
`	O	O:0.999987
c	O	O:0.998202
`	O	O:0.999992
.	O	O:0.999282
	
One	O	O:0.999936
loop	O	O:0.999064
in	O	O:0.999995
this	O	O:0.999974
rolling	O	O:0.972657
function	O	O:0.999736
should	O	O:0.999796
be	O	O:0.999936
(	O	O:0.999990
pseudo	O	O:0.987884
):	O	O:0.999925
#CODE	O	O:0.999482
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999663
to	O	O:0.999995
apply	O	O:0.988863
a	O	O:0.999977
filter	O	O:0.977556
on	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999983
of	O	O:0.999993
values	O	O:0.999844
stored	O	O:0.999771
in	O	O:0.999996
a	O	O:0.999995
pandas	O	O:0.999364
series	O	O:0.999821
object	O	O:0.999502
.	O	O:0.999903
	
The	O	O:0.999955
desired	O	O:0.999640
output	O	O:0.999279
is	O	O:0.999991
the	O	O:0.999985
value	O	O:0.999960
itself	O	O:0.999752
if	O	O:0.999991
it	O	O:0.999991
meets	O	O:0.999889
the	O	O:0.999982
criterion	O	O:0.999914
otherwise	O	O:0.999975
zero	O	O:0.999409
.	O	O:0.999962
	
I	O	O:0.999952
can	O	O:0.999996
only	O	O:0.999984
get	O	O:0.999993
it	O	O:0.999995
to	O	O:0.999997
half	O	O:0.999984
work	O	O:0.998908
:	O	O:0.999992
#CODE	O	O:0.999926
	
Agree	O	O:0.999154
with	O	O:0.999484
@USER	O	O:0.998767
.	O	O:0.999868
	
`	O	O:0.999893
to_datetime	B-API	B-API:0.998192
`	O	O:0.999989
is	O	O:0.999979
another	O	O:0.999676
option	O	O:0.999819
,	O	O:0.999992
though	O	O:0.999826
for	O	O:0.999996
more	O	O:0.999674
esoteric	O	O:0.999746
formats	O	O:0.999849
,	O	O:0.999981
`	O	O:0.999985
strptime	O	O:0.573068
`	O	O:0.999980
and	O	O:0.999814
`	O	O:0.999995
apply	O	B-API:0.995808
`	O	O:0.999956
work	O	O:0.993809
wonders	O	O:0.999706
.	O	O:0.999901
	
What	O	O:0.999831
does	O	O:0.999897
work	O	O:0.999775
is	O	O:0.999999
if	O	O:0.999991
you	O	O:0.999987
apply	O	O:0.731895
the	O	O:0.999973
same	O	O:0.999876
mask	O	O:0.921111
to	O	O:0.999996
the	O	O:1.000000
left	O	O:0.999030
hand	O	O:0.999905
side	O	O:0.999990
like	O	O:0.999836
so	O	O:0.999928
:	O	O:0.999968
#CODE	O	O:0.999866
	
We	O	O:0.999968
can	O	O:0.999937
see	O	O:1.000000
that	O	O:0.999990
my	O	O:0.999998
combined	O	O:0.999903
code	O	O:0.999423
is	O	O:0.999994
marginally	O	O:0.999325
faster	O	O:0.999927
than	O	O:0.999874
yours	O	O:0.999492
so	O	O:0.999966
there's	O	O:0.999821
not	O	O:0.999992
much	O	O:0.999978
saved	O	O:0.999953
by	O	O:0.999974
doing	O	O:0.999965
this	O	O:0.999589
,	O	O:0.999994
normally	O	O:0.999979
you	O	O:0.999989
can	O	O:0.999984
apply	O	O:0.997879
multiple	O	O:0.999929
aggregation	O	O:0.999559
functions	O	O:0.999950
so	O	O:0.999989
that	O	O:0.999983
you	O	O:0.999994
can	O	O:0.999992
return	O	O:0.999997
multiple	O	O:0.999976
columns	O	O:0.999780
,	O	O:0.999988
but	O	O:0.999992
the	O	O:0.999980
problem	O	O:0.999870
here	O	O:0.998796
is	O	O:0.999998
that	O	O:0.999901
you	O	O:0.999982
are	O	O:0.999999
grouping	O	O:0.999977
by	O	O:0.999988
different	O	O:0.999973
columns	O	O:0.999889
so	O	O:0.999994
we	O	O:0.999999
have	O	O:0.999988
to	O	O:0.999998
perform	O	O:0.999957
2	O	O:0.999956
expensive	O	O:0.999892
groupby	B-API	B-API:0.922940
operations	O	O:0.999082
.	O	O:0.999349
	
This	O	O:0.999730
obviously	O	O:0.999925
means	O	O:0.999987
that	O	O:0.999939
I	O	O:0.999998
wanted	O	O:0.999987
to	O	O:0.999921
search	O	O:0.999986
for	O	O:0.999992
words	O	O:0.999905
like	O	O:0.999783
rigour	O	O:0.999226
and	O	O:0.999992
rigour	O	O:0.999566
s	O	O:0.999348
,	O	O:0.999976
en	O	O:0.999953
demeanour	O	O:0.999181
and	O	O:0.999995
demeanour	O	O:0.999703
s	O	O:0.999227
,	O	O:0.999984
centre	O	O:0.998572
and	O	O:0.999988
centre	O	O:0.999727
s	O	O:0.999624
,	O	O:0.999980
h	O	O:0.999902
arbour	O	O:0.997544
and	O	O:0.999980
arbour	O	O:0.998920
,	O	O:0.999837
and	O	O:0.999970
fulfil	O	O:0.995766
.	O	O:0.999493
	
So	O	O:0.999971
the	O	O:0.999967
keywords	O	O:0.999679
list	O	O:0.999274
I	O	O:0.999999
have	O	O:0.999918
is	O	O:0.999990
a	O	O:0.999996
mix	O	O:0.999551
of	O	O:0.999986
complete	O	O:0.995153
and	O	O:0.999998
partial	O	O:0.999458
strings	O	O:0.997786
to	O	O:0.999980
find	O	O:0.999971
.	O	O:0.999950
	
I	O	O:0.999922
would	O	O:0.999996
like	O	O:0.999956
to	O	O:0.999999
apply	O	O:0.965618
the	O	O:0.999948
search	O	O:0.997480
on	O	O:0.999994
this	O	O:0.999972
DataFrame	B-API	O:0.998724
"	O	O:0.999993
df	O	O:0.997634
"	O	O:0.999777
:	O	O:0.999814
#CODE	O	O:0.999777
	
I	O	O:0.999967
think	O	O:0.999934
you've	O	O:0.999776
neglected	O	O:0.999904
to	O	O:0.999995
pass	O	O:0.999941
the	O	O:0.999961
`	O	O:0.999985
axis=1	O	O:0.989412
`	O	O:0.999995
param	O	O:0.999185
to	O	O:0.999997
apply	O	O:0.976430
,	O	O:0.999959
so	O	O:0.999918
it's	O	O:0.999941
operating	O	O:0.999907
column-wise	O	O:0.999442
hence	O	O:0.999961
the	O	O:0.999947
error	O	O:0.999148
.	O	O:0.999776
	
Try	O	O:0.999567
:	O	O:0.999942
`	O	O:0.999989
holdings	O	O:0.998132
[	O	O:0.999988
'	O	O:0.999975
wt	O	O:0.999918
']	O	O:0.999916
=	O	O:0.999396
holdings.groupby	O	O:0.915298
([	O	O:0.999432
'	O	O:0.999810
holdings.portfolio	O	O:0.994738
'	O	O:0.999969
,	O	O:0.999920
'	O	O:0.999985
holdings.date	O	O:0.998188
'])	O	O:0.999683
.apply	B-API	B-API:0.998388
(	O	O:0.999873
lambda	O	O:0.998855
x	O	O:0.999244
:	O	O:0.999947
x	O	O:0.999919
[	O	O:0.999982
'	O	O:0.999993
mv	O	O:0.999933
']	O	O:0.999938
/	O	O:0.999778
sum	O	O:0.991017
(	O	O:0.999982
x	O	O:0.999847
[	O	O:0.999947
'	O	O:0.999991
mv	O	O:0.999934
'])	O	O:0.999888
,	O	O:0.999948
axis=1	O	O:0.999357
)`	O	O:0.999593
	
I'm	O	O:0.999937
looking	O	O:0.999958
into	O	O:0.999713
using	O	O:0.999948
the	O	O:0.999724
`	O	O:0.999191
sklearn.linear_model.LinearRegression	O	B-API:0.800867
`	O	O:0.999962
module	O	O:0.999327
but	O	O:0.999983
am	O	O:0.999996
unsure	O	O:0.999835
on	O	O:0.999985
the	O	O:0.999975
syntax	O	O:0.999984
to	O	O:0.999980
use	O	O:0.999999
the	O	O:0.999905
`	O	O:0.999922
LinearRegression	O	O:0.863327
`	O	O:0.999993
in	O	O:0.999952
the	O	O:0.999990
`	O	O:0.999981
apply	O	B-API:0.976375
`	O	O:0.999800
function	O	O:0.999736
that	O	O:0.999940
BrenBarn	O	O:0.999879
suggested	O	O:0.999679
.	O	O:0.999819
	
I	O	O:0.999970
thought	O	O:0.999886
about	O	O:0.999879
doing	O	O:0.999688
an	O	O:0.999880
`	O	O:0.999963
apply	O	B-API:0.932228
`	O	O:0.999982
of	O	O:0.999979
some	O	O:0.999981
sorts	O	O:0.999774
to	O	O:0.999994
the	O	O:0.999998
`	O	O:0.999984
Category	O	O:0.995594
`	O	O:0.999999
column	O	O:0.999084
after	O	O:0.999926
`	O	O:0.999947
groupby	B-API	B-API:0.999907
`	O	O:0.999982
but	O	O:0.999644
I	O	O:0.999992
am	O	O:0.999994
having	O	O:0.999270
trouble	O	O:0.999936
figuring	O	O:0.999597
out	O	O:0.999967
the	O	O:0.999980
right	O	O:0.996396
function	O	O:0.999819
.	O	O:0.999925
	
As	O	O:0.999971
requested	O	O:0.999943
by	O	O:0.999983
OP	O	O:0.999954
,	O	O:0.999975
if	O	O:0.999989
you	O	O:0.999992
want	O	O:0.999972
to	O	O:0.999995
implement	O	O:0.999993
an	O	O:0.999978
`	O	O:0.999976
apply	O	B-API:0.988236
(	O	O:0.999811
lambda	O	O:0.999294
...	O	O:0.999853
)`	O	O:0.999719
to	O	O:0.999986
all	O	O:1.000000
the	O	O:0.999998
columns	O	O:0.999978
then	O	O:0.999972
you	O	O:0.999999
can	O	O:0.999998
either	O	O:1.000000
explicitly	O	O:0.999989
set	O	O:0.999984
each	O	O:0.999929
column	O	O:0.999960
with	O	O:0.999993
a	O	O:0.999992
line	O	O:0.999632
that	O	O:0.999950
looks	O	O:0.999994
like	O	O:0.999976
the	O	O:0.999998
one	O	O:0.999978
above	O	O:0.999957
replacing	O	O:0.999712
`'	O	O:0.999914
col1	O	O:0.998958
'`	O	O:0.999987
with	O	O:0.999973
each	O	O:0.999871
of	O	O:0.999996
the	O	O:0.999993
column	O	O:0.999978
names	O	O:0.999948
you	O	O:0.999995
wish	O	O:0.999996
to	O	O:1.000000
alter	O	O:0.999992
or	O	O:0.999997
you	O	O:0.999942
can	O	O:0.999998
just	O	O:0.999999
loop	O	O:0.999996
over	O	O:0.999900
the	O	O:0.999993
columns	O	O:0.999932
like	O	O:0.999949
this	O	O:0.999867
:	O	O:0.999980
	
but	O	O:0.999891
how	O	O:0.999968
can	O	O:0.999978
I	O	O:1.000000
apply	O	O:0.988536
this	O	O:0.998725
to	O	O:0.999990
my	O	O:1.000000
entire	O	O:0.999967
data	O	O:0.999986
frame	O	O:0.999992
??	O	O:0.999969
	
can	O	O:0.999885
you	O	O:0.999999
edit	O	O:0.999996
your	O	O:0.999980
answer	O	O:0.999931
to	O	O:0.999996
my	O	O:0.999996
question	O	O:0.999636
,	O	O:0.999996
it	O	O:0.999984
would	O	O:0.999974
be	O	O:0.999999
really	O	O:0.999960
helpful	O	O:0.996629
	
It	O	O:0.999958
varies	O	O:0.998475
;	O	O:0.999996
always	O	O:0.999963
a	O	O:0.999999
good	O	O:0.998794
idea	O	O:0.999942
to	O	O:0.999986
use	O	O:0.999995
`	O	O:0.999911
timeit	O	O:0.808618
`	O	O:0.999998
yourself	O	O:0.999415
to	O	O:0.999998
find	O	O:0.999993
out	O	O:0.999976
,	O	O:0.999996
if	O	O:0.999979
it's	O	O:0.999925
really	O	O:0.999934
a	O	O:0.999987
bottleneck	O	O:0.996144
.	O	O:0.999846
	
For	O	O:0.999879
longer	O	O:0.999870
frames	O	O:0.999448
it'll	O	O:0.999916
be	O	O:0.999997
much	O	O:0.999527
faster	O	O:0.999774
than	O	O:0.999432
`	O	O:0.999981
apply	O	B-API:0.972701
`	O	O:0.999769
,	O	O:0.999788
but	O	O:0.999988
for	O	O:0.999987
smaller	O	O:0.999845
ones	O	O:0.998940
you	O	O:0.999964
won't	O	O:0.999993
be	O	O:1.000000
able	O	O:0.999997
to	O	O:0.999989
amortize	O	O:0.999953
the	O	O:0.999970
startup	O	O:0.999183
cost	O	O:0.996094
and	O	O:0.999998
soit	O	O:0.998115
might	O	O:0.999910
be	O	O:0.999997
a	O	O:0.999999
little	O	O:0.993613
slower	O	O:0.998583
.	O	O:0.999706
	
Use	O	O:0.999446
`	O	O:0.999982
any	O	O:0.998354
`	O	O:0.999976
and	O	O:0.999970
pass	O	O:0.999594
param	O	O:0.996756
`	O	O:0.999985
axis=1	O	O:0.995215
`	O	O:0.999990
which	O	O:0.999788
tests	O	O:0.999887
row-wise	O	O:0.999783
this	O	O:0.999928
will	O	O:0.999970
produce	O	O:0.999980
a	O	O:0.999995
boolean	O	O:0.999007
array	O	O:0.999956
which	O	O:0.999953
when	O	O:0.999912
converted	O	O:0.999860
to	O	O:0.999995
int	O	O:0.999932
will	O	O:0.999874
convert	O	O:0.999289
all	O	O:0.999954
`	O	O:0.999985
True	O	O:0.997954
`	O	O:0.999998
values	O	O:0.999138
to	O	O:0.999989
`	O	O:0.999999
1	O	O:0.997217
`	O	O:0.999989
and	O	O:0.999505
`	O	O:0.999993
False	O	O:0.991913
`	O	O:0.999995
values	O	O:0.998900
to	O	O:0.999995
`	O	O:1.000000
0	O	O:0.998529
`	O	O:0.999991
,	O	O:0.999989
this	O	O:0.999976
will	O	O:0.999917
be	O	O:0.999999
much	O	O:0.999872
faster	O	O:0.999737
than	O	O:0.999755
calling	O	O:0.998081
`	O	O:0.999985
apply	O	B-API:0.982853
`	O	O:0.999938
which	O	O:0.994904
is	O	O:0.999997
going	O	O:0.999398
to	O	O:0.999971
iterate	O	O:0.999891
row-wise	O	O:0.996113
and	O	O:0.999990
will	O	O:0.999918
be	O	O:0.999994
very	O	O:0.999744
slow	O	O:0.990305
:	O	O:0.999947
#CODE	O	O:0.999763
	
Using	O	O:0.999566
the	O	O:0.999774
`	O	O:0.999956
%timeit	O	O:0.760928
`	O	O:0.999991
module	O	O:0.999839
running	O	O:0.999596
in	O	O:0.999894
IPython	O	O:0.998870
Notebook	O	O:0.999955
the	O	O:0.999939
`	O	O:0.999977
for	O	O:0.999264
`	O	O:0.999995
loop	O	O:0.999408
compared	O	O:0.999852
to	O	O:0.999989
the	O	O:0.999997
`	O	O:0.999959
apply	O	B-API:0.923236
.	O	O:0.999771
	
(	O	O:0.999753
lambda	O	O:0.999774
...	O	O:0.999762
)`	O	O:0.998226
is	O	O:0.999993
a	O	O:0.999994
little	O	O:0.999824
over	O	O:0.999549
3	O	O:0.999948
times	O	O:0.999884
as	O	O:0.999994
fast	O	O:0.997297
.	O	O:0.999880
	
#CODE	O	O:0.998453
	
@USER	O	O:0.995663
is	O	O:0.999991
there	O	O:0.999968
a	O	O:0.999995
reason	O	O:0.999441
you	O	O:0.999968
don't	O	O:0.999993
want	O	O:0.999989
to	O	O:0.999992
use	O	O:1.000000
a	O	O:0.999944
loop	O	O:0.996517
?	O	O:0.999952
	
According	O	O:0.999524
to	O	O:0.999981
the	O	O:0.999998
`	O	O:0.999974
%timeit	O	O:0.826019
`	O	O:0.999994
module	O	O:0.999839
running	O	O:0.999427
in	O	O:0.999890
IPython	O	O:0.999214
Notebook	O	O:0.999913
,	O	O:0.999993
the	O	O:0.999979
for	O	O:0.999960
loop	O	O:0.999455
implementation	O	O:0.999430
is	O	O:0.999997
over	O	O:0.998617
3	O	O:0.999976
times	O	O:0.999887
as	O	O:0.999998
fast	O	O:0.999756
as	O	O:0.999996
a	O	O:0.999978
lambda	O	O:0.997139
apply	O	B-API:0.724753
.	O	O:0.996976
	
I	O	O:0.999942
thought	O	O:0.999888
the	O	O:0.999857
for	O	O:0.999922
loop	O	O:0.995395
is	O	O:0.999988
less	O	O:0.999688
efficient	O	O:0.999927
as	O	O:0.999988
l	O	O:0.999390
thought	O	O:0.999230
the	O	O:0.999978
dataframe	B-API	O:0.996359
apply	O	B-API:0.737704
is	O	O:0.999949
optimized	O	O:0.995240
for	O	O:0.999884
matrix	O	O:0.999866
type	O	O:0.998674
operation	O	O:0.999968
like	O	O:0.999740
MATLAB	O	O:0.999606
.	O	O:0.999802
	
I	O	O:0.999990
probably	O	O:0.999846
use	O	O:0.999975
your	O	O:0.998920
approach	O	O:0.999540
and	O	O:0.999990
stitch	O	O:0.999496
the	O	O:0.999978
result	O	O:0.999975
back	O	O:0.999479
to	O	O:0.999994
the	O	O:0.999999
main	O	O:0.999460
dataframe	B-API	O:0.998271
.	O	O:0.999937
	
What's	O	O:0.998055
is	O	O:0.999970
the	O	O:0.999989
most	O	O:0.999807
efficient	O	O:0.999910
to	O	O:0.999986
stitch	O	O:0.999955
that	O	O:0.999950
column	O	O:0.999994
vector	O	O:0.999998
back	O	O:0.999518
to	O	O:0.999998
the	O	O:1.000000
data	O	O:0.999953
frame	O	O:0.999991
	
I	O	O:0.999978
know	O	O:0.999927
that	O	O:0.999925
this	O	O:0.999988
very	O	O:0.999982
possible	O	O:0.999948
to	O	O:0.999991
do	O	O:0.999999
with	O	O:0.999978
an	O	O:0.999957
apply	O	B-API:0.905800
command	O	O:0.998190
but	O	O:0.999918
I	O	O:0.999982
would	O	O:0.999997
like	O	O:0.999944
to	O	O:0.999999
keep	O	O:0.999994
this	O	O:0.999972
as	O	O:0.999999
vectorized	O	O:0.999878
as	O	O:0.999995
possible	O	O:0.999473
so	O	O:0.999995
that	O	O:0.998821
is	O	O:0.999992
not	O	O:0.999990
what	O	O:0.999960
I	O	O:0.999990
am	O	O:0.999998
looking	O	O:0.998270
for	O	O:0.999928
.	O	O:0.999602
	
So	O	O:0.999963
far	O	O:0.999865
I	O	O:0.999976
haven't	O	O:0.999771
found	O	O:0.999748
any	O	O:0.999984
solutions	O	O:0.999805
anywhere	O	O:0.999981
else	O	O:0.999952
on	O	O:0.999995
stack	O	O:0.552239
overflow	O	O:0.999562
.	O	O:0.999888
	
I	O	O:0.999960
knew	O	O:0.999805
there	O	O:0.999523
had	O	O:0.999897
to	O	O:0.999996
be	O	O:1.000000
a	O	O:0.999997
way	O	O:0.999833
to	O	O:0.999980
do	O	O:0.999999
this	O	O:0.999972
without	O	O:0.999920
resorting	O	O:0.999684
to	O	O:0.999971
an	O	O:0.999999
apply	O	B-API:0.845080
function	O	O:0.998887
.	O	O:0.999602
	
Thank	O	O:0.999536
you	O	O:0.999950
so	O	O:0.999993
much	O	O:0.999565
.	O	O:0.999942
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999984
to	O	O:0.999997
mutate	O	O:0.999996
a	O	O:0.999989
series	O	O:0.998690
(	O	O:0.999996
column	O	O:0.999955
)	O	O:0.999985
in	O	O:0.999993
pandas	O	O:0.999846
,	O	O:0.999997
the	O	O:0.999965
pattern	O	O:0.997654
is	O	O:0.999990
to	O	O:0.999990
`	O	O:1.000000
apply	O	B-API:0.956991
`	O	O:0.999992
a	O	O:0.999349
function	O	O:0.999818
to	O	O:0.999968
it	O	O:0.999988
(	O	O:0.999998
that	O	O:0.999982
updates	O	O:0.999959
on	O	O:0.999995
element	O	O:0.999892
in	O	O:0.999994
the	O	O:0.999995
series	O	O:0.999967
at	O	O:0.999997
a	O	O:0.999998
time	O	O:0.999760
)	O	O:0.999984
,	O	O:0.999977
and	O	O:0.999996
to	O	O:0.999999
then	O	O:0.999980
assign	O	O:0.999983
that	O	O:0.999992
series	O	O:0.999998
back	O	O:0.999944
into	O	O:0.999899
into	O	O:0.999462
the	O	O:0.999913
dataframe	B-API	O:0.975015
#CODE	O	O:0.999542
	
While	O	O:0.999942
this	O	O:0.999924
will	O	O:0.999969
work	O	O:0.999967
,	O	O:0.999998
`	O	O:0.999997
apply	O	B-API:0.971734
`	O	O:0.999844
is	O	O:0.998752
the	O	O:0.999986
method	O	O:0.999935
of	O	O:0.999990
last	O	O:0.998026
resort	O	O:0.999298
:	O	O:0.999952
it	O	O:0.999993
tends	O	O:0.999958
to	O	O:0.999993
be	O	O:0.999999
pretty	O	O:0.999818
slow	O	O:0.998069
.	O	O:0.999868
	
In	O	O:0.999983
this	O	O:0.999968
case	O	O:0.999984
,	O	O:0.999999
we	O	O:0.999996
can	O	O:0.999987
reach	O	O:0.999972
for	O	O:0.999992
the	O	O:0.999956
vectorized	O	O:0.998854
`	O	O:0.999964
dt	O	B-API:0.930770
`	O	O:0.999991
accessor	O	O:0.997648
,	O	O:0.999989
and	O	O:0.999990
get	O	O:0.999972
the	O	O:0.999989
times	O	O:0.999877
via	O	O:0.999901
`	O	O:0.999991
df	O	O:0.998783
[	O	O:0.999994
"	O	O:0.999990
date	O	O:0.997305
"]	O	O:0.999918
.dt	B-API	B-API:0.991311
.time	B-API	B-API:0.996263
`	O	O:0.999847
(	O	O:0.999810
after	O	O:0.999963
we've	O	O:0.999506
ensured	O	O:0.999408
the	O	O:0.999983
column	O	O:0.999131
is	O	O:0.999992
datetimelike	O	O:0.998601
,	O	O:0.999985
anyway	O	O:0.999920
.	O	O:0.999939
)	O	O:0.999957
	
but	O	O:0.999826
can't	O	O:0.999876
figure	O	O:0.999900
out	O	O:0.999974
how	O	O:0.999983
to	O	O:0.999989
apply	O	O:0.997092
this	O	O:0.999794
to	O	O:0.999995
my	O	O:0.999999
problem	O	O:0.999565
?	O	O:0.999969
	
@USER	O	O:0.999329
I	O	O:0.999960
am	O	O:0.999997
getting	O	O:0.999230
an	O	O:0.999972
Nan	O	O:0.999215
value	O	O:0.999979
if	O	O:0.999986
I	O	O:0.999994
apply	O	O:0.967353
this	O	O:0.995031
map	O	B-API:0.881784
function	O	O:0.999973
directly	O	O:0.999837
to	O	O:0.999994
my	O	O:0.999999
data_org	O	O:0.999683
data	O	O:0.999965
frame	O	O:0.999992
.	O	O:0.999944
	
@USER	O	O:0.999464
Sounds	O	O:0.999935
like	O	O:0.999953
the	O	O:0.999983
apply	O	B-API:0.933944
isn't	O	O:0.997487
working	O	O:0.994949
.	O	O:0.999852
	
Can	O	O:0.999823
you	O	O:0.999981
post	O	O:0.999889
the	O	O:0.999998
exact	O	O:0.999970
code	O	O:0.999924
you	O	O:0.999995
have	O	O:0.999967
?	O	O:0.999989
	
If	O	O:0.999953
you're	O	O:0.999972
using	O	O:0.999981
a	O	O:0.999977
full	O	O:0.994931
dataframe	B-API	O:0.998274
,	O	O:0.999990
you	O	O:0.999972
would	O	O:0.999995
have	O	O:0.999997
to	O	O:0.999999
do	O	O:1.000000
something	O	O:0.999955
like	O	O:0.999107
:	O	O:0.999991
DF	O	O:0.999992
[	O	O:0.999976
'	O	O:0.999984
COL	O	O:0.999761
']	O	O:0.999880
=	O	O:0.998502
DF	O	O:0.999977
[	O	O:0.999919
'	O	O:0.999982
COL	O	O:0.999759
']	O	O:0.999846
.apply	B-API	B-API:0.999390
(	O	O:0.999887
lambda	O	O:0.998842
x	O	O:0.997782
:	O	O:0.999929
.......	O	O:0.998804
	
apply	O	B-API:0.683120
to	O	O:0.999931
the	O	O:0.999998
entire	O	O:0.999889
dataframe	B-API	O:0.999802
a	O	O:0.999995
user-defined	O	O:0.983945
function	O	O:0.999883
involving	O	O:0.999644
another	O	O:0.999879
dataframe	B-API	O:0.993534
in	O	O:0.999967
pandas	O	O:0.999722
	
Also	O	O:0.999837
,	O	O:0.999995
I	O	O:0.999985
am	O	O:0.999995
always	O	O:0.999824
confused	O	O:0.999972
by	O	O:0.999949
apply	O	B-API:0.757652
and	O	O:0.999753
applymap	B-API	B-API:0.989467
,	O	O:0.999967
what	O	O:0.997977
is	O	O:0.999983
the	O	O:0.999978
difference	O	O:0.999706
and	O	O:0.999989
when	O	O:0.999867
should	O	O:0.999923
use	O	O:0.999999
one	O	O:0.999979
over	O	O:0.999567
the	O	O:0.999977
other	O	O:0.999591
?	O	O:0.999935
	
Never	O	O:0.999637
used	O	O:0.998941
'	O	O:0.999975
where	O	O:0.999625
'	O	O:0.999960
before	O	O:0.999888
,	O	O:0.999990
thank	O	O:0.999703
you	O	O:0.999980
very	O	O:0.999928
much	O	O:0.999668
!	O	O:0.999916
	
is	O	O:0.999965
there	O	O:0.999918
any	O	O:0.999890
other	O	O:0.999687
method	O	O:0.999907
to	O	O:0.999978
do	O	O:0.999998
it	O	O:0.999982
?	O	O:0.999958
	
maybe	O	O:0.999926
using	O	O:0.999885
apply	O	B-API:0.921127
?	O	O:0.997640
	
@USER	O	O:0.999161
apply	O	B-API:0.664446
won't	O	O:0.999690
be	O	O:0.999990
as	O	O:0.999998
efficient	O	O:0.997346
/	O	O:0.999993
fast	O	O:0.999233
as	O	O:0.999997
vectorizing	O	O:0.999314
or	O	O:0.999990
using	O	O:0.999941
where	O	O:0.999627
,	O	O:0.999972
since	O	O:0.999976
basically	O	O:0.999842
it	O	O:0.999998
has	O	O:0.999963
to	O	O:0.999995
loop	O	O:0.999993
through	O	O:0.999602
within	O	O:0.999687
python	O	O:0.999948
just	O	O:0.999978
like	O	O:0.999984
you	O	O:0.999993
do	O	O:0.999982
in	O	O:0.999999
your	O	O:0.999908
example	O	O:0.999897
code	O	O:0.999785
(	O	O:0.999992
rather	O	O:0.999981
than	O	O:0.999931
using	O	O:0.999973
much	O	O:0.997670
faster	O	O:0.999516
numpy	O	O:0.999336
/	O	O:0.999906
C	O	O:0.999199
)	O	O:0.999942
.	O	O:0.999566
	
Thanks	O	O:0.999184
@USER	O	O:0.999798
could	O	O:0.999843
I	O	O:1.000000
just	O	O:0.999993
check	O	O:0.999892
if	O	O:0.999994
you	O	O:0.999990
have	O	O:0.999986
any	O	O:0.999999
thoughts	O	O:0.999927
on	O	O:0.999988
the	O	O:0.999996
first	O	O:0.999753
question	O	O:0.999556
?	O	O:0.999953
	
Are	O	O:0.999945
there	O	O:0.999981
more	O	O:0.999887
efficient	O	O:0.999948
ways	O	O:0.999919
to	O	O:0.999999
pick	O	O:0.999997
items	O	O:0.999966
from	O	O:0.999993
the	O	O:0.999982
date	O	O:0.999477
index	O	O:0.999944
other	O	O:0.999972
than	O	O:0.999967
the	O	O:0.999986
four	O	O:0.999708
I've	O	O:0.999888
described	O	O:0.999864
above	O	O:0.999454
?	O	O:0.999976
..	O	O:0.999626
and	O	O:0.999996
thanks	O	O:0.999827
for	O	O:0.999915
explaining	O	O:0.998390
the	O	O:0.999671
get_loc_level	O	O:0.865266
.	O	O:0.999824
	
Do	O	O:0.999955
you	O	O:0.999993
any	O	O:0.999989
use	O	O:0.999985
case	O	O:0.999730
examples	O	O:0.999756
you	O	O:0.999966
could	O	O:0.999994
share	O	O:0.999910
.	O	O:0.999952
	
Where	O	O:0.999555
might	O	O:0.999886
I	O	O:0.999995
apply	O	O:0.884376
it	O	O:0.998917
?	O	O:0.999869
	
Some	O	O:0.999772
timings	O	O:0.999682
indicate	O	O:0.999868
that	O	O:0.999959
both	O	O:0.999990
my	O	O:0.999995
solution	O	O:0.999826
as	O	O:0.999999
that	O	O:0.999896
of	O	O:0.999994
@USER	O	O:0.998135
is	O	O:0.999996
much	O	O:0.998435
faster	O	O:0.999880
than	O	O:0.999837
the	O	O:0.999938
apply	O	B-API:0.924452
(	O	O:0.999815
pd.Series	B-API	B-API:0.989208
)	O	O:0.999956
approach	O	O:0.995278
(	O	O:0.999900
and	O	O:0.999985
the	O	O:0.999983
difference	O	O:0.996810
between	O	O:0.999482
both	O	O:0.999252
is	O	O:0.999983
negligible	O	O:0.987313
):	O	O:0.999939
#CODE	O	O:0.999525
	
Python	O	O:0.999659
pandas	O	O:0.999943
apply	O	O:0.636611
on	O	O:0.999965
more	O	O:0.999765
columns	O	O:0.999811
	
How	O	O:0.999897
can	O	O:0.999962
I	O	O:1.000000
generate	O	O:0.999993
more	O	O:0.999911
columns	O	O:0.999948
in	O	O:0.999994
a	O	O:0.999998
dataframe	B-API	O:0.999190
using	O	O:0.999942
apply	O	B-API:0.875892
with	O	O:0.999306
more	O	O:0.999467
columns	O	O:0.999780
?	O	O:0.999964
	
My	O	O:0.999950
df	O	O:0.994945
is	O	O:0.999782
:	O	O:0.999852
#CODE	O	O:0.999842
	
But	O	O:0.999960
what	O	O:0.999957
if	O	O:0.999991
I	O	O:0.999999
want	O	O:0.999987
to	O	O:0.999832
use	O	O:0.999999
more	O	O:0.999144
than	O	O:0.999868
two	O	O:0.999997
columns	O	O:0.999974
at	O	O:0.999991
apply	O	B-API:0.601920
?	O	O:0.999622
	
#CODE	O	O:0.998453
	
Using	O	O:0.999018
the	O	O:0.999762
Series	O	O:0.999367
constructor	O	O:0.999728
within	O	O:0.999916
the	O	O:0.999988
apply	O	B-API:0.720941
usually	O	O:0.999267
does	O	O:0.999516
the	O	O:0.999947
trick	O	O:0.999027
:	O	O:0.999962
#CODE	O	O:0.999897
	
Thank	O	O:0.998950
you	O	O:0.999988
this	O	O:0.999802
is	O	O:0.999998
very	O	O:0.999436
helpful	O	O:0.999617
reference	O	O:0.999690
.	O	O:0.999715
	
I	O	O:0.999844
had	O	O:0.999955
tried	O	O:0.999059
similar	O	O:0.999414
methods	O	O:0.998203
but	O	O:0.999710
was	O	O:0.999933
too	O	O:0.999888
narrow	O	O:0.999895
minded	O	O:0.999927
on	O	O:0.999997
solely	O	O:0.999914
using	O	O:0.999899
the	O	O:0.999241
Datetimeindex	B-API	B-API:0.709494
where	O	O:0.999625
groupby	B-API	B-API:0.962450
,	O	O:0.999970
map	O	B-API:0.975958
,	O	O:0.999959
and	O	O:0.999985
apply	O	B-API:0.542766
were	O	O:0.996621
running	O	O:0.999453
into	O	O:0.998443
errors	O	O:0.999240
.	O	O:0.999666
	
I	O	O:0.999949
see	O	O:0.999995
this	O	O:0.999684
option	O	O:0.999992
when	O	O:0.999857
I	O	O:0.999999
want	O	O:0.999996
to	O	O:0.999958
apply	O	O:0.993358
a	O	O:0.999983
scalar	O	O:0.997964
result	O	O:0.999725
,	O	O:0.999987
but	O	O:0.999967
I	O	O:0.999982
couldn't	O	O:0.999954
figure	O	O:0.999512
out	O	O:0.999967
how	O	O:0.999988
to	O	O:0.999998
put	O	O:0.999994
df	O	O:0.999933
into	O	O:0.999818
lambda	O	O:0.999859
like	O	O:0.999733
this	O	O:0.998859
:	O	O:0.999978
#CODE	O	O:0.999845
	
you	O	O:0.999930
can	O	O:0.999969
use	O	O:0.999998
`	O	O:0.999980
apply	O	B-API:0.983231
`	O	O:0.999983
column-wise	O	O:0.985083
on	O	O:0.999996
the	O	O:0.999989
whole	O	O:0.999824
dataframe	B-API	O:0.997404
.	O	O:0.999900
	
#CODE	O	O:0.998453
	
@USER	O	O:0.999146
you	O	O:0.999903
might	O	O:0.999975
be	O	O:1.000000
able	O	O:0.999997
to	O	O:0.999978
use	O	O:0.999992
slicing	O	O:0.993030
to	O	O:0.999957
index	O	O:0.999999
a	O	O:0.999998
range	O	O:0.999971
of	O	O:0.999997
columns	O	O:0.999806
in	O	O:0.999999
a	O	O:0.999999
single	O	O:0.998473
operation	O	O:0.999791
and	O	O:0.999992
an	O	O:0.999985
`	O	O:0.999953
apply	O	B-API:0.990593
`	O	O:0.999834
.	O	O:0.998060
	
Check	O	O:0.999521
out	O	O:0.999868
the	O	O:0.999987
Pandas	O	O:0.999702
documentation	O	O:0.999937
as	O	O:0.999999
well	O	O:0.999911
as	O	O:0.999995
the	O	O:0.999955
numerous	O	O:0.999498
SO	O	O:0.999962
questions	O	O:0.999714
for	O	O:0.999948
better	O	O:0.999201
guidance	O	O:0.998806
.	O	O:0.999722
	
@USER	O	O:0.998690
Hello	O	O:0.999778
,	O	O:0.999990
I	O	O:0.999997
have	O	O:0.999969
actually	O	O:0.999962
came	O	O:0.999946
across	O	O:0.999937
groupby	B-API	B-API:0.985244
in	O	O:0.999973
the	O	O:0.999847
documentation	O	O:0.999557
/	O	O:0.999937
cookbook	O	O:0.999696
/	O	O:0.999983
tutorials	O	O:0.999310
.	O	O:0.999850
	
I	O	O:0.999951
felt	O	O:0.999906
like	O	O:0.999608
it	O	O:0.999921
is	O	O:0.999997
what	O	O:0.999768
I	O	O:0.999993
am	O	O:0.999999
looking	O	O:0.998844
for	O	O:0.999980
,	O	O:0.999984
however	O	O:0.999767
I	O	O:0.999879
was	O	O:0.999956
not	O	O:0.999973
able	O	O:0.999981
to	O	O:0.999993
apply	O	O:0.977127
it	O	O:0.999953
on	O	O:0.999989
my	O	O:0.999981
problem	O	O:0.999601
.	O	O:0.999898
	
You	O	O:0.999884
can	O	O:0.999992
pass	O	O:0.999970
a	O	O:0.999999
dictionary	O	O:0.999878
to	O	O:0.999955
`	O	O:0.999999
aggfunc	O	O:0.759417
`	O	O:0.999990
with	O	O:0.999917
what	O	O:0.999951
functions	O	O:0.999962
you	O	O:0.999990
want	O	O:0.999985
to	O	O:0.999997
apply	O	O:0.976816
for	O	O:0.999968
each	O	O:0.999310
column	O	O:0.999911
like	O	O:0.999963
this	O	O:0.999722
:	O	O:0.999971
	
Why	O	O:0.999903
can't	O	O:0.999846
I	O	O:0.999999
apply	O	O:0.970580
shift	O	B-API:0.941825
from	O	O:0.999193
within	O	O:0.999869
a	O	O:0.999998
pandas	O	O:0.996460
function	O	O:0.999926
?	O	O:0.999903
	
Try	O	O:0.999920
passing	O	O:0.999357
the	O	O:0.999966
frame	O	O:0.999990
to	O	O:0.999994
the	O	O:0.999997
function	O	O:0.999973
,	O	O:0.999992
rather	O	O:0.999989
than	O	O:0.999958
using	O	O:0.999920
`	O	O:0.999952
apply	O	B-API:0.997937
`	O	O:0.999390
(	O	O:0.999626
I	O	O:0.999984
am	O	O:0.999990
not	O	O:0.999944
sure	O	O:0.999958
why	O	O:0.999974
`	O	O:0.999990
apply	O	B-API:0.977503
`	O	O:0.999923
doesn't	O	O:0.998827
work	O	O:0.999960
,	O	O:0.999999
even	O	O:0.999754
column-wise	O	O:0.996176
):	O	O:0.999966
#CODE	O	O:0.999597
	
have	O	O:0.999650
not	O	O:0.999982
seen	O	O:0.999983
this	O	O:0.999995
anywhere	O	O:0.999968
in	O	O:0.999986
the	O	O:0.999992
pandas	O	O:0.999523
documentation	O	O:0.999772
!	O	O:0.999887
	
will	O	O:0.999734
pursue	O	O:0.999703
further	O	O:0.999155
,	O	O:0.999978
but	O	O:0.999679
is	O	O:0.999995
this	O	O:0.999967
performant	O	O:0.999913
on	O	O:0.999988
par	O	O:0.999951
with	O	O:0.999931
apply	O	B-API:0.796181
?	O	O:0.999754
	
My	O	O:0.999927
assumption	O	O:0.998588
is	O	O:0.999987
that	O	O:0.999928
this	O	O:0.999859
is	O	O:0.999998
more	O	O:0.999536
performant	O	O:0.999900
than	O	O:0.999947
apply	O	O:0.585069
as	O	O:0.999369
(	O	O:0.999853
if	O	O:0.999992
?	O	O:0.999982
)	O	O:0.999993
the	O	O:0.999970
shift	O	B-API:0.895052
and	O	O:0.999956
sum	O	O:0.999533
are	O	O:0.999942
vectorized	O	O:0.999259
.	O	O:0.999642
	
Apply	O	O:0.999898
a	O	O:0.999904
function	O	O:0.999765
to	O	O:0.999993
a	O	O:0.999999
DataFrame	B-API	O:0.995895
that	O	O:0.999633
is	O	O:0.999998
intended	O	O:0.999812
to	O	O:0.999976
operate	O	O:0.999868
	
Where	O	O:0.998440
is	O	O:0.999968
it	O	O:0.999993
that	O	O:0.999958
I	O	O:1.000000
have	O	O:0.999993
to	O	O:0.999983
apply	O	O:0.961710
`	O	O:0.999965
toarray	O	O:0.946085
`	O	O:0.999997
or	O	O:0.999674
`	O	O:0.999995
todense	O	O:0.943858
`	O	O:0.999990
?	O	O:0.999717
	
This	O	O:0.998887
is	O	O:0.999908
one	O	O:0.999936
method	O	O:0.999935
,	O	O:0.999983
I'm	O	O:0.999992
trying	O	O:0.999904
to	O	O:0.999993
figure	O	O:0.999983
out	O	O:0.999986
a	O	O:0.999965
vectorised	O	O:0.997889
method	O	O:0.999928
,	O	O:0.999998
basically	O	O:0.999989
you	O	O:0.999995
define	O	O:0.999966
a	O	O:0.999984
function	O	O:0.999844
that	O	O:0.999901
takes	O	O:0.999996
your	O	O:0.999908
row	O	O:0.999733
and	O	O:0.999998
then	O	O:0.999944
call	O	O:0.999810
apply	O	O:0.864270
,	O	O:0.999678
passing	O	O:0.998302
the	O	O:0.999041
function	O	O:0.999859
name	O	O:0.999836
and	O	O:0.999995
param	O	O:0.999799
`	O	O:0.999938
axis=1	O	O:0.994291
`	O	O:0.999993
to	O	O:0.999949
apply	O	O:0.974518
row-wise	O	O:0.980085
.	O	O:0.999274
	
The	O	O:0.999944
color_cols	O	O:0.967238
is	O	O:0.999998
just	O	O:0.999777
a	O	O:1.000000
list	O	O:0.997386
of	O	O:0.999999
your	O	O:0.999852
color	O	O:0.999972
column	O	O:0.999970
names	O	O:0.999958
defined	O	O:0.999773
by	O	O:0.999933
:	O	O:0.999934
`	O	O:0.999991
color_cols	O	O:0.995277
=	O	O:0.999872
[	O	O:0.999984
col	O	O:0.998794
for	O	O:0.999989
col	O	O:0.998096
in	O	O:0.999986
df	O	O:0.999752
if	O	O:0.999963
'	O	O:0.999982
color	O	O:0.999811
'	O	O:0.999939
in	O	O:0.999986
col	O	O:0.998580
]`	O	O:0.999953
#CODE	O	O:0.998053
	
The	O	O:0.999098
mask	O	O:0.665025
method	O	O:0.999896
is	O	O:0.999995
over	O	O:0.999759
2x	O	O:0.999786
faster	O	O:0.999733
than	O	O:0.999821
the	O	O:0.999985
query	O	O:0.996325
and	O	O:0.999820
eval	O	B-API:0.886173
method	O	O:0.999642
for	O	O:0.999987
this	O	O:0.999925
sample	O	O:0.999430
dataset	O	O:0.999795
.	O	O:0.999794
	
The	O	O:0.999834
`	O	O:0.999977
apply	O	B-API:0.997631
`	O	O:0.999909
method	O	O:0.997834
is	O	O:0.999995
actually	O	O:0.999927
the	O	O:0.999706
fastest	O	O:0.983401
method	O	O:0.999521
but	O	O:0.999945
it	O	O:0.999979
will	O	O:0.999900
not	O	O:0.999998
scale	O	O:0.999962
as	O	O:0.999999
well	O	O:0.999887
as	O	O:0.999998
the	O	O:0.999970
other	O	O:0.999918
methods	O	O:0.999714
as	O	O:0.999997
this	O	O:0.999965
essentially	O	O:0.999985
loops	O	O:0.999960
over	O	O:0.999909
each	O	O:0.999113
row	O	O:0.999824
.	O	O:0.999880
	
Your	O	O:0.997787
method	O	O:0.999757
works	O	O:0.999933
well	O	O:0.999762
.	O	O:0.999915
	
But	O	O:0.999815
am	O	O:0.999988
struggling	O	O:0.999532
to	O	O:0.999986
apply	O	O:0.964232
it	O	O:0.999970
when	O	O:0.999825
there	O	O:0.999975
are	O	O:1.000000
multiple	O	O:0.999989
columns	O	O:0.999710
in	O	O:0.999990
the	O	O:0.999976
df1	O	O:0.997700
.	O	O:0.999793
	
and	O	O:0.999950
now	O	O:0.999921
the	O	O:0.999987
muzz	O	O:0.985111
function	O	O:0.999838
.	O	O:0.999901
	
EDIT	O	O:0.994182
:	O	O:0.999936
Added	O	O:0.999927
choices=	O	O:0.999530
right	O	O:0.999366
[	O	O:0.999989
match_col_name	O	O:0.999635
]	O	O:0.999946
line	O	O:0.998472
and	O	O:0.999997
used	O	O:0.999946
choices	O	O:0.992012
in	O	O:0.999986
the	O	O:0.999989
apply	O	B-API:0.815566
per	O	O:0.999475
Brenbarn	O	O:0.993868
suggestion	O	O:0.999607
.	O	O:0.999865
	
I	O	O:0.999987
also	O	O:0.999975
,	O	O:0.999981
per	O	O:0.999908
Brenbarn	O	O:0.998804
suggestion	O	O:0.999919
,	O	O:0.999994
ran	O	O:0.999976
some	O	O:0.999971
tests	O	O:0.999900
with	O	O:0.999979
the	O	O:0.999992
extractOne()	O	O:0.993418
without	O	O:0.999740
the	O	O:0.999894
apply	O	B-API:0.981541
and	O	O:0.999794
it	O	O:0.999946
it	O	O:0.999978
appears	O	O:0.999979
to	O	O:0.999987
be	O	O:0.999998
the	O	O:0.999978
bottleneck	O	O:0.998085
.	O	O:0.999850
	
Maybe	O	O:0.999852
there's	O	O:0.999974
a	O	O:0.999994
faster	O	O:0.999531
way	O	O:0.999979
to	O	O:0.999975
do	O	O:0.999998
the	O	O:0.999995
fuzzy	O	O:0.999486
matching	O	O:0.999163
?	O	O:0.999816
	
#CODE	O	O:0.998453
	
One	O	O:0.999922
possibility	O	O:0.999183
is	O	O:0.999989
to	O	O:0.999982
pull	O	O:0.999960
the	O	O:0.999977
`	O	O:0.999971
right	O	O:0.998141
[	O	O:0.999998
match_col_name	O	O:0.999809
]`	O	O:0.999990
outside	O	O:0.999814
of	O	O:0.999984
the	O	O:0.999936
`	O	O:0.999991
apply	O	B-API:0.979656
`	O	O:0.999975
,	O	O:0.999943
so	O	O:0.999999
that	O	O:0.999903
you	O	O:0.999996
don't	O	O:0.999989
recalculate	O	O:0.999679
it	O	O:0.999997
every	O	O:0.999961
time	O	O:0.999873
.	O	O:0.999897
	
You	O	O:0.999765
should	O	O:0.999842
try	O	O:0.999984
profiling	O	O:0.999976
your	O	O:0.999768
code	O	O:0.998126
and	O	O:0.999997
testing	O	O:0.999795
it	O	O:0.999904
with	O	O:0.999976
different	O	O:0.999918
inputs	O	O:0.999922
to	O	O:0.999994
see	O	O:0.999999
if	O	O:0.999989
the	O	O:0.999989
bottleneck	O	O:0.998896
is	O	O:0.999993
really	O	O:0.999290
in	O	O:0.999994
the	O	O:0.999992
apply	O	B-API:0.563795
or	O	O:0.999871
in	O	O:0.999957
the	O	O:0.999996
fuzzy	O	O:0.999919
matching	O	O:0.999467
itself	O	O:0.998188
.	O	O:0.999924
	
Yes	O	O:0.998659
,	O	O:0.999947
but	O	O:0.999993
that	O	O:0.999608
is	O	O:0.999998
inside	O	O:0.999892
the	O	O:0.999883
function	O	O:0.999842
you	O	O:0.999969
apply	O	O:0.912028
,	O	O:0.999974
which	O	O:0.998491
is	O	O:0.999995
called	O	O:0.999946
once	O	O:0.999927
for	O	O:0.999991
each	O	O:0.999692
element	O	O:0.999537
in	O	O:0.999988
the	O	O:0.999983
series	O	O:0.999914
you	O	O:0.999955
apply	O	O:0.939407
it	O	O:0.999962
on	O	O:0.999894
.	O	O:0.999945
	
Your	O	O:0.999788
code	O	O:0.999806
retrieves	O	O:0.999747
`	O	O:0.999989
right	O	O:0.997842
[	O	O:0.999996
match_col_name	O	O:0.999871
]`	O	O:0.999949
repeatedly	O	O:0.999817
,	O	O:0.999999
once	O	O:0.999769
for	O	O:0.999997
each	O	O:0.999788
element	O	O:0.999464
in	O	O:0.999969
the	O	O:0.999955
Series	O	O:0.998957
.	O	O:0.999830
	
If	O	O:0.999988
you	O	O:0.999968
extract	O	O:0.999939
this	O	O:0.999998
once	O	O:0.999962
to	O	O:0.999999
a	O	O:1.000000
variable	O	O:0.999587
and	O	O:0.999999
then	O	O:0.999886
use	O	O:0.999988
the	O	O:0.999988
variable	O	O:0.999262
in	O	O:0.999985
the	O	O:0.999992
call	O	O:0.998603
,	O	O:0.999994
you	O	O:0.999880
will	O	O:0.999968
avoid	O	O:0.999958
all	O	O:0.999994
those	O	O:0.999956
redundant	O	O:0.999167
lookups	O	O:0.999254
.	O	O:0.999869
	
Why	O	O:0.999934
the	O	O:0.999982
mismatch	O	O:0.999703
in	O	O:0.999975
second	O	O:0.999777
doing	O	O:0.999961
grouping	O	O:0.999673
one	O	O:0.999943
by	O	O:0.999990
one	O	O:0.999985
in	O	O:0.999935
A	O	O:0.999999
then	O	O:0.999883
C	O	O:0.999971
vs	O	O:0.999992
doing	O	O:0.999983
them	O	O:0.999723
together	O	O:0.997545
.	O	O:0.999896
	
Is	O	O:0.999960
it	O	O:0.999993
a	O	O:0.999996
bug	O	O:0.999837
or	O	O:0.999977
feature	O	O:0.999693
?	O	O:0.999959
	
Normally	O	O:0.999702
multi	O	O:0.999856
grouping	O	O:0.999544
should	O	O:0.999830
proceed	O	O:0.999077
in	O	O:1.000000
this	O	O:0.999942
fashion	O	O:0.999798
.	O	O:0.999918
	
First	O	O:0.999954
take	O	O:0.999874
out	O	O:0.999991
elements	O	O:0.999957
satisfying	O	O:0.999653
predicate	O	O:0.999866
'	O	O:0.999915
A	O	O:0.999965
'	O	O:0.999955
and	O	O:0.999998
then	O	O:0.999781
use	O	O:0.999991
those	O	O:0.999927
groups	O	O:0.999469
to	O	O:0.999991
apply	O	O:0.911038
'	O	O:0.999834
C	O	O:0.995824
'	O	O:0.999978
grouping	O	O:0.998617
.	O	O:0.999729
	
that	O	O:0.999592
should	O	O:0.999990
be	O	O:1.000000
one	O	O:0.999998
of	O	O:0.999988
the	O	O:0.999985
behaviours	O	O:0.999874
of	O	O:0.999920
groupby	B-API	B-API:0.995298
.	O	O:0.999974
apply	O	O:0.661931
qcut	B-API	B-API:0.667176
to	O	O:0.999985
subset	O	O:0.999987
of	O	O:0.999997
values	O	O:0.999025
in	O	O:0.999996
column	O	O:0.999919
C	O	O:0.999769
.	O	O:0.999860
	
Coz	O	O:0.998791
already	O	O:0.999523
it's	O	O:0.999865
been	O	O:0.999306
cut	O	O:0.992457
into	O	O:0.999751
2	O	O:0.999987
parts	O	O:0.999308
via	O	O:0.999822
'	O	O:0.999964
A	O	O:0.999956
'	O	O:0.999961
cut	O	O:0.701777
	
is	O	O:0.999936
it	O	O:0.999987
possible	O	O:0.999949
to	O	O:0.999984
do	O	O:0.999999
grouping	O	O:0.999926
via	O	O:0.999437
'	O	O:0.999858
A	O	O:0.999931
'	O	O:0.999936
,	O	O:0.999974
and	O	O:0.999999
then	O	O:0.999865
for	O	O:1.000000
each	O	O:0.999817
of	O	O:0.999980
those	O	O:0.999970
groups	O	O:0.999740
apply	O	O:0.899176
grouping	O	O:0.999055
to	O	O:0.999939
column	O	O:0.999981
'	O	O:0.999985
C	O	O:0.999821
'	O	O:0.999989
via	O	O:0.999753
map	O	B-API:0.863284
/	O	O:0.999914
lambda's	O	O:0.999036
?	O	O:0.999876
	
But	O	O:0.999880
I	O	O:0.999984
can't	O	O:0.999970
find	O	O:0.999696
how	O	O:0.999994
to	O	O:0.999991
apply	O	O:0.996864
this	O	O:0.999605
to	O	O:0.999998
multiple	O	O:0.999998
columns	O	O:0.999697
	
An	O	O:0.999896
alternative	O	O:0.999603
is	O	O:0.999989
to	O	O:0.999911
apply	O	O:0.593933
:	O	O:0.999683
#CODE	O	O:0.999339
	
Thanks	O	O:0.998129
@USER	O	O:0.998815
.	O	O:0.999745
	
It's	O	O:0.999690
interesting	O	O:0.999921
that	O	O:0.999941
you	O	O:0.999999
sort	O	O:0.999963
entries	O	O:0.999943
within	O	O:0.999666
apply	O	B-API:0.706799
(	O	O:0.999917
e.g.	O	O:0.999749
as	O	O:0.999993
opposed	O	O:0.999881
to	O	O:0.999993
sorting	O	O:0.999999
them	O	O:0.998521
*	O	O:0.999990
before	O	O:0.999481
*	O	O:0.999969
running	O	O:0.997816
groupby	B-API	B-API:0.995263
and	O	O:0.999982
apply	O	B-API:0.856194
)	O	O:0.998845
.	O	O:0.998869
	
Is	O	O:0.999985
this	O	O:0.999935
because	O	O:0.999936
`	O	O:0.999982
groupby	B-API	B-API:0.997980
`	O	O:0.999840
is	O	O:0.999644
not	O	O:0.999984
guaranteed	O	O:0.999965
to	O	O:0.999990
preserve	O	O:0.999926
the	O	O:0.999995
original	O	O:0.999360
ordering	O	O:0.999801
?	O	O:0.999892
	
@USER	O	O:0.999536
-Reina	O	O:0.999321
in	O	O:0.999969
situations	O	O:0.999934
like	O	O:0.999978
this	O	O:0.999881
(	O	O:0.999997
when	O	O:0.999936
the	O	O:0.999934
function	O	O:0.999951
doesn't	O	O:0.999616
"	O	O:0.999995
reduce	O	O:0.998983
")	O	O:0.999981
then	O	O:0.998980
transform	O	O:0.916788
and	O	O:0.999995
apply	O	B-API:0.544397
are	O	O:0.999617
the	O	O:0.999949
same	O	O:0.999530
.	O	O:0.999876
	
In	O	O:0.999918
retrospect	O	O:0.999872
,	O	O:0.999993
I	O	O:0.999995
think	O	O:0.999967
that	O	O:0.999931
sorting	O	O:0.999860
globally	O	O:0.999733
may	O	O:0.999984
be	O	O:0.999936
faster	O	O:0.999811
...	O	O:0.998174
	
I	O	O:0.999945
mistakenly	O	O:0.999903
thought	O	O:0.999168
that	O	O:0.999722
was	O	O:0.999983
the	O	O:0.999994
issue	O	O:0.999787
causing	O	O:0.999167
the	O	O:0.999991
most	O	O:0.999680
slow	O	O:0.999733
down	O	O:0.998960
.	O	O:0.999943
	
I	O	O:0.999990
think	O	O:0.999942
I	O	O:0.999992
have	O	O:0.999992
a	O	O:0.999981
better	O	O:0.998743
solution	O	O:0.999511
.	O	O:0.999851
	
One	O	O:0.999859
way	O	O:0.999752
is	O	O:0.999990
to	O	O:0.999966
use	O	O:0.999992
`	O	O:0.999818
functools.partial	O	B-API:0.636452
`	O	O:0.999995
to	O	O:0.999978
partially	O	O:0.999995
apply	O	O:0.733833
the	O	O:0.999849
merge	O	B-API:0.974192
function	O	O:0.999469
.	O	O:0.999878
	
#CODE	O	O:0.998453
	
Hi	O	O:0.999799
,	O	O:0.999983
thanks	O	O:0.998449
,	O	O:0.999982
but	O	O:0.999972
I	O	O:0.999987
don't	O	O:0.999968
think	O	O:0.999963
this	O	O:0.999973
answers	O	O:0.999946
my	O	O:0.999962
question	O	O:0.999625
though	O	O:0.999810
.	O	O:0.999929
	
Those	O	O:0.999841
methods	O	O:0.999831
don't	O	O:0.999931
create	O	O:0.999874
the	O	O:0.999999
rank	O	O:0.999767
over	O	O:0.999945
a	O	O:0.999566
window	O	O:0.998812
.	O	O:0.999825
	
I	O	O:0.999982
have	O	O:0.999992
read	O	O:0.998467
through	O	O:0.999917
the	O	O:0.999969
documentation	O	O:0.998931
which	O	O:0.999827
led	O	O:0.999954
me	O	O:0.999985
to	O	O:0.999956
`	O	O:0.999998
rolling_apply	B-API	B-API:0.999883
`	O	O:0.999965
.	O	O:0.999319
	
However	O	O:0.999939
this	O	O:0.999858
appears	O	O:0.999987
to	O	O:0.999997
simply	O	O:0.999992
apply	O	O:0.785242
the	O	O:0.999587
function	O	O:0.999927
a	O	O:0.999993
fresh	O	O:0.999168
to	O	O:0.999987
each	O	O:0.998488
window	O	O:0.999892
and	O	O:0.999998
over	O	O:0.999967
a	O	O:0.999978
large	O	O:0.999183
dataset	O	O:0.999735
in	O	O:0.999959
can	O	O:0.999997
take	O	O:0.999999
a	O	O:0.999999
long	O	O:0.999818
time	O	O:0.999970
to	O	O:0.999995
iteratively	O	O:0.999984
apply	O	O:0.903022
that	O	O:0.994405
function	O	O:0.999855
.	O	O:0.999923
	
Using	O	O:0.999152
the	O	O:0.999952
pandas	O	O:0.999681
roll	O	B-API:0.886513
function	O	O:0.999656
was	O	O:0.999946
far	O	O:0.999964
to	O	O:0.999982
slow	O	O:0.999942
.	O	O:0.999849
argsort	B-API	B-API:0.807285
was	O	O:0.999902
faster	O	O:0.999844
,	O	O:0.999994
closer	O	O:0.999422
to	O	O:0.999984
the	O	O:0.999988
bottleneck	O	O:0.999690
method	O	O:0.999967
above	O	O:0.999771
,	O	O:0.999995
but	O	O:0.999953
I	O	O:0.999988
still	O	O:0.999918
believe	O	O:0.999562
it	O	O:0.999965
shouldn't	O	O:0.999950
be	O	O:0.999996
to	O	O:0.999999
difficult	O	O:0.999979
to	O	O:0.999991
implement	O	O:0.999994
a	O	O:0.999994
much	O	O:0.999587
more	O	O:0.999934
efficient	O	O:0.999729
way	O	O:0.999966
,	O	O:0.999994
either	O	O:0.999990
by	O	O:0.999989
using	O	O:0.999923
online	O	O:0.995726
windows	O	O:0.999247
,	O	O:0.999987
or	O	O:0.999975
a	O	O:0.999989
method	O	O:0.999923
I	O	O:0.999992
am	O	O:0.999998
missing	O	O:0.993891
?	O	O:0.999917
	
Apply	O	O:0.999403
will	O	O:0.999869
only	O	O:0.999963
return	O	O:0.999981
more	O	O:0.999933
rows	O	O:0.999826
than	O	O:0.999701
it	O	O:0.999999
gets	O	O:0.999897
with	O	O:0.999990
a	O	O:0.999983
groupby	B-API	B-API:0.988891
,	O	O:0.999985
so	O	O:0.999889
we're	O	O:0.999937
going	O	O:0.999896
to	O	O:0.999976
use	O	O:0.999980
groupby	B-API	B-API:0.992516
artificially	O	O:0.977018
(	O	O:0.999883
i.e.	O	O:0.999550
groupby	B-API	B-API:0.890291
a	O	O:0.999997
column	O	O:0.999542
of	O	O:0.999998
unique	O	O:0.890362
values	O	O:0.999844
,	O	O:0.999992
so	O	O:0.999997
each	O	O:0.999886
group	O	O:0.997746
is	O	O:0.999993
one	O	O:0.999967
line	O	O:0.999703
)	O	O:0.999972
.	O	O:0.999795
	
#CODE	O	O:0.998453
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999984
to	O	O:0.999999
stay	O	O:0.999992
in	O	O:0.999996
pure	O	O:0.999939
pandas	O	O:0.999941
you	O	O:0.999979
can	O	O:0.999990
throw	O	O:0.999995
in	O	O:0.999999
a	O	O:0.999997
tricky	O	O:0.997997
`	O	O:0.999979
groupby	B-API	B-API:0.999805
`	O	O:0.999963
and	O	O:0.999242
`	O	O:0.999994
apply	O	B-API:0.992318
`	O	O:0.999862
which	O	O:0.999787
ends	O	O:0.999760
up	O	O:0.999990
boiling	O	O:0.999859
down	O	O:0.999569
to	O	O:0.999998
a	O	O:1.000000
one	O	O:0.999959
liner	O	O:0.999958
if	O	O:0.999994
you	O	O:0.999990
don't	O	O:0.999989
count	O	O:0.999855
the	O	O:0.999997
column	O	O:0.999778
rename	O	O:0.998126
.	O	O:0.999922
	
#CODE	O	O:0.998453
	
We	O	O:0.999979
want	O	O:0.999974
the	O	O:0.999995
date	O	O:0.999676
to	O	O:0.999991
become	O	O:0.999993
the	O	O:0.999992
single	O	O:0.999829
index	O	O:0.999945
for	O	O:0.999994
the	O	O:0.999998
new	O	O:0.999977
rows	O	O:0.999846
so	O	O:0.999994
we	O	O:0.999998
use	O	O:0.999916
`	O	O:0.999926
groupby	B-API	B-API:0.999244
`	O	O:0.999970
which	O	O:0.999366
puts	O	O:0.999869
the	O	O:0.999996
desired	O	O:0.999709
row	O	O:0.999962
value	O	O:0.999979
into	O	O:0.999082
an	O	O:0.999971
index	O	O:0.999435
.	O	O:0.999851
	
Then	O	O:0.999270
inside	O	O:0.999992
that	O	O:0.999969
operation	O	O:0.999943
I	O	O:0.999999
want	O	O:0.999985
to	O	O:0.999967
split	O	O:0.999913
only	O	O:0.999957
this	O	O:0.999988
list	O	O:0.999240
for	O	O:0.999999
this	O	O:0.999932
date	O	O:0.998525
which	O	O:0.999379
is	O	O:0.999990
what	O	O:0.999781
`	O	O:0.999994
apply	O	B-API:0.973117
`	O	O:0.999961
will	O	O:0.998815
do	O	O:0.999995
for	O	O:0.999983
us	O	O:0.998645
.	O	O:0.999446
	
I'm	O	O:0.999911
passing	O	O:0.998867
`	O	O:0.999971
apply	O	B-API:0.960809
`	O	O:0.999982
a	O	O:0.999938
pandas	O	O:0.998638
`	O	O:0.999986
Series	O	O:0.991556
`	O	O:0.999989
which	O	O:0.999954
consists	O	O:0.999974
of	O	O:0.999998
a	O	O:0.999990
single	O	O:0.998898
list	O	O:0.998678
but	O	O:0.999982
I	O	O:0.999995
can	O	O:0.999993
access	O	O:0.999815
that	O	O:0.999979
list	O	O:0.999915
via	O	O:0.999995
a	O	O:0.999972
`	O	O:0.999867
.values	B-API	B-API:0.992157
[	O	O:0.999986
0	O	O:0.999968
]`	O	O:0.999876
which	O	O:0.999585
pushes	O	O:0.999569
the	O	O:0.999999
sole	O	O:0.999895
row	O	O:0.999971
of	O	O:0.999991
the	O	O:0.999929
`	O	O:0.999986
Series	O	O:0.991757
`	O	O:0.999998
to	O	O:0.999987
an	O	O:1.000000
array	O	O:0.999983
with	O	O:0.999979
a	O	O:0.999998
single	O	O:0.999577
entry	O	O:0.999789
.	O	O:0.999818
	
Speed	O	O:0.999202
wise	O	O:0.999818
this	O	O:0.999934
tends	O	O:0.999930
to	O	O:0.999991
be	O	O:0.999999
pretty	O	O:0.999757
good	O	O:0.997902
and	O	O:0.999990
since	O	O:0.999949
it	O	O:0.999971
relies	O	O:0.999934
on	O	O:0.999974
`	O	O:0.999988
apply	O	B-API:0.947774
`	O	O:0.999984
any	O	O:0.999597
parallelization	O	O:0.999884
tricks	O	O:0.999915
that	O	O:0.999955
work	O	O:0.999975
with	O	O:0.999986
`	O	O:0.999992
apply	O	B-API:0.964057
`	O	O:0.999977
work	O	O:0.996934
here	O	O:0.999816
.	O	O:0.999925
	
I've	O	O:0.999413
checked	O	O:0.999736
out	O	O:0.999777
map	O	B-API:0.726640
,	O	O:0.999988
apply	O	B-API:0.669378
,	O	O:0.999966
mapapply	O	O:0.997850
,	O	O:0.999975
and	O	O:0.999994
combine	O	O:0.991370
,	O	O:0.999940
but	O	O:0.999946
can't	O	O:0.999933
seem	O	O:0.999967
to	O	O:0.999999
find	O	O:0.999998
a	O	O:0.999998
simple	O	O:0.999869
way	O	O:0.999988
of	O	O:0.999990
doing	O	O:0.999830
the	O	O:0.999951
following	O	O:0.978772
:	O	O:0.999836
	
I	O	O:0.999986
want	O	O:0.999964
to	O	O:0.999847
apply	O	O:0.989505
this	O	O:0.999456
and	O	O:0.999996
create	O	O:0.999967
a	O	O:0.999994
new	O	O:0.999953
column	O	O:0.999834
in	O	O:0.999989
the	O	O:0.999995
dataframe	B-API	O:0.998408
with	O	O:0.999986
the	O	O:0.999980
result	O	O:0.999825
.	O	O:0.999893
	
#CODE	O	O:0.998453
	
@USER	O	O:0.997991
you	O	O:0.999949
not	O	O:0.999990
allowing	O	O:0.999990
pandas	O	O:0.999939
to	O	O:0.999990
do	O	O:0.999999
anything	O	O:0.999965
with	O	O:0.999971
your	O	O:0.999701
UDF	O	O:0.999940
here	O	O:0.999572
.	O	O:0.999894
	
You	O	O:0.999854
are	O	O:0.999992
doing	O	O:0.999811
way	O	O:0.999902
too	O	O:0.999843
much	O	O:0.999608
in	O	O:0.999990
the	O	O:0.999995
apply	O	B-API:0.617971
of	O	O:0.999876
the	O	O:0.999573
groupby	B-API	B-API:0.987793
.	O	O:0.999619
	
I	O	O:0.999840
am	O	O:0.999994
not	O	O:0.999959
exactly	O	O:0.999990
sure	O	O:0.999959
what	O	O:0.999922
you	O	O:0.999967
are	O	O:0.999999
trying	O	O:0.999961
to	O	O:0.999987
achieve	O	O:0.999946
,	O	O:0.999986
but	O	O:0.999989
using	O	O:0.999914
try	O	O:0.999675
except	O	O:0.999696
blocks	O	O:0.999562
,	O	O:0.999978
loc	O	B-API:0.882680
,	O	O:0.999962
and	O	O:0.999995
mutation	O	O:0.999885
of	O	O:0.999973
the	O	O:0.999983
passed	O	O:0.999765
in	O	O:0.999993
data	O	O:0.999969
INSIDE	O	O:0.999808
OF	O	O:0.999758
A	O	O:0.999974
GROUPBY	B-API	O:0.729190
is	O	O:0.999957
quite	O	O:0.999419
inefficient	O	O:0.999192
.	O	O:0.999761
	
A	O	O:0.999973
combination	O	O:0.999955
of	O	O:0.999967
filter	O	O:0.979233
and	O	O:0.999992
/	O	O:0.999925
or	O	O:0.999749
indexing	O	O:0.999578
will	O	O:0.999750
achieve	O	O:0.999963
what	O	O:0.999958
you	O	O:0.999994
want	O	O:0.999982
in	O	O:0.999998
a	O	O:0.999997
much	O	O:0.999684
more	O	O:0.999885
efficient	O	O:0.999471
way	O	O:0.999888
.	O	O:0.999810
	
Pls	O	O:0.999857
read	O	O:0.997902
the	O	O:0.999959
docs	O	O:0.999122
#URL	O	O:0.999539
and	O	O:0.999997
possibly	O	O:0.999969
provide	O	O:0.999679
a	O	O:0.999988
self-reproducing	O	O:0.992514
example	O	O:0.998672
(	O	O:0.999982
in	O	O:0.999998
a	O	O:0.999997
new	O	O:0.999829
question	O	O:0.999852
)	O	O:0.999994
if	O	O:0.999978
you	O	O:0.999989
still	O	O:0.999978
have	O	O:0.999976
concerns	O	O:0.999637
.	O	O:0.999957
	
Pandas	O	O:0.996744
to_html()	B-API	B-API:0.999362
:	O	O:0.999932
Apply	O	O:0.999834
CSS	O	O:0.999931
style	O	O:0.999796
to	O	O:0.999931
<	O	O:0.999998
td	O	O:0.999808
>	O	O:0.999946
tag	O	O:0.999849
	
Easy	O	O:0.999664
way	O	O:0.999960
to	O	O:0.999978
apply	O	O:0.980413
transformation	O	O:0.999861
from	O	O:0.999758
`	O	O:0.999987
pandas.get_dummies	B-API	B-API:0.999239
`	O	O:0.999996
to	O	O:0.999990
new	O	O:0.999999
data	O	O:0.999864
?	O	O:0.999963
	
Then	O	O:0.999634
apply	O	O:0.904159
the	O	O:0.999983
rule	O	O:0.999300
to	O	O:0.999992
the	O	O:0.999996
datatime	O	O:0.998065
index	O	O:0.999602
,	O	O:0.999986
and	O	O:0.999998
to	O	O:0.999999
a	O	O:0.999998
datetime	O	O:0.991099
object	O	O:0.999927
using	O	O:0.999240
'	O	O:0.999719
to_period	B-API	B-API:0.990258
`	O	O:0.999959
for	O	O:0.999781
filtering	O	O:0.990316
:	O	O:0.999665
#CODE	O	O:0.999649
	
Pandas	O	O:0.999476
on	O	O:0.999951
Apply	O	O:0.999881
passing	O	O:0.999724
wrong	O	O:0.998887
value	O	O:0.999749
	
Apply	O	O:0.998070
function	O	O:0.999556
to	O	O:0.999838
Dataframe	B-API	O:0.999190
GroupBy	B-API	O:0.641415
Object	O	O:0.999496
and	O	O:0.999963
return	O	O:0.999230
dataframe	B-API	O:0.965189
	
Using	O	O:0.998317
`	O	O:0.999911
groupby	B-API	B-API:0.999274
`	O	O:0.999991
with	O	O:0.995304
`	O	O:0.999993
apply	O	B-API:0.968071
`	O	O:0.999941
will	O	O:0.999284
give	O	O:0.999977
you	O	O:0.999992
a	O	O:0.999995
Series	O	O:0.999789
mapping	O	O:0.999859
old	O	O:0.999943
to	O	O:0.999989
new	O	O:0.999973
IPs	O	O:0.998125
:	O	O:0.999949
#CODE	O	O:0.999889
	
Can	O	O:0.999880
you	O	O:0.999981
show	O	O:0.999866
how	O	O:0.999982
you	O	O:0.999988
were	O	O:0.999996
using	O	O:0.999919
pd.to_datetime	B-API	B-API:0.994083
?	O	O:0.999545
	
That	O	O:0.999350
should	O	O:0.999946
work	O	O:0.999970
fine	O	O:0.999916
.	O	O:0.999961
	
If	O	O:0.999914
for	O	O:0.999993
some	O	O:0.999289
reason	O	O:0.999505
it	O	O:0.999980
won't	O	O:0.999984
work	O	O:0.999965
,	O	O:1.000000
you	O	O:0.999991
can	O	O:0.999993
apply	O	O:0.998631
a	O	O:0.999991
strptime	O	O:0.802673
function	O	O:0.999932
to	O	O:0.999983
the	O	O:0.999998
str	O	O:0.998576
series	O	O:0.999803
.	O	O:0.999915
	
#URL	O	O:0.997160
	
How	O	O:0.999616
would	O	O:0.999878
I	O	O:0.999997
apply	O	O:0.968091
it	O	O:0.999800
on	O	O:0.999994
a	O	O:0.999999
specific	O	O:0.999966
slice	O	O:0.999657
of	O	O:0.999998
the	O	O:0.999991
data	O	O:0.999989
frame	O	O:0.999994
,	O	O:0.999998
e.g.	O	O:0.999917
I	O	O:0.999997
want	O	O:0.999990
to	O	O:0.999873
run	O	O:0.999989
the	O	O:0.999969
script	O	O:0.999767
for	O	O:0.999995
each	O	O:0.999495
row	O	O:0.999585
,	O	O:0.999983
but	O	O:0.999996
only	O	O:0.999984
using	O	O:0.999997
columns	O	O:0.999595
6	O	O:0.999892
through	O	O:0.999417
12	O	O:0.999566
?	O	O:0.999885
	
Both	O	O:0.999697
of	O	O:0.999985
these	O	O:0.999872
methods	O	O:0.999917
are	O	O:0.999968
10	O	O:0.999948
times	O	O:0.999933
more	O	O:0.999889
efficient	O	O:0.999942
than	O	O:0.999918
the	O	O:0.999994
previous	O	O:0.999801
one	O	O:0.999987
,	O	O:0.999998
iterate	O	O:0.999967
on	O	O:0.999999
rows	O	O:0.999626
which	O	O:0.999833
is	O	O:0.999995
good	O	O:0.997939
and	O	O:0.999996
work	O	O:0.999950
perfectly	O	O:0.999740
on	O	O:0.999996
my	O	O:0.999920
"	O	O:0.999996
debug	O	O:0.993715
"	O	O:0.999996
table	O	O:0.999671
`	O	O:0.999991
df	O	O:0.995737
`	O	O:0.999980
.	O	O:0.999298
	
But	O	O:0.999896
,	O	O:0.999997
when	O	O:0.999850
I	O	O:0.999996
apply	O	O:0.978172
it	O	O:0.999728
to	O	O:0.999985
my	O	O:0.999996
"	O	O:0.999996
test	O	O:0.994787
"	O	O:1.000000
table	O	O:0.999908
of	O	O:0.999978
18k	O	O:0.998995
x	O	O:0.999943
40k	O	O:0.999422
,	O	O:0.999980
it	O	O:0.999987
leads	O	O:0.999802
to	O	O:0.999998
a	O	O:0.999999
`	O	O:0.999802
MemoryError	O	O:0.974321
:	O	O:0.999962
`	O	O:0.999934
(	O	O:0.999976
I	O	O:0.999999
have	O	O:0.999982
60%	O	O:0.999947
of	O	O:0.999991
my	O	O:0.999974
32GB	O	O:0.999957
of	O	O:0.999948
RAM	O	O:0.999967
occupied	O	O:0.999754
after	O	O:0.999940
reading	O	O:0.998611
the	O	O:0.999938
corresponding	O	O:0.998748
csv	O	O:0.999917
file	O	O:0.999793
)	O	O:0.999976
.	O	O:0.999871
	
I	O	O:0.999918
don't	O	O:0.999924
understand	O	O:0.999950
your	O	O:0.999925
question	O	O:0.999644
if	O	O:0.999993
you	O	O:0.999904
did	O	O:0.999968
this	O	O:0.999910
:	O	O:0.999993
`	O	O:0.999986
df.groupby	B-API	B-API:0.990612
(	O	O:0.999964
'	O	O:0.999900
A	O	O:0.999980
')	O	O:0.999907
[	O	O:0.999861
'	O	O:0.999968
B	O	O:0.999978
']`	O	O:0.999988
then	O	O:0.999814
you	O	O:1.000000
explicitly	O	O:0.999984
select	O	O:0.999816
just	O	O:0.999926
column	O	O:0.999965
'	O	O:0.999971
B	O	O:0.999860
'	O	O:0.999961
and	O	O:0.999998
then	O	O:0.999939
you	O	O:0.999992
can	O	O:0.999997
still	O	O:0.999997
apply	O	O:0.998428
your	O	O:0.999674
functions	O	O:0.999239
to	O	O:0.999998
this	O	O:0.999999
only	O	O:0.999892
	
If	O	O:0.999957
I	O	O:0.999995
apply	O	O:0.960481
an	O	O:0.999743
operation	O	O:0.999666
to	O	O:0.999990
the	O	O:0.999999
Value	O	O:0.999820
column	O	O:0.999885
I	O	O:0.999992
would	O	O:0.999998
then	O	O:0.999979
like	O	O:1.000000
to	O	O:0.999999
recalculate	O	O:0.999975
the	O	O:0.999987
groupby	B-API	B-API:0.986565
operation	O	O:0.997627
:	O	O:0.999896
#CODE	O	O:0.999888
	
I	O	O:0.999979
think	O	O:0.999950
the	O	O:0.999912
calculated	O	O:0.990865
groupby	B-API	B-API:0.970505
MultiIndex	O	O:0.898430
should	O	O:0.999794
be	O	O:0.999999
re-usable	O	O:0.999973
to	O	O:0.999944
re-calculate	O	O:0.999982
the	O	O:0.999981
new	O	O:0.999926
agg	O	B-API:0.942665
functions	O	O:0.994936
(	O	O:0.999827
np.sum	B-API	B-API:0.936186
is	O	O:0.999980
an	O	O:0.999984
example	O	O:0.999876
)	O	O:0.999945
,	O	O:0.999981
but	O	O:0.999972
I	O	O:0.999982
can't	O	O:0.999988
work	O	O:0.999834
out	O	O:0.999981
how	O	O:0.999985
to	O	O:0.999986
apply	O	O:0.961379
it	O	O:0.999800
.	O	O:0.999810
	
How	O	O:0.999625
would	O	O:0.999921
one	O	O:0.999999
most	O	O:0.999974
efficiently	O	O:0.999963
reuse	O	O:0.999687
a	O	O:0.999528
groupby	B-API	B-API:0.996793
method	O	O:0.999953
on	O	O:0.999986
a	O	O:1.000000
dataframe	B-API	O:0.999039
of	O	O:0.999988
the	O	O:0.999988
same	O	O:0.999944
shape	O	O:0.999741
and	O	O:0.999997
columns	O	O:0.999963
structure	O	O:0.999953
multiple	O	O:0.999935
times	O	O:0.999624
?	O	O:0.999963
	
True	O	O:0.998281
and	O	O:0.999982
I	O	O:0.999994
often	O	O:0.999261
do	O	O:0.999555
,	O	O:0.999985
but	O	O:0.999840
in	O	O:0.999991
this	O	O:0.999967
instance	O	O:0.999948
I	O	O:0.999997
want	O	O:0.999980
to	O	O:0.999940
be	O	O:1.000000
able	O	O:0.999993
to	O	O:0.999980
use	O	O:0.999997
the	O	O:0.999944
groupby	B-API	B-API:0.944564
data	O	O:0.999853
/	O	O:0.999985
construct	O	O:0.999799
to	O	O:0.999994
apply	O	O:0.981966
the	O	O:0.999943
operation	O	O:0.999659
on	O	O:0.999997
a	O	O:0.999999
fresh	O	O:0.999910
data	O	O:0.999933
frame	O	O:0.999981
.	O	O:0.999943
	
In	O	O:0.999940
actual	O	O:0.999920
fact	O	O:0.999859
I	O	O:0.999967
would	O	O:0.999993
want	O	O:0.999899
to	O	O:0.999998
save	O	O:0.999981
the	O	O:0.999983
groupby	B-API	B-API:0.975837
to	O	O:0.999994
a	O	O:0.999998
hdf	O	O:0.998961
and	O	O:0.999975
reload	O	O:0.999126
it	O	O:0.999831
in	O	O:0.999995
separate	O	O:0.999809
threads	O	O:0.998899
,	O	O:0.999969
but	O	O:0.999965
it	O	O:0.999958
doesn't	O	O:0.999970
seem	O	O:0.999979
possible	O	O:0.999930
to	O	O:0.999999
save	O	O:0.999988
a	O	O:0.999981
groupby	B-API	B-API:0.993344
object	O	O:0.999891
to	O	O:0.999979
a	O	O:1.000000
file	O	O:0.998249
.	O	O:0.999924
	
Pandas	O	O:0.999564
speedup	O	O:0.999861
apply	O	O:0.547917
on	O	O:0.999716
max()	B-API	B-API:0.997725
	
I	O	O:0.999899
got	O	O:0.999994
some	O	O:0.999057
fantasy	O	O:0.999748
football	O	O:0.999825
data	O	O:0.999283
and	O	O:0.999962
I'm	O	O:0.999990
trying	O	O:0.999620
to	O	O:0.999993
sort	O	O:0.999920
it	O	O:0.999997
out	O	O:0.999992
so	O	O:0.999995
I	O	O:0.999998
can	O	O:0.999985
later	O	O:0.999984
apply	O	O:0.741253
on	O	O:0.999915
it	O	O:0.999964
,	O	O:0.999998
the	O	O:0.999997
full	O	O:0.999905
force	O	O:0.999800
of	O	O:0.999978
scikit-learn	O	O:0.993409
.	O	O:0.999923
	
Here's	O	O:0.999590
solution	O	O:0.999743
for	O	O:0.999983
you	O	O:0.999991
test	O	O:0.999902
data	O	O:0.999996
,	O	O:0.999998
I	O	O:0.999999
think	O	O:0.999969
you	O	O:0.999831
can	O	O:0.999983
easily	O	O:0.999997
apply	O	O:0.900136
it	O	O:0.999909
to	O	O:0.999994
your	O	O:0.999999
real	O	O:0.999196
data	O	O:0.999938
#CODE	O	O:0.999616
	
You	O	O:0.999857
don't	O	O:0.999965
need	O	O:0.999975
to	O	O:0.999995
use	O	O:0.999996
`	O	O:0.999973
where	O	O:0.995224
`	O	O:0.999985
.	O	O:0.999700
	
Just	O	O:0.999626
use	O	O:0.999833
`	O	O:0.999902
isin	B-API	B-API:0.999455
`	O	O:0.999986
and	O	O:0.999951
apply	O	O:0.973899
your	O	O:0.999346
condition	O	O:0.999859
directly	O	O:0.999953
to	O	O:0.999994
the	O	O:0.999998
columns	O	O:0.998016
:	O	O:0.999978
#CODE	O	O:0.999946
	
This	O	O:0.999736
will	O	O:0.999847
apply	O	O:0.925008
it	O	O:0.999976
to	O	O:0.999993
only	O	O:0.999999
the	O	O:0.999999
columns	O	O:0.999882
you	O	O:0.999986
desire	O	O:0.999960
and	O	O:0.999996
assign	O	O:0.999913
the	O	O:0.999977
result	O	O:0.999968
back	O	O:0.999249
to	O	O:0.999998
those	O	O:0.999999
columns	O	O:0.999822
.	O	O:0.999944
	
Alternatively	O	O:0.999830
you	O	O:0.999971
could	O	O:0.999987
set	O	O:1.000000
them	O	O:0.999977
to	O	O:0.999997
new	O	O:0.999989
,	O	O:0.999994
normalized	O	O:0.999943
columns	O	O:0.999850
and	O	O:0.999998
keep	O	O:0.999927
the	O	O:0.999981
originals	O	O:0.999890
if	O	O:0.999983
you	O	O:0.999990
want	O	O:0.999885
.	O	O:0.999922
	
Otherwise	O	O:0.999928
you	O	O:0.999955
can	O	O:0.999993
call	O	O:0.999956
`	O	O:0.999998
apply	O	B-API:0.994742
`	O	O:0.999991
like	O	O:0.996826
so	O	O:0.999946
:	O	O:0.999958
#CODE	O	O:0.999839
	
In	O	O:0.999964
the	O	O:0.999995
case	O	O:0.999955
where	O	O:0.999989
the	O	O:0.999986
above	O	O:0.999712
won't	O	O:0.999964
work	O	O:0.999958
as	O	O:0.999999
it	O	O:0.999983
can't	O	O:0.999980
generate	O	O:0.999953
a	O	O:0.999997
Series	O	O:0.999822
to	O	O:0.999994
align	O	O:0.994862
with	O	O:0.999980
you	O	O:0.999981
df	O	O:0.999987
you	O	O:0.999990
can	O	O:0.999992
apply	O	O:0.993813
row-wise	O	O:0.999635
passing	O	O:0.993720
`	O	O:0.999962
axis=1	O	O:0.995839
`	O	O:0.999994
to	O	O:0.999972
the	O	O:0.999999
df	O	O:0.995191
:	O	O:0.999950
#CODE	O	O:0.999861
	
pandas	O	O:0.999833
apply	O	O:0.942518
over	O	O:0.999524
a	O	O:0.999984
single	O	O:0.999415
column	O	O:0.999775
	
how	O	O:0.999904
can	O	O:0.999966
I	O	O:1.000000
apply	O	O:0.987510
this	O	O:0.995523
function	O	O:0.999980
over	O	O:0.999960
a	O	O:0.999996
single	O	O:0.999910
column	O	O:0.999959
of	O	O:0.999991
pandas	O	O:0.999419
?	O	O:0.999986
	
In	O	O:0.999971
pandas	O	O:0.999668
documentation	O	O:0.999946
,	O	O:0.999995
the	O	O:0.999998
structure	O	O:0.999868
of	O	O:0.999995
the	O	O:0.999934
function	O	O:0.999867
is	O	O:0.999994
given	O	O:0.998940
as	O	O:0.999980
	
but	O	O:0.999854
I	O	O:0.999986
don't	O	O:0.999957
see	O	O:0.999943
any	O	O:0.999991
ability	O	O:0.999758
to	O	O:0.999959
apply	O	O:0.939529
it	O	O:0.999968
to	O	O:0.999998
a	O	O:1.000000
column	O	O:0.999827
of	O	O:0.999991
the	O	O:0.999975
dataframe	B-API	O:0.997248
.	O	O:0.999831
	
1	O	O:0.999295
.	O	O:0.999771
	
I'd	O	O:0.999985
just	O	O:0.999927
convert	O	O:0.999709
the	O	O:0.999993
columns	O	O:0.999896
to	O	O:0.999987
datetime	O	O:0.999924
and	O	O:0.999999
then	O	O:0.999938
access	O	O:0.999980
the	O	O:0.999995
date	O	O:0.997894
attribute	O	O:0.999976
,	O	O:0.999996
so	O	O:0.999990
`	O	O:0.999992
df	O	O:0.999276
[	O	O:0.999976
'	O	O:0.999991
time	O	O:0.999947
']	O	O:0.999981
=	O	O:0.999184
pd.to_datetime	B-API	B-API:0.993393
(	O	O:0.999960
df	O	O:0.999671
[	O	O:0.999890
'	O	O:0.999991
time	O	O:0.999976
'])	O	O:0.999937
.date	B-API	B-API:0.983593
`	O	O:0.999839
2	O	O:0.999387
.	O	O:0.999928
	
You	O	O:0.999900
can	O	O:0.999977
apply	O	O:0.968754
to	O	O:0.999993
a	O	O:0.999998
series	O	O:0.999798
also	O	O:0.999906
but	O	O:0.999999
if	O	O:0.999984
you	O	O:0.999997
want	O	O:0.999988
to	O	O:0.999988
use	O	O:0.999999
the	O	O:0.999951
axis	O	O:0.999846
param	O	O:0.999965
then	O	O:0.999961
you	O	O:1.000000
can	O	O:0.999999
force	O	O:0.999999
a	O	O:0.999999
df	O	O:0.999720
with	O	O:0.999990
a	O	O:0.999998
single	O	O:0.999892
column	O	O:0.999990
using	O	O:0.999883
double	O	O:0.980985
sqaure	O	O:0.995819
brackets	O	O:0.998972
:	O	O:0.999966
`	O	O:0.999996
df	O	O:0.999273
[[	O	O:0.999992
col_name	O	O:0.997205
]]	O	O:0.999868
.apply	B-API	B-API:0.998090
(	O	O:0.999965
func	O	O:0.992578
,	O	O:0.999985
axis=0	O	O:0.999872
)`	O	O:0.999649
3	O	O:0.999832
.	O	O:0.999985
to	O	O:0.999997
check	O	O:0.999997
if	O	O:0.999997
an	O	O:0.999989
element	O	O:0.999664
is	O	O:0.999980
nan	O	O:0.998387
you	O	O:0.999994
can	O	O:0.999978
use	O	O:0.999998
the	O	O:0.999973
top-level	O	O:0.996660
`	O	O:0.999969
isnull	O	B-API:0.999517
`	O	O:0.999989
method	O	O:0.999783
so	O	O:0.999965
`	O	O:0.999971
pd.isnull	B-API	B-API:0.999613
(	O	O:0.999988
x	O	O:0.999910
)`	O	O:0.999798
will	O	O:0.999485
return	O	O:0.999879
True	O	O:0.999406
or	O	O:0.999971
False	O	O:0.998940
	
If	O	O:0.999980
you	O	O:0.999974
can	O	O:0.999975
write	O	O:1.000000
this	O	O:0.999993
as	O	O:1.000000
a	O	O:0.999918
function	O	O:0.999818
that	O	O:0.999940
takes	O	O:0.999926
in	O	O:0.999997
a	O	O:0.999985
1d	O	O:0.999470
array	O	O:0.997293
(	O	O:0.999972
list	O	O:0.998246
,	O	O:0.999995
numpy	O	O:0.999948
array	O	O:0.999793
etc	O	O:0.999976
...	O	O:0.999944
)	O	O:0.999990
,	O	O:0.999996
you	O	O:0.999989
can	O	O:0.999971
use	O	O:0.999998
df.apply	B-API	B-API:0.847547
to	O	O:0.999945
apply	O	O:0.942596
it	O	O:0.999931
to	O	O:0.999993
any	O	O:1.000000
column	O	O:0.999878
,	O	O:0.999998
using	O	O:0.999954
`	O	O:0.999699
df.apply()	B-API	B-API:0.999994
`	O	O:0.999960
.	O	O:0.998931
	
Pandas	O	O:0.999286
already	O	O:0.999786
knows	O	O:0.999111
that	O	O:0.999850
it	O	O:0.999997
must	O	O:0.999976
apply	O	O:0.841177
the	O	O:0.999942
equation	O	O:0.998837
to	O	O:0.999998
every	O	O:0.999988
row	O	O:0.999868
and	O	O:0.999989
return	O	O:0.999900
each	O	O:0.999217
value	O	O:0.999947
to	O	O:0.999991
its	O	O:0.999989
proper	O	O:0.999662
index	O	O:0.999712
.	O	O:0.999884
	
I	O	O:0.999891
didn't	O	O:0.999697
realize	O	O:0.997829
it	O	O:0.999966
would	O	O:0.999907
be	O	O:0.999999
this	O	O:0.999992
easy	O	O:0.998015
and	O	O:0.999966
was	O	O:0.999935
looking	O	O:0.998640
for	O	O:0.999979
more	O	O:0.999367
explicit	O	O:0.999328
code	O	O:0.999326
.	O	O:0.999887
	
apply	O	B-API:0.500339
the	O	O:0.999473
function	O	O:0.999481
to	O	O:0.999974
the	O	O:0.999998
dataframe	B-API	O:0.979206
:	O	O:0.999960
#CODE	O	O:0.999929
	
I	O	O:0.999937
would	O	O:0.999996
like	O	O:0.999965
to	O	O:1.000000
create	O	O:0.999997
a	O	O:0.999985
function	O	O:0.999942
that	O	O:0.999947
does	O	O:0.999993
this	O	O:0.999980
for	O	O:0.999997
one	O	O:0.999943
imo	O	O:0.999574
,	O	O:0.999992
and	O	O:0.999998
then	O	O:0.999866
I	O	O:0.999998
can	O	O:0.999994
apply	O	O:0.906899
it	O	O:0.999980
to	O	O:0.999995
all	O	O:0.999999
of	O	O:0.999998
them	O	O:0.998961
but	O	O:0.999995
I	O	O:0.999993
am	O	O:0.999998
unfortunately	O	O:0.999155
stuck	O	O:0.999048
.	O	O:0.999854
	
Apply	O	O:0.999882
a	O	O:0.999955
function	O	O:0.999911
data	O	O:0.999981
frame	O	O:0.999998
column	O	O:0.999868
	
But	O	O:0.999933
note	O	O:0.999054
!	O	O:0.999911
	
my	O	O:0.999987
test	O	O:0.999671
data	O	O:0.999943
was	O	O:0.999966
evenly	O	O:0.999745
sampled	O	O:0.998820
.	O	O:0.999741
	
Looks	O	O:0.999923
like	O	O:0.999886
`	O	O:0.999980
rolling_*	O	B-API:0.855293
`	O	O:0.999989
don't	O	O:0.999761
apply	O	O:0.807048
to	O	O:0.999928
irregular	O	O:0.999964
time	O	O:0.999956
series	O	O:0.999937
yet	O	O:0.999962
,	O	O:0.999996
though	O	O:0.999952
there	O	O:0.999950
are	O	O:0.999997
some	O	O:0.999790
workarounds	O	O:0.998472
:	O	O:0.999936
Pandas	O	O:0.999751
:	O	O:0.999990
rolling	O	O:0.999055
mean	O	O:0.999814
by	O	O:0.999982
time	O	O:0.999901
interval	O	O:0.999180
	
I	O	O:0.999988
want	O	O:0.999935
to	O	O:0.999903
loop	O	O:0.999994
through	O	O:0.999346
and	O	O:0.999995
apply	O	O:0.919711
a	O	O:0.999512
function	O	O:0.998715
to	O	O:0.999994
the	O	O:1.000000
dataframes	O	O:0.999868
within	O	O:0.999486
`	O	O:0.999998
groups	O	O:0.991038
`	O	O:0.999999
that	O	O:0.999915
have	O	O:0.999997
more	O	O:0.999972
than	O	O:0.999981
one	O	O:0.999992
row	O	O:0.999946
in	O	O:0.999997
them	O	O:0.999444
.	O	O:0.999949
	
My	O	O:0.999962
code	O	O:0.998911
is	O	O:0.999991
below	O	O:0.999336
,	O	O:0.999996
here	O	O:0.999815
each	O	O:0.999892
dataframe	B-API	O:0.995579
is	O	O:0.999994
the	O	O:0.999966
`	O	O:0.999992
value	O	O:0.999104
`	O	O:0.999991
in	O	O:0.999967
the	O	O:0.999990
key	O	O:0.999951
,	O	O:0.999995
value	O	O:0.999950
pair	O	O:0.998269
:	O	O:0.999976
#CODE	O	O:0.999930
	
Then	O	O:0.999826
you	O	O:0.999996
can	O	O:0.999996
apply	O	O:0.982117
the	O	O:0.999965
following	O	O:0.996060
logic	O	O:0.999387
.	O	O:0.999808
	
#CODE	O	O:0.998453
	
Your	O	O:0.999905
original	O	O:0.999072
issue	O	O:0.999719
was	O	O:0.999807
caused	O	O:0.999563
because	O	O:0.999991
your	O	O:0.999931
individual	O	O:0.999673
loops	O	O:0.999563
did	O	O:0.999798
not	O	O:0.999961
contain	O	O:0.999816
the	O	O:0.999997
same	O	O:0.999963
amount	O	O:0.999962
of	O	O:0.999995
each	O	O:0.999687
element	O	O:0.999883
you	O	O:0.999958
were	O	O:0.999976
looping	O	O:0.999838
through	O	O:0.990605
(	O	O:0.999929
i.e.	O	O:0.999602
-	O	O:0.999989
15	O	O:0.999922
stars	O	O:0.999251
,	O	O:0.999981
v	O	O:0.999971
.	O	O:0.999943
20	O	O:0.999961
prices	O	O:0.998505
)	O	O:0.999959
.	O	O:0.999882
	
The	O	O:0.999956
best	O	O:0.999580
way	O	O:0.999979
to	O	O:0.999954
avoid	O	O:0.999984
this	O	O:0.999984
type	O	O:0.999732
of	O	O:0.999993
issue	O	O:0.998950
is	O	O:0.999997
to	O	O:0.999967
firstly	O	O:0.999998
have	O	O:0.999944
one	O	O:0.999988
loop	O	O:0.999891
and	O	O:0.999999
then	O	O:0.999948
to	O	O:0.999999
apply	O	O:0.994929
a	O	O:0.999954
try	O	O:0.999474
except	O	O:0.999978
value	O	O:0.999973
to	O	O:0.999993
each	O	O:0.999985
item	O	O:0.999719
you're	O	O:0.999957
scaping	O	O:0.998060
.	O	O:0.999910
	
That	O	O:0.999707
way	O	O:0.999965
if	O	O:0.999992
there	O	O:0.999949
are	O	O:0.999997
any	O	O:0.999984
issues	O	O:0.999444
with	O	O:0.999878
the	O	O:0.999976
constant	O	O:0.999973
presence	O	O:0.999958
of	O	O:0.999998
the	O	O:0.999997
items	O	O:0.999908
you	O	O:0.999986
want	O	O:0.999989
,	O	O:0.999999
you	O	O:0.999990
can	O	O:0.999997
still	O	O:0.999996
collect	O	O:0.999818
what	O	O:0.999784
is	O	O:0.999991
present	O	O:0.995947
.	O	O:0.999870
	
#CODE	O	O:0.998453
	
Is	O	O:0.999987
there	O	O:0.999987
a	O	O:0.999992
way	O	O:0.999959
that	O	O:0.999940
I	O	O:0.999998
can	O	O:0.999994
apply	O	O:0.981946
this	O	O:0.999843
to	O	O:0.999989
the	O	O:1.000000
entire	O	O:0.999923
dataframe	B-API	O:0.999863
at	O	O:0.999999
once	O	O:0.999961
,	O	O:0.999994
rather	O	O:0.999971
than	O	O:0.999920
looping	O	O:0.999963
through	O	O:0.999936
rows	O	O:0.998433
?	O	O:0.999935
	
Or	O	O:0.999976
other	O	O:0.999932
suggestions	O	O:0.999881
to	O	O:0.999965
speed	O	O:0.999998
this	O	O:0.999920
up	O	O:0.999935
?	O	O:0.999963
	
How	O	O:0.999897
to	O	O:0.999986
apply	O	O:0.996831
rolling	O	O:0.985634
functions	O	O:0.998779
in	O	O:0.999993
a	O	O:0.999999
group	O	O:0.997987
by	O	O:0.999968
object	O	O:0.999429
in	O	O:0.999945
pandas	O	O:0.999644
	
Apply	O	O:0.999427
rolling	O	O:0.995219
mean	O	O:0.996169
function	O	O:0.999989
on	O	O:0.999998
data	O	O:0.999985
frames	O	O:0.999950
with	O	O:0.999989
duplicated	O	O:0.999824
indices	O	O:0.999037
in	O	O:0.999979
pandas	O	O:0.999741
	
You	O	O:0.999903
can	O	O:0.999942
check	O	O:0.999997
this	O	O:0.999970
question	O	O:0.999658
and	O	O:0.999998
its	O	O:0.999943
answer	O	O:0.999844
to	O	O:0.999964
see	O	O:0.999995
how	O	O:0.999989
to	O	O:0.999998
apply	O	O:0.997651
a	O	O:0.999926
function	O	O:0.999634
row	O	O:0.999992
by	O	O:0.999911
row	O	O:0.999654
:	O	O:0.999809
#URL	O	O:0.999827
Otherwise	O	O:0.999978
,	O	O:0.999991
in	O	O:0.999998
order	O	O:0.999935
to	O	O:0.999998
fully	O	O:0.999989
answer	O	O:0.999957
the	O	O:0.999865
question	O	O:0.999473
i.e.	O	O:0.999842
be	O	O:0.999998
able	O	O:0.999985
to	O	O:0.999995
have	O	O:0.999998
all	O	O:0.999994
desired	O	O:0.999960
fields	O	O:0.999845
,	O	O:0.999994
we	O	O:0.999999
need	O	O:0.999966
to	O	O:0.999999
know	O	O:0.999998
exactly	O	O:0.999982
what's	O	O:0.999411
in	O	O:0.999994
the	O	O:0.999996
data	O	O:0.996858
(	O	O:0.999975
not	O	O:0.999998
just	O	O:0.999964
one	O	O:0.999998
line	O	O:0.999622
)	O	O:0.999981
.	O	O:0.999846
	
Could	O	O:0.999742
you	O	O:0.999881
for	O	O:0.999995
instance	O	O:0.999974
split	O	O:0.995354
on	O	O:0.999950
"	O	O:0.999992
two	O	O:0.999987
blanks	O	O:0.999733
or	O	O:0.999996
more	O	O:0.998919
"	O	O:0.999882
(	O	O:0.999983
typically	O	O:0.999970
no	O	O:0.999987
if	O	O:0.999988
there	O	O:0.999965
are	O	O:0.999996
missing	O	O:0.999865
values	O	O:0.997651
)	O	O:0.999993
...	O	O:0.999938
or	O	O:0.999997
do	O	O:0.999994
columns	O	O:0.999981
have	O	O:0.999948
the	O	O:0.999999
same	O	O:0.999977
position	O	O:0.999753
in	O	O:0.999993
the	O	O:0.999995
string	O	O:0.999606
in	O	O:0.999990
each	O	O:0.999866
row	O	O:0.999959
etc	O	O:0.999887
.	O	O:0.999950
	
Python	O	O:0.997478
Pandas	O	O:0.999199
:	O	O:0.999962
Apply	O	O:0.999399
function	O	O:0.999889
to	O	O:0.999990
dataframe	B-API	O:0.999964
in	O	O:0.999992
place	O	O:0.999691
	
Although	O	O:0.999548
apply	O	B-API:0.510834
doesn't	O	O:0.999520
offer	O	O:0.998891
an	O	O:0.999983
inplace	O	O:0.989985
,	O	O:0.999991
you	O	O:0.999966
could	O	O:0.999983
do	O	O:1.000000
something	O	O:0.999994
like	O	O:0.999856
the	O	O:0.999988
following	O	O:0.997001
(	O	O:0.999969
which	O	O:0.999944
I	O	O:0.999987
would	O	O:0.999978
argue	O	O:0.998798
was	O	O:0.999985
more	O	O:0.999890
explicit	O	O:0.999641
anyway	O	O:0.998754
):	O	O:0.999935
#CODE	O	O:0.999356
	
How	O	O:0.999877
can	O	O:0.999945
I	O	O:1.000000
apply	O	O:0.987877
a	O	O:0.997941
function	O	O:0.999614
that	O	O:0.999926
transforms	O	O:0.999950
it	O	O:0.999996
into	O	O:0.999914
a	O	O:0.999997
dataframe	B-API	O:0.993887
like	O	O:0.999921
this	O	O:0.999624
:	O	O:0.999978
#CODE	O	O:0.999840
	
I	O	O:0.999979
could	O	O:0.999968
use	O	O:0.999973
a	O	O:0.999985
list	O	O:0.995102
comprehension	O	O:0.999883
to	O	O:0.999995
apply	O	O:0.950439
the	O	O:0.999986
selected	O	O:0.999281
result	O	O:0.999944
on	O	O:0.999994
the	O	O:0.999987
`	O	O:0.999983
get_loc	B-API	B-API:0.999152
`	O	O:0.999962
function	O	O:0.998646
,	O	O:0.999993
but	O	O:0.999978
perhaps	O	O:0.999856
there's	O	O:0.999975
some	O	O:0.999964
Pandas-built-in	O	O:0.997404
function	O	O:0.999866
.	O	O:0.999857
	
Apply	O	O:0.998342
permutation	O	O:0.799945
matrix	O	O:0.999565
to	O	O:0.999980
pandas	O	O:0.999991
DataFrame	B-API	O:0.995547
	
I	O	O:0.999982
have	O	O:0.999969
two	O	O:0.999959
identically	O	O:0.999924
sized	O	O:0.999572
DataFrames	O	O:0.993224
(	O	O:0.999979
call	O	O:0.999964
them	O	O:0.999487
`	O	O:0.999809
A	O	O:0.999513
`	O	O:0.999984
and	O	O:0.999799
`	O	O:0.999998
B	O	O:0.999164
`)	O	O:0.999992
with	O	O:0.999783
the	O	O:0.999996
same	O	O:0.999989
set	O	O:0.999492
of	O	O:0.999991
index	O	O:0.999553
and	O	O:0.999997
column	O	O:0.999952
names	O	O:0.998851
.	O	O:0.999891
	
`	O	O:0.999847
A	O	O:0.999211
`	O	O:0.999986
and	O	O:0.999766
`	O	O:0.999993
B	O	O:0.994413
`	O	O:0.999998
have	O	O:0.999864
a	O	O:0.999999
different	O	O:0.999918
ordering	O	O:0.999879
of	O	O:0.999975
their	O	O:0.997492
(	O	O:0.999990
row	O	O:0.999860
/	O	O:0.999984
column	O	O:0.999867
)	O	O:0.999989
labels	O	O:0.999070
and	O	O:0.999989
I	O	O:0.999996
want	O	O:0.999994
them	O	O:0.998740
to	O	O:0.999996
be	O	O:1.000000
identically	O	O:0.999883
labeled	O	O:0.999797
so	O	O:0.999987
I	O	O:0.999998
can	O	O:0.999998
directly	O	O:0.999988
manipulate	O	O:0.999910
the	O	O:0.999989
matrices	O	O:0.999650
in	O	O:0.999990
other	O	O:0.999956
programs	O	O:0.999617
.	O	O:0.999786
	
Mathematically	O	O:0.999054
,	O	O:0.999994
there	O	O:0.999793
is	O	O:0.999997
a	O	O:0.999967
permutation	O	O:0.731207
matrix	O	O:0.999790
`	O	O:0.999984
P	O	O:0.998607
`	O	O:0.999998
that	O	O:0.999791
reshuffles	O	O:0.999894
one	O	O:0.999987
matrix	O	O:0.999939
labels	O	O:0.999937
to	O	O:0.999996
another	O	O:0.999995
,	O	O:0.999996
so	O	O:0.999993
I	O	O:0.999996
can	O	O:0.999991
apply	O	O:0.967023
this	O	O:0.999935
transformation	O	O:0.999957
by	O	O:0.999992
constructing	O	O:0.998982
the	O	O:0.999628
matrix	O	O:0.998602
.	O	O:0.999806
	
I	O	O:0.999977
feel	O	O:0.999759
however	O	O:0.999559
,	O	O:0.999996
that	O	O:0.999989
this	O	O:0.999846
is	O	O:0.999996
overkill	O	O:0.998643
and	O	O:0.999999
a	O	O:0.999976
solution	O	O:0.991237
should	O	O:0.999950
exist	O	O:0.999871
within	O	O:0.999990
pandas	O	O:0.999933
itself	O	O:0.999602
.	O	O:0.999870
	
Calculate	O	O:0.999774
the	O	O:0.999956
weights	O	O:0.999226
you'll	O	O:0.999911
need	O	O:0.999987
to	O	O:0.999998
apply	O	O:0.985397
to	O	O:0.999946
achieve	O	O:0.999995
your	O	O:0.999979
target	O	O:0.999649
age	O	O:0.999902
/	O	O:0.999913
gender	O	O:0.981042
distribution	O	O:0.997497
:	O	O:0.999950
#CODE	O	O:0.999823
	
If	O	O:0.999879
anyone	O	O:0.999698
has	O	O:0.999973
experience	O	O:0.999595
with	O	O:0.999980
this	O	O:0.999909
I'd	O	O:0.999998
love	O	O:0.999904
to	O	O:0.999983
see	O	O:0.999999
what	O	O:0.999932
you	O	O:0.999976
wrote	O	O:0.999909
.	O	O:0.999942
	
There	O	O:0.999797
are	O	O:0.999990
examples	O	O:0.999921
online	O	O:0.999827
for	O	O:0.999998
using	O	O:0.999949
a	O	O:0.999904
.csvreader	O	O:0.884555
with	O	O:0.999899
python	O	O:0.999646
which	O	O:0.999990
loops	O	O:0.999869
through	O	O:0.999945
the	O	O:0.999994
rows	O	O:0.994678
and	O	O:0.999989
adds	O	O:0.999999
them	O	O:0.999579
as	O	O:0.999996
they	O	O:0.999587
are	O	O:0.999992
being	O	O:0.999459
read	O	O:0.995856
but	O	O:0.999923
I	O	O:0.999990
can't	O	O:0.999978
find	O	O:0.999841
any	O	O:0.999998
example	O	O:0.999890
of	O	O:0.999981
how	O	O:0.999977
to	O	O:1.000000
take	O	O:1.000000
data	O	O:0.999993
stored	O	O:0.999873
in	O	O:0.999995
a	O	O:0.999984
dataframe	B-API	O:0.990013
and	O	O:0.999987
apply	O	O:0.740013
it	O	O:0.999800
to	O	O:0.999987
a	O	O:1.000000
table	O	O:0.999952
defined	O	O:0.999860
as	O	O:0.999999
part	O	O:0.999821
of	O	O:0.999998
an	O	O:0.999985
extract	O	O:0.996610
.	O	O:0.999876
	
I've	O	O:0.999852
read	O	O:0.998779
all	O	O:0.999973
the	O	O:0.999948
documentation	O	O:0.998998
I'm	O	O:0.999963
just	O	O:0.999918
not	O	O:0.999998
sure	O	O:0.999860
how	O	O:0.999979
to	O	O:0.999990
apply	O	O:0.962761
it	O	O:0.999797
.	O	O:0.999810
	
There	O	O:0.998989
is	O	O:0.999992
no	O	O:0.999944
clear	O	O:0.999506
instruction	O	O:0.999986
as	O	O:0.999983
to	O	O:0.999994
moving	O	O:0.999997
data	O	O:0.999972
from	O	O:0.999991
a	O	O:0.999999
dataframe	B-API	O:0.998919
to	O	O:0.999996
a	O	O:1.000000
virtual	O	O:0.999343
table	O	O:0.999824
in	O	O:0.999967
python	O	O:0.999794
and	O	O:0.999995
I	O	O:0.999989
know	O	O:0.999924
this	O	O:0.998976
is	O	O:0.999997
a	O	O:0.999989
problem	O	O:0.999129
for	O	O:0.999989
other	O	O:0.999877
people	O	O:0.999706
using	O	O:0.999897
different	O	O:0.999896
type	O	O:0.996396
of	O	O:0.999984
target	O	O:0.999769
table	O	O:0.999735
(	O	O:0.999971
#URL	O	O:0.999594
)	O	O:0.999978
.	O	O:0.999989
when	O	O:0.999836
I	O	O:0.999998
try	O	O:0.999998
to	O	O:0.999950
insert	O	O:0.999968
the	O	O:0.999996
dataframe	B-API	O:0.998691
to	O	O:0.999988
the	O	O:1.000000
table	O	O:0.999988
as	O	O:0.999998
shown	O	O:0.999530
in	O	O:0.999996
the	O	O:0.999990
tutorials	O	O:0.999842
,	O	O:0.999997
an	O	O:0.999993
error	O	O:0.999673
returns	O	O:0.998407
:	O	O:0.999859
"	O	O:0.999976
dataframe	B-API	O:0.996639
not	O	O:0.999982
callable	O	O:0.999735
"	O	O:0.999962
	
I	O	O:0.999991
then	O	O:0.999977
want	O	O:0.999982
to	O	O:0.999994
apply	O	O:0.985209
poisson	B-API	O:0.572568
sampling	O	O:0.999331
noise	O	O:0.999066
to	O	O:0.999996
all	O	O:1.000000
data	O	O:0.999944
in	O	O:0.999989
the	O	O:0.999990
abundance	O	O:0.999945
frame	O	O:0.999947
.	O	O:0.999935
	
#CODE	O	O:0.998453
	
You	O	O:0.999974
have	O	O:0.999917
to	O	O:0.999995
call	O	O:0.999917
`	O	O:0.999992
apply	O	B-API:0.997213
`	O	O:0.999929
and	O	O:0.999934
pass	O	O:0.999884
the	O	O:0.999986
data	O	O:0.999934
to	O	O:0.999986
`	O	O:1.000000
strftime	B-API	B-API:0.993178
`	O	O:0.999939
:	O	O:0.999852
#CODE	O	O:0.999908
	
you	O	O:0.999916
can	O	O:0.999992
apply	O	O:0.994325
a	O	O:0.999994
lambda	O	O:0.992695
function	O	O:0.999928
to	O	O:0.999983
the	O	O:1.000000
column	O	O:0.999876
`	O	O:0.999999
a	O	O:0.999966
`	O	O:0.999979
in	O	O:0.999988
your	O	O:0.999976
dataframe	B-API	O:0.999306
that	O	O:0.999942
returns	O	O:0.999965
the	O	O:0.999998
lowercase	O	O:0.999638
of	O	O:0.999975
the	O	O:0.999956
string	O	O:0.999952
contained	O	O:0.999419
,	O	O:0.999997
if	O	O:0.999999
your	O	O:0.999889
correction	O	O:0.998396
is	O	O:0.999999
just	O	O:0.999797
making	O	O:0.999866
the	O	O:0.999795
string	O	O:0.999481
lowercase	O	O:0.998418
.	O	O:0.999819
	
the	O	O:0.999867
`	O	O:0.999968
apply	O	B-API:0.970119
function	O	O:0.995979
`	O	O:0.999896
method	O	O:0.999844
can	O	O:0.999984
be	O	O:1.000000
extended	O	O:0.999898
for	O	O:0.999961
other	O	O:0.999916
more	O	O:0.999592
specific	O	O:0.999661
replacements	O	O:0.996222
.	O	O:0.999800
	
Also	O	O:0.999900
you	O	O:0.999980
can	O	O:0.999997
probably	O	O:0.999999
generate	O	O:0.999975
the	O	O:0.999998
new	O	O:0.999997
rows	O	O:0.999840
by	O	O:0.999987
calling	O	O:0.999734
`	O	O:0.999945
apply	O	B-API:0.982981
`	O	O:0.999926
which	O	O:0.997873
would	O	O:0.999979
be	O	O:0.999998
much	O	O:0.999955
easier	O	O:0.999403
to	O	O:0.999986
read	O	O:0.999909
than	O	O:0.999932
what	O	O:0.999955
you're	O	O:0.999978
doingnow	O	O:0.999388
	
so	O	O:0.999949
I	O	O:0.999991
tried	O	O:0.999982
replacing	O	O:0.999228
the	O	O:0.999824
row	O	O:0.999579
[	O	O:0.999942
'	O	O:0.999986
J	O	O:0.999941
']	O	O:0.999949
and	O	O:0.999812
row	O	O:0.999717
[	O	O:0.999882
'	O	O:0.999986
K	O	O:0.999952
']	O	O:0.999958
with	O	O:0.999145
row.loc	O	O:0.945006
(	O	O:0.999966
'	O	O:0.999983
J	O	O:0.999920
')	O	O:0.999835
and	O	O:0.999928
row.loc	O	O:0.967649
(	O	O:0.999786
'	O	O:0.999980
K	O	O:0.999824
')	O	O:0.999875
but	O	O:0.999953
that	O	O:0.999970
ended	O	O:0.999970
up	O	O:0.999967
in	O	O:0.999994
some	O	O:0.999906
error	O	O:0.999893
messages	O	O:0.998701
.	O	O:0.999823
	
Am	O	O:0.999911
I	O	O:0.999995
just	O	O:0.999987
going	O	O:0.999500
about	O	O:0.999947
this	O	O:0.999853
all	O	O:0.999991
wrong	O	O:0.999956
by	O	O:0.999970
the	O	O:0.999975
for	O	O:0.999911
looping	O	O:0.994858
through	O	O:0.995894
index	O	O:0.999598
and	O	O:0.999967
row	O	O:0.999935
?	O	O:0.999750
	
Should	O	O:0.999637
I	O	O:0.999998
just	O	O:0.999987
apply	O	O:0.825454
a	O	O:0.999897
function	O	O:0.999646
directly	O	O:0.999790
to	O	O:0.999982
row.loc	O	O:0.996980
(	O	O:0.999966
'	O	O:0.999993
I	O	O:0.999987
')	O	O:0.999976
?	O	O:0.999394
	
For	O	O:0.999884
the	O	O:0.999955
email	O	O:0.999813
bit	O	O:0.999957
we	O	O:0.999993
can	O	O:0.999997
just	O	O:0.999994
use	O	O:0.999994
the	O	O:0.999910
same	O	O:0.999569
regex	O	O:0.999414
and	O	O:0.999995
call	O	O:0.999107
`	O	O:0.999947
findall	B-API	B-API:0.998691
`	O	O:0.999994
,	O	O:0.999906
for	O	O:0.999995
the	O	O:0.999962
other	O	O:0.999749
bit	O	O:0.999921
we	O	O:0.999997
just	O	O:0.999976
pass	O	O:0.999781
the	O	O:0.999989
func	O	O:0.999047
as	O	O:0.999997
a	O	O:0.999985
param	O	O:0.998973
to	O	O:0.999974
`	O	O:0.999998
apply	O	B-API:0.976546
:	O	O:0.999885
#CODE	O	O:0.999353
	
@USER	O	O:0.998637
OK	O	O:0.999787
,	O	O:0.999982
I've	O	O:0.999827
updated	O	O:0.999840
my	O	O:0.999973
code	O	O:0.999846
,	O	O:0.999999
we	O	O:0.999997
can	O	O:0.999953
use	O	O:1.000000
your	O	O:0.999780
email	O	O:0.999879
regex	O	O:0.999987
directly	O	O:0.999922
as	O	O:0.999998
a	O	O:0.999982
param	O	O:0.998997
to	O	O:0.999982
`	O	O:0.999999
findall	B-API	B-API:0.980896
`	O	O:0.999997
,	O	O:0.999942
for	O	O:0.999993
the	O	O:0.999944
name	O	O:0.999843
bit	O	O:0.999959
we	O	O:0.999994
can	O	O:0.999993
just	O	O:0.999999
pass	O	O:0.999977
that	O	O:0.999954
as	O	O:0.999999
the	O	O:0.999985
param	O	O:0.999234
to	O	O:0.999973
`	O	O:1.000000
apply	O	B-API:0.974967
`	O	O:0.999885
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999662
to	O	O:0.999988
apply	O	O:0.986911
this	O	O:0.998926
function	O	O:0.999931
to	O	O:0.999998
each	O	O:0.999990
row	O	O:0.999900
in	O	O:0.999980
player_points_position	O	O:0.997854
and	O	O:0.999998
create	O	O:0.999956
a	O	O:0.999993
new	O	O:0.999905
column	O	O:0.999733
`	O	O:0.999981
zscore	O	O:0.576534
`	O	O:0.999974
.	O	O:0.999315
	
However	O	O:0.999721
,	O	O:0.999994
the	O	O:0.999999
entire	O	O:0.999972
data	O	O:0.999990
set	O	O:0.999665
is	O	O:0.999998
returning	O	O:0.999076
the	O	O:0.999979
same	O	O:0.999887
value	O	O:0.999772
.	O	O:0.999922
	
#CODE	O	O:0.998453
	
I	O	O:0.999948
can	O	O:0.999992
group	O	O:0.999873
by	O	O:0.999962
id	O	O:0.999444
and	O	O:0.999985
apply	O	O:0.814693
a	O	O:0.999199
function	O	O:0.998038
per	O	O:0.999958
group	O	O:0.998837
to	O	O:0.999992
define	O	O:0.999985
wich	O	O:0.999986
data	O	O:0.999815
is	O	O:0.999998
the	O	O:0.999979
right	O	O:0.999781
one	O	O:0.999937
.	O	O:0.999935
	
I	O	O:0.999981
can	O	O:0.999960
unstack	O	B-API:0.876529
the	O	O:0.999961
dataframe	B-API	O:0.995363
and	O	O:0.999993
put	O	O:0.998815
'	O	O:0.999970
group	O	O:0.997745
'	O	O:0.999990
as	O	O:0.999990
columns	O	O:0.999594
and	O	O:0.999995
apply	O	O:0.908854
a	O	O:0.997759
function	O	O:0.995219
.	O	O:0.999804
	
Is	O	O:0.999985
there	O	O:0.999992
a	O	O:0.999993
simpler	O	O:0.999778
more	O	O:0.999851
elegant	O	O:0.999809
way	O	O:0.999979
to	O	O:0.999979
do	O	O:0.999999
this	O	O:0.999912
?	O	O:0.999968
	
Pandas	O	O:0.999473
apply	O	O:0.726324
exponential	O	O:0.995220
decay	O	O:0.999399
+	O	O:0.999969
dataset	O	O:0.999955
to	O	O:0.999815
function	O	O:0.999990
	
I'd	O	O:0.999984
like	O	O:0.999944
to	O	O:0.999999
make	O	O:0.999998
a	O	O:0.999986
function	O	O:0.999500
in	O	O:0.999992
pandas	O	O:0.999950
that	O	O:0.999950
calculates	O	O:0.999910
the	O	O:0.999998
resulting	O	O:0.999194
,	O	O:0.999993
continuous	O	O:0.999622
dataset	O	O:0.999950
for	O	O:0.999987
my	O	O:0.999950
activation	O	O:0.998339
function	O	O:0.999844
,	O	O:0.999983
but	O	O:0.999977
I	O	O:0.999984
don't	O	O:0.999992
know	O	O:0.999758
which	O	O:0.999956
functions	O	O:0.999857
to	O	O:0.999983
apply	O	O:0.888186
.	O	O:0.999370
	
pandas	O	O:0.998638
-	O	O:0.999988
apply	O	O:0.517322
time	O	O:0.999152
and	O	O:0.999992
space	O	O:0.999928
functions	O	O:0.999480
to	O	O:0.999950
groupby	B-API	B-API:0.843132
	
This	O	O:0.999727
may	O	O:0.999991
be	O	O:0.999998
an	O	O:0.999996
excellent	O	O:0.999873
opportunity	O	O:0.999948
to	O	O:0.999987
highlight	O	O:0.999972
the	O	O:0.999947
"	O	O:0.999965
Split	O	O:0.998485
,	O	O:0.999985
Apply	O	O:0.999495
,	O	O:0.999948
Combine	O	O:0.999467
"	O	O:0.999962
premise	O	O:0.999016
and	O	O:0.999993
with	O	O:0.999983
a	O	O:0.999974
simple	O	O:0.999736
case	O	O:0.999765
use	O	O:0.999926
?	O	O:0.999647
	
If	O	O:0.999971
you	O	O:0.999994
have	O	O:0.999988
a	O	O:0.999999
DataFrame	B-API	O:0.998234
where	O	O:0.999979
all	O	O:0.999993
columns	O	O:0.999942
are	O	O:0.999977
booleans	O	O:0.999454
(	O	O:0.999995
like	O	O:0.999972
the	O	O:0.999996
slice	O	O:0.999322
you	O	O:0.999993
mention	O	O:0.999917
at	O	O:0.999999
the	O	O:0.999997
end	O	O:0.999950
of	O	O:0.999999
your	O	O:0.999753
question	O	O:0.999915
,	O	O:0.999997
you	O	O:0.999980
could	O	O:0.999983
apply	O	O:0.949147
`	O	O:0.999982
all	O	O:0.998108
`	O	O:0.999994
to	O	O:0.999922
it	O	O:0.999999
row-wise	O	O:0.991335
:	O	O:0.999953
#CODE	O	O:0.999838
	
Usually	O	O:0.999798
,	O	O:0.999997
you	O	O:0.999989
can	O	O:0.999989
apply	O	O:0.991936
the	O	O:0.999929
function	O	O:0.999625
in	O	O:0.999998
one	O	O:0.999996
of	O	O:0.999996
the	O	O:0.999967
following	O	O:0.999689
ways	O	O:0.995633
:	O	O:0.999956
#CODE	O	O:0.999922
	
If	O	O:0.999917
the	O	O:0.999982
dataframe	B-API	O:0.986106
is	O	O:0.999993
empty	O	O:0.999686
,	O	O:0.999981
or	O	O:0.999968
has	O	O:0.999982
only	O	O:0.999985
one	O	O:0.999998
entry	O	O:0.999891
,	O	O:0.999996
these	O	O:0.999966
methods	O	O:0.999754
no	O	O:0.999969
longer	O	O:0.999971
work	O	O:0.999723
.	O	O:0.999965
	
A	O	O:0.999874
Series	O	O:0.999347
does	O	O:0.999555
not	O	O:0.999998
have	O	O:0.999995
an	O	O:0.999995
`	O	O:0.999979
iterrows()	B-API	B-API:0.999978
`	O	O:0.999933
method	O	O:0.999140
and	O	O:0.999983
`	O	O:0.999995
apply	O	B-API:0.994085
`	O	O:0.999936
applies	O	O:0.997327
the	O	O:0.999946
function	O	O:0.999662
to	O	O:0.999992
each	O	O:0.999993
column	O	O:0.998364
(	O	O:0.999998
not	O	O:0.999999
rows	O	O:0.999716
)	O	O:0.999978
.	O	O:0.999942
	
Is	O	O:0.999985
there	O	O:0.999993
a	O	O:0.999995
cleaner	O	O:0.999473
built	O	O:0.996416
in	O	O:0.999951
method	O	O:0.999959
to	O	O:0.999992
iterate	O	O:0.999977
/	O	O:0.999997
apply	O	O:0.721308
functions	O	O:0.999580
to	O	O:0.999984
DataFrames	O	O:0.999988
of	O	O:0.999993
variable	O	O:0.999883
length	O	O:0.999670
?	O	O:0.999824
	
Otherwise	O	O:0.999895
you	O	O:0.999992
have	O	O:0.999984
to	O	O:0.999999
constantly	O	O:0.999984
write	O	O:0.999918
cumbersome	O	O:0.999166
logic	O	O:0.999923
.	O	O:0.999837
	
#CODE	O	O:0.998453
	
I	O	O:0.999935
realize	O	O:0.999854
there	O	O:0.999509
are	O	O:0.999991
methods	O	O:0.999920
to	O	O:0.999991
ensure	O	O:0.999976
you	O	O:0.999986
form	O	O:0.999990
length	O	O:0.999691
1	O	O:0.999944
DataFrames	O	O:0.998229
,	O	O:0.999936
but	O	O:0.999995
what	O	O:0.999902
I	O	O:0.999995
am	O	O:0.999998
asking	O	O:0.995642
is	O	O:0.999976
for	O	O:0.999987
a	O	O:0.999987
clean	O	O:0.993068
way	O	O:0.999988
to	O	O:0.999984
apply	O	O:0.966623
/	O	O:0.999966
iterate	O	O:0.998705
on	O	O:0.999988
the	O	O:0.999983
various	O	O:0.999972
pandas	O	O:0.999950
data	O	O:0.999986
structures	O	O:0.999918
when	O	O:0.999908
it	O	O:0.999997
could	O	O:0.999990
be	O	O:0.999999
like-formatted	O	O:0.999962
dataframes	O	O:0.999357
or	O	O:0.999976
series	O	O:0.999842
.	O	O:0.999929
	
Instead	O	O:0.999883
of	O	O:0.999993
doing	O	O:0.999917
either	O	O:0.999957
of	O	O:0.999981
those	O	O:0.999915
things	O	O:0.999920
,	O	O:0.999991
I	O	O:0.999994
think	O	O:0.999920
it	O	O:0.999782
is	O	O:0.999989
better	O	O:0.999602
to	O	O:0.999996
make	O	O:0.999996
sure	O	O:0.999973
you	O	O:0.999995
create	O	O:0.999936
the	O	O:0.999995
right	O	O:0.999980
type	O	O:0.999610
of	O	O:0.999978
object	O	O:0.999541
before	O	O:0.999940
calling	O	O:0.998153
`	O	O:0.999958
apply	O	B-API:0.994152
`	O	O:0.999864
.	O	O:0.998019
	
For	O	O:0.999919
example	O	O:0.999640
,	O	O:0.999997
instead	O	O:0.999995
of	O	O:0.999997
using	O	O:0.999833
`	O	O:0.999940
df.iloc	B-API	B-API:0.995205
[	O	O:0.999977
0	O	O:0.999914
]`	O	O:0.999835
which	O	O:0.999650
returns	O	O:0.999860
a	O	O:0.999987
Series	O	O:0.999357
,	O	O:0.999988
use	O	O:0.999869
`	O	O:0.999873
df.iloc	B-API	B-API:0.993976
[:	O	O:0.999976
1	O	O:0.999858
]`	O	O:0.999985
to	O	O:0.999977
select	O	O:0.999934
a	O	O:0.999998
DataFrame	B-API	O:0.997256
of	O	O:0.999989
length	O	O:0.997772
1	O	O:0.999746
.	O	O:0.999807
	
As	O	O:0.999993
long	O	O:0.999928
as	O	O:0.999994
you	O	O:0.999987
pass	O	O:0.999895
a	O	O:0.999998
slice	O	O:0.998507
range	O	O:0.999983
instead	O	O:0.999970
of	O	O:0.999999
a	O	O:0.999999
single	O	O:0.999876
value	O	O:0.999974
to	O	O:0.999937
`	O	O:0.999999
df.iloc	B-API	B-API:0.985430
`	O	O:0.999992
,	O	O:0.999975
you'll	O	O:0.999979
get	O	O:0.999984
back	O	O:0.999847
a	O	O:0.999993
DataFrame	B-API	O:0.952746
.	O	O:0.999847
	
#CODE	O	O:0.998453
	
Python	O	O:0.997527
Pandas	O	O:0.998686
:	O	O:0.999931
Using	O	O:0.999564
'	O	O:0.999966
apply	O	B-API:0.526771
'	O	O:0.999917
to	O	O:0.999988
apply	O	O:0.968287
1	O	O:0.999193
function	O	O:0.999715
to	O	O:0.999997
multiple	O	O:0.999997
columns	O	O:0.999718
	
Essentially	O	O:0.999729
,	O	O:0.999988
I'd	O	O:0.999998
like	O	O:0.999958
to	O	O:0.999998
know	O	O:0.999995
if	O	O:0.999990
I	O	O:0.999993
could	O	O:0.999987
apply	O	O:0.580456
`	O	O:0.999814
function	O	O:0.995659
`	O	O:0.999997
to	O	O:0.999863
`	O	O:1.000000
df	O	O:0.998656
`	O	O:0.999998
to	O	O:0.999969
get	O	O:0.999999
the	O	O:0.999995
following	O	O:0.998945
output	O	O:0.997921
:	O	O:0.999953
#CODE	O	O:0.999814
	
you	O	O:0.999974
need	O	O:0.999985
to	O	O:0.999998
apply	O	O:0.988904
the	O	O:0.999809
function	O	O:0.999766
on	O	O:0.999997
each	O	O:0.999869
row	O	O:0.999988
,	O	O:0.999986
for	O	O:0.999998
this	O	O:0.999867
you	O	O:0.999993
need	O	O:0.999993
to	O	O:0.999999
specify	O	O:0.999964
axis=1	O	O:0.999272
#CODE	O	O:0.999255
	
Use	O	O:0.999843
apply	O	B-API:0.675459
/	O	O:0.999562
map	O	B-API:0.966210
for	O	O:0.999966
pandass	O	O:0.997713
dataframe	B-API	O:0.998357
column	O	O:0.999709
	
But	O	O:0.999518
id	O	O:0.999665
does	O	O:0.999729
not	O	O:0.999986
work	O	O:0.999985
with	O	O:0.999975
`	O	O:0.999992
apply	O	B-API:0.996381
`	O	O:0.999597
method	O	O:0.993179
:	O	O:0.999975
#CODE	O	O:0.999860
	
What	O	O:0.999814
am	O	O:0.999983
I	O	O:0.999996
doing	O	O:0.999957
wrong	O	O:0.989232
and	O	O:0.999954
why	O	O:0.999684
apply	O	B-API:0.934379
method	O	O:0.999197
takes	O	O:0.999237
this	O	O:0.999607
int	O	O:0.999734
index	O	O:0.999939
as	O	O:0.999952
parameter	O	O:0.999696
?	O	O:0.999923
	
After	O	O:0.999606
reading	O	O:0.999969
your	O	O:0.999848
data	O	O:0.999574
and	O	O:0.999999
puting	O	O:0.999748
in	O	O:0.999944
a	O	O:0.999997
dataframe	B-API	O:0.996096
,	O	O:0.999997
you	O	O:0.999979
can	O	O:0.999988
groupby	B-API	O:0.873064
values	O	O:0.999975
based	O	O:0.999687
on	O	O:0.999999
one	O	O:0.999992
of	O	O:0.999999
the	O	O:0.999995
columns	O	O:0.999884
`	O	O:0.999979
groupby	B-API	B-API:0.995011
([	O	O:0.999946
'	O	O:0.999462
month	O	O:0.999163
'])`	O	O:0.999413
,	O	O:0.999862
and	O	O:0.999998
then	O	O:0.999916
apply	O	O:0.956898
a	O	O:0.999946
function	O	O:0.998430
on	O	O:0.999996
these	O	O:0.999980
values	O	O:0.999753
,	O	O:0.999978
Pandas	O	O:0.999969
includes	O	O:0.999895
a	O	O:0.999995
number	O	O:0.999781
of	O	O:0.999985
common	O	O:0.999970
ones	O	O:0.999990
such	O	O:0.999954
as	O	O:0.999996
mean()	B-API	B-API:0.892366
,	O	O:0.999955
max()	B-API	B-API:0.993444
,	O	O:0.999969
median()	B-API	B-API:0.639167
,	O	O:0.999980
etc	O	O:0.999934
.	O	O:0.999937
	
:	O	O:0.999977
you	O	O:0.999989
can	O	O:0.999992
use	O	O:0.999999
`	O	O:0.999921
sum()	B-API	B-API:0.938136
`	O	O:0.999981
for	O	O:0.999798
example	O	O:0.999363
.	O	O:0.999603
	
#CODE	O	O:0.998453
	
I	O	O:0.999991
only	O	O:0.999991
know	O	O:0.999722
I	O	O:0.999997
could	O	O:0.999941
use	O	O:0.999960
`	O	O:0.999908
concat()	B-API	B-API:0.999885
`	O	O:0.999995
to	O	O:0.999969
combine	O	O:0.999983
columns	O	O:0.999874
and	O	O:0.999990
use	O	O:0.999963
`	O	O:0.999427
apply	O	B-API:0.996830
(	O	O:0.999917
lambda	O	O:0.994096
xxx	O	O:0.999707
...	O	O:0.999763
)`	O	O:0.999884
to	O	O:0.999995
set	O	O:0.999996
up	O	O:0.999993
a	O	O:0.999996
suitable	O	O:0.993056
function	O	O:0.999855
.	O	O:0.999899
	
That	O	O:0.999102
works	O	O:0.999895
perfectly	O	O:0.999369
.	O	O:0.999756
	
I	O	O:0.999887
was	O	O:0.999985
apply	O	B-API:0.557207
to	O	O:0.999938
modify	O	O:0.999855
the	O	O:0.999975
format	O	O:0.999862
a	O	O:0.999994
bit	O	O:0.999760
to	O	O:0.999995
help	O	O:0.999977
me	O	O:0.999994
out	O	O:0.999992
on	O	O:0.999995
another	O	O:0.999983
file	O	O:0.999972
as	O	O:0.999994
well	O	O:0.999168
!	O	O:0.999941
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
Ideally	O	O:0.999873
,	O	O:0.999992
I	O	O:0.999998
want	O	O:0.999981
to	O	O:0.999972
store	O	O:0.999988
the	O	O:0.999985
output	O	O:0.999792
in	O	O:0.999998
a	O	O:0.999990
new	O	O:0.999765
DataFrame	B-API	O:0.996741
,	O	O:0.999995
where	O	O:0.999993
each	O	O:0.999695
row	O	O:0.999995
corresponds	O	O:0.999846
to	O	O:0.999999
the	O	O:1.000000
rows	O	O:0.999415
in	O	O:0.999992
the	O	O:0.999997
original	O	O:0.999637
DataFrame	B-API	O:0.996017
,	O	O:0.999961
and	O	O:0.999997
there	O	O:0.999954
are	O	O:0.999950
3	O	O:0.999980
columns	O	O:0.999462
.	O	O:0.999931
	
I	O	O:0.999870
was	O	O:0.999884
asked	O	O:0.999461
not	O	O:0.999983
to	O	O:0.999994
use	O	O:0.999999
a	O	O:0.999980
loop	O	O:0.999447
to	O	O:0.999980
do	O	O:0.999999
this	O	O:0.999927
,	O	O:0.999987
and	O	O:0.999998
to	O	O:0.999983
use	O	O:0.999984
apply	O	B-API:0.934891
,	O	O:0.999757
but	O	O:0.999889
I	O	O:0.999986
cannot	O	O:0.999989
figure	O	O:0.999708
out	O	O:0.999960
the	O	O:0.999870
syntax	O	O:0.998390
(	O	O:0.999967
see	O	O:0.999980
attempts	O	O:0.999941
below	O	O:0.999549
)	O	O:0.999941
.	O	O:0.999688
	
What	O	O:0.999575
are	O	O:0.999994
my	O	O:0.999991
options	O	O:0.999830
for	O	O:0.999981
getting	O	O:0.999691
the	O	O:0.999916
desired	O	O:0.998716
output	O	O:0.999553
?	O	O:0.999953
	
(	O	O:0.999920
I'm	O	O:0.999982
new	O	O:0.999774
to	O	O:0.999975
python	O	O:0.999921
and	O	O:0.999996
pandas	O	O:0.999875
,	O	O:0.999989
so	O	O:0.999974
please	O	O:0.999684
excuse	O	O:0.999859
my	O	O:0.999941
ignorance	O	O:0.999471
and	O	O:0.999990
let	O	O:0.999752
me	O	O:0.999942
know	O	O:0.999222
if	O	O:0.999980
I've	O	O:0.999941
left	O	O:0.999311
out	O	O:0.999942
any	O	O:0.999965
necessary	O	O:0.999890
info	O	O:0.999478
)	O	O:0.999975
.	O	O:0.999818
	
#CODE	O	O:0.998453
	
if	O	O:0.999960
you	O	O:0.999994
want	O	O:0.999982
to	O	O:0.999997
store	O	O:0.999997
the	O	O:0.999992
results	O	O:0.999864
in	O	O:1.000000
your	O	O:0.999993
data	O	O:0.999988
frame	O	O:0.999999
,	O	O:0.999997
I	O	O:0.999990
would	O	O:0.999991
define	O	O:0.999872
a	O	O:0.999978
function	O	O:0.998501
and	O	O:0.999998
then	O	O:0.999908
apply	O	O:0.883169
it	O	O:0.999959
to	O	O:0.999994
the	O	O:1.000000
data	O	O:0.999977
frame	O	O:0.999999
like	O	O:0.999983
this	O	O:0.999725
:	O	O:0.999980
#CODE	O	O:0.999843
	
Apply	O	O:0.998837
function	O	O:0.999955
over	O	O:0.999930
relative	O	O:0.999984
rows	O	O:0.999302
in	O	O:0.999972
Pandas	O	O:0.999880
	
of	O	O:0.999973
course	O	O:0.999793
,	O	O:0.999999
one	O	O:0.999981
alternative	O	O:0.999380
is	O	O:0.999990
writing	O	O:0.999868
a	O	O:0.999942
for	O	O:0.999850
loop	O	O:0.999510
employing	O	O:0.999094
df.loc	B-API	B-API:0.991841
[	O	O:0.999956
i	O	O:0.999903
,	O	O:0.999993
col	O	O:0.998968
]	O	O:0.999913
and	O	O:0.999890
df.loc	B-API	B-API:0.968640
[	O	O:0.999707
i-1	O	O:0.999471
,	O	O:0.999983
col	O	O:0.999165
]	O	O:0.999927
,	O	O:0.999942
but	O	O:0.999972
I	O	O:0.999991
generally	O	O:0.999980
find	O	O:0.999796
apply	O	O:0.650313
or	O	O:0.999969
transform	O	O:0.639477
with	O	O:0.999906
functions	O	O:0.999942
computationally	O	O:0.999536
faster	O	O:0.999529
	
You	O	O:0.999931
could	O	O:0.999898
use	O	O:0.999993
a	O	O:0.999911
mask	O	B-API:0.801763
and	O	O:0.999986
apply	O	O:0.792666
it	O	O:0.999633
to	O	O:0.999949
the	O	O:0.999998
dataframe	B-API	O:0.992113
#CODE	O	O:0.999708
	
The	O	O:0.999946
above	O	O:0.999041
is	O	O:0.999990
then	O	O:0.999716
groupby'd	O	O:0.999968
on	O	O:0.999982
customer	O	O:0.999806
and	O	O:0.999999
then	O	O:0.999953
we	O	O:0.999998
can	O	O:0.999994
apply	O	O:0.997265
a	O	O:0.999989
filter	O	O:0.969244
where	O	O:0.999973
the	O	O:0.999995
number	O	O:0.999943
of	O	O:0.999959
unique	O	O:0.527862
(	O	O:0.999989
nunique	B-API	B-API:0.919105
)	O	O:0.999987
customers	O	O:0.998104
is	O	O:0.999997
equal	O	O:0.999764
to	O	O:0.999960
2	O	O:0.999982
	
First	O	O:0.999777
,	O	O:0.999989
I	O	O:0.999990
would	O	O:0.999996
like	O	O:0.999957
to	O	O:1.000000
add	O	O:0.999990
3	O	O:0.999994
extra	O	O:0.999882
columns	O	O:0.999970
with	O	O:0.999978
order	O	O:0.999936
numbers	O	O:0.999621
,	O	O:0.999996
sorting	O	O:0.999874
on	O	O:0.999956
sum	O	O:0.999694
,	O	O:0.999997
sum_sq	O	O:0.990301
and	O	O:0.999973
max	O	O:0.861507
,	O	O:0.999947
respectively	O	O:0.999366
.	O	O:0.999796
	
Next	O	O:0.999502
,	O	O:0.999998
these	O	O:0.999950
3	O	O:0.999964
columns	O	O:0.999889
should	O	O:0.999984
be	O	O:0.999999
combined	O	O:0.999967
into	O	O:0.999817
one	O	O:0.999988
column	O	O:0.999726
-	O	O:0.999997
the	O	O:0.999999
mean	O	O:0.999872
of	O	O:0.999996
the	O	O:0.999995
order	O	O:0.999925
numbers	O	O:0.997409
-	O	O:0.999984
but	O	O:0.999993
I	O	O:0.999995
do	O	O:0.999993
know	O	O:0.999526
how	O	O:0.999975
to	O	O:0.999983
do	O	O:0.999999
that	O	O:0.999955
part	O	O:0.999395
(	O	O:0.999997
with	O	O:0.999954
apply	O	B-API:0.924040
and	O	O:0.999942
axis=1	O	O:0.997528
)	O	O:0.999783
.	O	O:0.999526
	
Then	O	O:0.999638
apply	O	O:0.931768
the	O	O:0.999900
rolling_mean	B-API	B-API:0.999273
to	O	O:0.999989
`	O	O:1.000000
result	O	O:0.999272
`	O	O:0.999998
,	O	O:0.999993
so	O	O:0.999998
you	O	O:0.999975
get	O	O:0.999996
two	O	O:1.000000
columns	O	O:0.999985
of	O	O:0.999989
rolling	O	O:0.942788
means	O	O:0.998091
:	O	O:0.999945
#CODE	O	O:0.999767
	
Hmmm	O	O:0.999578
,	O	O:0.999987
I	O	O:0.999998
guess	O	O:0.999865
I	O	O:0.999967
should	O	O:0.999983
have	O	O:0.999902
transposed	O	O:0.999991
the	O	O:0.999988
data	O	O:0.999878
...	O	O:0.999963
well	O	O:0.999959
that	O	O:0.999956
was	O	O:0.999993
a	O	O:0.999996
relatively	O	O:0.999211
simple	O	O:0.999286
fix	O	O:0.997752
.	O	O:0.999811
	
Instead	O	O:0.999893
of	O	O:0.999985
using	O	O:0.999319
groupby	B-API	B-API:0.997342
and	O	O:0.999862
apply	O	B-API:0.935504
,	O	O:0.998737
#CODE	O	O:0.998446
	
Thanks	O	O:0.999004
for	O	O:0.999985
the	O	O:0.999944
reply	O	O:0.995333
!	O	O:0.999757
	
It	O	O:0.999903
works	O	O:0.999975
when	O	O:0.999806
I	O	O:0.999999
just	O	O:0.999999
pass	O	O:0.999628
a	O	O:0.999994
single	O	O:0.999607
string	O	O:0.999819
to	O	O:0.999989
that	O	O:0.999932
function	O	O:0.999876
but	O	O:0.999988
not	O	O:0.999996
when	O	O:0.999947
I	O	O:0.999998
apply	O	O:0.987972
that	O	O:0.992467
function	O	O:0.999963
to	O	O:0.999999
a	O	O:1.000000
column	O	O:0.999536
---->	O	O:0.999957
df	O	O:0.999720
[	O	O:0.999928
'	O	O:0.999970
Duration	O	O:0.999448
']	O	O:0.999973
=	O	O:0.999615
df	O	O:0.998795
[	O	O:0.999837
'	O	O:0.999896
Avg	O	O:0.999804
.	O	O:0.999919
Session	O	O:0.999707
Duration	O	O:0.999412
']	O	O:0.999830
.apply	B-API	B-API:0.999282
(	O	O:0.999972
convertTime	O	O:0.998210
)	O	O:0.999976
.	O	O:0.999776
	
It	O	O:0.999913
returned	O	O:0.999940
this	O	O:0.999910
error	O	O:0.999758
=	O	O:0.999643
TypeError	O	O:0.998886
:	O	O:0.999953
expected	O	O:0.999959
string	O	O:0.999897
or	O	O:0.999965
buffer	O	O:0.999648
	
This	O	O:0.999347
avoids	O	O:0.999859
the	O	O:0.999994
need	O	O:0.999806
for	O	O:0.999997
a	O	O:0.999989
bespoke	O	O:0.998412
Python	O	O:0.997779
function	O	O:0.999681
and	O	O:0.999995
the	O	O:0.999994
use	O	O:0.999736
of	O	O:0.999752
`	O	O:0.999930
apply	O	B-API:0.969704
`	O	O:0.999822
.	O	O:0.997815
	
Testing	O	O:0.999655
it	O	O:0.999926
for	O	O:0.999989
the	O	O:0.999979
small	O	O:0.995362
example	O	O:0.999832
DataFrame	B-API	O:0.991836
in	O	O:0.999999
your	O	O:0.999917
question	O	O:0.999550
showed	O	O:0.999936
that	O	O:0.999863
it	O	O:0.999984
was	O	O:0.999957
around	O	O:0.999855
8	O	O:0.999943
times	O	O:0.999115
faster	O	O:0.999262
.	O	O:0.999860
	
I	O	O:0.999953
am	O	O:0.999997
really	O	O:0.999780
sorry	O	O:0.999690
for	O	O:0.999977
being	O	O:0.999022
that	O	O:0.999820
naive	O	O:0.999910
,	O	O:0.999996
I	O	O:0.999994
promise	O	O:0.999845
to	O	O:0.999975
learn	O	O:0.999943
as	O	O:0.999997
much	O	O:0.999733
as	O	O:0.999997
I	O	O:0.999975
can	O	O:0.999986
if	O	O:0.999997
someone	O	O:0.999889
could	O	O:0.999955
guide	O	O:0.999993
me	O	O:0.999989
towards	O	O:0.999895
the	O	O:0.999990
right	O	O:0.999616
direction	O	O:0.998213
(	O	O:0.999995
regarding	O	O:0.999737
the	O	O:0.999935
theory	O	O:0.999192
and	O	O:0.999994
technologies	O	O:0.999699
to	O	O:0.999983
apply	O	O:0.924764
)	O	O:0.999795
.	O	O:0.999361
	
Do	O	O:0.999951
I	O	O:0.999996
really	O	O:0.999981
need	O	O:0.999692
to	O	O:0.999983
`	O	O:1.000000
apply	O	B-API:0.985575
`	O	O:0.999941
and	O	O:0.999943
iterate	O	O:0.999907
through	O	O:0.999828
each	O	O:0.999465
row	O	O:0.999952
,	O	O:0.999994
or	O	O:0.999963
is	O	O:0.999994
there	O	O:0.999981
a	O	O:0.999999
more	O	O:0.999414
efficient	O	O:0.999752
alternative	O	O:0.999871
?	O	O:0.999930
	
`	O	O:0.999882
map	O	B-API:0.985868
`	O	O:0.999994
can	O	O:0.999976
take	O	O:0.999999
a	O	O:0.999999
dictionary	O	O:0.999468
,	O	O:0.999992
Series	O	O:0.999771
or	O	O:0.999864
function	O	O:0.999771
and	O	O:0.999995
return	O	O:0.999908
a	O	O:0.999934
new	O	O:0.999497
Series	O	O:0.999830
with	O	O:0.999886
the	O	O:0.999988
mapped	O	O:0.999546
values	O	O:0.999211
.	O	O:0.999893
	
It	O	O:0.999744
is	O	O:0.999991
also	O	O:0.999966
very	O	O:0.999954
efficiently	O	O:0.998898
implemented	O	O:0.995215
(	O	O:0.999971
much	O	O:0.999894
more	O	O:0.999847
so	O	O:0.999990
than	O	O:0.999897
`	O	O:0.999995
apply	O	B-API:0.962393
`	O	O:0.999966
,	O	O:0.999811
for	O	O:0.999995
example	O	O:0.998778
)	O	O:0.999929
.	O	O:0.999870
	
What	O	O:0.999131
is	O	O:0.999997
a	O	O:0.999978
better	O	O:0.999362
way	O	O:0.999978
to	O	O:0.999978
apply	O	O:0.974172
the	O	O:0.999683
function	O	O:0.999732
to	O	O:0.999998
each	O	O:0.999984
row	O	O:0.999931
?	O	O:0.999965
	
I	O	O:0.999976
have	O	O:0.999905
looked	O	O:0.999614
into	O	O:0.999969
ways	O	O:0.999923
of	O	O:0.999990
creating	O	O:0.999914
a	O	O:0.999974
function	O	O:0.999824
to	O	O:0.999977
do	O	O:0.999999
this	O	O:0.999847
,	O	O:0.999986
but	O	O:0.999992
confused	O	O:0.999874
as	O	O:0.999996
to	O	O:0.999967
how	O	O:0.999999
to	O	O:0.999967
map	O	O:0.802614
and	O	O:0.999984
/	O	O:0.999976
or	O	O:0.999939
apply	O	O:0.624307
it	O	O:0.999890
in	O	O:0.999975
my	O	O:0.999993
case	O	O:0.999954
,	O	O:0.999999
especially	O	O:0.999865
the	O	O:0.999988
part	O	O:0.999822
returning	O	O:0.999980
the	O	O:0.999988
result	O	O:0.999978
as	O	O:0.999999
a	O	O:0.999994
new	O	O:0.999727
column	O	O:0.999570
.	O	O:0.999873
	
Just	O	O:0.999909
trying	O	O:0.999935
to	O	O:0.999994
find	O	O:0.999985
the	O	O:0.999998
most	O	O:0.999753
elegant	O	O:0.999865
way	O	O:0.999978
to	O	O:0.999995
apply	O	O:0.990794
a	O	O:0.999971
really	O	O:0.997631
simple	O	O:0.999887
transformation	O	O:0.999948
to	O	O:0.999997
values	O	O:0.999982
in	O	O:0.999997
different	O	O:0.999995
columns	O	O:0.999958
with	O	O:0.999980
each	O	O:0.999880
column	O	O:0.999923
having	O	O:0.999675
it's	O	O:0.999557
own	O	O:0.999805
condition	O	O:0.999715
.	O	O:0.999936
	
So	O	O:0.999976
given	O	O:0.999732
a	O	O:0.999997
dataframe	B-API	O:0.997442
like	O	O:0.999918
this	O	O:0.999635
:	O	O:0.999978
#CODE	O	O:0.999840
	
I	O	O:0.999869
was	O	O:0.999976
thinking	O	O:0.999391
the	O	O:0.999991
where	O	O:0.999195
function	O	O:0.999717
in	O	O:0.999996
pandas	O	O:0.999815
would	O	O:0.999993
come	O	O:0.999767
in	O	O:0.999998
handy	O	O:0.999561
here	O	O:0.999407
but	O	O:0.999827
wasn't	O	O:0.999868
sure	O	O:0.999758
how	O	O:0.999975
to	O	O:0.999987
apply	O	O:0.959817
it	O	O:0.999797
.	O	O:0.999810
	
I	O	O:0.999979
could	O	O:0.999966
do	O	O:0.999988
the	O	O:0.999978
below	O	O:0.994489
but	O	O:0.999941
does	O	O:0.999668
not	O	O:0.999991
seem	O	O:0.999988
very	O	O:0.999788
efficient	O	O:0.999864
and	O	O:0.999990
I	O	O:0.999987
would	O	O:0.999986
have	O	O:0.999966
to	O	O:1.000000
create	O	O:0.999997
a	O	O:0.999999
different	O	O:0.999443
function	O	O:0.999908
for	O	O:0.999977
each	O	O:0.997737
col	O	O:0.988132
:	O	O:0.999977
#CODE	O	O:0.999582
	
You	O	O:0.999760
can't	O	O:0.999940
just	O	O:0.999990
just	O	O:0.999981
stick	O	O:0.999989
your	O	O:0.999937
expression	O	O:0.999843
in	O	O:0.999995
brackets	O	O:0.999955
onto	O	O:0.999815
the	O	O:0.999971
groupby	B-API	B-API:0.975687
like	O	O:0.999843
that	O	O:0.999737
.	O	O:0.999981
	
What	O	O:0.999811
you	O	O:0.999992
need	O	O:0.999989
to	O	O:0.999998
do	O	O:0.999997
is	O	O:0.999990
use	O	O:0.999707
`	O	O:0.999950
apply	O	B-API:0.990798
`	O	O:0.999964
to	O	O:0.999921
apply	O	O:0.996632
a	O	O:0.999675
function	O	O:0.999530
that	O	O:0.999853
calculates	O	O:0.999924
what	O	O:0.999979
you	O	O:0.999984
want	O	O:0.999931
.	O	O:0.999924
	
What	O	O:0.999799
you	O	O:0.999992
want	O	O:0.999977
can	O	O:0.999981
be	O	O:1.000000
calculated	O	O:0.999989
more	O	O:0.999935
simply	O	O:0.999965
using	O	O:0.999974
the	O	O:0.999647
`	O	O:0.999947
diff	O	B-API:0.999620
`	O	O:0.999910
method	O	O:0.997682
:	O	O:0.999978
#CODE	O	O:0.999875
	
However	O	O:0.999537
,	O	O:0.999988
it	O	O:0.999950
is	O	O:0.999995
good	O	O:0.999670
to	O	O:0.999997
be	O	O:1.000000
aware	O	O:0.999959
of	O	O:0.999962
how	O	O:0.999940
to	O	O:0.999995
do	O	O:0.999999
it	O	O:0.999993
with	O	O:0.999946
`	O	O:0.999992
apply	O	B-API:0.964744
`	O	O:0.999962
because	O	O:0.998901
you'll	O	O:0.999966
need	O	O:0.999984
to	O	O:0.999997
do	O	O:0.999999
things	O	O:0.999969
that	O	O:0.999925
way	O	O:0.999997
if	O	O:0.999993
you	O	O:0.999994
want	O	O:0.999973
to	O	O:0.999996
do	O	O:1.000000
a	O	O:0.999998
more	O	O:0.999518
complex	O	O:0.999780
operation	O	O:0.999909
on	O	O:0.999988
the	O	O:0.999989
groups	O	O:0.993800
(	O	O:0.999968
i.e.	O	O:0.999898
,	O	O:0.999998
an	O	O:0.999990
operation	O	O:0.999899
for	O	O:0.999962
which	O	O:0.999949
there	O	O:0.999345
is	O	O:0.999986
no	O	O:0.999980
predefined	O	O:0.994969
one-shot	O	O:0.999392
method	O	O:0.999651
)	O	O:0.999970
.	O	O:0.999876
	
You	O	O:0.999851
don't	O	O:0.999964
need	O	O:0.999983
a	O	O:0.999997
regex	O	O:0.999798
here	O	O:0.999626
,	O	O:0.999999
just	O	O:0.999979
create	O	O:0.999976
a	O	O:0.999975
lookup	O	O:0.993195
table	O	O:0.999895
and	O	O:0.999994
apply	O	O:0.697554
to	O	O:0.999943
your	O	O:0.999980
DataFrame's	O	O:0.999716
column	O	O:0.999983
based	O	O:0.999877
on	O	O:0.999996
that	O	O:0.999943
column's	O	O:0.999999
first	O	O:0.999936
character	O	O:0.999928
,	O	O:0.999933
eg	O	O:0.999778
:	O	O:0.999926
#CODE	O	O:0.999830
	
To	O	O:0.999929
apply	O	O:0.926510
this	O	O:0.999736
to	O	O:0.999992
all	O	O:1.000000
columns	O	O:0.999956
,	O	O:0.999999
then	O	O:0.999987
loop	O	O:0.999996
over	O	O:0.999966
the	O	O:0.999974
columns	O	O:0.997912
:	O	O:0.999968
#CODE	O	O:0.999922
	
@USER	O	O:0.999632
then	O	O:0.999890
just	O	O:0.999984
apply	O	O:0.937827
it	O	O:0.999921
to	O	O:0.999990
all	O	O:0.999999
relevant	O	O:0.999925
columns	O	O:0.999766
?	O	O:0.999992
	
Could	O	O:0.999490
you	O	O:0.999779
[	O	O:0.999998
edit	O	O:0.999618
]	O	O:0.999816
(	O	O:0.999953
#URL	O	O:0.999713
)	O	O:0.999999
your	O	O:0.999839
question	O	O:0.999891
to	O	O:0.999998
clarify	O	O:0.999965
exactly	O	O:0.999984
what	O	O:0.999949
you	O	O:0.999992
do	O	O:0.999991
have	O	O:0.999968
...	O	O:0.999678
	
?	O	O:0.999776
	
You	O	O:0.999876
can	O	O:0.999912
groupby	B-API	B-API:0.681026
the	O	O:0.999962
user_id	O	O:0.988251
column	O	O:0.999469
and	O	O:0.999998
then	O	O:0.999945
call	O	O:0.999191
`	O	O:0.999995
apply	O	B-API:0.998774
`	O	O:0.999884
and	O	O:0.999958
pass	O	O:0.999771
a	O	O:0.999983
lambda	O	O:0.999046
which	O	O:0.999859
filters	O	O:0.999809
the	O	O:0.999987
results	O	O:0.999960
where	O	O:0.999977
the	O	O:0.999992
start	O	O:0.999908
time	O	O:0.999882
is	O	O:0.999998
equal	O	O:0.999694
to	O	O:0.999991
the	O	O:0.999999
max	O	O:0.813691
value	O	O:0.999951
,	O	O:0.999997
we	O	O:0.999999
want	O	O:0.999974
to	O	O:0.999998
generate	O	O:0.999996
a	O	O:0.999975
boolean	O	O:0.998836
index	O	O:0.999935
from	O	O:0.999957
this	O	O:0.999883
.	O	O:0.999970
	
We	O	O:0.999968
can	O	O:0.999988
then	O	O:0.999997
call	O	O:0.999923
`	O	O:0.999992
reset_index	B-API	B-API:0.999960
`	O	O:0.999985
but	O	O:0.999947
due	O	O:0.999974
to	O	O:0.999993
the	O	O:0.999997
way	O	O:0.999939
the	O	O:0.999926
groupby	B-API	B-API:0.992730
was	O	O:0.999949
filtered	O	O:0.999537
we	O	O:0.999996
will	O	O:0.999972
get	O	O:0.999997
an	O	O:0.999998
error	O	O:0.999954
with	O	O:0.999941
duplicate	O	O:0.999986
columns	O	O:0.999980
so	O	O:0.999997
we	O	O:0.999999
have	O	O:0.999989
to	O	O:0.999998
drop	O	O:0.999942
this	O	O:0.999962
duplicate	O	O:0.999968
column	O	O:0.999406
:	O	O:0.999982
#CODE	O	O:0.999857
	
thank	O	O:0.999642
you	O	O:0.999946
,	O	O:0.999997
the	O	O:0.999992
`	O	O:0.999977
apply	O	B-API:0.969471
`	O	O:0.999960
version	O	O:0.996879
actually	O	O:0.999436
worked	O	O:0.998324
but	O	O:0.999885
not	O	O:0.999969
the	O	O:0.999996
direct	O	O:0.999134
`	O	O:0.999958
unique()	B-API	B-API:0.999024
`	O	O:0.999972
version	O	O:0.997427
.	O	O:0.999934
	
The	O	O:0.999931
solution	O	O:0.999495
below	O	O:0.999931
uses	O	O:0.999879
a	O	O:0.999986
lambda	O	O:0.992885
function	O	O:0.999935
to	O	O:0.999986
apply	O	O:0.991083
a	O	O:0.999968
regex	O	O:0.998979
to	O	O:0.999971
remove	O	O:0.999958
non-digit	O	O:0.999825
characters	O	O:0.999292
.	O	O:0.999939
	
Solution	O	O:0.995383
is	O	O:0.999961
great	O	O:0.988184
.	O	O:0.999936
but	O	O:0.999990
when	O	O:0.999874
I	O	O:0.999997
apply	O	O:0.992710
this	O	O:0.998051
to	O	O:0.999983
my	O	O:1.000000
original	O	O:0.999948
data	O	O:0.999995
frame	O	O:0.999997
I	O	O:0.999993
am	O	O:0.999998
getting	O	O:0.999419
an	O	O:0.999982
error	O	O:0.999389
"	O	O:0.999934
invalid	O	O:0.998817
literal	O	O:0.999717
for	O	O:0.999848
int()	O	O:0.846212
with	O	O:0.999937
base	O	O:0.999316
10	O	O:0.999755
:	O	O:0.999834
'	O	O:0.999992
16a	O	O:0.999837
'"	O	O:0.999853
	
pandas	O	O:0.999288
-	O	O:0.999999
show	O	O:0.999574
results	O	O:0.999985
of	O	O:0.999992
apply	O	O:0.827053
next	O	O:0.999382
to	O	O:0.999960
original	O	O:0.999982
dataframe	B-API	O:0.998239
	
I	O	O:0.999992
have	O	O:0.999988
a	O	O:0.999977
pandas	O	O:0.999755
DataFrame	B-API	O:0.997865
,	O	O:0.999998
then	O	O:0.999947
I	O	O:1.000000
apply	O	O:0.989518
a	O	O:0.999420
function	O	O:0.999424
to	O	O:0.999998
a	O	O:1.000000
bunch	O	O:0.999816
of	O	O:0.999995
columns	O	O:0.999651
and	O	O:0.999998
I	O	O:0.999998
get	O	O:0.999989
a	O	O:0.999997
new	O	O:0.999523
result	O	O:0.999900
column	O	O:0.999592
.	O	O:0.999919
	
Then	O	O:0.999567
I	O	O:0.999999
want	O	O:0.999991
to	O	O:0.999942
be	O	O:1.000000
able	O	O:0.999991
to	O	O:0.999995
check	O	O:0.999999
the	O	O:0.999998
results	O	O:0.999959
of	O	O:0.999997
the	O	O:0.999996
new	O	O:0.999989
column	O	O:0.999911
with	O	O:0.999976
the	O	O:0.999996
original	O	O:0.999933
column	O	O:0.999935
values	O	O:0.999662
.	O	O:0.999912
	
#CODE	O	O:0.998453
	
One	O	O:0.999903
way	O	O:0.999971
to	O	O:0.999975
calculate	O	O:0.999989
this	O	O:0.999958
is	O	O:0.999998
to	O	O:0.999978
use	O	O:0.999994
`	O	O:0.999955
apply	O	B-API:0.968194
`	O	O:0.999976
on	O	O:0.999842
the	O	O:0.999986
`	O	O:0.999970
groupby	B-API	B-API:0.999725
`	O	O:0.999926
object	O	O:0.988140
:	O	O:0.999974
#CODE	O	O:0.999796
	
When	O	O:0.999582
I	O	O:0.999994
apply	O	O:0.984023
this	O	O:0.998561
on	O	O:0.999960
my	O	O:0.999998
real	O	O:0.999833
data	O	O:0.999951
frame	O	O:0.999945
(	O	O:0.999996
problem	O	O:0.999963
set	O	O:0.999632
)	O	O:0.999980
.	O	O:0.999765
	
I	O	O:0.999929
am	O	O:0.999997
getting	O	O:0.999364
an	O	O:0.999978
error	O	O:0.999588
`	O	O:0.999906
TypeError	O	O:0.995478
:	O	O:0.999972
Argument	O	O:0.999738
'	O	O:0.999991
values	O	O:0.997799
'	O	O:0.999965
has	O	O:0.999956
incorrect	O	O:0.999767
type	O	O:0.992828
(	O	O:0.999961
expected	O	O:0.999904
numpy.ndarray	B-API	B-API:0.696437
,	O	O:0.999926
got	O	O:0.999876
Series	O	O:0.999746
)`	O	O:0.999958
what	O	O:0.999804
would	O	O:0.999976
be	O	O:0.999999
the	O	O:0.999994
reason	O	O:0.998472
?	O	O:0.999950
	
Ok	O	O:0.999857
I	O	O:0.999965
am	O	O:0.999997
working	O	O:0.998177
on	O	O:0.999987
it	O	O:0.999995
right	O	O:0.999911
now	O	O:0.999919
.	O	O:0.999992
will	O	O:0.999936
let	O	O:0.999926
you	O	O:0.999995
know	O	O:0.999768
after	O	O:0.999977
I	O	O:0.999965
apply	O	O:0.807352
it	O	O:0.999614
to	O	O:0.999983
my	O	O:0.999999
code	O	O:0.999236
!!	O	O:0.999955
	
How	O	O:0.999892
do	O	O:0.999963
you	O	O:0.999993
apply	O	O:0.930085
a	O	O:0.999930
function	O	O:0.999274
to	O	O:0.999998
one	O	O:0.999999
of	O	O:0.999996
several	O	O:0.999971
columns	O	O:0.999952
in	O	O:0.999992
a	O	O:0.999992
DataFrame	B-API	O:0.978811
?	O	O:0.999941
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999940
to	O	O:0.999999
apply	O	O:0.993145
a	O	O:0.999875
function	O	O:0.999801
to	O	O:0.999999
data	O	O:0.999998
in	O	O:0.999999
one	O	O:0.999998
of	O	O:0.999998
the	O	O:0.999992
columns	O	O:0.999830
and	O	O:0.999990
return	O	O:0.999669
the	O	O:0.999843
same	O	O:0.999600
DataFrame	B-API	O:0.984075
but	O	O:0.999989
with	O	O:0.999994
new	O	O:0.999980
values	O	O:0.999715
in	O	O:0.999983
the	O	O:0.999999
column	O	O:0.999962
to	O	O:0.999987
which	O	O:0.999999
the	O	O:0.999913
function	O	O:0.999723
was	O	O:0.999957
applied	O	O:0.999869
to	O	O:0.999933
.	O	O:0.999988
	
Sorry	O	O:0.999369
it's	O	O:0.999713
unclear	O	O:0.999757
why	O	O:0.999976
you	O	O:0.999978
need	O	O:0.999988
to	O	O:0.999999
apply	O	O:0.973067
on	O	O:0.999980
several	O	O:0.999947
columns	O	O:0.999985
when	O	O:0.999916
the	O	O:0.999997
following	O	O:0.999914
does	O	O:0.999837
what	O	O:0.999957
you	O	O:0.999994
want	O	O:0.999937
:	O	O:0.999991
`	O	O:0.999998
df	O	O:0.999520
[	O	O:0.999961
'	O	O:0.999964
Numbers	O	O:0.999878
']	O	O:0.999966
=	O	O:0.999634
df	O	O:0.999137
[	O	O:0.999837
'	O	O:0.999960
Numbers	O	O:0.999898
']	O	O:0.999888
.apply	B-API	B-API:0.999233
(	O	O:0.999892
lambda	O	O:0.998851
x	O	O:0.999126
:	O	O:0.999837
int	O	O:0.998661
(	O	O:0.999980
'	O	O:0.999938
1	O	O:0.999898
'	O	O:0.999886
+str	O	O:0.954349
(	O	O:0.999975
x	O	O:0.999974
)))`	O	O:0.998856
can	O	O:0.999971
you	O	O:0.999997
explain	O	O:0.999962
what	O	O:0.999973
you	O	O:0.999974
are	O	O:0.999999
trying	O	O:0.999976
to	O	O:0.999984
do	O	O:0.999993
?	O	O:0.999974
	
I	O	O:0.999989
only	O	O:0.999987
want	O	O:0.999895
to	O	O:0.999995
apply	O	O:0.980576
on	O	O:0.999959
one	O	O:0.999974
column	O	O:0.999928
.	O	O:0.999945
	
In	O	O:0.999991
your	O	O:0.999956
example	O	O:0.999852
I	O	O:0.999995
would	O	O:0.999994
get	O	O:0.999946
a	O	O:0.999999
DataFrame	B-API	O:0.986882
or	O	O:0.999989
Series	O	O:0.999870
with	O	O:0.999979
one	O	O:0.999995
column	O	O:0.999991
only	O	O:0.999981
,	O	O:0.999998
which	O	O:0.999959
I	O	O:0.999992
would	O	O:0.999994
further	O	O:0.999941
have	O	O:0.999994
to	O	O:0.999999
merge	O	O:0.993358
with	O	O:0.999942
the	O	O:0.999984
the	O	O:0.999924
initial	O	O:0.997903
DataFrame	B-API	O:0.987148
.	O	O:0.999826
	
I	O	O:0.999975
hoped	O	O:0.999829
I	O	O:0.999960
could	O	O:0.999936
avoid	O	O:0.999962
this	O	O:0.999978
by	O	O:0.999994
applying	O	O:0.999976
a	O	O:0.999665
function	O	O:0.999600
to	O	O:0.999993
one	O	O:0.999999
column	O	O:0.999891
and	O	O:0.999996
leave	O	O:0.999847
everything	O	O:0.999826
else	O	O:0.999672
untouched	O	O:0.999380
.	O	O:0.999873
	
I	O	O:0.999896
saw	O	O:0.999955
that	O	O:0.999311
it's	O	O:0.999990
possible	O	O:0.999973
to	O	O:0.999995
convert	O	O:0.999951
the	O	O:0.999996
column	O	O:0.999950
into	O	O:0.999934
the	O	O:0.999990
datetime	O	O:0.996798
format	O	O:0.999847
by	O	O:0.999921
DF	O	O:0.999998
=	O	O:0.999061
pd.to_datetime	B-API	B-API:0.994455
(	O	O:0.999900
DF	O	O:0.999994
,	O	O:0.999930
'	O	O:0.999974
%Y-%m-%d	O	O:0.994690
%H	O	O:0.999835
:	O	O:0.999842
%M	O	O:0.999875
:	O	O:0.999969
%S	O	O:0.999935
')	O	O:0.999955
but	O	O:0.999981
when	O	O:0.999808
I	O	O:0.999997
try	O	O:0.999998
to	O	O:0.999989
then	O	O:0.999995
apply	O	O:0.960365
datetime.datetime.year	O	O:0.968547
(	O	O:0.999888
DF	O	O:0.999988
)	O	O:0.999961
it	O	O:0.999956
doesn't	O	O:0.999911
work	O	O:0.999729
.	O	O:0.999973
	
I	O	O:0.999965
will	O	O:0.999985
also	O	O:0.999983
need	O	O:0.999995
to	O	O:0.999994
parse	O	O:0.999991
the	O	O:0.999991
timestamps	O	O:0.998716
to	O	O:0.999983
months	O	O:0.999995
and	O	O:0.999999
combinations	O	O:0.999912
of	O	O:0.999956
years-months	O	O:0.997703
and	O	O:0.999998
so	O	O:0.999975
on	O	O:0.999923
...	O	O:0.999689
	
No	O	O:0.999984
need	O	O:0.999949
to	O	O:0.999996
apply	O	O:0.996317
a	O	O:0.999872
function	O	O:0.998993
for	O	O:0.999996
each	O	O:0.999103
row	O	O:0.999943
there	O	O:0.999851
is	O	O:0.999998
a	O	O:0.999996
new	O	O:0.999746
datetime	O	O:0.999130
attribute	O	O:0.999949
you	O	O:0.999922
can	O	O:0.999993
call	O	O:0.999991
to	O	O:0.999998
access	O	O:0.999912
the	O	O:0.999989
year	O	O:0.990109
attribute	O	O:0.999659
:	O	O:0.999937
#CODE	O	O:0.999820
	
Thanks	O	O:0.998431
,	O	O:0.999956
@USER	O	O:0.998226
,	O	O:0.999924
but	O	O:0.999950
it	O	O:0.999974
doesn't	O	O:0.999964
work	O	O:0.999891
,	O	O:0.999998
giving	O	O:0.999218
AttributeError	O	O:0.998445
:	O	O:0.999742
'	O	O:0.999975
Series	O	O:0.999708
'	O	O:0.999884
object	O	O:0.999894
has	O	O:0.999961
no	O	O:0.999979
attribute	O	O:0.999918
'	O	O:0.999987
year	O	O:0.996542
'	O	O:0.999963
,	O	O:0.999996
although	O	O:0.999978
I	O	O:0.999992
converted	O	O:0.999953
the	O	O:0.999973
original	O	O:0.998971
DF	O	O:0.999999
into	O	O:0.999528
datetime64	O	O:0.998742
[	O	O:0.999932
ns	O	O:0.997549
]	O	O:0.999916
...	O	O:0.997499
	
I	O	O:0.999961
tried	O	O:0.999908
to	O	O:0.999847
apply	O	O:0.899594
DF.year	O	O:0.950866
and	O	O:0.999947
it	O	O:0.999740
is	O	O:0.999930
not	O	O:0.999722
working	O	O:0.999695
...	O	O:0.999244
	
Thanks	O	O:0.998902
for	O	O:0.999996
your	O	O:0.999249
effort	O	O:0.996944
.	O	O:0.999924
	
I	O	O:0.999975
posted	O	O:0.999958
another	O	O:0.997998
question	O	O:0.999463
but	O	O:0.999950
I	O	O:0.999997
think	O	O:0.999959
I	O	O:0.999935
am	O	O:0.999995
getting	O	O:0.995521
close	O	O:0.999840
....	O	O:0.999833
using	O	O:0.999946
the	O	O:0.998636
apply	O	B-API:0.967772
method	O	O:0.999669
with	O	O:0.999908
a	O	O:0.999997
lambda	O	O:0.993852
function	O	O:0.999935
seems	O	O:0.999881
to	O	O:0.999995
be	O	O:1.000000
headed	O	O:0.999809
in	O	O:0.999980
the	O	O:0.999989
right	O	O:0.999647
direction	O	O:0.998397
.	O	O:0.999955
	
I'd	O	O:0.999987
like	O	O:0.999970
to	O	O:0.999995
apply	O	O:0.955039
the	O	O:0.999946
model	O	O:0.999232
to	O	O:0.999995
column	O	O:0.999996
`	O	O:0.999996
c	O	O:0.998907
`	O	O:0.999991
,	O	O:0.999923
but	O	O:0.999996
a	O	O:0.999996
naive	O	O:0.999519
attempt	O	O:0.999854
to	O	O:0.999993
do	O	O:0.999997
so	O	O:0.999984
doesn't	O	O:0.999764
work	O	O:0.999475
:	O	O:0.999991
#CODE	O	O:0.999899
	
I	O	O:0.999938
would	O	O:0.999996
like	O	O:0.999981
to	O	O:0.999999
select	O	O:0.999986
certain	O	O:0.999982
rows	O	O:0.999962
from	O	O:0.999958
a	O	O:0.999994
DataFrame	B-API	O:0.987169
and	O	O:0.999995
apply	O	O:0.974829
a	O	O:0.999880
result	O	O:0.999006
from	O	O:0.999941
lambda	O	O:0.999746
from	O	O:0.999908
it	O	O:0.999933
,	O	O:0.999995
and	O	O:0.999995
I	O	O:0.999958
am	O	O:0.999976
not	O	O:0.999976
able	O	O:0.999989
to	O	O:0.999994
assign	O	O:0.999978
it	O	O:0.999993
correctly	O	O:0.999980
,	O	O:0.999999
either	O	O:0.999966
all	O	O:0.999982
the	O	O:0.999997
other	O	O:0.999962
columns	O	O:0.999980
become	O	O:0.999953
NaN	O	O:0.999566
or	O	O:0.999976
the	O	O:0.999900
DataFrame	B-API	O:0.995848
not	O	O:0.999984
changed	O	O:0.999931
at	O	O:0.999989
all	O	O:0.999694
(	O	O:0.999981
I	O	O:0.999979
believe	O	O:0.999984
this	O	O:0.999066
is	O	O:0.999991
related	O	O:0.998247
to	O	O:0.999974
DataFrame	B-API	O:0.999948
returning	O	O:0.999928
a	O	O:0.999995
copy	O	O:0.956760
,	O	O:0.999997
read	O	O:0.997538
that	O	O:0.999921
caveat	O	O:0.999921
)	O	O:0.999989
	
I	O	O:0.999980
am	O	O:0.999997
using	O	O:0.999792
the	O	O:0.997192
.to_excel	B-API	B-API:0.997780
method	O	O:0.999645
in	O	O:0.999987
pandas	O	O:0.999972
to	O	O:0.999987
write	O	O:0.999991
dataframe	B-API	O:0.997764
in	O	O:0.999993
an	O	O:0.999996
excel	O	O:0.999818
file	O	O:0.999715
.	O	O:0.999855
	
However	O	O:0.999687
i	O	O:0.999984
want	O	O:0.999985
to	O	O:0.999989
change	O	O:0.999988
the	O	O:0.999961
default	O	O:0.998083
formatting	O	O:0.999393
.	O	O:0.999673
	
The	O	O:0.999946
answer	O	O:0.999666
at	O	O:0.999988
Apply	O	O:0.999776
styles	O	O:0.998717
while	O	O:0.999958
exporting	O	O:0.999782
to	O	O:0.999997
xlsx	O	O:0.999949
in	O	O:0.999994
pandas	O	O:0.999936
with	O	O:0.999977
XlsxWriter	O	O:0.999743
helps	O	O:0.999800
with	O	O:0.999922
the	O	O:0.999967
basic	O	O:0.999237
formatting	O	O:0.999342
.	O	O:0.999650
	
Apply	O	O:0.998462
function	O	O:0.999761
on	O	O:0.999993
cumulative	O	O:0.999886
values	O	O:0.999889
of	O	O:0.999991
pandas	O	O:0.999871
series	O	O:0.999945
	
Is	O	O:0.999988
there	O	O:0.999972
an	O	O:0.999998
equivalent	O	O:0.999934
of	O	O:0.999977
`	O	O:0.999951
rolling_apply	B-API	B-API:0.999311
`	O	O:0.999951
in	O	O:0.999894
pandas	O	O:0.999976
that	O	O:0.999977
applies	O	O:0.999806
function	O	O:0.999956
to	O	O:0.999964
the	O	O:1.000000
cumulative	O	O:0.999691
values	O	O:0.999934
of	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999881
rather	O	O:0.999961
than	O	O:0.999945
the	O	O:0.999997
rolling	O	O:0.985935
values	O	O:0.997970
?	O	O:0.999932
	
I	O	O:0.999958
realize	O	O:0.999758
`	O	O:0.999726
cumsum	B-API	B-API:0.998763
`	O	O:0.999994
,	O	O:0.999795
`	O	O:0.999977
cumprod	B-API	B-API:0.998358
`	O	O:0.999994
,	O	O:0.999535
`	O	O:0.999984
cummax	B-API	B-API:0.986053
`	O	O:0.999984
,	O	O:0.999902
and	O	O:0.999994
`	O	O:0.999972
cummin	B-API	B-API:0.999188
`	O	O:0.999998
exist	O	O:0.995560
,	O	O:0.999995
but	O	O:0.999959
I'd	O	O:0.999994
like	O	O:0.999979
to	O	O:0.999998
apply	O	O:0.982200
a	O	O:0.999963
custom	O	O:0.861646
function	O	O:0.999802
.	O	O:0.999712
	
@USER	O	O:0.999483
,	O	O:0.999992
you	O	O:0.999972
started	O	O:0.999916
with	O	O:0.999995
a	O	O:0.999998
different	O	O:0.999753
input	O	O:0.999334
(	O	O:0.999996
a	O	O:0.999985
string	O	O:0.999622
that	O	O:0.999967
formats	O	O:0.999988
as	O	O:0.999997
a	O	O:0.999985
list	O	O:0.997065
,	O	O:0.999996
I	O	O:0.999995
start	O	O:0.999977
from	O	O:0.999906
a	O	O:0.999996
list	O	O:0.997100
)	O	O:0.999965
,	O	O:0.999971
but	O	O:0.999980
I	O	O:0.999949
am	O	O:0.999996
not	O	O:0.999957
sure	O	O:0.999976
what	O	O:0.999948
the	O	O:0.999952
OP	O	O:0.999767
wants	O	O:0.998890
.	O	O:0.999821
	
Apart	O	O:0.999793
from	O	O:0.999967
that	O	O:0.999965
,	O	O:0.999999
you	O	O:0.999977
did	O	O:0.999976
the	O	O:0.999993
`	O	O:0.999980
get_dummies	B-API	B-API:0.999794
`	O	O:0.999988
within	O	O:0.999391
the	O	O:0.999972
apply	O	B-API:0.961525
(	O	O:0.999921
so	O	O:0.999961
for	O	O:0.999998
each	O	O:0.999454
row	O	O:0.999946
instead	O	O:0.999994
of	O	O:1.000000
once	O	O:0.999905
on	O	O:0.999999
all	O	O:0.999983
)	O	O:0.999996
,	O	O:0.999939
which	O	O:0.999942
made	O	O:0.999844
it	O	O:0.999997
slower	O	O:0.999916
as	O	O:0.999996
the	O	O:0.999960
approach	O	O:0.999813
above	O	O:0.999209
.	O	O:0.999807
	
I	O	O:0.999992
have	O	O:0.999987
a	O	O:0.999990
dataframe	B-API	O:0.994754
'	O	O:0.999978
clicks	O	O:0.999568
'	O	O:0.999994
created	O	O:0.999928
by	O	O:0.999987
parsing	O	O:0.999872
CSV	O	O:0.999627
of	O	O:0.999970
size	O	O:0.999496
1.4G	O	O:0.996572
.	O	O:0.999876
	
I'm	O	O:0.999946
trying	O	O:0.999945
to	O	O:0.999997
create	O	O:0.999994
a	O	O:0.999999
new	O	O:0.999940
column	O	O:0.999717
'	O	O:0.999979
bought	O	O:0.999459
'	O	O:0.999992
using	O	O:0.999910
apply	O	B-API:0.978619
function	O	O:0.992360
.	O	O:0.999160
	
#CODE	O	O:0.998453
	
`	O	O:0.999959
apply	O	B-API:0.981829
`	O	O:0.999811
is	O	O:0.999850
essentially	O	O:0.999957
just	O	O:0.999926
syntactic	O	O:0.999865
sugar	O	O:0.999776
for	O	O:0.999992
a	O	O:0.999978
`	O	O:0.999867
for	O	O:0.999578
`	O	O:0.999996
loop	O	O:0.999525
over	O	O:0.999977
the	O	O:0.999999
rows	O	O:0.999825
of	O	O:0.999997
a	O	O:0.999997
column	O	O:0.999633
.	O	O:0.999918
	
There's	O	O:0.999945
also	O	O:0.999955
an	O	O:0.999999
explicit	O	O:0.999427
`	O	O:0.999981
for	O	O:0.999359
`	O	O:0.999994
loop	O	O:0.999640
over	O	O:0.999956
a	O	O:0.999983
NumPy	O	O:0.999639
array	O	O:0.999680
in	O	O:0.999997
your	O	O:0.998992
function	O	O:0.999243
(	O	O:0.999993
the	O	O:0.999983
`	O	O:0.999985
for	O	O:0.999951
row	O	O:0.999913
in	O	O:0.999973
boughtSessions	O	O:0.998006
`	O	O:0.999996
part	O	O:0.998539
)	O	O:0.999989
.	O	O:0.999869
	
Looping	O	O:0.996028
in	O	O:0.999958
this	O	O:0.997907
(	O	O:0.999997
non-vectorised	O	O:0.999588
)	O	O:0.999982
way	O	O:0.999488
is	O	O:0.999989
best	O	O:0.999503
avoided	O	O:0.999867
whenever	O	O:0.999946
possible	O	O:0.999647
as	O	O:0.999994
it	O	O:0.999865
impacts	O	O:0.999736
performance	O	O:0.999847
heavily	O	O:0.998020
.	O	O:0.999895
	
First	O	O:0.999596
use	O	O:0.999708
`	O	O:0.999906
groupby	B-API	B-API:0.999386
`	O	O:0.999994
to	O	O:0.999905
group	O	O:0.999995
the	O	O:0.999999
rows	O	O:0.999753
of	O	O:0.999980
`	O	O:0.999999
buys	O	O:0.999352
`	O	O:0.999998
by	O	O:0.999976
the	O	O:0.999996
values	O	O:0.997486
in	O	O:0.999861
'	O	O:0.999980
session	O	O:0.999703
'	O	O:0.999948
.	O	O:0.999925
	
`	O	O:0.999959
apply	O	B-API:0.981652
`	O	O:0.999754
is	O	O:0.999869
used	O	O:0.999912
to	O	O:0.999996
join	O	O:0.863942
up	O	O:0.999979
the	O	O:0.999994
strings	O	O:0.999146
for	O	O:0.999990
each	O	O:0.999486
value	O	O:0.998769
:	O	O:0.999955
#CODE	O	O:0.999839
	
`	O	O:0.999926
groupby	B-API	B-API:0.999715
`	O	O:0.999987
means	O	O:0.999626
that	O	O:0.999994
only	O	O:0.999994
one	O	O:1.000000
pass	O	O:0.999451
through	O	O:0.999554
the	O	O:0.999961
DataFrame	B-API	O:0.930575
is	O	O:0.999961
needed	O	O:0.999695
and	O	O:0.999967
is	O	O:0.999981
pretty	O	O:0.997127
well-optimised	O	O:0.998167
in	O	O:0.999874
Pandas	O	O:0.999621
.	O	O:0.999840
	
The	O	O:0.999961
use	O	O:0.999923
of	O	O:0.999874
`	O	O:0.999940
apply	O	B-API:0.922131
`	O	O:0.999979
to	O	O:0.999896
join	O	O:0.973694
the	O	O:0.999986
strings	O	O:0.995268
is	O	O:0.999990
unavoidable	O	O:0.999860
here	O	O:0.999238
,	O	O:0.999977
but	O	O:0.999994
only	O	O:0.999973
one	O	O:1.000000
pass	O	O:0.999593
through	O	O:0.999811
the	O	O:0.999991
grouped	O	O:0.998979
values	O	O:0.998129
is	O	O:0.999964
needed	O	O:0.999748
.	O	O:0.999929
	
To	O	O:0.999971
match	O	O:0.999881
each	O	O:0.999872
string	O	O:0.999696
in	O	O:0.999914
`	O	O:0.999996
boughtSessions	O	O:0.996545
`	O	O:0.999997
to	O	O:0.999979
the	O	O:1.000000
approach	O	O:0.999965
value	O	O:0.999883
in	O	O:0.999977
`	O	O:0.999985
clicks	O	O:0.997579
[	O	O:0.999983
'	O	O:0.999976
session	O	O:0.999935
']`	O	O:0.999980
you	O	O:0.999971
can	O	O:0.999975
use	O	O:0.999998
`	O	O:0.999937
map	O	B-API:0.996808
`	O	O:0.999975
.	O	O:0.999332
	
Unlike	O	O:0.999359
`	O	O:0.999980
apply	O	B-API:0.974529
`	O	O:0.999946
,	O	O:0.999530
`	O	O:0.999986
map	O	B-API:0.993624
`	O	O:0.999969
is	O	O:0.999942
fully	O	O:0.999832
vectorised	O	O:0.998105
and	O	O:0.999876
should	O	O:0.999899
be	O	O:0.999991
very	O	O:0.999811
fast	O	O:0.990372
:	O	O:0.999945
#CODE	O	O:0.999700
	
Using	O	O:0.998580
apply	O	B-API:0.950124
(	O	O:0.999831
or	O	O:0.999994
some	O	O:0.999914
other	O	O:0.999963
vectorisation	O	O:0.999930
)	O	O:0.999993
to	O	O:0.999980
perform	O	O:0.999861
calculation	O	O:0.999621
involving	O	O:0.999881
two	O	O:0.999477
(	O	O:0.999967
or	O	O:0.999998
more	O	O:0.999920
)	O	O:0.999999
data	O	O:0.999912
frames	O	O:0.999731
?	O	O:0.999978
	
So	O	O:0.999894
,	O	O:0.999959
I'm	O	O:0.999969
not	O	O:0.999989
sure	O	O:0.999960
how	O	O:0.999993
to	O	O:0.999996
go	O	O:0.999999
about	O	O:0.999942
vectorising	O	O:0.999794
this	O	O:0.998578
.	O	O:0.999917
	
Naively	O	O:0.999843
I	O	O:0.999991
could	O	O:0.999986
split	O	O:0.999029
this	O	O:0.999954
into	O	O:0.999832
two	O	O:0.999769
apply	O	B-API:0.569283
statements	O	O:0.998394
,	O	O:0.999989
each	O	O:0.999965
effectively	O	O:0.999926
replacing	O	O:0.999965
each	O	O:0.998504
iterrows	B-API	B-API:0.925134
call	O	O:0.994805
.	O	O:0.999812
	
But	O	O:0.999381
is	O	O:0.999993
there	O	O:0.999966
some	O	O:0.999970
other	O	O:0.999947
clever	O	O:0.999698
approach	O	O:0.999963
,	O	O:0.999990
as	O	O:0.999994
there	O	O:0.999830
will	O	O:0.999959
still	O	O:0.999966
be	O	O:0.999997
significant	O	O:0.999824
looping	O	O:0.998041
overhead	O	O:0.999435
with	O	O:0.999944
that	O	O:0.999853
solution	O	O:0.999894
.	O	O:0.999951
	
python	O	O:0.999456
apply	O	B-API:0.718167
function	O	O:0.997530
to	O	O:0.999888
list	O	O:0.999787
and	O	O:0.999997
return	O	O:0.999888
data	O	O:0.999753
frame	O	O:0.999985
	
I	O	O:0.999968
am	O	O:0.999997
new	O	O:0.999148
to	O	O:0.999978
python	O	O:0.999936
.	O	O:0.999926
	
I	O	O:0.999970
wrote	O	O:0.999987
a	O	O:0.999735
function	O	O:0.999907
that	O	O:0.999911
returns	O	O:0.999966
a	O	O:0.999999
pandas	O	O:0.999889
data	O	O:0.999972
frame	O	O:0.999982
.	O	O:0.999943
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999662
to	O	O:0.999988
apply	O	O:0.986941
this	O	O:0.998862
function	O	O:0.999924
to	O	O:0.999994
a	O	O:0.999999
list	O	O:0.994404
and	O	O:0.999994
I	O	O:0.999990
would	O	O:0.999988
like	O	O:0.999954
to	O	O:0.999999
merge	O	O:0.988407
all	O	O:0.999995
the	O	O:0.999990
results	O	O:0.999907
to	O	O:0.999998
one	O	O:1.000000
data	O	O:0.999984
frame	O	O:0.999995
.	O	O:0.999960
	
For	O	O:0.999925
example	O	O:0.999744
,	O	O:0.999995
if	O	O:0.999997
my	O	O:0.999661
function	O	O:0.999909
looks	O	O:0.999905
like	O	O:0.999197
:	O	O:0.999963
#CODE	O	O:0.999810
	
I	O	O:0.999980
want	O	O:0.999963
to	O	O:0.999896
apply	O	O:0.983775
it	O	O:0.999838
to	O	O:0.999983
list	O	O:0.999806
`	O	O:0.999983
[	O	O:0.999918
1	O	O:0.999994
,	O	O:0.999957
2	O	O:0.999943
,	O	O:0.999972
3	O	O:0.999951
,	O	O:0.999985
4	O	O:0.999963
,	O	O:0.999986
5	O	O:0.999917
]`	O	O:0.999935
,	O	O:0.999977
and	O	O:0.999996
get	O	O:0.999992
the	O	O:0.999988
result	O	O:0.999980
as	O	O:0.999999
a	O	O:0.999998
data	O	O:0.999958
frame	O	O:0.999981
which	O	O:0.999951
looks	O	O:0.999909
like	O	O:0.999326
:	O	O:0.999964
#CODE	O	O:0.999816
	
This	O	O:0.999606
works	O	O:0.999905
for	O	O:0.999993
me	O	O:0.999398
in	O	O:0.999892
pandas	O	O:0.999734
0.12	O	O:0.999172
.	O	O:0.999607
	
Can	O	O:0.999820
you	O	O:0.999989
check	O	O:0.999886
which	O	O:0.999989
part	O	O:0.999840
throws	O	O:0.999969
the	O	O:0.999989
error	O	O:0.998990
?	O	O:0.999904
	
(	O	O:0.999955
the	O	O:0.999964
`	O	O:0.999931
to_datetime	B-API	B-API:0.998759
`	O	O:0.999998
part	O	O:0.999797
,	O	O:0.999997
or	O	O:0.999997
the	O	O:0.999962
`	O	O:0.999989
apply	O	B-API:0.981564
`	O	O:0.999990
part	O	O:0.996338
)	O	O:0.999985
	
Probably	O	O:0.999772
it	O	O:0.999943
is	O	O:0.999994
due	O	O:0.999876
to	O	O:0.999996
some	O	O:0.999995
missing	O	O:0.999550
values	O	O:0.999147
.	O	O:0.999849
	
If	O	O:0.999982
you	O	O:0.999959
use	O	O:0.999982
`	O	O:0.999940
dropna	B-API	B-API:0.999067
`	O	O:0.999990
before	O	O:0.999569
using	O	O:0.999860
`	O	O:0.999448
to_datetime	B-API	B-API:0.999866
`	O	O:0.999956
and	O	O:0.999615
`	O	O:0.999986
apply	O	B-API:0.999290
(	O	O:0.999960
...	O	O:0.999259
strftime()	B-API	B-API:0.974983
)`	O	O:0.999607
,	O	O:0.999995
this	O	O:0.999939
will	O	O:0.999922
work	O	O:0.999932
.	O	O:0.999982
	
A	O	O:0.999964
small	O	O:0.998520
example	O	O:0.995577
:	O	O:0.999921
#CODE	O	O:0.999872
	
Yes	O	O:0.998884
.	O	O:0.999771
	
I	O	O:0.999987
want	O	O:0.999976
to	O	O:0.999924
apply	O	O:0.993536
that	O	O:0.998955
function	O	O:0.999914
in	O	O:0.999989
Time	O	O:0.999962
column	O	O:0.999981
of	O	O:0.999995
data	O	O:0.999947
frame	O	O:0.999995
.	O	O:0.999937
	
I	O	O:0.999980
think	O	O:0.999996
your	O	O:0.999767
problem	O	O:0.999736
maybe	O	O:0.999976
that	O	O:0.999830
you're	O	O:0.999978
not	O	O:0.999996
assigning	O	O:0.999995
the	O	O:0.999981
result	O	O:0.999920
of	O	O:0.999999
your	O	O:0.999842
`	O	O:0.999996
apply	O	B-API:0.889868
`	O	O:0.999943
back	O	O:0.919309
:	O	O:0.999979
#CODE	O	O:0.999729
	
and	O	O:0.999995
then	O	O:0.999900
scale	O	O:0.999956
the	O	O:0.999996
count	O	O:0.998937
array	O	O:0.999988
to	O	O:0.999983
apply	O	O:0.984963
kde()	O	O:0.976429
to	O	O:0.999926
it	O	O:0.999999
?	O	O:0.999973
	
One	O	O:0.999270
pandas	O	O:0.998074
method	O	O:0.999943
would	O	O:0.999951
be	O	O:0.999998
to	O	O:0.999999
call	O	O:0.999948
apply	O	O:0.790592
on	O	O:0.999740
the	O	O:0.999981
df	O	O:0.999973
column	O	O:0.999954
to	O	O:0.999992
perform	O	O:0.999970
the	O	O:0.999849
conversion	O	O:0.995816
:	O	O:0.999981
#CODE	O	O:0.999874
	
One	O	O:0.999655
method	O	O:0.999925
,	O	O:0.999992
so	O	O:0.999999
long	O	O:0.999939
as	O	O:0.999993
datetime	O	O:0.949945
is	O	O:0.999968
already	O	O:0.999939
a	O	O:0.999994
datetime	O	O:0.995494
column	O	O:0.999260
is	O	O:0.999989
to	O	O:0.999987
apply	O	O:0.934476
`	O	O:0.999945
datetime.strftime	O	O:0.626639
`	O	O:0.999997
to	O	O:0.999950
get	O	O:0.999999
the	O	O:0.999995
string	O	O:0.999657
for	O	O:0.999989
the	O	O:0.999776
weekday	B-API	B-API:0.974923
:	O	O:0.999872
#CODE	O	O:0.999713
	
Then	O	O:0.999555
I	O	O:0.999999
have	O	O:0.999994
to	O	O:0.999990
apply	O	O:0.997620
a	O	O:0.999901
function	O	O:0.999300
to	O	O:0.999987
the	O	O:1.000000
dataframe	B-API	O:0.999462
to	O	O:0.999997
create	O	O:0.999999
a	O	O:0.999999
new	O	O:0.999939
column	O	O:0.999979
based	O	O:0.999875
on	O	O:0.999999
some	O	O:0.999636
values	O	O:0.998868
:	O	O:0.999955
#CODE	O	O:0.999929
	
Yes	O	O:0.999692
thanks	O	O:0.998528
!	O	O:0.999863
	
So	O	O:0.999889
,	O	O:0.999990
should	O	O:0.999967
be	O	O:0.999996
better	O	O:0.999979
to	O	O:0.999975
concatenate	O	O:0.956772
the	O	O:0.999983
dataframe	B-API	O:0.999201
inside	O	O:0.999879
the	O	O:0.999986
loop	O	O:0.999896
instead	O	O:0.999981
of	O	O:0.999992
build	O	O:0.999737
the	O	O:0.999991
whole	O	O:0.999566
dataframe	B-API	O:0.999050
outside	O	O:0.999656
and	O	O:0.999999
then	O	O:0.999850
apply	O	O:0.849401
the	O	O:0.999502
function	O	O:0.998540
?	O	O:0.999933
	
The	O	O:0.999682
RAM	O	O:0.999845
consumption	O	O:0.999042
is	O	O:0.999996
proportional	O	O:0.998984
to	O	O:0.999995
the	O	O:1.000000
size	O	O:0.999895
of	O	O:0.999996
the	O	O:0.999993
chunk	O	O:0.999912
,	O	O:0.999996
no	O	O:0.999987
matter	O	O:0.999949
the	O	O:0.999999
final	O	O:0.999905
dimension	O	O:0.999964
of	O	O:0.999995
the	O	O:0.999997
whole	O	O:0.999712
concatenate	O	B-API:0.524620
DataFrame	B-API	O:0.990769
?	O	O:0.999954
	
The	O	O:0.999858
"	O	O:0.999988
dumb	O	O:0.997829
"	O	O:0.999982
way	O	O:0.999720
would	O	O:0.999949
be	O	O:0.999998
to	O	O:0.999999
cycle	O	O:0.999993
through	O	O:0.999792
the	O	O:0.999968
frame	O	O:0.999836
(	O	O:0.999972
iterrows	B-API	B-API:0.937002
)	O	O:0.999967
and	O	O:0.999975
compare	O	O:0.999911
one	O	O:0.999980
by	O	O:0.999972
one	O	O:0.999948
.	O	O:0.999756
	
There	O	O:0.999870
must	O	O:0.999949
be	O	O:1.000000
a	O	O:0.999998
smarter	O	O:0.993745
,	O	O:0.999989
Pandas	O	O:0.999909
way	O	O:0.999985
like	O	O:0.999902
using	O	O:0.999993
something	O	O:0.999834
like	O	O:0.999369
apply	O	O:0.608912
/	O	O:0.999820
join	O	B-API:0.982083
/	O	O:0.999910
whatever	O	O:0.999688
.	O	O:0.999850
	
Here's	O	O:0.999702
one	O	O:0.999985
way	O	O:0.999981
of	O	O:0.999992
doing	O	O:0.999748
it	O	O:0.999988
,	O	O:0.999992
using	O	O:0.999822
`	O	O:0.999709
groupby	B-API	B-API:0.999927
`	O	O:0.999959
and	O	O:0.998897
`	O	O:0.999994
apply	O	B-API:0.998793
`	O	O:0.999314
:	O	O:0.999133
#CODE	O	O:0.999898
	
Trouble	O	O:0.999857
passing	O	O:0.997131
in	O	O:0.999929
lambda	O	O:0.999801
to	O	O:0.999992
apply	O	O:0.749942
for	O	O:0.999813
pandas	O	O:0.998526
DataFrame	B-API	O:0.988603
	
I'm	O	O:0.999933
trying	O	O:0.999904
to	O	O:0.999995
apply	O	O:0.987911
a	O	O:0.999895
function	O	O:0.999500
to	O	O:0.999998
all	O	O:1.000000
rows	O	O:0.999949
of	O	O:0.999995
a	O	O:0.999995
pandas	O	O:0.999562
DataFrame	B-API	O:0.978081
(	O	O:0.999976
actually	O	O:0.999992
just	O	O:0.999947
one	O	O:0.999999
column	O	O:0.999854
in	O	O:0.999993
that	O	O:0.999971
DataFrame	B-API	O:0.998634
)	O	O:0.999974
	
Can	O	O:0.999868
you	O	O:0.999977
show	O	O:0.999431
`	O	O:0.999989
df.info()`	O	O:0.997995
and	O	O:0.999996
which	O	O:0.999992
columns	O	O:0.999534
you	O	O:0.999971
are	O	O:0.999999
trying	O	O:0.999985
to	O	O:0.999986
perform	O	O:0.999985
the	O	O:0.999990
calculations	O	O:0.999813
on	O	O:0.999991
,	O	O:0.999996
you	O	O:0.999977
will	O	O:0.999952
not	O	O:0.999998
be	O	O:1.000000
able	O	O:0.999990
to	O	O:0.999998
pass	O	O:0.999907
2	O	O:0.999989
columns	O	O:0.999962
row-wise	O	O:0.999694
if	O	O:0.999982
you	O	O:0.999957
are	O	O:0.999997
calling	O	O:0.999933
apply	O	O:0.640265
on	O	O:0.999963
a	O	O:0.999965
series	O	O:0.999554
	
I	O	O:0.999906
am	O	O:0.999997
unable	O	O:0.999462
to	O	O:0.999992
apply	O	O:0.947389
the	O	O:0.999983
last	O	O:0.997693
operation	O	O:0.999954
across	O	O:0.999980
all	O	O:0.999986
of	O	O:0.999993
the	O	O:0.999932
DataFrames	O	O:0.999146
.	O	O:0.999814
	
It	O	O:0.999969
seems	O	O:0.999952
I	O	O:0.999992
can	O	O:0.999997
only	O	O:0.999979
get	O	O:0.999992
it	O	O:0.999998
to	O	O:0.999999
apply	O	O:0.974539
to	O	O:0.999962
the	O	O:0.999997
last	O	O:0.999672
DataFrame	B-API	O:0.994994
in	O	O:0.999970
my	O	O:0.999975
list	O	O:0.997097
.	O	O:0.999905
	
Once	O	O:0.999889
I	O	O:0.999990
get	O	O:0.999986
past	O	O:0.999749
this	O	O:0.999983
point	O	O:0.999909
I	O	O:0.999995
will	O	O:0.999995
have	O	O:0.999970
to	O	O:0.999998
append	O	O:0.997702
all	O	O:0.999969
of	O	O:0.999994
the	O	O:0.999984
DataFrames	O	O:0.999814
to	O	O:0.999987
form	O	O:0.999999
one	O	O:0.999975
large	O	O:0.999750
DataFrame	B-API	O:0.973382
.	O	O:0.999693
	
I	O	O:0.999988
need	O	O:0.999986
to	O	O:0.999992
create	O	O:0.999963
an	O	O:0.999996
index	O	O:0.999990
on	O	O:0.999998
a	O	O:0.999999
specific	O	O:0.999818
frequency	O	O:0.999902
,	O	O:0.999987
however	O	O:0.999939
I	O	O:0.999998
need	O	O:0.999993
to	O	O:0.999977
apply	O	O:0.993624
that	O	O:0.999706
frequency	O	O:0.999983
only	O	O:0.999873
for	O	O:0.999995
certain	O	O:0.997409
months	O	O:0.998744
.	O	O:0.999873
	
This	O	O:0.998760
is	O	O:0.999990
the	O	O:0.999907
frequency	O	O:0.996040
:	O	O:0.999824
#CODE	O	O:0.999818
	
I	O	O:0.999981
suppose	O	O:0.999977
the	O	O:0.999915
issue	O	O:0.997074
is	O	O:0.999991
that	O	O:0.999434
VALUE	O	O:0.999661
does	O	O:0.999788
not	O	O:0.999993
have	O	O:0.999994
an	O	O:0.999998
upper	O	O:0.999948
level	O	O:0.997543
.	O	O:0.999822
	
A	O	O:0.999980
similar	O	O:0.999793
operation	O	O:0.996011
is	O	O:0.999987
not	O	O:0.999975
described	O	O:0.999826
in	O	O:0.999949
the	O	O:0.999951
manual	O	O:0.997234
.	O	O:0.999790
	
Isn't	O	O:0.999927
there	O	O:0.999986
a	O	O:0.999995
way	O	O:0.999914
to	O	O:0.999989
apply	O	O:0.932423
`	O	O:0.999959
stack	O	B-API:0.988823
`	O	O:0.999999
only	O	O:0.999819
to	O	O:1.000000
some	O	O:0.999997
columns	O	O:0.999853
?	O	O:0.999978
	
how	O	O:0.999920
to	O	O:0.999994
apply	O	O:0.993853
ceiling	O	O:0.992631
to	O	O:0.999981
pandas	O	O:0.999980
DateTime	O	O:0.998724
	
I	O	O:0.999755
was	O	O:0.999944
considering	O	O:0.999821
this	O	O:0.999917
as	O	O:0.999995
well	O	O:0.999101
,	O	O:0.999994
but	O	O:0.999971
I	O	O:0.999996
need	O	O:0.999988
to	O	O:0.999965
slice	O	O:0.999995
several	O	O:0.999979
dataframes	O	O:0.999259
in	O	O:0.999992
the	O	O:0.999997
same	O	O:0.999917
way	O	O:0.999960
,	O	O:0.999998
so	O	O:0.999993
I	O	O:0.999984
would	O	O:0.999996
need	O	O:0.999949
to	O	O:0.999998
do	O	O:0.999998
it	O	O:0.999998
multiple	O	O:0.999874
times	O	O:0.999593
.	O	O:0.999904
	
I	O	O:0.999851
was	O	O:0.999984
looking	O	O:0.999624
to	O	O:0.999994
have	O	O:0.999999
the	O	O:0.999980
function	O	O:0.999986
take	O	O:0.999868
the	O	O:0.999991
locationargument	O	O:0.998042
and	O	O:0.999981
apply	O	O:0.687858
it	O	O:0.999798
to	O	O:0.999989
all	O	O:1.000000
dataframes	O	O:0.999738
in	O	O:0.999987
one	O	O:0.999992
call	O	O:0.996915
.	O	O:0.999928
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
I	O	O:0.999980
will	O	O:0.999959
get	O	O:0.999980
different	O	O:0.999977
groups	O	O:0.999888
that	O	O:0.999705
do	O	O:0.999990
not	O	O:0.999986
coincide	O	O:0.998883
.	O	O:0.999920
	
Is	O	O:0.999980
there	O	O:0.999986
some	O	O:0.999959
way	O	O:0.999990
to	O	O:0.999989
get	O	O:0.999998
the	O	O:0.999993
`	O	O:0.999991
datetime	O	O:0.981378
`	O	O:0.999996
related	O	O:0.999624
groups	O	O:0.999918
from	O	O:0.999911
the	O	O:0.999972
first	O	O:0.999871
grouping	O	O:0.998927
,	O	O:0.999957
and	O	O:0.999995
apply	O	O:0.985225
them	O	O:0.996807
to	O	O:0.999988
the	O	O:0.999997
second	O	O:0.999792
grouping	O	O:0.999472
instead	O	O:0.999887
?	O	O:0.999961
	
Or	O	O:0.999951
how	O	O:0.999970
could	O	O:0.999959
I	O	O:0.999999
achieve	O	O:0.999993
this	O	O:0.999864
else	O	O:0.999911
wise	O	O:0.999670
?	O	O:0.999957
	
this	O	O:0.999487
won't	O	O:0.999961
work	O	O:0.999967
because	O	O:0.999991
you	O	O:0.999970
are	O	O:0.999999
calling	O	O:0.999959
apply	O	O:0.568123
on	O	O:0.999927
the	O	O:0.999972
df	O	O:0.999732
,	O	O:0.999986
naturally	O	O:0.999979
this	O	O:0.999985
will	O	O:0.999987
iterate	O	O:0.999971
over	O	O:0.999948
the	O	O:0.999982
columns	O	O:0.999699
and	O	O:0.999993
you	O	O:0.999982
are	O	O:0.999996
trying	O	O:0.999979
to	O	O:0.999992
check	O	O:0.999993
the	O	O:0.999996
probability	O	O:0.999842
column	O	O:0.999897
it's	O	O:0.999964
unclear	O	O:0.999914
to	O	O:0.999980
me	O	O:0.999998
what	O	O:0.999924
you	O	O:0.999977
are	O	O:0.999999
trying	O	O:0.999976
to	O	O:0.999991
do	O	O:0.999998
here	O	O:0.999826
,	O	O:0.999993
are	O	O:0.999996
you	O	O:0.999989
checking	O	O:0.999945
just	O	O:0.999930
the	O	O:0.999996
probability	O	O:0.999947
column	O	O:0.999902
or	O	O:0.999999
all	O	O:0.999993
columns	O	O:0.999904
?	O	O:0.999948
	
So	O	O:0.999940
it	O	O:0.999977
would	O	O:0.999984
be	O	O:0.999998
great	O	O:0.999920
if	O	O:0.999970
there's	O	O:0.999969
some	O	O:0.999901
option	O	O:0.999976
to	O	O:0.999994
do	O	O:0.999999
the	O	O:0.999991
job	O	O:0.999911
with	O	O:0.999989
a	O	O:0.999958
*	O	O:0.999994
.csv	O	O:0.997378
with	O	O:0.999976
two	O	O:0.999994
rows	O	O:0.999675
.	O	O:0.999879
	
On	O	O:0.999924
the	O	O:0.999988
left	O	O:0.999507
all	O	O:0.999754
"	O	O:0.999961
Industry	O	O:0.999661
Category	O	O:0.999513
"	O	O:0.999970
items	O	O:0.998798
and	O	O:0.999993
on	O	O:0.999998
the	O	O:0.999960
right	O	O:0.999941
the	O	O:0.999988
desired	O	O:0.999165
"	O	O:0.999963
Parent	O	O:0.999823
Category	O	O:0.999677
"	O	O:0.999968
I	O	O:0.999989
like	O	O:0.999987
to	O	O:0.999990
apply	O	O:0.949273
to	O	O:0.999968
the	O	O:0.999994
dataset	O	O:0.999722
.	O	O:0.999841
	
I	O	O:0.999992
think	O	O:0.999943
I	O	O:0.999853
got	O	O:0.999944
the	O	O:0.999853
idea	O	O:0.997540
.	O	O:0.999823
	
I	O	O:0.999992
have	O	O:0.999989
to	O	O:0.999993
create	O	O:0.999994
a	O	O:0.999997
csv	O	O:0.999664
and	O	O:0.999994
apply	O	B-API:0.676172
the	O	O:0.999731
the2nd	O	O:0.999280
step	O	O:0.999933
of	O	O:0.999998
this	O	O:0.999685
[	O	O:0.999997
link	O	O:0.999679
]	O	O:0.999459
(	O	O:0.999937
#URL	O	O:0.999416
)	O	O:0.999940
.	O	O:0.999740
	
Once	O	O:0.999891
I	O	O:0.999997
have	O	O:0.999981
the	O	O:0.999971
dict	O	O:0.999912
,	O	O:0.999994
I	O	O:0.999999
have	O	O:0.999994
to	O	O:0.999970
map	O	O:0.981358
the	O	O:0.999991
df	O	O:0.999853
with	O	O:0.999606
.map	B-API	B-API:0.996781
(	O	O:0.999994
category_list.get	O	O:0.993059
)	O	O:0.999968
	
I	O	O:0.999948
do	O	O:0.999995
this	O	O:0.999895
quite	O	O:0.999936
a	O	O:0.999985
lot	O	O:0.998380
.	O	O:0.999803
	
I	O	O:0.999962
would	O	O:0.999992
create	O	O:0.999772
a	O	O:0.999999
dictionary	O	O:0.999702
and	O	O:0.999982
use	O	O:0.999888
`	O	O:0.999682
apply	O	B-API:0.995885
`	O	O:0.999822
and	O	O:0.997532
`	O	O:0.999994
lambda	O	O:0.937564
`	O	O:0.999960
.	O	O:0.998423
	
#CODE	O	O:0.998453
	
I	O	O:0.999924
am	O	O:0.999997
trying	O	O:0.999069
to	O	O:0.999997
read	O	O:0.999982
a	O	O:0.999994
certain	O	O:0.998071
DF	O	O:0.999998
from	O	O:0.999918
file	O	O:0.999735
and	O	O:0.999996
add	O	O:0.999924
to	O	O:0.999926
it	O	O:0.999998
two	O	O:0.999996
more	O	O:0.999953
columns	O	O:0.999929
containing	O	O:0.999710
,	O	O:0.999998
say	O	O:0.999912
,	O	O:0.999998
the	O	O:0.999985
year	O	O:0.993912
and	O	O:0.999995
the	O	O:0.999992
week	O	O:0.999687
from	O	O:0.999970
other	O	O:0.999992
columns	O	O:0.999889
in	O	O:0.999931
DF	O	O:0.999996
.	O	O:0.999890
	
When	O	O:0.999574
i	O	O:0.999987
apply	O	O:0.897863
the	O	O:0.999940
code	O	O:0.999506
to	O	O:0.999998
generate	O	O:0.999998
a	O	O:0.999999
single	O	O:0.999887
new	O	O:0.999979
column	O	O:0.999849
,	O	O:0.999987
all	O	O:0.999945
works	O	O:0.999796
great	O	O:0.998426
.	O	O:0.999857
	
But	O	O:0.999952
when	O	O:0.999885
there	O	O:0.999973
are	O	O:0.999998
few	O	O:0.999989
columns	O	O:0.999875
to	O	O:0.999995
be	O	O:1.000000
created	O	O:0.999780
,	O	O:0.999995
the	O	O:0.999988
change	O	O:0.991142
does	O	O:0.999710
not	O	O:0.999972
apply	O	O:0.790786
.	O	O:0.999282
	
Specifically	O	O:0.999817
,	O	O:0.999997
new	O	O:0.999973
columns	O	O:0.999778
are	O	O:0.999963
created	O	O:0.999445
but	O	O:0.999995
their	O	O:0.999853
values	O	O:0.998935
are	O	O:0.999930
not	O	O:0.999993
what	O	O:0.999983
they	O	O:0.999966
are	O	O:0.999998
supposed	O	O:0.999956
to	O	O:0.999986
be	O	O:0.999998
.	O	O:0.999942
	
it	O	O:0.999932
has	O	O:0.999977
to	O	O:0.999994
do	O	O:0.999994
with	O	O:0.999950
not	O	O:0.999978
changing	O	O:0.999985
all	O	O:0.999991
data	O	O:0.999968
values	O	O:0.999180
,	O	O:0.999984
but	O	O:0.999982
i	O	O:0.999906
don't	O	O:0.999951
understand	O	O:0.999862
why	O	O:0.999989
the	O	O:0.999960
change	O	O:0.996645
does	O	O:0.999697
not	O	O:0.999980
apply	O	O:0.944633
-	O	O:0.999901
after	O	O:0.999873
all	O	O:0.999917
,	O	O:0.999955
before	O	O:0.999782
the	O	O:0.999967
second	O	O:0.998965
iteration	O	O:0.999909
begins	O	O:0.999614
,	O	O:0.999994
the	O	O:0.999927
DF	O	O:0.999996
seems	O	O:0.999926
to	O	O:0.999997
be	O	O:0.999999
updated	O	O:0.999685
and	O	O:0.999994
then	O	O:0.999519
`	O	O:0.999995
tbl	O	O:0.996800
[	O	O:0.999998
tmp_col_name	O	O:0.999260
]	O	O:0.999928
=	O	O:0.999196
'	O	O:0.999964
No	O	O:0.999982
Week	O	O:0.999652
'`	O	O:0.999937
for	O	O:0.999951
the	O	O:0.999969
second	O	O:0.998600
iteration	O	O:0.999734
"	O	O:0.999989
deletes	O	O:0.996728
"	O	O:0.999997
the	O	O:0.999984
changes	O	O:0.999860
made	O	O:0.999693
in	O	O:0.999993
the	O	O:0.999995
first	O	O:0.999586
iteration	O	O:0.999485
,	O	O:0.999980
but	O	O:0.999993
only	O	O:0.999919
partially	O	O:0.999874
-	O	O:0.999992
it	O	O:0.999961
leaves	O	O:0.999734
the	O	O:0.999987
new	O	O:0.999872
column	O	O:0.999740
created	O	O:0.999457
but	O	O:0.999983
filled	O	O:0.999514
with	O	O:0.999611
'	O	O:0.999922
No	O	O:0.999989
Week	O	O:0.999281
'	O	O:0.999928
values	O	O:0.999596
...	O	O:0.999382
	
I'm	O	O:0.999938
struggling	O	O:0.999435
to	O	O:0.999995
find	O	O:0.999998
a	O	O:0.999998
way	O	O:0.999956
to	O	O:0.999995
iterate	O	O:0.999992
over	O	O:0.999722
Df	O	O:0.999660
,	O	O:0.999984
and	O	O:0.999986
for	O	O:0.999996
each	O	O:0.997373
row	O	O:0.999882
,	O	O:0.999996
apply	O	O:0.849855
a	O	O:0.999869
definition	O	O:0.999346
that	O	O:0.999970
iterates	O	O:0.999873
to	O	O:0.999997
search	O	O:0.999963
for	O	O:0.999990
the	O	O:0.999973
nearest	O	O:0.999401
match	O	O:0.999212
in	O	O:0.999978
Df1	O	O:0.999581
(	O	O:0.999984
with	O	O:0.999964
the	O	O:0.999978
aim	O	O:0.999975
to	O	O:0.999996
add	O	O:0.999999
data	O	O:0.999988
from	O	O:0.999967
Df1	O	O:0.999980
to	O	O:0.999988
Df	O	O:0.999982
)	O	O:0.999962
.	O	O:0.999768
	
Read	O	O:0.995304
and	O	O:0.999979
tried	O	O:0.999935
a	O	O:0.999984
lot	O	O:0.999659
of	O	O:0.999974
methods	O	O:0.998907
found	O	O:0.999896
here	O	O:0.998839
,	O	O:0.999856
but	O	O:0.999954
not	O	O:0.999905
winning	O	O:0.999414
.	O	O:0.999813
	
Would	O	O:0.999616
appreciate	O	O:0.999973
some	O	O:0.999906
pointers	O	O:0.999846
,	O	O:0.999997
especially	O	O:0.999905
if	O	O:0.999980
I'm	O	O:0.999979
going	O	O:0.999761
the	O	O:0.999989
wrong	O	O:0.997770
route	O	O:0.998638
:	O	O:0.999940
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999977
apply	O	B-API:0.984269
`	O	O:0.999969
to	O	O:0.999877
call	O	O:0.999989
a	O	O:0.999996
lambda	O	O:0.959029
function	O	O:0.999968
that	O	O:0.999583
splits	O	O:0.999833
the	O	O:0.999980
string	O	O:0.997904
and	O	O:0.999998
then	O	O:0.999987
joins	O	O:0.999912
on	O	O:0.999995
the	O	O:0.999997
unique	O	O:0.805080
values	O	O:0.994462
:	O	O:0.999950
#CODE	O	O:0.999941
	
Basically	O	O:0.999936
we	O	O:0.999995
can	O	O:0.999990
drop	O	O:0.999800
the	O	O:0.999992
`	O	O:0.999977
NaN	O	O:0.989960
`	O	O:0.999999
rows	O	O:0.999079
first	O	O:0.999877
and	O	O:0.999999
then	O	O:0.999833
call	O	O:0.999228
`	O	O:0.999995
apply	O	B-API:0.998693
`	O	O:0.999931
and	O	O:0.999721
use	O	O:0.999949
`	O	O:0.999595
datetime.strftime	O	B-API:0.544731
`	O	O:0.999991
to	O	O:0.999972
apply	O	O:0.996404
a	O	O:0.999950
new	O	O:0.991327
format	O	O:0.998258
:	O	O:0.999916
#CODE	O	O:0.999807
	
Can	O	O:0.999828
you	O	O:0.999976
post	O	O:0.999871
what	O	O:0.999986
the	O	O:0.999999
final	O	O:0.999947
df	O	O:0.999860
values	O	O:0.999459
should	O	O:0.999875
be	O	O:0.999992
and	O	O:0.999999
give	O	O:0.999925
examples	O	O:0.999490
of	O	O:0.999997
the	O	O:0.999985
calculations	O	O:0.999852
you	O	O:0.999936
are	O	O:0.999998
trying	O	O:0.999981
to	O	O:0.999991
apply	O	O:0.940004
,	O	O:0.999938
thanks	O	O:0.997589
	
@USER	O	O:0.999455
,	O	O:0.999995
unfortunately	O	O:0.999841
I	O	O:0.999993
think	O	O:0.999983
there	O	O:0.999023
is	O	O:0.999978
no	O	O:0.999983
general	O	O:0.999210
answer	O	O:0.999975
that	O	O:0.999724
I	O	O:0.999999
know	O	O:0.999990
of	O	O:0.999961
for	O	O:0.999860
which	O	O:0.999862
option	O	O:0.999695
to	O	O:0.999986
opt	O	O:0.999988
for	O	O:0.999931
.	O	O:0.999692
	
It	O	O:0.999975
really	O	O:0.999925
depends	O	O:0.999610
on	O	O:0.999981
both	O	O:0.999995
your	O	O:0.999992
data	O	O:0.999720
and	O	O:0.999999
the	O	O:0.999995
specific	O	O:0.998498
machine	O	O:0.999899
learning	O	O:0.994998
/	O	O:0.999982
statistical	O	O:0.993953
algorithm	O	O:0.999874
you	O	O:0.999902
would	O	O:0.999993
like	O	O:0.999993
to	O	O:0.999998
apply	O	O:0.900417
.	O	O:0.999384
	
However	O	O:0.999794
;	O	O:0.999984
I	O	O:0.999959
would	O	O:0.999994
generally	O	O:0.999595
suggest	O	O:0.999962
opting	O	O:0.999507
for	O	O:0.999961
1	O	O:0.999905
)	O	O:0.999981
as	O	O:0.999994
base	O	O:0.999901
case	O	O:0.999953
unless	O	O:0.999945
you	O	O:0.999990
have	O	O:0.999994
specific	O	O:0.999987
concerns	O	O:0.999954
about	O	O:0.999924
correlations	O	O:0.999343
between	O	O:0.999953
your	O	O:0.999892
features	O	O:0.997178
and	O	O:0.999993
how	O	O:0.999999
your	O	O:0.999792
ML	O	O:0.999966
algorithm	O	O:0.999973
deals	O	O:0.999379
with	O	O:0.999938
that	O	O:0.999534
.	O	O:0.999984
	
One	O	O:0.999567
method	O	O:0.999667
is	O	O:0.999990
to	O	O:0.999994
apply	O	O:0.993675
a	O	O:0.999866
function	O	O:0.999266
to	O	O:0.999999
your	O	O:0.999999
df	O	O:0.999931
to	O	O:0.999998
split	O	O:0.999885
the	O	O:0.999979
'	O	O:0.999963
cc	O	O:0.999825
'	O	O:0.999988
column	O	O:0.999898
and	O	O:0.999998
create	O	O:0.999959
a	O	O:0.999987
new	O	O:0.999726
dict	O	O:0.999886
that	O	O:0.999908
contains	O	O:0.999968
each	O	O:0.999968
split	O	O:0.993591
country	O	O:0.997529
and	O	O:0.999995
their	O	O:0.999905
associated	O	O:0.999866
count	O	O:0.999009
,	O	O:0.999998
you	O	O:0.999983
can	O	O:0.999998
then	O	O:0.999999
construct	O	O:0.999998
a	O	O:1.000000
new	O	O:0.999893
df	O	O:0.999894
from	O	O:0.999982
this	O	O:0.999896
,	O	O:0.999995
groupby	B-API	B-API:0.934325
the	O	O:0.999947
country	O	O:0.991530
and	O	O:0.999988
perform	O	O:0.999523
the	O	O:0.999980
sum	O	O:0.999657
on	O	O:0.999994
the	O	O:0.999993
count	O	O:0.992320
:	O	O:0.999979
#CODE	O	O:0.999843
	
Python	O	O:0.996689
PANDAS	O	O:0.998787
:	O	O:0.999852
New	O	O:0.999799
Column	O	O:0.999701
,	O	O:0.999966
Apply	O	O:0.999449
Unique	O	O:0.999590
Value	O	O:0.996361
To	O	O:0.999906
All	O	O:0.999895
Rows	O	O:0.999452
	
My	O	O:0.999863
confusion	O	O:0.999814
seems	O	O:0.999971
to	O	O:0.999996
be	O	O:1.000000
about	O	O:0.999930
which	O	O:0.998986
function	O	O:0.999881
to	O	O:0.999968
utilize	O	O:0.999750
(	O	O:0.999968
apply	O	B-API:0.676427
,	O	O:0.999978
mapapply	O	O:0.998984
,	O	O:0.999982
etc	O	O:0.999964
.	O	O:0.999986
)	O	O:0.999994
,	O	O:0.999997
if	O	O:0.999992
I	O	O:0.999997
need	O	O:0.999972
to	O	O:0.999988
reference	O	O:0.999994
an	O	O:0.999987
index	O	O:0.999994
value	O	O:0.999948
in	O	O:0.999994
the	O	O:0.999998
original	O	O:0.999843
df	O	O:0.999927
to	O	O:0.999995
apply	O	O:0.991517
a	O	O:0.999985
completely	O	O:0.998963
unrelated	O	O:0.999976
value	O	O:0.999893
to	O	O:0.999979
the	O	O:0.999999
initial	O	O:0.999624
df	O	O:0.999781
,	O	O:0.999965
and	O	O:0.999992
the	O	O:0.999994
most	O	O:0.998717
optimized	O	O:0.999870
,	O	O:0.999993
pythonic	O	O:0.999891
way	O	O:0.999961
to	O	O:0.999968
accomplish	O	O:0.999990
this	O	O:0.999726
.	O	O:0.999938
	
`	O	O:0.999981
monthrange	O	O:0.984485
`	O	O:0.999996
returns	O	O:0.999523
a	O	O:0.999997
tuple	O	O:0.998585
with	O	O:0.999937
the	O	O:0.999981
first	O	O:0.999472
and	O	O:0.999998
last	O	O:0.999971
days	O	O:0.999791
of	O	O:0.999994
the	O	O:0.999967
month	O	O:0.999538
,	O	O:0.999994
so	O	O:0.999959
`	O	O:0.999985
[	O	O:0.999967
1	O	O:0.999994
]`	O	O:0.999971
references	O	O:0.999088
the	O	O:0.999997
last	O	O:0.999888
day	O	O:0.999984
of	O	O:0.999992
the	O	O:0.999929
month	O	O:0.997809
.	O	O:0.999764
	
You	O	O:0.999873
can	O	O:0.999991
also	O	O:0.999990
use	O	O:0.999990
@USER	O	O:0.993065
'	O	O:0.999337
s	O	O:0.999857
method	O	O:0.999946
for	O	O:0.999979
finding	O	O:0.999937
the	O	O:0.999979
date	O	O:0.999008
of	O	O:0.999988
the	O	O:0.999994
last	O	O:0.999728
day	O	O:0.999915
,	O	O:0.999973
and	O	O:0.999992
assign	O	O:0.999762
it	O	O:0.999989
directly	O	O:0.999881
to	O	O:0.999992
the	O	O:0.999999
column	O	O:0.999947
instead	O	O:0.999993
of	O	O:0.999996
`	O	O:0.999984
apply	O	B-API:0.980040
`	O	O:0.999890
ing	O	O:0.959092
it	O	O:0.999936
.	O	O:0.999709
	
Columns	O	O:0.999267
are	O	O:0.999970
fixed	O	O:0.999813
I	O	O:0.999993
would	O	O:0.999985
extract	O	O:0.998478
the	O	O:0.999999
column	O	O:0.999826
calculations	O	O:0.999768
and	O	O:0.999996
vectorize	B-API	O:0.753772
the	O	O:0.999892
real	O	O:0.990452
,	O	O:0.999970
child	O	O:0.998096
and	O	O:0.999995
other	O	O:0.999869
normalizations	O	O:0.996191
.	O	O:0.999759
	
Use	O	O:0.999958
apply	O	B-API:0.770735
rather	O	O:0.999328
than	O	O:0.999404
iterating	O	O:0.997069
(	O	O:0.999963
for	O	O:0.999963
zfill	B-API	B-API:0.974645
)	O	O:0.999883
.	O	O:0.999577
	
#CODE	O	O:0.998453
	
Looks	O	O:0.999853
like	O	O:0.999829
it	O	O:0.999993
did	O	O:0.999922
in	O	O:0.999991
first	O	O:0.999914
test	O	O:0.998388
@USER	O	O:0.999568
.	O	O:0.999823
	
I'm	O	O:0.999954
doing	O	O:0.999950
some	O	O:0.999936
more	O	O:0.999778
tests	O	O:0.999860
for	O	O:0.999982
confirmation	O	O:0.999724
so	O	O:0.999992
I	O	O:0.999995
can	O	O:0.999994
apply	O	O:0.876905
the	O	O:0.999963
bounty	O	O:0.999274
with	O	O:0.999983
a	O	O:0.999989
fair	O	O:0.997969
judgement	O	O:0.999784
.	O	O:0.999837
	
You	O	O:0.999885
could	O	O:0.999961
define	O	O:0.999976
a	O	O:0.999961
function	O	O:0.998549
and	O	O:0.999990
call	O	O:0.998447
`	O	O:0.999978
apply	O	B-API:0.997079
`	O	O:0.999968
passing	O	O:0.993575
the	O	O:0.999753
function	O	O:0.999882
name	O	O:0.999815
,	O	O:0.999999
this	O	O:0.999991
will	O	O:0.999986
create	O	O:0.999992
a	O	O:0.999999
df	O	O:0.999583
with	O	O:0.999837
min	O	O:0.531560
and	O	O:0.999996
max	O	O:0.908179
as	O	O:0.999737
the	O	O:0.999941
index	O	O:0.999395
names	O	O:0.998159
:	O	O:0.999983
#CODE	O	O:0.999927
	
Use	O	O:0.999938
the	O	O:0.999962
datetime	O	O:0.996728
attribute	O	O:0.999953
to	O	O:0.999979
filter	O	O:0.999950
on	O	O:0.999986
date	O	O:0.999227
and	O	O:0.999999
then	O	O:0.999829
`	O	O:0.999997
apply	O	B-API:0.914769
`	O	O:0.999993
a	O	O:0.999436
function	O	O:0.999944
to	O	O:0.999987
replace	O	O:0.999905
just	O	O:0.999969
the	O	O:0.999998
day	O	O:0.999777
component	O	O:0.998311
:	O	O:0.999965
#CODE	O	O:0.999877
	
I've	O	O:0.999312
found	O	O:0.999438
apply	O	B-API:0.799733
and	O	O:0.999576
map	O	B-API:0.863214
great	O	O:0.997488
for	O	O:0.999992
speeding	O	O:0.999137
up	O	O:0.999913
calculations	O	O:0.999698
on	O	O:0.999999
particular	O	O:0.999996
rows	O	O:0.999858
in	O	O:0.999987
a	O	O:0.999996
DataFrame	B-API	O:0.967712
.	O	O:0.999851
	
The	O	O:0.999734
question	O	O:0.999461
I've	O	O:0.999708
got	O	O:0.997640
is	O	O:0.999783
:	O	O:0.999902
Is	O	O:0.999992
it	O	O:0.999998
possible	O	O:0.999901
to	O	O:0.999997
return	O	O:0.999992
a	O	O:0.999991
value	O	O:0.999889
with	O	O:0.999977
apply	O	O:0.556085
or	O	O:0.999965
map	O	B-API:0.894328
functions	O	O:0.999908
which	O	O:0.999933
refer	O	O:0.999853
to	O	O:0.999997
a	O	O:1.000000
previous	O	O:0.998535
row	O	O:0.999913
?	O	O:0.999947
	
Apply	O	O:0.998703
and	O	O:0.999852
map	O	B-API:0.871974
are	O	O:0.999962
great	O	O:0.999462
at	O	O:0.999996
vectorising	O	O:0.999739
row	O	O:0.999971
by	O	O:0.999986
row	O	O:0.999899
calculations	O	O:0.998863
-	O	O:0.999959
is	O	O:0.999984
it	O	O:0.999993
possible	O	O:0.999963
to	O	O:0.999997
refer	O	O:0.999978
to	O	O:0.999990
the	O	O:1.000000
previous	O	O:0.999832
row	O	O:0.999985
so	O	O:0.999996
I	O	O:0.999997
can	O	O:0.999996
make	O	O:0.999986
that	O	O:0.999943
calculation	O	O:0.999936
?	O	O:0.999988
	
My	O	O:0.999945
second	O	O:0.999710
suggestion	O	O:0.999935
to	O	O:0.999992
specify	O	O:0.999996
this	O	O:0.999908
in	O	O:0.999993
the	O	O:0.999986
groupby	B-API	B-API:0.947756
call	O	O:0.997885
with	O	O:0.999715
`	O	O:0.999894
as_index=False	O	O:0.989552
`	O	O:0.999982
,	O	O:0.999863
seems	O	O:0.999969
not	O	O:0.999977
to	O	O:0.999999
work	O	O:0.999999
as	O	O:0.999999
desired	O	O:0.999607
in	O	O:0.999997
this	O	O:0.999961
case	O	O:0.999977
with	O	O:0.999967
`	O	O:0.999979
apply	O	B-API:0.988339
`	O	O:0.996900
(	O	O:0.998593
but	O	O:0.999980
it	O	O:0.999990
does	O	O:0.999958
work	O	O:0.999989
when	O	O:0.999991
using	O	O:0.999979
`	O	O:0.999989
aggregate	O	B-API:0.993607
`)	O	O:0.999856
	
Apply	O	O:0.998556
function	O	O:0.999772
row	O	O:0.999962
wise	O	O:0.999704
on	O	O:0.999997
pandas	O	O:0.999988
data	O	O:0.999998
frame	O	O:0.999999
on	O	O:0.999998
columns	O	O:0.999959
with	O	O:0.999995
numerical	O	O:0.999622
values	O	O:0.999342
	
To	O	O:0.999973
apply	O	O:0.652595
an	O	O:0.999966
arbitrary	O	O:0.997126
function	O	O:0.999822
,	O	O:0.999875
`	O	O:0.999993
func	O	O:0.928226
`	O	O:0.999997
,	O	O:0.999977
to	O	O:0.999999
each	O	O:0.999918
row	O	O:0.999541
:	O	O:0.999979
#CODE	O	O:0.999893
	
So	O	O:0.999974
you	O	O:0.999980
see	O	O:0.999987
here	O	O:0.999954
that	O	O:0.999982
apply	O	O:0.901782
as	O	O:0.999969
it	O	O:0.998927
is	O	O:0.999993
iterating	O	O:0.999693
row-wise	O	O:0.999543
scales	O	O:0.999653
poorly	O	O:0.999787
compared	O	O:0.999837
to	O	O:0.999992
the	O	O:0.999999
other	O	O:0.999921
two	O	O:0.999986
methods	O	O:0.999725
which	O	O:0.999802
are	O	O:0.999974
vectorised	O	O:0.999523
but	O	O:0.999848
`	O	O:0.999961
map	O	B-API:0.983728
`	O	O:0.999973
is	O	O:0.999947
still	O	O:0.999823
the	O	O:0.999984
fastest	O	O:0.996326
.	O	O:0.999753
	
I	O	O:0.999939
would	O	O:0.999997
like	O	O:0.999954
to	O	O:1.000000
have	O	O:0.999998
the	O	O:0.999996
company	O	O:0.999971
symbols	O	O:0.999550
in	O	O:0.999993
their	O	O:0.999872
own	O	O:0.999984
seperate	O	O:0.999780
column	O	O:0.999963
instead	O	O:0.999992
of	O	O:0.999996
inside	O	O:0.999814
the	O	O:0.999961
Company	O	O:0.999505
Name	O	O:0.999807
column	O	O:0.999431
.	O	O:0.999909
	
Right	O	O:0.999793
now	O	O:0.999875
I	O	O:0.999998
just	O	O:0.999983
have	O	O:0.999960
it	O	O:0.999998
iterate	O	O:0.999964
over	O	O:0.999920
the	O	O:0.999959
company	O	O:0.999825
names	O	O:0.999711
,	O	O:0.999986
and	O	O:1.000000
a	O	O:0.999983
RE	O	O:0.999391
pulls	O	O:0.999772
the	O	O:0.999964
symbols	O	O:0.995243
,	O	O:0.999991
puts	O	O:0.999760
it	O	O:0.999996
into	O	O:0.999839
a	O	O:0.999995
list	O	O:0.980806
,	O	O:0.999982
and	O	O:0.999998
then	O	O:0.999857
I	O	O:0.999998
apply	O	O:0.962844
it	O	O:0.999629
to	O	O:0.999989
the	O	O:1.000000
new	O	O:0.999924
column	O	O:0.999638
,	O	O:0.999987
but	O	O:0.999971
I'm	O	O:0.999971
wondering	O	O:0.999850
if	O	O:0.999993
there	O	O:0.999807
is	O	O:0.999999
a	O	O:0.999987
cleaner	O	O:0.997408
/	O	O:0.999974
easier	O	O:0.998838
way	O	O:0.999843
.	O	O:0.999776
	
but	O	O:0.999801
it	O	O:0.999984
will	O	O:0.999973
be	O	O:0.999998
faster	O	O:0.999972
to	O	O:0.999948
use	O	O:0.999994
the	O	O:0.999887
inbuilt	O	O:0.997297
`	O	O:0.999956
to_datetime	B-API	B-API:0.995188
`	O	O:0.999993
rather	O	O:0.999773
than	O	O:0.999956
call	O	O:0.997638
`	O	O:0.999994
apply	O	B-API:0.995390
`	O	O:0.999929
which	O	O:0.999297
essentially	O	O:0.999993
just	O	O:0.999974
loops	O	O:0.999969
over	O	O:0.999933
your	O	O:0.999590
series	O	O:0.999746
.	O	O:0.999943
	
Using	O	O:0.999227
apply	O	B-API:0.791332
will	O	O:0.999099
be	O	O:0.999994
substantially	O	O:0.999894
slower	O	O:0.999596
than	O	O:0.999965
your	O	O:0.999663
first	O	O:0.999912
method	O	O:0.999993
by	O	O:0.999974
the	O	O:0.999973
way	O	O:0.999094
	
Not	O	O:0.999944
at	O	O:0.999994
the	O	O:0.999972
moment	O	O:0.999924
,	O	O:0.999954
cumsum	B-API	B-API:0.966234
is	O	O:0.999992
a	O	O:0.999813
vectorised	O	O:0.998132
method	O	O:0.999865
apply	O	B-API:0.872301
will	O	O:0.998699
not	O	O:0.999939
beat	O	O:0.999904
this	O	O:0.999839
.	O	O:0.999922
	
Here's	O	O:0.999872
a	O	O:0.999977
one-liner	O	O:0.997882
,	O	O:0.999969
but	O	O:0.999990
with	O	O:0.998394
cumsum	B-API	B-API:0.992776
:	O	O:0.999924
```	O	O:0.999383
(	O	O:0.999987
df.Volume	O	O:0.997370
*	O	O:0.999776
(	O	O:0.999992
df.High	O	O:0.994243
+	O	O:0.999973
df.Low	O	O:0.990135
+	O	O:0.999989
df.Close	O	O:0.998391
)	O	O:0.999973
/	O	O:0.999936
3	O	O:0.999945
)	O	O:0.999970
.cumsum()	B-API	B-API:0.997872
/	O	O:0.999952
df.Volume.cumsum()	O	O:0.874538
```	O	O:0.999794
.	O	O:0.999639
	
As	O	O:0.999918
@USER	O	O:0.999780
notes	O	O:0.999820
,	O	O:0.999955
cumsum	B-API	B-API:0.982020
is	O	O:0.999987
going	O	O:0.997796
to	O	O:0.999988
beat	O	O:0.999841
apply	O	B-API:0.518643
.	O	O:0.998974
	
I	O	O:0.999961
doubt	O	O:0.999632
you're	O	O:0.999808
going	O	O:0.999338
to	O	O:0.999990
improve	O	O:0.999977
speed	O	O:0.999811
by	O	O:0.999993
avoiding	O	O:0.999407
cumsum	B-API	B-API:0.998598
in	O	O:0.999955
pandas	O	O:0.999233
.	O	O:0.999944
	
Why	O	O:0.999951
do	O	O:0.999966
you	O	O:0.999994
want	O	O:0.999960
to	O	O:0.999996
avoid	O	O:0.999903
cumsum	B-API	B-API:0.950472
?	O	O:0.999900
	
Beyond	O	O:0.999948
this	O	O:0.999905
,	O	O:0.999996
I'd	O	O:0.999996
guess	O	O:0.999951
you	O	O:0.999979
can	O	O:0.999984
improve	O	O:0.999992
speed	O	O:0.999963
slightly	O	O:0.999943
by	O	O:0.999994
doing	O	O:0.999538
in	O	O:0.999929
numpy	O	O:0.998953
,	O	O:0.999982
and	O	O:0.999996
even	O	O:0.999972
more	O	O:0.999964
by	O	O:0.999994
doing	O	O:0.999687
in	O	O:0.999871
numba	O	O:0.996263
.	O	O:0.999833
	
Now	O	O:0.999924
,	O	O:0.999998
suppose	O	O:0.999952
I	O	O:0.999996
have	O	O:0.999998
multiple	O	O:0.999979
data	O	O:0.999982
frames	O	O:0.999917
outside	O	O:0.999968
the	O	O:0.999907
function	O	O:0.999798
,	O	O:0.999996
say	O	O:0.999962
`	O	O:0.999992
df1	O	O:0.992518
`	O	O:0.999995
,	O	O:0.999863
`	O	O:0.999995
df2	O	O:0.993306
`	O	O:0.999994
,	O	O:0.999823
`	O	O:0.999994
df3	O	O:0.995807
`	O	O:0.999997
on	O	O:0.999954
which	O	O:0.999974
I	O	O:0.999999
want	O	O:0.999986
to	O	O:0.999949
apply	O	O:0.885575
`	O	O:0.999914
myfunc	O	O:0.762191
`	O	O:0.999984
.	O	O:0.999060
	
I	O	O:0.999989
want	O	O:0.999984
to	O	O:0.999968
ensure	O	O:0.999994
that	O	O:0.999975
the	O	O:0.999985
function	O	O:0.999820
`	O	O:0.999984
myfunc	O	O:0.940997
`	O	O:0.999997
uses	O	O:0.998629
a	O	O:0.999995
local	O	O:0.999861
copy	O	O:0.996179
of	O	O:0.999979
the	O	O:0.999793
dataframe	B-API	O:0.999142
-	O	O:0.999988
I	O	O:0.999999
want	O	O:0.999991
to	O	O:0.999921
avoid	O	O:0.999996
the	O	O:0.999976
situation	O	O:0.999835
that	O	O:0.999972
the	O	O:0.999992
`	O	O:0.999993
df1	O	O:0.992052
`	O	O:0.999996
outside	O	O:0.999572
the	O	O:0.999868
function	O	O:0.999673
doesn't	O	O:0.999869
get	O	O:0.999980
changed	O	O:0.999834
/	O	O:0.999995
modified	O	O:0.999781
by	O	O:0.999992
the	O	O:0.999974
operations	O	O:0.999392
inside	O	O:0.999569
the	O	O:0.999980
dataframe	B-API	O:0.991424
.	O	O:0.999844
	
Apply	O	O:0.998686
Across	O	O:0.999227
Dynamic	O	O:0.999802
Number	O	O:0.999427
of	O	O:0.999941
Columns	O	O:0.998017
	
In	O	O:0.999970
order	O	O:0.999884
to	O	O:0.999986
solve	O	O:0.999984
this	O	O:0.999958
big	O	O:0.999943
problem	O	O:0.999843
,	O	O:0.999983
I	O	O:0.999998
find	O	O:0.999848
read_fwf	B-API	B-API:0.996773
in	O	O:0.999942
pandas	O	O:0.999355
module	O	O:0.999843
and	O	O:0.999956
apply	O	B-API:0.726714
it	O	O:0.997075
but	O	O:0.999394
failed	O	O:0.999074
.	O	O:0.999831
	
#CODE	O	O:0.998453
	
Then	O	O:0.999462
I	O	O:0.999999
want	O	O:0.999992
apply	O	B-API:0.883138
fill_between()	B-API	B-API:0.997257
on	O	O:0.999792
area	O	O:0.999804
between	O	O:0.998397
A	O	O:0.999981
and	O	O:0.999982
B	O	O:0.999710
series	O	O:0.997171
:	O	O:0.999907
#CODE	O	O:0.999859
	
@USER	O	O:0.999144
use	O	O:0.999742
`	O	O:0.999826
pd.to_datetime	B-API	B-API:0.996593
`	O	O:0.999978
rather	O	O:0.999806
than	O	O:0.999902
apply	O	B-API:0.701401
.	O	O:0.999200
	
If	O	O:0.999983
you	O	O:0.999917
use	O	O:0.999984
the	O	O:0.999919
apply	O	B-API:0.906879
it	O	O:0.999437
may	O	O:0.999967
not	O	O:0.999998
create	O	O:0.999962
a	O	O:0.999996
Datetime	O	O:0.997911
column	O	O:0.999502
.	O	O:0.999875
	
I	O	O:0.999986
think	O	O:0.999934
you	O	O:0.999891
may	O	O:0.999998
have	O	O:0.999992
to	O	O:0.999998
update	O	O:0.999992
to	O	O:0.999996
0.15.X	O	O:0.999873
for	O	O:0.999994
the	O	O:0.999931
dt	O	B-API:0.704511
accessor	O	O:0.998701
.	O	O:0.999722
	
If	O	O:0.999966
you	O	O:0.999987
want	O	O:0.999985
month-year	O	O:0.999986
then	O	O:0.999858
use	O	O:0.999997
the	O	O:0.999872
`	O	O:0.999902
to_period	B-API	B-API:0.998520
`	O	O:0.999999
part	O	O:0.999695
of	O	O:0.999999
the	O	O:0.999984
answer	O	O:0.999903
above	O	O:0.999431
?	O	O:0.999918
	
Whether	O	O:0.999950
this	O	O:0.999340
is	O	O:0.999998
more	O	O:0.999702
efficient	O	O:0.999952
than	O	O:0.999964
a	O	O:0.999985
groupby	B-API	B-API:0.993606
/	O	O:0.999970
resample	O	B-API:0.742296
apply	O	B-API:0.637747
solution	O	O:0.999200
will	O	O:0.999761
depend	O	O:0.999892
on	O	O:0.999998
the	O	O:0.999994
data	O	O:0.999865
.	O	O:0.999922
	
For	O	O:0.999937
very	O	O:0.999888
sparse	O	O:0.999897
data	O	O:0.999059
(	O	O:0.999977
with	O	O:0.999995
lots	O	O:0.999898
of	O	O:0.999999
starting	O	O:0.999779
up	O	O:0.999972
NaN	O	O:0.999126
,	O	O:0.999996
assuming	O	O:0.999961
you	O	O:0.999989
want	O	O:0.999981
to	O	O:0.999996
drop	O	O:0.999917
these	O	O:0.999977
)	O	O:0.999994
I	O	O:0.999975
suspect	O	O:0.999784
it	O	O:0.999841
won't	O	O:0.999962
be	O	O:0.999997
as	O	O:0.999998
fast	O	O:0.990828
.	O	O:0.999848
	
If	O	O:0.999989
the	O	O:0.999996
data	O	O:0.999422
is	O	O:0.999987
dense	O	O:0.999028
(	O	O:0.999986
or	O	O:0.999992
you	O	O:0.999992
want	O	O:0.999994
to	O	O:0.999999
keep	O	O:0.999982
the	O	O:0.999990
initial	O	O:0.999469
NaN	O	O:0.999295
)	O	O:0.999988
I	O	O:0.999964
suspect	O	O:0.999983
this	O	O:0.999036
solution	O	O:0.999583
should	O	O:0.999969
be	O	O:0.999989
faster	O	O:0.999737
.	O	O:0.999569
	
Python	O	O:0.999107
Pandas	O	O:0.999712
'	O	O:0.999963
apply	O	B-API:0.727644
'	O	O:0.999829
returns	O	O:0.999354
series	O	O:0.999798
;	O	O:0.999982
can't	O	O:0.999918
convert	O	O:0.999425
to	O	O:0.999994
dataframe	B-API	O:0.999798
	
OK	O	O:0.999734
,	O	O:0.999989
I'm	O	O:0.999957
at	O	O:0.999993
half-wit	O	O:0.997347
'	O	O:0.999983
s	O	O:0.999890
end	O	O:0.999700
.	O	O:0.999818
	
I'm	O	O:0.999937
geocoding	O	O:0.999940
a	O	O:0.999991
dataframe	B-API	O:0.995607
with	O	O:0.999916
geopy	O	O:0.998990
.	O	O:0.999882
	
I've	O	O:0.999656
written	O	O:0.999749
a	O	O:0.999993
simple	O	O:0.995404
function	O	O:0.999937
to	O	O:0.999998
take	O	O:0.999998
an	O	O:0.999997
input	O	O:0.999976
-	O	O:0.999990
country	O	O:0.998197
name	O	O:0.999919
-	O	O:0.999924
and	O	O:0.999993
return	O	O:0.999455
the	O	O:0.999409
latitude	O	O:0.989666
and	O	O:0.999947
longitude	O	O:0.998501
.	O	O:0.999498
	
I	O	O:0.999960
use	O	O:0.999985
apply	O	B-API:0.933712
to	O	O:0.999469
run	O	O:0.999902
the	O	O:0.999750
function	O	O:0.999436
and	O	O:0.999989
it	O	O:0.999995
returns	O	O:0.999711
a	O	O:0.999985
Pandas	O	O:0.998715
series	O	O:0.999503
object	O	O:0.999426
.	O	O:0.999902
	
I	O	O:0.999932
can't	O	O:0.999968
seem	O	O:0.999743
to	O	O:0.999995
convert	O	O:0.999909
it	O	O:0.999995
to	O	O:0.999997
a	O	O:1.000000
dataframe	B-API	O:0.984863
.	O	O:0.999910
	
I'm	O	O:0.999928
sure	O	O:0.999705
I'm	O	O:0.999984
missing	O	O:0.999849
something	O	O:0.999846
obvious	O	O:0.997578
,	O	O:0.999977
but	O	O:0.999962
I'm	O	O:0.999982
new	O	O:0.999867
to	O	O:0.999979
python	O	O:0.999935
and	O	O:0.999989
still	O	O:0.999741
RTFMing	O	O:0.995463
.	O	O:0.999630
	
BTW	O	O:0.999855
,	O	O:0.999994
the	O	O:0.999990
geocoder	O	O:0.960608
function	O	O:0.999813
works	O	O:0.999884
great	O	O:0.999249
.	O	O:0.999799
	
#CODE	O	O:0.998453
	
The	O	O:0.999950
goal	O	O:0.997622
is	O	O:0.999992
to	O	O:0.999984
geocode	O	O:0.999945
166	O	O:0.999966
unique	O	O:0.943187
countries	O	O:0.999491
,	O	O:0.999999
then	O	O:0.999944
join	O	O:0.925127
it	O	O:0.999999
back	O	O:0.999838
to	O	O:0.999995
the	O	O:0.999999
188K	O	O:0.999130
addresses	O	O:0.999670
in	O	O:0.999981
df_addr	O	O:0.985382
.	O	O:0.999861
	
I'm	O	O:0.999943
trying	O	O:0.999900
to	O	O:0.999992
be	O	O:1.000000
pandas-y	O	O:0.999475
in	O	O:0.999979
my	O	O:0.999980
code	O	O:0.997755
and	O	O:0.999996
not	O	O:0.999980
write	O	O:0.999817
loops	O	O:0.999804
if	O	O:0.999987
possible	O	O:0.999559
.	O	O:0.999895
	
But	O	O:0.999865
I	O	O:0.999980
haven't	O	O:0.999868
found	O	O:0.999048
the	O	O:0.999982
magic	O	O:0.999835
to	O	O:0.999988
convert	O	O:0.999902
series	O	O:0.999991
into	O	O:0.999835
dataframes	O	O:0.999722
and	O	O:0.999996
this	O	O:0.999803
is	O	O:0.999978
the	O	O:0.999973
first	O	O:0.999570
time	O	O:0.999886
I've	O	O:0.999898
tried	O	O:0.999932
to	O	O:0.999963
use	O	O:0.999982
apply	O	B-API:0.927882
.	O	O:0.997866
	
Thanks	O	O:0.998641
Ed	O	O:0.999773
!	O	O:0.999843
	
What	O	O:0.999866
if	O	O:0.999985
I	O	O:0.999991
would	O	O:0.999996
like	O	O:0.999959
to	O	O:0.999997
filter	O	O:0.999753
Users	O	O:0.999948
with	O	O:0.999975
occurrences	O	O:0.999963
only	O	O:0.999938
in	O	O:1.000000
some	O	O:0.999883
months	O	O:0.999726
?	O	O:0.999956
	
Can	O	O:0.999780
I	O	O:0.999992
apply	O	O:0.958601
some	O	O:0.996275
dt.month	B-API	B-API:0.963862
==	O	O:0.999968
june	O	O:0.998989
conditions	O	O:0.999118
?	O	O:0.999941
	
If	O	O:0.999967
you	O	O:0.999987
actually	O	O:0.999998
have	O	O:0.999978
strings	O	O:0.999883
that	O	O:0.999978
look	O	O:0.999994
like	O	O:0.999980
tuples	O	O:0.999858
,	O	O:0.999997
you	O	O:0.999982
can	O	O:0.999989
parse	O	O:0.999999
them	O	O:0.999955
first	O	O:0.999928
and	O	O:0.999999
then	O	O:0.999847
apply	O	O:0.807379
the	O	O:0.999974
same	O	O:0.999715
pattern	O	O:0.999938
as	O	O:0.999990
above	O	O:0.998250
:	O	O:0.999944
#CODE	O	O:0.999721
	
If	O	O:0.999945
it	O	O:0.999923
is	O	O:0.999997
actually	O	O:0.999959
strings	O	O:0.999781
,	O	O:0.999995
you	O	O:0.999980
can	O	O:0.999992
first	O	O:0.999998
convert	O	O:0.999592
it	O	O:0.999995
to	O	O:0.999997
lists	O	O:0.999997
like	O	O:0.999946
so	O	O:0.999998
,	O	O:1.000000
then	O	O:0.999939
apply	O	O:0.959909
the	O	O:0.999988
above	O	O:0.997364
operation	O	O:0.998417
:	O	O:0.999958
#CODE	O	O:0.999888
	
To	O	O:0.999951
create	O	O:0.999948
multiple	O	O:0.999993
columns	O	O:0.999987
when	O	O:0.999956
using	O	O:0.999976
`	O	O:0.999979
apply	O	B-API:0.995977
`	O	O:0.999948
,	O	O:0.999858
I	O	O:0.999996
think	O	O:0.999655
it's	O	O:0.999788
best	O	O:0.999684
to	O	O:0.999994
return	O	O:0.999985
a	O	O:0.999909
`	O	O:0.999944
Series	O	O:0.998459
`	O	O:0.999993
rather	O	O:0.999894
than	O	O:0.999959
a	O	O:0.999986
list	O	O:0.989160
.	O	O:0.999890
	
You	O	O:0.999954
can	O	O:0.999976
set	O	O:0.999993
the	O	O:0.999998
column	O	O:0.999956
names	O	O:0.999969
by	O	O:0.999995
setting	O	O:0.999997
them	O	O:0.998987
as	O	O:0.999990
the	O	O:0.999979
index	O	O:0.999685
for	O	O:0.999984
the	O	O:0.999914
`	O	O:0.999921
Series	O	O:0.981265
`	O	O:0.999985
.	O	O:0.999703
	
So	O	O:0.999976
you	O	O:0.999979
can	O	O:0.999966
do	O	O:0.999988
:	O	O:0.999990
#CODE	O	O:0.999770
	
I	O	O:0.999992
have	O	O:0.999983
a	O	O:0.999979
pandas	O	O:0.999250
TimeSeries	O	O:0.999773
and	O	O:0.999957
would	O	O:0.999995
like	O	O:0.999959
to	O	O:0.999998
apply	O	O:0.976787
the	O	O:0.998610
argmax	B-API	B-API:0.993759
function	O	O:0.999915
to	O	O:0.999995
a	O	O:1.000000
rolling	O	B-API:0.880840
window	O	O:0.998762
.	O	O:0.999811
	
However	O	O:0.999807
,	O	O:0.999993
due	O	O:0.999941
to	O	O:0.999989
casting	O	O:0.999901
to	O	O:0.999993
float	O	O:0.999982
from	O	O:0.999904
rolling_apply	B-API	B-API:0.995527
,	O	O:0.999996
if	O	O:0.999987
I	O	O:0.999996
apply	O	O:0.927646
`	O	O:0.998551
numpy.argmax()	B-API	B-API:0.999930
`	O	O:0.999993
,	O	O:0.999988
I	O	O:1.000000
only	O	O:0.999983
obtain	O	O:0.997118
the	O	O:0.999997
index	O	O:0.999943
of	O	O:0.999995
the	O	O:0.999998
slice	O	O:0.999832
of	O	O:0.999984
the	O	O:0.999931
ndarray	B-API	O:0.786185
.	O	O:0.999748
	
Is	O	O:0.999986
there	O	O:0.999983
a	O	O:0.999995
way	O	O:0.999913
to	O	O:0.999991
apply	O	O:0.987691
a	O	O:0.999980
rolling	O	B-API:0.906597
argmax	B-API	B-API:0.967081
to	O	O:0.999976
a	O	O:0.999999
Series	O	O:0.994518
/	O	O:0.999960
DataFrame	B-API	O:0.990950
?	O	O:0.999926
	
Here	O	O:0.998630
is	O	O:0.999994
a	O	O:0.999956
work-around	O	O:0.999496
,	O	O:0.999995
essentially	O	O:0.999965
doing	O	O:0.999951
the	O	O:0.999962
apply	O	B-API:0.947051
'	O	O:0.999874
manually	O	O:0.998509
'	O	O:0.999966
,	O	O:0.999983
should	O	O:0.999951
be	O	O:0.999996
pretty	O	O:0.999943
efficient	O	O:0.999705
actually	O	O:0.999782
.	O	O:0.999900
	
#CODE	O	O:0.998453
	
You	O	O:0.999910
can	O	O:0.999994
also	O	O:0.999992
use	O	O:0.999996
the	O	O:0.999645
`	O	O:0.999938
apply	O	B-API:0.998559
`	O	O:0.999931
method	O	O:0.999551
for	O	O:0.999998
a	O	O:0.999977
one-liner	O	O:0.998388
,	O	O:0.999966
which	O	O:0.999837
is	O	O:0.999964
simpler	O	O:0.999247
and	O	O:0.999965
clearer	O	O:0.998754
but	O	O:0.999971
also	O	O:0.999935
slower	O	O:0.999977
even	O	O:0.999779
than	O	O:0.999997
your	O	O:0.999827
approach	O	O:0.999196
:	O	O:0.999966
#CODE	O	O:0.999724
	
Apply	O	O:0.999181
formula	O	O:0.999300
to	O	O:0.999959
Multi-index	O	O:0.999994
column	O	O:0.999782
Python	O	O:0.999627
	
Want	O	O:0.999673
to	O	O:0.999981
apply	O	O:0.907400
formula	O	O:0.998021
and	O	O:0.999990
label	O	O:0.999866
result	O	O:0.998721
to	O	O:0.999929
multi-index	O	O:0.999995
dataframe	B-API	O:0.995137
.	O	O:0.999951
	
Gut	O	O:0.999613
tells	O	O:0.999917
me	O	O:0.999972
I	O	O:0.999994
need	O	O:0.999937
to	O	O:0.999938
group-by	O	O:0.999966
and	O	O:0.999998
then	O	O:0.999882
apply	O	O:0.794735
formula	O	O:0.999735
,	O	O:0.999982
I	O	O:0.999992
can	O	O:0.999965
handle	O	O:0.999966
that	O	O:0.999884
(	O	O:0.999995
I	O	O:0.999999
think	O	O:0.999931
)	O	O:0.999832
,	O	O:0.999939
but	O	O:0.999976
how	O	O:0.999981
do	O	O:0.999979
I	O	O:0.999999
bring	O	O:0.998629
label	O	O:0.984560
(	O	O:0.999818
'	O	O:0.999978
pattern	O	O:0.999795
')	O	O:0.999975
along	O	O:0.999244
?	O	O:0.999783
	
Apply	O	O:0.999805
where	O	O:0.998413
function	O	O:0.999458
[	O	O:0.999991
SQL	O	O:0.999987
like	O	O:0.999814
]	O	O:0.999991
on	O	O:0.999929
datatime	O	O:0.998514
Pandas	O	O:0.999687
	
pandas	O	O:0.999031
-	O	O:0.999996
apply	O	O:0.840883
datetime	O	O:0.994039
functions	O	O:0.997589
	
Optimizing	O	O:0.999508
pandas	O	O:0.998760
filter	O	O:0.998288
inside	O	O:0.999854
apply	O	B-API:0.830284
function	O	O:0.997500
	
I	O	O:0.999960
now	O	O:0.999991
need	O	O:0.999876
to	O	O:0.999993
apply	O	O:0.995985
this	O	O:0.998700
function	O	O:0.999819
to	O	O:0.999991
several	O	O:0.999997
million	O	O:0.999944
rows	O	O:0.998887
and	O	O:0.999967
it's	O	O:0.999985
impossibly	O	O:0.999647
slow	O	O:0.999622
so	O	O:0.999940
I'm	O	O:0.999990
trying	O	O:0.999963
to	O	O:0.999995
figure	O	O:0.999969
out	O	O:0.999958
the	O	O:0.999994
best	O	O:0.999467
way	O	O:0.999967
to	O	O:0.999967
speed	O	O:0.999989
it	O	O:0.999977
up	O	O:0.999833
.	O	O:0.999916
	
I've	O	O:0.999432
heard	O	O:0.999729
that	O	O:0.999928
Cython	O	O:0.999892
can	O	O:0.999974
increase	O	O:0.999976
the	O	O:0.999996
speed	O	O:0.999792
of	O	O:0.999951
functions	O	O:0.999642
but	O	O:0.999988
I	O	O:0.999998
have	O	O:0.999977
no	O	O:0.999966
experience	O	O:0.999833
with	O	O:0.999829
it	O	O:0.999817
(	O	O:0.999965
and	O	O:0.999993
I'm	O	O:0.999989
new	O	O:0.998987
to	O	O:0.999975
both	O	O:0.999990
pandas	O	O:0.998996
and	O	O:0.999995
python	O	O:0.999564
)	O	O:0.999891
.	O	O:0.999600
	
Is	O	O:0.999945
it	O	O:0.999995
possible	O	O:0.999954
to	O	O:0.999997
pass	O	O:0.999986
two	O	O:0.999999
rows	O	O:0.999971
of	O	O:0.999996
a	O	O:0.999998
dataframe	B-API	O:0.999526
as	O	O:0.999995
arguments	O	O:0.999657
to	O	O:0.999988
the	O	O:0.999991
function	O	O:0.999752
and	O	O:0.999999
then	O	O:0.999898
use	O	O:0.999982
Cython	O	O:0.999156
to	O	O:0.999951
speed	O	O:0.999982
it	O	O:0.999992
up	O	O:0.999946
or	O	O:0.999981
would	O	O:0.999938
it	O	O:0.999999
be	O	O:0.999999
necessary	O	O:0.999994
to	O	O:0.999996
create	O	O:0.999994
new	O	O:0.999994
columns	O	O:0.999972
with	O	O:0.999939
"`	O	O:0.999993
diff	O	B-API:0.809756
`"	O	O:0.999985
values	O	O:0.998583
in	O	O:0.999999
them	O	O:0.999948
so	O	O:0.999998
that	O	O:0.999981
the	O	O:0.999989
function	O	O:0.999949
only	O	O:0.999915
reads	O	O:0.999950
from	O	O:0.999695
and	O	O:0.999987
writes	O	O:0.999864
to	O	O:0.999992
one	O	O:1.000000
row	O	O:0.999979
of	O	O:0.999990
the	O	O:0.999994
dataframe	B-API	O:0.999645
at	O	O:0.999997
a	O	O:0.999997
time	O	O:0.999881
,	O	O:0.999993
in	O	O:0.999997
order	O	O:0.999859
to	O	O:0.999992
benefit	O	O:0.999998
from	O	O:0.999962
using	O	O:0.999852
Cython	O	O:0.998076
?	O	O:0.999735
	
Any	O	O:0.999877
other	O	O:0.999872
speed	O	O:0.999315
tricks	O	O:0.999590
would	O	O:0.999938
be	O	O:0.999996
greatly	O	O:0.999924
appreciated	O	O:0.998576
!	O	O:0.999661
	
Geopy	O	O:0.997815
error	O	O:0.997902
:	O	O:0.999891
GeocoderServiceError	O	O:0.998166
:	O	O:0.999985
HTTP	O	O:0.999615
Error	O	O:0.999359
500	O	O:0.996668
:	O	O:0.999921
Internal	O	O:0.995942
Server	O	O:0.999949
Error	O	O:0.999573
using	O	O:0.999955
pandas	O	O:0.998895
apply	O	B-API:0.832494
function	O	O:0.998583
with	O	O:0.999549
str	O	O:0.998474
concat	O	B-API:0.908988
	
Working	O	O:0.986615
function	O	O:0.998050
(	O	O:0.999973
see	O	O:0.999975
code	O	O:0.999674
Python	O	O:0.999936
Pandas	O	O:0.999947
apply	O	O:0.544551
returns	O	O:0.996954
series	O	O:0.999354
;	O	O:0.999991
cant	O	O:0.999850
convert	O	O:0.999648
to	O	O:0.999998
dataframe	B-API	O:0.999807
)	O	O:0.999983
has	O	O:0.999924
stopped	O	O:0.999567
working	O	O:0.998491
.	O	O:0.999770
	
Only	O	O:0.999827
difference	O	O:0.998752
is	O	O:0.999947
I'm	O	O:0.999950
passing	O	O:0.999601
it	O	O:0.999978
a	O	O:0.999990
string	O	O:0.998356
concatenation	O	O:0.998924
.	O	O:0.999941
	
#CODE	O	O:0.998453
	
Ed	O	O:0.999912
,	O	O:0.999991
I	O	O:0.999989
see	O	O:0.999993
what	O	O:0.999701
you	O	O:0.999955
are	O	O:0.999994
saying	O	O:0.999857
-	O	O:0.999992
that	O	O:0.999823
I'm	O	O:0.999998
passing	O	O:0.999928
a	O	O:0.999954
series	O	O:0.998439
-	O	O:0.999977
but	O	O:0.999903
am	O	O:0.999986
not	O	O:0.999992
sure	O	O:0.999944
how	O	O:0.999970
to	O	O:0.999979
fix	O	O:0.999972
it	O	O:0.999960
.	O	O:0.999944
	
Short	O	O:0.999334
of	O	O:0.999983
ditching	O	O:0.998745
apply	O	B-API:0.817667
and	O	O:0.999925
iterating	O	O:0.999257
through	O	O:0.995631
the	O	O:0.999986
table	O	O:0.999917
,	O	O:0.999993
or	O	O:0.999998
passing	O	O:0.999283
5	O	O:0.999921
parameters	O	O:0.998793
and	O	O:0.999998
then	O	O:0.999985
iterating	O	O:0.999934
through	O	O:0.999436
the	O	O:0.999978
table	O	O:0.999617
.	O	O:0.999875
	
I	O	O:0.999975
thought	O	O:0.999071
apply()	B-API	B-API:0.998321
did	O	O:0.999919
this	O	O:0.999909
for	O	O:0.999995
me	O	O:0.999906
-	O	O:0.999979
calling	O	O:0.999482
the	O	O:0.999907
function	O	O:0.999974
once	O	O:0.999789
for	O	O:0.999999
each	O	O:0.999252
row	O	O:0.999523
.	O	O:0.999865
	
The	O	O:0.999935
debug	O	O:0.998844
code	O	O:0.999862
seems	O	O:0.999941
to	O	O:0.999980
indicate	O	O:0.999998
this	O	O:0.999951
as	O	O:0.999962
it	O	O:0.999969
says	O	O:0.999897
that	O	O:0.999958
x	O	O:0.999899
is	O	O:0.999998
a	O	O:0.999959
str	O	O:0.998662
type	O	O:0.995788
,	O	O:0.999987
not	O	O:0.999954
series	O	O:0.999856
.	O	O:0.999925
	
Hmmm	O	O:0.998985
...	O	O:0.999122
	
I	O	O:0.999979
believe	O	O:0.999956
you	O	O:0.999764
,	O	O:0.999991
I'm	O	O:0.999994
just	O	O:0.999960
trying	O	O:0.999989
to	O	O:0.999991
wrap	O	O:0.999859
my	O	O:0.999956
head	O	O:0.999351
around	O	O:0.999856
it	O	O:0.999945
and	O	O:0.999981
decide	O	O:0.999945
what	O	O:0.999639
to	O	O:0.999985
do	O	O:0.999999
next	O	O:0.999510
.	O	O:0.999853
	
And	O	O:0.999975
I	O	O:0.999996
manually	O	O:0.999920
confirmed	O	O:0.999090
the	O	O:0.999977
geocoder	O	O:0.979392
is	O	O:0.999978
insensitive	O	O:0.999463
to	O	O:0.999995
white	O	O:0.999975
spaces	O	O:0.996888
.	O	O:0.999893
	
Any	O	O:0.999511
Further	O	O:0.999729
advice	O	O:0.999217
?	O	O:0.999925
	
What	O	O:0.999586
you're	O	O:0.999964
doing	O	O:0.999774
is	O	O:0.999995
a	O	O:0.999934
little	O	O:0.999535
perverse	O	O:0.999787
to	O	O:0.999987
be	O	O:0.999999
honest	O	O:0.999698
,	O	O:0.999977
you're	O	O:0.999953
calling	O	O:0.998416
`	O	O:0.999993
apply	O	B-API:0.972985
`	O	O:0.999975
on	O	O:0.999948
a	O	O:0.999995
series	O	O:0.999732
and	O	O:0.999996
then	O	O:0.999969
trying	O	O:0.999985
to	O	O:0.999998
construct	O	O:0.999978
a	O	O:0.999997
str	O	O:0.998896
from	O	O:0.999985
lots	O	O:0.999944
of	O	O:0.999997
columns	O	O:0.999797
,	O	O:1.000000
this	O	O:0.999824
is	O	O:0.999993
the	O	O:0.999985
wrong	O	O:0.999775
way	O	O:0.999965
to	O	O:0.999993
go	O	O:0.999999
about	O	O:0.999991
this	O	O:0.999919
,	O	O:0.999996
you	O	O:0.999975
can	O	O:0.999993
call	O	O:0.999995
apply	O	O:0.913171
on	O	O:0.999704
the	O	O:0.999948
df	O	O:0.999550
and	O	O:0.999995
pass	O	O:0.997470
`	O	O:0.999969
axis=1	O	O:0.997458
`	O	O:0.999994
so	O	O:0.999968
that	O	O:0.999994
the	O	O:0.999995
row	O	O:0.999324
is	O	O:0.999953
passed	O	O:0.997146
and	O	O:0.999994
either	O	O:0.999981
access	O	O:0.999352
each	O	O:0.999946
column	O	O:0.999882
in	O	O:0.999997
a	O	O:0.999991
lambda	O	O:0.998577
func	O	O:0.990267
and	O	O:0.999988
pass	O	O:0.999956
them	O	O:0.999471
to	O	O:0.999991
`	O	O:0.999999
locate	O	O:0.997390
`	O	O:0.999999
or	O	O:0.999976
in	O	O:0.999990
`	O	O:0.999993
locate	O	O:0.998464
`	O	O:0.999999
extract	O	O:0.998435
each	O	O:0.999974
column	O	O:0.999951
value	O	O:0.999988
,	O	O:0.999991
or	O	O:0.999999
just	O	O:0.999963
create	O	O:0.999993
a	O	O:0.999999
series	O	O:0.999963
from	O	O:0.999962
the	O	O:0.999997
concatenation	O	O:0.999939
of	O	O:0.999994
all	O	O:0.999982
the	O	O:0.999997
columns	O	O:0.998916
and	O	O:0.999995
call	O	O:0.999750
apply	O	B-API:0.683385
on	O	O:0.998943
this	O	O:0.995764
:	O	O:0.999988
#CODE	O	O:0.999841
	
Your	O	O:0.999693
DataFrame	B-API	O:0.995334
column	O	O:0.999944
contains	O	O:0.999926
a	O	O:0.999998
mixture	O	O:0.999787
of	O	O:0.999975
strings	O	O:0.998485
and	O	O:0.999992
tuples	O	O:0.999154
.	O	O:0.999475
	
I	O	O:0.999953
don't	O	O:0.999977
think	O	O:0.999818
you	O	O:0.999989
can	O	O:0.999984
avoid	O	O:0.999995
iterating	O	O:0.999915
the	O	O:0.999915
column	O	O:0.999288
.	O	O:0.999908
	
But	O	O:0.999958
you	O	O:0.999985
can	O	O:0.999997
iterate	O	O:0.999997
efficiently	O	O:0.999946
with	O	O:0.999970
the	O	O:0.999608
apply	O	B-API:0.902858
method	O	O:0.998589
.	O	O:0.999646
	
Example	O	O:0.999809
code	O	O:0.999676
follows	O	O:0.999491
.	O	O:0.999907
	
#CODE	O	O:0.998453
	
Then	O	O:0.999602
I	O	O:0.999997
am	O	O:1.000000
able	O	O:0.999833
to	O	O:0.999995
process	O	O:0.999968
it	O	O:0.999998
using	O	O:0.999977
apply	O	B-API:0.702295
,	O	O:0.999440
for	O	O:0.999730
example	O	O:0.989194
:	O	O:0.999909
#CODE	O	O:0.999890
	
The	O	O:0.999931
solution	O	O:0.999438
to	O	O:0.999999
this	O	O:0.999995
problem	O	O:0.999628
is	O	O:0.999995
to	O	O:0.999989
apply	O	O:0.966229
`	O	O:0.999914
reset_index()	B-API	B-API:0.999903
`	O	O:0.999995
to	O	O:0.999923
"	O	O:1.000000
end	O	O:0.999460
"	O	O:0.999960
the	O	O:0.999968
group-by	O	O:0.998593
operation	O	O:0.999147
.	O	O:0.999864
	
Just	O	O:0.999867
apply	O	O:0.893444
a	O	O:0.999937
`	O	O:0.999636
filter	O	O:0.579544
`	O	O:0.999920
:	O	O:0.999850
#CODE	O	O:0.999909
	
The	O	O:0.999925
point	O	O:0.998135
is	O	O:0.999997
that	O	O:0.999814
I	O	O:0.999997
don't	O	O:0.999953
think	O	O:0.998243
I've	O	O:0.999784
understood	O	O:0.999668
it	O	O:0.999970
,	O	O:0.999994
sorry	O	O:0.999513
.	O	O:0.999836
	
Ok	O	O:0.999763
,	O	O:0.999982
no	O	O:0.999940
ANOVA	O	O:0.999177
.	O	O:0.999908
	
But	O	O:0.999979
then	O	O:0.999859
,	O	O:0.999999
you	O	O:0.999994
will	O	O:0.999870
run	O	O:0.999975
24x2	O	O:0.999722
t-tests	O	O:0.999770
??	O	O:0.999940
	
Maybe	O	O:0.999792
I	O	O:0.999987
still	O	O:0.999756
haven't	O	O:0.996950
understood	O	O:0.999720
...	O	O:0.999475
	
Anyway	O	O:0.999836
,	O	O:0.999995
if	O	O:0.999993
you	O	O:0.999992
want	O	O:0.999981
to	O	O:0.999998
apply	O	O:0.997346
a	O	O:0.999987
value	O	O:0.999652
to	O	O:0.999990
a	O	O:0.999999
multiindex	O	O:0.999350
,	O	O:0.999994
it	O	O:0.999992
would	O	O:0.999971
be	O	O:1.000000
something	O	O:0.999997
like	O	O:0.999108
`	O	O:0.999991
df.loc	B-API	B-API:0.990445
[	O	O:0.999956
'	O	O:0.999979
0hr	O	O:0.999545
']	O	O:0.999868
.loc	B-API	B-API:0.998132
[	O	O:0.999736
'	O	O:0.999984
0.01um	O	O:0.998120
']	O	O:0.999837
[	O	O:0.999618
'	O	O:0.999984
t	B-API	O:0.981172
']	O	O:0.999955
=	O	O:0.999579
xxx	O	O:0.999398
`	O	O:0.999987
,	O	O:0.999984
assuming	O	O:0.999994
that	O	O:0.999592
'	O	O:0.999995
t	B-API	O:0.983115
'	O	O:0.999948
is	O	O:0.999997
a	O	O:0.999983
column	O	O:0.998862
.	O	O:0.999904
	
For	O	O:0.999979
your	O	O:0.999857
dataframe	B-API	O:0.990122
,	O	O:0.999989
I've	O	O:0.999824
tried	O	O:0.999649
it	O	O:0.999987
straight	O	O:0.999708
in	O	O:0.999985
ipython	O	O:0.999847
as	O	O:0.999975
`	O	O:0.999925
df.loc	B-API	B-API:0.990816
[	O	O:0.999950
'	O	O:0.999977
0hr	O	O:0.999545
']	O	O:0.999868
.loc	B-API	B-API:0.998132
[	O	O:0.999718
'	O	O:0.999983
0.01um	O	O:0.996944
']	O	O:0.999897
.loc	B-API	B-API:0.994438
[	O	O:0.999942
0	O	O:0.999909
]	O	O:0.999880
[	O	O:0.999805
'	O	O:0.999998
a	O	O:0.999989
']	O	O:0.999831
=	O	O:0.999155
3	O	O:0.999483
`	O	O:0.999937
.	O	O:0.999688
	
But	O	O:0.999958
if	O	O:0.999990
again	O	O:0.999832
I	O	O:0.999968
haven't	O	O:0.999835
understood	O	O:0.998861
,	O	O:0.999995
just	O	O:0.999958
tell	O	O:0.999878
me	O	O:0.999908
!	O	O:0.999888
	
apply	O	O:0.781153
sort	O	O:0.996063
to	O	O:0.999988
a	O	O:1.000000
pandas	O	O:0.999531
groupby	B-API	B-API:0.883946
operation	O	O:0.999085
	
How	O	O:0.999914
do	O	O:0.999951
I	O	O:0.999997
apply	O	O:0.962034
sort	O	O:0.986199
to	O	O:0.999987
a	O	O:1.000000
pandas	O	O:0.999539
groupby	B-API	B-API:0.874094
operation	O	O:0.999385
?	O	O:0.999831
	
The	O	O:0.999427
command	O	O:0.999716
below	O	O:0.999903
returns	O	O:0.999914
an	O	O:0.999920
error	O	O:0.999606
saying	O	O:0.999862
that	O	O:0.993440
'	O	O:0.999994
bool	O	O:0.980565
'	O	O:0.999943
object	O	O:0.996936
is	O	O:0.999974
not	O	O:0.999880
callable	O	O:0.999732
#CODE	O	O:0.999764
	
Normally	O	O:0.999888
the	O	O:0.999992
sort	O	O:0.990477
is	O	O:0.999996
performed	O	O:0.999663
on	O	O:0.999985
the	O	O:0.999964
groupby	B-API	B-API:0.939326
keys	O	O:0.999051
and	O	O:0.999981
as	O	O:0.999996
you've	O	O:0.999059
found	O	O:0.999778
out	O	O:0.999940
you	O	O:0.999952
can't	O	O:0.999965
call	O	O:0.999651
`	O	O:0.999999
sort	O	O:0.929415
`	O	O:0.999999
on	O	O:0.999984
a	O	O:0.999991
groupby	B-API	B-API:0.994179
object	O	O:0.999463
,	O	O:0.999989
what	O	O:0.999953
you	O	O:0.999983
could	O	O:0.999992
do	O	O:0.999990
is	O	O:0.999997
call	O	O:0.991530
`	O	O:0.999990
apply	O	B-API:0.998522
`	O	O:0.999883
and	O	O:0.999936
pass	O	O:0.999591
the	O	O:0.999642
`	O	O:0.999886
DataFrame.sort	O	B-API:0.890431
`	O	O:0.999939
function	O	O:0.999173
and	O	O:0.999998
pass	O	O:0.999539
the	O	O:0.999982
column	O	O:0.999933
as	O	O:0.999991
the	O	O:0.999961
kwarg	O	O:0.999231
param	O	O:0.996002
:	O	O:0.999968
#CODE	O	O:0.999907
	
It	O	O:0.999893
doesn't	O	O:0.999881
matter	O	O:0.999916
for	O	O:0.999998
your	O	O:0.999891
mean	O	O:0.998733
calculation	O	O:0.999939
because	O	O:0.999954
you're	O	O:0.999938
just	O	O:0.999990
generating	O	O:0.999981
a	O	O:0.999946
boolean	O	O:0.996403
that	O	O:0.999876
pandas	O	O:0.999952
interprets	O	O:0.999989
as	O	O:0.999963
0	O	O:0.999669
/	O	O:0.999890
1	O	O:0.999250
.	O	O:0.999773
	
But	O	O:0.999840
for	O	O:0.999986
the	O	O:0.999917
correlation	O	O:0.999669
coeffient	O	O:0.999857
you	O	O:0.999996
need	O	O:0.999980
to	O	O:0.999998
provide	O	O:0.999985
numbers	O	O:0.999133
.	O	O:0.999887
	
You	O	O:0.999966
also	O	O:0.999978
need	O	O:0.999991
to	O	O:0.999982
use	O	O:0.999997
`	O	O:0.999956
apply	O	B-API:0.955766
`	O	O:0.999958
rather	O	O:0.999333
than	O	O:0.999883
`	O	O:0.999967
agg	O	B-API:0.996835
`	O	O:0.999973
here	O	O:0.975642
:	O	O:0.999984
#CODE	O	O:0.999810
	
Thanks	O	O:0.997941
Ed	O	O:0.999449
and	O	O:0.999965
Alex	O	O:0.999596
,	O	O:0.999932
never	O	O:0.999771
used	O	O:0.999221
'	O	O:0.999807
.gt	B-API	B-API:0.981346
'	O	O:0.999856
before	O	O:0.999402
.	O	O:0.999798
	
Just	O	O:0.999920
out	O	O:0.999987
of	O	O:0.999992
curiosity	O	O:0.999201
,	O	O:0.999980
is	O	O:0.999980
it	O	O:0.999989
possible	O	O:0.999966
to	O	O:0.999991
use	O	O:0.999982
'	O	O:0.999932
apply	O	B-API:0.517210
'	O	O:0.999939
to	O	O:0.999945
realize	O	O:0.999980
the	O	O:0.999993
same	O	O:0.999045
function	O	O:0.999898
?	O	O:0.999972
	
Yes	O	O:0.999742
you	O	O:0.999834
could	O	O:0.999909
but	O	O:0.999997
I'd	O	O:0.999989
advise	O	O:0.999729
against	O	O:0.999783
it	O	O:0.999969
because	O	O:0.999950
apply	O	B-API:0.674906
is	O	O:0.999973
slow	O	O:0.993318
whilst	O	O:0.999938
this	O	O:0.999881
will	O	O:0.999909
be	O	O:0.999997
vectorised	O	O:0.999918
,	O	O:0.999950
apply	O	B-API:0.561655
should	O	O:0.999604
be	O	O:0.999997
a	O	O:1.000000
last	O	O:0.990121
resort	O	O:0.999629
always	O	O:0.999525
	
thank	O	O:0.999021
you	O	O:0.999930
John	O	O:0.999927
,	O	O:0.999995
I	O	O:0.999960
was	O	O:0.999992
very	O	O:0.999642
curious	O	O:0.999909
about	O	O:0.999912
how	O	O:0.999955
to	O	O:0.999977
use	O	O:0.999998
apply	O	B-API:0.853622
to	O	O:0.999585
realize	O	O:0.999743
it	O	O:0.999934
.	O	O:0.999915
	
Python	O	O:0.998814
How	O	O:0.999962
to	O	O:0.999993
find	O	O:0.999998
average	O	O:0.999928
of	O	O:0.999997
columns	O	O:0.999960
using	O	O:0.999992
dataframes	O	O:0.994158
apply	O	B-API:0.944229
method	O	O:0.998712
	
Using	O	O:0.999309
the	O	O:0.999948
dataframe's	O	O:0.998711
apply	O	B-API:0.770824
method	O	O:0.999769
,	O	O:0.999993
create	O	O:0.999956
a	O	O:0.999993
new	O	O:0.999618
Series	O	O:0.999923
called	O	O:0.997604
`	O	O:0.999995
avg_medal_count	O	O:0.947929
`	O	O:0.999994
that	O	O:0.999306
indicates	O	O:0.999989
the	O	O:0.999996
average	O	O:0.999169
number	O	O:0.999874
of	O	O:0.999988
gold	O	O:0.999490
,	O	O:0.999992
silver	O	O:0.995237
,	O	O:0.999947
and	O	O:0.999987
bronze	O	O:0.999763
medals	O	O:0.999511
earned	O	O:0.999783
amongst	O	O:0.999962
countries	O	O:0.999316
who	O	O:0.999961
earned	O	O:0.999934
at	O	O:0.999994
least	O	O:0.999808
one	O	O:0.999998
medal	O	O:0.999765
of	O	O:0.999989
any	O	O:0.999976
kind	O	O:0.999902
at	O	O:0.999986
the	O	O:0.999864
2014	O	O:0.998405
Sochi	O	O:0.999124
Olympics	O	O:0.998039
.	O	O:0.999870
	
I	O	O:0.999959
played	O	O:0.999702
around	O	O:0.998681
with	O	O:0.999975
this	O	O:0.999906
for	O	O:0.999998
a	O	O:0.999996
couple	O	O:0.999131
of	O	O:0.999979
minutes	O	O:0.996681
.	O	O:0.999940
	
I	O	O:0.999983
think	O	O:0.999899
v1	O	O:0.999240
/	O	O:0.999903
v2	O	O:0.999601
are	O	O:0.999993
empty	O	O:0.999401
for	O	O:0.999997
some	O	O:0.999967
data	O	O:0.999959
values	O	O:0.999928
,	O	O:0.999991
in	O	O:0.999996
line	O	O:0.999749
with	O	O:0.999978
what	O	O:0.999794
Andy	O	O:0.999797
suggests	O	O:0.999604
.	O	O:0.999798
	
Also	O	O:0.999746
coef	O	O:0.998918
doesn't	O	O:0.999979
seem	O	O:0.999880
to	O	O:0.999998
have	O	O:0.999999
any	O	O:0.999996
purpose	O	O:0.999783
in	O	O:0.999981
the	O	O:0.999986
code	O	O:0.999498
,	O	O:0.999998
just	O	O:0.999621
fyi	O	O:0.999785
.	O	O:0.999783
	
Anyway	O	O:0.999748
,	O	O:0.999999
your	O	O:0.999827
groupby	B-API	B-API:0.984304
/	O	O:0.999985
apply	O	B-API:0.944108
is	O	O:0.999919
probably	O	O:0.997089
OK	O	O:0.999978
,	O	O:0.999983
you	O	O:0.999992
just	O	O:0.999986
have	O	O:0.999999
something	O	O:0.999985
wrong	O	O:0.999920
with	O	O:0.999963
the	O	O:0.999954
function	O	O:0.999944
itself	O	O:0.999427
.	O	O:0.999957
	
And	O	O:0.999852
,	O	O:0.999981
Now	O	O:0.999954
,	O	O:0.999992
let's	O	O:0.999787
see	O	O:0.999973
what	O	O:0.999727
was	O	O:0.999982
the	O	O:0.999989
error	O	O:0.999797
that	O	O:0.999559
was	O	O:0.999986
happening	O	O:0.999922
,	O	O:0.999996
when	O	O:0.999884
you	O	O:0.999995
apply	O	O:0.977692
np.argsort()	B-API	B-API:0.998713
after	O	O:0.999673
first	O	O:0.999921
group	O	O:0.997759
on	O	O:0.999948
series	O	O:0.999559
object	O	O:0.999866
.	O	O:0.999911
	
Lets	O	O:0.999909
take	O	O:0.999907
the	O	O:0.999990
second	O	O:0.999924
group	O	O:0.998744
values	O	O:0.999387
.	O	O:0.999819
	
Which	O	O:0.998376
is	O	O:0.999892
-	O	O:0.999928
#CODE	O	O:0.999598
	
Ok	O	O:0.999788
,	O	O:0.999987
it	O	O:0.999973
solves	O	O:0.999703
the	O	O:0.999981
example	O	O:0.999339
.	O	O:0.999854
	
The	O	O:0.999925
problem	O	O:0.997352
is	O	O:0.999996
that	O	O:0.999838
I	O	O:0.999995
do	O	O:0.999991
not	O	O:0.999974
have	O	O:0.999984
a	O	O:0.999999
string	O	O:0.999946
of	O	O:0.999998
data	O	O:0.999970
as	O	O:0.999998
"	O	O:0.999998
data	O	O:0.999755
"	O	O:0.999980
in	O	O:0.999996
your	O	O:0.999836
example	O	O:0.999456
.	O	O:0.999931
	
I	O	O:0.999992
only	O	O:0.999970
have	O	O:0.999802
csv-file	O	O:0.999931
,	O	O:0.999984
and	O	O:0.999988
i	O	O:0.999962
tried	O	O:0.999811
to	O	O:0.999982
apply	O	O:0.993719
your	O	O:0.997963
solution	O	O:0.997663
but	O	O:0.999942
could	O	O:0.999834
not	O	O:0.999997
make	O	O:0.999945
it	O	O:0.999992
work	O	O:0.999769
.	O	O:0.999967
	
Do	O	O:0.999959
I	O	O:0.999998
have	O	O:0.999992
to	O	O:0.999984
convert	O	O:0.999887
the	O	O:0.999992
csv-file	O	O:0.999952
to	O	O:0.999998
a	O	O:1.000000
string	O	O:0.999931
of	O	O:0.999996
data	O	O:0.999949
first	O	O:0.999985
maby	O	O:0.999410
?	O	O:0.999928
	
Alternatively	O	O:0.999772
,	O	O:0.999994
you	O	O:0.999982
can	O	O:0.999990
represent	O	O:0.999982
`	O	O:0.999996
sym	O	O:0.998588
`	O	O:0.999999
column	O	O:0.999816
as	O	O:1.000000
a	O	O:0.999982
q	O	O:0.999342
generic	O	O:0.998765
list	O	O:0.998898
containing	O	O:0.999398
strings	O	O:0.998738
.	O	O:0.999813
	
You	O	O:0.999833
can	O	O:0.999986
also	O	O:0.999993
apply	O	O:0.972208
type	O	O:0.994595
conversion	O	O:0.999645
to	O	O:0.999998
other	O	O:0.999996
columns	O	O:0.999047
:	O	O:0.999971
#CODE	O	O:0.999929
	
How	O	O:0.999877
can	O	O:0.999945
I	O	O:1.000000
apply	O	O:0.983688
a	O	O:0.999783
search	O	O:0.997435
,	O	O:0.999998
such	O	O:0.999976
that	O	O:0.999994
the	O	O:0.999988
result	O	O:0.999911
would	O	O:0.999942
be	O	O:0.999991
the	O	O:0.999998
index	O	O:0.999549
for	O	O:0.999992
each	O	O:0.999783
value	O	O:0.999876
,	O	O:0.999991
if	O	O:0.999995
it	O	O:0.999991
exists	O	O:0.999967
,	O	O:0.999998
in	O	O:0.999995
an	O	O:0.999990
efficient	O	O:0.999813
way	O	O:0.999705
(	O	O:0.999995
since	O	O:0.999970
I	O	O:0.999996
know	O	O:0.999992
the	O	O:0.999972
column	O	O:0.999674
`'	O	O:0.999921
A	O	O:0.999950
'`	O	O:0.999956
has	O	O:0.999960
uniqu	O	O:0.999854
values	O	O:0.999861
)	O	O:0.999994
to	O	O:0.999994
get	O	O:0.999998
the	O	O:0.999998
following	O	O:0.998995
results	O	O:0.998942
:	O	O:0.999961
#CODE	O	O:0.999911
	
Yeah	O	O:0.999538
the	O	O:0.999983
euclidian	O	O:0.998999
approximation	O	O:0.999909
will	O	O:0.999941
work	O	O:0.999986
fine	O	O:0.999958
for	O	O:0.999994
small	O	O:0.999226
enough	O	O:0.998168
distances	O	O:0.999375
.	O	O:0.999719
	
You	O	O:0.999834
shouldn't	O	O:0.999969
even	O	O:0.999954
need	O	O:0.999996
to	O	O:0.999997
do	O	O:1.000000
an	O	O:0.999988
`	O	O:0.999988
apply	O	B-API:0.948918
`	O	O:0.999933
for	O	O:0.999916
that	O	O:0.999945
,	O	O:0.999999
can	O	O:0.999991
directly	O	O:0.999998
just	O	O:0.999932
use	O	O:0.999995
the	O	O:0.999982
columns	O	O:0.999253
in	O	O:0.999975
the	O	O:0.999990
dataframe	B-API	O:0.996200
.	O	O:0.999855
	
You	O	O:0.999906
can	O	O:0.999929
do	O	O:1.000000
this	O	O:0.999992
by	O	O:0.999965
`	O	O:0.999971
apply	O	B-API:0.991220
(	O	O:0.999908
pd.Series	B-API	B-API:0.958678
)`	O	O:0.999767
on	O	O:0.999982
that	O	O:0.999937
column	O	O:0.999902
:	O	O:0.999990
#CODE	O	O:0.999857
	
That's	O	O:0.999864
quite	O	O:0.999930
a	O	O:0.999996
long	O	O:0.999368
lambda	O	O:0.998844
function	O	O:0.999691
in	O	O:0.999996
your	O	O:0.999946
apply	O	O:0.714016
,	O	O:0.999981
I	O	O:0.999952
recommend	O	O:0.999948
writing	O	O:0.999229
as	O	O:0.999994
a	O	O:0.999780
function	O	O:0.998922
.	O	O:0.999838
	
For	O	O:0.999924
one	O	O:0.999964
thing	O	O:0.999871
it'll	O	O:0.999909
be	O	O:0.999989
easier	O	O:0.999827
to	O	O:0.999936
debug	O	O:0.999655
(	O	O:0.999985
clearer	O	O:0.999464
which	O	O:0.999969
line	O	O:0.999484
is	O	O:0.999991
causing	O	O:0.999421
the	O	O:0.999986
error	O	O:0.997912
)	O	O:0.999934
.	O	O:0.999753
	
I	O	O:0.999959
could	O	O:0.999960
be	O	O:0.999972
wrong	O	O:0.999645
but	O	O:0.999677
it	O	O:0.999983
looks	O	O:0.999975
like	O	O:0.999836
`	O	O:0.999979
search	O	O:0.966834
(	O	O:0.999992
Origin_Zip	O	O:0.996987
,	O	O:0.999979
stop=stop	O	O:0.999100
,	O	O:0.999982
pause=	O	O:0.999819
5.0	O	O:0.999323
)`	O	O:0.999328
doesn't	O	O:0.999683
always	O	O:0.999974
return	O	O:0.999767
a	O	O:0.999862
list	O	O:0.853953
(	O	O:0.999975
but	O	O:0.999960
an	O	O:0.999977
int	O	O:0.998671
)	O	O:0.999946
.	O	O:0.999457
	
I'd	O	O:0.999931
reset	O	O:0.997086
the	O	O:0.999950
index	O	O:0.999611
so	O	O:0.999991
that	O	O:0.999973
it	O	O:0.999999
becomes	O	O:0.999979
a	O	O:0.999998
column	O	O:0.999018
,	O	O:0.999999
this	O	O:0.999966
allows	O	O:0.999903
you	O	O:0.999980
to	O	O:0.999996
call	O	O:0.999945
`	O	O:0.999993
apply	O	B-API:0.993222
`	O	O:0.999963
on	O	O:0.999757
it	O	O:0.999996
,	O	O:1.000000
then	O	O:0.999875
for	O	O:1.000000
each	O	O:0.999880
datetime	O	O:0.999499
apply	O	O:0.754961
a	O	O:0.999937
lambda	O	O:0.985120
which	O	O:0.999792
calls	O	O:0.998651
`	O	O:0.999992
replace	O	B-API:0.700003
`	O	O:0.999977
and	O	O:0.999974
null	O	O:0.999738
the	O	O:0.999738
minute	O	O:0.994211
and	O	O:0.999985
seconds	O	O:0.999935
attributes	O	O:0.999520
,	O	O:0.999999
then	O	O:0.999940
drop	O	O:0.999735
the	O	O:0.999998
duplicates	O	O:0.999428
and	O	O:0.999990
set	O	O:0.999801
the	O	O:0.999977
index	O	O:0.999797
back	O	O:0.994034
:	O	O:0.999985
#CODE	O	O:0.999859
	
Something	O	O:0.999759
like	O	O:0.999895
this	O	O:0.999921
should	O	O:0.999955
work	O	O:0.999885
.	O	O:0.999981
	
It	O	O:0.999954
will	O	O:0.999939
be	O	O:0.999993
faster	O	O:0.999941
than	O	O:0.999199
`	O	O:0.999980
apply	O	B-API:0.974548
`	O	O:0.999957
since	O	O:0.997991
it	O	O:0.999990
uses	O	O:0.999956
vectorized	O	O:0.999587
operations	O	O:0.998928
.	O	O:0.999754
	
Further	O	O:0.999911
,	O	O:0.999985
rather	O	O:0.999970
than	O	O:0.999907
hard-coding	O	O:0.999760
the	O	O:0.999951
`	O	O:0.999982
apple	O	O:0.996863
`	O	O:0.999990
result	O	O:0.999281
,	O	O:0.999995
it	O	O:0.999984
gives	O	O:0.999871
you	O	O:0.999989
counts	O	O:0.999821
and	O	O:0.999999
percentages	O	O:0.999419
for	O	O:0.999974
all	O	O:0.999982
purchases	O	O:0.999041
,	O	O:0.999991
no	O	O:0.999990
matter	O	O:0.999706
how	O	O:0.999996
many	O	O:0.999875
you	O	O:0.999967
might	O	O:0.999988
have	O	O:0.999947
.	O	O:0.999984
	
#CODE	O	O:0.998453
	
@USER	O	O:0.999401
,	O	O:0.999995
right	O	O:0.999883
off	O	O:0.999952
my	O	O:0.999992
head	O	O:0.999842
I	O	O:0.999997
will	O	O:0.999994
say	O	O:0.999927
filter	O	O:0.999351
the	O	O:0.999992
selection	O	O:0.999894
of	O	O:0.999996
the	O	O:0.999992
columns	O	O:0.999971
,	O	O:0.999999
then	O	O:0.999958
apply	O	O:0.958132
the	O	O:0.999995
same	O	O:0.999856
on	O	O:0.999996
the	O	O:0.999997
values	O	O:0.999923
copy	O	O:0.990483
	
simply	O	O:0.999848
multiply	O	O:0.999844
the	O	O:0.999979
number	O	O:0.999932
by	O	O:0.999942
100	O	O:0.999960
to	O	O:0.999977
scale	O	O:0.999978
it	O	O:0.999983
in	O	O:0.999995
the	O	O:0.999981
range	O	O:0.999309
(	O	O:0.999948
1	O	O:0.999919
,	O	O:0.999987
100	O	O:0.999618
)	O	O:0.999954
,	O	O:0.999970
and	O	O:0.999999
then	O	O:0.999855
apply	O	O:0.827284
the	O	O:0.999985
same	O	O:0.999764
algo	O	O:0.999896
,	O	O:0.999998
however	O	O:0.999974
you	O	O:0.999988
can	O	O:0.999996
play	O	O:0.999996
with	O	O:0.999976
numbers	O	O:0.999186
and	O	O:0.999998
find	O	O:0.999923
out	O	O:0.999987
your	O	O:0.999918
own	O	O:0.999976
way	O	O:0.999992
of	O	O:0.999991
doing	O	O:0.999821
the	O	O:0.999985
same	O	O:0.998535
.	O	O:0.999867
	
I	O	O:0.999992
have	O	O:0.999993
a	O	O:0.999994
time-series	O	O:0.999956
data	O	O:0.999943
in	O	O:0.999989
"	O	O:0.999991
stacked	O	O:0.996705
"	O	O:0.999938
format	O	O:0.998318
and	O	O:0.999969
would	O	O:0.999992
like	O	O:0.999970
to	O	O:0.999999
compute	O	O:0.999983
a	O	O:0.999998
rolling	O	O:0.794712
function	O	O:0.999946
based	O	O:0.999486
on	O	O:0.999994
two	O	O:0.999976
columns	O	O:0.999921
.	O	O:0.999909
	
However	O	O:0.999881
,	O	O:0.999996
as	O	O:0.999998
shown	O	O:0.998633
in	O	O:0.999994
my	O	O:0.999994
example	O	O:0.999934
below	O	O:0.999822
,	O	O:0.999998
the	O	O:0.999955
`	O	O:0.999941
groupby	B-API	B-API:0.999161
`	O	O:0.999973
is	O	O:0.999934
concatenating	O	O:0.999852
my	O	O:0.999962
results	O	O:0.999906
horizontally	O	O:0.999885
instead	O	O:0.999991
of	O	O:0.999982
vertically	O	O:0.998760
.	O	O:0.999932
	
I	O	O:0.999970
can	O	O:0.999987
apply	O	O:0.799472
`	O	O:0.999986
stack	O	B-API:0.975892
`	O	O:0.999997
at	O	O:0.999977
the	O	O:0.999996
end	O	O:0.999927
to	O	O:0.999994
get	O	O:0.999999
back	O	O:0.999738
to	O	O:0.999998
tall	O	O:0.999938
format	O	O:0.999703
.	O	O:0.999790
	
However	O	O:0.999899
,	O	O:0.999992
I	O	O:0.999993
thought	O	O:0.999921
the	O	O:0.999971
correct	O	O:0.999279
behavior	O	O:0.999862
should	O	O:0.999971
be	O	O:0.999993
to	O	O:0.999999
concatenate	O	O:0.972487
vertically	O	O:0.999934
to	O	O:0.999989
allow	O	O:0.999994
assignment	O	O:0.999977
back	O	O:0.999014
to	O	O:0.999994
the	O	O:0.999999
original	O	O:0.999449
dataframe	B-API	O:0.993996
(	O	O:0.999998
something	O	O:0.999990
like	O	O:0.999575
`	O	O:0.999995
x	O	O:0.999369
[	O	O:0.999975
'	O	O:0.999991
res	O	O:0.999562
']	O	O:0.999955
=	O	O:0.998657
df.groupby	B-API	B-API:0.997338
(	O	O:0.999971
...	O	O:0.999706
)	O	O:0.999959
.apply	B-API	B-API:0.997159
(	O	O:0.999960
func	O	O:0.994588
)`)	O	O:0.998772
.	O	O:0.999596
	
Does	O	O:0.999432
anyone	O	O:0.999892
know	O	O:0.999780
why	O	O:0.999913
`	O	O:0.999953
groupby	B-API	B-API:0.998992
`	O	O:0.999805
is	O	O:0.999640
not	O	O:0.999987
behaving	O	O:0.999941
as	O	O:0.999993
expected	O	O:0.999654
or	O	O:0.999996
am	O	O:0.999991
I	O	O:0.999998
doing	O	O:0.999993
something	O	O:0.998990
wrong	O	O:0.997522
?	O	O:0.999942
	
#CODE	O	O:0.998453
	
@USER	O	O:0.998358
Also	O	O:0.999882
calling	O	O:0.999099
`	O	O:0.999983
apply	O	B-API:0.990895
`	O	O:0.999955
should	O	O:0.999161
be	O	O:0.999998
the	O	O:0.999999
last	O	O:0.998551
resort	O	O:0.999886
when	O	O:0.999795
working	O	O:0.999883
with	O	O:0.999965
arrays	O	O:0.999416
,	O	O:0.999991
it	O	O:0.999716
is	O	O:0.999963
not	O	O:0.999953
vectorised	O	O:0.999787
and	O	O:0.999990
therefore	O	O:0.999845
will	O	O:0.999834
not	O	O:0.999996
scale	O	O:0.999904
well	O	O:0.999597
	
apologies	O	O:0.999159
if	O	O:0.999994
this	O	O:0.999755
is	O	O:0.999999
a	O	O:0.999994
silly	O	O:0.998792
question	O	O:0.999315
,	O	O:0.999981
but	O	O:0.999975
I	O	O:0.999952
am	O	O:0.999995
not	O	O:0.999946
quite	O	O:0.999991
sure	O	O:0.999958
as	O	O:0.999993
to	O	O:0.999955
why	O	O:1.000000
this	O	O:0.999944
behavior	O	O:0.999745
is	O	O:0.999985
the	O	O:0.999864
case	O	O:0.999702
,	O	O:0.999980
and	O	O:0.999989
/	O	O:0.999978
or	O	O:0.999966
whether	O	O:0.999779
I	O	O:0.999975
am	O	O:0.999993
misunderstanding	O	O:0.997050
it	O	O:0.999932
.	O	O:0.999867
	
I	O	O:0.999753
was	O	O:0.999979
trying	O	O:0.999778
to	O	O:0.999996
create	O	O:0.999994
a	O	O:0.999994
function	O	O:0.999808
for	O	O:0.999990
the	O	O:0.999857
'	O	O:0.999867
apply	O	B-API:0.959822
'	O	O:0.999444
method	O	O:0.999779
,	O	O:0.999966
and	O	O:0.999986
noticed	O	O:0.999890
that	O	O:0.999854
if	O	O:0.999997
you	O	O:0.999985
run	O	O:0.999943
apply	O	O:0.929513
on	O	O:0.999990
a	O	O:0.999983
series	O	O:0.999932
the	O	O:0.999979
series	O	O:0.999604
is	O	O:0.999992
passed	O	O:0.999719
as	O	O:0.999997
a	O	O:0.999935
np.array	B-API	B-API:0.997126
and	O	O:0.999991
if	O	O:0.999990
you	O	O:0.999982
pass	O	O:0.999386
the	O	O:0.999996
same	O	O:0.999929
series	O	O:0.999955
within	O	O:0.999947
a	O	O:0.999999
dataframe	B-API	O:0.999087
of	O	O:0.999986
1	O	O:0.999978
column	O	O:0.999919
,	O	O:0.999996
the	O	O:0.999987
series	O	O:0.999112
is	O	O:0.999994
passed	O	O:0.999839
as	O	O:0.999999
a	O	O:0.999990
series	O	O:0.999751
to	O	O:0.999983
the	O	O:0.999995
(	O	O:0.999979
u	O	O:0.999893
)	O	O:0.999985
func	O	O:0.987162
.	O	O:0.999869
	
mode	O	O:0.999286
isn't	O	O:0.999957
a	O	O:0.999897
groupby	B-API	B-API:0.998098
method	O	O:0.999826
,	O	O:0.999965
though	O	O:0.999959
it	O	O:0.999963
is	O	O:0.999994
a	O	O:0.999951
Series	O	O:0.980673
(	O	O:0.999731
and	O	O:0.999993
DataFrame	B-API	O:0.965749
)	O	O:0.999874
method	O	O:0.999933
,	O	O:0.999997
so	O	O:0.999997
you	O	O:0.999993
have	O	O:0.999988
to	O	O:0.999999
pass	O	O:0.999960
it	O	O:0.999994
to	O	O:0.999990
apply	O	O:0.695593
:	O	O:0.999709
#CODE	O	O:0.999471
	
For	O	O:0.999955
each	O	O:0.999641
set_up	O	O:0.993047
in	O	O:0.999993
set_ups	O	O:0.996812
I	O	O:0.999997
want	O	O:0.999984
to	O	O:0.999940
apply	O	O:0.935757
'	O	O:0.999942
value	O	O:0.999739
'	O	O:0.999986
to	O	O:0.999956
'	O	O:0.999998
set_up	O	O:0.990795
'	O	O:0.999924
and	O	O:0.999975
groupby	B-API	B-API:0.993028
(	O	O:0.999878
level=0	O	O:0.996905
)	O	O:0.999938
or	O	O:0.999924
df.A	O	O:0.981808
and	O	O:0.999977
df.B	O	O:0.989849
.	O	O:0.999296
	
#CODE	O	O:0.998453
	
First	O	O:0.999785
,	O	O:0.999995
we	O	O:0.999996
can	O	O:0.999977
perform	O	O:0.999991
a	O	O:0.999992
groupby	B-API	B-API:0.994123
/	O	O:0.999985
apply	O	B-API:0.530615
operation	O	O:0.999635
to	O	O:0.999968
obtain	O	O:0.999960
the	O	O:0.999989
Protein	O	O:0.998131
/	O	O:0.999998
Peptide	O	O:0.999970
pairs	O	O:0.999877
with	O	O:0.999954
the	O	O:0.999996
two	O	O:0.999945
largest	O	O:0.999889
Peptide	O	O:0.999943
counts	O	O:0.999747
for	O	O:0.999991
each	O	O:0.998333
Protein	O	O:0.987133
:	O	O:0.999977
#CODE	O	O:0.999852
	
Apply	O	O:0.998119
function	O	O:0.999558
to	O	O:0.999992
multilevel	O	O:0.999997
columns	O	O:0.999660
	
I	O	O:0.999947
renamed	O	O:0.999990
your	O	O:0.999845
columns	O	O:0.999881
to	O	O:0.999975
'	O	O:0.999999
author	O	O:0.999729
'	O	O:0.999924
and	O	O:0.999978
'	O	O:0.999982
citations	O	O:0.999050
'	O	O:0.999988
here	O	O:0.999892
,	O	O:0.999998
we	O	O:0.999994
can	O	O:0.999923
groupby	B-API	O:0.670946
the	O	O:0.999987
authors	O	O:0.997587
and	O	O:0.999998
then	O	O:0.999962
apply	O	O:0.932502
a	O	O:0.999986
lambda	O	O:0.994892
,	O	O:0.999991
here	O	O:0.999294
the	O	O:0.999989
lambda	O	O:0.997480
is	O	O:0.999981
comparing	O	O:0.999642
the	O	O:0.999993
number	O	O:0.999935
of	O	O:0.999976
citations	O	O:0.999928
against	O	O:0.999989
the	O	O:0.999986
value	O	O:0.999645
,	O	O:0.999997
this	O	O:0.999985
will	O	O:0.999989
generate	O	O:0.999992
a	O	O:0.999999
1	O	O:0.999957
or	O	O:0.999988
0	O	O:0.999914
if	O	O:0.999995
true	O	O:0.999753
,	O	O:0.999997
we	O	O:0.999995
can	O	O:0.999996
then	O	O:0.999995
sum	O	O:0.999995
this	O	O:0.999815
:	O	O:0.999985
#CODE	O	O:0.999864
	
Pandas	O	O:0.998430
:	O	O:0.999993
column	O	O:0.999895
of	O	O:0.999997
type	O	O:0.999150
str	O	O:0.999940
converted	O	O:0.999300
to	O	O:0.999996
tslib.Timestamp	O	O:0.999630
after	O	O:0.999985
using	O	O:0.999884
apply	O	B-API:0.984073
function	O	O:0.990499
	
Thank	O	O:0.998934
you	O	O:0.999824
.	O	O:0.999955
	
That	O	O:0.996902
worked	O	O:0.999258
!	O	O:0.999897
	
Is	O	O:0.999992
this	O	O:0.999985
a	O	O:0.999996
implementation	O	O:0.999813
problem	O	O:0.999885
of	O	O:0.999996
pandas	O	O:0.999607
or	O	O:0.999999
the	O	O:0.999975
apply	O	B-API:0.911080
function	O	O:0.999914
that	O	O:0.999750
I	O	O:0.999997
was	O	O:0.999989
using	O	O:0.999088
?	O	O:0.999558
	
You	O	O:0.999897
can	O	O:0.999945
apply	O	O:0.998236
multiple	O	O:0.999789
functions	O	O:0.999379
to	O	O:0.999995
multiple	O	O:0.999982
fields	O	O:0.997074
:	O	O:0.999964
#CODE	O	O:0.999906
	
So	O	O:0.999970
what	O	O:0.999913
are	O	O:0.999988
you	O	O:0.999995
trying	O	O:0.999957
to	O	O:0.999995
achieve	O	O:0.999982
here	O	O:0.999896
?	O	O:0.999990
for	O	O:0.999988
squaring	O	O:0.999839
the	O	O:0.999836
values	O	O:0.999782
this	O	O:0.999456
is	O	O:0.999998
trivial	O	O:0.999528
to	O	O:0.999984
perform	O	O:0.999527
and	O	O:0.999986
doesn't	O	O:0.999932
require	O	O:0.999789
the	O	O:0.999992
use	O	O:0.999870
of	O	O:0.999845
`	O	O:0.999958
apply	O	B-API:0.902439
`	O	O:0.999835
in	O	O:0.999933
this	O	O:0.999966
case	O	O:0.999877
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999800
to	O	O:0.999996
create	O	O:0.999928
arbitrarily	O	O:0.999984
many	O	O:0.999906
fields	O	O:0.999299
and	O	O:0.999991
assign	O	O:0.999993
them	O	O:0.999923
values	O	O:0.999964
simultaneously	O	O:0.999873
using	O	O:0.999982
the	O	O:0.997259
apply	O	B-API:0.987625
method	O	O:0.997739
.	O	O:0.999448
	
The	O	O:0.999989
simple	O	O:0.999784
functions	O	O:0.999795
in	O	O:0.999979
the	O	O:0.999988
example	O	O:0.999953
just	O	O:0.999867
represent	O	O:0.999959
any	O	O:0.999983
arbitraryfunction	O	O:0.999331
I	O	O:0.999985
may	O	O:0.999997
want	O	O:0.999902
to	O	O:0.999990
use	O	O:0.999996
for	O	O:0.999973
generating	O	O:0.999511
a	O	O:0.999957
new	O	O:0.999321
field	O	O:0.999279
.	O	O:0.999782
	
The	O	O:0.999892
issue	O	O:0.999039
is	O	O:0.999987
when	O	O:0.999648
trying	O	O:0.999983
to	O	O:0.999998
create	O	O:0.999975
more	O	O:0.999982
than	O	O:0.999944
1	O	O:0.999994
field	O	O:0.999851
in	O	O:0.999988
the	O	O:0.999988
above	O	O:0.999762
example	O	O:0.999833
it	O	O:0.999974
errors	O	O:0.999709
.	O	O:0.999899
	
Once	O	O:0.999892
I	O	O:0.999992
can	O	O:0.999986
do	O	O:0.999999
this	O	O:0.999994
I	O	O:0.999996
can	O	O:0.999992
replace	O	O:0.999099
the	O	O:0.999997
trivial	O	O:0.997424
function	O	O:0.999952
with	O	O:0.999960
any	O	O:0.999979
value	O	O:0.999791
.	O	O:0.999684
	
This	O	O:0.999790
will	O	O:0.999953
certainly	O	O:0.999932
fix	O	O:0.999936
the	O	O:0.999891
problem	O	O:0.998520
.	O	O:0.999839
	
But	O	O:0.999857
it	O	O:0.999987
will	O	O:0.999843
involve	O	O:0.999860
having	O	O:0.999855
the	O	O:0.999884
apply	O	B-API:0.638983
return	O	O:0.998525
only	O	O:0.999912
a	O	O:1.000000
single	O	O:0.999692
field	O	O:0.999962
at	O	O:0.999994
once	O	O:0.999365
.	O	O:0.999936
	
What	O	O:0.999535
I	O	O:0.999971
was	O	O:0.999989
curious	O	O:0.998855
about	O	O:0.999577
was	O	O:0.999884
being	O	O:0.999806
able	O	O:0.999947
to	O	O:0.999980
use	O	O:0.999996
apply	O	B-API:0.847366
to	O	O:0.999783
return	O	O:0.999823
arbritrarily	O	O:0.999812
many	O	O:0.999784
fields	O	O:0.998774
.	O	O:0.999858
	
By	O	O:0.999964
being	O	O:0.999843
able	O	O:0.999922
to	O	O:0.999965
do	O	O:0.999999
this	O	O:0.999931
it	O	O:0.999990
should	O	O:0.999988
allow	O	O:0.999924
for	O	O:0.999985
cleaner	O	O:0.998297
code	O	O:0.998993
.	O	O:0.999906
	
The	O	O:0.999980
original	O	O:0.999624
approach	O	O:0.999965
you	O	O:0.999937
suggested	O	O:0.999652
is	O	O:0.999995
correct	O	O:0.999657
,	O	O:0.999998
although	O	O:0.999982
you	O	O:0.999991
have	O	O:0.999994
to	O	O:0.999999
use	O	O:1.000000
a	O	O:0.999953
`	O	O:0.999946
transform	O	B-API:0.867694
`	O	O:0.999991
on	O	O:0.999969
the	O	O:0.999994
groups	O	O:0.998050
(	O	O:0.999991
by	O	O:0.999992
`	O	O:0.999994
date	O	O:0.955555
`	O	O:0.999986
AND	O	O:0.996663
`	O	O:0.999996
source	O	O:0.995158
`)	O	O:0.999995
instead	O	O:0.999970
of	O	O:0.999997
an	O	O:0.999974
`	O	O:0.999995
apply	O	B-API:0.989264
`	O	O:0.999854
.	O	O:0.998060
	
`	O	O:0.999973
transform	O	B-API:0.966919
`	O	O:0.999989
return	O	O:0.997102
the	O	O:0.999990
group	O	O:0.996095
information	O	O:0.999911
with	O	O:0.999960
the	O	O:0.999997
same	O	O:0.999993
structure	O	O:0.999950
of	O	O:0.999996
the	O	O:0.999990
original	O	O:0.999775
dataframe	B-API	O:0.996851
.	O	O:0.999871
	
#CODE	O	O:0.998453
	
It	O	O:0.999980
splits	O	O:0.999222
up	O	O:0.999901
the	O	O:0.999970
DataFrame	B-API	O:0.998594
by	O	O:0.999981
store_nbr	O	O:0.997584
,	O	O:0.999944
calls	O	O:0.999743
is_good	O	O:0.944018
on	O	O:0.999925
each	O	O:0.999855
each	O	O:0.999857
group	O	O:0.994022
(	O	O:0.999996
apply	O	O:0.606813
)	O	O:0.999974
to	O	O:0.999975
determine	O	O:0.999998
the	O	O:0.999998
rows	O	O:0.999550
you	O	O:0.999994
want	O	O:0.999996
to	O	O:0.999999
keep	O	O:0.999957
,	O	O:0.999996
puts	O	O:0.999971
everything	O	O:0.999993
back	O	O:0.999955
together	O	O:0.999845
in	O	O:0.999992
the	O	O:0.999983
right	O	O:0.999896
order	O	O:0.999696
,	O	O:0.999990
and	O	O:0.999997
then	O	O:0.999893
takes	O	O:0.999990
a	O	O:1.000000
subset	O	O:0.999681
of	O	O:1.000000
rows	O	O:0.999707
from	O	O:0.999977
the	O	O:0.999998
original	O	O:0.999760
frame	O	O:0.999980
.	O	O:0.999901
	
If	O	O:0.999957
you	O	O:0.999982
want	O	O:0.999973
to	O	O:0.999991
apply	O	O:0.990619
it	O	O:0.999977
on	O	O:0.999994
a	O	O:0.999999
full	O	O:0.999757
column	O	O:0.999948
,	O	O:0.999998
you	O	O:0.999981
can	O	O:0.999995
also	O	O:0.999997
do	O	O:0.999976
:	O	O:0.999959
#CODE	O	O:0.999719
	
Yes	O	O:0.999860
there	O	O:0.999630
is	O	O:0.999997
a	O	O:0.999975
concise	O	O:0.996913
and	O	O:0.999993
efficient	O	O:0.999850
way	O	O:0.999898
to	O	O:0.999965
solve	O	O:0.999980
this	O	O:0.999791
.	O	O:0.999952
	
You	O	O:0.999941
were	O	O:0.999890
on	O	O:0.999995
the	O	O:0.999996
right	O	O:0.999965
track	O	O:0.999573
with	O	O:0.999973
`	O	O:0.999989
df.dropna()	B-API	B-API:0.998635
`	O	O:0.999990
,	O	O:0.999988
just	O	O:0.999989
that	O	O:0.999985
you	O	O:0.999998
need	O	O:0.999994
to	O	O:0.999998
`	O	O:1.000000
unstack	O	B-API:0.994595
`	O	O:1.000000
your	O	O:0.999921
data	O	O:0.999929
before	O	O:0.999935
you	O	O:0.999960
apply	O	O:0.600979
it	O	O:0.999868
.	O	O:0.999771
	
#CODE	O	O:0.998453
	
The	O	O:0.999957
last	O	O:0.999107
expression	O	O:0.999786
would	O	O:0.999969
apply	O	O:0.863743
to	O	O:0.999998
your	O	O:0.999992
case	O	O:0.999951
if	O	O:0.999997
`	O	O:0.999997
res_tmp.fittedvalues	O	O:0.953845
`	O	O:0.999992
are	O	O:0.999961
the	O	O:0.999998
predicted	O	O:0.998671
or	O	O:0.999992
fitted	O	O:0.999957
values	O	O:0.999959
of	O	O:0.999995
your	O	O:0.999800
winsorized	O	O:0.999645
model	O	O:0.999752
,	O	O:0.999973
and	O	O:0.999976
`	O	O:0.999992
y_orig	O	O:0.877914
`	O	O:0.999971
is	O	O:0.999993
your	O	O:0.999975
original	O	O:0.999825
unchanged	O	O:0.999813
response	O	O:0.999776
variable	O	O:0.999502
.	O	O:0.999862
	
This	O	O:0.999859
definition	O	O:0.999960
of	O	O:0.999982
R	O	O:0.999684
squared	O	O:0.999825
applies	O	O:0.999535
if	O	O:0.999983
there	O	O:0.999531
is	O	O:0.999998
a	O	O:0.999992
constant	O	O:0.998963
in	O	O:0.999978
the	O	O:0.999977
model	O	O:0.998868
.	O	O:0.999859
	
By	O	O:0.999949
now	O	O:0.999869
,	O	O:0.999996
you'd	O	O:0.999989
have	O	O:0.999994
a	O	O:1.000000
sense	O	O:0.999905
of	O	O:0.999986
the	O	O:0.999911
pattern	O	O:0.999532
.	O	O:0.999856
	
Create	O	O:0.999920
a	O	O:0.999961
`	O	O:0.999940
distance	O	O:0.973351
`	O	O:0.999971
method	O	O:0.999576
.	O	O:0.999937
	
Then	O	O:0.999400
apply	O	O:0.875234
it	O	O:0.999984
pairwise	O	O:0.999264
to	O	O:0.999997
every	O	O:0.999997
column	O	O:0.999942
using	O	O:0.999872
#CODE	O	O:0.998428
	
Since	O	O:0.999358
`	O	O:0.999984
count_dic	O	O:0.942132
`	O	O:0.999982
is	O	O:0.999968
actually	O	O:0.999990
a	O	O:0.999981
`	O	O:0.999915
dict	O	O:0.993383
`	O	O:0.999997
,	O	O:0.999996
then	O	O:0.999976
you	O	O:0.999998
can	O	O:0.999997
apply	O	O:0.989344
`	O	O:0.999960
len	O	B-API:0.973035
`	O	O:0.999998
to	O	O:0.999807
get	O	O:0.999999
the	O	O:0.999997
number	O	O:0.999960
of	O	O:0.999993
keys	O	O:0.999833
,	O	O:0.999989
eg	O	O:0.999857
:	O	O:0.999919
#CODE	O	O:0.999830
	
Python	O	O:0.998647
DataFrame	B-API	O:0.994879
-	O	O:0.999988
apply	O	O:0.953332
different	O	O:0.999655
calculations	O	O:0.999308
due	O	O:0.999963
to	O	O:0.999995
a	O	O:1.000000
column's	O	O:0.999917
value	O	O:0.999897
	
I	O	O:0.999969
am	O	O:0.999997
setting	O	O:0.999436
the	O	O:0.999973
values	O	O:0.999543
to	O	O:0.999942
NaN	O	O:0.999946
and	O	O:0.999999
then	O	O:0.999897
apply	O	O:0.899800
the	O	O:0.997951
fillna	B-API	B-API:0.998588
method	O	O:0.999674
.	O	O:0.999853
	
I	O	O:0.999980
think	O	O:0.999939
the	O	O:0.999975
main	O	O:0.999226
problem	O	O:0.999924
here	O	O:0.999822
,	O	O:0.999976
is	O	O:0.999983
because	O	O:0.999416
I'm	O	O:0.999991
trying	O	O:0.999983
to	O	O:0.999991
apply	O	O:0.946611
the	O	O:0.999838
`	O	O:0.999802
pool.map	O	B-API:0.539748
`	O	O:0.999996
to	O	O:0.999661
`	O	O:1.000000
rpy2	O	O:0.989296
`	O	O:0.999913
function	O	O:0.996347
and	O	O:0.999996
not	O	O:0.999994
a	O	O:0.999965
Python	O	O:0.999655
predefined	O	O:0.996120
function	O	O:0.999689
.	O	O:0.999824
	
Probably	O	O:0.999912
there	O	O:0.999713
is	O	O:0.999996
some	O	O:0.999717
workaround	O	O:0.999931
solution	O	O:0.999572
for	O	O:0.999998
this	O	O:0.999929
without	O	O:0.999848
using	O	O:0.999824
the	O	O:0.999658
multiprocessing	O	O:0.993631
library	O	O:0.997193
,	O	O:0.999966
but	O	O:0.999975
I	O	O:0.999984
can't	O	O:0.999943
see	O	O:0.999954
any	O	O:0.999943
.	O	O:0.999814
	
maybe	O	O:0.999870
the	O	O:0.999917
.map()	B-API	B-API:0.999942
was	O	O:0.999872
trying	O	O:0.999940
to	O	O:0.999989
apply	O	O:0.953183
both	O	O:0.999406
the	O	O:0.999931
mask	O	O:0.550811
and	O	O:0.999994
the	O	O:0.999969
operation	O	O:0.984555
:	O	O:0.999942
#CODE	O	O:0.999861
	
You	O	O:0.999939
can	O	O:0.999911
use	O	O:0.999997
the	O	O:0.999962
apply	O	B-API:0.990256
function	O	O:0.993059
:	O	O:0.999836
#CODE	O	O:0.999876
	
And	O	O:0.999909
,	O	O:0.999998
then	O	O:0.999855
`	O	O:0.999999
apply	O	B-API:0.905670
`	O	O:0.999924
`	O	O:0.999913
split_cumsum	O	O:0.986886
`	O	O:0.999997
over	O	O:0.991171
`	O	O:0.999960
df.groupby	B-API	B-API:0.996546
(	O	O:0.999885
'	O	O:0.999860
Group	O	O:0.998920
')`	O	O:0.999845
#CODE	O	O:0.998706
	
Thanks	O	O:0.999114
John	O	O:0.999747
,	O	O:0.999988
I	O	O:0.999978
didn't	O	O:0.999937
quite	O	O:0.999338
appreciate	O	O:0.999979
what	O	O:0.999792
circumstances	O	O:0.999517
would	O	O:0.999993
make	O	O:0.999972
sense	O	O:0.999993
to	O	O:0.999993
create	O	O:0.999994
a	O	O:0.999955
function	O	O:0.999630
and	O	O:0.999991
apply	O	O:0.730570
it	O	O:0.999793
to	O	O:0.999973
a	O	O:0.999999
DataFrame	B-API	O:0.950855
,	O	O:0.999964
but	O	O:0.999998
this	O	O:0.999901
solution	O	O:0.999508
is	O	O:0.999997
definitely	O	O:0.999925
a	O	O:0.999995
cleaner	O	O:0.995808
approach	O	O:0.999808
.	O	O:0.999727
	
That	O	O:0.995013
is	O	O:0.999986
not	O	O:0.999953
so	O	O:0.999988
surprising	O	O:0.999118
but	O	O:0.999914
`	O	O:0.999981
apply	O	B-API:0.981105
`	O	O:0.999912
does	O	O:0.996786
not	O	O:0.999996
scale	O	O:0.999961
well	O	O:0.999933
,	O	O:0.999997
I	O	O:0.999995
just	O	O:0.999906
did	O	O:0.999965
timings	O	O:0.999934
on	O	O:0.999998
a	O	O:0.999995
600	O	O:0.999815
row	O	O:0.999950
df	O	O:0.999230
and	O	O:0.999996
the	O	O:0.999936
timings	O	O:0.994514
were	O	O:0.999919
6.24ms	O	O:0.996623
vs	O	O:0.999984
33.3ms	O	O:0.997653
comparing	O	O:0.999009
my	O	O:0.999877
method	O	O:0.999961
against	O	O:0.999963
yours	O	O:0.999882
,	O	O:0.999995
I	O	O:0.999993
expect	O	O:0.999958
the	O	O:0.999943
performance	O	O:0.999933
difference	O	O:0.999849
to	O	O:0.999987
increase	O	O:0.999993
significantly	O	O:0.999666
on	O	O:0.999987
much	O	O:0.999872
larger	O	O:0.999872
datasets	O	O:0.998932
	
@USER	O	O:0.998819
Absolutely	O	O:0.999623
,	O	O:0.999968
`	O	O:0.999988
apply	O	B-API:0.988061
`	O	O:0.999951
doesn't	O	O:0.998105
perform	O	O:0.999932
well	O	O:0.999879
on	O	O:0.999997
larger	O	O:0.999495
datasets	O	O:0.999687
.	O	O:0.999672
	
So	O	O:0.999967
,	O	O:0.999994
I	O	O:0.999992
mentioned	O	O:0.999756
*	O	O:0.999986
expensive	O	O:0.999648
for	O	O:0.999996
this	O	O:0.999943
smaller	O	O:0.999816
data	O	O:0.999712
.	O	O:0.999905
	
*	O	O:0.999857
=)	O	O:0.999746
	
Is	O	O:0.999980
there	O	O:0.999988
some	O	O:0.999992
sort	O	O:0.999741
of	O	O:0.999989
`	O	O:0.999980
apply	O	B-API:0.935420
`	O	O:0.999936
equivalent	O	O:0.955447
(	O	O:0.999999
like	O	O:0.999838
in	O	O:0.999966
`	O	O:0.999998
pandas	O	O:0.999040
`)	O	O:0.999999
that	O	O:0.999333
would	O	O:0.999992
make	O	O:0.999991
this	O	O:0.999995
more	O	O:0.999907
efficient	O	O:0.999686
?	O	O:0.999949
	
Pandas	O	O:0.998841
Apply	O	O:0.996058
(	O	O:0.999790
axis=1	O	O:0.998171
):	O	O:0.999967
produce	O	O:0.999859
more	O	O:0.999949
than	O	O:0.999981
one	O	O:0.999980
row	O	O:0.999890
	
I	O	O:0.999992
have	O	O:0.999995
a	O	O:0.999953
function	O	O:0.999846
I	O	O:0.999997
want	O	O:0.999986
to	O	O:0.999970
apply	O	O:0.997334
by	O	O:0.999898
row	O	O:0.999965
like	O	O:0.999559
so	O	O:0.999909
:	O	O:0.999969
#CODE	O	O:0.999868
	
As	O	O:0.999979
you	O	O:0.999952
can	O	O:0.999996
tell	O	O:0.999982
,	O	O:1.000000
this	O	O:0.999722
function	O	O:0.999813
is	O	O:0.999995
meant	O	O:0.999869
to	O	O:0.999998
take	O	O:0.999996
a	O	O:0.999999
list	O	O:0.999565
of	O	O:0.999994
items	O	O:0.999505
and	O	O:0.999998
create	O	O:0.999978
a	O	O:0.999990
row	O	O:0.999851
for	O	O:0.999982
each	O	O:0.999663
item	O	O:0.999955
that	O	O:0.999978
duplicates	O	O:0.999983
the	O	O:0.999999
rest	O	O:0.999932
of	O	O:0.999994
the	O	O:0.999999
remaining	O	O:0.999940
data	O	O:0.999589
.	O	O:0.999910
	
Unfortunately	O	O:0.999762
,	O	O:0.999996
my	O	O:0.999929
current	O	O:0.998063
method	O	O:0.999909
isn't	O	O:0.999967
the	O	O:0.999990
correct	O	O:0.999940
usage	O	O:0.999949
of	O	O:0.999992
the	O	O:0.999560
apply	O	B-API:0.910789
method	O	O:0.994337
:	O	O:0.999849
#CODE	O	O:0.999914
	
This	O	O:0.999663
question	O	O:0.999405
is	O	O:0.999994
similar	O	O:0.999358
to	O	O:0.999982
pandas	O	O:0.999943
:	O	O:0.999995
apply	O	O:0.541879
function	O	O:0.999664
to	O	O:0.999920
DataFrame	B-API	O:0.999973
that	O	O:0.999905
can	O	O:0.999995
return	O	O:0.999999
multiple	O	O:0.999986
rows	O	O:0.999871
that	O	O:0.999897
Wes	O	O:0.999982
McKinney	O	O:0.999711
has	O	O:0.999834
answered	O	O:0.999040
.	O	O:0.999780
	
Let	O	O:0.999721
,	O	O:0.999987
`	O	O:0.999995
df	O	O:0.996903
`	O	O:0.999995
the	O	O:0.999956
dataframe	B-API	O:0.999049
with	O	O:0.999957
two	O	O:0.999992
columns	O	O:0.999975
,	O	O:0.999986
apply	O	O:0.924671
conditional	O	O:0.996480
absolute	O	O:0.966613
minimum	O	O:0.999964
over	O	O:0.999973
rows	O	O:0.999879
using	O	O:0.999848
`	O	O:0.999967
axis=1	O	O:0.928057
`	O	O:0.999955
	
OK	O	O:0.999896
,	O	O:0.999935
after	O	O:0.999927
reading	O	O:0.994936
and	O	O:0.999948
understanding	O	O:0.999957
your	O	O:0.997226
question	O	O:0.990547
and	O	O:0.999989
not	O	O:0.999984
being	O	O:0.999866
able	O	O:0.999918
to	O	O:0.999995
find	O	O:0.999997
a	O	O:0.999999
vectorised	O	O:0.999415
approach	O	O:0.999948
,	O	O:0.999992
we	O	O:0.999990
can	O	O:0.999989
define	O	O:0.999993
a	O	O:0.999997
custom	O	O:0.947684
function	O	O:0.999637
and	O	O:0.999980
call	O	O:0.997907
`	O	O:0.999958
apply	O	B-API:0.998958
`	O	O:0.999833
and	O	O:0.999932
pass	O	O:0.999902
each	O	O:0.997496
row	O	O:0.999796
.	O	O:0.999821
	
`	O	O:0.999943
df.values	B-API	B-API:0.994476
`	O	O:0.999992
returns	O	O:0.999384
a	O	O:0.999995
NumPy	O	O:0.998341
array	O	O:0.999824
containing	O	O:0.999515
the	O	O:0.999990
values	O	O:0.998994
in	O	O:0.999959
`	O	O:0.999998
df	O	O:0.997357
`	O	O:0.999982
.	O	O:0.999290
	
You	O	O:0.999891
could	O	O:0.999985
then	O	O:0.999983
apply	O	O:0.909937
`	O	O:0.999930
np.std	B-API	B-API:0.997295
`	O	O:0.999990
to	O	O:0.999981
that	O	O:0.999994
array	O	O:0.999855
:	O	O:0.999974
#CODE	O	O:0.999812
	
I	O	O:0.999984
believe	O	O:0.999963
I	O	O:0.999952
can	O	O:0.999965
achieve	O	O:0.999994
this	O	O:0.999989
by	O	O:0.999995
using	O	O:0.999972
apply	O	B-API:0.922675
on	O	O:0.999594
the	O	O:0.999986
first	O	O:0.999944
to	O	O:0.999982
filter	O	O:0.999839
the	O	O:0.999985
second	O	O:0.999905
based	O	O:0.999662
on	O	O:0.999988
these	O	O:0.999752
criterion	O	O:0.999936
and	O	O:0.999999
then	O	O:0.999939
combining	O	O:0.999966
the	O	O:0.999926
results	O	O:0.999592
but	O	O:0.999956
apply	O	O:0.758711
has	O	O:0.999538
in	O	O:0.999871
practice	O	O:0.999889
been	O	O:0.999842
a	O	O:0.999998
horribly	O	O:0.999475
slow	O	O:0.999760
way	O	O:0.999980
to	O	O:0.999990
go	O	O:0.999999
about	O	O:0.999936
things	O	O:0.998906
.	O	O:0.999777
	
Set	O	O:0.999610
column	O	O:0.999903
name	O	O:0.999964
for	O	O:0.999997
apply	O	B-API:0.517687
result	O	O:0.999253
over	O	O:0.996522
groupby	B-API	B-API:0.988375
	
What	O	O:0.999649
I'd	O	O:0.999996
like	O	O:0.999976
to	O	O:0.999995
do	O	O:0.999991
is	O	O:0.999997
assign	O	O:0.999459
a	O	O:0.999998
name	O	O:0.999743
to	O	O:0.999998
the	O	O:1.000000
result	O	O:0.999960
of	O	O:0.999988
`	O	O:0.999987
apply	O	B-API:0.968388
`	O	O:0.999684
(	O	O:0.999702
or	O	O:0.999982
`	O	O:0.999989
lambda	O	O:0.998505
`)	O	O:0.999973
.	O	O:0.999313
	
Is	O	O:0.999984
there	O	O:0.999971
anyway	O	O:0.999980
to	O	O:0.999989
do	O	O:0.999999
this	O	O:0.999948
without	O	O:0.999912
moving	O	O:0.997765
`	O	O:0.999952
lambda	O	O:0.995496
`	O	O:0.999995
to	O	O:0.999969
a	O	O:1.000000
named	O	O:0.998452
function	O	O:0.999954
or	O	O:0.999994
renaming	O	O:0.999699
the	O	O:0.999994
column	O	O:0.999690
after	O	O:0.999956
running	O	O:0.999503
the	O	O:0.999950
last	O	O:0.998551
line	O	O:0.999657
?	O	O:0.999944
	
Yes	O	O:0.999470
,	O	O:0.999993
that	O	O:0.999468
was	O	O:0.999990
what	O	O:0.999947
I	O	O:0.999982
was	O	O:0.999992
planning	O	O:0.998682
to	O	O:0.999969
do	O	O:0.999987
.	O	O:0.999936
	
However	O	O:0.999857
,	O	O:0.999987
I	O	O:0.999997
know	O	O:0.999774
realize	O	O:0.998429
it	O	O:0.999625
is	O	O:0.999974
not	O	O:0.999981
the	O	O:0.999995
correct	O	O:0.999757
way	O	O:0.999978
to	O	O:0.999990
do	O	O:0.999998
it	O	O:0.999992
since	O	O:0.999978
they	O	O:0.999825
are	O	O:0.999996
not	O	O:0.999947
independent	O	O:0.999116
.	O	O:0.999874
	
Your	O	O:0.999448
answer	O	O:0.999937
give	O	O:0.999788
me	O	O:0.999990
a	O	O:0.999986
better	O	O:0.999371
understanding	O	O:0.999679
how	O	O:0.999947
to	O	O:0.999931
use	O	O:0.999998
pandas	O	O:0.996710
groupby	B-API	B-API:0.985550
and	O	O:0.999941
apply	O	B-API:0.919687
.	O	O:0.995555
	
Thank	O	O:0.999255
you	O	O:0.999969
very	O	O:0.999915
much	O	O:0.999569
!	O	O:0.999916
	
What	O	O:0.999787
you	O	O:0.999991
want	O	O:0.999985
to	O	O:0.999994
do	O	O:0.999995
is	O	O:0.999980
`	O	O:0.999950
groupby	B-API	B-API:0.997111
`	O	O:0.999990
on	O	O:0.998876
the	O	O:0.999992
index	O	O:0.999908
levels	O	O:0.999697
and	O	O:0.999998
apply	O	O:0.942533
a	O	O:0.998739
function	O	O:0.999330
that	O	O:0.999831
calls	O	O:0.999851
`	O	O:0.999996
mannwhitneyu	O	O:0.612279
`	O	O:0.999992
,	O	O:0.999981
passing	O	O:0.999728
the	O	O:0.999961
two	O	O:0.999986
columns	O	O:0.999778
`	O	O:0.999996
course1	O	O:0.987811
`	O	O:0.999991
and	O	O:0.999398
`	O	O:0.999996
course2	O	O:0.859539
`	O	O:0.999982
.	O	O:0.999220
	
Suppose	O	O:0.999897
this	O	O:0.999389
is	O	O:1.000000
your	O	O:0.999883
data	O	O:0.999127
:	O	O:0.999981
#CODE	O	O:0.999885
	
Yeah	O	O:0.997085
.	O	O:0.999967
this	O	O:0.999591
works	O	O:0.999811
.	O	O:0.999913
	
I	O	O:0.999944
wrongly	O	O:0.999936
assumed	O	O:0.996770
sum()	B-API	B-API:0.877887
would	O	O:0.999822
not	O	O:0.999993
apply	O	O:0.943551
to	O	O:0.999929
lists	O	O:0.999585
.	O	O:0.999875
	
Thanks	O	O:0.999815
a	O	O:0.999969
lot	O	O:0.998634
	
apply	O	B-API:0.886161
if	O	O:0.999343
statement	O	O:0.999833
within	O	O:0.999647
sort.head()	O	O:0.971274
	
Am	O	O:0.999751
I	O	O:0.999987
not	O	O:0.999995
allowed	O	O:0.999955
to	O	O:0.999991
use	O	O:0.999999
a	O	O:0.999980
series	O	O:0.999609
in	O	O:0.999997
a	O	O:0.999994
pd.apply	O	B-API:0.781488
function	O	O:0.999694
?	O	O:0.999894
	
If	O	O:0.999969
so	O	O:0.999984
how	O	O:0.999987
can	O	O:0.999983
I	O	O:1.000000
apply	O	O:0.989039
a	O	O:0.999570
function	O	O:0.999359
row	O	O:0.999986
by	O	O:0.999967
row	O	O:0.999940
and	O	O:0.999973
assign	O	O:0.999741
the	O	O:0.999916
output	O	O:0.999810
to	O	O:0.999998
a	O	O:1.000000
new	O	O:0.999827
column	O	O:0.999823
?	O	O:0.999969
	
You	O	O:0.999857
don't	O	O:0.999956
need	O	O:0.999971
to	O	O:0.999996
use	O	O:0.999999
apply	O	B-API:0.521545
when	O	O:0.997320
calling	O	O:0.999392
the	O	O:0.999865
function	O	O:0.998853
.	O	O:0.999810
	
Just	O	O:0.998437
use	O	O:0.999298
:	O	O:0.999737
#CODE	O	O:0.999507
	
I	O	O:0.999954
reworked	O	O:0.999926
the	O	O:0.999921
formulae	O	O:0.999611
to	O	O:0.999990
apply	O	O:0.978406
to	O	O:0.999831
series	O	O:0.999860
:	O	O:0.999976
#CODE	O	O:0.999912
	
Because	O	O:0.999866
the	O	O:0.999975
parameters	O	O:0.997714
lon2	O	O:0.998459
and	O	O:0.999987
lat2	O	O:0.998483
are	O	O:0.999729
Pandas	O	O:0.999694
Series	O	O:0.999304
,	O	O:0.999990
dlon	O	O:0.997091
and	O	O:0.999997
dlat	O	O:0.998217
will	O	O:0.999851
both	O	O:0.999935
be	O	O:0.999956
Series	O	O:0.999960
objects	O	O:0.999653
as	O	O:0.999991
well	O	O:0.999186
.	O	O:0.999943
	
You	O	O:0.999978
then	O	O:0.999943
need	O	O:0.999997
to	O	O:0.999998
use	O	O:0.999999
apply	O	B-API:0.775597
on	O	O:0.999834
the	O	O:0.999978
series	O	O:0.999976
to	O	O:0.999991
apply	O	O:0.989838
the	O	O:0.999785
function	O	O:0.999754
to	O	O:0.999996
each	O	O:0.999995
element	O	O:0.999849
in	O	O:0.999973
the	O	O:0.999982
list	O	O:0.995699
.	O	O:0.999865
	
Okay	O	O:0.999680
,	O	O:0.999988
I	O	O:0.999998
just	O	O:0.999932
restarted	O	O:0.999784
the	O	O:0.999976
kernel	O	O:0.999139
in	O	O:0.999982
my	O	O:0.999940
ipython	O	O:0.999349
notebook	O	O:0.999928
and	O	O:0.999990
now	O	O:0.999976
with	O	O:0.999950
the	O	O:0.999984
above	O	O:0.999874
i	O	O:0.999943
get	O	O:0.999995
this	O	O:0.999965
error	O	O:0.999925
-	O	O:0.999962
`	O	O:0.999887
AttributeError	O	O:0.998159
:	O	O:0.999860
'	O	O:0.999960
numpy.float64	O	O:0.987832
'	O	O:0.999815
object	O	O:0.999830
has	O	O:0.999952
no	O	O:0.999974
attribute	O	O:0.999885
'	O	O:0.999991
apply	O	O:0.793216
'`	O	O:0.999722
for	O	O:0.999940
the	O	O:0.999946
a=	O	O:0.999309
code	O	O:0.999894
that	O	O:0.999943
you	O	O:0.999997
gave	O	O:0.999963
above	O	O:0.999865
	
Do	O	O:0.999950
you	O	O:0.999992
just	O	O:0.999985
want	O	O:0.999988
to	O	O:0.999968
print	O	O:0.999997
it	O	O:0.999989
or	O	O:0.999996
actually	O	O:0.999905
DO	O	O:0.999979
something	O	O:0.999743
with	O	O:0.999944
it	O	O:0.999989
or	O	O:0.999996
to	O	O:0.999987
it	O	O:0.999999
?	O	O:0.999978
	
E.g.	O	O:0.996205
	
if	O	O:0.999951
you	O	O:0.999991
want	O	O:0.999975
to	O	O:0.999997
apply	O	O:0.997055
a	O	O:0.999893
function	O	O:0.999229
to	O	O:0.999997
every	O	O:0.999990
element	O	O:0.999902
,	O	O:0.999990
see	O	O:0.999962
```	O	O:0.999870
applymap()	B-API	B-API:0.998987
```	O	O:0.999734
	
When	O	O:0.999643
I	O	O:0.999997
apply	O	O:0.795417
`	O	O:0.998337
plt.xcorr	B-API	B-API:0.999139
(	O	O:0.999991
df.Val1	O	O:0.995222
,	O	O:0.999987
df.Val2	O	O:0.997960
)`	O	O:0.999643
	
Note	O	O:0.998301
:	O	O:0.999967
Before	O	O:0.999985
you	O	O:0.999993
apply	O	O:0.862698
`	O	O:0.999961
factorize()	B-API	B-API:0.998469
`	O	O:0.999995
you	O	O:0.999970
need	O	O:0.999992
to	O	O:0.999994
`	O	O:1.000000
fill	O	O:0.942752
`	O	O:1.000000
your	O	O:0.998111
`	O	O:0.999993
NaNs	O	O:0.996676
`	O	O:0.999969
	
And	O	O:0.999918
I	O	O:0.999998
want	O	O:0.999993
to	O	O:0.999943
calculate	O	O:0.999988
the	O	O:0.999996
following	O	O:0.999697
information	O	O:0.999651
"	O	O:0.999951
How	O	O:0.999985
many	O	O:0.999904
days	O	O:0.999387
was	O	O:0.999991
each	O	O:0.999950
account	O	O:0.999332
active	O	O:0.999719
?	O	O:0.999923
	
"	O	O:0.999965
,	O	O:0.999962
I	O	O:0.999985
understand	O	O:0.999971
that	O	O:0.999616
I	O	O:0.999997
could	O	O:0.999997
simply	O	O:0.999977
do	O	O:0.999999
a	O	O:0.999999
count	O	O:0.997755
to	O	O:0.999993
get	O	O:0.999998
this	O	O:0.999933
information	O	O:0.999914
,	O	O:0.999995
but	O	O:0.999978
I	O	O:0.999997
want	O	O:0.999990
to	O	O:0.999948
apply	O	O:0.976429
the	O	O:0.999951
following	O	O:0.998522
restriction	O	O:0.999768
,	O	O:0.999982
"	O	O:0.999962
If	O	O:0.999981
there	O	O:0.999962
are	O	O:0.999995
n	O	O:0.999985
days	O	O:0.999676
between	O	O:0.999923
activity	O	O:0.999982
dates	O	O:0.999056
,	O	O:0.999999
only	O	O:0.999990
count	O	O:0.999893
the	O	O:0.999997
days	O	O:0.998977
before	O	O:0.999945
that	O	O:0.999906
gap	O	O:0.999926
"	O	O:0.999973
.	O	O:0.999749
	
It	O	O:0.999912
seems	O	O:0.999896
more	O	O:0.999945
logical	O	O:0.999160
to	O	O:0.999984
apply	O	O:0.966022
the	O	O:0.999948
filter	O	O:0.983897
to	O	O:0.999990
the	O	O:1.000000
time	O	O:0.999986
column	O	O:0.999950
as	O	O:0.999998
it	O	O:0.999821
is	O	O:0.999990
being	O	O:0.999827
read	O	O:0.997506
in	O	O:0.999993
then	O	O:0.999897
to	O	O:1.000000
operate	O	O:0.999993
on	O	O:0.999997
it	O	O:0.999986
later	O	O:0.999904
.	O	O:0.999912
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999920
to	O	O:0.999976
do	O	O:1.000000
this	O	O:0.999989
by	O	O:0.999987
telling	O	O:0.999878
the	O	O:0.999983
read	O	O:0.966911
function	O	O:0.999982
what	O	O:0.999657
function	O	O:0.999970
to	O	O:0.999996
call	O	O:0.999966
as	O	O:0.999992
it	O	O:0.999783
reads	O	O:0.999888
the	O	O:0.999987
column	O	O:0.999783
,	O	O:0.999992
before	O	O:0.999948
storing	O	O:0.999377
the	O	O:0.999859
object	O	O:0.999599
in	O	O:0.999948
memory	O	O:0.999780
?	O	O:0.999966
	
Below	O	O:0.998775
,	O	O:0.999978
john-galt	O	O:0.999447
gives	O	O:0.999866
an	O	O:0.999993
extremely	O	O:0.999927
helpful	O	O:0.998956
answer	O	O:0.999604
.	O	O:0.999636
	
However	O	O:0.999395
,	O	O:0.999980
I've	O	O:0.999903
found	O	O:0.999819
one	O	O:0.999989
case	O	O:0.999954
where	O	O:0.999866
it's	O	O:0.999824
not	O	O:0.999982
immediately	O	O:0.999940
obviously	O	O:0.999951
how	O	O:0.999977
to	O	O:0.999990
apply	O	O:0.993214
his	O	O:0.998544
solution	O	O:0.998400
:	O	O:0.999997
using	O	O:0.999985
a	O	O:0.999934
custom	O	O:0.989837
grouping	O	O:0.997339
function	O	O:0.999122
.	O	O:0.999780
	
But	O	O:0.999825
unlike	O	O:0.999791
most	O	O:0.999129
Pandas	O	O:0.999892
Cython	O	O:0.999907
tutorials	O	O:0.999876
or	O	O:0.999996
examples	O	O:0.999686
I	O	O:0.999975
am	O	O:0.999998
not	O	O:0.999982
apply	O	O:0.928902
functions	O	O:0.999853
so	O	O:0.999965
to	O	O:0.999996
speak	O	O:0.999960
,	O	O:0.999997
more	O	O:0.999985
manipulating	O	O:0.999964
data	O	O:0.999974
using	O	O:0.999967
slices	O	O:0.998554
,	O	O:0.999973
sums	O	O:0.999368
and	O	O:0.999954
division	O	O:0.999692
(	O	O:0.999977
etc	O	O:0.999878
)	O	O:0.999978
.	O	O:0.999775
	
@USER	O	O:0.998997
in	O	O:0.999973
apply	O	B-API:0.613230
/	O	O:0.999679
agg	O	B-API:0.967108
the	O	O:0.999573
function	O	O:0.999783
needs	O	O:0.999962
to	O	O:0.999999
take	O	O:0.999992
the	O	O:0.999992
subDataFrame	O	O:0.999334
/	O	O:0.999986
each	O	O:0.999713
group	O	O:0.998553
.	O	O:0.999969
tbh	O	O:0.999867
I'm	O	O:0.999995
a	O	O:0.999994
little	O	O:0.999454
confused	O	O:0.999454
at	O	O:0.999992
what	O	O:0.999394
you're	O	O:0.999975
trying	O	O:0.999949
to	O	O:0.999983
do	O	O:0.999983
:	O	O:0.999988
s	O	O:0.999740
	
You	O	O:0.999882
could	O	O:0.999944
all	O	O:0.999994
`	O	O:0.999964
df.filter	B-API	B-API:0.998869
(	O	O:0.999958
regex=	O	O:0.999224
'	O	O:0.999897
HW	O	O:0.999973
')`	O	O:0.999941
to	O	O:0.999979
return	O	O:0.999979
column	O	O:0.999926
names	O	O:0.999982
like	O	O:0.999777
'	O	O:0.999983
HW	O	O:0.999909
'	O	O:0.999926
and	O	O:0.999999
then	O	O:0.999936
apply	O	O:0.914213
sum	O	O:0.999674
row-wise	O	O:0.998520
via	O	O:0.999766
`	O	O:0.999949
sum	O	O:0.979113
(	O	O:0.999995
axis-1	O	O:0.999500
)`	O	O:0.999373
#CODE	O	O:0.999024
	
I	O	O:0.999993
have	O	O:0.999990
a	O	O:0.999986
big	O	O:0.997366
`	O	O:0.999962
DataFrame	B-API	O:0.920058
`	O	O:0.999984
in	O	O:0.999977
pandas	O	O:0.999935
with	O	O:0.999990
three	O	O:0.999720
columns	O	O:0.999683
:	O	O:0.999981
`'	O	O:0.999987
col1	O	O:0.999403
'`	O	O:0.999867
is	O	O:0.999923
string	O	O:0.999258
,	O	O:0.999964
`'	O	O:0.999938
col2	O	O:0.996417
'`	O	O:0.999926
and	O	O:0.999920
`'	O	O:0.999956
col3	O	O:0.993576
'`	O	O:0.999962
are	O	O:0.999193
`	O	O:0.999981
numpy.int64	O	O:0.755436
`	O	O:0.999971
.	O	O:0.999346
	
I	O	O:0.999989
need	O	O:0.999982
to	O	O:0.999985
do	O	O:1.000000
a	O	O:0.999989
`	O	O:0.999861
groupby	B-API	B-API:0.999024
`	O	O:0.999989
,	O	O:0.999983
then	O	O:0.999976
apply	O	O:0.968327
a	O	O:0.999979
custom	O	O:0.985278
aggregation	O	O:0.998885
function	O	O:0.999941
using	O	O:0.999572
`	O	O:0.999925
apply	O	B-API:0.995805
`	O	O:0.999956
,	O	O:0.999936
as	O	O:0.999989
follows	O	O:0.979836
:	O	O:0.999962
#CODE	O	O:0.999795
	
If	O	O:0.999975
you	O	O:0.999984
want	O	O:0.999992
the	O	O:0.999997
values	O	O:0.999946
themselves	O	O:0.999791
,	O	O:0.999999
you	O	O:0.999986
can	O	O:0.999966
`	O	O:1.000000
groupby	B-API	B-API:0.996134
`	O	O:0.999968
'	O	O:0.999567
Column1	O	O:0.999481
'	O	O:0.999931
and	O	O:0.999996
then	O	O:0.999906
call	O	O:0.999197
`	O	O:0.999995
apply	O	B-API:0.998309
`	O	O:0.999917
and	O	O:0.999933
pass	O	O:0.999574
the	O	O:0.999105
`	O	O:0.999963
list	O	B-API:0.806324
`	O	O:0.999989
method	O	O:0.999913
to	O	O:0.999998
apply	O	O:0.976417
to	O	O:0.999953
each	O	O:0.999955
group	O	O:0.997887
.	O	O:0.999932
	
You	O	O:0.999879
could	O	O:0.999750
`	O	O:0.999996
groupby	B-API	B-API:0.996809
`	O	O:0.999994
on	O	O:0.998373
`	O	O:0.999993
Column1	O	O:0.993854
`	O	O:0.999984
and	O	O:0.999991
then	O	O:0.999991
take	O	O:0.999917
`	O	O:0.999996
Column3	O	O:0.989326
`	O	O:0.999994
to	O	O:0.999659
`	O	O:0.999999
apply	O	B-API:0.996007
(	O	O:0.999945
list	O	O:0.997555
)`	O	O:0.999593
and	O	O:0.999982
call	O	O:0.998590
`	O	O:0.999913
to_dict	B-API	B-API:0.999944
`	O	O:0.999980
?	O	O:0.999695
	
#CODE	O	O:0.998453
	
@USER	O	O:0.999844
this	O	O:0.998999
is	O	O:0.999981
incredible	O	O:0.999702
..	O	O:0.999954
clever	O	O:0.999816
use	O	O:0.999981
of	O	O:0.999895
apply	O	B-API:0.948742
!	O	O:0.999512
	
what	O	O:0.999920
a	O	O:0.999994
great	O	O:0.998635
principle	O	O:0.999958
..	O	O:0.999920
can	O	O:0.999951
be	O	O:1.000000
applied	O	O:0.999986
as	O	O:0.999991
a	O	O:0.999900
function	O	O:0.999413
for	O	O:0.999966
any	O	O:0.999973
kind	O	O:0.999417
of	O	O:0.999959
dict	O	O:0.999814
look	O	O:0.999776
up	O	O:0.999834
.	O	O:0.999830
	
Same	O	O:0.999813
code	O	O:0.999245
should	O	O:0.999990
also	O	O:0.999991
apply	O	O:0.962277
to	O	O:0.999945
a	O	O:0.999999
binary	O	O:0.997018
confusion	O	O:0.999842
matrix	O	O:0.999901
like	O	O:0.998372
:	O	O:0.999977
#CODE	O	O:0.999814
	
Don't	O	O:0.999482
use	O	O:0.999886
`	O	O:0.999953
apply	O	B-API:0.984744
`	O	O:0.999986
you	O	O:0.999666
can	O	O:0.999993
achieve	O	O:0.999996
the	O	O:0.999999
same	O	O:0.999901
result	O	O:0.999980
much	O	O:0.999902
faster	O	O:0.999977
using	O	O:0.999693
3	O	O:0.995517
`	O	O:0.999863
.loc	B-API	B-API:0.998284
`	O	O:0.999926
calls	O	O:0.981624
:	O	O:0.999983
#CODE	O	O:0.997674
	
df	O	O:0.998349
[	O	O:0.999884
'	O	O:0.999984
column_of_ints	O	O:0.998514
']	O	O:0.999902
is	O	O:0.999932
a	O	O:0.999832
Series	O	O:0.999109
not	O	O:0.999974
a	O	O:0.999997
DataFrame	B-API	O:0.983010
,	O	O:0.999997
there	O	O:0.999823
is	O	O:0.999990
no	O	O:0.999947
`	O	O:0.999991
axis=1	O	O:0.994511
`	O	O:0.999987
for	O	O:0.999370
`	O	O:0.999982
apply	O	B-API:0.999333
`	O	O:0.999883
method	O	O:0.999247
for	O	O:0.999996
a	O	O:0.999982
Series	O	O:0.997551
,	O	O:0.999996
you	O	O:0.999990
can	O	O:0.999990
force	O	O:0.999999
this	O	O:0.999993
to	O	O:0.999996
a	O	O:1.000000
DataFrame	B-API	O:0.997555
using	O	O:0.999889
double	O	O:0.980354
square	O	O:0.995610
brackets	O	O:0.994308
:	O	O:0.999926
#CODE	O	O:0.999823
	
@USER	O	O:0.997965
No	O	O:0.999969
it	O	O:0.999992
gives	O	O:0.999906
me	O	O:0.999983
the	O	O:0.999987
same	O	O:0.999818
warning	O	O:0.999971
even	O	O:0.999907
on	O	O:0.999999
using	O	O:0.999952
apply	O	B-API:0.622694
instead	O	O:0.999643
of	O	O:0.999767
map	O	B-API:0.961540
	
One	O	O:0.999900
way	O	O:0.999938
to	O	O:0.999970
do	O	O:1.000000
this	O	O:0.999973
apply	O	O:0.559116
`	O	O:0.999951
clip_upper()	B-API	B-API:0.995488
`	O	O:0.999997
on	O	O:0.999890
90	O	O:0.999986
percentile	O	O:0.999946
value	O	O:0.999686
`	O	O:0.999959
np.percentile	B-API	B-API:0.997718
(	O	O:0.999986
x	O	O:0.999902
,	O	O:0.999978
90	O	O:0.999979
)`	O	O:0.999799
for	O	O:0.999981
each	O	O:0.999382
column	O	O:0.999346
#CODE	O	O:0.999835
	
I	O	O:0.999865
had	O	O:0.999865
imagined	O	O:0.998018
@USER	O	O:0.999834
elegant	O	O:0.999216
solution	O	O:0.999738
would	O	O:0.999911
faster	O	O:0.999953
than	O	O:0.999892
`	O	O:0.999986
apply	O	B-API:0.979095
`	O	O:0.999866
.	O	O:0.998100
	
But	O	O:0.999781
,	O	O:0.999963
	
Thanks	O	O:0.999004
for	O	O:0.999987
the	O	O:0.999925
timings	O	O:0.995039
!	O	O:0.999865
	
I	O	O:0.999915
had	O	O:0.999932
thought	O	O:0.998315
the	O	O:0.999987
same	O	O:0.999549
thing	O	O:0.999790
but	O	O:0.999963
,	O	O:0.999990
having	O	O:0.999915
just	O	O:0.999476
checked	O	O:0.999950
timings	O	O:0.999889
on	O	O:0.999984
my	O	O:0.999969
machine	O	O:0.999893
,	O	O:0.999989
it	O	O:0.999986
appears	O	O:0.999937
`	O	O:0.999993
apply	O	B-API:0.975356
`	O	O:0.999964
can	O	O:0.999540
be	O	O:1.000000
surprising	O	O:0.999901
sometimes	O	O:0.997345
:-)	O	O:0.999425
	
Not	O	O:0.999967
sure	O	O:0.999848
why	O	O:0.999913
,	O	O:0.999981
but	O	O:0.999988
you	O	O:0.999915
would	O	O:0.999988
notice	O	O:0.999998
that	O	O:0.999981
in	O	O:0.999998
the	O	O:0.999993
benchmarks	O	O:0.999554
posted	O	O:0.998760
,	O	O:0.999983
this	O	O:0.999868
method	O	O:0.999975
seems	O	O:0.999906
slower	O	O:0.999947
than	O	O:0.998218
apply	O	B-API:0.801307
method	O	O:0.999141
.	O	O:0.999495
	
+1	O	O:0.999831
for	O	O:0.999943
cleaner	O	O:0.998320
single-liner	O	O:0.998996
.	O	O:0.999768
	
Note	O	O:0.999919
that	O	O:0.999975
these	O	O:0.999998
days	O	O:0.999971
you	O	O:0.999991
can	O	O:0.999987
use	O	O:0.999997
`	O	O:0.999981
expand=True	O	O:0.991346
`	O	O:0.999997
instead	O	O:0.999922
of	O	O:0.999995
`	O	O:0.999954
apply	O	B-API:0.963005
(	O	O:0.999883
pd.Series	B-API	B-API:0.995235
)`	O	O:0.997113
:	O	O:0.999841
#CODE	O	O:0.999829
	
You	O	O:0.999822
can't	O	O:0.999968
pass	O	O:0.999719
a	O	O:0.999997
Series	O	O:0.999801
as	O	O:0.999997
a	O	O:0.999990
param	O	O:0.999266
to	O	O:0.999997
a	O	O:0.999997
function	O	O:0.999409
unless	O	O:0.999698
it	O	O:0.999976
understands	O	O:0.999961
what	O	O:0.999952
a	O	O:0.999996
pandas	O	O:0.999886
Series	O	O:0.999898
or	O	O:0.999987
the	O	O:0.999970
array	O	O:0.999971
type	O	O:0.998220
is	O	O:0.999996
so	O	O:0.999989
you	O	O:0.999982
can	O	O:0.999981
instead	O	O:0.999999
call	O	O:0.999493
`	O	O:0.999996
apply	O	B-API:0.997844
`	O	O:0.999902
and	O	O:0.999932
pass	O	O:0.999766
the	O	O:0.999796
function	O	O:0.999916
as	O	O:0.999988
the	O	O:0.999984
param	O	O:0.998700
which	O	O:0.999927
will	O	O:0.999934
call	O	O:0.999925
that	O	O:0.999876
function	O	O:0.999801
for	O	O:0.999998
every	O	O:0.999905
value	O	O:0.999744
in	O	O:0.999957
the	O	O:0.999990
Series	O	O:0.999875
as	O	O:0.999994
shown	O	O:0.999442
above	O	O:0.999808
.	O	O:0.999843
	
You	O	O:0.999843
could	O	O:0.999925
call	O	O:0.999485
`	O	O:0.999995
apply	O	B-API:0.998564
`	O	O:0.999924
and	O	O:0.999721
use	O	O:0.999952
`	O	O:0.999233
datetime.strptime	O	B-API:0.605869
`	O	O:0.999843
:	O	O:0.999702
#CODE	O	O:0.999908
	
A	O	O:0.999850
function	O	O:0.999904
can	O	O:0.999962
be	O	O:1.000000
applied	O	O:0.999979
to	O	O:0.999988
a	O	O:0.999999
`	O	O:0.999936
groupby	B-API	B-API:0.997723
`	O	O:0.999993
with	O	O:0.999327
the	O	O:0.999988
`	O	O:0.999978
apply	O	B-API:0.981110
`	O	O:0.999719
function	O	O:0.997747
.	O	O:0.999923
	
The	O	O:0.999936
passed	O	O:0.997289
function	O	O:0.999762
in	O	O:0.999996
this	O	O:0.999974
case	O	O:0.999963
`	O	O:0.999992
linregress	O	O:0.651184
`	O	O:0.999981
.	O	O:0.999487
	
Please	O	O:0.999636
see	O	O:0.999672
below	O	O:0.997669
:	O	O:0.999971
#CODE	O	O:0.999734
	
How	O	O:0.999933
do	O	O:0.999966
I	O	O:0.999998
iterate	O	O:0.999921
over	O	O:0.999814
each	O	O:0.999266
row	O	O:0.999871
and	O	O:0.999996
column	O	O:0.999930
in	O	O:0.999881
`	O	O:0.999987
rectangle	O	O:0.999209
`	O	O:0.999997
to	O	O:0.999960
run	O	O:0.999996
my	O	O:0.999905
function	O	O:0.999764
`	O	O:0.999992
MakeBoolDictOfSearchTermsAndProducts()	O	O:0.959454
`	O	O:0.999990
on	O	O:0.999898
it	O	O:0.999989
and	O	O:0.999999
fill	O	O:0.995216
in	O	O:0.999985
the	O	O:0.999987
correct	O	O:0.999859
element	O	O:0.999938
with	O	O:0.999994
the	O	O:0.999982
result	O	O:0.999820
?	O	O:0.999957
	
Should	O	O:0.999851
I	O	O:0.999990
use	O	O:0.999973
apply	O	B-API:0.920108
?	O	O:0.999814
or	O	O:0.999755
map	O	B-API:0.637470
?	O	O:0.999993
or	O	O:0.999994
perhaps	O	O:0.999913
apply_map	O	O:0.999180
?	O	O:0.999930
	
You	O	O:0.999904
can	O	O:0.999847
use	O	O:0.999973
groupby	B-API	B-API:0.996748
and	O	O:0.999811
apply	O	B-API:0.979218
:	O	O:0.998048
#CODE	O	O:0.999039
	
You	O	O:0.999854
could	O	O:0.999851
`	O	O:0.999997
apply	O	B-API:0.936372
`	O	O:0.999925
on	O	O:0.999703
dataframe	B-API	O:0.999309
and	O	O:0.999996
get	O	O:0.999968
`	O	O:0.999819
argmax()	B-API	B-API:0.991655
`	O	O:0.999994
of	O	O:0.999988
each	O	O:0.999803
row	O	O:0.999976
via	O	O:0.999786
`	O	O:0.999974
axis=1	O	O:0.971424
`	O	O:0.999978
#CODE	O	O:0.997692
	
Here's	O	O:0.999860
a	O	O:0.999991
benchmark	O	O:0.998420
to	O	O:0.999991
compare	O	O:0.999975
how	O	O:0.999988
slow	O	O:0.999638
`	O	O:0.999997
apply	O	B-API:0.997627
`	O	O:0.999891
method	O	O:0.997935
is	O	O:0.999994
to	O	O:0.999973
`	O	O:0.999997
idxmax()	B-API	B-API:0.999817
`	O	O:0.999987
for	O	O:0.999674
`	O	O:0.999922
len	O	B-API:0.996127
(	O	O:0.999996
df	O	O:0.999149
)	O	O:0.999936
~	O	O:0.997778
20K	O	O:0.998371
`	O	O:0.999918
#CODE	O	O:0.998088
	
Pandas	O	O:0.999606
DataFrame	B-API	O:0.995949
apply	O	B-API:0.816815
function	O	O:0.999831
doubling	O	O:0.999740
size	O	O:0.999506
of	O	O:0.999952
DataFrame	B-API	O:0.988797
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999803
to	O	O:0.999992
create	O	O:0.999970
this	O	O:0.999975
boolean	O	O:0.999951
mask	O	O:0.982832
using	O	O:0.999918
the	O	O:0.999899
`	O	O:0.999858
apply	O	B-API:0.998741
`	O	O:0.999881
method	O	O:0.999530
,	O	O:0.999999
where	O	O:0.999963
`	O	O:0.999991
df	O	O:0.998860
`	O	O:0.999990
is	O	O:0.999953
a	O	O:0.999993
DataFrame	B-API	O:0.990596
with	O	O:0.999970
numeric	O	O:0.999931
data	O	O:0.999979
of	O	O:0.999997
size	O	O:0.999977
a	O	O:0.999991
*	O	O:0.999978
b	O	O:0.999955
,	O	O:0.999996
as	O	O:0.999982
follows	O	O:0.996328
.	O	O:0.999906
	
#CODE	O	O:0.998453
	
Why	O	O:0.999492
is	O	O:0.999983
the	O	O:0.999939
`	O	O:0.999973
apply	O	B-API:0.997965
`	O	O:0.999913
method	O	O:0.999770
doubling	O	O:0.999831
the	O	O:0.999994
size	O	O:0.999844
of	O	O:0.999963
the	O	O:0.999970
DataFrame	B-API	O:0.996138
?	O	O:0.999922
	
Unfortunately	O	O:0.999689
,	O	O:0.999985
the	O	O:0.999989
Pandas	O	O:0.999746
apply	O	B-API:0.602313
documentation	O	O:0.998483
does	O	O:0.999576
not	O	O:0.999985
offer	O	O:0.999966
helpful	O	O:0.999358
clues	O	O:0.999203
.	O	O:0.999860
	
Ability	O	O:0.999121
to	O	O:0.999985
apply	O	O:0.981892
different	O	O:0.999730
stats	O	O:0.999071
to	O	O:0.999998
different	O	O:0.999996
columns	O	O:0.999168
(	O	O:0.999995
for	O	O:0.999992
now	O	O:0.999972
just	O	O:0.999947
count	O	O:0.999875
,	O	O:0.999996
sum	O	O:0.999501
,	O	O:0.999998
mean	O	O:0.999756
,	O	O:0.999992
weighted	O	O:0.999947
mean	O	O:0.999589
)	O	O:0.999980
	
`	O	O:0.999879
data.apply	O	O:0.726022
(	O	O:0.999978
math.log10	O	O:0.976802
)`	O	O:0.999219
did	O	O:0.999793
not	O	O:0.999983
work	O	O:0.999964
because	O	O:0.999979
`	O	O:0.999995
apply	O	B-API:0.947970
`	O	O:0.999977
tries	O	O:0.994917
to	O	O:0.999999
pass	O	O:0.999890
an	O	O:0.999995
entire	O	O:0.999936
column	O	O:0.999642
(	O	O:0.999994
a	O	O:0.999996
Series	O	O:0.999669
)	O	O:0.999998
of	O	O:0.999993
values	O	O:0.999650
to	O	O:0.999978
`	O	O:0.999999
math.log10	O	O:0.702971
`	O	O:0.999984
.	O	O:0.999493
	
`	O	O:0.999914
math.log10	O	O:0.530599
`	O	O:0.999994
expects	O	O:0.999491
a	O	O:0.999995
scalar	O	O:0.999684
value	O	O:0.999961
only	O	O:0.999728
.	O	O:0.999967
	
And	O	O:0.999928
can	O	O:0.999971
I	O	O:1.000000
apply	O	O:0.956590
tight_layout	B-API	B-API:0.994881
to	O	O:0.999992
data.hist	O	O:0.999766
somehow	O	O:0.999803
?	O	O:0.999980
	
I'm	O	O:0.999847
not	O	O:0.999994
sure	O	O:0.999970
I	O	O:0.999991
can	O	O:0.999995
give	O	O:0.999973
you	O	O:0.999998
a	O	O:0.999998
great	O	O:0.999639
explanation	O	O:0.999808
for	O	O:0.999992
that	O	O:0.999055
warning	O	O:0.999814
beyond	O	O:0.999870
what's	O	O:0.999039
in	O	O:0.999951
the	O	O:0.999952
documentation	O	O:0.998975
,	O	O:0.999961
but	O	O:0.999979
it	O	O:0.999964
appears	O	O:0.999984
what	O	O:0.999889
you	O	O:0.999707
did	O	O:0.999952
works	O	O:0.999972
fine	O	O:0.999683
and	O	O:0.999995
that	O	O:0.999663
warning	O	O:0.999134
doesn't	O	O:0.999916
always	O	O:0.999967
apply	O	O:0.945340
even	O	O:0.998363
when	O	O:0.999680
it	O	O:0.999985
appears	O	O:0.999952
.	O	O:0.999846
	
Call	O	O:0.996682
`	O	O:0.999977
apply	O	B-API:0.976167
`	O	O:0.999971
on	O	O:0.999408
'	O	O:0.999985
B	O	O:0.999865
'	O	O:0.999931
and	O	O:0.999997
pass	O	O:0.999592
a	O	O:0.999982
lambda	O	O:0.997740
which	O	O:0.999953
just	O	O:0.999473
accesses	O	O:0.999971
the	O	O:0.999987
single	O	O:0.999448
key	O	O:0.999964
in	O	O:0.999976
the	O	O:0.999964
dict	O	O:0.996884
:	O	O:0.999959
#CODE	O	O:0.999882
	
Wow	O	O:0.999856
this	O	O:0.999761
works	O	O:0.999921
for	O	O:0.999994
all	O	O:0.999891
cases	O	O:0.999498
unless	O	O:0.999915
I	O	O:0.999979
use	O	O:0.999971
`	O	O:0.999620
apply	O	B-API:0.995245
`	O	O:0.999891
and	O	O:0.999938
a	O	O:0.999997
lambda	O	O:0.947962
function	O	O:0.999489
	
Apply	O	O:0.999768
a	O	O:0.999977
weighted	O	O:0.997039
average	O	O:0.997977
function	O	O:0.999955
to	O	O:0.999994
a	O	O:1.000000
dataframe	B-API	O:0.990853
without	O	O:0.999875
grouping	O	O:0.999790
it	O	O:0.999950
,	O	O:0.999996
as	O	O:0.999994
if	O	O:0.999932
it	O	O:0.999975
was	O	O:0.999989
a	O	O:0.999997
single	O	O:0.999315
group	O	O:0.996894
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999966
apply	O	O:0.996303
a	O	O:0.999732
function	O	O:0.999617
that	O	O:0.999882
computes	O	O:0.999986
something	O	O:0.999986
similar	O	O:0.999902
to	O	O:0.999998
a	O	O:1.000000
weighted	O	O:0.998553
average	O	O:0.999852
absolute	O	O:0.992720
deviation	O	O:0.999951
of	O	O:0.999992
all	O	O:0.999982
the	O	O:0.999999
elements	O	O:0.999764
of	O	O:0.999997
my	O	O:0.999996
data	O	O:0.999984
frame	O	O:0.999990
.	O	O:0.999938
	
If	O	O:0.999944
I	O	O:0.999991
don't	O	O:0.999939
use	O	O:0.999586
groupby	B-API	B-API:0.997285
,	O	O:0.999969
pandas	O	O:0.998621
would	O	O:0.999936
apply	O	O:0.960136
this	O	O:0.999667
function	O	O:0.999883
to	O	O:0.999999
every	O	O:0.999998
row	O	O:0.999979
of	O	O:0.999980
the	O	O:0.999986
dataframe	B-API	O:0.999240
,	O	O:0.999983
which	O	O:0.999368
is	O	O:0.999982
not	O	O:0.999970
my	O	O:0.999993
goal	O	O:0.998504
.	O	O:0.999885
	
Okay	O	O:0.999658
,	O	O:0.999996
so	O	O:0.999976
in	O	O:0.999999
your	O	O:0.999987
post	O	O:0.999891
when	O	O:0.999968
you	O	O:0.999997
say	O	O:0.999994
"	O	O:0.999994
If	O	O:0.999956
I	O	O:0.999994
don't	O	O:0.999930
use	O	O:0.999527
groupby	B-API	B-API:0.997285
,	O	O:0.999969
pandas	O	O:0.998621
would	O	O:0.999936
apply	O	O:0.960136
this	O	O:0.999667
function	O	O:0.999883
to	O	O:0.999999
every	O	O:0.999998
row	O	O:0.999981
of	O	O:0.999982
the	O	O:0.999989
dataframe	B-API	O:0.997700
"	O	O:0.999949
,	O	O:0.999955
that's	O	O:0.999860
not	O	O:0.999975
necessarily	O	O:0.999977
true	O	O:0.999302
.	O	O:0.999805
	
You	O	O:0.999730
should	O	O:0.999919
try	O	O:0.999961
to	O	O:0.999999
read	O	O:0.999986
up	O	O:0.999975
on	O	O:0.999995
the	O	O:0.999993
way	O	O:0.999983
operations	O	O:0.999888
on	O	O:0.999965
`	O	O:0.999997
numpy	O	O:0.998911
`	O	O:0.999994
arrays	O	O:0.999343
are	O	O:0.999953
"	O	O:0.999987
vectorized	O	O:0.995406
"	O	O:0.999892
.	O	O:0.999519
	
So	O	O:0.999956
,	O	O:0.999998
like	O	O:0.999960
people	O	O:0.999947
have	O	O:0.999963
pointed	O	O:0.999962
out	O	O:0.999961
in	O	O:0.999992
the	O	O:0.999983
comments	O	O:0.999642
,	O	O:0.999999
your	O	O:0.999224
function	O	O:0.999785
works	O	O:0.999986
fine	O	O:0.999883
without	O	O:0.999900
having	O	O:0.999670
to	O	O:0.999943
do	O	O:0.999997
the	O	O:0.999927
groupby	B-API	B-API:0.999347
:	O	O:0.999919
#CODE	O	O:0.999495
	
Use	O	O:0.999906
the	O	O:0.999970
older	O	O:0.998548
`	O	O:0.999977
openpyxl	O	O:0.986728
`	O	O:0.999995
engine	O	O:0.999705
to	O	O:0.999996
apply	O	O:0.990298
formats	O	O:0.999692
one	O	O:0.999988
cell	O	O:0.999939
at	O	O:0.999998
a	O	O:0.999992
time	O	O:0.999109
.	O	O:0.999899
	
This	O	O:0.999050
is	O	O:0.999994
the	O	O:0.999971
approach	O	O:0.999934
with	O	O:0.999570
which	O	O:0.999840
I've	O	O:0.999826
had	O	O:0.999919
the	O	O:0.999989
most	O	O:0.999170
success	O	O:0.999394
.	O	O:0.999863
	
But	O	O:0.999751
it	O	O:0.999981
means	O	O:0.999936
writing	O	O:0.999894
loops	O	O:0.999528
to	O	O:0.999989
apply	O	O:0.994719
formats	O	O:0.999225
cell-by-cell	O	O:0.997715
,	O	O:0.999999
remembering	O	O:0.999903
offsets	O	O:0.999269
,	O	O:0.999990
etc	O	O:0.999957
.	O	O:0.999923
	
This	O	O:0.999099
is	O	O:0.999971
currently	O	O:0.999832
not	O	O:0.999996
possible	O	O:0.999671
in	O	O:0.999980
openpyxl	O	O:0.998990
.	O	O:0.999882
	
As	O	O:0.999957
you	O	O:0.999969
rightly	O	O:0.999971
point	O	O:0.999958
out	O	O:0.999984
applying	O	O:0.999977
formats	O	O:0.997813
to	O	O:0.999995
individual	O	O:0.999992
cells	O	O:0.998743
is	O	O:0.999985
extremely	O	O:0.999638
inefficient	O	O:0.999274
.	O	O:0.999757
	
This	O	O:0.999830
will	O	O:0.999916
hopefully	O	O:0.999974
improve	O	O:0.999404
in	O	O:0.999979
forthcoming	O	O:0.999803
releases	O	O:0.999946
when	O	O:0.999600
we	O	O:0.999999
add	O	O:0.999989
support	O	O:0.998916
for	O	O:0.999968
named	O	O:0.999245
styles	O	O:0.998596
you'll	O	O:0.999830
still	O	O:0.999977
have	O	O:0.999984
to	O	O:0.999993
apply	O	O:0.994129
these	O	O:0.999934
individually	O	O:0.999802
as	O	O:0.999997
resolving	O	O:0.999299
all	O	O:0.999941
the	O	O:0.999991
possible	O	O:0.999696
styles	O	O:0.999743
for	O	O:0.999981
an	O	O:0.999997
individual	O	O:0.999204
cell	O	O:0.994154
(	O	O:0.999977
built-in	O	O:0.999591
,	O	O:0.999983
row	O	O:0.999888
,	O	O:0.999994
column	O	O:0.999844
,	O	O:0.999998
individual	O	O:0.999403
)	O	O:0.999960
is	O	O:0.999979
an	O	O:0.999992
expensive	O	O:0.999892
operation	O	O:0.999635
which	O	O:0.999934
will	O	O:0.999934
be	O	O:0.999998
much	O	O:0.999929
less	O	O:0.998476
complex	O	O:0.998852
than	O	O:0.999771
it	O	O:0.999990
currently	O	O:0.999597
is	O	O:0.999983
.	O	O:0.999640
	
A	O	O:0.999938
single-liner	O	O:0.999749
-	O	O:0.999986
you	O	O:0.999994
could	O	O:0.999994
extract	O	O:0.999961
numbers	O	O:0.999965
from	O	O:0.999906
via	O	O:0.999917
regex	O	O:0.999459
and	O	O:0.999961
`	O	O:0.999993
apply	O	B-API:0.984229
`	O	O:0.999964
on	O	O:0.999838
the	O	O:0.999993
`	O	O:0.999986
duration	O	O:0.996133
`	O	O:0.999999
column	O	O:0.999956
like	O	O:0.999984
split	O	O:0.998953
into	O	O:0.999916
multilines	O	O:0.998624
for	O	O:0.999870
readability	O	O:0.998866
#CODE	O	O:0.998705
	
And	O	O:0.999891
,	O	O:0.999998
then	O	O:0.999951
apply	O	O:0.830549
on	O	O:0.999908
#CODE	O	O:0.999272
	
What's	O	O:0.999428
REALLY	O	O:0.999737
confusing	O	O:0.999726
me	O	O:0.999814
is	O	O:0.999972
,	O	O:0.999996
when	O	O:0.999862
I	O	O:0.999996
try	O	O:0.999999
to	O	O:0.999992
step	O	O:0.999999
through	O	O:0.999933
the	O	O:0.999868
function	O	O:0.993611
(	O	O:0.999977
not	O	O:0.999997
using	O	O:0.999989
apply	O	B-API:0.778041
)	O	O:0.999629
with	O	O:0.999830
just	O	O:0.999957
one	O	O:0.999997
row	O	O:0.999971
,	O	O:0.999998
I	O	O:0.999997
get	O	O:0.999985
the	O	O:0.999974
DataFrames	O	O:0.999921
that	O	O:0.999926
I	O	O:0.999998
expect	O	O:0.999988
i.e.	O	O:0.997601
,	O	O:0.999986
not	O	O:0.999945
the	O	O:0.999978
Series	O	O:0.999351
and	O	O:0.999994
then	O	O:0.999801
Timestamp	O	O:0.996527
.	O	O:0.999897
	
Really	O	O:0.999604
appreciate	O	O:0.999912
any	O	O:0.999875
insight	O	O:0.999744
into	O	O:0.998752
what's	O	O:0.999931
going	O	O:0.998769
on	O	O:0.999904
!	O	O:0.999810
	
Is	O	O:0.999986
there	O	O:0.999987
a	O	O:0.999996
way	O	O:0.999909
to	O	O:0.999997
have	O	O:1.000000
a	O	O:0.999998
counter	O	O:0.999958
variable	O	O:0.999934
in	O	O:0.999990
the	O	O:0.999887
function	O	O:0.999944
called	O	O:0.999811
through	O	O:0.999946
a	O	O:0.999979
pandas	O	O:0.998941
groupby	B-API	B-API:0.876187
apply	O	B-API:0.748627
?	O	O:0.998482
	
#CODE	O	O:0.998453
	
Note	O	O:0.998465
:	O	O:0.999995
this	O	O:0.999922
is	O	O:0.999998
an	O	O:0.999970
implementation	O	O:0.999886
detail	O	O:0.999696
,	O	O:0.999994
the	O	O:0.999997
number	O	O:0.999940
of	O	O:0.999989
times	O	O:0.999959
the	O	O:0.999981
function	O	O:0.999862
in	O	O:0.999990
an	O	O:0.999992
apply	O	B-API:0.803958
is	O	O:0.999712
called	O	O:0.996484
may	O	O:0.999992
depend	O	O:0.999512
on	O	O:0.999989
the	O	O:0.999954
return	O	O:0.999679
type	O	O:0.998441
/	O	O:0.999984
whether	O	O:0.999928
the	O	O:0.999960
apply	O	B-API:0.776444
takes	O	O:0.998650
the	O	O:0.999986
slow	O	O:0.999189
or	O	O:0.999992
fast	O	O:0.998277
path	O	O:0.999926
...	O	O:0.999415
	
Isn't	O	O:0.999818
the	O	O:0.999990
first	O	O:0.999888
call	O	O:0.999258
to	O	O:0.999993
apply	O	O:0.788800
the	O	O:0.999947
initialisation	O	O:0.999622
of	O	O:0.999993
the	O	O:0.999981
groups	O	O:0.999762
though	O	O:0.999922
,	O	O:0.999997
I	O	O:0.999995
thought	O	O:0.999752
I	O	O:0.999863
saw	O	O:0.999988
this	O	O:0.999889
as	O	O:0.999997
an	O	O:0.999982
explanation	O	O:0.999844
in	O	O:0.999995
a	O	O:0.999997
previous	O	O:0.999542
answer	O	O:0.999823
somewhere	O	O:0.999692
...	O	O:0.999342
	
Oops	O	O:0.999118
didn't	O	O:0.999323
see	O	O:0.999996
this	O	O:0.999937
answer	O	O:0.999786
was	O	O:0.999896
the	O	O:0.999974
first	O	O:0.999155
.	O	O:0.999855
	
Great	O	O:0.998763
I	O	O:0.999973
should	O	O:0.999991
have	O	O:0.999942
thought	O	O:0.999958
of	O	O:0.999998
using	O	O:0.999385
apply	O	B-API:0.887835
.	O	O:0.993836
	
I	O	O:0.999987
ended	O	O:0.999814
up	O	O:0.999874
having	O	O:0.999924
a	O	O:0.999981
few	O	O:0.999087
issues	O	O:0.999673
with	O	O:0.999709
integers	O	O:0.997993
and	O	O:0.999996
special	O	O:0.999079
character	O	O:0.996504
(	O	O:0.999985
like	O	O:0.999956
spanish	O	O:0.999812
letters	O	O:0.997407
)	O	O:0.999940
.	O	O:0.999817
	
The	O	O:0.999927
answer	O	O:0.999699
bellow	O	O:0.999524
solves	O	O:0.999853
my	O	O:0.999955
issue	O	O:0.999863
with	O	O:0.999644
integers	O	O:0.997320
but	O	O:0.999979
waiting	O	O:0.999687
for	O	O:0.999986
an	O	O:0.999964
answer	O	O:0.999838
on	O	O:0.999978
how	O	O:0.999978
to	O	O:0.999999
deal	O	O:0.999986
with	O	O:0.999988
special	O	O:0.999759
characters	O	O:0.999969
like	O	O:0.999740
`	O	O:0.999997
u	O	O:0.999047
'	O	O:0.999991
\xf3	O	O:0.998720
'`	O	O:0.999885
.	O	O:0.999698
	
We	O	O:0.999993
then	O	O:0.999957
apply	O	O:0.991848
another	O	O:0.999350
function	O	O:0.999611
to	O	O:0.999996
this	O	O:0.999998
that	O	O:0.999974
converts	O	O:0.999947
the	O	O:0.999996
str	O	O:0.999250
numbers	O	O:0.999348
to	O	O:0.999990
ints	O	O:0.999979
,	O	O:0.999995
puts	O	O:0.999915
these	O	O:0.999944
in	O	O:0.999991
a	O	O:0.999993
list	O	O:0.993257
and	O	O:0.999986
returns	O	O:0.999776
the	O	O:0.999940
smallest	O	O:0.999071
value	O	O:0.998970
:	O	O:0.999955
#CODE	O	O:0.999893
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
this	O	O:0.999327
is	O	O:0.999997
an	O	O:0.999966
approach	O	O:0.999988
that	O	O:0.999733
I	O	O:0.999981
hadn't	O	O:0.999953
thought	O	O:0.998448
about	O	O:0.999775
and	O	O:0.999967
one	O	O:0.999981
that	O	O:0.999412
I'm	O	O:0.999996
likely	O	O:0.999889
to	O	O:0.999996
employ	O	O:0.999953
down	O	O:0.999132
the	O	O:0.999925
road	O	O:0.999692
.	O	O:0.999970
for	O	O:0.999991
age	O	O:0.999846
,	O	O:0.999972
I	O	O:0.999966
wanted	O	O:0.999968
the	O	O:0.999836
series	O	O:0.999817
[	O	O:0.999965
62	O	O:0.999973
,	O	O:0.999974
55	O	O:0.999877
,	O	O:0.999986
67	O	O:0.999976
]	O	O:0.999970
at	O	O:0.999976
the	O	O:0.999990
end	O	O:0.999756
,	O	O:0.999960
and	O	O:0.999996
the	O	O:0.999977
problem	O	O:0.995993
I'm	O	O:0.999980
having	O	O:0.999781
now	O	O:0.999542
is	O	O:0.999997
that	O	O:0.999794
I	O	O:0.999996
can't	O	O:0.999988
target	O	O:0.999865
just	O	O:0.999928
row2	O	O:0.999940
when	O	O:0.999658
I	O	O:0.999998
apply	O	O:0.977273
split	O	B-API:0.892271
(	O	O:0.999630
'	O	O:0.999950
')	O	O:0.999890
.	O	O:0.999699
	
I	O	O:0.999972
can't	O	O:0.999985
pick	O	O:0.999713
the	O	O:0.999998
values	O	O:0.999845
from	O	O:0.999794
the	O	O:0.999995
list	O	O:0.999736
based	O	O:0.999706
on	O	O:0.999976
min	O	O:0.647362
and	O	O:0.999992
max	O	O:0.722142
because	O	O:0.999720
the	O	O:0.999975
expression	O	O:0.999842
format	O	O:0.999977
from	O	O:0.999891
which	O	O:0.999984
they	O	O:0.999965
came	O	O:0.999776
matters	O	O:0.999439
(	O	O:0.999973
I	O	O:0.999988
think	O	O:0.999526
it's	O	O:0.998933
not	O	O:0.999994
very	O	O:0.999976
clear	O	O:0.999939
from	O	O:0.999972
the	O	O:0.999990
examples	O	O:0.999469
I	O	O:0.999991
gave	O	O:0.999958
for	O	O:0.999990
sake	O	O:0.999835
of	O	O:0.999984
simplicity	O	O:0.999835
)	O	O:0.999982
.	O	O:0.999768
	
I	O	O:0.999987
want	O	O:0.999977
to	O	O:0.999967
apply	O	O:0.989434
df	O	O:0.997935
[	O	O:0.999853
'	O	O:0.999983
age	O	O:0.999866
']	O	O:0.999937
=d	O	O:0.999505
f	O	O:0.999705
[	O	O:0.999935
'	O	O:0.999982
e0	O	O:0.999883
']	O	O:0.999858
[(	O	O:0.999792
df	O	O:0.998989
[	O	O:0.999934
'	O	O:0.999979
e0	O	O:0.999842
']	O	O:0.999666
.str	B-API	B-API:0.991723
.match	B-API	B-API:0.996014
(	O	O:0.999928
pattern7	O	O:0.997184
)=	O	O:0.999874
=1	O	O:0.999940
)]	O	O:0.999614
.apply	B-API	B-API:0.998361
(	O	O:0.999919
lambda	O	O:0.998769
x	O	O:0.999281
:	O	O:0.999875
str	O	O:0.997522
(	O	O:0.999993
x	O	O:0.999873
)	O	O:0.999917
.split	B-API	B-API:0.995963
(	O	O:0.999929
'	O	O:0.999964
')	O	O:0.999935
[	O	O:0.999954
1	O	O:0.999966
])	O	O:0.999951
to	O	O:0.999997
only	O	O:1.000000
rows	O	O:0.999952
for	O	O:0.999991
which	O	O:0.999968
df	O	O:0.999052
[	O	O:0.999964
'	O	O:0.999976
e0	O	O:0.999841
']	O	O:0.999666
.str	B-API	B-API:0.991723
.match	B-API	B-API:0.996014
(	O	O:0.999931
pattern7	O	O:0.997286
)=	O	O:0.999907
=1	O	O:0.999962
)	O	O:0.999995
so	O	O:0.999988
as	O	O:0.999985
to	O	O:0.999982
not	O	O:0.999998
overwrite	O	O:0.999888
what	O	O:0.999584
was	O	O:0.999968
already	O	O:0.999944
in	O	O:0.999991
the	O	O:0.999973
age	O	O:0.999559
column	O	O:0.999733
...	O	O:0.999424
	
If	O	O:0.999959
you	O	O:0.999979
make	O	O:0.999982
these	O	O:0.999991
a	O	O:0.999996
list	O	O:0.998236
you	O	O:0.999979
can	O	O:0.999989
apply	O	O:0.965610
loc	O	B-API:0.972491
(	O	O:0.999767
which	O	O:0.999961
gets	O	O:0.999530
you	O	O:0.999992
the	O	O:0.999999
desired	O	O:0.999590
result	O	O:0.998610
):	O	O:0.999961
#CODE	O	O:0.999734
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999981
`	O	O:0.999969
apply	O	B-API:0.987053
`	O	O:0.999970
like	O	O:0.998715
this	O	O:0.999730
:	O	O:0.999971
#CODE	O	O:0.999812
	
Surprisingly	O	O:0.999350
,	O	O:0.999992
applying	O	O:0.999214
`	O	O:0.999899
str	O	O:0.985896
`	O	O:0.999998
seem	O	O:0.999377
to	O	O:0.999996
be	O	O:1.000000
taking	O	O:0.999514
longer	O	O:0.999906
than	O	O:0.999859
`	O	O:0.999993
apply	O	B-API:0.989905
`	O	O:0.999562
:	O	O:0.999337
#CODE	O	O:0.999898
	
Alternatively	O	O:0.999753
,	O	O:0.999991
you	O	O:0.999977
could	O	O:0.999994
also	O	O:0.999996
use	O	O:0.999994
`	O	O:0.999908
apply	O	B-API:0.996093
`	O	O:0.999860
#CODE	O	O:0.992854
	
The	O	O:0.999941
thing	O	O:0.999913
that	O	O:0.999860
I'm	O	O:0.999994
wanting	O	O:0.999964
to	O	O:0.999990
do	O	O:0.999992
is	O	O:0.999998
take	O	O:0.999690
the	O	O:0.999996
actual	O	O:0.999731
score	O	O:0.999819
value	O	O:0.999830
and	O	O:0.999996
apply	O	O:0.911850
a	O	O:0.999854
color	O	O:0.988815
map	O	B-API:0.862799
to	O	O:0.999948
it	O	O:0.999997
.	O	O:0.999944
	
So	O	O:0.999985
that	O	O:0.999969
worse	O	O:0.999966
scores	O	O:0.999097
are	O	O:0.999978
more	O	O:0.999927
blue	O	O:0.998812
and	O	O:0.999995
good	O	O:0.999589
scores	O	O:0.996309
are	O	O:0.999989
more	O	O:0.999769
red	O	O:0.999641
.	O	O:0.999754
	
Is	O	O:0.999974
there	O	O:0.999971
any	O	O:0.999986
way	O	O:0.999958
to	O	O:0.999949
do	O	O:0.999999
this	O	O:0.999974
within	O	O:0.999944
a	O	O:0.999993
radviz	O	O:0.995362
graph	O	O:0.999750
?	O	O:0.999899
	
How	O	O:0.999795
would	O	O:0.999943
you	O	O:0.999997
input	O	O:0.999997
the	O	O:0.999999
score	O	O:0.999921
values	O	O:0.999858
into	O	O:0.999796
the	O	O:0.999987
equation	O	O:0.998048
?	O	O:0.999957
	
Summarizing	O	O:0.999234
Dataframes	O	O:0.999759
with	O	O:0.999935
ambiguous	O	O:0.999974
columns	O	O:0.999959
with	O	O:0.999952
apply	O	B-API:0.831677
function	O	O:0.999053
	
The	O	O:0.999875
code	O	O:0.999382
works	O	O:0.999919
for	O	O:0.999987
almost	O	O:0.999843
all	O	O:0.999956
cases	O	O:0.999171
except	O	O:0.999844
for	O	O:0.999962
`	O	O:0.999981
apply	O	B-API:0.960499
`	O	O:0.999934
functions	O	O:0.999707
that	O	O:0.999983
count	O	O:0.999948
specific	O	O:0.999970
cases	O	O:0.999813
inside	O	O:0.999973
a	O	O:0.999971
column	O	O:0.991934
:	O	O:0.999975
#CODE	O	O:0.999850
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999997
way	O	O:0.999890
to	O	O:0.999976
incorporate	O	O:0.999987
the	O	O:0.999992
apply	O	B-API:0.850526
function	O	O:0.999778
into	O	O:0.998902
the	O	O:0.999994
dictionary	O	O:0.999164
`	O	O:0.999990
sumdict	O	O:0.988978
`	O	O:0.999993
?	O	O:0.999764
	
As	O	O:0.999974
an	O	O:0.999989
alternative	O	O:0.999968
,	O	O:0.999995
you	O	O:0.999990
can	O	O:0.999995
create	O	O:0.999986
`	O	O:1.000000
gene	O	O:0.999357
`	O	O:0.999992
in	O	O:0.999973
pure	O	O:0.999697
python	O	O:0.999220
(	O	O:0.999968
rather	O	O:0.999963
than	O	O:0.999957
using	O	O:0.999865
apply	O	B-API:0.988700
):	O	O:0.997102
#CODE	O	O:0.997865
	
Apply	O	O:0.999576
the	O	O:0.999298
function	O	O:0.999305
.	O	O:0.999834
	
pandas	O	O:0.998997
-	O	O:0.999993
apply	O	O:0.508409
UTM	O	O:0.997997
function	O	O:0.999213
to	O	O:0.999988
dataframe	B-API	O:0.999986
columns	O	O:0.999720
	
I'm	O	O:0.999875
working	O	O:0.999310
with	O	O:0.999971
this	O	O:0.999884
python	O	O:0.999875
package	O	O:0.999939
called	O	O:0.999394
UTM	O	O:0.999963
,	O	O:0.999843
which	O	O:0.999865
converts	O	O:0.999704
WGS84	O	O:0.999813
coordinates	O	O:0.998969
to	O	O:0.999959
UTM	O	O:0.999969
and	O	O:0.999991
vice	O	O:0.999758
versa	O	O:0.997592
.	O	O:0.999858
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999939
to	O	O:0.999998
apply	O	O:0.992815
this	O	O:0.998810
function	O	O:0.999938
to	O	O:0.999996
a	O	O:1.000000
pandas	O	O:0.999525
dataframe	B-API	O:0.997951
.	O	O:0.999850
	
The	O	O:0.998922
function	O	O:0.999833
works	O	O:0.999963
as	O	O:0.999984
follows	O	O:0.978717
:	O	O:0.999954
#CODE	O	O:0.999712
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999980
`	O	O:0.999969
apply	O	B-API:0.998662
`	O	O:0.999953
method	O	O:0.999664
over	O	O:0.999932
the	O	O:0.999994
columns	O	O:0.999917
like	O	O:0.999660
	
You	O	O:0.999906
can	O	O:0.999929
do	O	O:1.000000
this	O	O:0.999993
by	O	O:0.999967
`	O	O:0.999989
apply	O	B-API:0.992356
`	O	O:0.999972
ing	O	O:0.996447
a	O	O:0.999983
`	O	O:0.999437
rolling_sum	B-API	B-API:0.999743
`	O	O:0.999986
after	O	O:0.999733
we	O	O:0.999977
`	O	O:0.999974
groupby	B-API	B-API:0.999231
`	O	O:0.999983
the	O	O:0.998825
Type	O	O:0.999433
.	O	O:0.999790
	
For	O	O:0.999691
example	O	O:0.996811
:	O	O:0.999957
#CODE	O	O:0.999872
	
AttributeError	O	O:0.995228
:	O	O:0.999968
Cannot	O	O:0.999936
access	O	O:0.999706
attribute	O	O:0.999332
'	O	O:0.999957
index	O	O:0.999890
'	O	O:0.999992
of	O	O:0.999922
'	O	O:0.999938
DataFrameGroupBy	B-API	B-API:0.728605
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954730
'	O	O:0.999052
method	O	O:0.999572
	
Here's	O	O:0.999701
on	O	O:0.999970
approach	O	O:0.999967
to	O	O:0.999990
do	O	O:0.999998
it	O	O:0.999997
using	O	O:0.999967
one	O	O:0.999920
`	O	O:0.999948
apply	O	B-API:0.984077
`	O	O:0.999768
	
And	O	O:0.999878
,	O	O:0.999984
`	O	O:0.999988
apply	O	B-API:0.985829
`	O	O:0.999940
and	O	O:0.999946
store	O	O:0.999936
the	O	O:0.999940
result	O	O:0.999908
to	O	O:0.999985
`	O	O:1.000000
df	O	O:0.998949
[[	O	O:0.999979
'	O	O:0.999982
hour	O	O:0.996776
'	O	O:0.999981
,	O	O:0.999982
'	O	O:0.999976
weekday	B-API	B-API:0.580171
'	O	O:0.999965
,	O	O:0.999972
'	O	O:0.999973
weeknum	O	O:0.999413
']]`	O	O:0.999513
#CODE	O	O:0.998819
	
Depending	O	O:0.999548
on	O	O:0.999982
the	O	O:0.999986
task	O	O:0.999920
that	O	O:0.999748
is	O	O:0.999999
performed	O	O:0.999945
by	O	O:0.999913
`	O	O:0.999989
lambdafun	O	O:0.967385
`	O	O:0.999997
,	O	O:0.999969
you	O	O:0.999994
may	O	O:0.999994
get	O	O:0.999998
some	O	O:0.999991
speedup	O	O:0.999981
by	O	O:0.999988
storing	O	O:0.999948
the	O	O:0.999952
result	O	O:0.999948
of	O	O:0.999984
`	O	O:0.999985
apply	O	B-API:0.878450
`	O	O:0.999957
in	O	O:0.999958
a	O	O:0.999998
new	O	O:0.995811
`	O	O:0.999967
DataFrame	B-API	O:0.791886
`	O	O:0.999987
and	O	O:0.999994
then	O	O:0.999973
joining	O	O:0.999504
with	O	O:0.999934
the	O	O:0.999971
original	O	O:0.994312
:	O	O:0.999950
#CODE	O	O:0.999845
	
One	O	O:0.999850
way	O	O:0.999629
is	O	O:0.999958
to	O	O:0.999878
groupby	B-API	B-API:0.869007
and	O	O:0.999984
apply	O	B-API:0.866797
function	O	O:0.998931
to	O	O:0.999951
take	O	O:0.999991
list	O	O:0.999251
,	O	O:0.999993
and	O	O:0.999999
then	O	O:0.999922
convert	O	O:0.999100
to	O	O:0.999995
dict	O	O:0.999961
.	O	O:0.999919
	
#CODE	O	O:0.998453
	
Pandas	O	O:0.999769
dataframe	B-API	O:0.998402
apply	O	B-API:0.859065
function	O	O:0.998807
	
3	O	O:0.999671
)	O	O:0.999971
How	O	O:0.999968
to	O	O:0.999983
use	O	O:0.999997
apply	O	B-API:0.858674
function	O	O:0.999205
on	O	O:0.999983
the	O	O:0.999985
above	O	O:0.999939
dataframe	B-API	O:0.993375
`	O	O:0.999997
temp	O	O:0.978952
`	O	O:0.999992
?	O	O:0.999664
	
Then	O	O:0.999064
`	O	O:0.999998
apply	O	B-API:0.972589
`	O	O:0.999971
lambda	O	O:0.954861
function	O	O:0.999856
.	O	O:0.999510
	
#CODE	O	O:0.998453
	
It's	O	O:0.999652
not	O	O:0.999975
the	O	O:0.999998
most	O	O:0.999630
elegant	O	O:0.999055
,	O	O:0.999973
but	O	O:0.999986
life	O	O:0.998744
is	O	O:0.999993
short	O	O:0.999475
,	O	O:0.999992
so	O	O:0.999982
I'd	O	O:0.999984
apply	O	B-API:0.587476
`	O	O:0.999931
list	O	O:0.754754
`	O	O:0.999998
to	O	O:0.999949
get	O	O:1.000000
the	O	O:0.999992
values	O	O:0.999427
and	O	O:0.999998
then	O	O:0.999962
`	O	O:0.999996
pd.Series	B-API	B-API:0.993133
`	O	O:0.999995
to	O	O:0.999957
expand	O	O:0.999999
them	O	O:0.999961
into	O	O:0.999744
columns	O	O:0.999354
:	O	O:0.999936
#CODE	O	O:0.999894
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
Is	O	O:0.999985
there	O	O:0.999987
a	O	O:0.999996
way	O	O:0.999883
I	O	O:0.999989
can	O	O:0.999982
apply	O	O:0.976462
this	O	O:0.999876
to	O	O:0.999994
all	O	O:1.000000
values	O	O:0.999815
in	O	O:0.999996
a	O	O:0.999999
column	O	O:0.999471
?	O	O:0.999969
	
Then	O	O:0.999573
I	O	O:0.999999
want	O	O:0.999984
to	O	O:0.999949
save	O	O:0.999985
that	O	O:0.999691
factorization	O	O:0.999923
and	O	O:0.999996
apply	O	O:0.629300
it	O	O:0.999688
to	O	O:0.999985
other	O	O:0.999975
`	O	O:0.999988
DataFrame	B-API	O:0.827979
`	O	O:0.999939
(	O	O:0.999930
look	O	O:0.999878
input	O	O:0.999870
doesn't	O	O:0.999972
have	O	O:0.999970
c	O	O:0.999995
values	O	O:0.999883
in	O	O:0.999982
column	O	O:0.999844
A	O	O:0.999946
):	O	O:0.999936
	
As	O	O:0.999975
wroted	O	O:0.998916
in	O	O:0.999994
the	O	O:0.999976
question	O	O:0.999758
-	O	O:0.999992
I	O	O:0.999998
know	O	O:0.999980
about	O	O:0.999529
`	O	O:0.999863
get_dummies	B-API	B-API:0.999946
`	O	O:0.999944
-	O	O:0.999757
but	O	O:0.999994
this	O	O:0.999914
doesn't	O	O:0.999942
resolve	O	O:0.999841
my	O	O:0.999990
problem	O	O:0.999899
to	O	O:0.999993
apply	O	O:0.964823
the	O	O:0.999971
same	O	O:0.999909
mapping	O	O:0.999821
to	O	O:0.999993
the	O	O:1.000000
other	O	O:0.999752
series	O	O:0.999690
object	O	O:0.999771
.	O	O:0.999932
	
You	O	O:0.999857
don't	O	O:0.999965
need	O	O:0.999973
to	O	O:0.999995
use	O	O:0.999998
`	O	O:0.999837
map	O	B-API:0.989282
`	O	O:0.999998
on	O	O:0.999970
columns	O	O:0.999966
-	O	O:0.999995
`	O	O:0.999981
get_dummies	B-API	B-API:0.999635
`	O	O:0.999998
have	O	O:0.999611
an	O	O:0.999998
optional	O	O:0.999760
parameter	O	O:0.999230
`	O	O:0.999970
prefix	O	O:0.994446
`	O	O:0.999979
	
(	O	O:0.999733
Although	O	O:0.999968
this	O	O:0.999930
doesn't	O	O:0.999979
apply	O	O:0.752411
to	O	O:0.999972
the	O	O:0.999993
question	O	O:0.999348
,	O	O:0.999991
it	O	O:0.999992
may	O	O:0.999993
help	O	O:0.999804
someone	O	O:0.999993
searching	O	O:0.999195
later	O	O:0.998972
:	O	O:0.999945
If	O	O:0.999991
you're	O	O:0.999980
using	O	O:0.999875
Python	O	O:0.998454
2.x	O	O:0.997365
,	O	O:0.999989
make	O	O:0.999922
sure	O	O:0.999955
to	O	O:0.999999
explicitly	O	O:0.999989
use	O	O:0.999924
pickle	O	O:0.973377
format	O	O:0.999710
2	O	O:0.999899
;	O	O:0.999978
IIRC	O	O:0.998599
,	O	O:0.999996
NumPy	O	O:0.997958
is	O	O:0.999970
very	O	O:0.999503
bad	O	O:0.999956
at	O	O:0.999993
the	O	O:0.999968
default	O	O:0.999098
pickle	O	O:0.992484
format	O	O:0.999635
0	O	O:0.999909
.	O	O:0.999905
In	O	O:0.999972
Python	O	O:0.999735
3.0	O	O:0.999245
+	O	O:0.999848
,	O	O:0.999994
this	O	O:0.999823
isn't	O	O:0.999963
relevant	O	O:0.999809
,	O	O:0.999995
because	O	O:0.999992
the	O	O:0.999966
default	O	O:0.999779
format	O	O:0.999687
is	O	O:0.999989
at	O	O:0.999995
least	O	O:0.999158
3	O	O:0.999934
.	O	O:0.999779
)	O	O:0.999969
	
Apply	O	O:0.997410
function	O	O:0.999633
with	O	O:0.999842
pandas	O	O:0.999925
dataframe	B-API	O:0.998237
-	O	O:0.999973
POS	O	O:0.999562
tagger	O	O:0.999711
computation	O	O:0.999781
time	O	O:0.999913
	
I'm	O	O:0.999948
very	O	O:0.999846
confused	O	O:0.999837
on	O	O:0.999993
the	O	O:0.999985
apply	O	B-API:0.818384
function	O	O:0.998125
for	O	O:0.999932
pandas	O	O:0.999084
.	O	O:0.999769
	
I	O	O:0.999992
have	O	O:0.999989
a	O	O:0.999968
big	O	O:0.999823
dataframe	B-API	O:0.998624
where	O	O:0.999944
one	O	O:0.999995
column	O	O:0.999901
is	O	O:0.999999
a	O	O:0.999998
column	O	O:0.999908
of	O	O:0.999986
strings	O	O:0.997319
.	O	O:0.999936
	
I'm	O	O:0.999982
then	O	O:0.999964
using	O	O:0.999999
a	O	O:0.999921
function	O	O:0.999468
to	O	O:0.999991
count	O	O:0.999983
part-of-speech	O	O:0.999862
occurrences	O	O:0.999408
.	O	O:0.999904
	
I'm	O	O:0.999891
just	O	O:0.999871
not	O	O:0.999997
sure	O	O:0.999946
the	O	O:0.999996
way	O	O:0.999966
of	O	O:0.999994
setting	O	O:0.999378
up	O	O:0.999971
my	O	O:0.999814
apply	O	B-API:0.525797
statement	O	O:0.999556
or	O	O:0.999982
my	O	O:0.999798
function	O	O:0.999846
.	O	O:0.999891
	
#CODE	O	O:0.998453
	
So	O	O:0.999989
basically	O	O:0.999972
I	O	O:0.999999
have	O	O:0.999995
a	O	O:0.999962
function	O	O:0.999935
similar	O	O:0.999910
to	O	O:0.999998
the	O	O:0.999999
above	O	O:0.999957
where	O	O:0.999978
I	O	O:0.999995
use	O	O:0.999996
a	O	O:0.999571
POS	O	O:0.996231
tagger	O	O:0.999913
on	O	O:0.999995
a	O	O:0.999998
column	O	O:0.999924
that	O	O:0.999958
outputs	O	O:0.999993
a	O	O:0.999999
single	O	O:0.998232
number	O	O:0.999387
(	O	O:0.999988
number	O	O:0.999983
of	O	O:0.999991
nouns	O	O:0.999658
)	O	O:0.999990
.	O	O:0.999902
	
I	O	O:0.999960
may	O	O:0.999997
possibly	O	O:0.999788
rewrite	O	O:0.999864
it	O	O:0.999977
to	O	O:0.999975
output	O	O:0.999999
multiple	O	O:0.999954
numbers	O	O:0.999447
for	O	O:0.999997
different	O	O:0.999985
parts	O	O:0.999267
of	O	O:0.999985
speech	O	O:0.997924
,	O	O:0.999992
but	O	O:0.999950
I	O	O:0.999984
can't	O	O:0.999979
wrap	O	O:0.998777
my	O	O:0.999976
head	O	O:0.999536
around	O	O:0.999761
`	O	O:0.999981
apply	O	B-API:0.991574
`	O	O:0.999859
.	O	O:0.997955
	
I'm	O	O:0.999880
pretty	O	O:0.999911
sure	O	O:0.999854
I	O	O:0.999984
don't	O	O:0.999979
really	O	O:0.999811
have	O	O:0.999890
either	O	O:0.999971
part	O	O:0.999974
arranged	O	O:0.999923
correctly	O	O:0.999871
.	O	O:0.999928
	
For	O	O:0.999868
instance	O	O:0.999812
,	O	O:0.999995
I	O	O:0.999994
can	O	O:0.999975
run	O	O:0.999791
`	O	O:0.999997
noun_count	O	O:0.992445
[	O	O:0.999993
row	O	O:0.999939
]`	O	O:0.999894
and	O	O:0.999984
get	O	O:0.999986
the	O	O:0.999974
correct	O	O:0.999939
value	O	O:0.999923
for	O	O:0.999965
any	O	O:0.999813
index	O	O:0.999085
but	O	O:0.999919
I	O	O:0.999993
can't	O	O:0.999974
figure	O	O:0.999553
out	O	O:0.999966
how	O	O:0.999964
to	O	O:0.999994
make	O	O:0.999995
it	O	O:0.999997
work	O	O:0.999977
with	O	O:0.999988
apply	O	O:0.558099
how	O	O:0.999858
I	O	O:0.999987
have	O	O:0.999990
it	O	O:0.999994
set	O	O:0.999919
up	O	O:0.999905
.	O	O:0.999828
	
Basically	O	O:0.999781
I	O	O:0.999984
don't	O	O:0.999984
know	O	O:0.999720
how	O	O:0.999992
to	O	O:0.999996
pass	O	O:0.999990
the	O	O:0.999992
row	O	O:0.999988
value	O	O:0.999954
to	O	O:0.999996
the	O	O:0.999997
function	O	O:0.999879
within	O	O:0.999853
the	O	O:0.999926
apply	O	B-API:0.935963
statement	O	O:0.997802
.	O	O:0.999620
	
#CODE	O	O:0.998453
	
How	O	O:0.999916
do	O	O:0.999952
I	O	O:0.999998
apply	O	O:0.930415
a	O	O:0.998697
function	O	O:0.999211
designed	O	O:0.999686
for	O	O:0.999992
one	O	O:0.999949
number	O	O:0.999883
to	O	O:0.999994
an	O	O:1.000000
entire	O	O:0.999964
dataframe	B-API	O:0.998634
in	O	O:0.999986
pandas	O	O:0.999761
?	O	O:0.999977
	
Seems	O	O:0.999869
like	O	O:0.999922
there	O	O:0.999955
might	O	O:0.999976
be	O	O:0.999997
an	O	O:0.999997
easier	O	O:0.998371
way	O	O:0.999718
but	O	O:0.999975
this	O	O:0.999658
isn't	O	O:0.999914
too	O	O:0.999783
bad	O	O:0.999853
.	O	O:0.999782
	
Mostly	O	O:0.999797
the	O	O:0.999986
work	O	O:0.997144
is	O	O:0.999999
done	O	O:0.999954
by	O	O:0.999950
`	O	O:0.999962
reindex	O	B-API:0.999401
`	O	O:0.999973
but	O	O:0.999850
I	O	O:0.999993
had	O	O:0.999962
to	O	O:0.999942
loop	O	O:0.999995
with	O	O:0.999984
a	O	O:0.999995
groupby	B-API	B-API:0.994679
rather	O	O:0.999938
than	O	O:0.999939
apply	O	O:0.928380
directly	O	O:0.999738
due	O	O:0.999586
to	O	O:0.999872
the	O	O:0.999989
index	O	O:0.999569
not	O	O:0.999983
being	O	O:0.999960
unique	O	O:0.637505
.	O	O:0.999298
	
#CODE	O	O:0.998453
	
What	O	O:0.999696
should	O	O:0.999960
I	O	O:0.999997
use	O	O:0.999995
if	O	O:0.999579
I	O	O:0.999995
want	O	O:0.999975
to	O	O:0.999922
update	O	O:0.999983
`	O	O:0.999991
some_series	O	O:0.949268
`	O	O:0.999997
in	O	O:0.999988
place	O	O:0.999983
from	O	O:0.999953
`	O	O:0.999988
other_series	O	O:0.973147
`	O	O:0.999977
,	O	O:0.999957
but	O	O:0.999997
also	O	O:0.999968
have	O	O:0.999995
the	O	O:0.999989
NA	O	O:0.999575
values	O	O:0.999648
apply	O	O:0.525746
?	O	O:0.999880
	
The	O	O:0.999824
reason	O	O:0.998364
I'm	O	O:0.999969
not	O	O:0.999996
sure	O	O:0.999941
if	O	O:0.999998
this	O	O:0.999699
is	O	O:0.999990
the	O	O:0.999983
best	O	O:0.999353
way	O	O:0.999720
is	O	O:0.999974
because	O	O:0.999860
`	O	O:0.999990
apply	O	B-API:0.973407
`	O	O:0.999968
tends	O	O:0.997377
to	O	O:0.999997
be	O	O:0.999998
slow	O	O:0.999120
.	O	O:0.999811
	
Something	O	O:0.999642
like	O	O:0.999348
#CODE	O	O:0.999814
	
maybe	O	O:0.999909
show	O	O:0.999894
a	O	O:0.999991
timeit	O	O:0.972103
for	O	O:0.999990
apply	O	B-API:0.713251
vs	O	O:0.999755
using	O	O:0.999310
the	O	O:0.999864
str	O	O:0.992083
ops	O	O:0.999369
:)	O	O:0.999691
	
Series	O	O:0.986644
(	O	O:0.999962
and	O	O:0.999998
dictionaries	O	O:0.999816
)	O	O:0.999966
can	O	O:0.999954
be	O	O:0.999999
used	O	O:0.999992
just	O	O:0.999949
like	O	O:0.999966
functions	O	O:0.999935
with	O	O:0.999297
map	O	B-API:0.873243
and	O	O:0.999961
apply	O	B-API:0.929228
:	O	O:0.998571
#CODE	O	O:0.999068
	
Ok	O	O:0.999889
,	O	O:0.999989
from	O	O:0.999985
what	O	O:0.999856
I	O	O:0.999998
understand	O	O:0.999964
,	O	O:0.999978
the	O	O:0.999986
problem	O	O:0.999669
at	O	O:0.999993
its	O	O:0.999978
most	O	O:0.999938
simple	O	O:0.998530
is	O	O:0.999992
that	O	O:0.999889
you	O	O:0.999999
have	O	O:0.999998
a	O	O:0.999998
`	O	O:0.999966
pd.Series	B-API	B-API:0.989693
`	O	O:0.999998
of	O	O:0.999877
values	O	O:0.995351
(	O	O:0.999987
i.e.	O	O:0.999873
`	O	O:0.999996
a	O	O:0.999907
[	O	O:0.999860
"	O	O:0.999976
key	O	O:0.999851
"]`	O	O:0.999928
,	O	O:0.999929
which	O	O:0.999842
let's	O	O:0.999903
just	O	O:0.999941
call	O	O:0.999529
`	O	O:0.999997
keys	O	O:0.984131
`)	O	O:0.999996
,	O	O:0.999981
which	O	O:0.999979
correspond	O	O:0.999824
to	O	O:0.999999
the	O	O:1.000000
rows	O	O:0.999898
of	O	O:0.999998
a	O	O:0.999996
`	O	O:0.999978
pd.DataFrame	B-API	B-API:0.992873
`	O	O:0.999899
(	O	O:0.999961
the	O	O:0.999995
df	O	O:0.999715
called	O	O:0.998455
`	O	O:0.999997
b	O	O:0.999626
`)	O	O:0.999998
,	O	O:0.999988
such	O	O:0.999981
that	O	O:0.999959
`	O	O:0.999990
set	O	O:0.996184
(	O	O:0.999992
b	O	O:0.999840
[	O	O:0.999915
"	O	O:0.999976
key	O	O:0.999752
"])	O	O:0.999809
.issuperset	O	O:0.955185
(	O	O:0.999933
set	O	O:0.997942
(	O	O:0.999993
keys	O	O:0.999652
))`	O	O:0.998622
.	O	O:0.999832
	
You	O	O:0.999968
then	O	O:0.999934
want	O	O:0.999995
to	O	O:0.999996
apply	O	O:0.997628
some	O	O:0.998528
function	O	O:0.999888
to	O	O:0.999996
each	O	O:0.999999
group	O	O:0.999920
of	O	O:1.000000
rows	O	O:0.999310
in	O	O:0.999982
`	O	O:0.999998
b	O	O:0.999491
`	O	O:0.999998
where	O	O:0.999780
the	O	O:0.999985
`	O	O:0.999981
b	O	O:0.999198
[	O	O:0.999981
"	O	O:0.999972
key	O	O:0.999863
"]`	O	O:0.999728
is	O	O:0.999993
one	O	O:0.999974
of	O	O:0.999998
the	O	O:0.999991
values	O	O:0.999657
in	O	O:0.999939
`	O	O:0.999999
keys	O	O:0.990311
`	O	O:0.999987
.	O	O:0.999701
	
There	O	O:0.999824
are	O	O:0.999997
a	O	O:0.999995
few	O	O:0.999722
built	O	O:0.999529
in	O	O:0.999990
methods	O	O:0.999759
on	O	O:0.999991
the	O	O:0.999975
`	O	O:0.999979
groupby	B-API	B-API:0.999612
`	O	O:0.999974
object	O	O:0.999407
that	O	O:0.999937
are	O	O:0.999992
useful	O	O:0.999326
.	O	O:0.999720
	
For	O	O:0.999918
example	O	O:0.999753
,	O	O:0.999998
check	O	O:0.999923
out	O	O:0.999919
`	O	O:0.999989
valid_rows.groupby	O	O:0.977217
(	O	O:0.999973
"	O	O:0.999984
key	O	O:0.999934
")	O	O:0.999944
.sum()	B-API	B-API:0.996057
`	O	O:0.999973
or	O	O:0.999705
`	O	O:0.999994
valid_rows.groupby	O	O:0.984584
(	O	O:0.999970
"	O	O:0.999985
key	O	O:0.999899
")	O	O:0.999929
.describe()	B-API	B-API:0.999021
`	O	O:0.999911
.	O	O:0.999525
	
Under	O	O:0.999674
the	O	O:0.999913
covers	O	O:0.998789
,	O	O:0.999994
these	O	O:0.999941
are	O	O:0.999996
really	O	O:0.999823
similar	O	O:0.999969
uses	O	O:0.999628
of	O	O:0.999944
`	O	O:0.999952
apply	O	B-API:0.973548
`	O	O:0.999846
.	O	O:0.997815
	
The	O	O:0.999985
shape	O	O:0.999883
of	O	O:0.999989
the	O	O:0.999982
returned	O	O:0.999491
`	O	O:0.999989
summary	O	O:0.993113
`	O	O:0.999977
is	O	O:0.999982
determined	O	O:0.999892
by	O	O:0.999977
the	O	O:0.999961
applied	O	O:0.990111
function	O	O:0.999565
.	O	O:0.999829
	
The	O	O:0.999852
unique	O	O:0.917485
grouped-by	O	O:0.999773
values	O	O:0.998359
--	O	O:0.999994
those	O	O:0.999978
of	O	O:0.999987
`	O	O:0.999972
b	O	O:0.999742
[	O	O:0.999973
"	O	O:0.999958
key	O	O:0.999843
"]`	O	O:0.999755
--	O	O:0.999980
always	O	O:0.999907
constitute	O	O:0.999410
the	O	O:0.999930
index	O	O:0.999616
,	O	O:0.999988
but	O	O:0.999993
if	O	O:0.999994
the	O	O:0.999995
applied	O	O:0.998126
function	O	O:0.999893
returns	O	O:0.999911
a	O	O:0.999989
scalar	O	O:0.999360
,	O	O:0.999974
`	O	O:0.999995
summary	O	O:0.992086
`	O	O:0.999983
is	O	O:0.999987
a	O	O:0.999972
`	O	O:0.999923
Series	O	O:0.994487
`	O	O:0.999994
;	O	O:0.999975
if	O	O:0.999993
the	O	O:0.999997
applied	O	O:0.997316
function	O	O:0.999891
returns	O	O:0.999922
a	O	O:0.999957
`	O	O:0.999915
Series	O	O:0.993292
`	O	O:0.999996
,	O	O:0.999996
then	O	O:0.999906
`	O	O:0.999999
summary	O	O:0.997895
`	O	O:0.999999
constituted	O	O:0.999012
of	O	O:0.999996
the	O	O:0.999954
return	O	O:0.996060
`	O	O:0.999957
Series	O	O:0.997702
`	O	O:1.000000
as	O	O:0.999998
rows	O	O:0.999670
;	O	O:0.999990
if	O	O:0.999994
the	O	O:0.999997
applied	O	O:0.997839
function	O	O:0.999902
returns	O	O:0.999929
a	O	O:0.999936
`	O	O:0.999936
DataFrame	B-API	O:0.939873
`	O	O:0.999997
,	O	O:0.999995
then	O	O:0.999993
the	O	O:0.999998
result	O	O:0.999845
is	O	O:0.999994
a	O	O:0.999989
multiindex	O	O:0.998579
`	O	O:0.999979
DataFrame	B-API	O:0.889082
`	O	O:0.999980
.	O	O:0.999614
	
This	O	O:0.999306
is	O	O:0.999996
a	O	O:0.999989
core	O	O:0.999272
pattern	O	O:0.999473
in	O	O:0.999959
Pandas	O	O:0.999873
,	O	O:0.999949
and	O	O:0.999990
there's	O	O:0.999980
a	O	O:0.999994
whole	O	O:0.999586
,	O	O:0.999997
whole	O	O:0.999901
lot	O	O:0.999947
to	O	O:0.999984
explore	O	O:0.999955
here	O	O:0.999450
.	O	O:0.999939
	
How	O	O:0.999912
do	O	O:0.999964
you	O	O:0.999995
check	O	O:0.999980
a	O	O:0.999999
condition	O	O:0.999518
of	O	O:0.999992
several	O	O:0.999696
pandas	O	O:0.999848
DataFrame.Series	O	O:0.998725
element-wise	O	O:0.999127
and	O	O:0.999984
apply	O	O:0.872959
the	O	O:0.999684
result	O	O:0.999767
to	O	O:0.999998
a	O	O:1.000000
new	O	O:0.999836
column	O	O:0.999832
?	O	O:0.999969
	
I	O	O:0.999983
have	O	O:0.999968
managed	O	O:0.999668
to	O	O:0.999984
do	O	O:0.999999
this	O	O:0.999863
,	O	O:0.999980
but	O	O:0.999979
it's	O	O:0.999732
slower	O	O:0.999957
than	O	O:0.999889
I	O	O:0.999983
would	O	O:0.999994
like	O	O:0.998100
(	O	O:0.999998
takes	O	O:0.999616
2	O	O:0.999987
mins	O	O:0.999828
for	O	O:0.999997
a	O	O:0.999995
single	O	O:0.997923
60mb	O	O:0.999903
file	O	O:0.999732
;	O	O:0.999996
mostly	O	O:0.999172
in	O	O:0.999997
the	O	O:0.999953
apply	O	O:0.738316
part	O	O:0.999494
as	O	O:0.999992
seen	O	O:0.999544
below	O	O:0.999718
)	O	O:0.999957
and	O	O:0.999940
I'm	O	O:0.999976
thinking	O	O:0.999431
that	O	O:0.999932
there	O	O:0.999980
must	O	O:0.999983
be	O	O:0.999999
a	O	O:0.999997
better	O	O:0.998954
way	O	O:0.999971
of	O	O:0.999978
doing	O	O:0.999494
it	O	O:0.999935
	
There	O	O:0.999028
is	O	O:0.999988
no	O	O:0.999911
`	O	O:0.999985
str	O	O:0.990443
`	O	O:0.999992
accessor	O	O:0.999043
for	O	O:0.999980
datetimes	O	O:0.989566
and	O	O:0.999962
you	O	O:0.999980
can't	O	O:0.999841
do	O	O:0.999984
`	O	O:0.999995
dates.astype	O	O:0.912169
(	O	O:0.999987
str	O	O:0.999664
)`	O	O:0.999792
either	O	O:0.999877
,	O	O:0.999998
you	O	O:0.999980
can	O	O:0.999988
call	O	O:0.999954
`	O	O:0.999998
apply	O	B-API:0.997869
`	O	O:0.999932
and	O	O:0.999721
use	O	O:0.999943
`	O	O:0.999557
datetime.strftime	O	B-API:0.845824
`	O	O:0.999819
:	O	O:0.999726
#CODE	O	O:0.999908
	
To	O	O:0.999953
apply	O	O:0.605265
the	O	O:0.999960
same	O	O:0.999691
condition	O	O:0.999942
to	O	O:0.999997
to	O	O:1.000000
dozens	O	O:0.999998
of	O	O:0.999998
columns	O	O:0.999944
I	O	O:0.999999
could	O	O:0.999981
use	O	O:0.999911
`	O	O:0.999957
isin	B-API	B-API:0.999288
`	O	O:0.999966
,	O	O:0.999712
but	O	O:0.999980
it	O	O:0.999918
seems	O	O:0.999958
not	O	O:0.999991
to	O	O:0.999998
work	O	O:0.999998
if	O	O:0.999997
I	O	O:0.999999
need	O	O:0.999988
to	O	O:0.999985
substitute	O	O:0.999995
`'	O	O:0.999988
first	O	O:0.999755
'`	O	O:0.999990
with	O	O:0.999934
a	O	O:0.999989
regex	O	O:0.999769
,	O	O:0.999997
as	O	O:0.999993
in	O	O:0.999901
`	O	O:0.999986
regex	O	O:0.999509
=	O	O:0.999747
'	O	O:0.999667
(	O	O:0.999959
?	O	O:0.999969
=	O	O:0.999126
.	O	O:0.999991
*first	O	O:0.998452
)	O	O:0.999790
(	O	O:0.999941
?	O	O:0.999968
=	O	O:0.998705
.	O	O:0.999965
*second	O	O:0.998582
)'`	O	O:0.999853
.	O	O:0.999721
	
Why	O	O:0.999924
don't	O	O:0.999941
we	O	O:0.999993
use	O	O:0.999960
`	O	O:0.999964
applymap	B-API	B-API:0.996474
`	O	O:0.999990
on	O	O:0.999921
the	O	O:0.999999
entire	O	O:0.999966
data	O	O:0.999960
frame	O	O:0.999991
.	O	O:0.999958
	
This	O	O:0.999819
will	O	O:0.999917
be	O	O:0.999999
different	O	O:0.999988
than	O	O:0.999287
working	O	O:0.999816
the	O	O:0.999967
columns	O	O:0.998890
but	O	O:0.999920
would	O	O:0.999984
make	O	O:0.999975
it	O	O:0.999998
easier	O	O:0.999786
for	O	O:0.999999
your	O	O:0.999869
to	O	O:0.999983
apply	O	O:0.946392
if-else	O	O:0.982015
conditions	O	O:0.996083
to	O	O:0.999934
(	O	O:0.999999
I	O	O:0.999994
hope	O	O:0.996622
):	O	O:0.999834
#CODE	O	O:0.999486
	
The	O	O:0.999972
whole	O	O:0.999930
point	O	O:0.999964
of	O	O:0.999979
`	O	O:0.999981
applymap	B-API	B-API:0.991920
`	O	O:0.999935
is	O	O:0.999958
that	O	O:0.999957
you	O	O:0.999995
can	O	O:0.999995
apply	O	O:0.995838
a	O	O:0.999960
function	O	O:0.999386
on	O	O:0.999998
every	O	O:0.999993
cell	O	O:0.999955
of	O	O:0.999998
the	O	O:0.999994
data	O	O:0.999975
frame	O	O:0.999986
.	O	O:0.999954
	
So	O	O:0.999970
,	O	O:0.999995
I	O	O:0.999996
think	O	O:0.999990
your	O	O:0.999861
two	O	O:0.999968
drawbacks	O	O:0.999937
are	O	O:0.999981
covered	O	O:0.999936
if	O	O:0.999995
you	O	O:0.999984
expand	O	O:0.999790
the	O	O:0.999985
function	O	O:0.999734
further	O	O:0.999117
.	O	O:0.999927
	
Need	O	O:0.999825
help	O	O:0.999284
with	O	O:0.999974
that	O	O:0.999819
?	O	O:0.999993
	
But	O	O:0.999893
how	O	O:0.999981
do	O	O:0.999976
I	O	O:0.999996
apply	O	O:0.927985
this	O	O:0.993911
function	O	O:0.999903
on	O	O:0.999993
each	O	O:0.999940
element	O	O:0.999984
of	O	O:0.999995
a	O	O:0.999998
pandas	O	O:0.999969
data	O	O:0.999976
frame	O	O:0.999986
?	O	O:0.999977
	
Pass	O	O:0.999400
the	O	O:0.999881
`	O	O:0.999976
hash	O	O:0.995406
`	O	O:0.999984
function	O	O:0.999836
to	O	O:0.999983
`	O	O:0.999999
apply	O	B-API:0.930773
`	O	O:0.999980
on	O	O:0.999909
the	O	O:0.999986
`	O	O:0.999979
str	O	O:0.986126
`	O	O:0.999991
column	O	O:0.996050
:	O	O:0.999988
#CODE	O	O:0.999823
	
I	O	O:0.999989
then	O	O:0.999930
try	O	O:0.999996
using	O	O:0.999976
apply	O	B-API:0.819735
to	O	O:0.998867
run	O	O:0.999911
it	O	O:0.999993
on	O	O:0.999997
a	O	O:0.999999
dataframe	B-API	O:0.999405
to	O	O:0.999997
create	O	O:0.999997
a	O	O:0.999998
new	O	O:0.999875
column	O	O:0.999748
.	O	O:0.999896
	
#CODE	O	O:0.998453
	
For	O	O:0.999986
a	O	O:0.999984
start	O	O:0.999519
there	O	O:0.999891
is	O	O:0.999998
a	O	O:0.999992
built	O	O:0.998281
in	O	O:0.999969
`	O	O:0.999955
str.split()	B-API	B-API:0.998992
`	O	O:0.999986
which	O	O:0.998515
is	O	O:0.999997
vectorised	O	O:0.999682
so	O	O:0.999985
you	O	O:0.999986
could	O	O:0.999990
eliminate	O	O:0.999990
that	O	O:0.999992
from	O	O:0.999999
your	O	O:0.999987
code	O	O:0.999926
so	O	O:0.999995
`	O	O:0.999995
df	O	O:0.999068
[	O	O:0.999965
'	O	O:0.999982
word_split	O	O:0.998487
']	O	O:0.999972
=	O	O:0.999813
df	O	O:0.999140
[	O	O:0.999873
'	O	O:0.999981
string	O	O:0.999786
']	O	O:0.999872
.str	B-API	B-API:0.911123
.split()	B-API	B-API:0.999197
`	O	O:0.999897
and	O	O:0.999991
then	O	O:0.999968
call	O	O:0.999823
apply	O	O:0.679288
on	O	O:0.999730
this	O	O:0.999867
column	O	O:0.999941
and	O	O:0.999997
change	O	O:0.999929
your	O	O:0.999809
line	O	O:0.998676
in	O	O:0.999998
your	O	O:0.999958
func	O	O:0.996587
to	O	O:0.999999
this	O	O:0.999975
`	O	O:0.999997
listoflists	O	O:0.998240
=	O	O:0.999978
st.tag	O	O:0.981665
(	O	O:0.999959
x	O	O:0.999933
)`	O	O:0.999748
	
You	O	O:0.999926
could	O	O:0.999949
iterate	O	O:0.999934
through	O	O:0.999988
them	O	O:0.999520
and	O	O:0.999993
apply	O	O:0.652637
the	O	O:0.999116
`	O	O:0.999714
to_datetime	B-API	B-API:0.998319
`	O	O:0.999965
function	O	O:0.998793
OR	O	O:0.999937
	
It's	O	O:0.999829
generally	O	O:0.999900
expensive	O	O:0.999918
to	O	O:0.999974
do	O	O:0.999996
it	O	O:0.999998
this	O	O:0.999937
way	O	O:0.999993
,	O	O:0.999995
as	O	O:0.999989
you're	O	O:0.999828
losing	O	O:0.999446
the	O	O:0.999970
vector	O	O:0.999609
speed	O	O:0.999630
advantage	O	O:0.999990
when	O	O:0.999766
you	O	O:0.999983
`	O	O:0.999999
apply	O	B-API:0.918217
`	O	O:0.999993
a	O	O:0.999953
user	O	O:0.999520
defined	O	O:0.992283
function	O	O:0.999562
.	O	O:0.999772
	
Instead	O	O:0.999705
,	O	O:0.999994
how	O	O:0.999995
about	O	O:0.999959
using	O	O:0.999951
the	O	O:0.999898
numpy	O	O:0.999604
version	O	O:0.999834
of	O	O:0.999980
the	O	O:0.999955
ternary	O	O:0.994956
operator	O	O:0.998486
:	O	O:0.999896
#CODE	O	O:0.999885
	
I	O	O:0.999979
have	O	O:0.999963
long	O	O:0.999892
list	O	O:0.999887
of	O	O:0.999995
date	O	O:0.995862
in	O	O:0.999991
dataframe	B-API	O:0.999561
that	O	O:0.999984
need	O	O:0.999994
to	O	O:0.999999
be	O	O:1.000000
converted	O	O:0.999972
into	O	O:0.999777
datetime	O	O:0.998865
,	O	O:0.999991
the	O	O:0.999989
date	O	O:0.994745
is	O	O:0.999976
in	O	O:0.999980
the	O	O:0.999993
form	O	O:0.999723
"	O	O:0.999975
%d%m%Y	O	O:0.998539
"	O	O:0.999959
,	O	O:0.999951
and	O	O:0.999993
I	O	O:0.999990
apply	O	O:0.539997
`	O	O:0.998127
datetime.strptime	O	B-API:0.663220
(	O	O:0.999983
x	O	O:0.999789
,	O	O:0.999936
'	O	O:0.999986
%d%m%Y	O	O:0.999594
')`	O	O:0.999972
,	O	O:0.999952
which	O	O:0.999759
works	O	O:0.999949
fine	O	O:0.999963
until	O	O:0.999887
meet	O	O:0.999838
the	O	O:0.999995
date	O	O:0.994954
"	O	O:0.999984
3122012	O	O:0.998316
"	O	O:0.999988
,	O	O:0.999924
which	O	O:0.999881
should	O	O:0.999889
be	O	O:0.999994
datetime.datetime	O	O:0.989525
(	O	O:0.999844
2012	O	O:0.999247
,	O	O:0.999968
12	O	O:0.999934
,	O	O:0.999971
3	O	O:0.999968
,	O	O:0.999987
0	O	O:0.999982
,	O	O:0.999989
0	O	O:0.999860
)	O	O:0.999928
,	O	O:0.999900
but	O	O:0.999962
instead	O	O:0.999969
it	O	O:0.999994
throw	O	O:0.999962
the	O	O:0.999991
error	O	O:0.999126
message	O	O:0.996021
:	O	O:0.999947
#CODE	O	O:0.999818
	
This	O	O:0.999950
type	O	O:0.999535
of	O	O:0.999992
thing	O	O:0.999839
always	O	O:0.999958
feels	O	O:0.999925
somewhat	O	O:0.999588
clunky	O	O:0.999812
to	O	O:0.999987
me	O	O:0.999988
.	O	O:0.999885
	
Is	O	O:0.999985
there	O	O:0.999986
a	O	O:0.999995
preferred	O	O:0.999393
way	O	O:0.999981
to	O	O:0.999995
apply	O	O:0.992689
a	O	O:0.999899
function	O	O:0.999540
to	O	O:0.999998
only	O	O:0.999998
the	O	O:0.999999
nonnull	O	O:0.999996
rows	O	O:0.999956
of	O	O:0.999999
a	O	O:0.999998
column	O	O:0.999667
?	O	O:0.999967
	
Thank	O	O:0.999652
you	O	O:0.999873
for	O	O:0.999998
this	O	O:0.999956
,	O	O:0.999987
I	O	O:0.999972
had	O	O:0.999829
initially	O	O:0.999483
tried	O	O:0.999961
something	O	O:0.999896
like	O	O:0.999802
this	O	O:0.999876
but	O	O:0.999978
didn't	O	O:0.999743
realise	O	O:0.999918
that	O	O:0.999943
you	O	O:0.999998
only	O	O:0.999998
have	O	O:0.999996
to	O	O:0.999997
apply	O	O:0.993475
the	O	O:0.999962
filter	O	O:0.985746
on	O	O:0.999991
the	O	O:0.999997
RHS	O	O:0.999847
of	O	O:0.999968
the	O	O:0.999916
assignment	O	O:0.998423
and	O	O:0.999965
not	O	O:0.999963
the	O	O:0.999898
LHS	O	O:0.998700
.	O	O:0.999724
	
Pandas	O	O:0.997741
:	O	O:0.999940
How	O	O:0.999979
to	O	O:0.999992
use	O	O:0.999998
apply	O	B-API:0.635439
to	O	O:0.999926
create	O	O:0.999934
new	O	O:0.999963
dataframe	B-API	O:0.998522
	
and	O	O:0.999966
appy	O	O:0.999992
that	O	O:0.998446
function	O	O:0.999995
using	O	O:0.999976
apply	O	B-API:0.835605
to	O	O:0.999700
the	O	O:0.999986
created	O	O:0.999374
DataFrame	B-API	O:0.997124
using	O	O:0.999820
#CODE	O	O:0.998355
	
Can	O	O:0.999881
you	O	O:0.999948
reconstruct	O	O:0.999864
this	O	O:0.999954
problem	O	O:0.999839
?	O	O:0.999965
	
Did	O	O:0.999943
I	O	O:0.999987
get	O	O:0.999996
anything	O	O:0.999942
wrong	O	O:0.999879
regarding	O	O:0.999859
the	O	O:0.999986
use	O	O:0.999874
of	O	O:0.999952
the	O	O:0.999946
apply	O	B-API:0.863460
function	O	O:0.998377
?	O	O:0.999804
	
Because	O	O:0.999741
you're	O	O:0.999941
passing	O	O:0.999956
your	O	O:0.999911
`	O	O:0.999998
data	O	O:0.999709
`	O	O:0.999999
df	O	O:0.999887
as	O	O:0.999998
a	O	O:0.999958
reference	O	O:0.998531
and	O	O:0.999998
assigning	O	O:0.999952
directly	O	O:0.995705
to	O	O:0.999973
it	O	O:0.999999
each	O	O:0.999971
time	O	O:0.999989
by	O	O:0.999995
calling	O	O:0.999379
`	O	O:0.999960
apply	O	B-API:0.977772
`	O	O:0.999934
in	O	O:0.999949
your	O	O:0.999958
func	O	O:0.999008
then	O	O:0.999888
it	O	O:0.999999
overwrites	O	O:0.999897
with	O	O:0.999959
the	O	O:0.999997
last	O	O:0.997702
operation	O	O:0.998791
:	O	O:0.999962
#CODE	O	O:0.999887
	
@USER	O	O:0.994409
:	O	O:0.999960
You'll	O	O:0.999982
have	O	O:0.999984
to	O	O:0.999989
explain	O	O:0.999990
what	O	O:0.999906
you	O	O:0.999991
mean	O	O:0.999921
.	O	O:0.999973
	
Each	O	O:0.999236
column	O	O:0.999736
has	O	O:0.999988
only	O	O:0.999964
one	O	O:0.999990
dtype	B-API	B-API:0.990451
.	O	O:0.999807
	
You	O	O:0.999857
can	O	O:0.999974
subset	O	O:0.999985
based	O	O:0.999948
on	O	O:0.999993
any	O	O:0.999936
criterion	O	O:0.999963
you	O	O:0.999978
can	O	O:0.999995
apply	O	O:0.988224
to	O	O:0.999991
each	O	O:0.999990
item	O	O:0.999797
in	O	O:0.999994
the	O	O:0.999993
column	O	O:0.999654
.	O	O:0.999909
	
You	O	O:0.999940
can	O	O:0.999929
use	O	O:0.999994
`	O	O:0.999972
df	O	O:0.998476
.	O	O:0.999993
column	O	O:0.999702
.map	B-API	B-API:0.944140
`	O	O:0.999991
to	O	O:0.999975
apply	O	O:0.997290
a	O	O:0.999850
function	O	O:0.999315
to	O	O:0.999995
each	O	O:0.999992
element	O	O:0.999900
in	O	O:0.999998
a	O	O:0.999994
column	O	O:0.996246
:	O	O:0.999975
#CODE	O	O:0.999852
	
Why	O	O:0.999910
don't	O	O:0.999936
you	O	O:0.999976
use	O	O:0.999973
`	O	O:0.999960
apply	O	B-API:0.994417
`	O	O:0.999931
and	O	O:0.999919
on	O	O:0.999999
a	O	O:0.999951
modified	O	O:0.999750
dictionary	O	O:0.999514
lookup	O	O:0.868532
:	O	O:0.999943
#CODE	O	O:0.999705
	
And	O	O:0.999874
,	O	O:0.999990
apply	O	O:0.705186
it	O	O:0.999931
like	O	O:0.999932
this	O	O:0.999917
-	O	O:0.999985
#CODE	O	O:0.999672
	
And	O	O:0.999770
use	O	O:0.999916
it	O	O:0.999937
with	O	O:0.999712
apply	O	B-API:0.833426
#CODE	O	O:0.997810
	
Once	O	O:0.999954
this	O	O:0.999720
is	O	O:0.999997
created	O	O:0.999265
,	O	O:0.999998
you	O	O:0.999988
can	O	O:0.999996
create	O	O:0.999999
a	O	O:0.999998
function	O	O:0.999960
to	O	O:0.999995
split	O	O:0.999960
the	O	O:0.999995
categories	O	O:0.999923
column	O	O:0.999983
by	O	O:0.999997
the	O	O:0.999963
"	O	O:0.999906
,	O	O:0.999923
"	O	O:0.999985
and	O	O:0.999992
count	O	O:0.999791
the	O	O:0.999989
length	O	O:0.999192
of	O	O:0.999974
the	O	O:0.999979
resulting	O	O:0.999799
list	O	O:0.994649
.	O	O:0.999880
	
Use	O	O:0.999627
lambda	O	O:0.996962
and	O	O:0.999954
apply	O	B-API:0.871908
.	O	O:0.995665
	
Assuming	O	O:0.999825
that	O	O:0.999851
Category	O	O:0.999493
is	O	O:0.999996
actually	O	O:0.999870
a	O	O:0.999995
list	O	O:0.994481
,	O	O:0.999997
you	O	O:0.999985
can	O	O:0.999974
use	O	O:0.999998
`	O	O:0.999986
apply	O	B-API:0.993200
`	O	O:0.999443
(	O	O:0.999150
per	O	O:0.999941
@USER	O	O:0.998200
'	O	O:0.999974
s	O	O:0.999784
suggestion	O	O:0.996459
):	O	O:0.999934
#CODE	O	O:0.999546
	
You	O	O:0.999870
can	O	O:0.999920
groupy	O	O:0.994863
the	O	O:0.999959
'	O	O:0.999683
ITEM	O	O:0.996491
'	O	O:0.999928
and	O	O:0.999908
'	O	O:0.999981
CATEGORY	O	O:0.997215
'	O	O:0.999981
columns	O	O:0.999738
and	O	O:0.999998
then	O	O:0.999946
call	O	O:0.999353
`	O	O:0.999997
apply	O	B-API:0.992494
`	O	O:0.999973
on	O	O:0.999910
the	O	O:0.999993
df	O	O:0.999226
groupby	B-API	B-API:0.982752
object	O	O:0.999523
and	O	O:0.999989
pass	O	O:0.999549
the	O	O:0.999586
function	O	O:0.999506
`	O	O:0.999976
mode	O	O:0.996905
`	O	O:0.999989
.	O	O:0.999661
	
We	O	O:0.999968
can	O	O:0.999988
then	O	O:0.999997
call	O	O:0.999916
`	O	O:0.999992
reset_index	B-API	B-API:0.999937
`	O	O:0.999972
and	O	O:0.999987
pass	O	O:0.999603
param	O	O:0.998264
`	O	O:0.999990
drop=True	O	O:0.995286
`	O	O:0.999996
so	O	O:0.999977
that	O	O:0.999956
the	O	O:0.999993
multi-index	O	O:0.997551
is	O	O:0.999970
not	O	O:0.999991
added	O	O:0.999996
back	O	O:0.999836
as	O	O:0.999999
a	O	O:0.999997
column	O	O:0.999874
as	O	O:0.999993
you	O	O:0.999925
already	O	O:0.999985
have	O	O:0.999986
those	O	O:0.999969
columns	O	O:0.999590
:	O	O:0.999976
#CODE	O	O:0.999900
	
How	O	O:0.999805
to	O	O:0.999980
reference	O	O:0.999972
groupby	B-API	B-API:0.914056
index	O	O:0.999972
when	O	O:0.999874
using	O	O:0.999988
apply	O	O:0.524444
,	O	O:0.999711
transform	O	B-API:0.848930
,	O	O:0.999891
agg	O	B-API:0.950421
-	O	O:0.999948
Python	O	O:0.999013
Pandas	O	O:0.999873
?	O	O:0.999868
	
The	O	O:0.999902
question	O	O:0.997464
is	O	O:0.999997
that	O	O:0.999791
neither	O	O:0.999984
aggregate	O	O:0.602215
,	O	O:0.999985
apply	O	B-API:0.646990
,	O	O:0.999930
nor	O	O:0.999978
transform	O	O:0.593715
can	O	O:0.999978
reference	O	O:0.999996
to	O	O:0.999974
the	O	O:0.999999
index	O	O:0.999637
.	O	O:0.999900
	
Any	O	O:0.999843
idea	O	O:0.999612
how	O	O:0.999955
to	O	O:0.999995
work	O	O:0.999984
around	O	O:0.999977
this	O	O:0.999878
?	O	O:0.999974
	
After	O	O:0.999891
some	O	O:0.999866
tinkering	O	O:0.999436
around	O	O:0.999880
,	O	O:0.999980
I	O	O:0.999992
wrote	O	O:0.999989
a	O	O:0.999795
function	O	O:0.999967
that	O	O:0.999948
can	O	O:0.999996
be	O	O:1.000000
used	O	O:0.999965
with	O	O:0.999723
the	O	O:0.999963
`	O	O:0.999976
apply	O	B-API:0.998349
`	O	O:0.999958
method	O	O:0.999770
on	O	O:0.999999
a	O	O:0.999990
`	O	O:0.999927
groupby	B-API	B-API:0.999565
`	O	O:0.999969
.	O	O:0.998233
	
#CODE	O	O:0.998453
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999977
apply	O	B-API:0.978467
`	O	O:0.999992
to	O	O:0.999877
extract	O	O:0.999960
the	O	O:0.999995
numerical	O	O:0.999269
values	O	O:0.999576
,	O	O:0.999985
and	O	O:0.999998
do	O	O:0.999978
the	O	O:0.999979
counting	O	O:0.998137
there	O	O:0.998538
:	O	O:0.999975
#CODE	O	O:0.999885
	
If	O	O:0.999903
not	O	O:0.999960
already	O	O:0.999984
you	O	O:0.999994
need	O	O:0.999978
to	O	O:0.999999
convert	O	O:0.999975
to	O	O:0.999996
datetime	O	O:0.999934
,	O	O:0.999999
then	O	O:0.999944
you	O	O:0.999998
can	O	O:0.999997
call	O	O:0.999961
`	O	O:0.999998
apply	O	B-API:0.997869
`	O	O:0.999932
and	O	O:0.999721
use	O	O:0.999949
`	O	O:0.999679
datetime.strftime	O	O:0.580746
`	O	O:0.999994
to	O	O:0.999939
do	O	O:0.999999
the	O	O:0.999957
formatting	O	O:0.992434
:	O	O:0.999924
#CODE	O	O:0.999818
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999992
`	O	O:0.999973
apply	O	B-API:0.997178
`	O	O:0.999529
:	O	O:0.999171
#CODE	O	O:0.999898
	
When	O	O:0.999469
I	O	O:0.999996
try	O	O:0.999993
to	O	O:0.999985
plot	O	O:0.999997
a	O	O:0.999991
histogram	O	O:0.999840
,	O	O:0.999995
I	O	O:0.999984
apply	O	B-API:0.767282
:	O	O:0.998439
#CODE	O	O:0.999365
	
But	O	O:0.999816
indexing	O	O:0.999679
with	O	O:0.999972
your	O	O:0.999631
boolean	O	O:0.998782
can't	O	O:0.999950
be	O	O:0.999997
summarized	O	O:0.999847
in	O	O:0.999972
those	O	O:0.999955
few	O	O:0.999896
numbers	O	O:0.998540
.	O	O:0.999777
	
Either	O	O:0.999454
it	O	O:0.999976
has	O	O:0.999994
to	O	O:0.999997
carry	O	O:0.999980
the	O	O:0.999918
`	O	O:0.999962
index	O	O:0.998446
`	O	O:0.999998
array	O	O:0.999943
all	O	O:0.999989
the	O	O:0.999977
way	O	O:0.999907
through	O	O:0.999786
,	O	O:0.999993
or	O	O:0.999998
copy	O	O:0.998991
selected	O	O:0.999994
items	O	O:0.999552
from	O	O:0.999937
the	O	O:0.999971
`	O	O:0.999987
x	O	O:0.999111
`	O	O:0.999998
data	O	O:0.999713
buffer	O	O:0.999894
.	O	O:0.999894
	
`	O	O:0.999979
numpy	O	O:0.994808
`	O	O:0.999995
chooses	O	O:0.997547
to	O	O:0.999997
copy	O	O:0.997318
.	O	O:0.999940
	
You	O	O:0.999969
have	O	O:0.999973
choice	O	O:0.999960
of	O	O:0.999999
when	O	O:0.999778
to	O	O:0.999999
apply	O	O:0.991185
the	O	O:0.998712
`	O	O:0.999901
index	O	O:0.997685
`	O	O:0.999998
,	O	O:0.999995
now	O	O:0.999994
or	O	O:0.999997
further	O	O:0.999873
down	O	O:0.999867
the	O	O:0.999992
calling	O	O:0.998546
stack	O	B-API:0.874482
.	O	O:0.999794
	
I	O	O:0.999981
also	O	O:0.999946
tried	O	O:0.999815
with	O	O:0.999655
apply	O	B-API:0.917640
and	O	O:0.999920
I	O	O:0.999964
think	O	O:0.999299
it	O	O:0.999776
works	O	O:0.999558
,	O	O:0.999992
but	O	O:0.999970
I	O	O:0.999998
need	O	O:0.999993
to	O	O:0.999984
reset	O	O:0.999895
the	O	O:0.999952
index	O	O:0.999852
,	O	O:0.999992
which	O	O:0.999883
is	O	O:0.999997
something	O	O:0.999935
I'd	O	O:0.999980
rather	O	O:0.999899
avoid	O	O:0.996916
(	O	O:0.999978
I	O	O:0.999996
have	O	O:0.999992
a	O	O:0.999992
large	O	O:0.998762
dataset	O	O:0.999569
and	O	O:0.999980
I	O	O:0.999999
need	O	O:0.999945
to	O	O:0.999946
do	O	O:1.000000
this	O	O:0.999979
repeatedly	O	O:0.999474
)	O	O:0.999976
#CODE	O	O:0.998941
	
Trying	O	O:0.999806
to	O	O:0.999994
create	O	O:0.999997
a	O	O:0.999999
new	O	O:0.999965
column	O	O:0.999948
with	O	O:0.999948
the	O	O:0.999956
groupby	B-API	B-API:0.991124
calculation	O	O:0.999126
.	O	O:0.999851
	
In	O	O:0.999953
the	O	O:0.999993
code	O	O:0.999776
below	O	O:0.999947
,	O	O:0.999999
I	O	O:0.999995
get	O	O:0.999990
the	O	O:0.999963
correct	O	O:0.999953
calculated	O	O:0.999939
values	O	O:0.999916
for	O	O:0.999997
each	O	O:0.999652
date	O	O:0.988323
(	O	O:0.999987
see	O	O:0.999981
group	O	O:0.999374
below	O	O:0.999528
)	O	O:0.999979
but	O	O:0.999984
when	O	O:0.999828
I	O	O:0.999997
try	O	O:0.999999
to	O	O:0.999985
create	O	O:0.999997
a	O	O:0.999999
new	O	O:0.999885
column	O	O:0.999610
(	O	O:0.999990
df	O	O:0.999728
[	O	O:0.999870
'	O	O:0.999983
Data4	O	O:0.999720
'])	O	O:0.999870
with	O	O:0.999799
it	O	O:0.999978
I	O	O:0.999997
get	O	O:0.999956
NaN	O	O:0.985419
.	O	O:0.999890
	
So	O	O:0.999957
I	O	O:0.999984
am	O	O:0.999998
trying	O	O:0.999800
to	O	O:0.999998
create	O	O:0.999994
a	O	O:0.999999
new	O	O:0.999972
column	O	O:0.999906
in	O	O:0.999989
the	O	O:0.999995
dataframe	B-API	O:0.998687
with	O	O:0.999966
the	O	O:0.999998
sum	O	O:0.999912
of	O	O:0.999935
'	O	O:0.999985
Data3	O	O:0.999870
'	O	O:0.999964
for	O	O:0.999986
the	O	O:0.999990
all	O	O:0.999837
dates	O	O:0.997351
and	O	O:0.999985
apply	O	O:0.930621
that	O	O:0.998968
to	O	O:0.999998
each	O	O:0.999997
date	O	O:0.998990
row	O	O:0.999912
.	O	O:0.999864
	
For	O	O:0.999914
example	O	O:0.999417
,	O	O:0.999994
2015-05-08	O	O:0.999137
is	O	O:0.999984
in	O	O:0.999982
2	O	O:0.999993
rows	O	O:0.994198
(	O	O:0.999989
total	O	O:0.999390
is	O	O:0.999983
50+5	O	O:0.998105
=	O	O:0.999908
55	O	O:0.999771
)	O	O:0.999942
and	O	O:0.999940
in	O	O:0.999997
this	O	O:0.999872
new	O	O:0.999987
column	O	O:0.999885
I	O	O:0.999989
would	O	O:0.999998
like	O	O:0.999930
to	O	O:1.000000
have	O	O:0.999996
55	O	O:0.999914
in	O	O:0.999999
both	O	O:0.999964
of	O	O:0.999999
the	O	O:0.999993
rows	O	O:0.999349
.	O	O:0.999845
	
#CODE	O	O:0.998453
	
Pandas	O	O:0.996973
groupby	B-API	B-API:0.991463
:	O	O:0.999965
apply	O	B-API:0.576158
vs	O	O:0.999965
agggregate	O	O:0.998867
with	O	O:0.999971
missing	O	O:0.999296
categories	O	O:0.998440
	
I'm	O	O:0.999837
running	O	O:0.999885
into	O	O:0.999611
an	O	O:0.999985
issue	O	O:0.999806
where	O	O:0.999934
panda's	O	O:0.982646
`	O	O:0.999984
GroupBy.apply	B-API	B-API:0.999791
`	O	O:0.999961
and	O	O:0.999140
`	O	O:0.999995
GroupBy.aggregate	B-API	B-API:0.983233
`	O	O:0.999995
give	O	O:0.999858
different-shaped	O	O:0.999751
results	O	O:0.999950
when	O	O:0.999963
categorical	B-API	O:0.882980
data	O	O:0.999978
has	O	O:0.999977
missing	O	O:0.999689
values	O	O:0.998515
.	O	O:0.999769
	
`	O	O:0.999957
aggregate	O	B-API:0.990607
`	O	O:0.999980
retains	O	O:0.998214
all	O	O:0.999964
"	O	O:0.999986
known	O	O:0.997407
"	O	O:0.999991
categories	O	O:0.985875
,	O	O:0.999980
but	O	O:0.999969
`	O	O:0.999986
apply	O	B-API:0.941566
`	O	O:0.999987
only	O	O:0.999009
keeps	O	O:0.999981
the	O	O:0.999984
categories	O	O:0.999259
that	O	O:0.999962
are	O	O:1.000000
present	O	O:0.999703
in	O	O:0.999994
the	O	O:0.999995
data	O	O:0.999760
.	O	O:0.999915
	
Note	O	O:0.999940
that	O	O:0.999939
the	O	O:1.000000
last	O	O:0.999919
data	O	O:0.999984
frame	O	O:0.999986
is	O	O:0.999996
missing	O	O:0.999156
the	O	O:0.999948
`	O	O:0.999951
NaN	O	O:0.990608
`	O	O:1.000000
rows	O	O:0.999631
where	O	O:0.999942
`	O	O:0.999997
missing	O	O:0.997572
=	O	O:0.999954
b	O	O:0.999614
`	O	O:0.999933
.	O	O:0.999320
	
I	O	O:0.999935
understand	O	O:0.999882
why	O	O:0.999671
`	O	O:0.999972
apply	O	B-API:0.978299
`	O	O:0.999934
might	O	O:0.997441
do	O	O:0.999993
this	O	O:0.999582
(	O	O:0.999957
it	O	O:0.999964
chooses	O	O:0.999525
not	O	O:0.999989
to	O	O:0.999999
pass	O	O:0.999986
a	O	O:0.999996
group	O	O:0.999627
full	O	O:0.999891
of	O	O:0.999961
`	O	O:0.999959
NaN	O	O:0.993176
`	O	O:0.999997
s	O	O:0.999583
to	O	O:0.999997
the	O	O:0.999998
reduction	O	O:0.999114
function	O	O:0.999903
)	O	O:0.999985
.	O	O:0.999868
	
The	O	O:0.999931
above	O	O:0.999640
snippet	O	O:0.999509
is	O	O:0.999996
just	O	O:0.999934
a	O	O:0.999999
toy	O	O:0.998401
example	O	O:0.999689
:	O	O:0.999981
I	O	O:0.999999
actually	O	O:0.999998
need	O	O:0.999864
to	O	O:0.999986
use	O	O:0.999997
`	O	O:0.999952
apply	O	B-API:0.972958
`	O	O:0.999989
to	O	O:0.999858
get	O	O:1.000000
the	O	O:0.999994
result	O	O:0.999929
I	O	O:0.999995
want	O	O:0.999909
.	O	O:0.999313
	
Question	O	O:0.995802
:	O	O:0.999977
What's	O	O:0.999915
the	O	O:0.999994
best	O	O:0.999636
way	O	O:0.999984
to	O	O:0.999975
use	O	O:0.999995
`	O	O:0.999937
apply	O	B-API:0.996535
`	O	O:0.999948
but	O	O:0.999828
create	O	O:0.999888
an	O	O:0.999992
output	O	O:0.999961
shape	O	O:0.999957
matching	O	O:0.999778
the	O	O:0.999984
one	O	O:0.999988
returned	O	O:0.999943
by	O	O:0.999968
`	O	O:0.999985
aggregate	O	B-API:0.995271
`	O	O:0.999963
?	O	O:0.999617
	
Here's	O	O:0.999841
a	O	O:0.999976
fairly	O	O:0.999613
general	O	O:0.999492
solution	O	O:0.999822
you	O	O:0.999967
can	O	O:0.999994
apply	O	O:0.973344
to	O	O:0.999994
multiple	O	O:0.999990
columns	O	O:0.999776
.	O	O:0.999934
	
The	O	O:0.999682
'	O	O:0.999921
To	O	O:0.999962
'	O	O:0.999988
column	O	O:0.999913
doesn't	O	O:0.999977
need	O	O:0.999974
to	O	O:0.999999
be	O	O:1.000000
rounded	O	O:0.999891
,	O	O:0.999975
I	O	O:0.999995
just	O	O:0.999868
included	O	O:0.999868
it	O	O:0.999970
for	O	O:0.999990
the	O	O:0.999992
generality	O	O:0.999591
of	O	O:0.999991
two	O	O:0.999996
columns	O	O:0.999971
rather	O	O:0.999968
than	O	O:0.999872
one	O	O:0.999866
:	O	O:0.999970
#CODE	O	O:0.999877
	
Use	O	O:0.999971
this	O	O:0.999058
`	O	O:0.999990
func	O	O:0.893089
`	O	O:0.999991
and	O	O:0.999990
apply	O	O:0.950367
over	O	O:0.994444
the	O	O:0.999870
the	O	O:0.999858
`	O	O:0.999967
dff.groupby	O	O:0.968617
(	O	O:0.999968
'	O	O:0.999935
Group	O	O:0.998890
')`	O	O:0.999841
#CODE	O	O:0.998706
	
With	O	O:0.999783
the	O	O:0.999905
`	O	O:0.999981
func	O	O:0.947085
`	O	O:0.999986
function	O	O:0.999857
you	O	O:0.999990
wrote	O	O:0.999898
in	O	O:0.999999
your	O	O:0.999956
updated	O	O:0.999450
answer	O	O:0.998982
(	O	O:0.999938
i.e.	O	O:0.999982
your	O	O:0.999924
solution	O	O:0.999757
)	O	O:0.999997
,	O	O:0.999985
you	O	O:0.999974
should	O	O:0.999976
be	O	O:1.000000
able	O	O:0.999998
to	O	O:0.999981
use	O	O:0.999997
the	O	O:0.999773
`	O	O:0.999927
DataFrame.apply	B-API	B-API:0.999931
`	O	O:0.999974
method	O	O:0.999786
with	O	O:0.999949
parameter	O	O:0.999822
`	O	O:0.999983
axis=1	O	O:0.990388
`	O	O:0.999978
.	O	O:0.999244
	
(	O	O:0.999825
I	O	O:0.999959
haven't	O	O:0.999558
tested	O	O:0.998637
it	O	O:0.999962
,	O	O:0.999989
but	O	O:0.999992
perhaps	O	O:0.999919
you	O	O:0.999985
could	O	O:0.999980
try	O	O:0.999997
to	O	O:0.999995
apply	O	O:0.974142
it	O	O:0.999886
and	O	O:0.999980
report	O	O:0.999885
the	O	O:0.999948
error	O	O:0.999660
message	O	O:0.999584
,	O	O:0.999993
if	O	O:0.999997
any	O	O:0.999957
)	O	O:0.999938
	
The	O	O:0.999923
key	O	O:0.999894
to	O	O:0.999998
this	O	O:0.999996
answer	O	O:0.999747
is	O	O:0.999993
that	O	O:0.999848
the	O	O:0.999995
`	O	O:0.999983
apply	O	B-API:0.998641
`	O	O:0.999829
method	O	O:0.999171
accepts	O	O:0.999905
arbitrary	O	O:0.999818
positional	O	O:0.995025
keyword	O	O:0.999054
arguments	O	O:0.998563
and	O	O:0.999983
passes	O	O:0.999991
them	O	O:0.999294
to	O	O:0.999996
the	O	O:0.999988
function	O	O:0.999720
.	O	O:0.999888
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999994
`	O	O:0.999981
apply	O	B-API:0.984803
`	O	O:0.999966
with	O	O:0.997701
option	O	O:0.999879
`	O	O:0.999990
axis=1	O	O:0.983574
`	O	O:0.999978
.	O	O:0.999236
	
Then	O	O:0.999967
your	O	O:0.999972
solution	O	O:0.998894
is	O	O:0.999996
pretty	O	O:0.998920
concise	O	O:0.999250
.	O	O:0.999839
	
#CODE	O	O:0.998453
	
How	O	O:0.999897
to	O	O:0.999982
apply	O	O:0.981429
Cython	O	O:0.998493
to	O	O:0.999884
Pandas	O	O:0.999988
DataFrame	B-API	O:0.985064
	
After	O	O:0.999705
reading	O	O:0.999636
the	O	O:0.999935
whole	O	O:0.999490
Dataframe	B-API	O:0.996113
,	O	O:0.999984
I	O	O:0.999995
tried	O	O:0.999927
to	O	O:0.999962
apply	O	O:0.870472
function	O	O:0.999739
on	O	O:0.999912
one	O	O:0.999961
Serie	O	O:0.999756
:	O	O:0.999962
#CODE	O	O:0.999842
	
While	O	O:0.999894
doing	O	O:0.999970
preprocessing	O	O:0.999914
of	O	O:0.999977
data	O	O:0.999934
,	O	O:0.999998
I	O	O:0.999998
first	O	O:0.999944
try	O	O:0.999948
to	O	O:0.999995
remove	O	O:0.999941
all	O	O:0.999986
the	O	O:0.999987
punctuations	O	O:0.996921
and	O	O:0.999996
also	O	O:0.999985
the	O	O:0.999996
most	O	O:0.998850
common	O	O:0.999841
stop	O	O:0.998943
words	O	O:0.999495
.	O	O:0.999871
	
After	O	O:0.999717
doing	O	O:0.999920
that	O	O:0.999863
,	O	O:0.999991
I	O	O:0.999999
want	O	O:0.999979
to	O	O:0.999948
apply	O	O:0.979685
the	O	O:0.999804
Porter	O	O:0.998870
Stemming	O	O:0.999719
algorithm	O	O:0.999737
which	O	O:0.999743
is	O	O:0.999987
readily	O	O:0.999790
available	O	O:0.999599
in	O	O:0.999944
nltk.stem	O	O:0.975963
.	O	O:0.999886
	
You	O	O:0.999854
could	O	O:0.999825
`	O	O:0.999997
apply	O	B-API:0.965568
`	O	O:0.999943
and	O	O:0.999922
construct	O	O:0.999884
the	O	O:0.999974
datetime	O	O:0.997620
using	O	O:0.999980
your	O	O:0.999686
desired	O	O:0.999725
date	O	O:0.999638
values	O	O:0.999491
and	O	O:0.999997
then	O	O:0.999970
copying	O	O:0.999833
the	O	O:0.999994
time	O	O:0.999936
portion	O	O:0.999913
to	O	O:0.999997
the	O	O:0.999997
constructor	O	O:0.996791
:	O	O:0.999965
#CODE	O	O:0.999891
	
Use	O	O:0.999877
the	O	O:0.999899
`	O	O:0.999959
apply	O	B-API:0.998593
`	O	O:0.999820
method	O	O:0.998351
.	O	O:0.999930
	
#CODE	O	O:0.998453
	
With	O	O:0.999425
Pandas	O	O:0.999562
it's	O	O:0.999889
often	O	O:0.999764
a	O	O:0.999997
good	O	O:0.998966
idea	O	O:0.999831
to	O	O:0.999977
try	O	O:0.999996
and	O	O:0.999988
use	O	O:0.999959
`	O	O:0.999868
apply	O	B-API:0.982312
`	O	O:0.999971
together	O	O:0.996412
with	O	O:0.999988
an	O	O:0.999986
anonymous	O	O:0.999573
function	O	O:0.999942
to	O	O:0.999974
perform	O	O:0.999995
your	O	O:0.999906
calculation	O	O:0.999860
on	O	O:1.000000
every	O	O:0.999712
row	O	O:0.999922
.	O	O:0.999819
	
Does	O	O:0.999889
this	O	O:0.999972
work	O	O:0.999932
for	O	O:0.999994
you	O	O:0.999916
?	O	O:0.999961
	
:	O	O:0.999820
#CODE	O	O:0.999729
	
@USER	O	O:0.999191
The	O	O:0.999971
problem	O	O:0.998329
is	O	O:0.999994
that	O	O:0.999885
the	O	O:0.999996
`	O	O:0.999957
ExcelWriter	O	O:0.561766
`	O	O:0.999983
isn't	O	O:0.999842
created	O	O:0.999948
by	O	O:0.999947
`	O	O:0.999982
pd.ExcelWriter()	O	B-API:0.525090
`	O	O:0.999972
,	O	O:0.999960
but	O	O:0.999992
through	O	O:0.998803
`	O	O:0.999990
xlsxwriter.Workbook()	O	O:0.862077
`	O	O:0.999993
to	O	O:0.999992
just	O	O:0.999996
write	O	O:0.999986
some	O	O:0.999857
arbitrary	O	O:0.998944
(	O	O:0.999980
non-pandas	O	O:0.999651
)	O	O:0.999992
data	O	O:0.999735
.	O	O:0.999935
	
Unfortunately	O	O:0.999751
,	O	O:0.999996
the	O	O:0.999992
approach	O	O:0.999936
from	O	O:0.999981
your	O	O:0.999807
link	O	O:0.999791
doesn't	O	O:0.999945
apply	O	O:0.832984
here	O	O:0.997520
.	O	O:0.999584
	
when	O	O:0.999329
you	O	O:0.999991
open	O	O:0.999938
csv	O	O:0.999994
file	O	O:0.999958
from	O	O:0.999971
excel	O	O:0.999518
,	O	O:0.999996
it	O	O:0.999990
will	O	O:0.999945
convert	O	O:0.999984
your	O	O:0.999996
data	O	O:0.999906
to	O	O:0.999996
any	O	O:0.999999
type	O	O:0.998486
it	O	O:0.999981
should	O	O:0.999987
be	O	O:0.999992
in	O	O:0.999999
this	O	O:0.999912
case	O	O:0.999999
your	O	O:0.999994
data	O	O:0.999978
converted	O	O:0.999986
to	O	O:0.999995
date	O	O:0.999981
type	O	O:0.999849
then	O	O:0.999978
excel	O	O:0.999991
apply	O	O:0.973743
default	O	O:0.999131
date	O	O:0.997645
format	O	O:0.999764
to	O	O:0.999998
that	O	O:0.999999
data	O	O:0.999961
.	O	O:0.999975
	
Also	O	O:0.999793
,	O	O:0.999996
you	O	O:0.999984
can't	O	O:0.999963
control	O	O:0.999958
the	O	O:0.999996
date	O	O:0.999022
format	O	O:0.999915
of	O	O:0.999992
excel	O	O:0.999797
file	O	O:0.999973
since	O	O:0.999963
csv	O	O:0.999975
files	O	O:0.999862
is	O	O:0.999997
only	O	O:0.999958
a	O	O:0.999999
text	O	O:0.999515
file	O	O:0.999879
,	O	O:0.999991
no	O	O:0.999999
meta	O	O:0.999524
or	O	O:0.999998
hidden	O	O:0.999949
data	O	O:0.999987
to	O	O:0.999988
advise	O	O:0.999999
excel	O	O:0.999725
to	O	O:0.999980
proceed	O	O:0.999865
.	O	O:0.999912
	
Using	O	O:0.998783
`	O	O:0.999945
apply	O	B-API:0.988032
`	O	O:0.999827
	
You	O	O:0.999929
could	O	O:0.999887
use	O	O:0.999955
`	O	O:0.999982
pandas	O	O:0.998082
`'	O	O:0.999988
s	O	O:0.999173
`	O	O:0.999988
apply	O	B-API:0.974522
`	O	O:0.999855
for	O	O:0.999861
this	O	O:0.999674
.	O	O:0.999804
	
#CODE	O	O:0.998453
	
How	O	O:0.999873
can	O	O:0.999957
I	O	O:1.000000
now	O	O:0.999990
apply	O	O:0.699709
this	O	O:0.999926
test	O	O:0.999198
on	O	O:0.999999
a	O	O:0.999999
slice	O	O:0.999485
of	O	O:0.999988
the	O	O:0.999945
dataframe	B-API	O:0.997980
?	O	O:0.999940
	
#CODE	O	O:0.998453
	
Hi	O	O:0.999744
@USER	O	O:0.998724
!	O	O:0.999816
	
Thanks	O	O:0.998903
for	O	O:0.999995
your	O	O:0.999680
help	O	O:0.992181
.	O	O:0.999952
	
I	O	O:0.999949
upvoted	O	O:0.999982
your	O	O:0.998233
answer	O	O:0.999481
because	O	O:0.999902
it	O	O:0.999875
was	O	O:0.999991
helping	O	O:0.999799
me	O	O:0.999964
getting	O	O:0.999686
the	O	O:0.999885
job	O	O:0.999836
done	O	O:0.999426
.	O	O:0.999883
	
Thanks	O	O:0.999715
a	O	O:0.999984
lot	O	O:0.999248
for	O	O:0.999957
it	O	O:0.999673
!	O	O:0.999798
	
I	O	O:0.999840
am	O	O:0.999986
not	O	O:0.999955
sure	O	O:0.999925
whether	O	O:0.999917
it	O	O:0.999931
is	O	O:0.999992
really	O	O:0.999839
the	O	O:0.999984
answer	O	O:0.999743
to	O	O:0.999989
my	O	O:0.999998
question	O	O:0.999854
,	O	O:0.999994
though	O	O:0.998523
(	O	O:0.999987
How	O	O:0.999985
to	O	O:0.999991
apply	O	O:0.971290
the	O	O:0.999984
test	O	O:0.996409
to	O	O:0.999992
the	O	O:1.000000
dataframe	B-API	O:0.996975
)	O	O:0.999972
.	O	O:0.999917
	
Perhaps	O	O:0.999764
someone	O	O:0.999948
else	O	O:0.999944
can	O	O:0.999935
answer	O	O:0.999999
that	O	O:0.999896
question	O	O:0.999856
?	O	O:0.999981
	
One	O	O:0.999877
follow-up	O	O:0.997383
question	O	O:0.999404
:	O	O:0.999975
while	O	O:0.999981
this	O	O:0.999904
works	O	O:0.999987
great	O	O:0.999769
for	O	O:0.999960
"	O	O:0.999968
year	O	O:0.982172
"	O	O:0.999985
,	O	O:0.999965
I	O	O:0.999983
would	O	O:0.999995
like	O	O:0.999950
to	O	O:0.999999
do	O	O:1.000000
a	O	O:0.999996
similar	O	O:0.999726
thing	O	O:0.999953
for	O	O:0.999953
"	O	O:0.999953
yearmonth	O	O:0.991524
"	O	O:0.999950
,	O	O:0.999962
i.e.	O	O:0.999945
a	O	O:0.999995
combination	O	O:0.999796
of	O	O:0.999997
YYYYMM	O	O:0.999507
values	O	O:0.999214
(	O	O:0.999982
so	O	O:0.999999
that	O	O:0.999987
each	O	O:0.999989
month	O	O:0.999869
of	O	O:0.999996
each	O	O:0.997862
year	O	O:0.999809
gets	O	O:0.999939
a	O	O:0.999994
specific	O	O:0.999637
label	O	O:0.999712
)	O	O:0.999976
,	O	O:0.999952
As	O	O:0.999995
there	O	O:0.999706
is	O	O:0.999995
no	O	O:0.999975
attribute	O	O:0.999992
to	O	O:0.999997
directly	O	O:0.999994
extract	O	O:0.997731
"	O	O:0.999986
yearmonth	O	O:0.998470
"	O	O:0.999950
from	O	O:0.999487
index	O	O:0.999772
,	O	O:0.999999
what	O	O:0.999971
can	O	O:0.999978
I	O	O:1.000000
do	O	O:0.999990
in	O	O:0.999989
this	O	O:0.999906
case	O	O:0.999946
?	O	O:0.999983
	
Could	O	O:0.999569
I	O	O:0.999993
define	O	O:0.999930
a	O	O:0.999948
lambda	O	O:0.980330
function	O	O:0.999717
and	O	O:0.999972
apply	O	O:0.932411
this	O	O:0.998417
to	O	O:0.999889
the	O	O:0.999999
index	O	O:0.999925
values	O	O:0.999886
,	O	O:0.999997
for	O	O:0.999994
example	O	O:0.998985
?	O	O:0.999898
	
How	O	O:0.999876
to	O	O:0.999981
avoid	O	O:0.999995
return	O	O:0.999677
twice	O	O:0.999892
the	O	O:0.999997
first	O	O:0.999024
groupby	B-API	B-API:0.963496
object	O	O:0.999446
after	O	O:0.999825
to	O	O:0.999972
apply	O	O:0.950388
it	O	O:0.999891
in	O	O:0.999988
other	O	O:0.999633
function	O	O:0.999878
?	O	O:0.999914
	
In	O	O:0.999983
this	O	O:0.999967
case	O	O:0.999955
,	O	O:0.999994
I'm	O	O:0.999986
just	O	O:0.999932
printing	O	O:0.999640
,	O	O:0.999926
but	O	O:0.999973
python	O	O:0.999821
return	O	O:0.999583
the	O	O:0.999970
first	O	O:0.999917
group	O	O:0.999030
twice	O	O:0.999611
(	O	O:0.999990
see	O	O:0.999838
'	O	O:0.999980
word	O	O:0.999816
'	O	O:0.999975
=	O	O:0.999912
'	O	O:0.999996
a	O	O:0.999974
')	O	O:0.999419
.	O	O:0.999662
	
This	O	O:0.999842
occur	O	O:0.999752
with	O	O:0.999968
other	O	O:0.998890
function	O	O:0.999981
more	O	O:0.999627
elaborated	O	O:0.999728
too	O	O:0.999709
.	O	O:0.999925
	
Why	O	O:0.999792
?	O	O:0.999934
	
There	O	O:0.999641
are	O	O:0.999994
any	O	O:0.999987
solution	O	O:0.999042
for	O	O:0.999988
this	O	O:0.999587
?	O	O:0.999943
	
I	O	O:0.999930
would	O	O:0.999983
continue	O	O:0.999789
to	O	O:0.999997
use	O	O:0.999986
DataFrame()	B-API	B-API:0.997752
+	O	O:0.999831
groupby()	B-API	B-API:0.989738
+	O	O:0.999782
apply()	B-API	B-API:0.990160
+	O	O:0.999960
def	O	O:0.998850
f()	B-API	O:0.979327
if	O	O:0.999951
possible	O	O:0.999457
.	O	O:0.999894
	
You	O	O:0.999965
need	O	O:0.999910
to	O	O:0.999992
avoid	O	O:0.999983
for-loops	O	O:0.999749
and	O	O:0.999939
use	O	O:0.999969
the	O	O:0.998640
'	O	O:0.999835
apply	O	B-API:0.728324
'	O	O:0.999806
methods	O	O:0.998620
.	O	O:0.999799
	
See	O	O:0.999148
#URL	O	O:0.998414
	
but	O	O:0.999975
when	O	O:0.999747
I	O	O:0.999997
try	O	O:0.999998
to	O	O:0.999962
write	O	O:0.999999
a	O	O:0.999978
function	O	O:0.999586
in	O	O:0.999994
pandas	O	O:0.999947
to	O	O:0.999994
apply	O	O:0.989165
this	O	O:0.999722
to	O	O:0.999998
every	O	O:1.000000
cell	O	O:0.999956
of	O	O:0.999998
a	O	O:0.999995
column	O	O:0.999689
,	O	O:0.999995
it	O	O:0.999983
either	O	O:0.999924
fails	O	O:0.999946
because	O	O:0.999988
of	O	O:0.999987
an	O	O:0.999989
attribute	O	O:0.999996
error	O	O:0.999892
or	O	O:0.999991
I	O	O:0.999995
get	O	O:0.999997
a	O	O:0.999940
warning	O	O:0.999894
that	O	O:0.999974
a	O	O:0.999999
value	O	O:0.998765
is	O	O:0.999991
trying	O	O:0.999784
to	O	O:0.999994
be	O	O:1.000000
set	O	O:0.999960
on	O	O:0.999997
a	O	O:1.000000
copy	O	O:0.995057
of	O	O:0.999999
a	O	O:0.999964
slice	O	O:0.999698
from	O	O:0.999957
a	O	O:0.999959
DataFrame	B-API	O:0.972966
#CODE	O	O:0.999624
	
how	O	O:0.999904
can	O	O:0.999965
I	O	O:1.000000
apply	O	O:0.984128
this	O	O:0.999359
code	O	O:0.999758
to	O	O:0.999997
each	O	O:0.999994
element	O	O:0.999970
of	O	O:0.999996
a	O	O:0.999978
Series	O	O:0.999013
?	O	O:0.999936
	
The	O	O:0.999888
problem	O	O:0.999695
seems	O	O:0.999984
like	O	O:0.999936
you	O	O:0.999979
are	O	O:0.999997
trying	O	O:0.999977
to	O	O:0.999989
access	O	O:0.999942
and	O	O:0.999997
alter	O	O:0.999754
`	O	O:0.999928
row	O	O:0.998117
[	O	O:0.999909
'	O	O:0.999990
text	O	O:0.999674
']`	O	O:0.999837
and	O	O:0.999960
return	O	O:0.999705
the	O	O:0.999935
row	O	O:0.999977
itself	O	O:0.999920
when	O	O:0.999959
doing	O	O:0.999979
the	O	O:0.999994
apply	O	B-API:0.979964
function	O	O:0.999313
,	O	O:0.999994
when	O	O:0.999943
you	O	O:0.999989
do	O	O:0.999997
`	O	O:0.999997
apply	O	B-API:0.968724
`	O	O:0.999986
on	O	O:0.999962
a	O	O:0.999986
`	O	O:0.999968
DataFrame	B-API	O:0.908594
`	O	O:0.999990
,	O	O:0.999963
it's	O	O:0.999980
applying	O	O:0.999809
to	O	O:0.999950
each	O	O:0.999974
Series	O	O:0.999904
,	O	O:0.999998
so	O	O:0.999997
if	O	O:0.999994
changed	O	O:0.999721
to	O	O:0.999996
this	O	O:0.999987
should	O	O:0.999939
help	O	O:0.998626
:	O	O:0.999991
#CODE	O	O:0.999817
	
Alternatively	O	O:0.999696
you	O	O:0.999944
might	O	O:0.999962
use	O	O:0.999949
`	O	O:0.999985
lambda	O	O:0.994910
`	O	O:0.999996
as	O	O:0.999860
below	O	O:0.999312
,	O	O:0.999992
and	O	O:0.999994
directly	O	O:0.999867
apply	O	B-API:0.628930
to	O	O:0.999964
only	O	O:0.999948
`	O	O:0.999999
text	O	O:0.995374
`	O	O:0.999995
column	O	O:0.995194
:	O	O:0.999988
#CODE	O	O:0.999826
	
You	O	O:0.999884
can	O	O:0.999981
apply	O	O:0.958463
on	O	O:0.999929
`	O	O:0.999886
df.groupby	B-API	B-API:0.990190
(	O	O:0.999957
'	O	O:0.999972
Sym	O	O:0.998062
')	O	O:0.999863
[	O	O:0.999846
'	O	O:0.999985
close	O	O:0.999885
']`	O	O:0.999983
using	O	O:0.999590
`	O	O:0.998968
pd.rolling_max	B-API	B-API:0.999875
(	O	O:0.999980
x	O	O:0.999913
,	O	O:0.999977
2	O	O:0.999974
)`	O	O:0.999433
instead	O	O:0.999811
#CODE	O	O:0.999806
	
We	O	O:0.999948
do	O	O:0.999941
it	O	O:0.999994
with	O	O:0.999967
an	O	O:0.999994
apply	O	O:0.708443
on	O	O:0.999805
axis=1	O	O:0.990732
::	O	O:0.999929
#CODE	O	O:0.999197
	
Well	O	O:0.999768
this	O	O:0.999815
works	O	O:0.999768
`	O	O:0.999984
df.assign	B-API	B-API:0.988654
(	O	O:0.999992
ts4=	O	O:0.997689
np.where	B-API	B-API:0.993601
(	O	O:0.999970
df.a	O	O:0.990006
*	O	O:0.999978
df.b	O	O:0.991357
-	O	O:0.999984
df.c	O	O:0.994192
>	O	O:0.999949
1	O	O:0.999905
,	O	O:0.999963
'	O	O:0.999981
XS	B-API	O:0.910988
'	O	O:0.999977
,	O	O:0.999988
'	O	O:0.999979
L	O	O:0.999971
'))`	O	O:0.999882
,	O	O:0.999991
the	O	O:0.999986
problem	O	O:0.999696
with	O	O:0.999934
expression	O	O:0.999557
`	O	O:0.999995
ts4=lambda	O	O:0.997070
x	O	O:0.999895
:	O	O:0.999932
'	O	O:0.999993
XS	B-API	O:0.970456
'	O	O:0.999971
if	O	O:0.999984
x.a	O	O:0.998535
*	O	O:0.999972
x.b	O	O:0.998322
-	O	O:0.999986
x.c	O	O:0.998285
>	O	O:0.999961
1	O	O:0.999974
else	O	O:0.999696
'	O	O:0.999981
L	O	O:0.999951
'`	O	O:0.999773
is	O	O:0.999956
that	O	O:0.999712
it	O	O:0.999998
wonly	O	O:0.999801
works	O	O:0.999794
in	O	O:0.999990
the	O	O:0.999970
apply	O	B-API:0.794398
because	O	O:0.999410
you're	O	O:0.999904
using	O	O:0.999964
`	O	O:0.999956
axis=1	O	O:0.972720
`	O	O:0.999990
so	O	O:0.999772
you're	O	O:0.999983
comparing	O	O:0.999965
single	O	O:0.999926
scalar	O	O:0.999957
values	O	O:0.999577
,	O	O:0.999999
your	O	O:0.999947
expression	O	O:0.999216
isn't	O	O:0.999972
so	O	O:0.999930
it's	O	O:0.999695
not	O	O:0.999980
valid	O	O:0.999750
	
What	O	O:0.999751
I	O	O:0.999985
am	O	O:0.999998
hoping	O	O:0.998277
to	O	O:0.999987
achieve	O	O:0.999979
,	O	O:0.999982
is	O	O:0.999995
to	O	O:0.999985
apply	O	O:0.969821
the	O	O:0.999953
logic	O	O:0.999716
of	O	O:0.999978
`	O	O:0.999980
conditions	O	O:0.996785
`	O	O:0.999997
to	O	O:0.999751
`	O	O:1.000000
indicators	O	O:0.993730
`	O	O:0.999995
in	O	O:0.999991
order	O	O:0.999973
to	O	O:0.999995
produce	O	O:0.999998
a	O	O:0.999995
new	O	O:0.999841
dataframe	B-API	O:0.999486
called	O	O:0.998910
`	O	O:0.999995
signals	O	O:0.907031
`	O	O:0.999976
.	O	O:0.999689
	
To	O	O:0.999979
give	O	O:0.999887
you	O	O:0.999987
an	O	O:0.999999
idea	O	O:0.999931
of	O	O:0.999989
what	O	O:0.999669
I'm	O	O:0.999996
looking	O	O:0.999887
for	O	O:0.999967
,	O	O:0.999980
see	O	O:0.999830
below	O	O:0.998847
.	O	O:0.999921
	
This	O	O:0.999762
looks	O	O:0.999988
only	O	O:0.999961
at	O	O:0.999998
the	O	O:0.999992
first	O	O:0.999803
condition	O	O:0.999817
in	O	O:0.999977
`	O	O:0.999995
conditions	O	O:0.987493
`	O	O:0.999987
and	O	O:0.999987
the	O	O:0.999998
fifth	O	O:0.999431
value	O	O:0.999839
in	O	O:0.999829
`	O	O:0.999993
indicator	O	O:0.989430
`	O	O:0.999867
(	O	O:0.999893
because	O	O:0.999958
it	O	O:0.999984
evaluates	O	O:0.999582
to	O	O:0.999978
True	O	O:0.999443
):	O	O:0.999943
#CODE	O	O:0.999693
	
Just	O	O:0.999872
define	O	O:0.999924
a	O	O:0.999960
function	O	O:0.999831
that	O	O:0.999943
fits	O	O:0.999991
your	O	O:0.999973
needs	O	O:0.999954
then	O	O:0.999920
apply	O	O:0.845211
it	O	O:0.999883
.	O	O:0.999740
	
It	O	O:0.999948
can	O	O:0.999965
be	O	O:1.000000
quite	O	O:0.999981
complicated	O	O:0.999725
as	O	O:0.999989
well	O	O:0.993510
:	O	O:0.999977
#CODE	O	O:0.999697
	
This	O	O:0.999667
would	O	O:0.999954
apply	O	O:0.894285
the	O	O:0.999986
desired	O	O:0.999154
operation	O	O:0.999935
to	O	O:0.999992
all	O	O:1.000000
the	O	O:0.999998
rows	O	O:0.998219
and	O	O:0.999961
is	O	O:0.999998
considerably	O	O:0.995172
faster	O	O:0.999312
	
This	O	O:0.999676
gives	O	O:0.999397
`	O	O:0.999955
AttributeError	O	O:0.997552
:	O	O:0.999880
'	O	O:0.999976
list	O	O:0.998228
'	O	O:0.999911
object	O	O:0.999856
has	O	O:0.999953
no	O	O:0.999974
attribute	O	O:0.999896
'	O	O:0.999987
apply	O	O:0.501031
'`	O	O:0.999250
	
Use	O	O:0.999624
`	O	O:0.999967
apply	O	B-API:0.988725
`	O	O:0.999889
and	O	O:0.999943
pass	O	O:0.999819
your	O	O:0.999515
func	O	O:0.994071
to	O	O:0.999966
it	O	O:0.999979
:	O	O:0.999977
#CODE	O	O:0.999901
	
The	O	O:0.999943
correct	O	O:0.999881
way	O	O:0.999991
as	O	O:0.999985
EdChum	O	O:0.999600
pointed	O	O:0.999643
out	O	O:0.999823
is	O	O:0.999992
to	O	O:0.999950
use	O	O:0.999994
`	O	O:0.999954
apply	O	B-API:0.968605
`	O	O:0.999976
on	O	O:0.999847
the	O	O:0.999982
'	O	O:0.999983
location	O	O:0.999713
'	O	O:0.999990
column	O	O:0.999838
.	O	O:0.999926
	
You	O	O:0.999891
could	O	O:0.999943
compress	O	O:0.962054
that	O	O:0.999992
code	O	O:0.999924
in	O	O:0.999996
one	O	O:0.999957
line	O	O:0.998152
:	O	O:0.999969
#CODE	O	O:0.999856
	
I	O	O:0.999996
then	O	O:0.999950
apply	O	O:0.761584
the	O	O:0.999978
following	O	O:0.998932
filter	O	O:0.995779
to	O	O:0.999932
`	O	O:1.000000
ORD_ticks	O	O:0.986330
`	O	O:0.999998
to	O	O:0.999979
get	O	O:0.999995
`	O	O:0.999996
ORD_prices	O	O:0.934999
`	O	O:0.999962
:	O	O:0.999835
#CODE	O	O:0.999908
	
possible	O	O:0.999872
duplicate	O	O:0.999958
of	O	O:0.999858
[	O	O:0.999960
Parallelize	O	O:0.999970
apply	O	B-API:0.859668
after	O	O:0.999455
pandas	O	O:0.997574
groupby	B-API	B-API:0.974114
]	O	O:0.998446
(	O	O:0.999708
#URL	O	O:0.999471
)	O	O:0.999917
	
No	O	O:0.999931
it	O	O:0.999978
won't	O	O:0.999937
see	O	O:0.999993
my	O	O:0.999997
edit	O	O:0.999643
,	O	O:0.999999
when	O	O:0.999915
you	O	O:0.999992
call	O	O:0.999917
`	O	O:0.999995
dropna()	B-API	B-API:0.999515
`	O	O:0.999996
on	O	O:0.999988
a	O	O:0.999994
series	O	O:0.999167
(	O	O:0.999975
which	O	O:0.999779
is	O	O:0.999987
what	O	O:0.999696
we're	O	O:0.999956
doing	O	O:0.999956
here	O	O:0.999730
when	O	O:0.999485
calling	O	O:0.999577
`	O	O:0.999995
apply	O	B-API:0.979766
`	O	O:0.999982
on	O	O:0.999967
a	O	O:0.999999
df	O	O:0.999246
)	O	O:0.999974
it	O	O:0.999985
drops	O	O:0.999885
an	O	O:0.999998
entry	O	O:0.999849
in	O	O:0.999983
the	O	O:0.999952
series	O	O:0.999927
not	O	O:0.999988
an	O	O:1.000000
entire	O	O:0.999871
row	O	O:0.999829
	
For	O	O:0.999917
the	O	O:0.999988
expanding	O	O:0.999301
product	O	O:0.999353
,	O	O:0.999993
there's	O	O:0.999862
`	O	O:0.999988
cumprod()	B-API	B-API:0.976980
`	O	O:0.999985
.	O	O:0.999542
	
For	O	O:0.999921
the	O	O:0.999980
rolling	O	O:0.963019
version	O	O:0.999615
,	O	O:0.999992
I	O	O:0.999997
think	O	O:0.999930
you'll	O	O:0.999864
have	O	O:0.999975
to	O	O:0.999995
use	O	O:0.999998
`	O	O:0.999896
rolling_apply	B-API	B-API:0.999878
`	O	O:0.999992
to	O	O:0.999940
apply	O	O:0.977489
`	O	O:0.999890
prod()	B-API	B-API:0.999000
`	O	O:0.999994
to	O	O:0.999975
each	O	O:0.999527
window	O	O:0.999696
.	O	O:0.999891
	
Hello	O	O:0.997815
.	O	O:0.999771
	
Great	O	O:0.998193
:	O	O:0.999985
adopted	O	O:0.999901
to	O	O:0.999996
the	O	O:0.999993
"	O	O:0.999992
real	O	O:0.984587
"	O	O:0.999992
dataframe	B-API	O:0.997628
where	O	O:0.999926
I	O	O:0.999998
have	O	O:0.999992
to	O	O:0.999964
apply	O	O:0.989773
this	O	O:0.999559
loop	O	O:0.999565
,	O	O:0.999986
it	O	O:0.999927
worked	O	O:0.999813
out	O	O:0.999973
perfectly	O	O:0.999066
!	O	O:0.999860
	
To	O	O:0.999861
groupby	B-API	B-API:0.961021
w.r.t	O	O:0.998804
the	O	O:0.999901
first	O	O:0.999268
groupby	B-API	B-API:0.960329
object	O	O:0.999434
in	O	O:0.999982
that	O	O:0.999936
way	O	O:0.999942
is	O	O:0.999999
something	O	O:0.999451
I	O	O:0.999978
should	O	O:0.999992
have	O	O:0.999739
figured	O	O:0.999951
out	O	O:0.999946
myself	O	O:0.998836
.	O	O:0.999849
	
Apologize	O	O:0.999336
for	O	O:0.999983
my	O	O:0.999877
ignorance	O	O:0.998843
;-)	O	O:0.999563
	
I	O	O:0.999991
normally	O	O:0.999952
use	O	O:0.999762
`	O	O:0.999902
apply	O	B-API:0.985518
`	O	O:0.999876
for	O	O:0.999768
this	O	O:0.999964
kind	O	O:0.999838
of	O	O:0.999994
thing	O	O:0.999498
;	O	O:0.999992
it's	O	O:0.999793
basically	O	O:0.999963
the	O	O:0.999992
DataFrame	B-API	O:0.997131
version	O	O:0.999961
of	O	O:0.999961
map	O	B-API:0.982051
(	O	O:0.999989
the	O	O:0.999990
axis	O	O:0.999548
parameter	O	O:0.999960
lets	O	O:0.999879
you	O	O:0.999991
decide	O	O:0.999924
whether	O	O:0.999957
to	O	O:0.999986
apply	O	O:0.997737
your	O	O:0.998595
function	O	O:0.999943
to	O	O:1.000000
rows	O	O:0.999991
or	O	O:0.999994
columns	O	O:0.999483
):	O	O:0.999985
#CODE	O	O:0.999806
	
To	O	O:0.999951
do	O	O:0.999990
that	O	O:0.999972
,	O	O:0.999999
you	O	O:0.999994
can	O	O:0.999971
use	O	O:0.999999
`	O	O:0.999989
apply	O	B-API:0.980232
`	O	O:0.999970
with	O	O:0.990994
`	O	O:0.999989
axis=1	O	O:0.988291
`	O	O:0.999974
.	O	O:0.999304
	
However	O	O:0.999697
,	O	O:0.999994
instead	O	O:0.999988
of	O	O:0.999995
being	O	O:0.999752
called	O	O:0.999686
with	O	O:0.999957
three	O	O:0.999856
separate	O	O:0.999748
arguments	O	O:0.997440
(	O	O:0.999993
one	O	O:0.999989
for	O	O:0.999995
each	O	O:0.999906
column	O	O:0.999783
)	O	O:1.000000
your	O	O:0.999932
specified	O	O:0.998237
function	O	O:0.999970
will	O	O:0.999972
then	O	O:0.999978
be	O	O:1.000000
called	O	O:0.999945
with	O	O:0.999981
a	O	O:0.999995
single	O	O:0.999292
argument	O	O:0.999952
for	O	O:0.999989
each	O	O:0.999093
row	O	O:0.999726
,	O	O:0.999966
and	O	O:0.999997
that	O	O:0.999816
argument	O	O:0.999957
will	O	O:0.999959
be	O	O:0.999998
a	O	O:0.999992
Series	O	O:0.998581
containing	O	O:0.999816
the	O	O:0.999997
data	O	O:0.999732
for	O	O:0.999998
that	O	O:0.999864
row	O	O:0.999899
.	O	O:0.999916
	
You	O	O:0.999862
can	O	O:0.999966
either	O	O:0.999999
account	O	O:0.999702
for	O	O:0.999998
this	O	O:0.999752
in	O	O:0.999997
your	O	O:0.998466
function	O	O:0.999162
:	O	O:0.999979
#CODE	O	O:0.999848
	
Note	O	O:0.999911
the	O	O:0.999968
double	O	O:0.988275
brackets	O	O:0.999368
.	O	O:0.999850
	
(	O	O:0.999834
This	O	O:0.999875
doesn't	O	O:0.999943
really	O	O:0.999948
have	O	O:0.999994
anything	O	O:0.999981
to	O	O:0.999992
do	O	O:0.999998
with	O	O:0.999953
`	O	O:0.999983
apply	O	B-API:0.914702
`	O	O:0.999877
;	O	O:0.999584
indexing	O	O:0.999786
with	O	O:0.999971
a	O	O:0.999986
list	O	O:0.984915
is	O	O:0.999986
the	O	O:0.999974
normal	O	O:0.999534
way	O	O:0.999984
to	O	O:0.999983
access	O	O:0.999997
multiple	O	O:0.999985
columns	O	O:0.999974
from	O	O:0.999976
a	O	O:0.999990
DataFrame	B-API	O:0.990940
.	O	O:0.999939
)	O	O:0.999975
	
However	O	O:0.999596
,	O	O:0.999979
it's	O	O:0.999931
important	O	O:0.999720
to	O	O:0.999994
note	O	O:0.999997
that	O	O:0.999873
in	O	O:0.999999
many	O	O:0.999982
cases	O	O:0.999777
you	O	O:0.999983
don't	O	O:0.999987
need	O	O:0.999990
to	O	O:0.999995
use	O	O:0.999998
`	O	O:0.999951
apply	O	B-API:0.985166
`	O	O:0.999949
,	O	O:0.999921
because	O	O:0.999991
you	O	O:0.999939
can	O	O:0.999999
just	O	O:0.999995
use	O	O:0.999998
vectorized	O	O:0.999607
operations	O	O:0.999694
on	O	O:0.999987
the	O	O:0.999998
columns	O	O:0.999967
themselves	O	O:0.999458
.	O	O:0.999971
	
The	O	O:0.999888
`	O	O:0.999989
combine	O	O:0.957922
`	O	O:0.999992
function	O	O:0.999898
above	O	O:0.999957
can	O	O:0.999986
simply	O	O:0.999997
be	O	O:0.999999
called	O	O:0.999707
with	O	O:0.999802
the	O	O:0.999956
DataFrame	B-API	O:0.999777
columns	O	O:0.999987
themselves	O	O:0.999955
as	O	O:0.999999
the	O	O:0.999876
arguments	O	O:0.992475
:	O	O:0.999918
#CODE	O	O:0.999873
	
As	O	O:0.999965
above	O	O:0.999777
,	O	O:0.999997
there	O	O:0.999883
are	O	O:0.999988
two	O	O:0.999986
basic	O	O:0.999929
ways	O	O:0.999810
to	O	O:0.999972
do	O	O:0.999999
this	O	O:0.999878
:	O	O:0.999995
a	O	O:0.999993
general	O	O:0.992458
but	O	O:0.999952
non-vectorized	O	O:0.999572
way	O	O:0.999971
using	O	O:0.999751
`	O	O:0.999864
apply	O	B-API:0.996902
`	O	O:0.999824
,	O	O:0.999646
and	O	O:0.999999
a	O	O:0.999969
faster	O	O:0.995978
vectorized	O	O:0.999451
way	O	O:0.999458
.	O	O:0.999708
	
Suppose	O	O:0.999712
you	O	O:0.999990
have	O	O:0.999982
a	O	O:0.999999
DataFrame	B-API	O:0.997473
like	O	O:0.999933
this	O	O:0.999633
:	O	O:0.999978
#CODE	O	O:0.999843
	
You	O	O:0.999886
can	O	O:0.999985
define	O	O:0.999994
a	O	O:0.999980
function	O	O:0.999853
that	O	O:0.999918
returns	O	O:0.999964
a	O	O:0.999994
Series	O	O:0.998811
for	O	O:0.999989
each	O	O:0.999616
value	O	O:0.999710
,	O	O:0.999980
and	O	O:0.999998
then	O	O:0.999731
`	O	O:0.999997
apply	O	B-API:0.940117
`	O	O:0.999980
it	O	O:0.999853
to	O	O:0.999998
the	O	O:0.999999
column	O	O:0.997812
:	O	O:0.999980
#CODE	O	O:0.999925
	
data	O	O:0.999411
=	O	O:0.999905
ascii.read	O	O:0.995621
(	O	O:0.999993
table	O	O:0.999739
)	O	O:0.999832
(	O	O:0.999959
and	O	O:0.999995
apply	O	O:0.610266
the	O	O:0.999788
formatters	O	O:0.996504
)	O	O:0.999906
	
Id	O	O:0.999921
assume	O	O:0.999934
you	O	O:0.999993
want	O	O:0.999976
to	O	O:0.999999
keep	O	O:0.999987
the	O	O:0.999996
mapping	O	O:0.999830
dictionaries	O	O:0.999593
around	O	O:0.999960
for	O	O:0.999986
later	O	O:0.999335
use	O	O:0.999865
,	O	O:0.999916
which	O	O:0.999904
you	O	O:0.999957
would	O	O:0.999995
loose	O	O:0.999966
with	O	O:0.999854
function	O	O:0.999654
calls	O	O:0.999757
..	O	O:0.999842
	
But	O	O:0.999982
that	O	O:0.999979
depends	O	O:0.999935
on	O	O:0.999993
the	O	O:0.999985
overall	O	O:0.999274
purpose	O	O:0.999239
and	O	O:0.999997
extent	O	O:0.998115
of	O	O:0.999945
the	O	O:0.999919
code	O	O:0.999451
.	O	O:0.999904
	
You	O	O:0.999933
can	O	O:0.999963
use	O	O:0.999990
use	O	O:0.999589
```	O	O:0.999237
enumerate	O	O:0.954357
```	O	O:0.999992
to	O	O:0.999974
eliminate	O	O:0.999987
the	O	O:0.999998
need	O	O:0.999963
to	O	O:0.999999
have	O	O:0.999999
the	O	O:0.999970
```	O	O:0.999967
u_rows	O	O:0.963399
```	O	O:0.999904
and	O	O:0.999840
```	O	O:0.999975
u_cols	O	O:0.953411
```	O	O:0.999965
variables	O	O:0.991236
.	O	O:0.999922
	
Also	O	O:0.999763
,	O	O:0.999998
you	O	O:0.999990
can	O	O:0.999988
apply	O	O:0.991763
the	O	O:0.999998
mappings	O	O:0.999642
directly	O	O:0.999626
in	O	O:0.999993
the	O	O:0.999988
argument	O	O:0.999935
of	O	O:0.999932
```	O	O:0.999773
coo_matrix	O	O:0.838410
```	O	O:0.999974
to	O	O:0.999980
save	O	O:0.999976
space	O	O:0.999746
,	O	O:0.999980
but	O	O:0.999996
that	O	O:0.999768
is	O	O:0.999999
a	O	O:0.999992
bit	O	O:0.999549
messy	O	O:0.999004
.	O	O:0.999747
	
The	O	O:0.999906
series	O	O:0.999961
produced	O	O:0.999934
by	O	O:0.999926
`	O	O:0.999890
(	O	O:0.999882
df	O	O:0.999890
[	O	O:0.999955
"	O	O:0.999997
a	O	O:0.999964
"]	O	O:0.999685
|	O	O:0.999938
df	O	O:0.999336
[	O	O:0.999928
"	O	O:0.999975
b	O	O:0.999818
"])`	O	O:0.999840
is	O	O:0.999912
of	O	O:0.999979
type	O	O:0.978265
`	O	O:0.999996
bool	O	O:0.669142
`	O	O:0.999984
.	O	O:0.999022
	
This	O	O:0.999835
surprised	O	O:0.999857
me	O	O:0.999979
because	O	O:0.999772
`	O	O:0.999965
|	O	O:0.999852
`	O	O:0.999988
is	O	O:0.999975
a	O	O:0.999965
bitwise	O	O:0.990105
operator	O	O:0.999829
,	O	O:0.999994
so	O	O:0.999993
I	O	O:0.999993
expected	O	O:0.999991
the	O	O:0.999966
series	O	O:0.999956
to	O	O:0.999998
be	O	O:1.000000
of	O	O:0.999998
type	O	O:0.993162
`	O	O:0.999993
int	O	O:0.980175
`	O	O:0.999976
.	O	O:0.998852
	
Thus	O	O:0.999853
,	O	O:0.999995
I	O	O:0.999999
have	O	O:0.999989
to	O	O:0.999982
do	O	O:0.999999
the	O	O:0.999986
`	O	O:0.999926
apply	O	B-API:0.989742
(	O	O:0.999855
lambda	O	O:0.999482
...	O	O:0.999857
)`	O	O:0.999809
to	O	O:0.999986
get	O	O:0.999999
the	O	O:0.999996
desired	O	O:0.999512
`	O	O:0.999977
int	O	O:0.993498
`	O	O:0.999994
column	O	O:0.997344
.	O	O:0.999960
	
I	O	O:0.999979
have	O	O:0.999947
been	O	O:0.999147
trying	O	O:0.999979
with	O	O:0.999976
a	O	O:0.999771
function	O	O:0.999440
and	O	O:0.999981
apply	O	B-API:0.507237
.	O	O:0.999414
here	O	O:0.993228
is	O	O:0.999997
my	O	O:0.999993
data	O	O:0.999951
set	O	O:0.999769
and	O	O:0.999993
code	O	O:0.999280
#CODE	O	O:0.999202
	
An	O	O:0.999912
alternative	O	O:0.999773
would	O	O:0.999970
be	O	O:0.999998
to	O	O:0.999999
apply	O	O:0.975972
strip	O	B-API:0.740239
to	O	O:0.999979
the	O	O:1.000000
columns	O	O:0.999931
to	O	O:0.999995
ensure	O	O:0.999997
they	O	O:0.999959
don't	O	O:0.999989
have	O	O:0.999983
leading	O	O:0.999029
spaces	O	O:0.993793
:	O	O:0.999918
#CODE	O	O:0.999903
	
Then	O	O:0.999650
apply	O	O:0.672581
`	O	O:0.999978
maxminbid	O	O:0.982785
`	O	O:0.999988
function	O	O:0.999803
on	O	O:0.999952
`	O	O:0.999992
Auction_id	O	O:0.980151
`	O	O:0.999983
grouped	O	O:0.997487
objects	O	O:0.999680
#CODE	O	O:0.999062
	
And	O	O:0.999952
I	O	O:0.999993
apply	O	O:0.814355
the	O	O:0.998574
following	O	O:0.998486
group-by	O	O:0.999540
code	O	O:0.999209
#CODE	O	O:0.999795
	
This	O	O:0.999416
is	O	O:0.999993
on	O	O:0.999991
a	O	O:0.999997
Windows	O	O:0.998703
7	O	O:0.999825
Enterprise	O	O:0.999346
Service	O	O:0.999353
Pack	O	O:0.998869
1	O	O:0.999827
machine	O	O:0.999226
and	O	O:0.999970
it	O	O:0.999992
seems	O	O:0.999890
to	O	O:0.999996
apply	O	O:0.959136
to	O	O:0.999977
every	O	O:0.999963
CSV	O	O:0.999982
file	O	O:0.999929
I	O	O:0.999992
create	O	O:0.999563
.	O	O:0.999748
	
In	O	O:0.999985
this	O	O:0.999980
particular	O	O:0.999976
case	O	O:0.999941
the	O	O:0.999997
binary	O	O:0.999879
from	O	O:0.999917
location	O	O:0.999758
55	O	O:0.999570
is	O	O:0.999956
00101001	O	O:0.996531
and	O	O:0.999989
location	O	O:0.999814
54	O	O:0.996408
is	O	O:0.999975
01110011	O	O:0.998673
,	O	O:0.999990
if	O	O:0.999988
that	O	O:0.999715
matters	O	O:0.999783
.	O	O:0.999945
	
How	O	O:0.999898
to	O	O:0.999983
apply	O	O:0.993682
group	O	O:0.999000
by	O	O:0.999988
on	O	O:0.999996
data	O	O:0.999975
frame	O	O:0.999998
with	O	O:0.999984
neglecting	O	O:0.999740
NaN	O	O:0.999477
values	O	O:0.999601
in	O	O:0.999951
Pandas	O	O:0.999887
?	O	O:0.999936
	
You	O	O:0.999857
may	O	O:0.999993
also	O	O:0.999981
choose	O	O:0.999991
to	O	O:0.999978
use	O	O:0.999996
`	O	O:0.999870
map	O	B-API:0.994329
`	O	O:0.999997
instead	O	O:0.999920
of	O	O:0.999995
`	O	O:0.999983
apply	O	B-API:0.953844
`	O	O:0.999971
since	O	O:0.999591
upon	O	O:0.999963
accessing	O	O:0.999989
a	O	O:0.999974
column	O	O:0.999299
,	O	O:0.999996
you'll	O	O:0.999932
be	O	O:0.999986
working	O	O:0.999927
with	O	O:0.999900
a	O	O:0.999958
Series	O	O:0.996499
object	O	O:0.999620
.	O	O:0.999878
	
works	O	O:0.999616
great	O	O:0.999600
thanks	O	O:0.998426
,	O	O:0.999959
but	O	O:0.999966
why	O	O:0.999958
would	O	O:0.999966
I	O	O:0.999998
use	O	O:0.999986
applymap	B-API	B-API:0.998905
and	O	O:0.999926
apply	O	B-API:0.627506
the	O	O:0.998674
function	O	O:0.999741
on	O	O:0.999985
all	O	O:0.999996
the	O	O:0.999999
df	O	O:0.999869
cells	O	O:0.999678
,	O	O:0.999998
there	O	O:0.999901
is	O	O:0.999997
different	O	O:0.999966
types	O	O:0.999854
of	O	O:0.999993
data	O	O:0.999768
and	O	O:0.999999
all	O	O:1.000000
other	O	O:0.999720
stuff	O	O:0.998897
?	O	O:0.999891
	
I	O	O:0.999981
expanded	O	O:0.999976
a	O	O:0.999981
bit	O	O:0.999201
in	O	O:0.999978
the	O	O:0.999987
middle	O	O:0.999853
to	O	O:0.999975
highlight	O	O:0.999964
why	O	O:0.999994
simply	O	O:0.999989
creating	O	O:0.999983
a	O	O:0.999984
new	O	O:0.999947
column	O	O:0.999986
of	O	O:0.999996
data	O	O:0.999861
makes	O	O:0.999984
more	O	O:0.999946
sense	O	O:0.999938
here	O	O:0.999935
than	O	O:0.999971
using	O	O:0.999925
`	O	O:0.999958
join	O	B-API:0.999316
`	O	O:0.999972
.	O	O:0.999394
	
On	O	O:0.999935
the	O	O:0.999977
other	O	O:0.999932
part	O	O:0.999660
,	O	O:0.999996
note	O	O:0.999971
that	O	O:0.999653
I'm	O	O:0.999988
not	O	O:0.999997
suggesting	O	O:0.999981
to	O	O:0.999982
use	O	O:0.999995
`	O	O:0.999947
applymap	B-API	B-API:0.997126
`	O	O:0.999984
which	O	O:0.997757
is	O	O:0.999996
a	O	O:0.999807
DataFrame	B-API	O:0.969607
method	O	O:0.999975
,	O	O:0.999995
rather	O	O:0.999985
to	O	O:0.999976
use	O	O:0.999998
plain	O	O:0.998039
`	O	O:0.999950
map	O	B-API:0.982489
`	O	O:0.999985
which	O	O:0.999023
is	O	O:0.999996
a	O	O:0.999718
Series	O	O:0.994887
method	O	O:0.999783
.	O	O:0.999869
	
`	O	O:0.999919
Series.map	B-API	B-API:0.999541
`	O	O:0.999946
is	O	O:0.999907
meant	O	O:0.999943
specifically	O	O:0.999672
for	O	O:0.999991
element-wise	O	O:0.999175
operations	O	O:0.999038
,	O	O:0.999979
whereas	O	O:0.999860
`	O	O:0.999982
apply	O	B-API:0.978561
`	O	O:0.999947
has	O	O:0.999790
some	O	O:0.999980
extra	O	O:0.999872
checking	O	O:0.999830
for	O	O:0.999907
functions	O	O:0.999925
that	O	O:0.999506
can	O	O:0.999998
vectorially	O	O:0.999996
operate	O	O:0.999945
on	O	O:0.999993
the	O	O:0.999998
whole	O	O:0.999743
`	O	O:0.999983
.values	B-API	B-API:0.991247
`	O	O:0.999998
data	O	O:0.999691
object	O	O:0.999952
in	O	O:0.999995
one	O	O:0.999981
go	O	O:0.999943
.	O	O:0.999957
	
You	O	O:0.999932
can	O	O:0.999916
use	O	O:0.999999
any	O	O:0.999665
function	O	O:0.999693
within	O	O:0.999551
the	O	O:0.999959
`	O	O:0.999969
apply	O	B-API:0.989914
`	O	O:0.999900
.	O	O:0.998539
	
More	O	O:0.999820
examples	O	O:0.999787
here	O	O:0.999688
-	O	O:0.999986
#URL	O	O:0.999183
	
df.applymap()	B-API	B-API:0.921640
dont	O	O:0.999822
apply	O	O:0.809090
.map()	B-API	B-API:0.999401
on	O	O:0.999898
each	O	O:0.999908
Series	O	O:0.999967
of	O	O:0.999979
the	O	O:0.999970
DataFrame	B-API	O:0.998230
,	O	O:0.999995
put	O	O:0.999528
map	O	B-API:0.613414
.apply()	B-API	B-API:0.998003
on	O	O:0.999964
each	O	O:0.999210
Series	O	O:0.999775
.	O	O:0.999900
	
See	O	O:0.999690
Series	O	O:0.999628
.apply()	B-API	B-API:0.998065
here	O	O:0.997998
:	O	O:0.999896
[	O	O:0.999993
link	O	O:0.999824
]	O	O:0.999630
(	O	O:0.999954
#URL	O	O:0.999480
)	O	O:0.999917
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
The	O	O:0.999951
example	O	O:0.999812
showing	O	O:0.999772
how	O	O:0.999876
map	O	B-API:0.739720
produces	O	O:0.999928
a	O	O:0.999978
series	O	O:0.999625
and	O	O:0.999991
apply	O	O:0.805208
produces	O	O:0.996399
a	O	O:0.999970
dataframe	B-API	O:0.997942
also	O	O:0.999871
explains	O	O:0.999999
some	O	O:0.999705
results	O	O:0.999947
I'd	O	O:0.999993
gotten	O	O:0.999352
in	O	O:0.999983
the	O	O:0.999975
past	O	O:0.991955
and	O	O:0.999973
not	O	O:0.999960
understood	O	O:0.999269
.	O	O:0.999836
	
My	O	O:0.999986
understanding	O	O:0.999612
of	O	O:0.999954
all	O	O:0.999967
this	O	O:0.999832
is	O	O:0.999995
still	O	O:0.999901
a	O	O:0.999996
bit	O	O:0.999737
less	O	O:0.999489
than	O	O:0.999657
100%	O	O:0.998914
,	O	O:0.999959
but	O	O:0.999979
this	O	O:0.999801
helps	O	O:0.999537
.	O	O:0.999910
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999660
to	O	O:0.999988
apply	O	O:0.988900
this	O	O:0.999546
related	O	O:0.999231
topic	O	O:0.999531
[	O	O:0.999933
Merge	O	O:0.999919
pandas	O	O:0.999682
DataFrames	O	O:0.999949
based	O	O:0.999536
on	O	O:0.999990
irregular	O	O:0.999867
time	O	O:0.999984
intervals	O	O:0.999892
]	O	O:0.999989
by	O	O:0.999957
adding	O	O:0.999292
start_time	O	O:0.965055
and	O	O:0.999975
end_time	O	O:0.999888
columns	O	O:0.999519
to	O	O:0.999987
df1	O	O:0.999995
denoting	O	O:0.999613
3	O	O:0.999705
months	O	O:0.998548
(	O	O:0.999992
start_time	O	O:0.999312
)	O	O:0.999993
to	O	O:0.999978
6	O	O:0.999994
months	O	O:0.998183
(	O	O:0.999991
end_time	O	O:0.999796
)	O	O:0.999955
after	O	O:0.999924
DATADATE	O	O:0.999117
,	O	O:0.999997
then	O	O:0.999917
using	O	O:0.999991
np.searchsorted()	B-API	B-API:0.979532
,	O	O:0.999723
but	O	O:0.999995
this	O	O:0.999947
case	O	O:0.999914
is	O	O:0.999999
a	O	O:0.999983
bit	O	O:0.999635
trickier	O	O:0.999797
because	O	O:0.999883
I'd	O	O:0.999995
like	O	O:0.999989
to	O	O:0.999999
merge	O	O:0.990636
on	O	O:0.999993
a	O	O:0.999997
company-by-company	O	O:0.998333
basis	O	O:0.999829
.	O	O:0.999751
	
Apply	O	O:0.999780
condition	O	O:0.999807
of	O	O:0.999996
opposite	O	O:0.999739
values	O	O:0.999690
...	O	O:0.999324
	
So	O	O:0.999959
anyone	O	O:0.999590
who	O	O:0.999899
wants	O	O:0.999921
to	O	O:0.999996
assign	O	O:0.999986
values	O	O:0.999710
in	O	O:0.999991
the	O	O:0.999999
column	O	O:0.999953
of	O	O:0.999990
one	O	O:0.999988
dataframe	B-API	O:0.999941
based	O	O:0.999942
on	O	O:0.999995
values	O	O:0.999941
from	O	O:0.999971
another	O	O:0.999815
.	O	O:0.999902
	
I	O	O:0.999935
used	O	O:0.999775
.ix	B-API	B-API:0.995638
[	O	O:0.999955
]	O	O:0.999981
to	O	O:0.999984
drill	O	O:0.999992
down	O	O:0.999785
to	O	O:0.999997
the	O	O:1.000000
value	O	O:0.999935
,	O	O:0.999998
then	O	O:0.999939
.apply()	B-API	B-API:0.976246
to	O	O:0.999997
apply	O	O:0.993064
a	O	O:0.999870
function	O	O:0.999473
across	O	O:0.999979
each	O	O:0.999343
row	O	O:0.999400
(	O	O:0.999992
axis=1	O	O:0.999712
)	O	O:0.999983
finding	O	O:0.999183
the	O	O:0.999977
line's	O	O:0.999168
values	O	O:0.999929
just	O	O:0.999951
as	O	O:0.999999
you	O	O:0.999838
would	O	O:0.999990
a	O	O:0.999999
dataframe	B-API	O:0.995464
.	O	O:0.999902
	
(	O	O:0.999515
'	O	O:0.999984
line.element	O	O:0.994030
'	O	O:0.999917
/	O	O:0.999984
line	O	O:0.999027
[	O	O:0.999920
'	O	O:0.999986
element	O	O:0.999773
'])	O	O:0.999616
	
You	O	O:0.999904
could	O	O:0.999958
do	O	O:0.999999
a	O	O:1.000000
transpose	O	O:0.680071
of	O	O:0.999996
the	O	O:0.999955
df	O	O:0.999784
and	O	O:0.999997
then	O	O:0.999949
using	O	O:0.999982
`	O	O:0.999963
apply	O	B-API:0.995572
`	O	O:0.999968
call	O	O:0.819262
`	O	O:0.999993
nunique	B-API	B-API:0.999771
`	O	O:0.999960
row-wise	O	O:0.885855
:	O	O:0.999961
#CODE	O	O:0.999716
	
You	O	O:0.999636
`	O	O:0.999974
groupby	B-API	B-API:0.999224
`	O	O:0.999998
first	O	O:0.998624
on	O	O:0.999994
the	O	O:0.999966
feature	O	O:0.999785
,	O	O:0.999969
and	O	O:0.999998
second	O	O:0.999871
on	O	O:0.999943
the	O	O:0.999888
Iteration	O	O:0.999802
variable	O	O:0.999778
.	O	O:0.999800
	
On	O	O:0.999941
each	O	O:0.999874
group	O	O:0.999695
you	O	O:0.999987
apply	O	O:0.748371
the	O	O:0.999904
`	O	O:0.999793
mean()	B-API	B-API:0.959436
`	O	O:0.999943
function	O	O:0.999390
,	O	O:0.999994
and	O	O:0.999998
you	O	O:0.999976
get	O	O:0.999945
the	O	O:0.999998
group	O	O:0.995523
whose	O	O:0.999820
index	O	O:0.999034
is	O	O:0.999987
`	O	O:0.999979
1	O	O:0.998582
`	O	O:0.999994
,	O	O:0.999935
which	O	O:0.999987
correspond	O	O:0.999754
to	O	O:0.999996
the	O	O:0.999998
`	O	O:0.999919
Feature	O	O:0.999171
Active	O	O:0.999952
==	O	O:0.999864
1	O	O:0.999416
`	O	O:0.999982
group	O	O:0.986602
.	O	O:0.999953
	
So	O	O:0.999992
a	O	O:0.999999
span	O	O:0.998753
of	O	O:0.999985
60	O	O:0.999731
obviously	O	O:0.999910
wouldn't	O	O:0.999945
apply	O	O:0.857053
here	O	O:0.999592
,	O	O:0.999979
as	O	O:0.999992
Pandas	O	O:0.998919
would	O	O:0.999966
just	O	O:0.999915
interpret	O	O:0.999997
that	O	O:0.999958
as	O	O:1.000000
every	O	O:0.999853
60	O	O:0.999988
datapoints	O	O:0.999737
rather	O	O:0.999928
than	O	O:0.999990
every	O	O:0.999806
60	O	O:0.999910
seconds	O	O:0.998760
.	O	O:0.999837
	
Are	O	O:0.999960
there	O	O:0.999989
any	O	O:0.999984
solutions	O	O:0.999582
beyond	O	O:0.999686
the	O	O:0.999970
obvious	O	O:0.997209
?	O	O:0.999938
	
The	O	O:0.999831
"	O	O:0.999982
obvious	O	O:0.997247
"	O	O:0.999982
being	O	O:0.999607
inserting	O	O:0.999864
datapoints	O	O:0.998777
for	O	O:0.999993
every	O	O:0.999923
second	O	O:0.999070
in	O	O:0.999982
the	O	O:0.999986
gaps	O	O:0.998453
,	O	O:0.999971
and	O	O:0.999997
extrapolating	O	O:0.999932
the	O	O:0.999821
values	O	O:0.997809
.	O	O:0.999770
	
I	O	O:0.999926
should	O	O:0.999978
note	O	O:0.999894
that	O	O:0.999986
the	O	O:0.999994
Date	O	O:0.999789
column	O	O:0.999652
is	O	O:0.999998
a	O	O:0.999991
proper	O	O:0.998022
Python	O	O:0.999351
datetime64	O	O:0.990870
object	O	O:0.998860
.	O	O:0.999540
	
You	O	O:0.999895
could	O	O:0.999965
add	O	O:0.999978
an	O	O:0.999989
ordinal	O	O:0.999658
variable	O	O:0.999902
for	O	O:0.999875
which	O	O:0.999905
group-of-60-seconds	O	O:0.999785
each	O	O:0.999605
row	O	O:0.999945
belongs	O	O:0.999845
to	O	O:0.999993
,	O	O:1.000000
then	O	O:0.999979
group	O	O:0.999972
by	O	O:0.999997
that	O	O:0.999920
ordinal	O	O:0.999761
value	O	O:0.999930
and	O	O:0.999983
apply	O	O:0.625137
the	O	O:0.999828
averaging	O	O:0.993688
function	O	O:0.999799
across	O	O:0.999937
the	O	O:0.999991
entire	O	O:0.999806
group	O	O:0.999434
,	O	O:0.999997
on	O	O:0.999993
a	O	O:0.999995
group-by-group	O	O:0.996971
basis	O	O:0.999808
.	O	O:0.999783
	
An	O	O:0.999967
easy	O	O:0.999787
way	O	O:0.999989
to	O	O:0.999971
do	O	O:0.999999
this	O	O:0.999926
would	O	O:0.999987
be	O	O:0.999999
to	O	O:0.999999
convert	O	O:0.999870
the	O	O:0.999994
datetime	O	O:0.999310
value	O	O:0.999956
to	O	O:0.999997
a	O	O:1.000000
number	O	O:0.999915
of	O	O:0.999992
seconds	O	O:0.999917
since	O	O:0.999982
the	O	O:0.999995
minimum	O	O:0.999952
datetime	O	O:0.999514
value	O	O:0.999944
,	O	O:0.999998
then	O	O:0.999916
do	O	O:0.999996
integer	O	O:0.999939
division	O	O:0.999909
by	O	O:0.999907
60	O	O:0.999582
.	O	O:0.999421
	
Pandas	O	O:0.997366
:	O	O:0.999692
Get	O	O:0.999938
grouping-index	O	O:0.998666
in	O	O:0.999978
apply	O	B-API:0.850164
function	O	O:0.998830
	
What	O	O:0.999702
are	O	O:0.999988
you	O	O:0.999984
actually	O	O:0.999993
trying	O	O:0.999976
to	O	O:0.999990
do	O	O:0.999998
with	O	O:0.999883
"	O	O:0.999967
mytest	O	O:0.994550
"	O	O:0.999961
,	O	O:0.999913
it	O	O:0.999983
looks	O	O:0.999938
like	O	O:0.999950
what	O	O:0.999893
you're	O	O:0.999977
looking	O	O:0.999882
for	O	O:0.999948
is	O	O:0.999970
actually	O	O:0.999933
a	O	O:0.999979
df.groupby	B-API	B-API:0.994496
and	O	O:0.999996
then	O	O:0.999866
an	O	O:0.999994
agg	O	B-API:0.804517
which	O	O:0.999819
can	O	O:0.999966
view	O	O:0.999516
the	O	O:0.999992
index	O	O:0.999848
,	O	O:0.999994
or	O	O:0.999999
a	O	O:0.999976
df.resample	B-API	B-API:0.976645
and	O	O:0.999997
then	O	O:0.999934
an	O	O:0.999998
apply	O	O:0.670088
which	O	O:0.999511
can	O	O:0.999961
also	O	O:0.999998
reference	O	O:0.999974
the	O	O:0.999884
index	O	O:0.999641
	
I	O	O:0.999990
want	O	O:0.999981
to	O	O:0.999938
apply	O	O:0.976081
the	O	O:0.999928
mapping	O	O:0.998487
to	O	O:0.999950
df1	O	O:0.999910
.	O	O:0.999891
	
The	O	O:0.999899
working	O	O:0.999470
version	O	O:0.999872
I	O	O:0.999996
have	O	O:0.999747
is	O	O:0.999990
this	O	O:0.999939
one	O	O:0.999969
,	O	O:0.999989
but	O	O:0.999968
I	O	O:0.999987
feel	O	O:0.999935
there	O	O:0.998814
is	O	O:0.999995
potential	O	O:0.998232
for	O	O:0.999955
improvement	O	O:0.999309
,	O	O:0.999990
as	O	O:0.999991
I	O	O:0.999989
find	O	O:0.999971
my	O	O:0.999874
solution	O	O:0.999820
unreadable	O	O:0.999734
and	O	O:0.999990
I	O	O:0.999991
am	O	O:0.999989
unsure	O	O:0.999251
about	O	O:0.999800
how	O	O:0.999890
it	O	O:0.999918
would	O	O:0.999990
generalize	O	O:0.999937
to	O	O:0.999994
multiindexes	O	O:0.999950
#CODE	O	O:0.999747
	
My	O	O:0.999917
purpose	O	O:0.998723
is	O	O:0.999988
to	O	O:0.999955
apply	O	O:0.995686
two	O	O:0.999932
functions	O	O:0.999805
at	O	O:0.999990
the	O	O:0.999987
same	O	O:0.999907
time	O	O:0.999791
.	O	O:0.999953
	
Basically	O	O:0.999874
,	O	O:0.999991
I	O	O:0.999998
want	O	O:0.999975
to	O	O:0.999922
cut	O	O:0.998995
my	O	O:0.999991
dataset	O	O:0.999897
for	O	O:0.999996
extreme	O	O:0.999894
values	O	O:0.999701
by	O	O:0.999988
looking	O	O:0.999861
for	O	O:0.999955
the	O	O:0.999893
5%	O	O:0.999971
quantile	O	O:0.999739
at	O	O:0.999994
the	O	O:0.999984
lowest	O	O:0.999913
part	O	O:0.999816
of	O	O:0.999997
the	O	O:0.999982
dataset	O	O:0.999830
and	O	O:0.999985
the	O	O:0.999994
top	O	O:0.999329
%	O	O:0.999974
at	O	O:0.999986
the	O	O:0.999989
other	O	O:0.999808
end	O	O:0.999624
.	O	O:0.999815
	
#CODE	O	O:0.998453
	
So	O	O:0.999964
here	O	O:0.999404
is	O	O:0.999997
a	O	O:0.999982
mask	O	O:0.835747
that	O	O:0.999956
ought	O	O:0.999982
to	O	O:0.999995
solve	O	O:0.999989
the	O	O:0.999965
problem	O	O:0.999019
.	O	O:0.999888
	
Just	O	O:0.999104
`	O	O:0.999982
interpolate	O	B-API:0.957367
`	O	O:0.999976
and	O	O:0.999994
then	O	O:0.999948
apply	O	O:0.709504
the	O	O:0.999951
mask	O	O:0.686189
to	O	O:0.999995
reset	O	O:0.999996
appropriate	O	O:0.999986
values	O	O:0.999749
to	O	O:0.999978
NaN	O	O:0.999826
.	O	O:0.999864
	
Honestly	O	O:0.998852
,	O	O:0.999995
this	O	O:0.999779
was	O	O:0.999983
a	O	O:0.999992
bit	O	O:0.999904
more	O	O:0.999862
work	O	O:0.999921
than	O	O:0.999927
I	O	O:0.999989
realized	O	O:0.999900
it	O	O:0.999846
would	O	O:0.999969
be	O	O:0.999998
because	O	O:0.999987
I	O	O:0.999957
had	O	O:0.999982
to	O	O:0.999959
loop	O	O:0.999994
through	O	O:0.999920
each	O	O:0.999653
column	O	O:0.999826
but	O	O:0.999996
then	O	O:0.999677
groupby	B-API	B-API:0.831960
didn't	O	O:0.999888
quite	O	O:0.999813
work	O	O:0.999919
without	O	O:0.999881
me	O	O:0.999973
providing	O	O:0.999924
some	O	O:0.999944
dummy	O	O:0.999961
columns	O	O:0.999964
like	O	O:0.999712
'	O	O:0.999999
ones	O	O:0.998764
'	O	O:0.999961
.	O	O:0.999970
	
Let's	O	O:0.999849
say	O	O:0.999967
you	O	O:0.999996
have	O	O:0.999981
a	O	O:1.000000
list	O	O:0.999466
of	O	O:0.999987
`	O	O:0.999971
datetime	O	O:0.939674
`	O	O:0.999987
objects	O	O:0.995438
and	O	O:0.999996
you	O	O:0.999995
want	O	O:0.999869
to	O	O:0.999997
group	O	O:0.999999
them	O	O:0.999966
by	O	O:0.999992
the	O	O:0.999977
`	O	O:0.999884
.month	B-API	B-API:0.998946
`	O	O:0.999979
attribute	O	O:0.999543
.	O	O:0.999913
	
So	O	O:0.999889
,	O	O:0.999997
First	O	O:0.999979
of	O	O:0.999992
all	O	O:0.999974
you	O	O:0.999998
need	O	O:0.999976
to	O	O:0.999999
sort	O	O:0.999999
them	O	O:0.999954
,	O	O:1.000000
then	O	O:0.999971
you	O	O:0.999998
can	O	O:0.999998
apply	O	O:0.985245
`	O	O:0.999956
itertools.groupby()	O	B-API:0.870252
`	O	O:0.999967
function	O	O:0.999104
which	O	O:0.999778
returns	O	O:0.999000
:	O	O:0.999993
a	O	O:0.999997
group	O	O:0.997406
value	O	O:0.999903
and	O	O:0.999983
an	O	O:0.999968
iterator	O	O:0.998416
.	O	O:0.999725
	
#CODE	O	O:0.998453
	
This	O	O:0.999450
avoids	O	O:0.999678
apply	O	B-API:0.630151
.	O	O:0.998223
	
Link	O	O:0.999264
to	O	O:0.999957
docs	O	O:0.999968
	
This	O	O:0.998421
is	O	O:0.999983
briefly	O	O:0.999845
mentioned	O	O:0.999662
in	O	O:0.999975
the	O	O:0.999989
docs	O	O:0.999746
on	O	O:0.999978
multi-indexing	O	O:0.999881
,	O	O:0.999994
although	O	O:0.999969
obviously	O	O:0.999950
that	O	O:0.999931
doesn't	O	O:0.999985
quite	O	O:0.999982
apply	O	O:0.635460
in	O	O:0.999980
your	O	O:0.999798
case	O	O:0.999873
,	O	O:0.999990
I'm	O	O:0.999958
not	O	O:0.999992
sure	O	O:0.999987
where	O	O:0.999986
to	O	O:0.999995
go	O	O:0.999999
for	O	O:0.999998
a	O	O:0.999994
good	O	O:0.999352
overview	O	O:0.999945
of	O	O:0.999974
how	O	O:0.999710
slicing	O	O:0.999833
works	O	O:0.999894
for	O	O:0.999975
sorted	O	O:0.995291
/	O	O:0.999946
unsorted	O	O:0.998485
indices	O	O:0.997081
.	O	O:0.999739
	
How	O	O:0.999894
to	O	O:0.999979
apply	O	O:0.995458
multiple	O	O:0.999811
formats	O	O:0.999706
to	O	O:0.999996
one	O	O:1.000000
column	O	O:0.999957
with	O	O:0.999963
XlsxWriter	O	O:0.999488
	
In	O	O:0.999968
the	O	O:0.999977
below	O	O:0.999882
code	O	O:0.999909
I	O	O:0.999998
apply	O	O:0.891327
number	O	O:0.998142
formatting	O	O:0.999591
to	O	O:0.999999
each	O	O:0.999991
of	O	O:0.999997
the	O	O:0.999998
columns	O	O:0.999949
in	O	O:0.999988
my	O	O:0.999997
excel	O	O:0.999739
sheet	O	O:0.999766
.	O	O:0.999842
	
However	O	O:0.999857
,	O	O:0.999987
I	O	O:0.999991
can't	O	O:0.999979
seem	O	O:0.999855
to	O	O:0.999997
figure	O	O:0.999990
out	O	O:0.999975
to	O	O:0.999991
apply	O	O:0.992634
multiple	O	O:0.999834
formattings	O	O:0.999109
to	O	O:0.999998
a	O	O:1.000000
specific	O	O:0.999833
column	O	O:0.999954
,	O	O:0.999994
either	O	O:0.999978
the	O	O:0.999996
centering	O	O:0.999468
or	O	O:0.999991
the	O	O:0.999989
numbering	O	O:0.999979
end	O	O:0.999841
up	O	O:0.999990
being	O	O:0.999855
over	O	O:0.998928
written	O	O:0.990486
.	O	O:0.999894
	
Is	O	O:0.999960
it	O	O:0.999995
even	O	O:0.999970
possible	O	O:0.999987
to	O	O:0.999993
apply	O	O:0.984819
two	O	O:0.999976
types	O	O:0.999196
of	O	O:0.999994
formatting	O	O:0.999857
to	O	O:0.999995
one	O	O:0.999999
column	O	O:0.999875
?	O	O:0.999985
	
#CODE	O	O:0.998453
	
Is	O	O:0.999960
it	O	O:0.999995
even	O	O:0.999970
possible	O	O:0.999987
to	O	O:0.999993
apply	O	O:0.984819
two	O	O:0.999976
types	O	O:0.999196
of	O	O:0.999994
formatting	O	O:0.999857
to	O	O:0.999995
one	O	O:0.999999
column	O	O:0.999875
?	O	O:0.999985
	
I	O	O:0.999991
then	O	O:0.999952
call	O	O:0.999153
`	O	O:0.999997
apply	O	B-API:0.994069
`	O	O:0.999962
on	O	O:0.999784
that	O	O:0.999977
list	O	O:0.999915
to	O	O:0.999998
turn	O	O:0.999907
it	O	O:0.999997
into	O	O:0.999921
a	O	O:0.999994
Series	O	O:0.994839
,	O	O:0.999997
this	O	O:0.999972
will	O	O:0.999980
auto	O	O:0.999963
generate	O	O:0.999959
the	O	O:0.999995
names	O	O:0.999928
of	O	O:0.999996
the	O	O:0.999999
columns	O	O:0.999885
0	O	O:0.999941
..	O	O:0.999840
	
4	O	O:0.999209
.	O	O:0.999751
	
Are	O	O:0.999983
there	O	O:0.999967
modules	O	O:0.999887
to	O	O:0.999991
do	O	O:1.000000
something	O	O:0.999970
like	O	O:0.999953
this	O	O:0.999990
hourly	O	O:0.999620
without	O	O:0.999940
human	O	O:0.991930
intervention	O	O:0.999157
?	O	O:0.999912
	
I	O	O:0.999826
would	O	O:0.999992
read	O	O:0.999791
all	O	O:0.999996
of	O	O:0.999998
the	O	O:0.999988
files	O	O:0.999840
in	O	O:0.999995
a	O	O:0.999997
directory	O	O:0.999931
,	O	O:0.999990
append	O	O:0.972778
them	O	O:0.999802
into	O	O:0.999959
a	O	O:0.999998
single	O	O:0.999201
file	O	O:0.999941
,	O	O:0.999998
drop	O	O:0.998898
duplicates	O	O:0.999774
,	O	O:0.999996
apply	O	O:0.989629
some	O	O:0.999297
changes	O	O:0.995704
(	O	O:0.999993
add	O	O:0.999991
some	O	O:0.999966
columns	O	O:0.999912
,	O	O:0.999996
perform	O	O:0.999973
some	O	O:0.999925
calculations	O	O:0.999932
on	O	O:0.999996
timestamps	O	O:0.998788
)	O	O:0.999991
,	O	O:0.999987
and	O	O:0.999998
then	O	O:0.999936
save	O	O:0.999816
the	O	O:0.999997
consolidated	O	O:0.999671
new	O	O:0.999986
file	O	O:0.999921
in	O	O:0.999992
another	O	O:0.999887
directory	O	O:0.999740
.	O	O:0.999693
	
I	O	O:0.999983
ended	O	O:0.999856
up	O	O:0.999861
doing	O	O:0.999863
it	O	O:0.999986
using	O	O:0.999934
a	O	O:0.999925
groupby	B-API	B-API:0.995909
apply	O	O:0.527562
as	O	O:0.999074
follows	O	O:0.937819
(	O	O:0.999945
and	O	O:0.999994
coded	O	O:0.999935
to	O	O:0.999994
work	O	O:0.999996
forwards	O	O:0.999898
or	O	O:0.999994
backwards	O	O:0.995915
):	O	O:0.999975
#CODE	O	O:0.999537
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999993
`	O	O:0.999961
DataFrame.apply	B-API	B-API:0.999584
`	O	O:0.999991
with	O	O:0.995497
`	O	O:0.999990
axis=0	O	O:0.995422
`	O	O:0.999995
to	O	O:0.999977
apply	O	O:0.996673
a	O	O:0.999857
function	O	O:0.999218
to	O	O:0.999998
every	O	O:0.999999
column	O	O:0.999980
of	O	O:0.999997
a	O	O:0.999989
dataframe	B-API	O:0.991770
.	O	O:0.999855
	
In	O	O:0.999993
your	O	O:0.999967
case	O	O:0.999951
you	O	O:0.999998
want	O	O:0.999979
to	O	O:0.999998
check	O	O:0.999996
whether	O	O:0.999917
`	O	O:0.999973
all	O	O:0.997708
(	O	O:0.999991
col	O	O:0.998834
==	O	O:0.999947
1	O	O:0.999932
)`	O	O:0.999853
for	O	O:0.999973
each	O	O:0.999465
column	O	O:0.999368
.	O	O:0.999941
	
I	O	O:0.999911
would	O	O:0.999982
suggest	O	O:0.999901
using	O	O:0.999941
`	O	O:0.999958
all	O	O:0.998659
`	O	O:0.999996
on	O	O:0.999835
the	O	O:0.999994
boolean	O	O:0.999640
condition	O	O:0.999934
on	O	O:0.999997
the	O	O:0.999999
entire	O	O:0.999976
df	O	O:0.999827
rather	O	O:0.999976
than	O	O:0.999844
use	O	O:0.999916
`	O	O:0.999960
apply	O	B-API:0.997363
`	O	O:0.999477
:	O	O:0.999171
#CODE	O	O:0.999898
	
Although	O	O:0.999855
maxymoo's	O	O:0.999545
answer	O	O:0.999518
is	O	O:0.999974
correct	O	O:0.999768
generally	O	O:0.999915
one	O	O:0.999984
should	O	O:0.999893
avoid	O	O:0.999960
using	O	O:0.999906
`	O	O:0.999819
apply	O	B-API:0.994305
`	O	O:0.999941
if	O	O:0.999848
there	O	O:0.999916
is	O	O:0.999960
a	O	O:0.999947
method	O	O:0.999895
that	O	O:0.999272
is	O	O:0.999997
vectorised	O	O:0.999111
and	O	O:0.999982
can	O	O:0.999975
operate	O	O:0.999962
on	O	O:0.999997
the	O	O:0.999998
entire	O	O:0.999958
df	O	O:0.999601
which	O	O:0.999977
this	O	O:0.999937
does	O	O:0.999775
	
But	O	O:0.999980
when	O	O:0.999732
I	O	O:0.999997
tried	O	O:0.999990
to	O	O:0.999925
do	O	O:0.999999
something	O	O:0.999964
like	O	O:0.999981
this	O	O:0.999992
on	O	O:0.999997
my	O	O:0.999927
`	O	O:0.999993
DataFrameGroupBy	B-API	B-API:0.986488
`	O	O:0.999957
object	O	O:0.997878
,	O	O:0.999992
it	O	O:0.999983
threw	O	O:0.999923
an	O	O:0.999981
error	O	O:0.999232
:	O	O:0.999881
`	O	O:0.999993
Cannot	O	O:0.999910
access	O	O:0.999893
callable	O	O:0.999673
attribute	O	O:0.999929
'	O	O:0.999872
astype	B-API	B-API:0.682197
'	O	O:0.999982
of	O	O:0.999491
'	O	O:0.999932
SeriesGroupBy	B-API	B-API:0.834479
'	O	O:0.999967
objects	O	O:0.999713
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999815
apply	O	B-API:0.953059
'	O	O:0.999516
method	O	O:0.999539
`	O	O:0.999946
	
@USER	O	O:0.999310
I	O	O:0.999988
think	O	O:0.999896
he	O	O:0.999920
needs	O	O:0.999957
to	O	O:0.999988
unstack	O	O:0.710946
the	O	O:0.999743
``	O	O:0.999898
industry	O	O:0.976157
``	O	O:0.999990
column	O	O:0.998612
in	O	O:0.999997
order	O	O:0.999935
to	O	O:0.999993
apply	O	O:0.848836
``	O	O:0.999780
rolling_corr	B-API	B-API:0.999183
``	O	O:0.999928
on	O	O:0.999969
the	O	O:0.999986
result	O	O:0.999825
.	O	O:0.999888
	
@USER	O	O:0.999538
if	O	O:0.999982
you	O	O:0.999987
apply	O	O:0.882043
df.corr()	B-API	B-API:0.984995
to	O	O:0.999966
the	O	O:1.000000
current	O	O:0.999787
structure	O	O:0.999948
,	O	O:0.999998
all	O	O:0.999996
you	O	O:0.999981
get	O	O:0.999909
is	O	O:1.000000
a	O	O:0.999997
correlation	O	O:0.999828
of	O	O:0.999995
all	O	O:0.999978
the	O	O:0.999998
columns	O	O:0.999707
,	O	O:0.999972
eg	O	O:0.999965
:	O	O:0.999968
correlation	O	O:0.999656
between	O	O:0.999946
mean	O	O:0.998921
and	O	O:0.999983
max	O	O:0.573206
.	O	O:0.998841
	
That	O	O:0.994846
is	O	O:0.999967
not	O	O:0.999964
what	O	O:0.999887
is	O	O:0.999991
required	O	O:0.998340
.	O	O:0.999899
	
I	O	O:0.999993
need	O	O:0.999982
to	O	O:0.999985
find	O	O:0.999997
the	O	O:0.999987
correlation	O	O:0.999521
between	O	O:0.999886
each	O	O:0.999663
industry	O	O:0.997087
.	O	O:0.999842
	
In	O	O:0.999981
other	O	O:0.999949
words	O	O:0.999910
the	O	O:0.999983
industries	O	O:0.999894
need	O	O:0.999944
to	O	O:1.000000
become	O	O:0.999998
columns	O	O:0.999650
(	O	O:0.999997
along	O	O:0.999921
with	O	O:0.999872
the	O	O:0.999994
existing	O	O:0.999921
columns	O	O:0.999727
)	O	O:0.999992
,	O	O:0.999984
and	O	O:0.999999
the	O	O:0.999998
rows	O	O:0.998046
will	O	O:0.999974
be	O	O:0.999999
dates	O	O:0.998968
.	O	O:0.999625
	
I	O	O:0.999870
haven't	O	O:0.999599
had	O	O:0.999848
any	O	O:0.999987
luck	O	O:0.999336
doing	O	O:0.999831
that	O	O:0.999619
.	O	O:0.999885
	
Then	O	O:0.999327
I'd	O	O:0.999988
`	O	O:0.999992
groupby	B-API	B-API:0.999394
`	O	O:0.999992
df1	O	O:0.991905
on	O	O:0.999984
name	O	O:0.999855
and	O	O:0.999998
apply	O	O:0.931157
a	O	O:0.999717
`	O	O:0.999786
transform	O	B-API:0.937565
`	O	O:0.999997
to	O	O:0.999967
calculate	O	O:0.999986
the	O	O:0.999997
total	O	O:0.999527
weight	O	O:0.999970
change	O	O:0.998324
for	O	O:0.999995
each	O	O:0.995662
person	O	O:0.998114
.	O	O:0.999902
	
`	O	O:0.999964
transform	O	B-API:0.974632
`	O	O:0.999990
returns	O	O:0.999231
a	O	O:0.999995
Series	O	O:0.999692
aligned	O	O:0.999766
to	O	O:0.999990
the	O	O:0.999999
orig	O	O:0.999424
df	O	O:0.999939
so	O	O:0.999995
you	O	O:0.999986
can	O	O:0.999997
add	O	O:0.999998
an	O	O:0.999998
aggregated	O	O:0.999988
column	O	O:0.999980
back	O	O:0.999696
to	O	O:0.999998
the	O	O:0.999999
df	O	O:0.999136
.	O	O:0.999874
	
I	O	O:0.999983
have	O	O:0.999960
tried	O	O:0.999582
using	O	O:0.999721
groupby	B-API	B-API:0.999379
and	O	O:0.999931
apply	O	B-API:0.957958
in	O	O:0.998816
several	O	O:0.999489
different	O	O:0.999754
ways	O	O:0.999430
but	O	O:0.999953
I	O	O:0.999997
cant	O	O:0.999875
get	O	O:0.999926
it	O	O:0.999997
to	O	O:0.999995
work	O	O:0.999981
.	O	O:0.999967
	
Though	O	O:0.999644
I	O	O:0.999968
was	O	O:0.999985
wondering	O	O:0.999503
if	O	O:0.999980
you	O	O:0.999976
could	O	O:0.999963
do	O	O:0.999999
it	O	O:0.999997
immediately	O	O:0.999839
using	O	O:0.999891
lambda	O	O:0.994878
,	O	O:0.999825
apply	O	B-API:0.962933
and	O	O:0.999353
groupby	B-API	B-API:0.998017
.	O	O:0.999052
	
This	O	O:0.998305
function	O	O:0.999603
is	O	O:0.999990
mapped	O	O:0.999442
on	O	O:0.999999
every	O	O:0.999967
row	O	O:0.999987
of	O	O:0.999976
the	O	O:0.999531
(	O	O:0.999974
Pandas	O	O:0.999891
?	O	O:0.999959
)	O	O:0.999973
dataframe	B-API	O:0.975103
(	O	O:0.999989
actually	O	O:0.999949
,	O	O:0.999999
only	O	O:0.999951
on	O	O:0.999999
filtered	O	O:0.999987
columns	O	O:0.999941
`'	O	O:0.999979
humidity	O	O:0.999294
'`	O	O:0.999884
and	O	O:0.999851
`'	O	O:0.999975
workingday	O	O:0.996702
'`)	O	O:0.999527
and	O	O:0.999994
the	O	O:0.999981
result	O	O:0.996973
is	O	O:0.999991
stored	O	O:0.997969
in	O	O:0.999968
`'	O	O:0.999950
sticky	O	O:0.997761
'`	O	O:0.999933
column	O	O:0.998653
.	O	O:0.999919
	
That	O	O:0.999890
said	O	O:0.999930
,	O	O:0.999999
you	O	O:0.999990
can	O	O:0.999991
translate	O	O:0.999448
the	O	O:0.999999
same	O	O:0.999982
expression	O	O:0.999792
in	O	O:0.999991
R	O	O:0.999977
using	O	O:0.999971
an	O	O:0.999908
anonymous	O	O:0.997804
`	O	O:0.999789
function	O	O:0.988625
`	O	O:0.999983
and	O	O:0.999824
`	O	O:0.999994
apply	O	B-API:0.998824
`	O	O:0.999314
:	O	O:0.999133
#CODE	O	O:0.999898
	
I	O	O:0.999992
have	O	O:0.999975
to	O	O:0.999976
say	O	O:1.000000
this	O	O:0.999787
is	O	O:0.999990
weird	O	O:0.999749
way	O	O:0.999978
to	O	O:0.999988
apply	O	O:0.991551
a	O	O:0.999857
function	O	O:0.999553
to	O	O:0.999997
a	O	O:1.000000
pandas	O	O:0.999777
df	O	O:0.999954
,	O	O:0.999986
anyway	O	O:0.999986
this	O	O:0.999821
is	O	O:0.999995
an	O	O:0.999991
example	O	O:0.999568
which	O	O:0.999711
shows	O	O:0.999907
what	O	O:0.999880
it	O	O:0.999982
does	O	O:0.999188
:	O	O:0.999984
#CODE	O	O:0.999930
	
The	O	O:0.999930
lambda	O	O:0.999594
expression	O	O:0.998846
is	O	O:0.999970
calling	O	O:0.997311
`	O	O:0.999975
apply	O	B-API:0.995478
`	O	O:0.999819
and	O	O:0.999926
passing	O	O:0.999346
`	O	O:0.999730
axis=1	O	O:0.992363
`	O	O:0.999956
which	O	O:0.999470
means	O	O:0.999923
row-wise	O	O:0.993973
and	O	O:0.999991
test	O	O:0.999624
each	O	O:0.999692
named	O	O:0.999948
column	O	O:0.999944
for	O	O:0.999983
whether	O	O:0.999835
the	O	O:0.999935
expression	O	O:0.991391
is	O	O:0.999990
True	O	O:0.999027
or	O	O:0.999992
False	O	O:0.999411
,	O	O:0.999994
the	O	O:0.999943
`	O	O:0.999896
(	O	O:0.999905
0	O	O:0.999990
,	O	O:0.999984
1	O	O:0.999894
)`	O	O:0.999822
casts	O	O:0.999885
this	O	O:0.999987
to	O	O:0.999994
an	O	O:0.999998
`	O	O:0.999987
int	O	O:0.993671
`	O	O:0.999998
,	O	O:0.999970
otherwise	O	O:0.999988
you'd	O	O:0.999977
get	O	O:0.999990
a	O	O:0.999997
boolean	O	O:0.997743
dtype	B-API	B-API:0.957402
returned	O	O:0.997439
.	O	O:0.998762
	
#CODE	O	O:0.998453
	
I	O	O:0.999993
then	O	O:0.999906
apply	O	O:0.813699
this	O	O:0.999395
#CODE	O	O:0.999353
	
and	O	O:0.999939
use	O	O:0.999707
`	O	O:0.999372
groupby	B-API	B-API:0.998401
/	O	O:0.999974
apply	O	B-API:0.982015
`	O	O:0.998369
:	O	O:0.999399
#CODE	O	O:0.999912
	
As	O	O:0.999955
to	O	O:0.999986
why	O	O:0.999999
your	O	O:0.999728
method	O	O:0.999922
failed	O	O:0.999917
,	O	O:0.999991
you	O	O:0.999927
were	O	O:0.999969
calling	O	O:0.999634
`	O	O:0.999991
apply	O	B-API:0.975057
`	O	O:0.999979
on	O	O:0.999909
a	O	O:0.999991
Series	O	O:0.995354
(	O	O:0.999967
`	O	O:0.999995
df	O	O:0.998228
[	O	O:0.999984
'	O	O:0.999929
ID	O	O:0.999862
']`	O	O:0.999617
is	O	O:0.999939
a	O	O:0.999928
Series	O	O:0.991818
and	O	O:0.999989
not	O	O:0.999997
a	O	O:0.999995
df	O	O:0.998655
)	O	O:0.999937
and	O	O:0.999989
there	O	O:0.999742
is	O	O:0.999969
no	O	O:0.999873
`	O	O:0.999992
axis	O	O:0.998548
`	O	O:0.999997
param	O	O:0.999300
so	O	O:0.999995
the	O	O:0.999982
following	O	O:0.996544
works	O	O:0.998020
:	O	O:0.999962
#CODE	O	O:0.999779
	
Working	O	O:0.999039
on	O	O:0.999968
the	O	O:0.999997
database	O	O:0.999983
of	O	O:0.999987
matches	O	O:0.999668
I	O	O:0.999994
would	O	O:0.999997
like	O	O:0.999969
to	O	O:1.000000
retrive	O	O:0.999971
the	O	O:0.999995
rating	O	O:0.997405
of	O	O:0.999986
both	O	O:0.999531
players	O	O:0.999778
and	O	O:0.999983
apply	O	O:0.920206
two	O	O:0.997402
functions	O	O:0.994632
(	O	O:0.999911
i	O	O:0.999971
already	O	O:0.999984
have	O	O:0.999994
them	O	O:0.999954
defined	O	O:0.999883
)	O	O:0.999980
predicted_result	O	O:0.911255
(	O	O:0.999979
rating1	O	O:0.999729
,	O	O:0.999990
rating2	O	O:0.999613
)	O	O:0.999974
,	O	O:0.999946
and	O	O:0.999990
updated_rating	O	O:0.955955
(	O	O:0.999816
rating1	O	O:0.999575
,	O	O:0.999989
rating2	O	O:0.999439
)	O	O:0.999964
.	O	O:0.999842
	
The	O	O:0.999966
first	O	O:0.999821
one	O	O:0.999991
gives	O	O:0.999822
me	O	O:0.999982
the	O	O:0.999997
expected	O	O:0.999970
result	O	O:0.999975
of	O	O:0.999998
the	O	O:0.999994
match	O	O:0.999906
given	O	O:0.999825
the	O	O:0.999994
ratings	O	O:0.999173
,	O	O:0.999993
the	O	O:0.999994
second	O	O:0.999745
one	O	O:0.999991
gives	O	O:0.999910
me	O	O:0.999988
the	O	O:0.999982
updated	O	O:0.999312
ratings	O	O:0.997588
.	O	O:0.999827
	
Finally	O	O:0.999844
I	O	O:0.999998
need	O	O:0.999991
to	O	O:0.999979
record	O	O:0.999987
the	O	O:0.999993
updated	O	O:0.999897
ratings	O	O:0.999129
in	O	O:0.999987
the	O	O:0.999990
player	O	O:0.999766
database	O	O:0.999823
.	O	O:0.999886
	
It	O	O:0.999935
looks	O	O:0.999943
like	O	O:0.999879
it's	O	O:0.999864
binding	O	O:0.999832
the	O	O:0.999751
function	O	O:0.999762
object	O	O:0.999941
as	O	O:0.999996
the	O	O:0.999992
column	O	O:0.999974
value	O	O:0.999935
rather	O	O:0.999938
than	O	O:0.999931
unpacking	O	O:0.999744
it	O	O:0.999987
to	O	O:0.999997
a	O	O:1.000000
dict	O	O:0.999049
,	O	O:0.999997
what	O	O:0.999915
I'm	O	O:0.999995
doing	O	O:0.999976
above	O	O:0.999567
is	O	O:0.999946
to	O	O:0.999968
return	O	O:0.999964
the	O	O:0.999875
`	O	O:0.999941
value_counts	B-API	B-API:0.999021
`	O	O:0.999996
as	O	O:0.999973
a	O	O:0.999984
list	O	O:0.989736
and	O	O:0.999997
then	O	O:0.999876
call	O	O:0.999426
`	O	O:0.999997
apply	O	B-API:0.995407
`	O	O:0.999984
again	O	O:0.999365
to	O	O:0.999995
unpack	O	O:0.999851
the	O	O:0.999977
single	O	O:0.998422
element	O	O:0.999848
list	O	O:0.997338
.	O	O:0.999930
	
This	O	O:0.999493
forces	O	O:0.999398
the	O	O:0.999989
dict	O	O:0.999798
to	O	O:0.999994
be	O	O:0.999999
unpacked	O	O:0.999972
into	O	O:0.999819
a	O	O:0.999997
single	O	O:0.994132
element	O	O:0.999961
list	O	O:0.998097
in	O	O:0.999982
the	O	O:0.999976
initial	O	O:0.998936
`	O	O:0.999984
apply	O	B-API:0.984831
`	O	O:0.999922
call	O	O:0.801224
:	O	O:0.999980
#CODE	O	O:0.997553
	
I'm	O	O:0.999930
trying	O	O:0.999886
to	O	O:0.999993
do	O	O:0.999996
apply	O	O:0.966084
simple	O	O:0.998804
functions	O	O:0.999606
to	O	O:0.999978
mostly	O	O:0.999997
numeric	O	O:0.999883
data	O	O:0.999717
in	O	O:0.999995
pandas	O	O:0.999853
.	O	O:0.999998
the	O	O:0.999997
data	O	O:0.999671
is	O	O:0.999999
a	O	O:0.999999
set	O	O:0.999859
of	O	O:0.999985
matrices	O	O:0.999756
indexed	O	O:0.999966
by	O	O:0.999987
time	O	O:0.999678
.	O	O:0.999787
	
I	O	O:0.999964
wanted	O	O:0.999980
to	O	O:0.999546
use	O	O:0.999998
hierarchical	O	O:0.973096
/	O	O:0.999976
multilevel	O	O:0.999681
indices	O	O:0.999526
to	O	O:0.999962
represent	O	O:0.999988
this	O	O:0.999848
and	O	O:1.000000
then	O	O:0.999936
use	O	O:0.999997
a	O	O:0.999967
split-apply-combine	O	O:0.974034
like	O	O:0.999921
operation	O	O:0.999945
to	O	O:0.999993
group	O	O:0.999987
the	O	O:0.999996
data	O	O:0.999889
,	O	O:0.999998
apply	O	O:0.885511
an	O	O:0.999880
operation	O	O:0.999450
,	O	O:0.999986
and	O	O:0.999994
summarize	O	O:0.999944
the	O	O:0.999972
result	O	O:0.999966
as	O	O:0.999995
a	O	O:0.999984
dataframe	B-API	O:0.984928
.	O	O:0.999853
	
I'd	O	O:0.999978
like	O	O:0.999990
the	O	O:0.999997
result	O	O:0.999915
of	O	O:0.999995
these	O	O:0.999948
operations	O	O:0.999963
to	O	O:0.999991
be	O	O:1.000000
dataframes	O	O:0.998581
and	O	O:0.999921
not	O	O:0.999918
Series	O	O:0.999692
objects	O	O:0.999193
.	O	O:0.999856
	
1	O	O:0.999799
)	O	O:0.999940
`	O	O:0.999947
groupby	B-API	B-API:0.998516
`	O	O:0.999991
on	O	O:0.999100
'	O	O:0.999977
id	O	O:0.999667
'	O	O:0.999887
and	O	O:0.999989
call	O	O:0.997860
`	O	O:0.999975
apply	O	B-API:0.994033
`	O	O:0.999959
on	O	O:0.999857
the	O	O:0.999976
'	O	O:0.999968
vehicle	O	O:0.997243
'	O	O:0.999979
column	O	O:0.999760
and	O	O:0.999976
pass	O	O:0.997646
method	O	O:0.999426
`	O	O:0.999988
nunique	B-API	B-API:0.995724
`	O	O:0.999991
,	O	O:0.999976
you	O	O:0.999998
have	O	O:0.999988
to	O	O:1.000000
subtract	O	O:0.999988
1	O	O:0.999991
as	O	O:0.999994
you	O	O:0.999931
are	O	O:0.999997
looking	O	O:0.999979
for	O	O:0.999997
changes	O	O:0.998814
rather	O	O:0.999867
than	O	O:0.999979
just	O	O:0.999930
an	O	O:0.999998
overall	O	O:0.999858
unique	O	O:0.824687
count	O	O:0.984788
:	O	O:0.999973
#CODE	O	O:0.999766
	
2	O	O:0.999755
)	O	O:0.999967
`	O	O:0.999980
apply	O	B-API:0.952907
`	O	O:0.999985
a	O	O:0.999853
lambda	O	O:0.999850
that	O	O:0.999953
tests	O	O:0.999876
whether	O	O:0.999976
the	O	O:0.999985
current	O	O:0.998762
vehicle	O	O:0.998916
does	O	O:0.999826
not	O	O:0.999993
equal	O	O:0.999967
the	O	O:0.999994
previous	O	O:0.999667
vehicle	O	O:0.999699
using	O	O:0.999881
`	O	O:0.999921
shift	O	B-API:0.996780
`	O	O:0.999960
,	O	O:0.999991
this	O	O:0.999801
is	O	O:0.999995
more	O	O:0.999880
semantically	O	O:0.999941
correct	O	O:0.999867
as	O	O:0.999993
this	O	O:0.999970
detects	O	O:0.999984
changes	O	O:0.999793
rather	O	O:0.999948
than	O	O:0.999968
just	O	O:0.999925
the	O	O:0.999998
overall	O	O:0.999705
unique	O	O:0.949003
count	O	O:0.998758
,	O	O:0.999997
calling	O	O:0.998916
`	O	O:0.999979
sum	O	O:0.993897
`	O	O:0.999998
on	O	O:0.999948
booleans	O	O:0.999917
will	O	O:0.999947
convert	O	O:0.996084
`	O	O:0.999994
True	O	O:0.992308
`	O	O:0.999984
and	O	O:0.999353
`	O	O:0.999993
False	O	O:0.985446
`	O	O:0.999992
to	O	O:0.999742
`	O	O:0.999999
1	O	O:0.997278
`	O	O:0.999987
and	O	O:0.999923
`	O	O:0.999992
0	O	O:0.994999
`	O	O:0.999981
respectively	O	O:0.980551
:	O	O:0.999978
#CODE	O	O:0.999712
	
Are	O	O:0.999987
just	O	O:0.999873
for	O	O:0.999996
ilustrate	O	O:0.999636
the	O	O:0.999984
use	O	O:0.999961
of	O	O:0.999756
map	O	B-API:0.995773
function	O	O:0.999873
:	O	O:0.999910
`	O	O:0.999996
l	O	O:0.998718
`	O	O:0.999989
is	O	O:0.999959
a	O	O:0.999985
list	O	O:0.996930
containing	O	O:0.999431
the	O	O:0.999985
integer	O	O:0.999632
values	O	O:0.999089
1	O	O:0.999940
,	O	O:0.999980
2	O	O:0.999851
and	O	O:0.999925
3	O	O:0.999849
and	O	O:0.999916
`	O	O:0.999989
ml	O	O:0.929178
`	O	O:0.999982
is	O	O:0.999941
a	O	O:0.999995
list	O	O:0.997460
we	O	O:0.999996
have	O	O:0.999986
obtained	O	O:0.999963
as	O	O:0.999999
the	O	O:0.999989
result	O	O:0.999971
of	O	O:0.999987
apply	O	B-API:0.585686
the	O	O:0.999866
`	O	O:0.999937
set_negative	O	O:0.940333
`	O	O:0.999998
lambda	O	O:0.999522
to	O	O:0.999971
`	O	O:0.999998
l	O	O:0.994885
`	O	O:0.999991
.	O	O:0.999367
	
In	O	O:0.999965
others	O	O:0.999971
words	O	O:0.999925
we	O	O:0.999999
have	O	O:0.999987
applied	O	O:0.999992
a	O	O:0.999970
function	O	O:0.999720
to	O	O:0.999996
each	O	O:0.999997
element	O	O:0.999954
of	O	O:0.999990
the	O	O:0.999980
sequence	O	O:0.999876
`	O	O:0.999988
l	O	O:0.998977
`	O	O:0.999997
without	O	O:0.999488
using	O	O:0.999979
a	O	O:0.999834
`	O	O:0.999647
for	O	O:0.999607
`	O	O:0.999982
o	O	O:0.998736
`	O	O:0.999996
while	O	O:0.996571
`	O	O:0.999988
loop	O	O:0.998783
.	O	O:0.999930
	
It	O	O:0.999950
seems	O	O:0.999942
like	O	O:0.999965
pandas	O	O:0.999726
either	O	O:0.999961
expects	O	O:0.999763
apply	O	O:0.654669
to	O	O:0.999935
return	O	O:0.999944
a	O	O:0.999984
scalar	O	O:0.999579
for	O	O:0.999992
each	O	O:0.999699
column	O	O:0.999889
,	O	O:0.999998
or	O	O:0.999999
a	O	O:0.999997
vector	O	O:0.999922
of	O	O:0.999990
the	O	O:0.999993
same	O	O:0.999985
length	O	O:0.999648
as	O	O:0.999990
the	O	O:0.999974
column	O	O:0.999418
.	O	O:0.999892
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999840
to	O	O:0.999988
return	O	O:0.999989
vectors	O	O:0.999610
of	O	O:0.999998
different	O	O:0.999939
length	O	O:0.999697
to	O	O:0.999971
the	O	O:1.000000
original	O	O:0.999908
data	O	O:0.999927
?	O	O:0.999980
	
Another	O	O:0.999490
version	O	O:0.999810
that	O	O:0.999769
works	O	O:0.999987
the	O	O:0.999999
same	O	O:0.999879
as	O	O:0.999995
EdChum's	O	O:0.999517
answer	O	O:0.999019
,	O	O:0.999912
but	O	O:0.999914
splits	O	O:0.999225
within	O	O:0.999645
`	O	O:0.999978
apply	O	B-API:0.975228
`	O	O:0.999933
,	O	O:0.999949
instead	O	O:0.999992
of	O	O:0.999990
within	O	O:0.998984
`	O	O:0.999985
np.percentile	B-API	B-API:0.998471
`	O	O:0.999891
:	O	O:0.999832
#CODE	O	O:0.999908
	
You	O	O:0.999885
can	O	O:0.999986
pass	O	O:0.999941
param	O	O:0.999764
`	O	O:0.999992
axis=1	O	O:0.995464
`	O	O:0.999992
to	O	O:0.999678
`	O	O:1.000000
apply	O	B-API:0.966957
`	O	O:0.999963
so	O	O:0.999924
that	O	O:0.999978
it	O	O:0.999999
process	O	O:0.999976
each	O	O:0.999974
row	O	O:0.999964
rather	O	O:0.999968
than	O	O:0.999956
the	O	O:0.999995
entire	O	O:0.999711
column	O	O:0.999102
:	O	O:0.999978
#CODE	O	O:0.999892
	
In	O	O:0.999962
the	O	O:0.999990
current	O	O:0.999513
implementation	O	O:0.999865
apply	O	O:0.629476
calls	O	O:0.999463
func	O	O:0.999263
twice	O	O:0.999660
on	O	O:0.999995
the	O	O:0.999995
first	O	O:0.999951
column	O	O:0.999900
/	O	O:0.999990
row	O	O:0.999952
to	O	O:0.999984
decide	O	O:0.999983
whether	O	O:0.999911
it	O	O:0.999980
can	O	O:0.999997
take	O	O:0.999999
a	O	O:1.000000
fast	O	O:0.999271
or	O	O:0.999995
slow	O	O:0.999480
code	O	O:0.999846
path	O	O:0.999747
.	O	O:0.999900
	
In	O	O:0.999962
the	O	O:0.999990
current	O	O:0.999513
implementation	O	O:0.999865
apply	O	O:0.629476
calls	O	O:0.999463
func	O	O:0.999263
twice	O	O:0.999634
on	O	O:0.999995
the	O	O:0.999994
first	O	O:0.999958
group	O	O:0.998965
to	O	O:0.999990
decide	O	O:0.999977
whether	O	O:0.999912
it	O	O:0.999980
can	O	O:0.999997
take	O	O:0.999999
a	O	O:1.000000
fast	O	O:0.999271
or	O	O:0.999995
slow	O	O:0.999480
code	O	O:0.999846
path	O	O:0.999747
.	O	O:0.999900
	
This	O	O:0.999683
can	O	O:0.999973
lead	O	O:0.999960
to	O	O:0.999997
unexpected	O	O:0.999976
behavior	O	O:0.999837
if	O	O:0.999941
func	O	O:0.989533
has	O	O:0.999931
side-effects	O	O:0.999808
,	O	O:0.999991
as	O	O:0.999998
they	O	O:0.999853
will	O	O:0.999994
take	O	O:0.999991
effect	O	O:0.999999
twice	O	O:0.999982
for	O	O:0.999995
the	O	O:0.999973
first	O	O:0.999235
group	O	O:0.995362
.	O	O:0.999854
	
In	O	O:0.999975
my	O	O:0.999971
opinion	O	O:0.999857
you	O	O:0.999948
should	O	O:0.999989
read	O	O:0.999910
the	O	O:0.999997
entire	O	O:0.999956
csv	O	O:0.999973
as	O	O:0.999999
a	O	O:0.999991
df	O	O:0.999234
,	O	O:0.999998
then	O	O:0.999783
`	O	O:0.999999
apply	O	B-API:0.912110
`	O	O:0.999997
your	O	O:0.989510
crawl	O	O:0.998517
method	O	O:0.999983
on	O	O:0.999945
column2	O	O:0.999807
and	O	O:0.999997
create	O	O:0.999582
the	O	O:0.999979
new	O	O:0.999908
column	O	O:0.999794
and	O	O:0.999999
then	O	O:0.999919
write	O	O:0.999983
the	O	O:0.999996
df	O	O:0.999845
to	O	O:0.999999
your	O	O:0.999968
output	O	O:0.998674
:	O	O:0.999987
#CODE	O	O:0.999820
	
using	O	O:0.999314
apply	O	B-API:0.965099
.	O	O:0.993973
	
#CODE	O	O:0.998453
	
apply	O	O:0.503471
pandas	O	O:0.999278
qcut	B-API	B-API:0.686133
function	O	O:0.999925
to	O	O:0.999984
subgroups	O	O:0.999974
	
Python	O	O:0.997611
Pandas	O	O:0.999872
DataFrame	B-API	O:0.945187
If	O	O:0.999956
Index	O	O:0.994000
Contains	O	O:0.999514
Any	O	O:0.999668
String	O	O:0.999047
Values	O	O:0.998105
,	O	O:0.999945
Apply	O	O:0.999538
Label	O	O:0.998486
,	O	O:0.999948
Else	O	O:0.999631
Apply	O	O:0.999180
Different	O	O:0.998592
Label	O	O:0.997889
	
If	O	O:0.999965
the	O	O:0.999855
'	O	O:0.999781
Search	O	O:0.999924
term	O	O:0.999390
'	O	O:0.999004
(	O	O:0.999989
index	O	O:0.999765
)	O	O:0.999981
CONTAINS	O	O:0.999858
`'	O	O:0.999940
american	O	O:0.999788
brewing	O	O:0.999514
'`	O	O:0.999937
or	O	O:0.999912
`'	O	O:0.999977
americanbrewing	O	O:0.999537
'`	O	O:0.999968
,	O	O:0.999976
apply	O	O:0.571752
the	O	O:0.999822
label	O	O:0.995705
`'	O	O:0.999806
Brand	O	O:0.999583
'`	O	O:0.999965
,	O	O:0.999988
else	O	O:0.999909
apply	O	B-API:0.527205
`'	O	O:0.999574
Non-brand	O	O:0.996037
'`	O	O:0.999982
to	O	O:0.999994
a	O	O:1.000000
column	O	O:0.999808
with	O	O:0.999969
the	O	O:0.999982
header	O	O:0.999467
`	O	O:0.999953
Label	O	O:0.993932
`	O	O:0.999985
.	O	O:0.998970
	
#CODE	O	O:0.998453
	
How	O	O:0.999951
do	O	O:0.999966
I	O	O:0.999992
output	O	O:0.999929
the	O	O:0.999555
`	O	O:0.999929
Label	O	O:0.995416
`	O	O:0.999999
column	O	O:0.999143
in	O	O:0.999997
the	O	O:0.999995
`	O	O:0.999979
result	O	O:0.998267
`	O	O:0.999989
`	O	O:0.999974
dataframe	B-API	O:0.984871
`	O	O:0.999999
based	O	O:0.999585
on	O	O:0.999995
if	O	O:0.999986
the	O	O:0.999982
`	O	O:0.999829
Search	O	O:0.999600
term	O	O:0.999797
`	O	O:0.999311
(	O	O:0.999936
index	O	O:0.999902
)	O	O:0.999980
contains	O	O:0.999908
any	O	O:0.999980
of	O	O:0.999979
several	O	O:0.999406
possible	O	O:0.999965
string	O	O:0.999901
values	O	O:0.999101
?	O	O:0.999938
	
Where	O	O:0.998500
`	O	O:0.999976
True	O	O:0.996204
`	O	O:0.999995
,	O	O:0.999975
apply	O	B-API:0.583595
`	O	O:0.999501
Brand	O	O:0.992068
`	O	O:0.999983
,	O	O:0.999828
Else	O	O:0.999927
,	O	O:0.999988
apply	O	B-API:0.762547
`	O	O:0.999845
Non-brand	O	O:0.981889
`	O	O:0.999995
to	O	O:0.999947
the	O	O:0.999999
`	O	O:0.999942
Label	O	O:0.993683
`	O	O:0.999996
column	O	O:0.998375
.	O	O:0.999961
	
You	O	O:0.999923
could	O	O:0.999940
convert	O	O:0.999629
the	O	O:0.999930
`	O	O:0.999968
index	O	O:0.997939
`	O	O:0.999998
to	O	O:0.999699
`	O	O:0.999999
Series	O	O:0.983526
`	O	O:0.999985
and	O	O:0.999985
apply	O	O:0.769921
transformations	O	O:0.985350
.	O	O:0.999218
	
#CODE	O	O:0.998453
	
No	O	O:0.999980
matter	O	O:0.999963
which	O	O:0.999965
of	O	O:0.999995
the	O	O:0.999991
given	O	O:0.999773
alternatives	O	O:0.999897
I	O	O:0.999989
apply	O	O:0.756097
-	O	O:0.999514
it	O	O:0.999956
just	O	O:0.999793
doesn't	O	O:0.999968
work	O	O:0.999523
.	O	O:0.999978
	
Do	O	O:0.999968
you	O	O:0.999990
have	O	O:0.999990
any	O	O:0.999991
ideas	O	O:0.999681
?	O	O:0.999908
	
#CODE	O	O:0.998453
	
I	O	O:0.999952
can't	O	O:0.999958
figure	O	O:0.999750
out	O	O:0.999994
a	O	O:0.999994
way	O	O:0.999887
to	O	O:0.999978
do	O	O:1.000000
this	O	O:0.999955
in	O	O:0.999998
a	O	O:0.999999
single	O	O:0.999640
loop	O	O:0.999874
,	O	O:0.999995
the	O	O:0.999988
problem	O	O:0.999762
here	O	O:0.998849
is	O	O:0.999998
that	O	O:0.999924
you	O	O:0.999998
want	O	O:0.999987
some	O	O:0.999958
kind	O	O:0.999968
of	O	O:0.999997
rolling	O	O:0.971995
apply	O	O:0.869262
that	O	O:0.999444
can	O	O:0.999992
then	O	O:0.999999
look	O	O:0.999993
at	O	O:0.999998
the	O	O:0.999997
previous	O	O:0.999634
row	O	O:0.999888
,	O	O:0.999996
the	O	O:0.999993
problem	O	O:0.999816
here	O	O:0.999118
is	O	O:0.999998
that	O	O:0.999921
the	O	O:0.999999
previous	O	O:0.999736
row	O	O:0.999896
update	O	O:0.998907
will	O	O:0.999902
not	O	O:0.999989
be	O	O:0.999998
observable	O	O:0.999962
until	O	O:0.999156
the	O	O:0.999967
`	O	O:0.999980
apply	O	B-API:0.981834
`	O	O:0.999954
finishes	O	O:0.998971
so	O	O:0.999986
for	O	O:0.999963
instance	O	O:0.999775
the	O	O:0.999891
following	O	O:0.998429
works	O	O:0.999888
because	O	O:0.999983
we	O	O:0.999987
in	O	O:0.999991
run	O	O:0.999885
the	O	O:0.999994
apply	O	B-API:0.750710
3	O	O:0.999457
times	O	O:0.997997
.	O	O:0.999937
	
This	O	O:0.999224
isn't	O	O:0.999925
great	O	O:0.998782
IMO	O	O:0.999096
:	O	O:0.999947
#CODE	O	O:0.999699
	
Hi	O	O:0.999848
Many	O	O:0.999898
thanks	O	O:0.999695
for	O	O:0.999968
all	O	O:0.999974
the	O	O:0.999966
answers	O	O:0.999630
,	O	O:0.999991
I	O	O:0.999997
have	O	O:0.999982
tried	O	O:0.999847
to	O	O:0.999995
apply	O	O:0.864859
the	O	O:0.999810
df.ix	B-API	B-API:0.998314
[:	O	O:0.999729
,	O	O:0.999953
:	O	O:0.999975
'	O	O:0.999985
4	O	O:0.999986
']	O	O:0.999919
.apply	B-API	B-API:0.998807
(	O	O:0.999887
lambda	O	O:0.998796
x	O	O:0.999118
:	O	O:0.999945
x.isin	O	O:0.997949
(	O	O:0.999995
df	O	O:0.999761
[	O	O:0.999963
'	O	O:0.999962
1	O	O:0.999954
']))	O	O:0.998792
.all	B-API	B-API:0.999315
(	O	O:0.999958
axis=1	O	O:0.999725
)	O	O:0.999984
.sum()	B-API	B-API:0.995853
to	O	O:0.999984
the	O	O:1.000000
last	O	O:0.999417
4	O	O:0.999996
columns	O	O:0.999960
of	O	O:0.999996
my	O	O:0.999958
example	O	O:0.999622
(	O	O:0.999998
columns	O	O:0.999877
2	O	O:0.999979
,	O	O:0.999984
3	O	O:0.999925
,	O	O:0.999966
4	O	O:0.999919
and	O	O:0.999988
5	O	O:0.999972
)	O	O:0.999987
by	O	O:0.999932
using	O	O:0.999731
df.ix	B-API	B-API:0.999508
[:	O	O:0.998142
,	O	O:0.999916
:	O	O:0.999950
'	O	O:0.999985
5	O	O:0.999986
']	O	O:0.999918
.apply	B-API	B-API:0.998787
(	O	O:0.999883
lambda	O	O:0.998754
x	O	O:0.999118
:	O	O:0.999945
x.isin	O	O:0.997949
(	O	O:0.999995
df	O	O:0.999783
[	O	O:0.999966
'	O	O:0.999957
2	O	O:0.999954
']))	O	O:0.998695
.all	B-API	B-API:0.999264
(	O	O:0.999939
axis=1	O	O:0.999455
)	O	O:0.999939
.sum()	B-API	B-API:0.998725
and	O	O:0.999995
have	O	O:0.999899
checked	O	O:0.999845
by	O	O:0.999980
hand	O	O:0.998065
(	O	O:0.999992
with	O	O:0.999993
a	O	O:0.999985
dataset	O	O:0.999895
that	O	O:0.999916
provides	O	O:0.999980
me	O	O:0.999995
an	O	O:0.999993
answer	O	O:0.999923
greater	O	O:0.999913
than	O	O:0.999478
0	O	O:0.999688
,	O	O:0.999988
but	O	O:0.999984
keep	O	O:0.999613
getting	O	O:0.999953
a	O	O:0.999999
different	O	O:0.998950
result	O	O:0.999693
.	O	O:0.999885
	
Have	O	O:0.999856
I	O	O:0.999991
applied	O	O:0.999946
the	O	O:0.999884
logic	O	O:0.999635
correctly	O	O:0.999812
please	O	O:0.999693
?	O	O:0.999949
	
In	O	O:0.999978
a	O	O:0.999983
Python	O	O:0.999288
Pandas	O	O:0.999417
`	O	O:0.999965
DataFrame	B-API	O:0.853922
`	O	O:0.999989
,	O	O:0.999922
I'm	O	O:0.999993
trying	O	O:0.999901
to	O	O:0.999995
apply	O	O:0.989257
a	O	O:0.999978
specific	O	O:0.998835
label	O	O:0.999898
to	O	O:0.999998
a	O	O:1.000000
row	O	O:0.999894
if	O	O:0.999998
a	O	O:0.999979
'	O	O:0.999579
Search	O	O:0.999946
terms	O	O:0.999552
'	O	O:0.999969
column	O	O:0.999847
contains	O	O:0.999903
any	O	O:0.999997
possible	O	O:0.999892
strings	O	O:0.999890
from	O	O:0.999983
a	O	O:0.999997
joined	O	O:0.994874
,	O	O:0.999977
pipe-delimited	O	O:0.999052
list	O	O:0.996973
.	O	O:0.999929
	
How	O	O:0.999884
can	O	O:0.999945
I	O	O:0.999999
do	O	O:0.999998
conditional	O	O:0.996400
if	O	O:0.999973
,	O	O:0.999992
elif	O	O:0.989511
,	O	O:0.999972
else	O	O:0.999840
statements	O	O:0.999831
with	O	O:0.999916
Pandas	O	O:0.999831
?	O	O:0.999945
	
It	O	O:0.999842
doesn't	O	O:0.999859
look	O	O:0.999954
like	O	O:0.999911
`	O	O:0.999992
str.contains	B-API	B-API:0.998824
`	O	O:0.999973
supports	O	O:0.999878
multiple	O	O:0.999970
patterns	O	O:0.999400
,	O	O:0.999996
so	O	O:0.999996
you	O	O:0.999967
may	O	O:0.999999
just	O	O:0.999996
have	O	O:0.999997
to	O	O:0.999999
apply	O	O:0.996290
over	O	O:0.999778
the	O	O:0.999965
rows	O	O:0.993776
:	O	O:0.999950
#CODE	O	O:0.999957
	
Apply	O	O:0.999743
a	O	O:0.999984
lambda	O	O:0.996659
function	O	O:0.999916
on	O	O:0.999992
the	O	O:0.999999
rows	O	O:0.999034
and	O	O:0.999996
test	O	O:0.999888
if	O	O:0.999948
A	O	O:0.999960
is	O	O:0.999974
in	O	O:0.999785
B	O	O:0.999798
.	O	O:0.999861
	
#CODE	O	O:0.998453
	
If	O	O:0.999922
you're	O	O:0.999948
looking	O	O:0.999928
to	O	O:0.999994
perform	O	O:0.999959
some	O	O:0.999964
kind	O	O:0.999980
of	O	O:0.999994
timestamp	O	O:0.996882
calculation	O	O:0.999974
using	O	O:0.999969
your	O	O:0.999191
index	O	O:0.999689
you	O	O:0.999982
can	O	O:0.999993
call	O	O:0.999946
`	O	O:0.999997
apply	O	B-API:0.997226
`	O	O:0.999949
and	O	O:0.999910
access	O	O:0.999276
the	O	O:0.999941
index	O	O:0.999882
using	O	O:0.999934
the	O	O:0.999885
`	O	O:0.999936
name	O	O:0.997291
`	O	O:0.999977
attribute	O	O:0.999325
:	O	O:0.999972
#CODE	O	O:0.999705
	
Is	O	O:0.999986
there	O	O:0.999983
a	O	O:0.999995
way	O	O:0.999915
to	O	O:0.999992
apply	O	O:0.972383
to	O	O:0.999973
a	O	O:0.999999
pandas	O	O:0.999871
dataframe	B-API	O:0.999282
while	O	O:0.999975
threading	O	O:0.999752
state	O	O:0.999683
?	O	O:0.999873
	
My	O	O:0.999960
goal	O	O:0.997910
is	O	O:0.999992
to	O	O:0.999969
be	O	O:1.000000
ably	O	O:0.999817
to	O	O:0.999984
do	O	O:0.999999
an	O	O:0.999991
apply	O	B-API:0.814433
,	O	O:0.999846
but	O	O:0.999964
one	O	O:0.999937
which	O	O:0.999947
maintains	O	O:0.999981
some	O	O:0.999851
state	O	O:0.999645
.	O	O:0.999851
	
Now	O	O:0.999943
,	O	O:0.999995
I	O	O:0.999996
know	O	O:0.999981
that	O	O:0.999899
I	O	O:0.999996
can	O	O:0.999998
just	O	O:0.999993
have	O	O:0.999997
a	O	O:0.999992
variable	O	O:0.996878
(	O	O:0.999959
and	O	O:0.999995
be	O	O:0.999984
aware	O	O:0.999897
that	O	O:0.999714
apply	O	B-API:0.827830
is	O	O:0.999962
called	O	O:0.998201
twice	O	O:0.999979
,	O	O:0.999986
I	O	O:0.999994
believe	O	O:0.999930
)	O	O:0.999838
,	O	O:0.999918
but	O	O:0.999951
I'm	O	O:0.999971
wondering	O	O:0.999835
if	O	O:0.999993
there	O	O:0.999815
is	O	O:0.999996
a	O	O:0.999995
more	O	O:0.999237
idiomatic	O	O:0.999807
way	O	O:0.999976
to	O	O:0.999971
do	O	O:0.999999
this	O	O:0.999912
?	O	O:0.999968
	
"	O	O:0.999936
maintains	O	O:0.999902
some	O	O:0.999904
state	O	O:0.999407
"	O	O:0.999925
<---	O	O:0.999689
what	O	O:0.999648
does	O	O:0.999914
this	O	O:0.999987
mean	O	O:0.999889
and	O	O:0.999990
how	O	O:0.999987
does	O	O:0.999150
`	O	O:0.999997
apply	O	B-API:0.983554
`	O	O:0.999966
not	O	O:0.999802
currently	O	O:0.999977
achieve	O	O:0.999967
this	O	O:0.999706
?	O	O:0.999971
	
post	O	O:0.999270
some	O	O:0.999969
more	O	O:0.999948
code	O	O:0.999820
showing	O	O:0.999836
what	O	O:0.999676
you're	O	O:0.999967
trying	O	O:0.999920
to	O	O:0.999985
accomplish	O	O:0.999113
(	O	O:0.999931
and	O	O:0.999995
example	O	O:0.999912
output	O	O:0.999104
)	O	O:0.999961
	
How	O	O:0.999900
to	O	O:0.999987
apply	O	O:0.985841
different	O	O:0.999811
aggregation	O	O:0.998998
functions	O	O:0.999924
to	O	O:0.999988
same	O	O:1.000000
column	O	O:0.999985
by	O	O:0.999995
using	O	O:0.999957
pandas	O	O:0.994837
Groupby	B-API	O:0.546218
	
@USER	O	O:0.999020
I'd	O	O:0.999968
say	O	O:0.999992
that	O	O:0.999931
question	O	O:0.999623
is	O	O:0.999998
different	O	O:0.999614
,	O	O:0.999993
the	O	O:0.999966
OP	O	O:0.999894
here	O	O:0.998063
is	O	O:0.999988
asking	O	O:0.999415
how	O	O:0.999951
to	O	O:0.999978
apply	O	O:0.996363
multiple	O	O:0.999930
different	O	O:0.999842
functions	O	O:0.999954
at	O	O:0.999996
once	O	O:0.999230
,	O	O:0.999996
not	O	O:0.999992
to	O	O:0.999997
generate	O	O:0.999998
multiple	O	O:0.999993
columns	O	O:0.999993
from	O	O:0.999995
a	O	O:0.999999
single	O	O:0.995689
function	O	O:0.999823
	
What	O	O:0.999691
I	O	O:0.999979
got	O	O:0.999992
so	O	O:0.999935
far	O	O:0.999462
is	O	O:0.999989
the	O	O:0.999958
code	O	O:0.999202
below	O	O:0.999098
and	O	O:0.999979
it	O	O:0.999943
works	O	O:0.999813
fine	O	O:0.999397
and	O	O:0.999963
brings	O	O:0.999961
the	O	O:0.999815
results	O	O:0.999466
it	O	O:0.999889
should	O	O:0.999889
:	O	O:0.999991
It	O	O:0.999996
fills	O	O:0.999798
`	O	O:0.999992
df	O	O:0.997999
[	O	O:0.999982
'	O	O:0.999982
c	O	O:0.999976
']`	O	O:0.999969
with	O	O:0.999840
the	O	O:0.999954
calculation	O	O:0.999528
`	O	O:0.999998
previous	O	O:0.999424
c	O	O:0.999956
*	O	O:0.999993
b	O	O:0.999874
`	O	O:0.999987
if	O	O:0.999967
there	O	O:0.999895
is	O	O:0.999989
no	O	O:0.999942
`	O	O:0.999990
c	O	O:0.998709
`	O	O:0.999995
given	O	O:0.987726
.	O	O:0.999958
	
The	O	O:0.999925
problem	O	O:0.997518
is	O	O:0.999997
that	O	O:0.999793
I	O	O:1.000000
have	O	O:0.999992
to	O	O:0.999958
apply	O	O:0.996376
this	O	O:0.999826
to	O	O:0.999996
a	O	O:1.000000
bigger	O	O:0.999898
data	O	O:0.999972
set	O	O:0.999887
`	O	O:0.999977
len	O	B-API:0.997324
(	O	O:0.999994
df.index	O	O:0.869838
)	O	O:0.999975
=	O	O:0.999536
ca	O	O:0.999820
.	O	O:0.999825
	
10.000	O	O:0.991304
`	O	O:0.999979
,	O	O:0.999976
so	O	O:0.999998
the	O	O:0.999954
function	O	O:0.999940
I	O	O:0.999998
have	O	O:0.999995
so	O	O:0.999973
far	O	O:0.999798
is	O	O:0.999986
inappropriate	O	O:0.999784
since	O	O:0.999938
I	O	O:0.999985
would	O	O:0.999999
have	O	O:0.999955
to	O	O:0.999999
write	O	O:0.999999
a	O	O:0.999999
couple	O	O:0.999625
of	O	O:0.999994
thousand	O	O:0.998735
times	O	O:0.999648
:	O	O:0.999971
`	O	O:0.999996
df	O	O:0.999418
[	O	O:0.999984
'	O	O:0.999985
c	O	O:0.999937
']	O	O:0.999972
=	O	O:0.998628
df.apply	B-API	B-API:0.988560
(	O	O:0.999944
func	O	O:0.989990
,	O	O:0.999990
axis	O	O:0.999726
=1	O	O:0.999924
)`	O	O:0.999684
.	O	O:0.999700
	
A	O	O:0.999918
`	O	O:0.999987
while	O	O:0.997041
`	O	O:0.999995
loop	O	O:0.997743
is	O	O:0.999994
no	O	O:0.999945
option	O	O:0.999847
in	O	O:0.999932
`	O	O:0.999994
pandas	O	O:0.997489
`	O	O:0.999993
for	O	O:0.999971
this	O	O:0.999980
size	O	O:0.999920
of	O	O:0.999963
dataset	O	O:0.999646
.	O	O:0.999922
	
Any	O	O:0.999667
ideas	O	O:0.999166
?	O	O:0.999888
	
#CODE	O	O:0.998453
	
@USER	O	O:0.997488
Cunningham	O	O:0.997398
:	O	O:0.999933
How	O	O:0.999960
would	O	O:0.999975
I	O	O:0.999997
apply	O	O:0.979677
this	O	O:0.995112
?	O	O:0.999902
	
But	O	O:0.999894
I'm	O	O:0.999991
a	O	O:0.999995
bit	O	O:0.999825
stumped	O	O:0.999699
at	O	O:0.999987
how	O	O:0.999977
to	O	O:0.999984
do	O	O:0.999999
this	O	O:0.999960
pandas	O	O:0.999245
.	O	O:0.999955
	
As	O	O:0.999971
far	O	O:0.999974
as	O	O:0.999997
I	O	O:0.999950
can	O	O:0.999993
tell	O	O:0.999913
,	O	O:0.999999
aggregate	O	O:0.693625
only	O	O:0.999820
applies	O	O:0.999977
a	O	O:0.999975
function	O	O:0.999642
on	O	O:0.999998
a	O	O:0.999997
given	O	O:0.998725
grouped	O	O:0.999860
column	O	O:0.999796
,	O	O:0.999985
and	O	O:0.999994
I	O	O:0.999985
don't	O	O:0.999942
know	O	O:0.999486
how	O	O:0.999987
to	O	O:0.999973
get	O	O:0.999999
it	O	O:0.999997
to	O	O:0.999999
apply	O	O:0.996772
a	O	O:0.999758
function	O	O:0.999320
that	O	O:0.999702
involves	O	O:0.999989
multiple	O	O:0.999951
columns	O	O:0.999517
.	O	O:0.999910
	
This	O	O:0.999468
operation	O	O:0.999831
will	O	O:0.999982
only	O	O:0.999992
apply	O	O:0.910521
to	O	O:0.999951
groups	O	O:0.999961
that	O	O:0.999926
are	O	O:0.999998
larger	O	O:0.999985
that	O	O:0.999785
2	O	O:0.999950
in	O	O:0.999990
the	O	O:0.999987
original	O	O:0.999492
dataframe	B-API	O:0.997010
.	O	O:0.999881
	
I	O	O:0.999971
tried	O	O:0.999934
an	O	O:0.999965
alternate	O	O:0.999930
solution	O	O:0.999593
which	O	O:0.999831
involved	O	O:0.999721
`	O	O:0.999993
apply	O	B-API:0.991703
`	O	O:0.999972
ing	O	O:0.996568
a	O	O:0.999963
`	O	O:0.999841
lambda	O	O:0.995060
`	O	O:0.999972
function	O	O:0.999431
to	O	O:0.999998
each	O	O:0.999997
element	O	O:0.999941
of	O	O:0.999994
the	O	O:0.999912
`	O	O:0.999986
Series	O	O:0.967750
`	O	O:0.999982
but	O	O:0.999960
that	O	O:0.999920
took	O	O:0.999685
longer	O	O:0.999958
.	O	O:0.999890
	
Now	O	O:0.999925
get	O	O:0.999961
the	O	O:0.999995
distance	O	O:0.999969
from	O	O:0.999935
points	O	O:0.999910
to	O	O:0.999994
lines	O	O:0.999968
and	O	O:0.999998
only	O	O:0.999992
save	O	O:0.999461
the	O	O:0.999986
minimum	O	O:0.999786
distance	O	O:0.999858
for	O	O:0.999994
each	O	O:0.999193
point	O	O:0.996786
(	O	O:0.999993
see	O	O:0.999984
below	O	O:0.999842
for	O	O:0.999997
a	O	O:0.999964
version	O	O:0.999056
with	O	O:0.999953
apply	O	B-API:0.799051
)	O	O:0.999831
#CODE	O	O:0.997488
	
(	O	O:0.999981
taken	O	O:0.999784
from	O	O:0.999986
a	O	O:0.999993
github	O	O:0.999509
issue	O	O:0.999510
)	O	O:0.999954
Using	O	O:0.999174
`	O	O:0.999961
apply	O	B-API:0.986385
`	O	O:0.999808
is	O	O:0.999604
nicer	O	O:0.998810
and	O	O:0.999995
more	O	O:0.999811
consistent	O	O:0.998691
with	O	O:0.999882
how	O	O:0.999860
you'd	O	O:0.999957
do	O	O:0.999992
it	O	O:0.999993
in	O	O:0.999943
`	O	O:0.999996
pandas	O	O:0.985028
`	O	O:0.999968
:	O	O:0.999719
#CODE	O	O:0.999908
	
2	O	O:0.999686
)	O	O:0.999964
How	O	O:0.999951
do	O	O:0.999966
I	O	O:0.999997
apply	O	O:0.933033
a	O	O:0.999093
function	O	O:0.999329
to	O	O:0.999999
a	O	O:1.000000
set	O	O:0.999850
of	O	O:0.999999
columns	O	O:0.999949
to	O	O:0.999994
remove	O	O:0.999950
SettingWithCopyWarning	O	O:0.999899
when	O	O:0.999597
reformatting	O	O:0.999813
DATA	O	O:0.999691
columns	O	O:0.999389
.	O	O:0.999826
	
I	O	O:0.999991
know	O	O:0.999918
I	O	O:0.999971
can	O	O:0.999971
do	O	O:0.999992
it	O	O:0.999997
with	O	O:0.999978
a	O	O:0.999996
custom	O	O:0.996732
apply	O	B-API:0.707646
,	O	O:0.999558
but	O	O:0.999801
I'm	O	O:0.999972
wondering	O	O:0.999828
if	O	O:0.999955
anyone	O	O:0.999656
has	O	O:0.999982
any	O	O:0.999943
fun	O	O:0.999519
ideas	O	O:0.999524
?	O	O:0.999930
	
(	O	O:0.999775
Also	O	O:0.999987
this	O	O:0.999882
is	O	O:0.999998
slow	O	O:0.999583
when	O	O:0.999925
there	O	O:0.999910
are	O	O:0.999999
many	O	O:0.999912
groups	O	O:0.999173
.	O	O:0.999940
)	O	O:0.999992
Here's	O	O:0.999871
one	O	O:0.999900
solution	O	O:0.997544
:	O	O:0.999973
#CODE	O	O:0.999812
	
@USER	O	O:0.999848
all	O	O:0.999936
of	O	O:0.999997
this	O	O:0.999811
soln	O	O:0.998979
is	O	O:0.999990
completely	O	O:0.999880
vectorized	O	O:0.999878
or	O	O:0.999902
in	O	O:0.999931
cython	O	O:0.999194
.	O	O:0.999943
	
Using	O	O:0.999697
an	O	O:0.999854
apply	O	B-API:0.845165
(	O	O:0.999961
even	O	O:0.999729
with	O	O:0.999997
a	O	O:0.999994
fast	O	O:0.999528
lambda	O	O:0.999732
)	O	O:0.999984
will	O	O:0.999749
be	O	O:0.999999
orders	O	O:0.999936
of	O	O:0.999971
magnitude	O	O:0.999944
slower	O	O:0.999811
on	O	O:0.999984
any	O	O:0.999990
real	O	O:0.998110
dataset	O	O:0.999592
.	O	O:0.999603
	
As	O	O:0.999971
the	O	O:0.999980
apply	O	B-API:0.926482
is	O	O:0.999950
essentially	O	O:0.999768
a	O	O:0.999994
python	O	O:0.997369
loop	O	O:0.999494
.	O	O:0.999778
	
The	O	O:0.999925
problem	O	O:0.998245
is	O	O:0.999974
,	O	O:0.999995
that	O	O:0.999962
I	O	O:0.999995
am	O	O:0.999996
getting	O	O:0.999853
this	O	O:0.999913
error	O	O:0.999933
form	O	O:0.999958
the	O	O:0.999986
last	O	O:0.999865
line	O	O:0.999930
of	O	O:0.999992
code	O	O:0.999803
,	O	O:1.000000
where	O	O:0.999948
I	O	O:0.999992
try	O	O:0.999998
to	O	O:0.999980
apply	O	O:0.985964
the	O	O:0.999645
function	O	O:0.999728
with	O	O:0.999802
`	O	O:0.999969
df.apply	B-API	B-API:0.990977
(	O	O:0.999989
flex_relative	O	O:0.994563
,	O	O:0.999989
axis	O	O:0.999853
=1	O	O:0.999932
)`	O	O:0.999788
	
The	O	O:0.999972
only	O	O:0.999956
thing	O	O:0.999966
I	O	O:0.999990
found	O	O:0.999965
so	O	O:0.999881
far	O	O:0.999651
was	O	O:0.999941
the	O	O:0.999976
link	O	O:0.999620
below	O	O:0.999036
,	O	O:0.999991
but	O	O:0.999990
calling	O	O:0.999875
a	O	O:0.999985
R	O	O:0.986403
function	O	O:0.999828
won't	O	O:0.999944
work	O	O:0.999961
for	O	O:0.999997
me	O	O:0.999963
because	O	O:0.999848
I	O	O:0.999997
need	O	O:0.999995
to	O	O:0.999974
apply	O	O:0.995378
that	O	O:0.999720
to	O	O:0.999987
quite	O	O:0.999998
big	O	O:0.999884
datasets	O	O:0.999637
and	O	O:0.999971
I	O	O:0.999993
may	O	O:0.999990
also	O	O:0.999869
implement	O	O:0.999956
an	O	O:0.999959
optimization	O	O:0.999680
in	O	O:0.999997
this	O	O:0.999533
function	O	O:0.999975
,	O	O:0.999994
so	O	O:0.999990
it	O	O:0.999991
definitely	O	O:0.999948
needs	O	O:0.999981
to	O	O:0.999993
be	O	O:0.999999
built	O	O:0.999547
in	O	O:0.999933
python	O	O:0.998934
.	O	O:0.999920
	
Here	O	O:0.997738
is	O	O:0.999977
the	O	O:0.999969
link	O	O:0.998891
anyway	O	O:0.999589
:	O	O:0.999992
Finance	O	O:0.999807
Lib	O	O:0.999959
with	O	O:0.999861
portfolio	O	O:0.993266
optimization	O	O:0.999901
method	O	O:0.999919
in	O	O:0.999971
python	O	O:0.999570
	
The	O	O:0.999886
following	O	O:0.999329
should	O	O:0.999861
be	O	O:0.999998
more	O	O:0.999944
optimised	O	O:0.999636
,	O	O:0.999995
basically	O	O:0.999953
I'd	O	O:0.999972
`	O	O:0.999988
groupby	B-API	B-API:0.997641
`	O	O:0.999992
on	O	O:0.999762
the	O	O:0.999996
team	O	O:0.999898
,	O	O:0.999997
apply	O	O:0.849297
a	O	O:0.999927
boolean	O	O:0.999001
test	O	O:0.999850
of	O	O:0.999989
whether	O	O:0.999866
the	O	O:0.999996
difference	O	O:0.999539
in	O	O:0.999986
the	O	O:0.999991
datetime	O	O:0.987542
is	O	O:0.999987
equal	O	O:0.999395
to	O	O:0.999999
a	O	O:1.000000
timedelta	O	O:0.994044
of	O	O:0.999986
1	O	O:0.999735
day	O	O:0.999958
.	O	O:0.999772
	
Then	O	O:0.999423
for	O	O:0.999996
where	O	O:0.999982
this	O	O:0.997805
is	O	O:0.999996
True	O	O:0.999863
then	O	O:0.999930
apply	O	O:0.981860
a	O	O:0.999963
`	O	O:0.998604
cumsum	B-API	B-API:0.997199
`	O	O:0.999989
on	O	O:0.999967
this	O	O:0.999948
and	O	O:0.999999
add	O	O:0.999744
1	O	O:0.999296
.	O	O:0.999641
	
Background-	O	O:0.995790
I'm	O	O:0.999977
trying	O	O:0.999965
to	O	O:0.999990
extract	O	O:0.999923
unsynchronised	O	O:0.999843
dual-doppler	O	O:0.999881
measurements	O	O:0.999910
from	O	O:0.999981
a	O	O:0.999998
scanning	O	O:0.996895
`	O	O:0.999977
LiDAR	O	O:0.992537
`	O	O:0.999991
which	O	O:0.997902
is	O	O:0.999993
taking	O	O:0.999054
PPI	O	O:0.999123
scans	O	O:0.998653
.	O	O:0.999740
	
I	O	O:0.999987
have	O	O:0.999993
the	O	O:0.999989
data	O	O:0.999594
(	O	O:0.999993
from	O	O:0.999992
MySQL	O	O:0.999766
)	O	O:0.999990
loaded	O	O:0.999335
into	O	O:0.999864
pandas	O	O:0.999948
dataframes	O	O:0.999338
,	O	O:0.999979
and	O	O:0.999995
now	O	O:0.999981
need	O	O:0.999919
to	O	O:0.999997
apply	O	O:0.996797
some	O	O:0.999892
matching	O	O:0.998602
function	O	O:0.999974
where	O	O:0.999987
the	O	O:0.999999
rows	O	O:0.999801
are	O	O:0.999992
matched	O	O:0.999974
if	O	O:0.999987
the	O	O:0.999998
time	O	O:0.999921
of	O	O:0.999987
measurement	O	O:0.999202
is	O	O:0.999990
within	O	O:0.999918
some	O	O:0.999764
limit	O	O:0.988266
(	O	O:0.999992
time	O	O:0.999983
8s	O	O:0.999969
apart	O	O:0.999893
)	O	O:0.999979
.	O	O:0.999677
	
So	O	O:0.999922
it	O	O:0.999991
seems	O	O:0.999982
to	O	O:0.999998
have	O	O:0.999998
collapsed	O	O:0.999935
the	O	O:0.999996
groups	O	O:0.996780
,	O	O:0.999937
but	O	O:0.999989
I've	O	O:0.999850
now	O	O:0.999993
lost	O	O:0.999892
data	O	O:0.999930
?	O	O:0.999958
	
Or	O	O:0.999959
how	O	O:0.999777
is	O	O:0.999989
the	O	O:0.999967
object	O	O:0.999755
now	O	O:0.999880
stored	O	O:0.999604
?	O	O:0.999965
	
I	O	O:0.999974
realize	O	O:0.999548
I	O	O:0.999823
haven't	O	O:0.999913
done	O	O:0.999630
the	O	O:0.999990
apply	O	B-API:0.690629
stage	O	O:0.998288
,	O	O:0.999953
which	O	O:0.999681
is	O	O:0.999988
probably	O	O:0.999855
how	O	O:0.999979
I	O	O:0.999996
will	O	O:0.999994
generate	O	O:0.999934
new	O	O:0.999995
rows	O	O:0.999633
and	O	O:0.999993
new	O	O:0.999992
columns	O	O:0.997692
,	O	O:0.999987
but	O	O:0.999985
I	O	O:0.999989
don't	O	O:0.999987
know	O	O:0.999621
the	O	O:0.999998
next	O	O:0.999851
step	O	O:0.999960
or	O	O:0.999996
if	O	O:0.999996
there's	O	O:0.999984
a	O	O:0.999984
cookbook	O	O:0.999832
example	O	O:0.999867
for	O	O:0.999996
something	O	O:0.999906
like	O	O:0.999855
this	O	O:0.999910
.	O	O:0.999939
	
One	O	O:0.999632
method	O	O:0.999828
would	O	O:0.999982
be	O	O:0.999999
to	O	O:0.999999
convert	O	O:0.999686
the	O	O:0.999997
time	O	O:0.999953
strings	O	O:0.999887
to	O	O:0.999982
datetime	O	O:0.999894
but	O	O:0.999992
only	O	O:0.999980
take	O	O:0.999972
the	O	O:0.999996
time	O	O:0.999933
portion	O	O:0.999759
and	O	O:0.999999
then	O	O:0.999947
call	O	O:0.999201
`	O	O:0.999995
apply	O	B-API:0.998752
`	O	O:0.999870
and	O	O:0.999842
call	O	O:0.998896
`	O	O:0.999949
datetime.combine	O	B-API:0.898242
`	O	O:0.999994
to	O	O:0.999956
produce	O	O:1.000000
your	O	O:0.999966
datetime	O	O:0.995120
for	O	O:0.999994
both	O	O:0.999431
columns	O	O:0.997360
:	O	O:0.999961
#CODE	O	O:0.999879
	
Return	O	O:0.998368
multiple	O	O:0.999839
objects	O	O:0.999921
from	O	O:0.999966
an	O	O:0.999993
apply	O	B-API:0.531802
function	O	O:0.998423
in	O	O:0.999847
Pandas	O	O:0.999663
	
I'm	O	O:0.999935
practicing	O	O:0.999705
with	O	O:0.999944
using	O	O:0.999903
`	O	O:0.999954
apply	O	B-API:0.993607
`	O	O:0.999908
with	O	O:0.998791
Pandas	O	O:0.999956
dataframes	O	O:0.999037
.	O	O:0.999727
	
So	O	O:0.999930
,	O	O:0.999993
I'd	O	O:0.999998
like	O	O:0.999982
to	O	O:0.999992
use	O	O:0.999997
the	O	O:0.999783
2nd	O	O:0.999759
dataframe	B-API	O:0.997675
,	O	O:0.999964
`	O	O:0.999995
DFa	O	O:0.994295
`	O	O:0.999993
,	O	O:0.999966
and	O	O:0.999997
get	O	O:0.999989
the	O	O:0.999990
dates	O	O:0.999518
from	O	O:0.999975
each	O	O:0.999651
row	O	O:0.999815
(	O	O:0.999996
using	O	O:0.999964
apply	O	B-API:0.901519
)	O	O:0.998910
,	O	O:0.999787
and	O	O:0.999996
then	O	O:0.999831
find	O	O:0.999910
and	O	O:1.000000
sum	O	O:0.999774
up	O	O:0.999989
any	O	O:0.999992
dates	O	O:0.993819
in	O	O:0.999970
the	O	O:0.999995
original	O	O:0.999795
dataframe	B-API	O:0.998710
,	O	O:0.999997
that	O	O:0.999990
came	O	O:0.999699
earlier	O	O:0.999645
:	O	O:0.999956
#CODE	O	O:0.999717
	
Obviously	O	O:0.999766
I'm	O	O:0.999981
new	O	O:0.999912
to	O	O:0.999965
`	O	O:0.999999
apply	O	B-API:0.985580
`	O	O:0.999835
and	O	O:0.999882
I'm	O	O:0.999992
eager	O	O:0.999460
to	O	O:0.999992
get	O	O:0.999998
away	O	O:0.999987
from	O	O:0.999961
loops	O	O:0.999240
.	O	O:0.999896
	
I	O	O:0.999986
just	O	O:0.999831
don't	O	O:0.999775
understand	O	O:0.999829
how	O	O:0.999968
to	O	O:0.999993
return	O	O:0.999988
values	O	O:0.999844
from	O	O:0.999894
apply	O	B-API:0.508631
.	O	O:0.999457
	
I	O	O:0.999928
don't	O	O:0.999972
think	O	O:0.999647
apply	O	B-API:0.811636
is	O	O:0.999874
best	O	O:0.995624
option	O	O:0.999761
for	O	O:0.999986
this	O	O:0.999232
.	O	O:0.999852
	
If	O	O:0.999918
I	O	O:0.999995
understand	O	O:0.999948
correctly	O	O:0.998872
why	O	O:0.999950
not	O	O:0.999963
DFa	O	O:0.999709
[	O	O:0.999988
DF.index	O	O:0.999423
]	O	O:0.999914
.sum()	B-API	B-API:0.997914
?	O	O:0.999880
	
I	O	O:0.999971
agree	O	O:0.999821
,	O	O:0.999924
it's	O	O:0.999912
a	O	O:0.999989
pretty	O	O:0.999336
lousy	O	O:0.999763
example	O	O:0.998978
.	O	O:0.999710
	
My	O	O:0.999978
main	O	O:0.999542
problem	O	O:0.999125
is	O	O:0.999993
trying	O	O:0.999715
to	O	O:0.999994
return	O	O:0.999926
from	O	O:0.999897
the	O	O:0.999972
apply	O	B-API:0.769633
.	O	O:0.998776
	
I	O	O:0.999914
would	O	O:0.999988
really	O	O:0.999954
like	O	O:0.999985
to	O	O:0.999992
see	O	O:0.999999
how	O	O:0.999979
I	O	O:0.999994
could	O	O:0.999997
return	O	O:0.999066
3	O	O:0.999983
different	O	O:0.999926
dataframes	O	O:0.999477
,	O	O:0.999981
and	O	O:0.999996
sum	O	O:0.999995
them	O	O:0.999761
up	O	O:0.999952
elsewhere	O	O:0.994633
(	O	O:0.999972
but	O	O:0.999962
I	O	O:0.999976
didn't	O	O:0.999883
mention	O	O:0.999855
that	O	O:0.999903
in	O	O:0.999998
the	O	O:0.999997
question	O	O:0.999955
appropriately	O	O:0.999819
)	O	O:0.999960
.	O	O:0.999683
	
@USER	O	O:0.996315
'	O	O:0.999790
Brien	O	O:0.987691
:	O	O:0.999961
The	O	O:0.999995
performance	O	O:0.999922
of	O	O:0.999975
DF.apply	B-API	B-API:0.866790
(	O	O:0.999985
func	O	O:0.995593
,	O	O:0.999991
axis=1	O	O:0.999405
)	O	O:0.999907
is	O	O:0.999986
comparable	O	O:0.999513
to	O	O:0.999991
calling	O	O:0.999969
func	O	O:0.994331
in	O	O:0.999985
a	O	O:0.999984
loop	O	O:0.999167
.	O	O:0.999973
apply	O	B-API:0.756016
is	O	O:0.999917
useful	O	O:0.998784
when	O	O:0.999786
you	O	O:0.999994
want	O	O:0.999996
to	O	O:0.999995
align	O	O:0.997213
the	O	O:0.999981
output	O	O:0.999884
into	O	O:0.999930
a	O	O:0.999992
single	O	O:0.996766
DataFrame	B-API	O:0.993936
.	O	O:0.999795
	
If	O	O:0.999968
you	O	O:0.999990
need	O	O:0.999977
to	O	O:0.999999
return	O	O:0.999971
3	O	O:0.999964
disparate	O	O:0.999921
DataFrames	O	O:0.999715
,	O	O:0.999993
go	O	O:0.999977
ahead	O	O:0.999608
and	O	O:0.999994
loop	O	O:0.999913
over	O	O:0.998347
DF.iterrows()	B-API	B-API:0.979950
.	O	O:0.999692
	
For	O	O:0.999778
better	O	O:0.999549
performance	O	O:0.999879
you'll	O	O:0.999930
have	O	O:0.999969
to	O	O:0.999999
think	O	O:0.999999
of	O	O:0.999998
a	O	O:0.999983
better	O	O:0.999836
way	O	O:0.999990
to	O	O:0.999980
calculate	O	O:0.999996
the	O	O:0.999990
result	O	O:0.999703
(	O	O:0.999999
such	O	O:0.999978
as	O	O:0.999999
doing	O	O:0.999808
a	O	O:0.999990
sorted	O	O:0.979841
cumsum	B-API	B-API:0.962387
for	O	O:0.999974
the	O	O:0.999950
toy	O	O:0.999815
example	O	O:0.999941
above	O	O:0.999939
)	O	O:0.999997
or	O	O:0.999993
perhaps	O	O:0.999684
use	O	O:0.999944
Cython	O	O:0.995290
.	O	O:0.999694
	
Also	O	O:0.999574
,	O	O:0.999995
note	O	O:0.999954
that	O	O:0.999901
`	O	O:0.999998
apply	O	B-API:0.938606
`	O	O:0.999966
returns	O	O:0.998748
a	O	O:0.999927
`	O	O:0.999888
DataFrame	B-API	O:0.826467
`	O	O:0.999979
.	O	O:0.999614
	
So	O	O:0.999996
your	O	O:0.999965
current	O	O:0.998545
function	O	O:0.999915
would	O	O:0.999937
return	O	O:0.999957
a	O	O:0.999945
`	O	O:0.999932
DataFrame	B-API	O:0.945654
`	O	O:0.999993
for	O	O:0.999989
each	O	O:0.999807
row	O	O:0.999791
in	O	O:0.999928
`	O	O:0.999993
DFa	O	O:0.997934
`	O	O:0.999996
,	O	O:0.999987
so	O	O:0.999996
you	O	O:0.999953
would	O	O:0.999998
end	O	O:0.999997
up	O	O:0.999994
with	O	O:0.999986
a	O	O:0.999943
`	O	O:0.999968
DataFrame	B-API	O:0.977676
`	O	O:0.999998
of	O	O:0.999777
`	O	O:0.999993
DataFrames	O	O:0.987965
`	O	O:0.999970
	
There's	O	O:0.999933
a	O	O:0.999998
bit	O	O:0.999931
of	O	O:0.999997
a	O	O:0.999963
mixup	O	O:0.999904
the	O	O:0.999958
way	O	O:0.999876
you're	O	O:0.999942
using	O	O:0.999908
`	O	O:0.999963
apply	O	B-API:0.997879
`	O	O:0.999803
.	O	O:0.997163
	
With	O	O:0.999221
`	O	O:0.999977
axis=1	O	O:0.993161
`	O	O:0.999992
,	O	O:0.999633
`	O	O:0.999994
foo	O	O:0.993650
`	O	O:0.999997
will	O	O:0.999618
be	O	O:0.999999
applied	O	O:0.999949
to	O	O:0.999984
each	O	O:0.999954
row	O	O:0.999692
(	O	O:0.999992
see	O	O:0.999985
the	O	O:0.999987
docs	O	O:0.999666
)	O	O:0.999981
,	O	O:0.999985
and	O	O:0.999993
yet	O	O:0.999985
your	O	O:0.999649
code	O	O:0.999022
implies	O	O:0.999604
(	O	O:0.999989
by	O	O:0.999966
the	O	O:0.999957
parameter	O	O:0.999849
name	O	O:0.999920
)	O	O:0.999999
that	O	O:0.999982
its	O	O:0.999992
first	O	O:0.999921
parameter	O	O:0.999445
is	O	O:0.999976
a	O	O:0.999971
DataFrame	B-API	O:0.956134
.	O	O:0.999813
	
Once	O	O:0.999889
you	O	O:0.999988
make	O	O:0.999992
the	O	O:0.999999
changes	O	O:0.999817
,	O	O:0.999998
as	O	O:0.999990
`	O	O:0.999969
foo	O	O:0.996432
`	O	O:0.999997
returns	O	O:0.999054
a	O	O:0.999992
scalar	O	O:0.999316
,	O	O:0.999997
then	O	O:0.999845
`	O	O:0.999999
apply	O	B-API:0.935553
`	O	O:0.999962
will	O	O:0.998757
return	O	O:0.999958
a	O	O:0.999942
series	O	O:0.994983
:	O	O:0.999961
#CODE	O	O:0.999881
	
Is	O	O:0.999984
there	O	O:0.999990
a	O	O:0.999993
faster	O	O:0.996340
/	O	O:0.999992
more	O	O:0.999500
elegant	O	O:0.999781
way	O	O:0.999969
to	O	O:0.999972
accomplish	O	O:0.999989
this	O	O:0.999812
?	O	O:0.999975
	
For	O	O:0.999916
example	O	O:0.999661
,	O	O:0.999956
is	O	O:0.999998
there	O	O:0.999959
a	O	O:0.999996
way	O	O:0.999919
to	O	O:0.999987
apply	O	O:0.942483
`	O	O:0.999976
dateParser	O	O:0.997513
`	O	O:0.999999
directly	O	O:0.998882
to	O	O:0.999970
the	O	O:0.999994
index	O	O:0.998984
(	O	O:0.999988
perhaps	O	O:0.999981
inplace	O	O:0.996997
)	O	O:0.999997
so	O	O:0.999953
I	O	O:0.999992
don't	O	O:0.999995
have	O	O:0.999846
to	O	O:0.999996
`	O	O:0.999999
reset_index	B-API	B-API:0.998655
`	O	O:0.999995
first	O	O:0.999332
?	O	O:0.999976
	
My	O	O:0.999972
current	O	O:0.999553
approach	O	O:0.999809
is	O	O:0.999986
to	O	O:0.999990
create	O	O:0.999990
an	O	O:0.999999
array	O	O:0.999992
of	O	O:0.999995
the	O	O:0.999976
indices	O	O:0.999870
where	O	O:0.999964
the	O	O:0.999995
markers	O	O:0.999797
occur	O	O:0.999489
,	O	O:0.999999
iterating	O	O:0.999830
over	O	O:0.999843
this	O	O:0.999929
array	O	O:0.999992
using	O	O:0.999975
the	O	O:0.999954
values	O	O:0.998484
to	O	O:0.999983
slice	O	O:0.999974
the	O	O:0.999992
dataframe	B-API	O:0.994250
,	O	O:0.999986
and	O	O:0.999999
then	O	O:0.999924
appending	O	O:0.999985
these	O	O:0.999951
slices	O	O:0.999642
to	O	O:0.999992
a	O	O:0.999999
list	O	O:0.987993
.	O	O:0.999919
	
I	O	O:0.999992
end	O	O:0.999978
up	O	O:0.999841
with	O	O:0.999936
a	O	O:0.999996
list	O	O:0.999016
of	O	O:0.999995
numpy	O	O:0.999688
arrays	O	O:0.999985
that	O	O:0.999932
I	O	O:0.999998
can	O	O:0.999999
then	O	O:0.999984
apply	O	O:0.994647
a	O	O:0.999930
function	O	O:0.997333
to	O	O:0.999870
:	O	O:0.999997
#CODE	O	O:0.999846
	
Apply	O	O:0.999905
a	O	O:0.999989
value	O	O:0.999811
to	O	O:0.999997
a	O	O:0.999999
`	O	O:0.999976
sold_at_same_place	O	O:0.976661
`	O	O:0.999998
column	O	O:0.999966
base	O	O:0.999988
on	O	O:0.999997
the	O	O:0.999995
value	O	O:0.999938
in	O	O:0.999966
`	O	O:0.999998
place	O	O:0.993433
`	O	O:0.999967
:	O	O:0.999882
#CODE	O	O:0.999908
	
apply	O	O:0.538823
custom	O	O:0.976549
function	O	O:0.999241
on	O	O:0.999960
pandas	O	O:0.999979
dataframe	B-API	O:0.999812
on	O	O:0.999994
a	O	O:0.999997
rolling	O	B-API:0.734162
window	O	O:0.998473
	
You	O	O:0.999952
want	O	O:0.999922
to	O	O:0.999990
apply	O	O:0.996462
a	O	O:0.999979
risk	O	O:0.981856
calculation	O	O:0.999245
function	O	O:0.999116
(	O	O:0.999966
let's	O	O:0.999851
say	O	O:0.999952
VaR	O	O:0.999879
)	O	O:0.999983
named	O	O:0.999814
compute_var()	O	O:0.990908
on	O	O:0.999994
last	O	O:0.999361
90	O	O:0.999982
closing	O	O:0.999422
prices	O	O:0.999117
,	O	O:0.999995
on	O	O:0.999999
a	O	O:0.999997
rolling	O	O:0.956291
basis	O	O:0.999104
	
Wait	O	O:0.999009
,	O	O:0.999964
are	O	O:0.999998
both	O	O:0.999852
functions	O	O:0.999956
meant	O	O:0.999891
to	O	O:0.999995
apply	O	O:0.924419
to	O	O:0.999983
individual	O	O:0.999942
strings	O	O:0.999906
instead	O	O:0.999987
of	O	O:1.000000
a	O	O:0.999999
whole	O	O:0.999752
row	O	O:0.999978
,	O	O:0.999986
or	O	O:0.999999
just	O	O:0.999630
`	O	O:0.999999
perform_function1	O	O:0.936559
`	O	O:0.999991
?	O	O:0.999838
	
Maybe	O	O:0.999769
it	O	O:0.999955
would	O	O:0.999990
help	O	O:0.999902
to	O	O:0.999997
include	O	O:0.999999
your	O	O:0.999696
functions	O	O:0.998838
(	O	O:0.999987
if	O	O:0.999950
they're	O	O:0.999895
not	O	O:0.999974
too	O	O:0.999987
complicated	O	O:0.999798
)	O	O:0.999967
.	O	O:0.999760
	
The	O	O:0.999872
functions	O	O:0.999173
are	O	O:0.999990
kind	O	O:0.999948
of	O	O:0.999964
complicated	O	O:0.997448
.	O	O:0.999962
	
They're	O	O:0.999857
meant	O	O:0.999905
to	O	O:0.999994
apply	O	O:0.908047
to	O	O:0.999978
individual	O	O:0.999891
strings	O	O:0.999239
.	O	O:0.999817
	
If	O	O:0.999957
you	O	O:0.999987
want	O	O:0.999984
to	O	O:0.999996
apply	O	O:0.955425
function	O	O:0.999835
to	O	O:0.999985
certain	O	O:0.999997
columns	O	O:0.999914
in	O	O:0.999997
a	O	O:0.999995
dataframe	B-API	O:0.986329
#CODE	O	O:0.999652
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.995549
a	O	O:0.999908
function	O	O:0.999307
to	O	O:0.999996
the	O	O:1.000000
elements	O	O:0.999920
of	O	O:0.999995
a	O	O:0.999996
pandas	O	O:0.999837
dataframe	B-API	O:0.997686
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.991664
a	O	O:0.999981
lambda	O	O:0.991125
function	O	O:0.999934
to	O	O:0.999984
the	O	O:1.000000
elements	O	O:0.999924
of	O	O:0.999995
a	O	O:0.999998
dataframe	B-API	O:0.999142
,	O	O:0.999986
in	O	O:0.999992
the	O	O:0.999993
same	O	O:0.999970
way	O	O:0.999980
as	O	O:0.999974
np.sqrt	B-API	B-API:0.897695
returns	O	O:0.999827
a	O	O:0.999992
dataframe	B-API	O:0.995581
with	O	O:0.999970
the	O	O:0.999995
sqrt	O	B-API:0.671174
of	O	O:0.999991
each	O	O:0.998819
element	O	O:0.999851
.	O	O:0.999860
	
However	O	O:0.999739
pd.DataFrame.apply	B-API	B-API:0.976697
apply	O	O:0.540716
the	O	O:0.999046
function	O	O:0.999736
to	O	O:0.999996
an	O	O:1.000000
row	O	O:0.999981
or	O	O:0.999995
an	O	O:0.999993
column	O	O:0.999890
.	O	O:0.999916
	
Is	O	O:0.999985
there	O	O:0.999992
a	O	O:0.999994
similar	O	O:0.994827
comand	O	O:0.999971
that	O	O:0.999975
apply	O	O:0.933097
a	O	O:0.999983
lambda	O	O:0.985993
function	O	O:0.999925
on	O	O:0.999978
each	O	O:0.999703
element	O	O:0.999869
?	O	O:0.999952
	
This	O	O:0.998916
is	O	O:0.999992
really	O	O:0.999865
quite	O	O:0.999938
similar	O	O:0.999778
to	O	O:0.999995
what	O	O:0.999994
you	O	O:0.999988
are	O	O:0.999999
doing	O	O:0.999968
except	O	O:0.999921
that	O	O:0.999802
the	O	O:0.999997
loop	O	O:0.998553
is	O	O:0.999987
replaced	O	O:0.999725
by	O	O:0.999950
`	O	O:0.999965
apply	O	B-API:0.995672
`	O	O:0.999857
.	O	O:0.997992
	
The	O	O:0.999867
`	O	O:0.999907
pd.Series	B-API	B-API:0.999115
(	O	O:0.999988
x.values	O	O:0.995018
)`	O	O:0.999769
has	O	O:0.999728
an	O	O:0.999988
index	O	O:0.999935
which	O	O:0.999978
by	O	O:0.999995
default	O	O:0.999953
ranges	O	O:0.999705
over	O	O:0.999663
integers	O	O:0.999946
starting	O	O:0.999861
at	O	O:0.999995
`	O	O:0.999972
0	O	O:0.996813
`	O	O:0.999977
.	O	O:0.998888
	
The	O	O:0.999954
index	O	O:0.999938
values	O	O:0.999918
become	O	O:0.999927
the	O	O:0.999998
column	O	O:0.999778
names	O	O:0.999345
(	O	O:0.999996
above	O	O:0.999880
)	O	O:0.999963
.	O	O:0.999765
	
It	O	O:0.999931
doesn't	O	O:0.999816
matter	O	O:0.999974
that	O	O:0.999966
the	O	O:0.999997
various	O	O:0.999839
groups	O	O:0.999470
may	O	O:0.999991
have	O	O:0.999997
different	O	O:0.999962
lengths	O	O:0.997933
.	O	O:0.999739
	
The	O	O:0.999834
`	O	O:0.999978
apply	O	B-API:0.996565
`	O	O:0.999831
method	O	O:0.998711
aligns	O	O:0.999838
the	O	O:0.999991
various	O	O:0.999345
indices	O	O:0.999194
for	O	O:0.999959
you	O	O:0.999275
(	O	O:0.999919
and	O	O:0.999995
fills	O	O:0.999911
missing	O	O:0.999474
values	O	O:0.999498
with	O	O:0.999642
`	O	O:0.999994
NaN	O	O:0.993271
`)	O	O:0.999978
.	O	O:0.999651
	
What	O	O:0.999918
a	O	O:0.999988
convenience	O	O:0.997631
!	O	O:0.999914
	
I'm	O	O:0.999933
trying	O	O:0.999904
to	O	O:0.999993
apply	O	O:0.964776
one	O	O:0.999646
function	O	O:0.999766
`	O	O:0.999992
f1	O	O:0.998747
`	O	O:0.999999
to	O	O:0.999995
rows	O	O:0.999983
`	O	O:0.999961
[	O	O:0.999899
'	O	O:0.999994
Utah	O	O:0.999379
,	O	O:0.999912
'	O	O:0.999954
Texas	O	O:0.999063
']`	O	O:0.999788
and	O	O:0.999939
`	O	O:0.999978
f2	O	O:0.993452
`	O	O:0.999993
to	O	O:0.999986
other	O	O:1.000000
rows	O	O:0.999158
.	O	O:0.999851
	
I	O	O:0.999949
don't	O	O:0.999985
want	O	O:0.999890
to	O	O:0.999996
create	O	O:0.999993
separate	O	O:0.999948
DF	O	O:0.999997
for	O	O:0.999993
each	O	O:0.994352
function	O	O:0.999549
.	O	O:0.999881
	
Apply	O	O:0.998283
function	O	O:0.999846
to	O	O:0.999990
column	O	O:0.999991
in	O	O:0.999991
pandas	O	O:0.999960
dataframe	B-API	O:0.999726
that	O	O:0.999780
takes	O	O:0.999973
two	O	O:0.999977
arguments	O	O:0.999515
	
You	O	O:0.999921
can	O	O:0.999956
do	O	O:1.000000
this	O	O:0.999984
with	O	O:0.999964
the	O	O:0.999985
`	O	O:0.999956
map	O	B-API:0.999187
`	O	O:0.999989
method	O	O:0.999832
without	O	O:0.999931
writing	O	O:0.999901
a	O	O:0.999817
function	O	O:0.999685
or	O	O:0.999996
using	O	O:0.999910
`	O	O:0.999948
apply	O	B-API:0.990210
`	O	O:0.999953
at	O	O:0.999424
all	O	O:0.999665
:	O	O:0.999924
#CODE	O	O:0.999571
	
then	O	O:0.999199
the	O	O:0.999993
syntax	O	O:0.999879
would	O	O:0.999957
be	O	O:0.999997
`	O	O:0.999995
df.apply	B-API	B-API:0.998361
(	O	O:0.999984
func	O	O:0.986544
,	O	O:0.999990
axis	O	O:0.999919
=	O	O:0.999842
1	O	O:0.999983
)`	O	O:0.999943
to	O	O:0.999978
apply	O	O:0.976245
the	O	O:0.999425
function	O	O:0.999810
func	O	O:0.998401
to	O	O:0.999998
each	O	O:0.999967
row	O	O:0.999854
.	O	O:0.999916
	
Apply	O	O:0.998158
function	O	O:0.999856
to	O	O:0.999995
each	O	O:0.999996
row	O	O:0.999962
of	O	O:0.999991
pandas	O	O:0.999955
dataframe	B-API	O:0.999875
to	O	O:0.999984
create	O	O:0.999989
two	O	O:0.999996
new	O	O:0.999989
columns	O	O:0.999685
	
Because	O	O:0.999660
NaT	O	O:0.976864
is	O	O:0.999995
technically	O	O:0.999950
a	O	O:0.999992
datetime	O	O:0.994359
this	O	O:0.999595
condition	O	O:0.999729
wasn't	O	O:0.999955
covered	O	O:0.999814
by	O	O:0.999995
that	O	O:0.998884
function	O	O:0.999875
.	O	O:0.999930
	
Since	O	O:0.999281
isnull	O	B-API:0.921164
will	O	O:0.999681
handle	O	O:0.999962
this	O	O:0.999978
,	O	O:0.999996
I	O	O:0.999986
wrote	O	O:0.999976
this	O	O:0.998835
function	O	O:0.999986
to	O	O:0.999995
apply	O	O:0.992147
to	O	O:0.999984
data	O	O:0.999974
[	O	O:0.999990
col_name	O	O:0.996287
]:	O	O:0.999870
#CODE	O	O:0.999071
	
pandas	O	O:0.999347
find	O	O:0.999821
max	O	O:0.909866
value	O	O:0.999725
in	O	O:0.999898
groupby	B-API	B-API:0.988120
and	O	O:0.999988
apply	O	B-API:0.951451
function	O	O:0.993203
	
How	O	O:0.999894
may	O	O:0.999981
I	O	O:0.999998
set	O	O:0.999982
my	O	O:0.999973
maximum	O	O:0.999709
H	O	O:0.999905
value	O	O:0.999680
(	O	O:0.999946
4	O	O:0.999868
for	O	O:0.999913
Dublin	O	O:0.996568
and	O	O:0.999976
5	O	O:0.999891
for	O	O:0.999909
Madrid	O	O:0.999764
)	O	O:0.999989
as	O	O:0.999997
a	O	O:0.999975
constant	O	O:0.998581
/	O	O:0.999993
city	O	O:0.997887
in	O	O:0.999994
order	O	O:0.999882
to	O	O:0.999993
apply	O	O:0.969633
the	O	O:0.999726
function	O	O:0.999919
all	O	O:0.999987
over	O	O:0.999668
the	O	O:0.999915
DataFrame	B-API	O:0.987242
?	O	O:0.999932
	
The	O	O:0.999956
expected	O	O:0.999907
df	O	O:0.999884
would	O	O:0.999980
appear	O	O:0.999930
as	O	O:0.999971
:	O	O:0.999848
#CODE	O	O:0.999784
	
Many	O	O:0.999717
thanks	O	O:0.999356
for	O	O:0.999997
your	O	O:0.999456
answer	O	O:0.997954
:)	O	O:0.999934
Just	O	O:0.999571
wondering	O	O:0.999938
what	O	O:0.999907
the	O	O:0.999991
sub_df.columns	O	O:0.996611
=	O	O:0.999859
range	O	O:0.999749
(	O	O:0.999967
12	O	O:0.999743
)	O	O:0.999981
does	O	O:0.998961
?	O	O:0.999979
	
Does	O	O:0.999467
it	O	O:0.999997
just	O	O:0.999918
rename	O	O:0.999922
the	O	O:0.999995
columns	O	O:0.999878
1	O	O:0.999975
to	O	O:0.999994
12	O	O:0.999996
or	O	O:0.999994
apply	O	O:0.929118
some	O	O:0.999972
sort	O	O:0.997428
of	O	O:0.999972
indexing	O	O:0.998405
?	O	O:0.999957
	
How	O	O:0.999915
to	O	O:0.999997
apply	O	O:0.976966
functions	O	O:0.999269
with	O	O:0.999895
multiple	O	O:0.999954
arguments	O	O:0.999835
on	O	O:0.999982
Pandas	O	O:0.999976
selected	O	O:0.999984
columns	O	O:0.999939
data	O	O:0.999972
frame	O	O:0.999994
	
What	O	O:0.999726
I	O	O:0.999997
want	O	O:0.999985
to	O	O:0.999910
do	O	O:0.999993
is	O	O:0.999994
to	O	O:0.999984
apply	O	O:0.994269
a	O	O:0.999114
function	O	O:0.981958
:	O	O:0.999964
#CODE	O	O:0.999829
	
The	O	O:0.999800
`	O	O:0.999953
DataFrame.apply	B-API	B-API:0.999933
`	O	O:0.999928
method	O	O:0.999666
takes	O	O:0.999971
a	O	O:0.999994
parameter	O	O:0.998224
`	O	O:0.999990
axis	O	O:0.999171
`	O	O:0.999995
which	O	O:0.999958
when	O	O:0.999976
set	O	O:0.999984
to	O	O:0.999996
1	O	O:0.999993
sends	O	O:0.999911
the	O	O:0.999998
whole	O	O:0.999804
row	O	O:0.999965
into	O	O:0.999782
the	O	O:0.999991
apply	O	B-API:0.984307
function	O	O:0.998349
.	O	O:0.999559
	
This	O	O:0.999421
makes	O	O:0.999800
it	O	O:0.999997
a	O	O:0.999997
lot	O	O:0.999740
slower	O	O:0.999860
than	O	O:0.999888
a	O	O:0.999997
normal	O	O:0.998931
apply	O	B-API:0.709885
function	O	O:0.999497
since	O	O:0.999693
it	O	O:0.999948
is	O	O:0.999998
no	O	O:0.999967
longer	O	O:0.999994
a	O	O:0.999996
proper	O	O:0.998571
monoid	O	O:0.999647
lambda	O	O:0.997244
function	O	O:0.999711
.	O	O:0.999631
	
But	O	O:0.999789
it	O	O:0.999989
does	O	O:0.999851
work	O	O:0.999825
.	O	O:0.999983
	
The	O	O:0.999942
error	O	O:0.999796
message	O	O:0.998809
is	O	O:0.999992
telling	O	O:0.999482
you	O	O:0.999992
that	O	O:0.999957
you	O	O:0.999995
cannot	O	O:0.999995
cast	O	O:0.999898
a	O	O:0.999998
pandas	O	O:0.999644
Series	O	O:0.999950
to	O	O:0.999996
a	O	O:0.999999
`	O	O:0.999960
float	O	O:0.982931
`	O	O:0.999996
,	O	O:0.999967
whilst	O	O:0.999924
you	O	O:0.999927
could	O	O:0.999986
call	O	O:0.999910
`	O	O:0.999997
apply	O	B-API:0.994289
`	O	O:0.999967
to	O	O:0.999789
call	O	O:0.999939
your	O	O:0.999714
method	O	O:0.998981
row-wise	O	O:0.997191
.	O	O:0.999870
	
You	O	O:0.999683
should	O	O:0.999959
look	O	O:0.999871
at	O	O:0.999997
rewriting	O	O:0.999630
your	O	O:0.998998
method	O	O:0.999915
so	O	O:0.999996
that	O	O:0.999981
it	O	O:0.999998
can	O	O:0.999997
work	O	O:0.999997
on	O	O:0.999999
the	O	O:0.999999
entire	O	O:0.999360
`	O	O:0.999984
Series	O	O:0.993999
`	O	O:0.999991
,	O	O:0.999993
this	O	O:0.999972
will	O	O:0.999866
be	O	O:0.999996
vectorised	O	O:0.999797
and	O	O:0.999960
be	O	O:0.999992
much	O	O:0.998490
faster	O	O:0.999650
than	O	O:0.999685
calling	O	O:0.998081
`	O	O:0.999985
apply	O	B-API:0.982868
`	O	O:0.999938
which	O	O:0.995606
is	O	O:0.999998
essentially	O	O:0.999965
a	O	O:0.999993
`	O	O:0.999899
for	O	O:0.999100
`	O	O:0.999975
loop	O	O:0.994846
.	O	O:0.999921
	
I	O	O:0.999990
guess	O	O:0.999895
I	O	O:0.999974
will	O	O:0.999986
have	O	O:0.999916
to	O	O:0.999996
`	O	O:1.000000
apply	O	B-API:0.924327
`	O	O:0.999985
or	O	O:0.999864
map	O	O:0.748215
a	O	O:0.999988
`	O	O:0.999941
split	O	O:0.774314
(	O	O:0.999985
"	O	O:0.999980
,	O	O:0.999979
")`	O	O:0.999960
to	O	O:0.999974
the	O	O:0.999998
`	O	O:0.999978
Term	O	O:0.982866
`	O	O:0.999998
column	O	O:0.997946
,	O	O:0.999989
but	O	O:0.999991
what	O	O:0.999934
do	O	O:0.999989
I	O	O:0.999999
do	O	O:0.999927
after	O	O:0.999877
that	O	O:0.999197
?	O	O:0.999975
	
#CODE	O	O:0.998453
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999992
`	O	O:0.999933
str.split	B-API	B-API:0.997552
`	O	O:0.999996
to	O	O:0.999940
do	O	O:0.999999
the	O	O:0.999990
splitting	O	O:0.967606
(	O	O:0.999968
instead	O	O:0.999989
of	O	O:0.999986
apply	O	B-API:0.818284
and	O	O:0.999985
split	O	O:0.983652
approach	O	O:0.998641
,	O	O:0.999961
but	O	O:0.999901
similar	O	O:0.997396
):	O	O:0.999966
#CODE	O	O:0.999626
	
To	O	O:0.999963
filter	O	O:0.998012
out	O	O:0.999998
some	O	O:0.999993
rows	O	O:0.999878
,	O	O:0.999997
we	O	O:0.999999
need	O	O:0.999973
the	O	O:0.999986
'	O	O:0.999981
filter	O	O:0.993577
'	O	O:0.999914
function	O	O:0.999984
instead	O	O:0.999982
of	O	O:0.999969
'	O	O:0.999969
apply	O	B-API:0.536306
'	O	O:0.999460
.	O	O:0.999556
	
#CODE	O	O:0.998453
	
in	O	O:0.999953
excel	O	O:0.999494
what	O	O:0.999857
I'm	O	O:0.999988
trying	O	O:0.999963
to	O	O:0.999991
do	O	O:0.999994
would	O	O:0.999982
be	O	O:0.999983
"	O	O:0.999996
=IF	O	O:0.987592
(	O	O:0.999766
AND	O	O:0.997343
(	O	O:0.999973
A2=0	O	O:0.997594
,	O	O:0.999994
B1=-1	O	O:0.999351
)	O	O:0.999994
,	O	O:0.999978
-1	O	O:0.999931
,	O	O:0.999981
A2	O	O:0.999925
)	O	O:0.999988
so	O	O:0.999996
that	O	O:0.999973
I	O	O:0.999999
could	O	O:0.999997
then	O	O:0.999977
drag	O	O:0.999975
down	O	O:0.999909
column	O	O:0.999912
'	O	O:0.999980
B	O	O:0.999830
'	O	O:0.999872
and	O	O:0.999991
that	O	O:0.999873
would	O	O:0.999921
apply	O	O:0.735246
.	O	O:0.999678
	
In	O	O:0.999915
essence	O	O:0.999845
,	O	O:0.999998
based	O	O:0.999763
on	O	O:0.999996
the	O	O:0.999999
prior	O	O:0.999989
data	O	O:0.999994
point	O	O:0.999980
of	O	O:0.999998
column	O	O:0.999874
B	O	O:0.999978
,	O	O:0.999973
and	O	O:0.999993
the	O	O:0.999994
current	O	O:0.999781
value	O	O:0.999984
of	O	O:0.999990
column	O	O:0.999775
A	O	O:0.999998
,	O	O:0.999995
I	O	O:0.999997
need	O	O:0.999987
to	O	O:0.999977
update	O	O:0.999997
the	O	O:0.999991
current	O	O:0.999921
value	O	O:0.999991
of	O	O:0.999955
B	O	O:0.999740
.	O	O:0.999928
	
I	O	O:0.999993
have	O	O:0.999982
to	O	O:0.999972
do	O	O:1.000000
that	O	O:0.999961
for	O	O:0.999993
15	O	O:0.999977
columns	O	O:0.999328
though	O	O:0.999746
.	O	O:0.999961
	
I	O	O:0.999978
have	O	O:0.999979
read	O	O:0.998272
that	O	O:0.999970
lambda	O	O:0.999761
is	O	O:0.999997
a	O	O:0.999834
'	O	O:0.999919
throwaway	O	O:0.999872
'	O	O:0.999787
function	O	O:0.999879
.	O	O:0.999861
	
Is	O	O:0.999946
it	O	O:0.999984
better	O	O:0.999905
to	O	O:0.999995
define	O	O:0.999993
a	O	O:0.999928
function	O	O:0.997229
(	O	O:0.999989
to	O	O:0.999995
split	O	O:0.999499
and	O	O:0.999999
then	O	O:0.999972
to	O	O:1.000000
turn	O	O:0.999995
the	O	O:0.999995
values	O	O:0.999869
into	O	O:0.999767
minutes	O	O:0.999813
)	O	O:0.999943
and	O	O:0.999985
apply	O	O:0.686071
it	O	O:0.999719
to	O	O:0.999987
each	O	O:0.999993
column	O	O:0.999837
instead	O	O:0.999979
?	O	O:0.999981
	
Would	O	O:0.999442
I	O	O:0.999993
loop	O	O:0.999976
through	O	O:0.999404
the	O	O:0.999976
columns	O	O:0.991218
(	O	O:0.999986
not	O	O:0.999995
all	O	O:0.999997
columns	O	O:0.999803
,	O	O:0.999987
but	O	O:0.999993
15	O	O:0.999967
of	O	O:0.999995
about	O	O:0.999785
30	O	O:0.999848
)	O	O:0.999887
?	O	O:0.999869
	
I	O	O:0.999939
am	O	O:0.999994
hoping	O	O:0.998226
someone	O	O:0.999766
will	O	O:0.999888
provide	O	O:0.999975
a	O	O:0.999986
function	O	O:0.999868
I	O	O:0.999994
can	O	O:0.999986
use	O	O:0.999988
to	O	O:0.999979
apply	O	O:0.914303
/	O	O:0.999513
map	O	B-API:0.713702
everything	O	O:0.999774
to	O	O:0.999993
several	O	O:0.999999
columns	O	O:0.999954
at	O	O:0.999999
once	O	O:0.999921
efficiently	O	O:0.999669
.	O	O:0.999894
	
I	O	O:0.999839
am	O	O:0.999990
not	O	O:0.999947
too	O	O:0.999983
familiar	O	O:0.999945
with	O	O:0.999679
def	O	O:0.997901
and	O	O:0.999996
return	O	O:0.996377
functions	O	O:0.993611
(	O	O:0.999964
I	O	O:0.999984
learned	O	O:0.999707
basic	O	O:0.998824
pandas	O	O:0.999689
before	O	O:0.999809
I	O	O:0.999952
learned	O	O:0.999701
basic	O	O:0.998244
python	O	O:0.999272
,	O	O:0.999997
just	O	O:0.999668
for	O	O:0.999997
practical	O	O:0.997223
purposes	O	O:0.999867
..	O	O:0.999895
slowly	O	O:0.999851
learning	O	O:0.999721
though	O	O:0.998988
)	O	O:0.999947
.	O	O:0.999723
	
Need	O	O:0.999658
to	O	O:0.999994
turn	O	O:0.999985
those	O	O:0.999986
timestamps	O	O:0.999862
into	O	O:0.999719
minutes	O	O:0.999600
	
You	O	O:0.999828
could	O	O:0.999972
just	O	O:0.999957
measure	O	O:0.999937
this	O	O:0.999640
but	O	O:0.999993
generally	O	O:0.999757
`	O	O:0.999992
apply	O	B-API:0.988903
`	O	O:0.999952
should	O	O:0.999153
be	O	O:0.999998
the	O	O:0.999998
last	O	O:0.998367
resort	O	O:0.999650
as	O	O:0.999981
it	O	O:0.999956
doesn't	O	O:0.999973
scale	O	O:0.999865
as	O	O:0.999999
well	O	O:0.999885
as	O	O:0.999999
its	O	O:0.999953
a	O	O:0.999986
for	O	O:0.999776
loop	O	O:0.998791
and	O	O:0.999966
if	O	O:0.999993
called	O	O:0.998889
on	O	O:0.999996
a	O	O:0.999973
series	O	O:0.999802
it	O	O:0.999979
executes	O	O:0.999927
per	O	O:0.999881
row	O	O:0.999557
.	O	O:0.999836
	
With	O	O:0.999694
respect	O	O:0.999106
to	O	O:0.999990
turning	O	O:0.999973
it	O	O:0.999988
into	O	O:0.999970
a	O	O:0.999989
function	O	O:0.999686
so	O	O:0.999994
you	O	O:0.999989
can	O	O:0.999996
apply	O	O:0.990788
to	O	O:0.999981
15	O	O:0.999998
columns	O	O:0.999945
you	O	O:0.999988
put	O	O:0.999993
your	O	O:0.999988
code	O	O:0.999768
for	O	O:0.999997
you	O	O:0.999825
last	O	O:0.999109
method	O	O:0.999989
into	O	O:0.999865
a	O	O:0.999969
function	O	O:0.998437
and	O	O:0.999997
then	O	O:0.999919
call	O	O:0.999301
`	O	O:0.999996
apply	O	B-API:0.994549
`	O	O:0.999984
on	O	O:0.999973
a	O	O:0.999998
df	O	O:0.999088
,	O	O:0.999996
this	O	O:0.999892
will	O	O:0.999909
call	O	O:0.999837
it	O	O:0.999994
for	O	O:0.999935
each	O	O:0.998873
column	O	O:0.998734
but	O	O:0.999979
it	O	O:0.999987
will	O	O:0.999953
try	O	O:0.999995
to	O	O:0.999992
execute	O	O:0.999994
the	O	O:0.999971
function	O	O:0.999937
on	O	O:0.999995
the	O	O:0.999997
whole	O	O:0.999770
Series	O	O:0.999582
	
Also	O	O:0.999471
,	O	O:0.999998
what	O	O:0.999969
about	O	O:0.999864
.map	B-API	B-API:0.940145
vs	O	O:0.999713
.apply	B-API	B-API:0.981783
?	O	O:0.999855
	
And	O	O:0.999299
is	O	O:0.999986
it	O	O:0.999972
better	O	O:0.999907
to	O	O:0.999998
have	O	O:0.999999
a	O	O:0.999999
separate	O	O:0.999919
line	O	O:0.999927
of	O	O:0.999996
code	O	O:0.999742
for	O	O:0.999998
each	O	O:0.999858
column	O	O:0.999824
I	O	O:0.999995
am	O	O:0.999997
doing	O	O:0.999932
this	O	O:0.999892
to	O	O:0.999982
,	O	O:1.000000
or	O	O:0.999952
is	O	O:0.999987
it	O	O:0.999991
better	O	O:0.999928
to	O	O:0.999993
define	O	O:0.999986
a	O	O:0.999931
function	O	O:0.999391
and	O	O:0.999993
apply	O	O:0.888926
that	O	O:0.998874
to	O	O:0.999996
each	O	O:0.999993
column	O	O:0.999828
?	O	O:0.999983
	
It	O	O:0.999945
looks	O	O:0.999953
a	O	O:0.999994
bit	O	O:0.999821
messy	O	O:0.999842
to	O	O:0.999990
have	O	O:0.999999
this	O	O:0.999985
split	O	O:0.999659
lambda	O	O:0.999624
function	O	O:0.999904
15	O	O:0.999937
times	O	O:0.999737
in	O	O:0.999998
a	O	O:0.999987
row	O	O:0.998531
(	O	O:0.999978
15	O	O:0.999975
timestamp	O	O:0.999601
columns	O	O:0.999928
to	O	O:0.999993
be	O	O:1.000000
converted	O	O:0.999928
to	O	O:0.999992
minutes	O	O:0.999971
)	O	O:0.999957
	
just	O	O:0.999311
wrap	O	O:0.999829
it	O	O:0.999985
up	O	O:0.999950
in	O	O:0.999997
a	O	O:0.999995
small	O	O:0.989910
function	O	O:0.999679
,	O	O:0.999920
and	O	O:0.999990
either	O	O:0.999925
apply	O	B-API:0.533079
it	O	O:0.999908
across	O	O:0.999778
the	O	O:0.999992
columns	O	O:0.999919
,	O	O:0.999996
or	O	O:0.999999
since	O	O:0.999933
you	O	O:0.999992
prob	O	O:0.999871
don't	O	O:0.999989
have	O	O:0.999917
too	O	O:0.999997
many	O	O:0.999975
of	O	O:0.999981
these	O	O:0.999813
,	O	O:0.999999
just	O	O:0.999862
do	O	O:0.999987
it	O	O:0.999983
per	O	O:0.999936
column	O	O:0.999618
.	O	O:0.999919
	
Note	O	O:0.999302
:	O	O:0.999984
executing	O	O:0.999912
the	O	O:0.999983
cubic	O	O:0.998483
spline	O	O:0.999852
interpolation	O	O:0.999791
via	O	O:0.999981
the	O	O:0.999965
apply	O	B-API:0.967295
function	O	O:0.999452
takes	O	O:0.999719
quite	O	O:0.999987
a	O	O:0.999998
mount	O	O:0.995083
of	O	O:0.999972
time	O	O:0.999134
(	O	O:0.999999
about	O	O:0.999929
2	O	O:0.999951
minutes	O	O:0.999061
in	O	O:0.999991
my	O	O:0.999976
PC	O	O:0.999946
)	O	O:0.999959
.	O	O:0.999794
	
It	O	O:0.999907
interpolates	O	O:0.999859
from	O	O:0.999963
about	O	O:0.999793
100	O	O:0.999923
points	O	O:0.999127
to	O	O:0.999969
300	O	O:0.999996
points	O	O:0.999827
,	O	O:0.999995
row	O	O:0.999997
by	O	O:0.999925
row	O	O:0.999281
(	O	O:0.999983
2638	O	O:0.998783
in	O	O:0.999987
total	O	O:0.999249
)	O	O:0.999980
.	O	O:0.999629
	
#CODE	O	O:0.998453
	
I'm	O	O:0.999933
trying	O	O:0.999903
to	O	O:0.999995
apply	O	O:0.969157
a	O	O:0.999968
weighted	O	O:0.993200
filter	O	O:0.999380
on	O	O:0.999999
data	O	O:0.999962
rather	O	O:0.999994
the	O	O:0.999990
use	O	O:0.999966
raw	O	O:0.999838
data	O	O:0.999768
before	O	O:0.999917
calculating	O	O:0.999749
stats	O	O:0.999701
,	O	O:0.999992
mu	O	O:0.999696
,	O	O:0.999963
std	O	O:0.997074
and	O	O:0.999974
covar	O	O:0.996911
.	O	O:0.999622
	
But	O	O:0.999986
the	O	O:0.999977
results	O	O:0.999857
clearly	O	O:0.999759
need	O	O:0.999955
adjusting	O	O:0.999390
.	O	O:0.999771
	
#CODE	O	O:0.998453
	
pd.DataFrame.groupby.apply	O	O:0.991808
really	O	O:0.999760
gives	O	O:0.999895
us	O	O:0.999977
a	O	O:0.999995
lot	O	O:0.999758
of	O	O:0.999951
flexibility	O	O:0.993975
(	O	O:0.999987
unlike	O	O:0.999194
agg	O	B-API:0.939749
/	O	O:0.999877
filter	O	O:0.963395
/	O	O:0.999969
transform	O	B-API:0.589289
,	O	O:0.999968
it	O	O:0.999990
allows	O	O:0.999878
you	O	O:0.999987
to	O	O:0.999996
reshape	O	O:0.997670
each	O	O:0.999840
subgroup	O	O:0.999890
to	O	O:0.999997
any	O	O:0.999999
shape	O	O:0.999900
,	O	O:0.999977
in	O	O:0.999999
your	O	O:0.999946
case	O	O:0.999967
,	O	O:0.999999
from	O	O:0.999847
538	O	O:0.999871
x	O	O:0.999961
122	O	O:0.999764
to	O	O:0.999987
N_categories	O	O:0.999829
x	O	O:0.999935
122	O	O:0.999727
)	O	O:0.999977
.	O	O:0.999684
	
But	O	O:0.999805
it	O	O:0.999980
indeed	O	O:0.999905
comes	O	O:0.999865
with	O	O:0.999989
a	O	O:0.999980
cost	O	O:0.988807
:	O	O:0.999997
apply	O	O:0.968297
your	O	O:0.999810
flexible	O	O:0.997723
function	O	O:0.999963
one-by-one	O	O:0.998024
and	O	O:0.999994
lacks	O	O:0.999839
of	O	O:0.999773
vectorization	O	O:0.997235
.	O	O:0.999929
	
But	O	O:0.999404
I'm	O	O:0.999952
not	O	O:0.999991
sure	O	O:0.999939
how	O	O:0.999981
to	O	O:0.999985
proceed	O	O:0.999935
.	O	O:0.999918
	
How	O	O:0.999939
do	O	O:0.999967
I	O	O:0.999996
apply	O	O:0.907660
the	O	O:0.999527
date	O	O:0.996449
subtraction	O	O:0.999811
operation	O	O:0.999928
,	O	O:0.999999
then	O	O:0.999917
combine	O	O:0.999575
?	O	O:0.999989
	
You	O	O:0.999911
can	O	O:0.999944
use	O	O:0.999996
apply	O	B-API:0.627426
like	O	O:0.998640
this	O	O:0.997921
:	O	O:0.999972
#CODE	O	O:0.999825
	
FWIW	O	O:0.999512
,	O	O:0.999995
using	O	O:0.999891
`	O	O:0.999918
transform	O	B-API:0.981856
`	O	O:0.999987
can	O	O:0.999828
often	O	O:0.999993
be	O	O:0.999990
simpler	O	O:0.995544
(	O	O:0.999857
and	O	O:0.999996
usually	O	O:0.999887
faster	O	O:0.997905
)	O	O:0.999983
than	O	O:0.999056
`	O	O:0.999992
apply	O	B-API:0.981967
`	O	O:0.999854
.	O	O:0.998100
	
`	O	O:0.999973
transform	O	B-API:0.972679
`	O	O:0.999988
takes	O	O:0.999823
the	O	O:0.999997
results	O	O:0.999955
of	O	O:0.999995
a	O	O:0.999990
groupby	B-API	B-API:0.991073
operation	O	O:0.995078
and	O	O:0.999893
broadcasts	O	O:0.999946
it	O	O:0.999972
up	O	O:0.999897
to	O	O:0.999991
the	O	O:0.999998
original	O	O:0.998270
index	O	O:0.999193
:	O	O:0.999975
#CODE	O	O:0.999930
	
@USER	O	O:0.999543
-	O	O:0.999986
I	O	O:0.999992
referenced	O	O:0.999926
the	O	O:0.999961
post	O	O:0.998328
you	O	O:0.999990
suggest	O	O:0.999956
as	O	O:0.999998
duplicative	O	O:0.999237
,	O	O:0.999966
and	O	O:0.999993
tried	O	O:0.999883
to	O	O:0.999965
apply	O	O:0.937311
the	O	O:0.999612
.map()	B-API	B-API:0.999984
function	O	O:0.999651
it	O	O:0.999918
recommends	O	O:0.999519
.	O	O:0.999876
	
My	O	O:0.999954
results	O	O:0.999960
from	O	O:0.999984
doing	O	O:0.999939
so	O	O:0.999966
are	O	O:0.999959
listed	O	O:0.999949
above	O	O:0.999908
under	O	O:0.999755
"	O	O:0.999914
My	O	O:0.999981
best	O	O:0.999691
effort	O	O:0.999932
so	O	O:0.999970
far	O	O:0.999706
"	O	O:0.999963
.	O	O:0.999537
	
I	O	O:0.999973
realize	O	O:0.999578
I	O	O:0.999965
must	O	O:0.999966
be	O	O:0.999986
missing	O	O:0.999964
something	O	O:0.999603
;	O	O:0.999979
can	O	O:0.999945
you	O	O:1.000000
help	O	O:0.999944
my	O	O:0.999993
understand	O	O:0.999891
how	O	O:0.999992
to	O	O:0.999974
use	O	O:0.999999
the	O	O:0.999828
.map()	B-API	B-API:0.999894
function	O	O:0.999514
in	O	O:0.999994
this	O	O:0.999954
example	O	O:0.999887
?	O	O:0.999957
	
The	O	O:0.999919
following	O	O:0.998879
snippet	O	O:0.999773
should	O	O:0.999978
work	O	O:0.999932
after	O	O:0.999999
your	O	O:0.999749
`	O	O:0.999931
apply	O	B-API:0.968132
(	O	O:0.999959
crawl	O	O:0.994619
)`	O	O:0.999768
.	O	O:0.999396
	
#CODE	O	O:0.998453
	
From	O	O:0.999893
what	O	O:0.999735
I	O	O:0.999996
understand	O	O:0.999969
I	O	O:0.999946
am	O	O:0.999993
following	O	O:0.999642
the	O	O:0.999993
steps	O	O:0.999883
to	O	O:0.999995
apply	O	O:0.990792
PCA	B-API	O:0.916982
as	O	O:0.999978
they	O	O:0.999711
should	O	O:0.999943
be	O	O:0.999980
.	O	O:0.999962
	
But	O	O:0.999989
my	O	O:0.999948
results	O	O:0.999662
are	O	O:0.999994
not	O	O:0.999994
similar	O	O:0.999962
with	O	O:0.999989
the	O	O:0.999998
ones	O	O:0.999649
in	O	O:0.999989
the	O	O:0.999989
tutorial	O	O:0.999293
(	O	O:0.999987
or	O	O:0.999997
maybe	O	O:0.999975
they	O	O:0.999946
are	O	O:0.999991
and	O	O:0.999992
I	O	O:0.999982
can't	O	O:0.999801
interpret	O	O:0.999986
them	O	O:0.999821
right	O	O:0.999936
?	O	O:0.999985
)	O	O:0.999970
.	O	O:0.999871
	
With	O	O:0.999891
n_components=4	O	O:0.998316
I	O	O:0.999993
obtain	O	O:0.999821
the	O	O:0.999915
following	O	O:0.999050
graph	O	O:0.999736
n_components4	O	O:0.991780
.	O	O:0.999881
	
I	O	O:0.999944
am	O	O:0.999996
probably	O	O:0.999641
missing	O	O:0.999978
something	O	O:0.999891
somewhere	O	O:0.999410
,	O	O:0.999996
I've	O	O:0.999970
also	O	O:0.999905
added	O	O:0.999975
the	O	O:0.999989
code	O	O:0.999587
I	O	O:0.999999
have	O	O:0.999993
so	O	O:0.999945
far	O	O:0.999874
.	O	O:0.999898
	
If	O	O:0.999970
you	O	O:0.999986
have	O	O:0.999941
too	O	O:0.999995
many	O	O:0.999990
levels	O	O:0.999370
for	O	O:0.999997
this	O	O:0.999911
to	O	O:0.999992
work	O	O:0.999997
,	O	O:0.999999
or	O	O:0.999998
you	O	O:0.999995
want	O	O:0.999995
to	O	O:0.999994
consider	O	O:0.999994
the	O	O:0.999998
individual	O	O:0.999796
words	O	O:0.999820
in	O	O:0.999947
`	O	O:0.999996
catB	O	O:0.979758
`	O	O:0.999999
as	O	O:0.999995
well	O	O:0.999940
as	O	O:0.999997
the	O	O:0.999918
bigrams	O	O:0.999570
,	O	O:0.999993
you	O	O:0.999989
could	O	O:0.999986
apply	O	O:0.997941
your	O	O:0.999776
`	O	O:0.999901
CountVectorizer	O	O:0.975676
`	O	O:0.999998
separately	O	O:0.999463
to	O	O:0.999998
each	O	O:0.999989
column	O	O:0.999830
,	O	O:0.999993
and	O	O:0.999999
then	O	O:0.999626
use	O	O:0.999977
and	O	O:0.999971
use	O	O:0.999752
`	O	O:0.999239
hstack	B-API	B-API:0.994770
`	O	O:0.999996
to	O	O:0.999958
concatenate	O	O:0.995895
the	O	O:0.999994
resulting	O	O:0.999582
output	O	O:0.999590
matrices	O	O:0.998084
:	O	O:0.999952
#CODE	O	O:0.999864
	
Using	O	O:0.998783
`	O	O:0.999948
apply	O	B-API:0.969864
`	O	O:0.999983
check	O	O:0.998543
if	O	O:0.999998
value	O	O:0.998690
is	O	O:0.999972
list	O	O:0.989931
`	O	O:0.999955
isinstance	O	O:0.795917
(	O	O:0.999988
x	O	O:0.999179
,	O	O:0.999985
list	O	O:0.999595
)`	O	O:0.999827
and	O	O:0.999996
take	O	O:0.999963
the	O	O:0.999982
value	O	O:0.999834
,	O	O:0.999964
and	O	O:0.999999
then	O	O:0.999845
`	O	O:0.999993
apply	O	B-API:0.933519
(	O	O:0.999890
pd.Series	B-API	B-API:0.988388
,	O	O:0.999968
1	O	O:0.999960
)`	O	O:0.999927
to	O	O:0.999994
split	O	O:0.999957
as	O	O:0.999993
columns	O	O:0.999478
#CODE	O	O:0.999800
	
I	O	O:0.999937
would	O	O:0.999997
like	O	O:0.999964
to	O	O:0.999999
change	O	O:0.999983
the	O	O:0.999997
value	O	O:0.999949
of	O	O:0.999998
a	O	O:0.999975
`	O	O:0.999982
Pandas	O	O:0.990240
`	O	O:0.999988
DataFrame	B-API	O:0.990278
based	O	O:0.999255
on	O	O:0.999947
index	O	O:0.999532
and	O	O:0.999994
column	O	O:0.999875
.	O	O:0.999722
	
I	O	O:0.999929
am	O	O:0.999997
getting	O	O:0.999356
an	O	O:0.999980
error	O	O:0.999746
`	O	O:0.999963
A	O	O:0.999967
value	O	O:0.999832
is	O	O:0.999982
trying	O	O:0.999757
to	O	O:0.999994
be	O	O:1.000000
set	O	O:0.999960
on	O	O:0.999997
a	O	O:1.000000
copy	O	O:0.995057
of	O	O:0.999999
a	O	O:0.999964
slice	O	O:0.999729
from	O	O:0.999952
a	O	O:0.999984
DataFrame	B-API	O:0.979448
`	O	O:0.999959
.	O	O:0.999686
	
I	O	O:0.999942
searched	O	O:0.999599
around	O	O:0.996584
and	O	O:0.999972
found	O	O:0.999742
similar	O	O:0.999527
questions	O	O:0.999677
/	O	O:0.999969
answers	O	O:0.999286
,	O	O:0.999933
but	O	O:0.999965
none	O	O:0.999969
that	O	O:0.999947
I	O	O:0.999994
was	O	O:0.999996
able	O	O:0.999810
to	O	O:0.999989
apply	O	O:0.837321
.	O	O:0.999366
	
#CODE	O	O:0.998453
	
You	O	O:0.999901
can	O	O:0.999979
apply	O	O:0.980845
a	O	O:0.999992
lambda	O	O:0.990264
function	O	O:0.999926
to	O	O:0.999987
the	O	O:1.000000
column	O	O:0.999944
of	O	O:0.999999
the	O	O:0.999998
data	O	O:0.999994
frame	O	O:0.999995
,	O	O:0.999999
extracting	O	O:0.999975
the	O	O:0.999985
date	O	O:0.999596
from	O	O:0.999941
the	O	O:0.999992
dictionary	O	O:0.999971
via	O	O:0.999606
`	O	O:0.999979
x	O	O:0.999185
[	O	O:0.999970
'	O	O:0.999952
$date	O	O:0.999898
']`	O	O:0.999838
,	O	O:0.999938
and	O	O:0.999998
then	O	O:0.999977
just	O	O:0.999995
take	O	O:0.999998
the	O	O:0.999993
date	O	O:0.997737
/	O	O:0.999988
time	O	O:0.999902
portion	O	O:0.998964
(	O	O:0.999993
ignoring	O	O:0.999668
the	O	O:0.999940
time	O	O:0.999881
offset	O	O:0.999833
)	O	O:0.999979
.	O	O:0.999912
	
As	O	O:0.999989
this	O	O:0.999792
is	O	O:0.999999
a	O	O:0.999967
'	O	O:0.999912
datetime	O	O:0.999752
naive	O	O:0.997743
'	O	O:0.999828
object	O	O:0.999829
,	O	O:0.999981
Python	O	O:0.999400
wouldn't	O	O:0.999916
know	O	O:0.999958
what	O	O:0.999988
to	O	O:0.999992
do	O	O:0.999999
with	O	O:0.999965
any	O	O:0.999934
timezone	O	O:0.999667
adjustment	O	O:0.999528
.	O	O:0.999836
	
Use	O	O:0.999970
this	O	O:0.999949
stripped	O	O:0.999887
date	O	O:0.998989
/	O	O:0.999987
time	O	O:0.999754
string	O	O:0.998199
(	O	O:0.999972
e.g.	O	O:0.998733
'	O	O:0.999930
2014-11-04T17	O	O:0.998524
:	O	O:0.999976
27:50	O	O:0.999662
.000	O	O:0.999846
')	O	O:0.999971
as	O	O:0.999977
the	O	O:0.999984
input	O	O:0.999910
to	O	O:0.999987
`	O	O:0.999999
strptime	O	O:0.784269
`	O	O:0.999985
.	O	O:0.999590
	
#CODE	O	O:0.998453
	
apply	O	B-API:0.920017
function	O	O:0.999550
throws	O	O:0.999673
an	O	O:0.999990
error	O	O:0.999114
=	O	O:0.999872
DataFrame	B-API	O:0.976210
'	O	O:0.999779
object	O	O:0.999887
has	O	O:0.999962
no	O	O:0.999979
attribute	O	O:0.999918
'	O	O:0.999985
datetime	O	O:0.995837
'	O	O:0.999841
Checked	O	O:0.999740
Pandas	O	O:0.999761
version	O	O:0.999688
,	O	O:0.999985
its	O	O:0.999890
Also	O	O:0.999823
dt.datetime	O	O:0.985971
should	O	O:0.999872
be	O	O:0.999993
df.datetime	O	O:0.997537
(	O	O:0.999989
just	O	O:0.999953
a	O	O:0.999999
typo	O	O:0.999543
)	O	O:0.999994
right	O	O:0.999537
?	O	O:0.999967
	
What	O	O:0.999745
the	O	O:0.999973
`	O	O:0.999981
apply	O	B-API:0.974737
`	O	O:0.999750
function	O	O:0.999518
does	O	O:0.999857
,	O	O:0.999970
is	O	O:0.999999
that	O	O:0.999770
for	O	O:0.999999
each	O	O:0.999778
row	O	O:0.999976
value	O	O:0.999982
of	O	O:0.999982
`	O	O:0.999986
df	O	O:0.999277
[	O	O:0.999973
'	O	O:0.999858
A	O	O:0.999985
']`	O	O:0.999875
,	O	O:0.999966
it	O	O:0.999978
calls	O	O:0.999856
the	O	O:0.999978
`	O	O:0.999928
applyFunc	O	O:0.996573
`	O	O:0.999982
function	O	O:0.999699
with	O	O:0.999987
the	O	O:0.999992
parameter	O	O:0.999929
as	O	O:0.999995
the	O	O:0.999998
value	O	O:0.999948
of	O	O:0.999996
that	O	O:0.999916
row	O	O:0.999993
,	O	O:0.999984
and	O	O:0.999994
the	O	O:0.999990
returned	O	O:0.999332
value	O	O:0.999847
is	O	O:0.999988
put	O	O:0.999770
into	O	O:0.999773
the	O	O:0.999996
same	O	O:0.999822
row	O	O:0.999938
for	O	O:0.999986
`	O	O:0.999986
df	O	O:0.996259
[	O	O:0.999984
'	O	O:0.999946
B	O	O:0.999965
']`	O	O:0.999861
,	O	O:0.999981
what	O	O:0.999920
really	O	O:0.999527
happens	O	O:0.999849
behind	O	O:0.999765
the	O	O:0.999926
scene	O	O:0.998351
is	O	O:0.999995
a	O	O:0.999989
bit	O	O:0.999934
different	O	O:0.999927
though	O	O:0.999671
,	O	O:0.999997
the	O	O:0.999988
value	O	O:0.996314
is	O	O:0.999995
not	O	O:0.999993
directly	O	O:0.999981
put	O	O:0.999847
into	O	O:0.998956
`	O	O:0.999991
df	O	O:0.996545
[	O	O:0.999981
'	O	O:0.999938
B	O	O:0.999878
']`	O	O:0.999943
but	O	O:0.999897
rather	O	O:0.999982
a	O	O:0.999997
new	O	O:0.997238
`	O	O:0.999974
Series	O	O:0.986489
`	O	O:0.999968
is	O	O:0.999943
created	O	O:0.999407
and	O	O:0.999991
at	O	O:0.999995
the	O	O:0.999955
end	O	O:0.999754
,	O	O:0.999992
the	O	O:0.999976
new	O	O:0.999727
Series	O	O:0.999176
is	O	O:0.999993
assigned	O	O:0.999770
to	O	O:0.999972
`	O	O:0.999999
df	O	O:0.998589
[	O	O:0.999987
'	O	O:0.999957
B	O	O:0.999927
']`	O	O:0.999785
.	O	O:0.999337
	
You	O	O:0.999868
can	O	O:0.999983
define	O	O:0.999970
an	O	O:0.999996
explicit	O	O:0.998861
function	O	O:0.999966
to	O	O:0.999995
apply	O	O:0.973453
to	O	O:0.999973
the	O	O:0.999999
entire	O	O:0.999185
`	O	O:0.999985
Name	O	O:0.995582
`	O	O:0.999985
Series	O	O:0.995061
.	O	O:0.999929
	
#CODE	O	O:0.998453
	
@USER	O	O:0.999312
Shouldn't	O	O:0.999888
I	O	O:0.999994
apply	O	O:0.825701
`	O	O:0.999794
split	O	O:0.782100
`	O	O:0.999991
as	O	O:0.999872
:	O	O:0.999983
`	O	O:0.999993
df	O	O:0.999206
[	O	O:0.999964
'	O	O:0.999955
Description	O	O:0.999875
']	O	O:0.999978
=	O	O:0.999598
df	O	O:0.999130
[	O	O:0.999859
'	O	O:0.999979
Name	O	O:0.999929
']	O	O:0.999816
.map	B-API	B-API:0.999184
(	O	O:0.999975
split	O	O:0.997065
)`	O	O:0.999910
to	O	O:0.999939
run	O	O:0.999961
it	O	O:0.999979
?	O	O:0.999980
	
Or	O	O:0.999937
similar	O	O:0.999326
	
Applymap	B-API	B-API:0.728928
is	O	O:0.999955
for	O	O:0.999978
the	O	O:0.999994
whole	O	O:0.999547
df	O	O:0.999816
,	O	O:0.999975
is	O	O:0.999993
you	O	O:0.999929
;	O	O:0.999996
re	O	O:0.999996
doing	O	O:0.999990
just	O	O:0.999953
a	O	O:0.999998
single	O	O:0.998829
column	O	O:0.999479
(	O	O:0.999993
series	O	O:0.999928
)	O	O:0.999992
,	O	O:0.999998
then	O	O:0.999977
just	O	O:0.999982
use	O	O:0.999988
apply	O	B-API:0.939390
.	O	O:0.997707
	
Sorry	O	O:0.998156
you're	O	O:0.999915
trying	O	O:0.999894
to	O	O:0.999997
apply	O	O:0.957463
to	O	O:0.999984
a	O	O:0.999996
groupby	B-API	B-API:0.997631
object	O	O:0.999599
?	O	O:0.999838
	
Does	O	O:0.999460
it	O	O:0.999996
work	O	O:0.999762
after	O	O:0.999991
calling	O	O:0.998955
`	O	O:0.999933
reset_index()	B-API	B-API:0.999936
`	O	O:0.999976
?	O	O:0.999796
	
really	O	O:0.999074
you	O	O:0.999921
should	O	O:0.999989
post	O	O:0.999984
a	O	O:0.999999
new	O	O:0.999895
question	O	O:0.999916
as	O	O:0.999991
chaning	O	O:0.998742
the	O	O:0.999870
requirements	O	O:0.999779
loses	O	O:0.999677
context	O	O:0.999738
for	O	O:0.999996
the	O	O:0.999978
changes	O	O:0.995459
.	O	O:0.999859
	
Interested	O	O:0.999564
to	O	O:0.999979
apply	O	O:0.956284
multivariate	O	O:0.998635
hexagonal	O	O:0.999169
binning	O	O:0.999382
to	O	O:0.999980
this	O	O:0.999984
and	O	O:0.999999
different	O	O:0.999929
color	O	O:0.999811
hexagoan	O	O:0.999042
for	O	O:0.999990
each	O	O:0.999737
unique	O	O:0.846509
column	O	O:0.999630
"	O	O:0.999989
ball	O	O:0.995311
,	O	O:0.999974
mouse	O	O:0.999689
...	O	O:0.999749
etc	O	O:0.999792
"	O	O:0.999991
.	O	O:0.999857
scikit	O	O:0.997413
offers	O	O:0.999770
hexagoanal	O	O:0.997229
binning	O	O:0.999242
but	O	O:0.999944
cant	O	O:0.999787
figure	O	O:0.999940
out	O	O:0.999979
how	O	O:0.999984
to	O	O:0.999987
render	O	O:0.999995
different	O	O:0.999929
colors	O	O:0.999092
for	O	O:0.999995
each	O	O:0.999493
hexagon	O	O:0.999918
based	O	O:0.999860
on	O	O:0.999991
the	O	O:0.999996
unique	O	O:0.975862
data	O	O:0.999858
point	O	O:0.999757
.	O	O:0.999954
	
Any	O	O:0.999846
other	O	O:0.998926
visualization	O	O:0.999736
technique	O	O:0.999892
would	O	O:0.999982
also	O	O:0.999994
help	O	O:0.999879
in	O	O:0.999990
this	O	O:0.999810
.	O	O:0.999962
	
interested	O	O:0.999417
to	O	O:0.999974
apply	O	O:0.958242
hexagonal	O	O:0.999232
binning	O	O:0.998339
to	O	O:0.999991
this	O	O:0.999971
#URL	O	O:0.999681
	
Converting	O	O:0.999764
multiple	O	O:0.999886
columns	O	O:0.999951
to	O	O:0.999997
categories	O	O:0.999939
in	O	O:0.999974
Pandas	O	O:0.999928
.	O	O:0.999965
apply	O	B-API:0.654623
?	O	O:0.999639
	
Why	O	O:0.999943
does	O	O:0.999599
`	O	O:0.999995
apply	O	B-API:0.969072
`	O	O:0.999373
(	O	O:0.997434
`	O	O:0.999997
axis=0	O	O:0.996714
`)	O	O:0.999991
return	O	O:0.998577
a	O	O:0.999974
Series	O	O:0.999556
even	O	O:0.999749
though	O	O:0.999981
it	O	O:0.999975
is	O	O:0.999992
supposed	O	O:0.999934
to	O	O:0.999998
act	O	O:0.999997
on	O	O:0.999996
the	O	O:0.999996
columns	O	O:0.999990
one	O	O:0.999996
by	O	O:0.999994
one	O	O:0.999980
?	O	O:0.999901
	
I'd	O	O:0.999896
suggest	O	O:0.999948
that	O	O:0.999972
you	O	O:0.999992
use	O	O:0.999971
`	O	O:0.999948
groupby	B-API	B-API:0.999687
`	O	O:0.999973
/	O	O:0.997296
`	O	O:0.999991
apply	O	B-API:0.985904
`	O	O:0.999982
returning	O	O:0.998816
a	O	O:0.999918
`	O	O:0.999904
Series	O	O:0.981839
`	O	O:0.999950
(	O	O:0.999892
see	O	O:0.999954
Returning	O	O:0.999428
Multiple	O	O:0.998036
Values	O	O:0.998122
From	O	O:0.999841
Apply	O	O:0.999269
)	O	O:0.999933
.	O	O:0.999582
	
I	O	O:0.999982
think	O	O:0.999962
the	O	O:0.999915
way	O	O:0.999739
you	O	O:0.999797
did	O	O:0.999975
it	O	O:0.999969
is	O	O:0.999991
probably	O	O:0.999809
best	O	O:0.999283
.	O	O:0.999827
	
I'm	O	O:0.999840
not	O	O:0.999989
sure	O	O:0.999675
'	O	O:0.999990
vectorized	O	O:0.998784
'	O	O:0.999932
has	O	O:0.999950
any	O	O:0.999988
real	O	O:0.998713
meaning	O	O:0.998214
in	O	O:0.999993
your	O	O:0.999761
situation	O	O:0.999520
.	O	O:0.999952
	
To	O	O:0.999953
the	O	O:0.999986
extent	O	O:0.998704
where	O	O:0.999933
you	O	O:0.999927
would	O	O:0.999997
gain	O	O:0.999929
speed	O	O:0.999967
,	O	O:0.999995
I	O	O:0.999995
think	O	O:0.999917
you'd	O	O:0.999931
have	O	O:0.999931
to	O	O:0.999996
already	O	O:1.000000
have	O	O:0.999988
a	O	O:0.999996
square	O	O:0.999662
dataframe	B-API	O:0.999396
with	O	O:0.999984
rows	O	O:0.999593
and	O	O:0.999998
column	O	O:0.999971
in	O	O:0.999969
the	O	O:0.999995
same	O	O:0.999929
order	O	O:0.999443
.	O	O:0.999929
	
Given	O	O:0.999714
that	O	O:0.999971
neither	O	O:0.999989
of	O	O:0.999997
those	O	O:0.999953
conditions	O	O:0.999878
apply	O	O:0.882515
here	O	O:0.999203
,	O	O:0.999975
I	O	O:0.999993
don't	O	O:0.999961
see	O	O:0.999983
a	O	O:0.999997
reason	O	O:0.999803
to	O	O:0.999993
change	O	O:0.999984
what	O	O:0.999928
you	O	O:0.999981
have	O	O:0.999966
.	O	O:0.999975
	
You	O	O:0.999809
could	O	O:0.999975
also	O	O:0.999984
do	O	O:0.999996
it	O	O:0.999985
with	O	O:0.999893
apply	O	B-API:0.851297
,	O	O:0.999791
but	O	O:0.999874
it	O	O:0.999987
will	O	O:0.999984
be	O	O:0.999998
slower	O	O:0.999938
than	O	O:0.999734
the	O	O:0.999956
`	O	O:0.999950
np.where	B-API	B-API:0.995073
`	O	O:0.999982
approach	O	O:0.992919
(	O	O:0.999983
but	O	O:0.999969
approximately	O	O:0.999872
the	O	O:0.999991
same	O	O:0.999936
speed	O	O:0.999529
as	O	O:0.999999
what	O	O:0.999825
you	O	O:0.999985
are	O	O:0.999999
currently	O	O:0.999994
doing	O	O:0.999948
)	O	O:0.999970
,	O	O:0.999918
though	O	O:0.999966
much	O	O:0.999545
simpler	O	O:0.999384
.	O	O:0.999822
	
That's	O	O:0.999877
probably	O	O:0.999949
a	O	O:0.999996
good	O	O:0.999664
example	O	O:0.999963
of	O	O:0.999993
why	O	O:0.999951
you	O	O:0.999954
should	O	O:0.999987
always	O	O:0.999990
avoid	O	O:0.999894
`	O	O:0.999978
apply	O	B-API:0.983734
`	O	O:0.999975
if	O	O:0.999922
possible	O	O:0.999958
,	O	O:0.999998
when	O	O:0.999853
you	O	O:0.999996
care	O	O:0.999995
about	O	O:0.999978
speed	O	O:0.995068
.	O	O:0.999738
	
#CODE	O	O:0.998453
	
You	O	O:0.999865
could	O	O:0.999978
also	O	O:0.999981
do	O	O:0.999999
this	O	O:0.999932
,	O	O:0.999990
which	O	O:0.999865
is	O	O:0.999969
faster	O	O:0.999809
than	O	O:0.999703
`	O	O:0.999981
apply	O	B-API:0.990174
`	O	O:0.999928
but	O	O:0.999255
slower	O	O:0.999918
than	O	O:0.999354
`	O	O:0.999963
np.where	B-API	B-API:0.998214
`	O	O:0.999913
:	O	O:0.999839
#CODE	O	O:0.999909
	
Pandas	O	O:0.999578
Apply	O	O:0.999086
function	O	O:0.999704
on	O	O:0.999855
Column	O	O:0.999617
	
You	O	O:0.999857
don't	O	O:0.999972
have	O	O:0.999955
to	O	O:0.999998
call	O	O:0.999898
`	O	O:0.999992
grouped	O	O:0.974234
[	O	O:0.999989
'	O	O:0.999931
B	O	O:0.999964
']`	O	O:0.999771
`	O	O:0.999927
grouped	O	O:0.994548
[	O	O:0.999983
'	O	O:0.999939
C	O	O:0.999877
']`	O	O:0.999977
one	O	O:0.999968
by	O	O:0.999986
one	O	O:0.999992
,	O	O:0.999996
simply	O	O:0.999990
pass	O	O:0.999904
your	O	O:0.999915
entire	O	O:0.999387
groupby	B-API	B-API:0.981839
object	O	O:0.997104
and	O	O:0.999969
pandas	O	O:0.999934
will	O	O:0.999771
apply	O	O:0.782566
the	O	O:0.999978
aggregate	O	B-API:0.898353
functions	O	O:0.999644
to	O	O:0.999988
all	O	O:1.000000
columns	O	O:0.999811
.	O	O:0.999905
	
#CODE	O	O:0.998453
	
This	O	O:0.999306
is	O	O:0.999996
a	O	O:0.999985
little	O	O:0.999461
messed	O	O:0.999559
up	O	O:0.999972
,	O	O:0.999996
firstly	O	O:0.999953
split	O	O:0.997566
the	O	O:0.999977
'	O	O:0.999978
codes	O	O:0.999520
'	O	O:0.999998
column	O	O:0.999968
on	O	O:0.999995
the	O	O:0.999977
separator	O	O:0.999737
and	O	O:0.999972
`	O	O:0.999993
apply	O	B-API:0.991256
`	O	O:0.999929
`	O	O:0.999410
map	O	B-API:0.972708
`	O	O:0.999991
to	O	O:0.999960
each	O	O:0.999988
element	O	O:0.999770
and	O	O:0.999997
pass	O	O:0.999689
the	O	O:0.999986
other	O	O:0.999947
df	O	O:0.999755
with	O	O:0.999626
the	O	O:0.999987
index	O	O:0.999977
set	O	O:0.999915
to	O	O:0.999989
'	O	O:1.000000
code	O	O:0.999683
'	O	O:0.999984
,	O	O:0.999999
this	O	O:0.999964
will	O	O:0.999956
perform	O	O:0.999977
a	O	O:0.999990
lookup	O	O:0.964752
,	O	O:0.999993
we	O	O:0.999980
reduce	O	O:0.999923
this	O	O:0.999954
to	O	O:0.999998
just	O	O:0.999999
the	O	O:0.999997
codes	O	O:0.999727
that	O	O:0.999961
match	O	O:0.999902
.	O	O:0.999959
	
Is	O	O:0.999990
this	O	O:0.999924
really	O	O:0.999961
what	O	O:0.999937
you	O	O:0.999993
want	O	O:0.999990
to	O	O:0.999991
do	O	O:0.999998
?	O	O:0.999979
	
Ideally	O	O:0.999865
you	O	O:0.999990
want	O	O:0.999980
to	O	O:0.999995
avoid	O	O:0.999996
using	O	O:0.999865
`	O	O:0.999864
apply	O	B-API:0.991959
`	O	O:0.999941
if	O	O:0.999860
there	O	O:0.999907
is	O	O:0.999993
a	O	O:0.999881
vectorised	O	O:0.997330
method	O	O:0.999923
,	O	O:0.999992
so	O	O:0.999999
just	O	O:0.999896
`	O	O:0.999999
df	O	O:0.998608
[	O	O:0.999965
'	O	O:0.999983
x	O	O:0.999942
']	O	O:0.999961
+	O	O:0.999938
df	O	O:0.999100
[	O	O:0.999934
'	O	O:0.999980
y	O	O:0.999974
']`	O	O:0.999851
would	O	O:0.999838
work	O	O:0.999806
	
You	O	O:0.999899
can	O	O:0.999979
apply	O	O:0.990727
a	O	O:0.999918
function	O	O:0.999517
row-wise	O	O:0.999623
by	O	O:0.999982
setting	O	O:0.998801
`	O	O:0.999877
axis=1	O	O:0.978431
`	O	O:0.999977
#CODE	O	O:0.997640
	
`	O	O:0.999889
groupby	B-API	B-API:0.995901
/	O	O:0.999986
apply	O	B-API:0.888249
`	O	O:0.999929
to	O	O:0.999984
a	O	O:1.000000
columns	O	O:0.999876
of	O	O:0.999991
`	O	O:0.999996
df	O	O:0.998775
`	O	O:0.999994
unless	O	O:0.999709
the	O	O:0.999999
columns	O	O:0.999916
or	O	O:0.999996
levels	O	O:0.999964
you	O	O:0.999997
group	O	O:0.999841
by	O	O:0.999971
	
Select	O	O:0.999959
your	O	O:0.999960
columns	O	O:0.999918
from	O	O:0.999946
the	O	O:0.999976
DataFrame	B-API	O:0.994210
and	O	O:0.999998
then	O	O:0.999945
apply	O	O:0.986921
your	O	O:0.996704
function	O	O:0.997555
(	O	O:0.999998
possibly	O	O:0.999990
a	O	O:0.999987
`	O	O:0.999946
lambda	O	O:0.994744
`	O	O:0.999992
expression	O	O:0.999268
depending	O	O:0.999919
on	O	O:0.999985
usage	O	O:0.999592
)	O	O:0.999969
.	O	O:0.999734
	
#CODE	O	O:0.998453
	
If	O	O:0.999968
you	O	O:0.999977
have	O	O:0.999990
pandas	O	O:0.999971
version	O	O:0.999909
>	O	O:0.999951
=	O	O:0.999324
`	O	O:0.999978
0.17.0	O	O:0.996543
`	O	O:0.999996
you	O	O:0.999862
could	O	O:0.999989
try	O	O:0.999998
to	O	O:0.999997
apply	O	O:0.940904
`	O	O:0.999960
pandas.to_numeric	B-API	B-API:0.985493
`	O	O:0.999995
for	O	O:0.999968
each	O	O:0.999664
column	O	O:0.998732
(	O	O:0.999988
or	O	O:0.999995
may	O	O:0.999988
be	O	O:0.999998
you	O	O:0.999996
know	O	O:0.999938
suspicious	O	O:0.999946
columns	O	O:0.997061
):	O	O:0.999963
#CODE	O	O:0.999773
	
We	O	O:0.999966
could	O	O:0.999887
see	O	O:0.999998
that	O	O:0.999966
it's	O	O:0.999972
slower	O	O:0.999974
then	O	O:0.999205
convert_object	O	O:0.996226
.	O	O:0.999943
	
Let's	O	O:0.999865
pass	O	O:0.995491
`	O	O:0.999975
raw=True	O	O:0.950279
`	O	O:0.999989
for	O	O:0.999509
`	O	O:0.999982
apply	O	B-API:0.997969
`	O	O:0.999381
:	O	O:0.999219
#CODE	O	O:0.999898
	
`	O	O:0.999957
apply	O	B-API:0.988728
`	O	O:0.999909
might	O	O:0.999428
work	O	O:0.999991
well	O	O:0.999980
for	O	O:0.999996
you	O	O:0.999770
here	O	O:0.997477
:	O	O:0.999985
#CODE	O	O:0.999862
	
I	O	O:0.999992
have	O	O:0.999982
a	O	O:0.999995
list	O	O:0.999487
of	O	O:0.999988
servers	O	O:0.998931
,	O	O:0.999989
and	O	O:0.999998
each	O	O:0.998401
server	O	O:0.999566
has	O	O:0.999994
a	O	O:0.999998
number	O	O:0.999887
of	O	O:0.999976
patches	O	O:0.929504
that	O	O:0.999987
apply	O	O:0.905730
to	O	O:0.999987
that	O	O:0.999923
server	O	O:0.999879
.	O	O:0.999932
	
The	O	O:0.999930
excel	O	O:0.999159
looks	O	O:0.999975
a	O	O:0.999991
bit	O	O:0.999665
like	O	O:0.999919
this	O	O:0.999179
:	O	O:0.999979
#CODE	O	O:0.999843
	
I	O	O:0.999944
realise	O	O:0.999912
there	O	O:0.999699
have	O	O:0.999947
been	O	O:0.999930
a	O	O:0.999999
lot	O	O:0.999908
of	O	O:0.999990
similar	O	O:0.999849
questions	O	O:0.999946
on	O	O:0.999983
here	O	O:0.999408
,	O	O:0.999996
but	O	O:0.999985
I	O	O:0.999990
am	O	O:0.999998
new	O	O:0.999056
to	O	O:0.999987
pandas	O	O:0.999959
and	O	O:0.999988
can't	O	O:0.999952
seem	O	O:0.999930
to	O	O:0.999997
apply	O	O:0.981597
the	O	O:0.999885
right	O	O:0.998351
syntax	O	O:0.999968
to	O	O:0.999998
my	O	O:1.000000
problem	O	O:0.999935
using	O	O:0.999971
the	O	O:0.999726
documentation	O	O:0.998914
-	O	O:0.999976
can	O	O:0.999941
anyone	O	O:0.999996
help	O	O:0.999481
?	O	O:0.999940
	
I'm	O	O:0.999944
trying	O	O:0.999895
to	O	O:0.999992
figure	O	O:0.999959
out	O	O:0.999965
how	O	O:0.999989
to	O	O:0.999997
apply	O	O:0.993133
a	O	O:0.999978
lambda	O	O:0.989208
function	O	O:0.999891
to	O	O:0.999992
multiple	O	O:0.999999
dataframes	O	O:0.999972
simultaneously	O	O:0.999862
,	O	O:0.999997
without	O	O:0.999770
first	O	O:0.999720
merging	O	O:0.999711
the	O	O:0.999989
data	O	O:0.999946
frames	O	O:0.999845
together	O	O:0.999741
.	O	O:0.999956
	
I	O	O:0.999963
am	O	O:0.999994
working	O	O:0.998444
with	O	O:0.999984
large	O	O:0.999960
data	O	O:0.999931
sets	O	O:0.998282
(	O	O:0.999965
>	O	O:0.999995
60MM	O	O:0.999811
records	O	O:0.999425
)	O	O:0.999977
and	O	O:0.999993
I	O	O:0.999998
need	O	O:0.999934
to	O	O:0.999979
be	O	O:1.000000
extra	O	O:0.999822
careful	O	O:0.998329
with	O	O:0.999868
memory	O	O:0.999283
management	O	O:0.999755
.	O	O:0.999843
	
My	O	O:0.999969
hope	O	O:0.992888
is	O	O:0.999993
that	O	O:0.999909
there	O	O:0.999948
is	O	O:0.999998
a	O	O:0.999982
way	O	O:0.999895
to	O	O:0.999977
apply	O	O:0.987278
lambda	O	O:0.998948
to	O	O:0.999980
just	O	O:0.999989
the	O	O:0.999999
underlying	O	O:0.999827
dataframes	O	O:0.999719
so	O	O:0.999996
that	O	O:0.999993
I	O	O:0.999999
can	O	O:0.999994
avoid	O	O:0.999928
the	O	O:0.999999
cost	O	O:0.998197
of	O	O:0.999997
stitching	O	O:0.999981
them	O	O:0.999931
together	O	O:0.999906
first	O	O:0.999768
,	O	O:0.999977
and	O	O:0.999997
then	O	O:0.999850
dropping	O	O:0.999831
that	O	O:0.999900
intermediary	O	O:0.999972
dataframe	B-API	O:0.999365
from	O	O:0.999734
memory	O	O:0.999846
before	O	O:0.999899
I	O	O:0.999998
move	O	O:0.999895
on	O	O:0.999965
to	O	O:0.999995
the	O	O:1.000000
next	O	O:0.999946
step	O	O:0.999932
in	O	O:0.999998
the	O	O:0.999994
process	O	O:0.997301
.	O	O:0.999887
	
However	O	O:0.999536
,	O	O:0.999988
it	O	O:0.999983
is	O	O:0.999992
slower	O	O:0.999727
since	O	O:0.999953
the	O	O:0.999915
`	O	O:0.999983
groupby	B-API	B-API:0.995621
/	O	O:0.999990
apply	O	B-API:0.895892
`	O	O:0.999328
is	O	O:0.999925
doing	O	O:0.999913
an	O	O:0.999926
addition	O	O:0.999511
and	O	O:0.999994
division	O	O:0.999977
once	O	O:0.999502
for	O	O:0.999995
each	O	O:0.999678
group	O	O:0.996245
,	O	O:0.999977
whereas	O	O:0.999329
#CODE	O	O:0.999259
	
However	O	O:0.999536
,	O	O:0.999988
it	O	O:0.999983
is	O	O:0.999992
slower	O	O:0.999727
since	O	O:0.999953
the	O	O:0.999915
`	O	O:0.999983
groupby	B-API	B-API:0.995621
/	O	O:0.999990
apply	O	B-API:0.895892
`	O	O:0.999328
is	O	O:0.999925
doing	O	O:0.999913
an	O	O:0.999926
addition	O	O:0.999511
and	O	O:0.999994
division	O	O:0.999977
once	O	O:0.999502
for	O	O:0.999995
each	O	O:0.999678
group	O	O:0.996245
,	O	O:0.999977
whereas	O	O:0.999329
#CODE	O	O:0.999259
	
So	O	O:0.999965
far	O	O:0.999962
I	O	O:0.999992
can	O	O:0.999994
think	O	O:0.999983
of	O	O:0.999994
`	O	O:0.999971
apply	O	B-API:0.939095
`	O	O:0.999971
followed	O	O:0.999496
by	O	O:0.999938
`	O	O:0.999877
itertools.chain	O	B-API:0.635980
`	O	O:0.999975
,	O	O:0.999928
but	O	O:0.999991
I	O	O:0.999984
am	O	O:0.999997
wondering	O	O:0.999160
if	O	O:0.999993
there	O	O:0.999825
is	O	O:0.999997
a	O	O:0.999989
one-step	O	O:0.997001
solution	O	O:0.999364
.	O	O:0.999900
	
Group	O	O:0.999501
by	O	O:0.999857
uid	O	O:0.999388
and	O	O:0.999970
apply	O	B-API:0.758511
`	O	O:0.999435
value_counts	B-API	B-API:0.999833
`	O	O:0.999989
to	O	O:0.999966
the	O	O:0.999999
msg	O	O:0.999656
column	O	O:0.998964
:	O	O:0.999981
#CODE	O	O:0.999892
	
Apply	O	O:0.997698
`	O	O:0.999923
groupby	B-API	B-API:0.999119
`	O	O:0.999982
on	O	O:0.999884
both	O	O:0.999923
`	O	O:0.999985
id	O	O:0.991431
`	O	O:0.999982
and	O	O:0.999631
`	O	O:0.999993
msg	O	O:0.977477
`	O	O:0.999983
,	O	O:0.999916
and	O	O:1.000000
then	O	O:0.999879
sum	O	O:0.999968
the	O	O:0.999995
`	O	O:0.999995
count	O	O:0.994540
`	O	O:0.999999
of	O	O:0.999927
each	O	O:0.995743
:	O	O:0.999971
#CODE	O	O:0.999817
	
How	O	O:0.999749
did	O	O:0.999926
you	O	O:0.999993
check	O	O:0.999945
if	O	O:0.999999
anything	O	O:0.999804
was	O	O:0.999748
written	O	O:0.998404
?	O	O:0.999954
	
The	O	O:0.999848
`	O	O:0.999983
if	O	O:0.999965
os.path.isfile()	O	O:0.994880
`	O	O:0.999620
is	O	O:0.999939
not	O	O:0.999989
going	O	O:0.999906
to	O	O:0.999965
cause	O	O:0.999943
much	O	O:0.999636
overhead	O	O:0.999739
and	O	O:0.999928
is	O	O:0.999998
easy	O	O:0.998740
to	O	O:0.999993
apply	O	O:0.930698
the	O	O:0.999608
logic	O	O:0.997584
	
I	O	O:0.999844
am	O	O:0.999990
not	O	O:0.999924
sure	O	O:0.999989
what	O	O:0.999947
I	O	O:0.999995
am	O	O:0.999999
doing	O	O:0.999715
wrong	O	O:0.999831
here	O	O:0.999143
,	O	O:0.999995
I	O	O:0.999994
am	O	O:0.999996
simply	O	O:0.999910
trying	O	O:0.999973
to	O	O:0.999992
call	O	O:0.999985
a	O	O:0.999976
function	O	O:0.999059
with	O	O:0.999986
a	O	O:0.999986
if-then-else	O	O:0.999681
filter	O	O:0.975522
in	O	O:0.999948
it	O	O:0.999978
and	O	O:0.999997
apply	O	O:0.701546
to	O	O:0.999835
a	O	O:0.999997
dataframe	B-API	O:0.978696
.	O	O:0.999897
	
#CODE	O	O:0.998453
	
You	O	O:0.999932
want	O	O:0.999891
to	O	O:0.999975
apply	O	O:0.984894
it	O	O:0.999949
to	O	O:0.999996
each	O	O:0.999991
row	O	O:0.999892
,	O	O:0.999999
this	O	O:0.999981
will	O	O:0.999905
do	O	O:0.999997
what	O	O:0.999977
you	O	O:0.999987
want	O	O:0.999993
using	O	O:0.999910
apply	O	B-API:0.903727
and	O	O:0.999834
a	O	O:0.999858
lambda	O	O:0.874028
:	O	O:0.999893
#CODE	O	O:0.999393
	
`	O	O:0.999937
df.apply	B-API	B-API:0.995606
`	O	O:0.999968
has	O	O:0.999488
performance	O	O:0.999982
comparable	O	O:0.999811
to	O	O:0.999998
a	O	O:0.999999
Python	O	O:0.997325
`	O	O:0.999985
for-loop	O	O:0.989208
`	O	O:0.999973
.	O	O:0.999498
	
Sometimes	O	O:0.999894
using	O	O:0.999971
apply	O	B-API:0.718649
or	O	O:0.999905
a	O	O:0.999935
for-loop	O	O:0.999839
to	O	O:0.999990
compute	O	O:0.999917
row-by-row	O	O:0.998728
is	O	O:0.999989
unavoidable	O	O:0.998128
,	O	O:0.999984
but	O	O:0.999861
in	O	O:0.999994
this	O	O:0.999984
case	O	O:0.999997
a	O	O:0.999997
quicker	O	O:0.999106
alternative	O	O:0.999893
would	O	O:0.999958
be	O	O:0.999996
express	O	O:0.999978
the	O	O:0.999977
calculation	O	O:0.999837
as	O	O:0.999995
one	O	O:0.999993
done	O	O:0.999950
on	O	O:0.999998
whole	O	O:0.999948
columns	O	O:0.999907
.	O	O:0.999911
	
thanks	O	O:0.998523
for	O	O:0.999972
the	O	O:0.999947
added	O	O:0.998647
color	O	O:0.999319
.	O	O:0.999810
	
.	O	O:0.999615
.	O	O:0.999865
	
.I	O	O:0.999858
just	O	O:0.999688
checked	O	O:0.999923
,	O	O:0.999985
in	O	O:0.999993
my	O	O:0.999959
application	O	O:0.999896
,	O	O:0.999999
this	O	O:0.999674
is	O	O:0.999989
5.3	O	O:0.999747
times	O	O:0.999764
faster	O	O:0.999894
than	O	O:0.999941
my	O	O:0.999962
"	O	O:0.999987
def	O	O:0.998822
"	O	O:0.999938
solution	O	O:0.996390
and	O	O:0.999984
2.8	O	O:0.999848
times	O	O:0.998915
faster	O	O:0.999875
than	O	O:0.999924
the	O	O:0.999984
df	O	O:0.999758
,	O	O:0.999993
apply	O	O:0.553217
approach	O	O:0.998759
.	O	O:0.999332
	
Thank	O	O:0.999047
you	O	O:0.999775
	
Apply	O	O:0.998239
curve_fit	O	O:0.917613
within	O	O:0.999885
a	O	O:0.999981
loop	O	O:0.997364
	
Now	O	O:0.999931
,	O	O:0.999993
I	O	O:0.999987
would	O	O:0.999995
like	O	O:0.999952
to	O	O:0.999999
apply	O	O:0.992937
a	O	O:0.999972
fit	O	O:0.996931
to	O	O:0.999997
each	O	O:0.999980
frequency	O	O:0.999929
group	O	O:0.985885
(	O	O:0.999974
400	O	O:0.999443
,	O	O:0.999943
800	O	O:0.998739
and	O	O:0.999972
1200	O	O:0.998901
)	O	O:0.999877
and	O	O:0.999946
do	O	O:0.999994
this	O	O:0.999835
efficiently	O	O:0.999797
within	O	O:0.999902
a	O	O:0.999972
loop	O	O:0.997560
.	O	O:0.999856
	
The	O	O:0.999976
first	O	O:0.999672
attempt	O	O:0.996348
is	O	O:0.999758
:	O	O:0.999897
#CODE	O	O:0.999813
	
I	O	O:0.999982
hope	O	O:0.999567
,	O	O:0.999984
that	O	O:0.999964
there	O	O:0.999887
is	O	O:0.999996
someone	O	O:0.999662
,	O	O:0.999989
who	O	O:0.999877
could	O	O:0.999874
explain	O	O:0.999866
,	O	O:0.999997
if	O	O:0.999988
it	O	O:0.999921
is	O	O:0.999998
possible	O	O:0.999901
to	O	O:0.999994
apply	O	O:0.950816
the	O	O:0.999898
curv_fit	O	O:0.963783
routine	O	O:0.999935
within	O	O:0.999886
a	O	O:0.999993
loop	O	O:0.998522
and	O	O:0.999995
if	O	O:0.999988
so	O	O:0.999925
-	O	O:0.999979
how	O	O:0.999911
.	O	O:0.999936
	
You	O	O:0.999814
should	O	O:0.999919
be	O	O:0.999999
able	O	O:0.999993
to	O	O:0.999977
do	O	O:0.999999
this	O	O:0.999983
using	O	O:0.999933
`	O	O:0.999941
apply	O	B-API:0.993868
`	O	O:0.999896
which	O	O:0.995752
is	O	O:0.999992
for	O	O:0.999990
applying	O	O:0.999900
a	O	O:0.999517
function	O	O:0.999461
to	O	O:0.999998
every	O	O:0.999997
row	O	O:0.999955
or	O	O:0.999998
every	O	O:0.999988
column	O	O:0.999989
of	O	O:0.999999
a	O	O:0.999998
data	O	O:0.999934
frame	O	O:0.999988
.	O	O:0.999937
	
#CODE	O	O:0.998453
	
I	O	O:0.999961
am	O	O:0.999997
completely	O	O:0.999703
new	O	O:0.999904
to	O	O:0.999940
python	O	O:0.999928
and	O	O:0.999997
Pandas	O	O:0.999961
of	O	O:0.999934
course	O	O:0.998882
.	O	O:0.999975
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999655
to	O	O:0.999991
run	O	O:0.999995
a	O	O:0.999978
function	O	O:0.999709
"	O	O:0.999988
get	O	O:0.999799
url	O	O:0.999941
"	O	O:0.999978
which	O	O:0.999249
is	O	O:0.999955
function	O	O:0.999951
to	O	O:0.999991
get	O	O:0.999998
the	O	O:0.999993
complete	O	O:0.999835
extended	O	O:0.999859
url	O	O:0.999974
from	O	O:0.999901
small	O	O:0.999180
Url	O	O:0.999027
.	O	O:0.999698
	
I	O	O:0.999992
have	O	O:0.999998
a	O	O:0.999997
data	O	O:0.999977
frame	O	O:0.999994
in	O	O:0.999993
python	O	O:0.999945
consists	O	O:0.999919
all	O	O:0.999974
the	O	O:0.999990
short	O	O:0.998662
URLs	O	O:0.998733
.	O	O:0.999851
	
Now	O	O:0.999919
I	O	O:0.999981
am	O	O:0.999999
trying	O	O:0.999729
to	O	O:0.999993
do	O	O:0.999996
with	O	O:0.999958
following	O	O:0.999653
ways	O	O:0.999539
.	O	O:0.999836
	
One	O	O:0.999685
is	O	O:0.999986
to	O	O:0.999967
use	O	O:0.999994
"	O	O:0.999881
for	O	O:0.999553
"	O	O:0.999967
loop	O	O:0.996901
which	O	O:0.999795
loops	O	O:0.999413
and	O	O:0.999990
apply	O	B-API:0.559105
function	O	O:0.999115
on	O	O:0.999927
all	O	O:0.999987
the	O	O:0.999993
elements	O	O:0.998151
and	O	O:0.999995
will	O	O:0.999992
create	O	O:0.999974
a	O	O:0.999999
another	O	O:0.999927
series	O	O:0.999969
of	O	O:0.999976
extended	O	O:0.998699
URL	O	O:0.999978
but	O	O:0.999956
I	O	O:0.999961
am	O	O:0.999993
not	O	O:0.999981
able	O	O:0.999989
to	O	O:0.999994
,	O	O:1.000000
dont	O	O:0.999968
know	O	O:0.999935
why	O	O:0.999997
,	O	O:0.999982
I	O	O:0.999993
tried	O	O:0.999908
to	O	O:0.999885
write	O	O:0.999979
it	O	O:0.999988
like	O	O:0.999925
#CODE	O	O:0.999908
	
If	O	O:0.999960
the	O	O:0.999989
short	O	O:0.999825
urls	O	O:0.999541
are	O	O:0.999998
a	O	O:0.999999
column	O	O:0.999412
in	O	O:0.999987
the	O	O:0.999990
pandas	O	O:0.999920
dataFrame	B-API	O:0.998803
,	O	O:0.999997
you	O	O:0.999996
can	O	O:0.999969
use	O	O:0.999999
the	O	O:0.999958
`	O	O:0.999957
apply	O	B-API:0.975751
`	O	O:0.999582
function	O	O:0.987791
(	O	O:0.999995
though	O	O:0.999937
I	O	O:0.999972
am	O	O:0.999993
not	O	O:0.999969
sure	O	O:0.999948
if	O	O:0.999996
they	O	O:0.999909
would	O	O:0.999979
resume	O	O:0.999932
on	O	O:0.999994
error	O	O:0.999755
,	O	O:0.999997
most	O	O:0.999374
probably	O	O:0.999882
not	O	O:0.999959
)	O	O:0.999985
.	O	O:0.999817
	
Hi	O	O:0.999655
Anand	O	O:0.998856
-	O	O:0.999981
Thanks	O	O:0.999255
for	O	O:0.999957
help	O	O:0.980403
.	O	O:0.999734
but	O	O:0.999960
it	O	O:0.999938
is	O	O:0.999986
working	O	O:0.999842
same	O	O:0.999970
as	O	O:0.999990
apply	O	B-API:0.936939
function	O	O:0.999575
.	O	O:0.999956
as	O	O:0.999997
soon	O	O:0.999290
as	O	O:0.999997
it	O	O:0.999979
faces	O	O:0.999923
a	O	O:0.999989
error	O	O:0.999358
it	O	O:0.999992
pass	O	O:0.998472
completely	O	O:0.999812
.	O	O:0.999987
error	O	O:0.998078
is	O	O:0.999990
like	O	O:0.998308
HTTPError	O	O:0.999233
:	O	O:0.999956
HTTP	O	O:0.998888
Error	O	O:0.998536
404	O	O:0.999290
:	O	O:0.999860
Not	O	O:0.999833
Found	O	O:0.999847
....	O	O:0.996894
	
@USER	O	O:0.998287
"	O	O:0.999979
Misses	O	O:0.998717
the	O	O:0.999981
point	O	O:0.999225
"	O	O:0.999951
is	O	O:0.999994
a	O	O:0.999990
little	O	O:0.998538
harsh	O	O:0.998052
!	O	O:0.999818
	
;-)	O	O:0.999599
I	O	O:0.999991
guess	O	O:0.999969
if	O	O:0.999957
you	O	O:0.999992
want	O	O:0.999976
me	O	O:0.999991
to	O	O:0.999997
explicitly	O	O:0.999989
state	O	O:0.999897
it	O	O:0.999986
,	O	O:0.999996
I	O	O:0.999986
don't	O	O:0.999914
believe	O	O:0.999666
it	O	O:0.999963
is	O	O:0.999995
possible	O	O:0.999854
to	O	O:0.999991
do	O	O:0.999999
what	O	O:0.999955
you	O	O:0.999993
want	O	O:0.999982
without	O	O:0.999945
making	O	O:0.999884
a	O	O:0.999970
copy	O	O:0.873428
.	O	O:0.999929
	
Btw	O	O:0.999885
you	O	O:0.999879
might	O	O:0.999992
mean	O	O:0.999954
*	O	O:0.999999
set	O	O:0.999917
*	O	O:0.999992
rather	O	O:0.999960
than	O	O:0.999924
*	O	O:0.999996
select	O	O:0.997807
*	O	O:0.999989
in	O	O:0.999999
your	O	O:0.999825
question	O	O:0.999740
title	O	O:0.999955
?	O	O:0.999944
	
Anyway	O	O:0.999617
,	O	O:0.999968
you're	O	O:0.999968
trying	O	O:0.999907
to	O	O:0.999998
apply	O	O:0.986227
a	O	O:0.999990
numpy	O	O:0.997597
concept	O	O:0.999145
to	O	O:0.999981
pandas	O	O:0.999928
and	O	O:0.999989
it	O	O:0.999973
doesn't	O	O:0.999881
work	O	O:0.999965
like	O	O:0.999984
that	O	O:0.999945
.	O	O:0.999974
	
My	O	O:0.999935
edit	O	O:0.995262
was	O	O:0.999980
merely	O	O:0.999974
an	O	O:0.999994
attempt	O	O:0.999817
to	O	O:0.999992
find	O	O:0.999998
something	O	O:0.999895
faster	O	O:0.999100
.	O	O:0.999904
	
I'll	O	O:0.999494
edit	O	O:0.999727
the	O	O:0.999978
answer	O	O:0.999842
to	O	O:0.999981
make	O	O:0.999994
this	O	O:0.999987
more	O	O:0.999924
obvious	O	O:0.999458
.	O	O:0.999855
	
The	O	O:0.999821
following	O	O:0.996416
works	O	O:0.999134
but	O	O:0.999990
this	O	O:0.999940
really	O	O:0.999599
is	O	O:0.999994
a	O	O:0.999985
loop	O	O:0.999547
as	O	O:0.999971
it	O	O:0.999970
uses	O	O:0.999368
`	O	O:0.999985
apply	O	B-API:0.996356
`	O	O:0.999534
:	O	O:0.999280
#CODE	O	O:0.999898
	
That's	O	O:0.999724
correct	O	O:0.999782
`	O	O:0.999995
apply	O	B-API:0.973127
`	O	O:0.999847
will	O	O:0.998038
not	O	O:0.999998
scale	O	O:0.999945
well	O	O:0.999899
,	O	O:0.999998
one	O	O:0.999993
thing	O	O:0.999939
you	O	O:0.999985
could	O	O:0.999984
do	O	O:0.999993
is	O	O:0.999998
assuming	O	O:0.999917
that	O	O:0.999979
all	O	O:0.999990
values	O	O:0.999329
are	O	O:0.999962
not	O	O:0.999997
unique	O	O:0.949707
you	O	O:0.999980
could	O	O:0.999993
create	O	O:0.999995
a	O	O:1.000000
dict	O	O:0.999902
of	O	O:0.999993
the	O	O:0.999994
unique	O	O:0.961716
values	O	O:0.999785
as	O	O:0.999994
keys	O	O:0.999275
and	O	O:0.999997
the	O	O:0.999991
row	O	O:0.999827
position	O	O:0.999963
values	O	O:0.999883
as	O	O:0.999998
the	O	O:0.999983
values	O	O:0.998561
and	O	O:0.999982
merge	O	O:0.956941
this	O	O:0.999144
,	O	O:0.999997
this	O	O:0.999933
should	O	O:0.999961
perform	O	O:0.999925
slightly	O	O:0.999905
better	O	O:0.999782
,	O	O:0.999999
your	O	O:0.999871
issue	O	O:0.999898
here	O	O:0.999437
is	O	O:0.999996
that	O	O:0.999862
you	O	O:0.999989
are	O	O:0.999999
trying	O	O:0.999969
to	O	O:0.999992
compare	O	O:0.999996
a	O	O:0.999995
scalar	O	O:0.999584
against	O	O:0.999964
the	O	O:0.999994
entire	O	O:0.999844
df	O	O:0.999846
for	O	O:0.999997
every	O	O:0.999664
row	O	O:0.999940
value	O	O:0.999895
,	O	O:0.999993
there	O	O:0.999924
isn't	O	O:0.999980
a	O	O:0.999997
built	O	O:0.984800
in	O	O:0.999963
method	O	O:0.999917
for	O	O:0.999990
doing	O	O:0.999974
this	O	O:0.999820
so	O	O:0.999978
you	O	O:0.999997
have	O	O:0.999985
to	O	O:0.999998
call	O	O:0.999957
`	O	O:0.999996
apply	O	B-API:0.995594
`	O	O:0.999965
here	O	O:0.985979
	
@USER	O	O:0.995111
is	O	O:0.999983
there	O	O:0.999656
code	O	O:0.999725
not	O	O:0.999984
listed	O	O:0.999904
above	O	O:0.999906
that's	O	O:0.999925
altering	O	O:0.999953
the	O	O:0.999983
data	O	O:0.999908
frame	O	O:0.999991
?	O	O:0.999983
	
For	O	O:0.999920
example	O	O:0.999671
,	O	O:0.999988
how	O	O:0.999981
are	O	O:0.999993
you	O	O:0.999997
apply	O	O:0.947787
a	O	O:0.999964
Month	O	O:0.960469
`	O	O:0.999981
Series	O	O:0.991673
`	O	O:0.999996
to	O	O:0.999960
the	O	O:1.000000
table	O	O:0.999781
?	O	O:0.999958
	
I	O	O:0.999969
think	O	O:0.999896
you're	O	O:0.999658
asking	O	O:0.999571
how	O	O:0.999978
to	O	O:0.999993
apply	O	O:0.996631
a	O	O:0.999886
function	O	O:0.999464
to	O	O:0.999996
all	O	O:1.000000
columns	O	O:0.999985
of	O	O:0.999997
a	O	O:0.999981
Data	O	O:0.997377
Frame	O	O:0.999813
:	O	O:0.999942
To	O	O:0.999994
do	O	O:0.999998
this	O	O:0.999966
call	O	O:0.999000
the	O	O:0.999974
`	O	O:0.999735
apply	O	B-API:0.998138
`	O	O:0.999971
method	O	O:0.999692
of	O	O:0.999998
your	O	O:0.999671
dataframe	B-API	O:0.983585
:	O	O:0.999974
#CODE	O	O:0.999851
	
Why	O	O:0.999865
not	O	O:0.999953
try	O	O:0.999954
`	O	O:0.999978
np.where	B-API	B-API:0.995708
`	O	O:0.999975
.	O	O:0.999532
	
It's	O	O:0.999243
column-wise	O	O:0.999658
vectorized	O	O:0.999587
operation	O	O:0.998286
and	O	O:0.999984
it	O	O:0.999926
is	O	O:0.999984
much	O	O:0.998694
faster	O	O:0.999863
than	O	O:0.999702
row-wise	O	O:0.997953
apply	O	B-API:0.615268
.	O	O:0.998787
	
#CODE	O	O:0.998453
	
I've	O	O:0.999766
created	O	O:0.999916
a	O	O:0.999914
function	O	O:0.999753
that	O	O:0.999947
looks	O	O:0.999993
for	O	O:0.999999
rows	O	O:0.999697
that	O	O:0.999968
have	O	O:0.999999
a	O	O:1.000000
set	O	O:0.999878
of	O	O:0.999999
column	O	O:0.999930
values	O	O:0.999983
that	O	O:0.999888
are	O	O:0.999999
the	O	O:0.999995
same	O	O:0.999642
.	O	O:0.999882
	
It's	O	O:0.999880
ugly	O	O:0.999062
though	O	O:0.999286
:	O	O:0.999988
nested	O	O:0.999888
apply	O	O:0.611994
functions	O	O:0.997748
.	O	O:0.999324
	
Is	O	O:0.999985
there	O	O:0.999987
a	O	O:0.999993
better	O	O:0.999404
way	O	O:0.999955
to	O	O:0.999992
test	O	O:0.999966
if	O	O:0.999993
`	O	O:0.999996
n	O	O:0.999227
`	O	O:0.999998
number	O	O:0.999922
columns	O	O:0.999976
have	O	O:0.999988
the	O	O:0.999998
same	O	O:0.999971
value	O	O:0.999893
,	O	O:0.999987
and	O	O:0.999998
if	O	O:0.999993
so	O	O:0.999987
apply	O	O:0.914316
a	O	O:0.999855
function	O	O:0.998976
to	O	O:1.000000
them	O	O:0.999993
or	O	O:0.999997
add	O	O:0.999998
them	O	O:0.999963
to	O	O:0.999998
a	O	O:1.000000
dictionary	O	O:0.999383
?	O	O:0.999955
	
#CODE	O	O:0.998453
	
Ah	O	O:0.999910
,	O	O:0.999986
yes	O	O:0.999682
,	O	O:0.999995
that	O	O:0.999886
was	O	O:0.999993
a	O	O:0.999997
bug	O	O:0.999403
in	O	O:0.999940
0.15	O	O:0.999883
preventing	O	O:0.999815
you	O	O:0.999981
to	O	O:0.999995
use	O	O:1.000000
such	O	O:0.999623
an	O	O:0.999987
instantiated	O	O:0.998245
class	O	O:0.999225
(	O	O:0.999977
which	O	O:0.999817
is	O	O:0.999991
the	O	O:0.999990
case	O	O:0.999928
when	O	O:0.999956
providing	O	O:0.999983
a	O	O:0.999997
keyword	O	O:0.999308
)	O	O:0.999988
,	O	O:0.999988
see	O	O:0.999885
#URL	O	O:0.999522
You	O	O:0.999959
need	O	O:0.999922
0.16	O	O:0.999742
for	O	O:0.999994
that	O	O:0.999438
fix	O	O:0.998889
(	O	O:0.999991
or	O	O:0.999993
you	O	O:0.999966
can	O	O:0.999992
apply	O	O:0.991714
it	O	O:0.999987
yourself	O	O:0.999826
as	O	O:0.999993
it	O	O:0.999916
is	O	O:0.999998
only	O	O:0.999986
a	O	O:0.999993
2	O	O:0.999791
line	O	O:0.999824
fix	O	O:0.999735
,	O	O:0.999994
see	O	O:0.999968
the	O	O:0.999974
linked	O	O:0.999133
PR	O	O:0.999965
)	O	O:0.999926
	
An	O	O:0.999951
easy	O	O:0.999467
workaround	O	O:0.999882
would	O	O:0.999962
be	O	O:0.999998
to	O	O:0.999999
apply	O	O:0.849346
`	O	O:0.999942
.values	B-API	B-API:0.998876
`	O	O:0.999995
to	O	O:0.999963
the	O	O:0.999999
series	O	O:0.999902
first	O	O:0.999691
and	O	O:0.999999
then	O	O:0.999893
apply	O	O:0.580595
`	O	O:0.999949
std	O	O:0.916764
`	O	O:0.999992
to	O	O:0.999977
these	O	O:0.999999
values	O	O:0.999728
;	O	O:0.999968
in	O	O:0.999997
this	O	O:0.999988
case	O	O:0.999961
`	O	O:0.999995
numpy's	O	O:0.989726
`	O	O:0.999954
`	O	O:0.999959
std	O	O:0.985773
`	O	O:0.999943
is	O	O:0.999663
used	O	O:0.998056
:	O	O:0.999895
#CODE	O	O:0.999643
	
By	O	O:0.999948
default	O	O:0.999607
,	O	O:0.999997
when	O	O:0.999868
you	O	O:0.999973
`	O	O:0.999999
groupby	B-API	B-API:0.998057
`	O	O:0.999986
-	O	O:0.999568
`	O	O:0.999996
sum	O	O:0.996284
`	O	O:0.999997
a	O	O:0.999960
DataFrame	B-API	O:0.985790
,	O	O:0.999990
pandas	O	O:0.999720
doesn't	O	O:0.999926
assume	O	O:0.999987
that	O	O:0.999980
you	O	O:0.999997
want	O	O:0.999990
to	O	O:0.999996
do	O	O:1.000000
so	O	O:0.999995
for	O	O:0.999990
all	O	O:0.999990
the	O	O:0.999985
columns	O	O:0.999870
that	O	O:0.999833
are	O	O:1.000000
not	O	O:0.999997
of	O	O:0.999997
the	O	O:0.999957
classic	O	O:0.999811
numeric	O	O:0.998953
types	O	O:0.995477
.	O	O:0.999918
	
If	O	O:0.999948
you'd	O	O:0.999981
have	O	O:0.999993
a	O	O:1.000000
column	O	O:0.999946
of	O	O:0.999993
strings	O	O:0.998921
,	O	O:0.999994
it	O	O:0.999970
wouldn't	O	O:0.999936
try	O	O:0.999993
to	O	O:0.999998
apply	O	O:0.987245
the	O	O:0.999961
sum	O	O:0.998813
to	O	O:0.999999
them	O	O:0.999985
too	O	O:0.999911
.	O	O:0.999958
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
Was	O	O:0.999914
the	O	O:0.999981
error	O	O:0.999623
with	O	O:0.999946
my	O	O:0.999977
code	O	O:0.999855
because	O	O:0.999929
datetime.date	O	O:0.994758
works	O	O:0.999974
on	O	O:0.999998
a	O	O:0.999999
single	O	O:0.999586
row	O	O:0.999927
,	O	O:0.999973
and	O	O:0.999998
with	O	O:0.999923
functions	O	O:0.999835
working	O	O:0.999949
on	O	O:0.999998
rows	O	O:0.999960
one	O	O:0.999997
at	O	O:1.000000
a	O	O:0.999998
time	O	O:0.999614
I	O	O:0.999998
hvae	O	O:0.999893
to	O	O:0.999974
do	O	O:0.999995
apply	O	B-API:0.611629
(	O	O:0.999819
fun()	O	O:0.970481
)	O	O:0.999972
rather	O	O:0.999945
than	O	O:0.999735
fun	O	O:0.998988
(	O	O:0.999987
apply()	B-API	B-API:0.993142
)	O	O:0.999897
?	O	O:0.999829
	
Here	O	O:0.999373
is	O	O:0.999992
another	O	O:0.999746
alternative	O	O:0.999936
that	O	O:0.999823
might	O	O:0.999990
appear	O	O:0.999957
simpler	O	O:0.999069
(	O	O:0.999976
though	O	O:0.999965
learning	O	O:0.999659
to	O	O:0.999991
apply	O	O:0.952719
functions	O	O:0.999654
to	O	O:0.999969
groups	O	O:0.999937
is	O	O:0.999997
a	O	O:0.999990
great	O	O:0.999124
idea	O	O:0.999696
!	O	O:0.999847
)	O	O:0.999935
#CODE	O	O:0.999360
	
Here	O	O:0.998043
is	O	O:0.999989
one	O	O:0.999960
way	O	O:0.999976
to	O	O:0.999983
do	O	O:0.999999
it	O	O:0.999997
by	O	O:0.999991
defining	O	O:0.999961
your	O	O:0.998417
own	O	O:0.999960
rolling	O	O:0.997479
apply	O	B-API:0.933076
function	O	O:0.997895
.	O	O:0.999398
	
#CODE	O	O:0.998453
	
Here	O	O:0.998034
is	O	O:0.999989
one	O	O:0.999983
way	O	O:0.999972
of	O	O:0.999983
approaching	O	O:0.999603
it	O	O:0.999984
,	O	O:0.999993
using	O	O:0.999972
the	O	O:0.998205
apply	O	B-API:0.934473
method	O	O:0.999869
to	O	O:0.999972
subtract	O	O:0.999985
the	O	O:0.999991
first	O	O:0.999944
item	O	O:0.999966
from	O	O:0.999946
all	O	O:0.999990
the	O	O:0.999997
other	O	O:0.999796
obs	O	O:0.999777
.	O	O:0.999852
	
#CODE	O	O:0.998453
	
Use	O	O:0.999378
`	O	O:0.999932
groupby	B-API	B-API:0.995320
/	O	O:0.999986
apply	O	B-API:0.891022
`	O	O:0.999912
to	O	O:0.999956
sort	O	O:0.999994
each	O	O:0.999959
group	O	O:0.999500
individually	O	O:0.999801
,	O	O:0.999983
and	O	O:0.999999
pick	O	O:0.999028
off	O	O:0.999955
just	O	O:0.999943
the	O	O:0.999993
top	O	O:0.999969
three	O	O:0.999941
rows	O	O:0.996314
:	O	O:0.999969
#CODE	O	O:0.999941
	
At	O	O:0.999975
a	O	O:0.999989
high-level	O	O:0.990561
,	O	O:0.999989
this	O	O:0.999721
indicates	O	O:0.999955
that	O	O:0.999967
we	O	O:0.999997
would	O	O:0.999997
like	O	O:0.999984
to	O	O:0.999999
look	O	O:0.999990
at	O	O:0.999998
each	O	O:0.999862
country	O	O:0.998990
differently	O	O:0.999644
.	O	O:0.999623
	
Now	O	O:0.999922
our	O	O:0.999959
goal	O	O:0.998445
is	O	O:0.999995
to	O	O:0.999986
determine	O	O:0.999987
the	O	O:0.999990
top	O	O:0.998733
3	O	O:0.999917
metric	O	O:0.999912
counts	O	O:0.999796
and	O	O:0.999992
report	O	O:0.999705
the	O	O:0.999964
corresponding	O	O:0.996354
channel	O	O:0.998130
.	O	O:0.999842
	
To	O	O:0.999922
do	O	O:0.999992
this	O	O:0.999966
,	O	O:0.999991
we	O	O:0.999996
will	O	O:0.999956
apply	O	O:0.985147
a	O	O:0.999996
sort	O	O:0.988824
to	O	O:0.999997
the	O	O:0.999999
resulting	O	O:0.999490
data-frame	O	O:0.999993
and	O	O:0.999999
then	O	O:0.999987
only	O	O:0.999984
return	O	O:0.999864
the	O	O:0.999978
top	O	O:0.999895
3	O	O:0.999791
results	O	O:0.999686
.	O	O:0.999942
	
We	O	O:0.999966
can	O	O:0.999909
do	O	O:1.000000
this	O	O:0.999993
by	O	O:0.999995
defining	O	O:0.999960
a	O	O:0.999982
sort	O	O:0.979356
function	O	O:0.999992
that	O	O:0.999921
returns	O	O:0.999977
only	O	O:0.999961
the	O	O:0.999996
top	O	O:0.999901
3	O	O:0.999871
results	O	O:0.999856
and	O	O:0.999991
use	O	O:0.999983
the	O	O:0.999676
apply	O	B-API:0.966797
function	O	O:0.996104
in	O	O:0.999921
pandas	O	O:0.999690
.	O	O:0.999936
	
This	O	O:0.999697
indicates	O	O:0.999736
to	O	O:0.999996
panda	O	O:0.999997
that	O	O:0.999937
"	O	O:0.999995
I	O	O:0.999997
want	O	O:0.999977
to	O	O:0.999864
apply	O	O:0.994950
this	O	O:0.999892
sort	O	O:0.997088
function	O	O:0.999984
to	O	O:0.999998
each	O	O:0.999995
of	O	O:0.999992
our	O	O:0.999945
groups	O	O:0.999111
and	O	O:0.999986
return	O	O:0.999449
the	O	O:0.999913
top	O	O:0.999868
3	O	O:0.999916
results	O	O:0.999893
for	O	O:0.999995
each	O	O:0.999780
group	O	O:0.989167
"	O	O:0.999963
.	O	O:0.999479
	
you	O	O:0.999976
want	O	O:0.999986
to	O	O:0.999997
access	O	O:0.999963
the	O	O:0.999983
index	O	O:0.999885
inside	O	O:0.999917
the	O	O:0.999988
`	O	O:0.999973
apply	O	B-API:0.980279
`	O	O:0.999794
function	O	O:0.997859
,	O	O:0.999992
and	O	O:0.999992
I	O	O:0.999983
don't	O	O:0.999948
think	O	O:0.999825
you	O	O:0.999961
can	O	O:0.999917
	
and	O	O:0.999996
then	O	O:0.999685
use	O	O:0.999991
the	O	O:0.999956
apply	O	B-API:0.972780
function	O	O:0.997427
,	O	O:0.999911
#CODE	O	O:0.999799
	
You	O	O:0.999938
need	O	O:0.999850
`	O	O:0.999977
apply	O	B-API:0.976917
(	O	O:0.999961
your_func	O	O:0.988277
,	O	O:0.999982
axis=1	O	O:0.999897
)`	O	O:0.999862
to	O	O:0.999992
work	O	O:0.999998
on	O	O:1.000000
a	O	O:0.999997
row-by-row	O	O:0.998930
basis	O	O:0.999703
.	O	O:0.999821
	
#CODE	O	O:0.998453
	
This	O	O:0.999782
could	O	O:0.999942
be	O	O:1.000000
done	O	O:0.999970
in	O	O:0.999966
2	O	O:0.999976
steps	O	O:0.999928
,	O	O:0.999999
generate	O	O:0.999979
a	O	O:0.999996
new	O	O:0.999944
column	O	O:0.999977
that	O	O:0.999923
creates	O	O:0.999883
the	O	O:0.999993
expanded	O	O:0.999677
str	O	O:0.999682
values	O	O:0.999811
,	O	O:0.999998
then	O	O:0.999876
`	O	O:0.999998
groupby	B-API	B-API:0.994697
`	O	O:0.999995
on	O	O:0.999244
'	O	O:0.999975
A	O	O:0.999957
'	O	O:0.999916
and	O	O:0.999976
`	O	O:0.999989
apply	O	B-API:0.993582
`	O	O:0.999644
`	O	O:0.999798
list	O	O:0.944869
`	O	O:0.999993
to	O	O:0.999991
this	O	O:0.999999
new	O	O:0.999926
column	O	O:0.998991
:	O	O:0.999976
#CODE	O	O:0.999844
	
@USER	O	O:0.999458
sorry	O	O:0.999851
what	O	O:0.999921
do	O	O:0.999951
you	O	O:0.999997
mean	O	O:0.999932
,	O	O:0.999999
do	O	O:0.999986
you	O	O:0.999995
mean	O	O:0.999948
the	O	O:0.999998
fact	O	O:0.999763
I	O	O:0.999996
added	O	O:0.999958
an	O	O:0.999942
intermediate	O	O:0.999845
column	O	O:0.999570
?	O	O:0.999952
	
The	O	O:0.999948
intermediate	O	O:0.999817
step	O	O:0.999682
is	O	O:0.999997
necessary	O	O:0.999980
as	O	O:0.999993
I	O	O:0.999963
can't	O	O:0.999958
figure	O	O:0.999541
out	O	O:0.999983
how	O	O:0.999991
to	O	O:0.999990
get	O	O:0.999999
the	O	O:0.999990
`	O	O:0.999988
apply	O	B-API:0.985347
`	O	O:0.999914
and	O	O:0.998804
`	O	O:0.999995
lambda	O	O:0.973013
`	O	O:0.999966
to	O	O:0.999811
not	O	O:1.000000
try	O	O:0.999993
to	O	O:0.999992
expand	O	O:0.999967
the	O	O:0.999980
list	O	O:0.997137
and	O	O:0.999988
remain	O	O:0.999477
1-dimensional	O	O:0.996102
	
Another	O	O:0.999588
way	O	O:0.999893
to	O	O:0.999966
do	O	O:0.999995
it	O	O:0.999974
.	O	O:0.999899
	
First	O	O:0.999650
reshape	O	O:0.612273
the	O	O:0.999946
`	O	O:0.999984
df	O	O:0.997827
`	O	O:0.999999
using	O	O:0.997481
`	O	O:0.999914
pivot_table	B-API	B-API:0.999923
`	O	O:0.999962
and	O	O:0.999987
then	O	O:0.999926
`	O	O:0.999996
apply	O	B-API:0.950695
`	O	O:0.999940
`	O	O:0.999503
np.repeat()	B-API	B-API:0.994503
.tolist()	B-API	B-API:0.996075
`	O	O:0.999923
.	O	O:0.999444
	
#CODE	O	O:0.998453
	
You	O	O:0.999855
can	O	O:0.999927
`	O	O:0.999999
apply	O	B-API:0.925170
`	O	O:0.999943
`	O	O:0.999827
round	O	O:0.907919
`	O	O:0.999857
:	O	O:0.999705
#CODE	O	O:0.999908
	
If	O	O:0.999957
you	O	O:0.999987
want	O	O:0.999984
to	O	O:0.999997
apply	O	O:0.990256
to	O	O:0.999992
a	O	O:1.000000
specific	O	O:0.999862
number	O	O:0.999963
of	O	O:0.999968
places	O	O:0.998883
:	O	O:0.999988
#CODE	O	O:0.999894
	
You	O	O:0.999880
can	O	O:0.999853
`	O	O:0.999998
groupby	B-API	B-API:0.995857
`	O	O:0.999994
on	O	O:0.996997
'	O	O:0.999988
Symbol	O	O:0.995804
'	O	O:0.999937
and	O	O:0.999997
then	O	O:0.999906
call	O	O:0.999404
`	O	O:0.999996
apply	O	B-API:0.997458
`	O	O:0.999982
passing	O	O:0.994532
a	O	O:0.999977
lambda	O	O:0.997127
and	O	O:0.999973
use	O	O:0.999828
`	O	O:0.999748
shift	O	B-API:0.998461
`	O	O:0.999799
:	O	O:0.999801
#CODE	O	O:0.999909
	
To	O	O:0.999962
calculate	O	O:0.999707
the	O	O:0.999997
new	O	O:0.999351
'	O	O:0.999953
Skew	O	O:0.998354
'	O	O:0.999990
column	O	O:0.999892
,	O	O:0.999998
you	O	O:0.999989
can	O	O:0.999992
do	O	O:1.000000
a	O	O:0.999996
`	O	O:0.999825
groupby	B-API	B-API:0.999488
`	O	O:0.999973
and	O	O:0.999920
define	O	O:0.999962
your	O	O:0.999467
customized	O	O:0.998517
`	O	O:0.999991
apply	O	B-API:0.980651
`	O	O:0.999581
function	O	O:0.996917
.	O	O:0.999923
	
To	O	O:0.999966
calculate	O	O:0.998689
pct_change	B-API	B-API:0.918054
,	O	O:0.999997
you	O	O:0.999988
can	O	O:0.999976
use	O	O:0.999999
the	O	O:0.999969
`	O	O:0.999929
.shift()	B-API	B-API:0.999908
`	O	O:0.999964
operator	O	O:0.999010
.	O	O:0.999907
	
#CODE	O	O:0.998453
	
I	O	O:0.999972
am	O	O:0.999998
using	O	O:0.999457
scikit	O	O:0.996364
learning's	O	O:0.993654
StandardScaler()	O	O:0.980070
and	O	O:0.999976
notice	O	O:0.999976
that	O	O:0.999682
after	O	O:0.999985
I	O	O:0.999994
apply	O	O:0.929488
a	O	O:0.999417
transform	O	B-API:0.995404
(	O	O:0.999960
xtrain	O	O:0.998871
)	O	O:0.999994
or	O	O:0.999886
fit_transform	O	O:0.568664
(	O	O:0.999978
xtrain	O	O:0.996123
)	O	O:0.999981
,	O	O:0.999985
it	O	O:0.999999
also	O	O:0.999985
changes	O	O:0.999974
my	O	O:0.999891
xtrain	O	O:0.998722
dataframe	B-API	O:0.996417
.	O	O:0.999820
	
Is	O	O:0.999990
this	O	O:0.999955
supposed	O	O:0.999971
to	O	O:0.999981
happen	O	O:0.999958
?	O	O:0.999984
	
How	O	O:0.999928
can	O	O:0.999955
I	O	O:1.000000
avoid	O	O:0.999976
the	O	O:0.999806
StandardScaler	O	O:0.987697
from	O	O:0.999899
changing	O	O:0.999520
my	O	O:0.999962
dataframe	B-API	O:0.990749
?	O	O:0.999958
	
(	O	O:0.999950
I	O	O:0.999995
have	O	O:0.999978
tried	O	O:0.999762
using	O	O:0.999950
copy=False	O	O:0.954019
)	O	O:0.999821
#CODE	O	O:0.997913
	
How	O	O:0.999894
to	O	O:0.999982
apply	O	O:0.981469
line	O	O:0.999684
attribute	O	O:0.999931
at	O	O:0.999996
each	O	O:0.999571
group	O	O:0.997562
?	O	O:0.999956
	
`	O	O:0.999917
1	O	O:0.999657
/	O	O:0.999984
2	O	O:0.999800
ID	O	O:0.999566
`	O	O:0.999908
is	O	O:0.999943
the	O	O:0.999985
column	O	O:0.999772
head	O	O:0.999960
that	O	O:0.999987
need	O	O:0.999994
to	O	O:0.999996
apply	O	O:0.980602
UPPERCASE	O	O:0.988257
.	O	O:0.999461
	
How	O	O:0.999873
can	O	O:0.999942
I	O	O:1.000000
apply	O	O:0.980682
upper	O	O:0.998932
case	O	O:0.999529
to	O	O:0.999994
the	O	O:0.999999
first	O	O:0.999973
three	O	O:0.999966
letters	O	O:0.998810
in	O	O:0.999993
the	O	O:0.999999
column	O	O:0.999954
of	O	O:0.999985
the	O	O:0.999982
DataFrame	B-API	O:0.998513
`	O	O:0.999991
df	O	O:0.997489
`	O	O:0.999991
?	O	O:0.999698
	
@USER	O	O:0.999454
It's	O	O:0.999931
due	O	O:0.999930
to	O	O:0.999995
the	O	O:0.999999
current	O	O:0.999813
implementation	O	O:0.999912
of	O	O:0.999996
pandas	O	O:0.999027
`	O	O:0.999994
groupby	B-API	B-API:0.999758
`	O	O:0.999964
.	O	O:0.998240
	
See	O	O:0.999885
this	O	O:0.999502
Warning	O	O:0.999288
Message	O	O:0.998979
:	O	O:0.999850
`	O	O:0.999990
Warning	O	O:0.999101
In	O	O:0.999992
the	O	O:0.999986
current	O	O:0.999419
implementation	O	O:0.999865
apply	O	O:0.629476
calls	O	O:0.999463
func	O	O:0.999263
twice	O	O:0.999634
on	O	O:0.999995
the	O	O:0.999994
first	O	O:0.999958
group	O	O:0.998965
to	O	O:0.999990
decide	O	O:0.999977
whether	O	O:0.999912
it	O	O:0.999980
can	O	O:0.999997
take	O	O:0.999999
a	O	O:1.000000
fast	O	O:0.999271
or	O	O:0.999995
slow	O	O:0.999480
code	O	O:0.999846
path	O	O:0.999747
.	O	O:0.999900
	
This	O	O:0.999683
can	O	O:0.999973
lead	O	O:0.999960
to	O	O:0.999997
unexpected	O	O:0.999976
behavior	O	O:0.999837
if	O	O:0.999941
func	O	O:0.989533
has	O	O:0.999931
side-effects	O	O:0.999808
,	O	O:0.999991
as	O	O:0.999998
they	O	O:0.999853
will	O	O:0.999994
take	O	O:0.999991
effect	O	O:0.999999
twice	O	O:0.999982
for	O	O:0.999995
the	O	O:0.999973
first	O	O:0.999235
group	O	O:0.995362
.	O	O:0.999854
	
`	O	O:0.999979
from	O	O:0.998143
#URL	O	O:0.999635
	
`	O	O:0.999960
df	O	O:0.996947
[	O	O:0.999992
i	O	O:0.999824
]`	O	O:0.999977
gets	O	O:0.999594
each	O	O:0.999840
column	O	O:0.999727
.	O	O:0.999942
	
`	O	O:0.999888
apply	O	B-API:0.994843
(	O	O:0.999923
Series	O	O:0.999048
)`	O	O:0.999847
applys	O	O:0.996417
`	O	O:0.999971
Series	O	O:0.986883
`	O	O:0.999989
function	O	O:0.999798
to	O	O:0.999997
the	O	O:1.000000
column	O	O:0.999898
,	O	O:0.999993
which	O	O:0.999977
creates	O	O:0.997130
`	O	O:0.999996
Series	O	O:0.997676
`	O	O:0.999998
from	O	O:0.999873
the	O	O:0.999993
inner	O	O:0.998394
`	O	O:0.999955
dict	O	O:0.982654
`	O	O:0.999990
.	O	O:0.999566
	
`	O	O:0.999971
join	O	B-API:0.987139
`	O	O:0.999992
append	O	B-API:0.672766
created	O	O:0.996498
`	O	O:0.999983
Series	O	O:0.995309
`	O	O:0.999996
to	O	O:0.999981
the	O	O:1.000000
end	O	O:0.999934
of	O	O:0.999990
column	O	O:0.999774
,	O	O:0.999996
and	O	O:0.999993
`	O	O:0.999995
drop	O	B-API:0.589557
`	O	O:0.999995
deletes	O	O:0.997474
the	O	O:0.999995
original	O	O:0.999366
column	O	O:0.999737
.	O	O:0.999929
	
Python	O	O:0.999701
apply	O	O:0.839729
a	O	O:0.999959
func	O	O:0.956567
to	O	O:0.999993
two	O	O:1.000000
lists	O	O:0.999918
of	O	O:0.999995
lists	O	O:0.999645
,	O	O:0.999998
store	O	O:0.999893
the	O	O:0.999985
result	O	O:0.999923
in	O	O:0.999994
a	O	O:0.999983
Dataframe	B-API	O:0.942374
	
I	O	O:0.999925
am	O	O:0.999997
trying	O	O:0.999658
to	O	O:0.999995
do	O	O:0.999999
a	O	O:0.999996
dataframe	B-API	O:0.993587
transformation	O	O:0.999989
that	O	O:0.999949
I	O	O:0.999997
cannot	O	O:0.999981
solve	O	O:0.997725
.	O	O:0.999908
	
I	O	O:0.999983
have	O	O:0.999925
tried	O	O:0.999947
multiple	O	O:0.999957
approaches	O	O:0.999903
from	O	O:0.999831
stackoverflow	O	O:0.998300
and	O	O:0.999987
the	O	O:0.999988
pandas	O	O:0.991206
documentation	O	O:0.999682
:	O	O:0.999982
apply	O	O:0.824598
,	O	O:0.999942
apply	O	B-API:0.984682
(	O	O:0.999514
lambda	O	O:0.987192
:	O	O:0.999986
...	O	O:0.999824
)	O	O:0.999993
,	O	O:0.999993
pivots	O	O:0.999383
,	O	O:0.999981
and	O	O:0.999997
joins	O	O:0.997525
.	O	O:0.999578
	
Too	O	O:0.999810
many	O	O:0.999867
attempts	O	O:0.999297
to	O	O:0.999984
list	O	O:0.999897
here	O	O:0.999394
,	O	O:0.999949
but	O	O:0.999976
not	O	O:0.999991
sure	O	O:0.999967
which	O	O:0.999972
approach	O	O:0.999615
is	O	O:0.999980
the	O	O:0.999986
best	O	O:0.999472
or	O	O:0.999995
if	O	O:0.999997
maybe	O	O:0.999982
I	O	O:0.999992
tried	O	O:0.999970
the	O	O:0.999972
right	O	O:0.999674
approach	O	O:0.999945
with	O	O:0.999940
the	O	O:0.999964
wrong	O	O:0.998529
syntax	O	O:0.999642
.	O	O:0.999909
	
I	O	O:0.999979
came	O	O:0.999968
pretty	O	O:0.999781
close	O	O:0.999824
with	O	O:0.999977
the	O	O:0.999944
melt()	B-API	B-API:0.997964
function	O	O:0.999713
,	O	O:0.999992
and	O	O:0.999999
then	O	O:0.999889
taking	O	O:0.999941
the	O	O:0.999969
former	O	O:0.999910
column	O	O:0.999858
numbers	O	O:0.999319
and	O	O:0.999993
added	O	O:0.999951
the	O	O:0.999854
offset	O	O:0.999482
to	O	O:0.999996
them	O	O:0.999981
.	O	O:0.999958
	
However	O	O:0.999396
,	O	O:0.999977
I've	O	O:0.999849
had	O	O:0.999962
a	O	O:0.999996
lot	O	O:0.999895
of	O	O:0.999976
problems	O	O:0.999766
trying	O	O:0.999963
to	O	O:0.999987
reform	O	O:0.999879
the	O	O:0.999988
dataframe	B-API	O:0.999318
using	O	O:0.999801
pivot	B-API	B-API:0.880812
.	O	O:0.999405
	
No	O	O:0.999972
luck	O	O:0.999597
with	O	O:0.999963
apply	O	O:0.520913
or	O	O:0.999917
apply	O	B-API:0.977357
(	O	O:0.999958
lambda	O	O:0.998211
)	O	O:0.999897
!	O	O:0.999388
	
You	O	O:0.999931
can	O	O:0.999937
use	O	O:0.999986
`	O	O:0.999954
groupby	B-API	B-API:0.999256
`	O	O:0.999994
on	O	O:0.999873
column	O	O:0.999920
'	O	O:0.999994
ts	O	O:0.999748
'	O	O:0.999967
,	O	O:0.999977
and	O	O:0.999998
then	O	O:0.999813
`	O	O:0.999998
apply	O	B-API:0.892180
`	O	O:0.999985
using	O	O:0.995863
`	O	O:0.999918
.any()	B-API	B-API:0.999926
`	O	O:0.999992
to	O	O:0.999981
determine	O	O:0.999991
whether	O	O:0.999978
any	O	O:0.999979
of	O	O:0.999924
`	O	O:0.999944
val	O	O:0.994915
`	O	O:0.999981
is	O	O:0.997615
`	O	O:0.999990
True	O	O:0.998413
`	O	O:0.999986
in	O	O:0.999976
the	O	O:0.999990
cluster	O	O:0.995118
/	O	O:0.999975
group	O	O:0.995719
.	O	O:0.999895
	
#CODE	O	O:0.998453
	
@USER	O	O:0.997509
Yes	O	O:0.999372
.	O	O:0.999782
	
We	O	O:0.999941
can	O	O:0.999987
just	O	O:0.999999
first	O	O:0.999992
divide	O	O:0.999140
the	O	O:0.999992
full	O	O:0.999650
dataset	O	O:0.999984
using	O	O:0.999698
`	O	O:0.999883
groupby	B-API	B-API:0.999895
`	O	O:0.999958
,	O	O:0.999721
and	O	O:1.000000
then	O	O:0.999850
apply	O	O:0.896879
the	O	O:0.999963
above	O	O:0.998391
procedure	O	O:0.999962
within	O	O:0.999903
each	O	O:0.999898
group	O	O:0.996543
.	O	O:0.999912
	
I've	O	O:0.999255
updated	O	O:0.999667
the	O	O:0.999938
code	O	O:0.998267
.	O	O:0.999909
	
The	O	O:0.999835
`	O	O:0.999978
NaN	O	O:0.992682
`	O	O:0.999995
at	O	O:0.999946
the	O	O:0.999992
bottom	O	O:0.995859
is	O	O:0.999958
because	O	O:0.999793
the	O	O:0.999984
2nd	O	O:0.999948
group	O	O:0.999653
just	O	O:0.999943
29	O	O:0.999998
rows	O	O:0.999013
whereas	O	O:0.999872
1st	O	O:0.999943
group	O	O:0.998688
has	O	O:0.999968
71	O	O:0.999976
rows	O	O:0.998593
.	O	O:0.999851
	
This	O	O:0.999310
is	O	O:0.999994
a	O	O:0.999993
general	O	O:0.998497
question	O	O:0.999851
about	O	O:0.999819
how	O	O:0.999953
to	O	O:0.999991
apply	O	O:0.996497
a	O	O:0.999901
function	O	O:0.999663
efficiently	O	O:0.999390
in	O	O:0.999981
pandas	O	O:0.999225
.	O	O:0.999942
	
I	O	O:0.999974
often	O	O:0.999766
encounter	O	O:0.999834
situations	O	O:0.999941
where	O	O:0.999941
I	O	O:0.999998
need	O	O:0.999993
to	O	O:0.999986
apply	O	O:0.996544
a	O	O:0.999865
function	O	O:0.999551
to	O	O:0.999998
a	O	O:1.000000
`	O	O:0.999860
pd.Series	B-API	B-API:0.998972
`	O	O:0.999965
and	O	O:0.999927
it	O	O:0.999988
would	O	O:0.999914
be	O	O:0.999997
faster	O	O:0.999974
to	O	O:0.999973
apply	O	O:0.946068
the	O	O:0.999504
function	O	O:0.999924
only	O	O:0.999935
to	O	O:0.999999
unique	O	O:0.993999
values	O	O:0.998851
.	O	O:0.999839
	
But	O	O:0.999828
for	O	O:0.999996
large	O	O:0.999926
data	O	O:0.999888
sets	O	O:0.999641
,	O	O:1.000000
this	O	O:0.999976
can	O	O:0.999996
take	O	O:0.999999
a	O	O:0.999998
while	O	O:0.999569
.	O	O:0.999883
	
So	O	O:0.999950
to	O	O:0.999986
speed	O	O:0.999990
it	O	O:0.999989
up	O	O:0.999944
,	O	O:0.999998
I'll	O	O:0.999821
extract	O	O:0.998837
the	O	O:0.999996
unique	O	O:0.969305
values	O	O:0.999803
of	O	O:0.999990
`	O	O:0.999996
date	O	O:0.994311
`	O	O:0.999997
,	O	O:0.999971
apply	O	O:0.801429
the	O	O:0.999378
function	O	O:0.999298
to	O	O:0.999992
those	O	O:0.999996
,	O	O:0.999989
and	O	O:0.999999
then	O	O:0.999922
merge	O	O:0.949536
it	O	O:0.999998
back	O	O:0.999708
in	O	O:0.999994
to	O	O:0.999994
the	O	O:1.000000
original	O	O:0.999811
data	O	O:0.999553
:	O	O:0.999978
#CODE	O	O:0.999932
	
And	O	O:0.999824
,	O	O:0.999966
would	O	O:0.999937
it	O	O:0.999999
make	O	O:0.999961
sense	O	O:0.999887
and	O	O:0.999992
be	O	O:0.999995
feasible	O	O:0.999772
to	O	O:0.999979
add	O	O:0.999997
a	O	O:0.999994
feature	O	O:0.999429
to	O	O:0.999992
pandas	O	O:0.999997
that	O	O:0.999936
would	O	O:0.999994
take	O	O:0.999996
this	O	O:0.999994
unique	O	O:0.907887
/	O	O:0.999971
apply	O	B-API:0.654322
/	O	O:0.999924
merge	O	B-API:0.550072
approach	O	O:0.999834
automatically	O	O:0.999374
?	O	O:0.999889
	
(	O	O:0.999766
It	O	O:0.999953
wouldn't	O	O:0.999965
work	O	O:0.999924
for	O	O:0.999999
certain	O	O:0.998986
functions	O	O:0.999905
,	O	O:0.999998
such	O	O:0.999962
as	O	O:0.999996
those	O	O:0.999871
that	O	O:0.999984
rely	O	O:0.999919
on	O	O:0.999998
rolling	O	O:0.997545
data	O	O:0.999955
,	O	O:0.999997
so	O	O:0.999997
presumably	O	O:0.999963
the	O	O:0.999997
user	O	O:0.998135
would	O	O:0.999963
have	O	O:0.999993
to	O	O:1.000000
explicitly	O	O:0.999984
request	O	O:0.999985
this	O	O:0.999773
behavior	O	O:0.999932
.	O	O:0.999926
)	O	O:0.999858
	
@USER	O	O:0.998842
Doesn't	O	O:0.999852
the	O	O:0.999974
`	O	O:0.999980
apply	O	B-API:0.976174
`	O	O:0.999991
need	O	O:0.999487
to	O	O:0.999998
be	O	O:0.999999
`	O	O:0.999995
transform	O	B-API:0.961879
`	O	O:0.999996
if	O	O:0.999944
you	O	O:0.999988
are	O	O:0.999997
going	O	O:0.999910
to	O	O:0.999995
be	O	O:1.000000
back	O	O:0.999803
to	O	O:0.999998
your	O	O:0.999996
full	O	O:0.999883
size	O	O:0.999987
data	O	O:0.999496
and	O	O:0.999996
not	O	O:0.999997
a	O	O:0.999993
collapsed	O	O:0.997828
version	O	O:0.999719
?	O	O:0.999923
	
I.e.	O	O:0.996265
	
don't	O	O:0.999674
you	O	O:0.999991
still	O	O:0.999989
need	O	O:0.999993
to	O	O:0.999998
merge	O	O:0.993904
here	O	O:0.999317
?	O	O:0.999969
	
Also	O	O:0.999799
,	O	O:0.999999
when	O	O:0.999851
I	O	O:0.999996
time	O	O:0.999999
this	O	O:0.999651
,	O	O:0.999994
it's	O	O:0.999946
actually	O	O:0.999933
slower	O	O:0.999952
than	O	O:0.999944
either	O	O:0.999971
of	O	O:0.999994
the	O	O:0.999990
original	O	O:0.999731
methods	O	O:0.999744
and	O	O:0.999989
I	O	O:0.999991
thought	O	O:0.999560
the	O	O:0.999969
point	O	O:0.999440
of	O	O:0.999998
this	O	O:0.999978
whole	O	O:0.999963
thing	O	O:0.999754
was	O	O:0.999852
speed	O	O:0.998975
?	O	O:0.999951
	
(	O	O:0.999905
Perhaps	O	O:0.999942
my	O	O:0.999961
timing	O	O:0.999792
was	O	O:0.999934
off	O	O:0.999958
though	O	O:0.999934
,	O	O:0.999998
you	O	O:0.999980
can	O	O:0.999995
check	O	O:0.999997
yourself	O	O:0.999996
,	O	O:0.999998
of	O	O:0.999999
course	O	O:0.999734
)	O	O:0.999998
But	O	O:0.999958
to	O	O:0.999997
be	O	O:0.999999
clear	O	O:0.999913
,	O	O:0.999995
I	O	O:0.999994
do	O	O:0.999986
think	O	O:0.999747
the	O	O:0.999959
`	O	O:0.999946
groupby	B-API	B-API:0.999176
`	O	O:0.999995
with	O	O:0.997044
`	O	O:0.999994
transform	O	B-API:0.917777
`	O	O:0.999950
is	O	O:0.999969
probably	O	O:0.999763
the	O	O:0.999996
most	O	O:0.998940
clear	O	O:0.998765
and	O	O:0.999996
readable	O	O:0.999501
approach	O	O:0.999178
.	O	O:0.999734
	
It's	O	O:0.999686
just	O	O:0.999807
not	O	O:0.999998
any	O	O:0.999999
sort	O	O:0.999589
of	O	O:0.999989
speed	O	O:0.998610
improvement	O	O:0.999987
that	O	O:0.999910
I	O	O:0.999997
can	O	O:0.999984
see	O	O:0.999968
.	O	O:0.999963
	
How	O	O:0.999898
to	O	O:0.999991
apply	O	O:0.992804
a	O	O:0.999888
function	O	O:0.999571
on	O	O:0.999995
a	O	O:0.999987
Series	O	O:0.998795
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999984
a	O	O:0.999999
apply	O	O:0.555787
a	O	O:0.999864
function	O	O:0.999466
to	O	O:0.999983
rename	O	O:0.999983
the	O	O:0.999979
values	O	O:0.998667
.	O	O:0.999873
	
#CODE	O	O:0.998453
	
Your	O	O:0.999619
error	O	O:0.999354
occurred	O	O:0.999837
because	O	O:0.999847
you	O	O:0.999978
called	O	O:0.999985
apply	O	O:0.942545
on	O	O:0.999975
a	O	O:0.999997
single	O	O:0.999894
column	O	O:0.999892
df	O	O:0.999054
:	O	O:0.999960
#CODE	O	O:0.999728
	
So	O	O:0.999989
this	O	O:0.999736
is	O	O:0.999998
different	O	O:0.999873
to	O	O:0.999993
a	O	O:0.999999
Series	O	O:0.999482
where	O	O:0.999905
`	O	O:0.999994
apply	O	B-API:0.944266
`	O	O:0.999988
iterates	O	O:0.996400
over	O	O:0.999971
each	O	O:0.999814
value	O	O:0.999943
which	O	O:0.999931
can	O	O:0.999975
be	O	O:0.999998
hashed	O	O:0.999767
but	O	O:0.999944
here	O	O:0.999528
it's	O	O:0.999926
passing	O	O:0.999758
the	O	O:0.999975
entire	O	O:0.997934
`	O	O:0.999981
Series	O	O:0.995960
`	O	O:0.999991
which	O	O:0.999719
cannot	O	O:0.999962
be	O	O:0.999995
hashed	O	O:0.999758
,	O	O:0.999979
it	O	O:0.999963
would	O	O:0.999981
work	O	O:0.999990
if	O	O:0.999999
you	O	O:0.999950
did	O	O:0.999967
this	O	O:0.999757
:	O	O:0.999986
#CODE	O	O:0.999880
	
We	O	O:0.999953
can	O	O:0.999959
generated	O	O:0.999986
the	O	O:0.999985
edge	O	O:0.999868
list	O	O:0.999742
using	O	O:0.999859
`	O	O:0.999808
groupby	B-API	B-API:0.999267
/	O	O:0.999972
apply	O	B-API:0.971586
`	O	O:0.999109
and	O	O:0.999344
	
Basically	O	O:0.999874
,	O	O:0.999990
I	O	O:0.999998
want	O	O:0.999982
to	O	O:0.999952
apply	O	O:0.984147
the	O	O:0.999949
same	O	O:0.999772
transformation	O	O:0.999962
to	O	O:0.999999
a	O	O:1.000000
huge	O	O:0.999906
data	O	O:0.999949
set	O	O:0.999843
I'm	O	O:0.999993
working	O	O:0.999849
on	O	O:0.999979
now	O	O:0.999815
,	O	O:0.999991
but	O	O:0.999942
I'm	O	O:0.999980
getting	O	O:0.999897
an	O	O:0.999980
error	O	O:0.999583
message	O	O:0.995847
:	O	O:0.999929
#CODE	O	O:0.999758
	
Why	O	O:0.999958
do	O	O:0.999963
I	O	O:0.999997
get	O	O:0.999970
an	O	O:0.999714
object	O	O:0.999972
type	O	O:0.999831
when	O	O:0.999926
apply	O	O:0.974667
group	O	O:0.999638
by	O	O:0.999911
with	O	O:0.999871
size	O	O:0.999821
instead	O	O:0.999993
of	O	O:0.999998
an	O	O:0.999960
integer	O	O:0.999814
type	O	O:0.997564
?	O	O:0.999928
	
Since	O	O:0.999854
you	O	O:0.999989
want	O	O:0.999991
to	O	O:0.999997
retrieve	O	O:0.999949
`	O	O:0.999994
category	O	O:0.985842
`	O	O:0.999999
column	O	O:0.999585
as	O	O:0.999999
well	O	O:0.999829
,	O	O:0.999999
a	O	O:0.999995
standard	O	O:0.995301
`	O	O:0.999983
.agg	B-API	B-API:0.994062
`	O	O:0.999993
on	O	O:0.999939
column	O	O:0.999916
`	O	O:0.999996
val	O	O:0.988944
`	O	O:0.999988
won't	O	O:0.999758
give	O	O:0.999930
you	O	O:0.999995
what	O	O:0.999963
you	O	O:0.999994
want	O	O:0.999950
.	O	O:0.999941
	
(	O	O:0.999977
also	O	O:0.999884
,	O	O:0.999999
since	O	O:0.999949
there	O	O:0.999904
are	O	O:0.999999
two	O	O:0.999995
values	O	O:0.999391
in	O	O:0.999978
author3	O	O:0.999852
are	O	O:0.999980
7	O	O:0.999906
,	O	O:0.999995
the	O	O:0.999991
approach	O	O:0.999926
by	O	O:0.999948
@USER	O	O:0.999874
Cunningham	O	O:0.999807
using	O	O:0.999866
`	O	O:0.999851
.max()	B-API	B-API:0.999921
`	O	O:0.999988
will	O	O:0.999736
only	O	O:0.999993
return	O	O:0.999768
one	O	O:0.999942
instance	O	O:0.999950
instead	O	O:0.999967
of	O	O:0.999997
both	O	O:0.999812
)	O	O:0.999996
You	O	O:0.999931
can	O	O:0.999988
define	O	O:0.999982
a	O	O:0.999996
customized	O	O:0.996914
`	O	O:0.999990
apply	O	B-API:0.975827
`	O	O:0.999875
function	O	O:0.999069
to	O	O:0.999992
accomplish	O	O:0.999997
your	O	O:0.999844
task	O	O:0.998769
.	O	O:0.999966
	
#CODE	O	O:0.998453
	
python	O	O:0.998815
dask	O	O:0.999664
DataFrame	B-API	O:0.993552
,	O	O:0.999989
support	O	O:0.998202
for	O	O:0.999628
(	O	O:0.999972
trivially	O	O:0.999966
parallelizable	O	O:0.999847
)	O	O:0.999986
row	O	O:0.999892
apply	O	O:0.502453
?	O	O:0.999648
	
Edit	O	O:0.994639
:	O	O:0.999948
Thanks	O	O:0.999905
@USER	O	O:0.999824
for	O	O:0.999984
the	O	O:0.999837
map	O	B-API:0.994893
function	O	O:0.999687
.	O	O:0.999866
	
It	O	O:0.999960
seems	O	O:0.999940
to	O	O:0.999997
be	O	O:0.999999
slower	O	O:0.999840
than	O	O:0.999613
plain	O	O:0.999863
pandas	O	O:0.999797
apply	O	O:0.512782
.	O	O:0.998545
	
Is	O	O:0.999992
this	O	O:0.999935
related	O	O:0.999766
to	O	O:0.999992
pandas	O	O:0.999973
GIL	O	O:0.999991
releasing	O	O:0.999817
issue	O	O:0.999746
or	O	O:0.999991
am	O	O:0.999969
I	O	O:0.999997
doing	O	O:0.999964
it	O	O:0.999848
wrong	O	O:0.998933
?	O	O:0.999944
	
#CODE	O	O:0.998453
	
You	O	O:0.999908
can	O	O:0.999966
apply	O	O:0.997184
your	O	O:0.999260
function	O	O:0.999832
to	O	O:0.999999
all	O	O:0.999999
of	O	O:0.999997
the	O	O:0.999995
partitions	O	O:0.999944
of	O	O:0.999998
your	O	O:0.999981
dataframe	B-API	O:0.999393
with	O	O:0.999977
the	O	O:0.999965
`	O	O:0.999988
map_partitions	O	O:0.959422
`	O	O:0.999961
function	O	O:0.999562
.	O	O:0.999931
	
#CODE	O	O:0.998453
	
Note	O	O:0.999913
that	O	O:0.999902
func	O	O:0.999649
will	O	O:0.999970
be	O	O:0.999997
given	O	O:0.999938
only	O	O:0.999986
part	O	O:0.999972
of	O	O:0.999997
the	O	O:0.999992
dataset	O	O:0.999976
at	O	O:0.999995
a	O	O:0.999998
time	O	O:0.999466
,	O	O:0.999992
not	O	O:0.999991
the	O	O:0.999999
entire	O	O:0.999882
dataset	O	O:0.999993
like	O	O:0.999908
with	O	O:0.999940
`	O	O:0.999995
pandas	O	O:0.999732
apply	O	O:0.558257
`	O	O:0.998489
(	O	O:0.999559
which	O	O:0.999993
presumably	O	O:0.999884
you	O	O:0.999965
wouldn't	O	O:0.999987
want	O	O:0.999983
if	O	O:0.999995
you	O	O:0.999998
want	O	O:0.999968
to	O	O:0.999991
do	O	O:0.999998
parallelism	O	O:0.999902
.	O	O:0.999928
)	O	O:0.999982
	
But	O	O:0.999889
avoid	O	O:0.999150
`	O	O:0.999985
apply	O	B-API:0.993120
`	O	O:0.999830
	
However	O	O:0.999807
,	O	O:0.999986
you	O	O:0.999977
should	O	O:0.999978
really	O	O:0.999981
avoid	O	O:0.999886
`	O	O:0.999988
apply	O	B-API:0.983788
`	O	O:0.999955
with	O	O:0.998798
custom	O	O:0.999826
Python	O	O:0.999776
functions	O	O:0.999645
,	O	O:0.999993
both	O	O:0.999716
in	O	O:0.999958
Pandas	O	O:0.999782
and	O	O:0.999970
in	O	O:0.999928
Dask	O	O:0.995864
.	O	O:0.999802
	
This	O	O:0.998875
is	O	O:0.999992
often	O	O:0.999720
a	O	O:0.999999
source	O	O:0.999179
of	O	O:0.999979
poor	O	O:0.998107
performance	O	O:0.999838
.	O	O:0.999758
	
It	O	O:0.999955
could	O	O:0.999932
be	O	O:1.000000
that	O	O:0.999991
if	O	O:0.999994
you	O	O:0.999997
find	O	O:0.999979
a	O	O:0.999999
way	O	O:0.999942
to	O	O:0.999990
do	O	O:1.000000
your	O	O:0.999966
operation	O	O:0.999717
in	O	O:0.999998
a	O	O:0.999995
vectorized	O	O:0.999582
manner	O	O:0.999880
then	O	O:0.999737
it	O	O:0.999999
could	O	O:0.999987
be	O	O:1.000000
that	O	O:0.999997
your	O	O:0.999946
Pandas	O	O:0.999941
code	O	O:0.999869
will	O	O:0.999742
be	O	O:0.999996
100x	O	O:0.999515
faster	O	O:0.997983
and	O	O:0.999977
you	O	O:0.999907
won't	O	O:0.999965
need	O	O:0.999983
dask.dataframe	O	O:0.998458
at	O	O:0.999990
all	O	O:0.999812
.	O	O:0.999868
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
I	O	O:0.999943
tried	O	O:0.999930
the	O	O:0.992457
map	O	B-API:0.989871
method	O	O:0.999452
and	O	O:0.999986
it	O	O:0.999996
seems	O	O:0.999883
to	O	O:0.999996
be	O	O:0.999999
slower	O	O:0.999764
than	O	O:0.999843
pandas	O	O:0.999765
apply	O	O:0.593368
.	O	O:0.998591
	
Could	O	O:0.999807
you	O	O:0.999973
comment	O	O:0.999952
on	O	O:0.999997
the	O	O:0.999998
edit	O	O:0.999867
of	O	O:0.999996
original	O	O:0.999815
post	O	O:0.999724
please	O	O:0.999559
?	O	O:0.999944
	
@USER	O	O:0.999637
Slightly	O	O:0.999623
off	O	O:0.999896
topic	O	O:0.999837
regarding	O	O:0.999916
pandas	O	O:0.999011
;	O	O:0.999983
i	O	O:0.999884
try	O	O:0.999996
to	O	O:0.999986
use	O	O:0.999996
map	O	B-API:0.722864
over	O	O:0.999487
apply	O	B-API:0.612306
because	O	O:0.999126
I've	O	O:0.999158
heard	O	O:0.999762
it's	O	O:0.999496
faster	O	O:0.998406
,	O	O:0.999960
but	O	O:0.999679
I'm	O	O:0.999946
not	O	O:0.999993
sure	O	O:0.999913
why	O	O:0.999972
it's	O	O:0.999556
faster	O	O:0.999442
.	O	O:0.999855
	
Any	O	O:0.999884
clarification	O	O:0.999748
or	O	O:0.999995
links	O	O:0.999847
to	O	O:0.999987
clarification	O	O:0.999976
would	O	O:0.999977
be	O	O:0.999997
greatly	O	O:0.999916
appreciated	O	O:0.998714
.	O	O:0.999563
	
Speeding	O	O:0.998126
up	O	O:0.999892
Pandas	O	O:0.999860
apply	O	B-API:0.870147
function	O	O:0.996954
	
For	O	O:0.999977
a	O	O:0.999984
relatively	O	O:0.998250
big	O	O:0.999474
Pandas	O	O:0.999002
DataFrame	B-API	O:0.918570
(	O	O:0.999994
a	O	O:0.999994
few	O	O:0.999840
100k	O	O:0.999950
rows	O	O:0.999368
)	O	O:0.999988
,	O	O:0.999996
I'd	O	O:0.999997
like	O	O:0.999978
to	O	O:0.999999
create	O	O:0.999996
a	O	O:0.999996
series	O	O:0.999968
that	O	O:0.999893
is	O	O:1.000000
a	O	O:0.999996
result	O	O:0.999923
of	O	O:0.999994
an	O	O:0.999970
apply	O	B-API:0.743406
function	O	O:0.998358
.	O	O:0.999378
	
The	O	O:0.999947
problem	O	O:0.998189
is	O	O:0.999993
that	O	O:0.999895
the	O	O:0.999979
function	O	O:0.998264
is	O	O:0.999946
not	O	O:0.999978
very	O	O:0.999924
fast	O	O:0.999426
and	O	O:0.999983
I	O	O:0.999918
was	O	O:0.999832
hoping	O	O:0.998753
that	O	O:0.999911
it	O	O:0.999996
can	O	O:0.999992
be	O	O:1.000000
sped	O	O:0.999975
up	O	O:0.999875
somehow	O	O:0.999624
.	O	O:0.999898
	
#CODE	O	O:0.998453
	
No	O	O:0.999787
,	O	O:0.999994
not	O	O:0.999935
for	O	O:0.999996
this	O	O:0.999969
particular	O	O:0.999790
problem	O	O:0.999476
.	O	O:0.999837
	
But	O	O:0.999932
I	O	O:0.999994
think	O	O:0.999951
the	O	O:0.999982
main	O	O:0.999435
problem	O	O:0.999371
is	O	O:0.999995
the	O	O:0.999990
number	O	O:0.999910
of	O	O:0.999973
calls	O	O:0.999850
to	O	O:0.999999
the	O	O:0.999990
apply	O	B-API:0.914025
function	O	O:0.999579
,	O	O:0.999992
so	O	O:0.999985
`	O	O:0.999990
cython	O	O:0.994891
`	O	O:0.999998
,	O	O:0.999713
`	O	O:0.999997
numba	O	O:0.991731
`	O	O:0.999993
,	O	O:0.999874
`	O	O:0.999996
numexpr	O	O:0.988535
`	O	O:0.999994
,	O	O:0.999960
etc	O	O:0.999952
.	O	O:0.999908
	
won't	O	O:0.999720
help	O	O:0.999859
much	O	O:0.999946
to	O	O:0.999982
alleviate	O	O:0.999992
this	O	O:0.999765
.	O	O:0.999948
	
The	O	O:0.999932
trick	O	O:0.997436
is	O	O:0.999991
not	O	O:0.999972
to	O	O:0.999994
use	O	O:0.999994
`	O	O:0.999934
apply	O	B-API:0.987338
`	O	O:0.999822
,	O	O:0.999725
but	O	O:0.999992
to	O	O:0.999987
do	O	O:0.999999
smart	O	O:0.999836
selections	O	O:0.998760
.	O	O:0.999875
	
#CODE	O	O:0.998453
	
We	O	O:0.999991
have	O	O:0.999956
to	O	O:0.999997
apply	O	O:0.981013
the	O	O:0.999879
`	O	O:0.999540
map	O	B-API:0.996470
(	O	O:0.999995
func	O	O:0.999535
)`	O	O:0.999889
to	O	O:0.999987
the	O	O:1.000000
series	O	O:0.999860
in	O	O:0.999980
the	O	O:0.999988
dataframe	B-API	O:0.980805
:	O	O:0.999946
#CODE	O	O:0.999899
	
DataFrame.applymap	B-API	B-API:0.999218
(	O	O:0.999915
func	O	O:0.960844
):	O	O:0.999979
Apply	O	O:0.999956
a	O	O:0.999958
function	O	O:0.999765
to	O	O:0.999993
a	O	O:0.999999
DataFrame	B-API	O:0.995895
that	O	O:0.999633
is	O	O:0.999998
intended	O	O:0.999812
to	O	O:0.999979
operate	O	O:0.999980
elementwise	O	O:0.999671
,	O	O:0.999991
i.e.	O	O:0.999957
like	O	O:0.999969
doing	O	O:0.999628
map	O	B-API:0.990161
(	O	O:0.999899
func	O	O:0.995954
,	O	O:0.999992
series	O	O:0.999939
)	O	O:0.999989
for	O	O:0.999995
each	O	O:0.999810
series	O	O:0.999781
in	O	O:0.999970
the	O	O:0.999979
DataFrame	B-API	O:0.987787
	
You	O	O:0.999893
can	O	O:0.999972
convert	O	O:0.999655
`	O	O:0.999998
datetime64	O	O:0.939698
`	O	O:0.999995
into	O	O:0.992720
whatever	O	O:0.999965
string	O	O:0.999442
format	O	O:0.999945
you	O	O:0.999996
like	O	O:0.999990
using	O	O:0.999992
the	O	O:0.999868
`	O	O:0.999860
strftime	B-API	B-API:0.999429
`	O	O:0.999948
method	O	O:0.999500
.	O	O:0.999937
	
In	O	O:0.999992
your	O	O:0.999957
case	O	O:0.999906
you	O	O:0.999985
would	O	O:0.999975
apply	O	O:0.941200
it	O	O:0.999988
like	O	O:0.999816
this	O	O:0.999600
:	O	O:0.999977
#CODE	O	O:0.999846
	
@USER	O	O:0.998779
Yes	O	O:0.999570
,	O	O:0.999970
it's	O	O:0.999867
possible	O	O:0.999443
.	O	O:0.999945
	
You	O	O:0.999969
just	O	O:0.999956
need	O	O:0.999983
to	O	O:0.999995
first	O	O:0.999994
groupby	B-API	B-API:0.984768
`	O	O:0.999944
Id	O	O:0.993998
`	O	O:0.999987
and	O	O:0.999993
then	O	O:0.999993
move	O	O:0.999903
all	O	O:0.999986
the	O	O:0.999986
processing	O	O:0.999675
into	O	O:0.999618
an	O	O:0.999994
apply	O	B-API:0.834264
function	O	O:0.998606
`	O	O:0.999857
my_func	O	O:0.614933
`	O	O:0.999973
.	O	O:0.999235
	
I've	O	O:0.999255
updated	O	O:0.999667
the	O	O:0.999938
code	O	O:0.998267
.	O	O:0.999909
	
Please	O	O:0.999849
have	O	O:0.999946
a	O	O:0.999991
look	O	O:0.997175
.	O	O:0.999909
	
The	O	O:0.999660
`	O	O:0.999943
groupby	B-API	B-API:0.994039
/	O	O:0.999985
apply	O	B-API:0.856686
`	O	O:0.999904
above	O	O:0.998846
returns	O	O:0.999971
a	O	O:0.999955
`	O	O:0.999855
pd.Series	B-API	B-API:0.998818
`	O	O:0.999973
.	O	O:0.999170
	
To	O	O:0.999958
make	O	O:0.999972
this	O	O:0.999971
a	O	O:0.999996
DataFrame	B-API	O:0.991815
,	O	O:0.999997
we	O	O:0.999995
can	O	O:0.999987
make	O	O:0.999981
the	O	O:0.999998
index	O	O:0.999989
level	O	O:0.999889
values	O	O:0.999970
into	O	O:0.999943
columns	O	O:0.999987
by	O	O:0.999981
calling	O	O:0.999671
`	O	O:0.999891
reset_index()	B-API	B-API:0.999923
`	O	O:0.999977
,	O	O:0.999944
and	O	O:1.000000
then	O	O:0.999911
assign	O	O:0.999959
column	O	O:0.999990
names	O	O:0.999912
to	O	O:0.999997
the	O	O:1.000000
columns	O	O:0.998176
:	O	O:0.999980
#CODE	O	O:0.999946
	
apply	O	B-API:0.819537
function	O	O:0.999603
to	O	O:0.999958
a	O	O:0.999998
DataFrame	B-API	O:0.976332
GroupBy	B-API	O:0.592266
and	O	O:0.999989
return	O	O:0.999464
fewer	O	O:0.999101
columns	O	O:0.998844
	
I	O	O:0.999989
want	O	O:0.999963
to	O	O:0.999961
group	O	O:0.999980
my	O	O:0.999864
`	O	O:0.999979
DataFrame	B-API	O:0.960165
`	O	O:0.999999
then	O	O:0.999831
apply	O	O:0.994008
a	O	O:0.999965
function	O	O:0.998383
of	O	O:0.999993
several	O	O:0.999941
columns	O	O:0.999867
which	O	O:0.999954
returns	O	O:0.999954
a	O	O:0.999999
single	O	O:0.997606
result	O	O:0.999808
.	O	O:0.999871
	
#CODE	O	O:0.998453
	
This	O	O:0.999781
can	O	O:0.999981
be	O	O:1.000000
fixed	O	O:0.999978
using	O	O:0.999582
`	O	O:0.999857
apply	O	B-API:0.987632
`	O	O:0.999927
rather	O	O:0.999203
than	O	O:0.999883
`	O	O:0.999969
agg	O	B-API:0.996450
`	O	O:0.999991
,	O	O:0.999957
as	O	O:0.999995
`	O	O:0.999961
apply	O	B-API:0.988587
`	O	O:0.999915
has	O	O:0.999329
no	O	O:0.999996
constraint	O	O:0.999868
on	O	O:0.999991
the	O	O:0.999990
returned	O	O:0.999633
shape	O	O:0.999438
.	O	O:0.999849
	
#CODE	O	O:0.998453
	
I	O	O:0.999981
put	O	O:0.999958
a	O	O:0.999971
condition	O	O:0.999479
for	O	O:0.999995
one	O	O:0.999991
column	O	O:0.999526
in	O	O:0.999991
pandas	O	O:0.999932
dataframe	B-API	O:0.999172
,	O	O:0.999982
hopefully	O	O:0.999680
it	O	O:0.999921
works	O	O:0.999738
.	O	O:0.999938
	
But	O	O:0.999818
it	O	O:0.999971
doesn't	O	O:0.999952
work	O	O:0.999976
when	O	O:0.999956
I	O	O:0.999998
apply	O	O:0.970409
it	O	O:0.999237
for	O	O:0.999974
all	O	O:0.999968
columns	O	O:0.999323
.	O	O:0.999851
	
Yes	O	O:0.999757
that	O	O:0.999800
works	O	O:0.999994
when	O	O:0.999916
we	O	O:0.999991
are	O	O:0.999999
looking	O	O:0.999883
for	O	O:0.999992
any	O	O:0.999887
in	O	O:0.999975
the	O	O:0.999980
set	O	O:0.999888
that	O	O:0.999920
is	O	O:0.999999
of	O	O:0.999997
value	O	O:0.999828
1	O	O:0.999975
,	O	O:0.999949
2	O	O:0.999783
.	O	O:0.999793
	
But	O	O:0.999926
,	O	O:0.999991
we	O	O:0.999988
are	O	O:0.999994
looking	O	O:0.999942
for	O	O:0.999996
all	O	O:0.999963
of	O	O:0.999994
the	O	O:0.999987
records	O	O:0.999650
B	O	O:0.999909
=	O	O:0.999885
1	O	O:0.999892
and	O	O:0.999970
B	O	O:0.999945
=	O	O:0.999478
2	O	O:0.999960
where	O	O:0.999255
A	O	O:0.999973
=	O	O:0.998851
A	O	O:0.999926
.	O	O:0.999809
	
In	O	O:0.999976
our	O	O:0.999976
set	O	O:0.999882
we	O	O:0.999997
sometimes	O	O:0.999902
could	O	O:0.999978
have	O	O:0.999992
this	O	O:0.999962
:	O	O:0.999994
B	O	O:0.999977
=	O	O:0.999758
2	O	O:0.999774
but	O	O:0.999980
no	O	O:0.999960
B	O	O:0.999943
=	O	O:0.999761
1	O	O:0.999642
.	O	O:0.999747
	
We	O	O:0.999992
thus	O	O:0.999891
want	O	O:0.999988
to	O	O:0.999985
exclude	O	O:0.999937
these	O	O:0.999909
.	O	O:0.999922
	
As	O	O:0.999982
such	O	O:0.999949
the	O	O:0.999950
isin()	B-API	B-API:0.999882
doesn't	O	O:0.999770
seem	O	O:0.999883
to	O	O:0.999997
apply	O	O:0.944996
?	O	O:0.999736
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999995
`	O	O:0.999940
.max()	B-API	B-API:0.999923
`	O	O:0.999963
and	O	O:0.999928
apply	O	O:0.755552
it	O	O:0.999786
row-wise	O	O:0.998240
by	O	O:0.999982
specifying	O	O:0.998723
`	O	O:0.999890
axis=1	O	O:0.975042
`	O	O:0.999978
#CODE	O	O:0.997667
	
However	O	O:0.999764
I	O	O:0.999996
want	O	O:0.999991
to	O	O:0.999939
apply	O	O:0.985360
the	O	O:0.999671
function	O	O:0.999741
to	O	O:0.999998
each	O	O:0.999996
row	O	O:0.999943
in	O	O:0.999994
the	O	O:0.999990
df	O	O:0.999300
and	O	O:0.999997
make	O	O:0.999974
a	O	O:0.999991
new	O	O:0.999696
column	O	O:0.999468
.	O	O:0.999876
	
I've	O	O:0.999396
tried	O	O:0.999739
the	O	O:0.999900
following	O	O:0.996520
#CODE	O	O:0.999175
	
You	O	O:0.999844
can	O	O:0.999956
call	O	O:0.999801
`	O	O:0.999996
apply	O	B-API:0.997936
`	O	O:0.999916
and	O	O:0.999940
pass	O	O:0.999708
the	O	O:0.999562
function	O	O:0.999902
you	O	O:0.999984
want	O	O:0.999983
to	O	O:0.999996
execute	O	O:0.999992
on	O	O:0.999999
every	O	O:0.999958
row	O	O:0.999995
like	O	O:0.999895
the	O	O:0.999982
following	O	O:0.993944
:	O	O:0.999911
#CODE	O	O:0.999803
	
Or	O	O:0.999942
do	O	O:0.999967
it	O	O:0.999992
in	O	O:0.999997
a	O	O:0.999999
one	O	O:0.999977
liner	O	O:0.999965
by	O	O:0.999984
calling	O	O:0.999074
`	O	O:0.999949
apply	O	B-API:0.978897
`	O	O:0.999951
twice	O	O:0.992845
:	O	O:0.999986
#CODE	O	O:0.999757
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999987
to	O	O:0.999999
keep	O	O:0.999991
all	O	O:1.000000
your	O	O:0.999995
rows	O	O:0.999616
,	O	O:0.999994
`	O	O:0.999997
group_by	O	B-API:0.793472
`	O	O:0.999996
the	O	O:0.999926
city	O	O:0.998026
/	O	O:0.999969
state	O	O:0.999342
combination	O	O:0.999935
,	O	O:0.999996
apply	O	O:0.890134
geocoding	O	O:0.999108
to	O	O:0.999945
it	O	O:1.000000
the	O	O:0.999996
first	O	O:0.999970
one	O	O:0.999996
by	O	O:0.999990
calling	O	O:0.998659
`	O	O:0.999864
head	O	O:0.991875
(	O	O:0.999993
1	O	O:0.999978
)`	O	O:0.999850
,	O	O:0.999997
then	O	O:0.999957
duplicate	O	O:0.999997
to	O	O:0.999999
the	O	O:1.000000
remainder	O	O:0.999981
rows	O	O:0.999050
.	O	O:0.999961
	
Thanks	O	O:0.997955
for	O	O:0.999994
this	O	O:0.999532
response	O	O:0.999180
.	O	O:0.999809
	
Incredibly	O	O:0.998697
useful	O	O:0.998497
information	O	O:0.999122
!	O	O:0.999839
	
Although	O	O:0.999948
when	O	O:0.999691
I	O	O:0.999987
did	O	O:0.999997
look	O	O:0.998888
at	O	O:0.999967
[:	O	O:0.999960
5	O	O:0.999968
]	O	O:0.999998
rows	O	O:0.999846
of	O	O:0.999998
data	O	O:0.999972
I	O	O:0.999998
received	O	O:0.999983
a	O	O:0.999911
good	O	O:0.997892
dataframe	B-API	O:0.996465
.	O	O:0.999873
	
When	O	O:0.999748
I	O	O:0.999997
applied	O	O:0.999979
the	O	O:0.999297
function	O	O:0.999833
to	O	O:0.999976
all	O	O:0.999989
(	O	O:0.999994
200,000	O	O:0.999902
records	O	O:0.999839
)	O	O:0.999988
I	O	O:0.999993
received	O	O:0.999976
a	O	O:0.999977
time	O	O:0.999777
out	O	O:0.999954
error	O	O:0.999678
.	O	O:0.999761
	
I	O	O:0.999971
will	O	O:0.999985
have	O	O:0.999875
to	O	O:0.999987
groupby	B-API	B-API:0.818778
and	O	O:0.999997
then	O	O:0.999470
apply	O	O:0.616977
.	O	O:0.999556
	
Thank	O	O:0.999084
you	O	O:0.999961
very	O	O:0.999865
much	O	O:0.999631
.	O	O:0.999892
	
I	O	O:0.999966
guess	O	O:0.999950
it	O	O:0.999987
depends	O	O:0.999773
on	O	O:0.999995
the	O	O:0.999992
number	O	O:0.999969
of	O	O:0.999990
levels	O	O:0.999955
for	O	O:0.999997
small	O	O:0.999715
number	O	O:0.999846
of	O	O:0.999938
levels	O	O:0.999980
this	O	O:0.999974
will	O	O:0.999979
be	O	O:0.999992
faster	O	O:0.999910
than	O	O:0.999698
calling	O	O:0.997705
apply	O	B-API:0.763588
but	O	O:0.999496
code	O	O:0.999294
wise	O	O:0.999762
it	O	O:0.999976
doesn't	O	O:0.999967
scale	O	O:0.999596
to	O	O:0.999996
increasing	O	O:0.999989
levels	O	O:0.999764
well	O	O:0.999536
	
You	O	O:0.999905
can	O	O:0.999945
use	O	O:0.999997
apply	O	B-API:0.850419
for	O	O:0.999498
that	O	O:0.988544
:	O	O:0.999963
#CODE	O	O:0.999885
	
Yes	O	O:0.999475
,	O	O:0.999994
that	O	O:0.999306
is	O	O:0.999998
what	O	O:0.999880
apply	O	O:0.759872
does	O	O:0.996951
.	O	O:0.999708
	
df	O	O:0.998896
[	O	O:0.999977
df	O	O:0.999489
[	O	O:0.999921
'	O	O:0.999958
Q2	O	O:0.999971
']	O	O:0.999877
.apply	B-API	B-API:0.999023
(	O	O:0.999942
your_custom_function	O	O:0.994117
)]	O	O:0.999628
.	O	O:0.999700
	
You	O	O:0.999976
pass	O	O:0.999823
a	O	O:0.999952
function	O	O:0.999902
into	O	O:0.999674
the	O	O:0.999962
**	O	O:0.999979
column	O	O:0.999893
**	O	O:0.999997
of	O	O:0.999998
the	O	O:0.999992
data	O	O:0.999981
frame	O	O:0.999994
and	O	O:0.999999
get	O	O:0.999998
rows	O	O:0.999304
for	O	O:0.999998
matching	O	O:0.999701
criteria	O	O:0.997657
.	O	O:0.999836
	
Since	O	O:0.999866
you	O	O:0.999992
only	O	O:0.999997
want	O	O:0.999996
to	O	O:0.999995
change	O	O:0.999989
the	O	O:0.999992
first	O	O:0.999802
element	O	O:0.999950
of	O	O:0.999990
each	O	O:0.999865
group	O	O:0.999621
,	O	O:0.999998
you	O	O:0.999975
can	O	O:0.999991
do	O	O:1.000000
a	O	O:0.999999
customized	O	O:0.997476
groupby	B-API	B-API:0.865391
apply	O	B-API:0.766563
function	O	O:0.998657
to	O	O:0.999911
do	O	O:0.999999
this	O	O:0.999869
.	O	O:0.999925
	
#CODE	O	O:0.998453
	
After	O	O:0.999884
this	O	O:0.999884
,	O	O:0.999993
I	O	O:0.999997
will	O	O:0.999955
apply	O	O:0.648711
the	O	O:0.999179
resample	O	B-API:0.988261
method	O	O:0.999574
,	O	O:0.999989
and	O	O:1.000000
then	O	O:0.999745
use	O	O:0.999996
the	O	O:0.999352
reset_index()	B-API	B-API:0.999447
method	O	O:0.999943
to	O	O:0.999998
get	O	O:1.000000
back	O	O:0.999862
a	O	O:0.999996
DataFrame	B-API	O:0.990507
that	O	O:0.999800
looks	O	O:0.999996
more	O	O:0.999883
or	O	O:0.999989
less	O	O:0.999767
what	O	O:0.999944
I	O	O:0.999996
have	O	O:0.999880
before	O	O:0.992512
:	O	O:0.999964
#CODE	O	O:0.999694
	
I	O	O:0.999992
have	O	O:0.999995
a	O	O:0.999930
function	O	O:0.999687
which	O	O:0.999921
I	O	O:0.999994
apply	O	O:0.952174
it	O	O:0.999722
on	O	O:0.999995
the	O	O:1.000000
rows	O	O:0.999912
of	O	O:0.999994
a	O	O:0.999996
dataframe	B-API	O:0.994259
.	O	O:0.999862
	
This	O	O:0.998226
function	O	O:0.999961
returns	O	O:0.999840
a	O	O:0.999997
list	O	O:0.997043
of	O	O:0.999993
variable	O	O:0.999831
length	O	O:0.999940
depending	O	O:0.999726
on	O	O:0.999994
a	O	O:0.999974
parameter	O	O:0.999224
.	O	O:0.999851
	
Another	O	O:0.999801
possibility	O	O:0.999600
could	O	O:0.999948
be	O	O:0.999999
to	O	O:1.000000
create	O	O:0.999990
dataframes	O	O:0.999978
with	O	O:0.999992
only	O	O:0.999988
the	O	O:0.999999
repeated	O	O:0.999823
columns	O	O:0.999821
,	O	O:0.999997
apply	O	O:0.761145
either	O	O:0.999795
sum	O	O:0.998800
or	O	O:0.999988
max	O	O:0.672110
and	O	O:0.999998
then	O	O:0.999895
merge	O	O:0.936681
everything	O	O:0.999747
.	O	O:0.999869
	
Edit	O	O:0.996133
:	O	O:0.999957
Prior	O	O:0.999653
version	O	O:0.999939
used	O	O:0.999773
apply	O	B-API:0.742901
/	O	O:0.999866
lambda	O	O:0.996146
which	O	O:0.997062
is	O	O:0.999936
not	O	O:0.999972
really	O	O:0.999932
necessary	O	O:0.999813
.	O	O:0.999875
	
This	O	O:0.999297
is	O	O:0.999998
a	O	O:0.999983
simpler	O	O:0.997172
version	O	O:0.999457
.	O	O:0.999829
	
Why	O	O:0.999963
does	O	O:0.999966
order	O	O:0.999947
of	O	O:0.999991
comparison	O	O:0.999352
matter	O	O:0.999916
for	O	O:0.999996
this	O	O:0.999747
apply	O	B-API:0.660393
/	O	O:0.999750
lambda	O	O:0.995040
inequality	O	O:0.999598
?	O	O:0.999794
	
Assuming	O	O:0.999941
your	O	O:0.999759
logic	O	O:0.999814
for	O	O:0.999939
function	O	O:0.999659
`	O	O:0.999933
week	O	O:0.994211
(	O	O:0.999997
rawdate	O	O:0.999910
)`	O	O:0.999714
is	O	O:0.999982
correct	O	O:0.999681
,	O	O:0.999998
You	O	O:0.999993
can	O	O:0.999926
use	O	O:0.999997
the	O	O:0.999913
`	O	O:0.999903
series.apply	B-API	B-API:0.998765
`	O	O:0.999951
function	O	O:0.999608
to	O	O:0.999997
apply	O	O:0.993593
a	O	O:0.999845
function	O	O:0.999395
to	O	O:0.999997
all	O	O:1.000000
values	O	O:0.999795
in	O	O:0.999995
a	O	O:0.999996
series	O	O:0.998975
(	O	O:0.999995
a	O	O:0.999998
pandas	O	O:0.999850
column	O	O:0.999931
)	O	O:0.999982
,	O	O:0.999937
and	O	O:0.999998
this	O	O:0.999946
returns	O	O:0.999878
a	O	O:0.999993
new	O	O:0.999509
series	O	O:0.999954
,	O	O:0.999990
which	O	O:0.999986
you	O	O:0.999986
can	O	O:0.999997
assign	O	O:0.999990
to	O	O:1.000000
your	O	O:0.999996
new	O	O:0.999959
pandas	O	O:0.999965
column	O	O:0.999832
.	O	O:0.999862
	
anyway	O	O:0.999719
try	O	O:0.999959
the	O	O:0.999955
`	O	O:0.999984
apply	O	B-API:0.974256
`	O	O:0.999806
function	O	O:0.998726
i	O	O:0.999991
specified	O	O:0.999860
above	O	O:0.999253
.	O	O:0.999808
	
With	O	O:0.999949
that	O	O:0.999956
as	O	O:1.000000
a	O	O:0.999997
template	O	O:0.999623
for	O	O:0.999990
the	O	O:0.999978
desired	O	O:0.998529
output	O	O:0.999877
,	O	O:0.999997
we	O	O:0.999991
can	O	O:0.999991
just	O	O:0.999999
loop	O	O:0.999996
over	O	O:0.999844
the	O	O:0.999991
relevant	O	O:0.999981
columns	O	O:0.999938
of	O	O:0.999998
the	O	O:0.999991
original	O	O:0.999820
dataframe	B-API	O:0.998643
and	O	O:0.999985
use	O	O:0.999894
`	O	O:0.999381
groupby	B-API	B-API:0.997911
/	O	O:0.999983
apply	O	B-API:0.907021
`	O	O:0.999893
with	O	O:0.995831
`	O	O:0.999996
join	O	B-API:0.958207
/	O	O:0.999992
unique	O	O:0.721955
`	O	O:0.999986
to	O	O:0.999951
replace	O	O:0.999980
the	O	O:0.999995
values	O	O:0.999351
in	O	O:0.999989
the	O	O:0.999999
existing	O	O:0.999655
columns	O	O:0.996073
:	O	O:0.999969
#CODE	O	O:0.999922
	
Hi	O	O:0.999905
Thanks	O	O:0.999420
for	O	O:0.999986
the	O	O:0.999862
solution	O	O:0.996919
.	O	O:0.999858
	
I	O	O:0.999961
tried	O	O:0.999923
to	O	O:0.999893
apply	O	O:0.989001
this	O	O:0.999761
on	O	O:0.999996
my	O	O:0.999999
data	O	O:0.999978
set	O	O:0.999797
.	O	O:0.999961
	
However	O	O:0.999557
it	O	O:0.999984
gives	O	O:0.999975
an	O	O:0.999993
error	O	O:0.999824
"	O	O:0.999955
T	B-API	O:0.771091
#URL	O	O:0.999934
item	O	O:0.998014
0	O	O:0.999642
:	O	O:0.999983
expected	O	O:0.999919
string	O	O:0.999852
,	O	O:0.999979
int	O	O:0.999457
found	O	O:0.998302
"	O	O:0.999983
.Upon	O	O:0.989160
close	O	O:0.998818
inspection	O	O:0.999878
..	O	O:0.999746
	
my	O	O:0.999987
data	O	O:0.999897
set	O	O:0.999949
has	O	O:0.999985
dates	O	O:0.996854
and	O	O:0.999962
integers	O	O:0.999630
..	O	O:0.998677
	
so	O	O:0.999942
i	O	O:0.999976
converted	O	O:0.999978
the	O	O:0.999995
data	O	O:0.999976
frame	O	O:0.999999
to	O	O:0.999998
strings	O	O:0.999997
using	O	O:0.999829
applymap	B-API	B-API:0.997537
(	O	O:0.999886
str	O	O:0.995902
)	O	O:0.999973
..	O	O:0.999954
that	O	O:0.999489
is	O	O:0.999993
still	O	O:0.999609
not	O	O:0.999973
helping	O	O:0.999700
..	O	O:0.999926
how	O	O:0.999936
can	O	O:0.999987
i	O	O:0.999999
concatenate	O	O:0.971133
the	O	O:0.999976
values	O	O:0.998778
?	O	O:0.999932
	
Where	O	O:0.999767
row	O	O:0.999551
is	O	O:0.999976
the	O	O:0.999979
dataframe	B-API	O:0.998128
`	O	O:0.999979
row	O	O:0.998372
`	O	O:0.999987
.	O	O:0.999592
	
I	O	O:0.999976
am	O	O:0.999997
assuming	O	O:0.999978
your	O	O:0.999900
`	O	O:0.999978
start	O	O:0.995693
`	O	O:0.999991
and	O	O:0.999779
`	O	O:0.999997
end	O	O:0.994948
`	O	O:0.999997
columns	O	O:0.999226
are	O	O:0.999991
`	O	O:0.999994
datetime	O	O:0.845727
`	O	O:0.999986
objects	O	O:0.994724
.	O	O:0.999924
	
Then	O	O:0.999816
you	O	O:0.999997
can	O	O:0.999992
use	O	O:0.999998
`	O	O:0.999956
DataFrame.apply()	B-API	B-API:0.999965
`	O	O:0.999929
function	O	O:0.999429
to	O	O:0.999993
apply	O	O:0.975122
it	O	O:0.999930
to	O	O:0.999996
each	O	O:0.999983
row	O	O:0.999845
.	O	O:0.999918
	
#CODE	O	O:0.998453
	
Had	O	O:0.999896
to	O	O:0.999986
use	O	O:0.999977
map	O	B-API:0.899008
instead	O	O:0.999966
of	O	O:0.999991
apply	O	O:0.651764
because	O	O:0.999824
of	O	O:0.999972
pandas	O	O:0.998820
'	O	O:0.999997
timedelda64	O	O:0.999626
,	O	O:0.999976
which	O	O:0.999933
doesn't	O	O:0.999944
allow	O	O:0.999962
a	O	O:0.999998
simple	O	O:0.998600
addition	O	O:0.999972
to	O	O:0.999999
a	O	O:0.999998
datetime	O	O:0.969358
object	O	O:0.999435
.	O	O:0.999768
	
Looking	O	O:0.999545
at	O	O:0.999985
the	O	O:0.999974
source	O	O:0.999733
code	O	O:0.999663
,	O	O:0.999994
`	O	O:0.999987
dropna	B-API	B-API:0.998468
`	O	O:0.999993
appears	O	O:0.999755
to	O	O:0.999998
only	O	O:0.999999
only	O	O:0.999992
apply	O	O:0.885754
to	O	O:0.999990
the	O	O:0.999997
values	O	O:0.999882
that	O	O:0.999972
get	O	O:0.999999
assign	O	O:0.999911
to	O	O:0.999962
`	O	O:0.999999
hue	O	O:0.969355
`	O	O:0.999985
.	O	O:0.999343
	
For	O	O:0.999898
now	O	O:0.999927
,	O	O:0.999999
simply	O	O:0.999979
drop	O	O:0.997452
the	O	O:0.999992
NAs	O	O:0.999929
yourself	O	O:0.999768
via	O	O:0.999983
the	O	O:0.999984
appropriate	O	O:0.999955
pandas	O	O:0.999789
methods	O	O:0.999808
.	O	O:0.999780
	
There	O	O:0.999575
might	O	O:0.999977
also	O	O:0.999987
be	O	O:1.000000
a	O	O:0.999993
way	O	O:0.999817
to	O	O:0.999978
do	O	O:0.999999
this	O	O:0.999977
with	O	O:0.999987
a	O	O:0.999998
loop	O	O:0.999545
or	O	O:0.999985
`	O	O:0.999989
apply	O	B-API:0.953609
`	O	O:0.999928
,	O	O:0.999835
can't	O	O:0.999961
quite	O	O:0.999933
think	O	O:0.999920
how	O	O:0.999950
though	O	O:0.999683
.	O	O:0.999968
	
So	O	O:0.999957
I	O	O:0.999990
am	O	O:0.999998
wondering	O	O:0.998794
whether	O	O:0.999939
there	O	O:0.999709
is	O	O:0.999997
a	O	O:0.999989
way	O	O:0.999882
to	O	O:0.999968
accelerate	O	O:0.999995
this	O	O:0.999924
process	O	O:0.999523
?	O	O:0.999978
	
maybe	O	O:0.999883
some	O	O:0.999973
vectorized	O	O:0.999908
functions	O	O:0.999939
on	O	O:0.999963
datetime	O	O:0.997117
object	O	O:0.999978
that	O	O:0.999755
I	O	O:0.999974
was	O	O:0.999980
not	O	O:0.999974
aware	O	O:0.999951
of	O	O:0.999962
?	O	O:0.999793
	
I	O	O:0.999982
think	O	O:0.999970
one	O	O:0.999951
way	O	O:0.999976
to	O	O:0.999993
slightly	O	O:0.999985
improve	O	O:0.999759
the	O	O:0.999974
speed	O	O:0.996477
is	O	O:0.999993
to	O	O:0.999971
use	O	O:0.999993
`	O	O:0.999960
multiprocessing	O	O:0.951625
`	O	O:0.999973
module	O	O:0.998198
,	O	O:0.999988
and	O	O:0.999998
maybe	O	O:0.999931
I	O	O:0.999983
could	O	O:0.999974
expect	O	O:0.999732
4-6	O	O:0.999976
time	O	O:0.999968
faster	O	O:0.999900
on	O	O:0.999995
a	O	O:0.999990
8-core	O	O:0.997990
PC	O	O:0.999843
.	O	O:0.999765
	
Also	O	O:0.999637
,	O	O:0.999997
because	O	O:0.999958
I	O	O:0.999962
invoke	O	O:0.999972
python	O	O:0.996713
function	O	O:0.999778
in	O	O:0.999978
the	O	O:0.999984
`	O	O:0.999981
apply	O	B-API:0.981792
`	O	O:0.999946
,	O	O:0.999958
cython	O	O:0.999877
or	O	O:0.999963
jit	O	O:0.988232
does	O	O:0.999877
not	O	O:0.999993
help	O	O:0.999746
in	O	O:0.999998
this	O	O:0.999949
case	O	O:0.999955
?	O	O:0.999984
	
Here	O	O:0.998025
is	O	O:0.999993
one	O	O:0.999974
approach	O	O:0.999978
where	O	O:0.999937
you	O	O:0.999935
`	O	O:0.999998
apply	O	B-API:0.904875
`	O	O:0.999995
a	O	O:0.999691
function	O	O:0.999939
row	O	O:0.999989
by	O	O:0.999988
row	O	O:0.999988
to	O	O:0.999985
generate	O	O:0.999986
the	O	O:0.999992
two	O	O:0.999976
wanted	O	O:0.999941
columns	O	O:0.998144
:	O	O:0.999987
#CODE	O	O:0.999899
	
yes	O	O:0.999586
.	O	O:0.999984
as	O	O:0.999996
stated	O	O:0.998348
in	O	O:0.999989
the	O	O:0.999977
question	O	O:0.999945
its	O	O:0.999987
a	O	O:0.999996
silly	O	O:0.998470
example	O	O:0.999387
.	O	O:0.999919
but	O	O:0.999991
its	O	O:0.999975
more	O	O:0.999962
that	O	O:0.999888
dplyr	O	O:0.999943
offers	O	O:0.999908
me	O	O:0.999957
elegant	O	O:0.999910
code	O	O:0.999875
while	O	O:0.999994
also	O	O:0.999985
allowing	O	O:0.999973
for	O	O:0.999984
a	O	O:0.999933
flexible	O	O:0.987794
syntax	O	O:0.999728
.	O	O:0.999841
	
i	O	O:0.999544
was	O	O:0.999940
wondering	O	O:0.999766
how	O	O:0.999963
to	O	O:0.999993
make	O	O:0.999999
this	O	O:0.999982
exact	O	O:0.999992
code	O	O:0.999966
work	O	O:0.999785
in	O	O:0.999990
python	O	O:0.999812
.	O	O:0.999991
its	O	O:0.999986
more	O	O:0.999924
about	O	O:0.999874
how	O	O:0.999936
to	O	O:0.999992
split	O	O:0.999844
apply	O	O:0.508210
and	O	O:0.999977
combine	O	O:0.995438
in	O	O:0.999992
a	O	O:0.999998
similar	O	O:0.999513
fashion	O	O:0.999303
.	O	O:0.999978
not	O	O:0.999991
so	O	O:0.999998
much	O	O:0.999913
that	O	O:0.999980
the	O	O:0.999999
end	O	O:0.999838
result	O	O:0.999738
has	O	O:0.999963
any	O	O:0.999973
meaning	O	O:0.998170
.	O	O:0.999588
	
Apply	O	O:0.999939
multiple	O	O:0.999700
functions	O	O:0.999710
to	O	O:0.999991
multiple	O	O:0.999993
groupby	B-API	B-API:0.848269
columns	O	O:0.999507
	
I	O	O:0.999992
have	O	O:0.999998
a	O	O:0.999999
data	O	O:0.999975
set	O	O:0.999860
which	O	O:0.999890
is	O	O:0.999994
actually	O	O:0.999985
a	O	O:0.999992
occurrence	O	O:0.999683
matrix	O	O:0.999935
of	O	O:0.999998
a	O	O:0.999979
feature	O	O:0.999860
vector	O	O:0.999868
for	O	O:0.999995
some	O	O:0.999902
numbers	O	O:0.999780
of	O	O:0.999988
items	O	O:0.999383
.	O	O:0.999936
	
In	O	O:0.999937
theory	O	O:0.999612
,	O	O:0.999997
this	O	O:0.999970
type	O	O:0.999774
of	O	O:0.999981
representation	O	O:0.999717
helps	O	O:0.999944
to	O	O:0.999991
apply	O	O:0.952675
machine	O	O:0.999860
learning	O	O:0.999231
algorithms	O	O:0.999950
to	O	O:0.999995
data	O	O:1.000000
set	O	O:0.999971
as	O	O:0.999999
its	O	O:0.999831
normalized	O	O:0.999517
.	O	O:0.999795
	
#CODE	O	O:0.998453
	
How	O	O:0.999873
could	O	O:0.999904
I	O	O:0.999999
apply	O	O:0.938228
decision	O	O:0.997508
tree	O	O:0.999931
algorithms	O	O:0.999976
such	O	O:0.999913
as	O	O:0.999993
CART	O	O:0.957070
and	O	O:0.999979
Naive	O	O:0.999779
Bayes	O	O:0.993652
for	O	O:0.999983
this	O	O:0.999969
type	O	O:0.999845
of	O	O:0.999999
data	O	O:0.999968
sets	O	O:0.999914
?	O	O:0.999979
	
(	O	O:0.999945
I	O	O:0.999998
only	O	O:0.999945
checked	O	O:0.999445
scikit	O	O:0.999778
learning	O	O:0.999191
library	O	O:0.998973
)	O	O:0.999834
	
Hi	O	O:0.999475
!	O	O:0.999802
	
Jianxun	O	O:0.996041
!	O	O:0.999868
	
Thanks	O	O:0.999224
for	O	O:0.999972
answering	O	O:0.999736
the	O	O:0.999771
question	O	O:0.996624
!	O	O:0.999883
	
But	O	O:0.999833
I	O	O:0.999987
cannot	O	O:0.999961
apply	O	O:0.907393
this	O	O:0.999816
to	O	O:0.999987
my	O	O:0.999997
code	O	O:0.999687
...	O	O:0.999832
	
I	O	O:0.999981
posted	O	O:0.999968
another	O	O:0.998638
question	O	O:0.999520
..	O	O:0.999553
	
It	O	O:0.999892
would	O	O:0.999962
be	O	O:0.999998
great	O	O:0.999963
if	O	O:0.999978
you	O	O:0.999945
could	O	O:0.999958
please	O	O:0.999985
check	O	O:0.999813
it	O	O:0.999990
..	O	O:0.999807
	
This	O	O:0.999691
you	O	O:0.999966
should	O	O:0.999988
do	O	O:0.999998
a	O	O:0.999997
groupby	B-API	B-API:0.997306
on	O	O:0.999863
option	O	O:0.999512
and	O	O:0.999998
apply	O	O:0.873785
a	O	O:0.999817
sum	O	O:0.994133
and	O	O:0.999994
retrieve	O	O:0.999576
the	O	O:0.999891
count	O	O:0.996946
...	O	O:0.999648
	
For	O	O:0.999951
you	O	O:0.999969
you	O	O:0.999998
just	O	O:0.999990
need	O	O:0.999996
the	O	O:0.999892
function	O	O:0.999828
and	O	O:0.999990
to	O	O:0.999993
apply	O	O:0.923875
it	O	O:0.999922
to	O	O:0.999995
your	O	O:0.999997
dataframe	B-API	O:0.995008
	
However	O	O:0.999726
,	O	O:0.999991
no	O	O:0.999987
matter	O	O:0.999920
how	O	O:0.999980
I	O	O:0.999991
banged	O	O:0.999946
my	O	O:0.999883
head	O	O:0.999840
,	O	O:0.999995
I	O	O:0.999978
could	O	O:0.999964
not	O	O:0.999989
apply	O	O:0.748476
`	O	O:0.999750
.str	B-API	B-API:0.916600
.contains()	B-API	B-API:0.923765
`	O	O:0.999954
to	O	O:0.999957
the	O	O:0.999998
object	O	O:0.999945
returned	O	O:0.999916
by	O	O:0.999923
`	O	O:0.999986
df.columns	O	O:0.744723
`	O	O:0.999992
-	O	O:0.999904
which	O	O:0.999891
is	O	O:0.999994
an	O	O:0.999847
`	O	O:0.999988
Index	O	O:0.904776
`	O	O:0.999989
-	O	O:0.999901
nor	O	O:0.999993
the	O	O:0.999990
one	O	O:0.999993
returned	O	O:0.999943
by	O	O:0.999945
`	O	O:0.999986
df.columns.values	O	O:0.908031
`	O	O:0.999993
-	O	O:0.999935
which	O	O:0.999891
is	O	O:0.999994
an	O	O:0.999899
`	O	O:0.999989
ndarray	B-API	B-API:0.976945
`	O	O:0.999961
.	O	O:0.998929
	
This	O	O:0.999179
works	O	O:0.999964
fine	O	O:0.999763
for	O	O:0.999991
what	O	O:0.998920
is	O	O:0.999995
returned	O	O:0.999882
by	O	O:0.999978
the	O	O:0.999914
"	O	O:0.999851
slicing	O	O:0.999169
"	O	O:0.999979
operation	O	O:0.999472
`	O	O:0.999989
df	O	O:0.998138
[	O	O:0.999994
column_name	O	O:0.998403
]`	O	O:0.999908
,	O	O:0.999979
i.e.	O	O:0.999970
a	O	O:0.999967
`	O	O:0.999933
Series	O	O:0.993298
`	O	O:0.999993
,	O	O:0.999965
though	O	O:0.999900
.	O	O:0.999908
	
(	O	O:0.999961
one	O	O:0.999985
could	O	O:0.999960
apply	O	O:0.994423
any	O	O:0.999964
of	O	O:0.999947
the	O	O:0.999834
`	O	O:0.999985
str	O	O:0.996227
`	O	O:0.999994
functions	O	O:0.999837
,	O	O:0.999998
of	O	O:0.999997
course	O	O:0.999649
)	O	O:0.999995
	
Of	O	O:0.999988
course	O	O:0.999837
in	O	O:0.999997
the	O	O:0.999993
first	O	O:0.999863
solution	O	O:0.999848
I	O	O:0.999995
could	O	O:0.999996
have	O	O:0.999956
performed	O	O:0.999968
the	O	O:0.999987
same	O	O:0.999964
kind	O	O:0.999913
of	O	O:0.999991
regex	O	O:0.999877
checking	O	O:0.999709
,	O	O:0.999992
because	O	O:0.999931
I	O	O:0.999986
can	O	O:0.999997
apply	O	O:0.954139
it	O	O:0.999975
to	O	O:0.999985
the	O	O:0.999998
`	O	O:0.999968
str	O	O:0.997345
`	O	O:0.999998
data	O	O:0.999923
type	O	O:0.999972
returned	O	O:0.999955
by	O	O:0.999968
the	O	O:0.999912
iteration	O	O:0.998343
.	O	O:0.999853
	
EDIT	O	O:0.998364
:	O	O:0.999977
I	O	O:0.999998
just	O	O:0.999972
found	O	O:0.999819
the	O	O:0.999733
`	O	O:0.999941
Index	O	B-API:0.544319
`	O	O:0.999980
method	O	O:0.997761
`	O	O:0.999994
Index.to_series()	B-API	B-API:0.982171
`	O	O:0.999992
,	O	O:0.999927
which	O	O:0.999966
returns	O	O:0.999191
-	O	O:0.999992
ehm	O	O:0.999899
-	O	O:0.999999
a	O	O:0.999973
`	O	O:0.999936
Series	O	O:0.994392
`	O	O:0.999997
to	O	O:0.999962
which	O	O:0.999998
I	O	O:0.999995
could	O	O:0.999990
apply	O	B-API:0.540544
`	O	O:0.999706
.str	B-API	B-API:0.990549
.contains	B-API	B-API:0.956308
(	O	O:0.999671
'	O	O:0.999957
whatever	O	O:0.999796
')`	O	O:0.999853
.	O	O:0.999836
	
`	O	O:0.999896
test.max	O	O:0.895571
(	O	O:0.999994
columns=1	O	O:0.999749
)`	O	O:0.999933
finds	O	O:0.999373
the	O	O:0.999986
max	O	O:0.610577
in	O	O:0.999981
each	O	O:0.999838
column	O	O:0.999649
(	O	O:0.999997
like	O	O:0.999912
R's	O	O:0.999919
`	O	O:0.999951
apply	O	B-API:0.989943
(	O	O:0.999980
test	O	O:0.997520
,	O	O:0.999990
2	O	O:0.999893
,	O	O:0.999984
max	O	O:0.774977
)`)	O	O:0.998854
	
I'm	O	O:0.999946
trying	O	O:0.999916
to	O	O:0.999992
replace	O	O:0.999914
some	O	O:0.999956
NaN	O	O:0.999809
values	O	O:0.999802
in	O	O:0.999996
my	O	O:0.999999
data	O	O:0.999977
with	O	O:0.999986
an	O	O:0.999994
empty	O	O:0.999758
list	O	O:0.996978
[	O	O:0.999935
]	O	O:0.999932
.	O	O:0.999352
	
However	O	O:0.999543
the	O	O:0.999972
list	O	O:0.992356
is	O	O:0.999993
represented	O	O:0.999649
as	O	O:0.999997
a	O	O:0.999944
str	O	O:0.984428
and	O	O:0.999984
doesn't	O	O:0.999919
allow	O	O:0.999551
me	O	O:0.999991
to	O	O:0.999992
properly	O	O:0.999997
apply	O	O:0.788324
the	O	O:0.999835
len()	B-API	O:0.840107
function	O	O:0.999611
.	O	O:0.999861
	
is	O	O:0.999981
there	O	O:0.999910
anyway	O	O:0.999980
to	O	O:0.999995
replace	O	O:0.999921
a	O	O:0.999994
NaN	O	O:0.998405
value	O	O:0.999980
with	O	O:0.999925
an	O	O:0.999989
actual	O	O:0.999921
empty	O	O:0.999806
list	O	O:0.994868
in	O	O:0.999971
pandas	O	O:0.999619
?	O	O:0.999978
	
#CODE	O	O:0.998453
	
You	O	O:0.999973
have	O	O:0.999952
to	O	O:0.999991
do	O	O:1.000000
this	O	O:0.999985
using	O	O:0.999940
`	O	O:0.999949
apply	O	B-API:0.992736
`	O	O:0.999947
in	O	O:0.999914
order	O	O:0.999891
for	O	O:0.999961
the	O	O:0.999866
list	O	O:0.988706
object	O	O:0.999668
to	O	O:0.999987
not	O	O:0.999999
be	O	O:0.999997
interpreted	O	O:0.999974
as	O	O:0.999989
an	O	O:0.999971
array	O	O:0.999977
to	O	O:0.999995
assign	O	O:0.999994
back	O	O:0.999738
to	O	O:0.999998
the	O	O:1.000000
df	O	O:0.999381
which	O	O:0.999927
will	O	O:0.999957
try	O	O:0.999998
to	O	O:0.999997
align	O	O:0.995063
the	O	O:0.999997
shape	O	O:0.999968
back	O	O:0.999652
to	O	O:0.999997
the	O	O:1.000000
original	O	O:0.999392
series	O	O:0.999872
	
But	O	O:0.999987
then	O	O:0.999813
I	O	O:0.999999
try	O	O:0.999995
to	O	O:0.999956
apply	O	O:0.983968
it	O	O:0.999827
to	O	O:0.999969
DataFrame	B-API	O:0.999975
obtained	O	O:0.999934
from	O	O:0.999970
a	O	O:0.999992
.csv	O	O:0.991758
file	O	O:0.998340
:	O	O:0.999966
#CODE	O	O:0.999891
	
how	O	O:0.999953
to	O	O:0.999994
change	O	O:0.999986
the	O	O:0.999983
following	O	O:0.999586
example	O	O:0.999883
to	O	O:0.999995
apply	O	O:0.981772
for	O	O:0.999983
a	O	O:0.999963
column	O	O:0.998472
?	O	O:0.999961
	
say	O	O:0.999874
,	O	O:0.999989
for	O	O:0.999993
any	O	O:0.999981
cell	O	O:0.998441
in	O	O:0.999867
A1	O	O:0.999354
:	O	O:0.999983
A15	O	O:0.999936
,	O	O:0.999994
Ai	O	O:0.999935
,	O	O:0.999991
if	O	O:0.999996
the	O	O:0.999998
cell	O	O:0.999521
in	O	O:0.999997
column	O	O:0.999979
C	O	O:0.999926
in	O	O:0.999987
the	O	O:0.999995
same	O	O:0.999928
row	O	O:0.999921
,	O	O:0.999994
Ci	O	O:0.999967
,	O	O:0.999962
is	O	O:0.999997
less	O	O:0.999300
than	O	O:0.999953
the	O	O:0.999997
cell	O	O:0.999563
in	O	O:0.999964
A	O	O:0.999996
,	O	O:0.999998
we	O	O:0.999993
put	O	O:0.999812
red	O	O:0.999987
color	O	O:0.999653
in	O	O:0.999988
the	O	O:0.999996
cell	O	O:0.999168
Ai	O	O:0.999888
?	O	O:0.999952
	
I	O	O:0.999971
can	O	O:0.999987
do	O	O:0.999996
a	O	O:0.999991
loop	O	O:0.991609
but	O	O:0.999945
it	O	O:0.999989
seems	O	O:0.999982
slow	O	O:0.999753
for	O	O:0.999995
a	O	O:0.999966
big	O	O:0.999241
file	O	O:0.999729
,	O	O:0.999996
maybe	O	O:0.999982
due	O	O:0.999917
to	O	O:0.999974
too	O	O:0.999998
many	O	O:0.999950
I	O	O:0.999982
/	O	O:0.999993
O	O	O:0.988610
in	O	O:0.999921
loop	O	O:0.998510
#CODE	O	O:0.999701
	
Ideally	O	O:0.999808
I	O	O:0.999980
would	O	O:0.999995
like	O	O:0.999981
something	O	O:0.999997
like	O	O:0.999807
`	O	O:0.999997
apply_chunk()	O	O:0.957894
`	O	O:0.999989
which	O	O:0.998594
is	O	O:0.999995
the	O	O:0.999991
same	O	O:0.999955
as	O	O:0.999965
apply	O	B-API:0.847556
but	O	O:0.999835
only	O	O:0.999586
works	O	O:0.999984
on	O	O:0.999997
a	O	O:0.999998
piece	O	O:0.999895
of	O	O:0.999979
the	O	O:0.999974
dataframe	B-API	O:0.997282
.	O	O:0.999833
	
I	O	O:0.999957
thought	O	O:0.999704
`	O	O:0.999978
dask	O	O:0.977672
`	O	O:0.999990
might	O	O:0.999802
be	O	O:0.999998
an	O	O:0.999996
option	O	O:0.999455
for	O	O:0.999994
this	O	O:0.999194
,	O	O:0.999977
but	O	O:0.999962
`	O	O:0.999994
dask	O	O:0.997811
`	O	O:0.999997
dataframes	O	O:0.997233
seemed	O	O:0.999927
to	O	O:0.999997
have	O	O:0.999998
other	O	O:0.999970
issues	O	O:0.999979
when	O	O:0.999663
I	O	O:0.999997
used	O	O:0.999999
them	O	O:0.990627
.	O	O:0.999885
	
This	O	O:0.999664
has	O	O:0.999967
to	O	O:0.999996
be	O	O:1.000000
a	O	O:0.999997
common	O	O:0.997106
problem	O	O:0.999923
though	O	O:0.999701
,	O	O:0.999969
is	O	O:0.999995
there	O	O:0.999958
a	O	O:0.999992
design	O	O:0.999645
pattern	O	O:0.999717
I	O	O:0.999988
should	O	O:0.999993
be	O	O:0.999995
using	O	O:0.999968
for	O	O:0.999858
adding	O	O:0.999178
columns	O	O:0.998025
to	O	O:0.999967
large	O	O:0.999997
pandas	O	O:0.999711
dataframes	O	O:0.999705
?	O	O:0.999935
	
whats	O	O:0.999792
about	O	O:0.999908
using	O	O:0.999916
the	O	O:0.995858
apply	O	B-API:0.985158
method	O	O:0.998420
?	O	O:0.999770
	
However	O	O:0.999811
,	O	O:0.999991
if	O	O:1.000000
your	O	O:0.999902
operation	O	O:0.998482
is	O	O:0.999993
highly	O	O:0.998918
custom	O	O:0.993664
(	O	O:0.999947
as	O	O:0.999979
it	O	O:0.999959
appears	O	O:0.999960
to	O	O:0.999993
be	O	O:0.999996
)	O	O:0.999990
and	O	O:0.999968
if	O	O:0.999991
Python	O	O:0.999093
iterators	O	O:0.999816
are	O	O:0.999974
fast	O	O:0.999506
enough	O	O:0.998752
(	O	O:0.999986
as	O	O:0.999995
they	O	O:0.999943
seem	O	O:0.999948
to	O	O:0.999997
be	O	O:1.000000
)	O	O:0.999999
then	O	O:0.999532
you	O	O:0.999995
might	O	O:0.999996
just	O	O:0.999992
want	O	O:0.999998
to	O	O:0.999983
stick	O	O:0.999992
with	O	O:0.999968
that	O	O:0.999883
.	O	O:0.999988
	
Anytime	O	O:0.999749
you	O	O:0.999989
find	O	O:0.999959
yourself	O	O:0.999989
using	O	O:0.999904
`	O	O:0.999960
apply	O	B-API:0.989493
`	O	O:0.999948
or	O	O:0.998618
`	O	O:0.999994
iloc	B-API	B-API:0.990178
`	O	O:0.999993
in	O	O:0.999958
a	O	O:0.999995
loop	O	O:0.997570
it's	O	O:0.999758
likely	O	O:0.999762
that	O	O:0.999931
Pandas	O	O:0.999335
is	O	O:0.999988
operating	O	O:0.999589
much	O	O:0.999346
slower	O	O:0.999826
than	O	O:0.998217
is	O	O:0.999971
optimal	O	O:0.995731
.	O	O:0.999878
	
You	O	O:0.999975
need	O	O:0.999947
to	O	O:0.999995
modify	O	O:0.999991
the	O	O:0.999980
apply	O	B-API:0.951912
`	O	O:0.999932
func	O	O:0.923996
`	O	O:0.999999
as	O	O:0.999964
below	O	O:0.999906
to	O	O:0.999995
count	O	O:0.999967
consecutive	O	O:0.999948
non-zero	O	O:0.999564
values	O	O:0.999224
.	O	O:0.999834
	
#CODE	O	O:0.998453
	
I'm	O	O:0.999946
trying	O	O:0.999848
to	O	O:0.999992
export	O	O:0.999922
`	O	O:0.999984
pandas.DataFrame.describe()	B-API	B-API:0.999450
`	O	O:0.999996
to	O	O:0.999606
`	O	O:1.000000
LaTex	O	O:0.996578
`	O	O:0.999997
using	O	O:0.999842
the	O	O:0.999939
`	O	O:0.999541
to_latex()	B-API	B-API:0.999949
`	O	O:0.999962
-method	O	O:0.998473
.	O	O:0.999913
	
This	O	O:0.999439
works	O	O:0.999916
all	O	O:0.999994
fine	O	O:0.999855
as	O	O:0.999999
long	O	O:0.999903
as	O	O:0.999984
I	O	O:0.999972
don't	O	O:0.999959
apply	O	B-API:0.675479
the	O	O:0.999647
`	O	O:0.999830
groupby()	B-API	B-API:0.999925
`	O	O:0.999979
-method	O	O:0.999023
beforehand	O	O:0.999619
.	O	O:0.999931
	
With	O	O:0.999905
a	O	O:0.999969
grouped	O	O:0.998731
DataFrame	B-API	O:0.995116
,	O	O:0.999989
the	O	O:0.999998
first	O	O:0.999231
row	O	O:0.999899
has	O	O:0.999985
no	O	O:0.999993
values	O	O:0.999714
,	O	O:0.999998
even	O	O:0.999953
though	O	O:0.999992
its	O	O:0.999981
label	O	O:0.999198
is	O	O:0.999953
`	O	O:0.999990
count	O	O:0.973037
`	O	O:0.999992
.	O	O:0.999258
	
Note	O	O:0.999946
that	O	O:0.999955
the	O	O:0.999999
first	O	O:0.999959
row	O	O:0.999978
of	O	O:0.999995
a	O	O:0.999983
grouped	O	O:0.999443
dataframe	B-API	O:0.988980
is	O	O:0.999983
used	O	O:0.999814
to	O	O:0.999995
mark	O	O:0.999969
down	O	O:0.999546
the	O	O:0.999991
variable	O	O:0.999927
used	O	O:0.999178
for	O	O:0.999991
grouping	O	O:0.998660
in	O	O:0.999689
iPython	O	O:0.997752
notebook	O	O:0.999762
.	O	O:0.999792
	
You	O	O:0.999884
can	O	O:0.999982
define	O	O:0.999985
a	O	O:0.999998
func	O	O:0.969254
which	O	O:0.999909
takes	O	O:0.999890
the	O	O:0.999993
values	O	O:0.999451
,	O	O:0.999995
sorts	O	O:0.999994
them	O	O:0.999945
,	O	O:0.999997
slices	O	O:0.999853
the	O	O:0.999990
top	O	O:0.999926
2	O	O:0.999934
values	O	O:0.995806
(	O	O:0.999954
`	O	O:0.999985
[:	O	O:0.999760
2	O	O:0.999981
]`)	O	O:0.999943
then	O	O:0.998814
calculates	O	O:0.999942
the	O	O:0.999996
difference	O	O:0.999578
and	O	O:0.999978
returns	O	O:0.999858
the	O	O:0.999928
second	O	O:0.999434
value	O	O:0.999760
(	O	O:0.999990
as	O	O:0.999997
the	O	O:0.999986
first	O	O:0.999844
value	O	O:0.999728
is	O	O:0.999936
`	O	O:0.999986
NaN	O	O:0.989026
`)	O	O:0.999971
.	O	O:0.999534
	
You	O	O:0.999771
`	O	O:0.999984
apply	O	B-API:0.992154
`	O	O:0.999982
this	O	O:0.996939
and	O	O:0.999999
pass	O	O:0.997786
arg	O	O:0.999289
`	O	O:0.999976
axis=1	O	O:0.987801
`	O	O:0.999994
to	O	O:0.999951
apply	O	O:0.953503
row-wise	O	O:0.947225
:	O	O:0.999735
#CODE	O	O:0.999815
	
This	O	O:0.999849
can	O	O:0.999956
go	O	O:0.999999
wrong	O	O:0.999993
depending	O	O:0.999881
on	O	O:0.999989
the	O	O:0.999991
column	O	O:0.999917
names	O	O:0.999707
.	O	O:0.999938
	
It's	O	O:0.999868
safer	O	O:0.999910
to	O	O:0.999987
use	O	O:0.999996
`	O	O:0.999834
.diff()	B-API	B-API:0.999092
.iloc	B-API	B-API:0.968762
[	O	O:0.999916
1	O	O:0.999783
]`	O	O:0.999805
.	O	O:0.999581
	
Also	O	O:0.999424
,	O	O:0.999999
this	O	O:0.999705
is	O	O:0.999987
pretty	O	O:0.999673
inefficient	O	O:0.999855
as	O	O:0.999955
it	O	O:0.999955
uses	O	O:0.999777
sort	O	O:0.997622
and	O	O:0.999991
apply	O	O:0.583670
,	O	O:0.999913
neither	O	O:0.999916
of	O	O:0.999943
which	O	O:0.999915
are	O	O:0.999996
necessary	O	O:0.999907
.	O	O:0.999899
	
See	O	O:0.999912
my	O	O:0.999935
answer	O	O:0.999743
below	O	O:0.999005
.	O	O:0.999827
	
Here's	O	O:0.999749
an	O	O:0.999986
elegant	O	O:0.999699
solution	O	O:0.999901
that	O	O:0.999880
doesn't	O	O:0.999943
involve	O	O:0.999963
sorting	O	O:0.999532
or	O	O:0.999952
defining	O	O:0.999891
any	O	O:0.999867
functions	O	O:0.999468
.	O	O:0.999648
	
It's	O	O:0.999925
also	O	O:0.999923
fully	O	O:0.999988
vectorized	O	O:0.999611
as	O	O:0.999961
it	O	O:0.999986
avoid	O	O:0.999904
use	O	O:0.999946
of	O	O:0.999842
the	O	O:0.999877
`	O	O:0.999985
apply	O	B-API:0.998915
`	O	O:0.999803
method	O	O:0.998351
.	O	O:0.999930
	
#CODE	O	O:0.998453
	
Unfortunately	O	O:0.999874
offsets	O	O:0.999584
don't	O	O:0.999936
support	O	O:0.999877
operations	O	O:0.999949
using	O	O:0.999870
array	O	O:0.999724
like	O	O:0.999614
objects	O	O:0.999914
so	O	O:0.999988
you	O	O:0.999997
have	O	O:0.999986
to	O	O:0.999998
`	O	O:1.000000
apply	O	B-API:0.961539
`	O	O:0.999971
the	O	O:0.999760
offset	O	O:0.999799
for	O	O:0.999977
each	O	O:0.998491
element	O	O:0.996993
:	O	O:0.999955
#CODE	O	O:0.999824
	
You	O	O:0.999880
can	O	O:0.999853
`	O	O:0.999998
groupby	B-API	B-API:0.995855
`	O	O:0.999994
on	O	O:0.998831
'	O	O:0.999994
name	O	O:0.999857
'	O	O:0.999923
and	O	O:0.999979
'	O	O:0.999941
id	O	O:0.997422
'	O	O:0.999830
and	O	O:0.999994
just	O	O:0.999855
`	O	O:0.999990
apply	O	B-API:0.983188
`	O	O:0.999936
`	O	O:0.999517
len	O	B-API:0.930368
`	O	O:0.999859
function	O	O:0.978638
:	O	O:0.999974
#CODE	O	O:0.999792
	
Calling	O	O:0.997700
the	O	O:0.999942
DataFrame's	O	O:0.994388
`	O	O:0.999988
any	O	O:0.992236
`	O	O:0.999982
method	O	O:0.999770
will	O	O:0.999948
perform	O	O:0.999742
better	O	O:0.999928
than	O	O:0.999950
using	O	O:0.999891
`	O	O:0.999942
apply	O	B-API:0.993658
`	O	O:0.999956
to	O	O:0.999644
call	O	O:0.999926
Python's	O	O:0.999893
builtin	O	O:0.960274
`	O	O:0.999993
any	O	O:0.998935
`	O	O:0.999983
function	O	O:0.999923
once	O	O:0.999961
per	O	O:0.999917
row	O	O:0.999689
.	O	O:0.999828
	
You	O	O:0.999855
can	O	O:0.999946
`	O	O:0.999999
apply	O	B-API:0.933371
`	O	O:0.999982
the	O	O:0.998355
function	O	O:0.999850
`	O	O:0.999994
any	O	O:0.999667
`	O	O:0.999998
along	O	O:0.999640
the	O	O:0.999999
rows	O	O:0.999585
of	O	O:0.999980
`	O	O:0.999997
df	O	O:0.999580
`	O	O:0.999998
by	O	O:0.999938
using	O	O:0.999917
`	O	O:0.999659
axis=1	O	O:0.903578
`	O	O:0.999964
.	O	O:0.998916
	
In	O	O:0.999983
this	O	O:0.999920
case	O	O:0.999962
I'll	O	O:0.999971
only	O	O:0.999937
apply	O	O:0.511762
`	O	O:0.999970
any	O	O:0.998222
`	O	O:0.999995
to	O	O:0.999988
a	O	O:1.000000
subset	O	O:0.998305
of	O	O:0.999997
the	O	O:0.999967
columns	O	O:0.999055
:	O	O:0.999965
#CODE	O	O:0.999915
	
For	O	O:0.999968
each	O	O:0.999062
station	O	O:0.999875
that	O	O:0.999922
I'm	O	O:0.999993
working	O	O:0.999755
with	O	O:0.999718
.	O	O:0.999821
	
I	O	O:0.999988
want	O	O:0.999972
to	O	O:0.999921
be	O	O:1.000000
able	O	O:0.999985
to	O	O:0.999987
apply	O	O:0.985188
these	O	O:0.999919
using	O	O:0.999938
a	O	O:0.999976
dictionary	O	O:0.999653
like	O	O:0.999657
so	O	O:0.999863
:	O	O:0.999968
#CODE	O	O:0.999866
	
Looks	O	O:0.999945
like	O	O:0.999973
a	O	O:0.999999
nice	O	O:0.999306
usecase	O	O:0.999939
for	O	O:0.999988
a	O	O:0.999988
multi	O	O:0.999623
column	O	O:0.999844
apply	O	B-API:0.586466
.	O	O:0.999235
	
Just	O	O:0.999837
write	O	O:0.999981
a	O	O:0.999973
function	O	O:0.999874
with	O	O:0.999990
your	O	O:0.999873
mapping	O	O:0.999759
dict	O	O:0.999693
.	O	O:0.999883
	
Apply	O	O:0.999891
this	O	O:0.999106
function	O	O:0.999957
to	O	O:0.999998
slice	O	O:0.999986
of	O	O:1.000000
your	O	O:0.999900
columns	O	O:0.999876
.	O	O:0.999960
	
Finish	O	O:0.998455
.	O	O:0.999748
	
#URL	O	O:0.997160
	
`	O	O:0.999927
df2	O	O:0.997355
[	O	O:0.999971
'	O	O:0.999953
Date	O	O:0.999375
']`	O	O:0.999956
first	O	O:0.998784
,	O	O:0.999973
and	O	O:0.999998
then	O	O:0.999890
apply	O	O:0.771243
`	O	O:0.999944
pd.merge	B-API	B-API:0.998163
`	O	O:0.999994
to	O	O:0.999987
sub-DataFrames	O	O:0.999985
of	O	O:0.999947
`	O	O:0.999983
df1	O	O:0.995156
`	O	O:0.999980
and	O	O:0.999785
`	O	O:0.999994
df2	O	O:0.983712
`	O	O:0.999977
which	O	O:0.999467
contain	O	O:0.999867
only	O	O:0.999994
those	O	O:0.999955
dates	O	O:0.990083
:	O	O:0.999954
#CODE	O	O:0.999873
	
Call	O	O:0.996682
`	O	O:0.999984
apply	O	B-API:0.966571
`	O	O:0.999971
on	O	O:0.999871
the	O	O:0.999985
'	O	O:0.999979
scores	O	O:0.998712
'	O	O:0.999997
column	O	O:0.999981
on	O	O:0.999995
the	O	O:0.999979
`	O	O:0.999972
groupby	B-API	B-API:0.999703
`	O	O:0.999974
object	O	O:0.998557
and	O	O:0.999991
use	O	O:0.999967
the	O	O:0.999632
vectorise	O	O:0.993390
`	O	O:0.999963
str	O	O:0.907752
`	O	O:0.999987
method	O	O:0.997301
`	O	O:0.999995
contains	O	O:0.991806
`	O	O:0.999998
,	O	O:0.999877
use	O	O:0.999997
this	O	O:0.999776
to	O	O:0.999984
filter	O	O:0.999903
the	O	O:0.999930
`	O	O:0.999991
group	O	O:0.955133
`	O	O:0.999991
and	O	O:0.999962
call	O	O:0.999317
`	O	O:0.999981
count	O	O:0.529654
`	O	O:0.999962
:	O	O:0.999762
#CODE	O	O:0.999910
	
Outer	O	O:0.999541
join	O	B-API:0.917895
will	O	O:0.999839
still	O	O:0.999962
apply	O	O:0.668446
,	O	O:0.999836
but	O	O:0.999929
the	O	O:0.999996
original	O	O:0.999394
answer	O	O:0.999703
is	O	O:0.999923
correct	O	O:0.996710
:	O	O:0.999981
#CODE	O	O:0.999843
	
`	O	O:0.999968
pd.DataFrame.sort()	O	O:0.502821
`	O	O:0.999994
takes	O	O:0.999820
a	O	O:0.999997
colum	O	O:0.999676
object	O	O:0.999953
as	O	O:0.999979
argument	O	O:0.999882
,	O	O:0.999952
which	O	O:0.999820
does	O	O:0.999746
not	O	O:0.999996
apply	O	O:0.978133
here	O	O:0.999153
,	O	O:0.999988
so	O	O:0.999994
how	O	O:0.999982
can	O	O:0.999984
I	O	O:1.000000
achieve	O	O:0.999991
this	O	O:0.999299
?	O	O:0.999972
	
You	O	O:0.999925
could	O	O:0.999799
use	O	O:0.999971
groupby	B-API	B-API:0.987660
/	O	O:0.999925
apply	O	B-API:0.737145
with	O	O:0.999767
a	O	O:0.999943
custom	O	O:0.929463
(	O	O:0.999987
lambda	O	O:0.999484
)	O	O:0.999582
function	O	O:0.995958
:	O	O:0.999960
#CODE	O	O:0.999831
	
You	O	O:0.999880
can	O	O:0.999982
define	O	O:0.999981
a	O	O:0.999999
list	O	O:0.998041
of	O	O:0.999991
the	O	O:0.999991
cols	O	O:0.999765
of	O	O:0.999989
interest	O	O:0.998820
and	O	O:0.999999
pass	O	O:0.999809
this	O	O:0.999708
to	O	O:0.999995
the	O	O:0.999998
groupby	B-API	B-API:0.995735
which	O	O:0.999873
will	O	O:0.999905
operate	O	O:0.999977
on	O	O:0.999999
each	O	O:0.999878
of	O	O:0.999993
these	O	O:0.999966
cols	O	O:0.999876
via	O	O:0.999982
a	O	O:0.999954
lambda	O	O:0.993995
and	O	O:0.999963
`	O	O:0.999967
apply	O	B-API:0.998546
`	O	O:0.999432
:	O	O:0.999133
#CODE	O	O:0.999898
	
We	O	O:0.999961
can	O	O:0.999900
do	O	O:1.000000
this	O	O:0.999980
for	O	O:0.999998
each	O	O:0.999856
row	O	O:0.999950
of	O	O:0.999993
`	O	O:0.999991
dates	O	O:0.995855
`	O	O:0.999998
by	O	O:0.999965
using	O	O:0.999932
`	O	O:0.999685
apply	O	B-API:0.999080
`	O	O:0.999340
:	O	O:0.999009
#CODE	O	O:0.999898
	
By	O	O:0.999967
making	O	O:0.996417
`	O	O:0.999974
lambda	O	O:0.993745
`	O	O:0.999995
,	O	O:0.999951
above	O	O:0.999887
,	O	O:0.999990
return	O	O:0.999499
a	O	O:0.999965
Series	O	O:0.998929
,	O	O:0.999986
`	O	O:0.999992
apply	O	B-API:0.983602
`	O	O:0.999957
will	O	O:0.999014
return	O	O:0.999881
a	O	O:0.999981
DataFrame	B-API	O:0.964757
,	O	O:0.999959
	
How	O	O:0.999899
can	O	O:0.999931
I	O	O:0.999999
accomplish	O	O:0.999990
this	O	O:0.998818
in	O	O:0.999998
pandas	O	O:0.999919
so	O	O:0.999998
that	O	O:0.999906
the	O	O:0.999999
dataframe	B-API	O:0.999525
I	O	O:0.999991
get	O	O:0.999988
contains	O	O:0.999680
the	O	O:0.999998
statistics	O	O:0.999257
of	O	O:0.999995
each	O	O:0.999751
flow	O	O:0.999936
i.e.	O	O:0.999939
the	O	O:0.999994
columns	O	O:0.999565
should	O	O:0.999903
contain	O	O:0.999924
the	O	O:0.999988
`	O	O:0.999978
ip_src	O	O:0.947563
`	O	O:0.999996
,	O	O:0.999711
`	O	O:0.999996
ip_dst	O	O:0.939688
`	O	O:0.999995
,	O	O:0.999885
`	O	O:0.999996
sport	O	O:0.964779
`	O	O:0.999995
,	O	O:0.999829
`	O	O:0.999997
dport	O	O:0.988785
`	O	O:0.999995
,	O	O:0.999524
`	O	O:0.999996
ip_proto	O	O:0.948133
`	O	O:0.999996
,	O	O:0.999824
`	O	O:0.999994
service	O	O:0.996116
`	O	O:0.999992
,	O	O:0.999941
and	O	O:0.999996
the	O	O:0.999993
mean	O	O:0.999151
var	O	O:0.999950
values	O	O:0.999893
calculated	O	O:0.999888
as	O	O:0.999993
earlier	O	O:0.997404
.	O	O:0.999825
	
I	O	O:0.999988
have	O	O:0.999930
tried	O	O:0.999730
both	O	O:0.999943
the	O	O:0.999898
`	O	O:0.999988
aggr	O	O:0.976136
`	O	O:0.999986
and	O	O:0.999805
`	O	O:0.999995
apply	O	B-API:0.996051
`	O	O:0.999943
methods	O	O:0.981408
,	O	O:0.999966
but	O	O:0.999833
haven't	O	O:0.999454
been	O	O:0.999897
able	O	O:0.999987
to	O	O:0.999988
do	O	O:0.999995
it	O	O:0.999977
.	O	O:0.999910
	
Thanks	O	O:0.999077
in	O	O:0.999956
advance	O	O:0.999388
!	O	O:0.999880
	
Just	O	O:0.999862
apply	O	O:0.799365
a	O	O:0.999977
lambda	O	O:0.990372
function	O	O:0.999913
on	O	O:0.999977
the	O	O:0.999996
groups	O	O:0.999936
like	O	O:0.999753
so	O	O:0.999948
:	O	O:0.999977
#CODE	O	O:0.999865
	
You	O	O:0.999899
can	O	O:0.999981
apply	O	O:0.991563
a	O	O:0.999914
function	O	O:0.999687
that	O	O:0.999864
returns	O	O:0.999956
the	O	O:0.999951
category	O	O:0.952250
:	O	O:0.999954
#CODE	O	O:0.999675
	
You	O	O:0.999960
want	O	O:0.999909
to	O	O:0.999972
avoid	O	O:0.999993
iterating	O	O:0.999702
,	O	O:0.999971
if	O	O:0.999991
possible	O	O:0.999707
,	O	O:0.999983
and	O	O:0.999991
instead	O	O:0.999990
find	O	O:0.999934
a	O	O:0.999990
function	O	O:0.999825
to	O	O:0.999992
apply	O	O:0.983066
,	O	O:0.999994
such	O	O:0.999767
as	O	O:0.999996
this	O	O:0.989385
:	O	O:0.999975
#CODE	O	O:0.999779
	
@USER	O	O:0.998327
:	O	O:0.999976
I	O	O:0.999996
like	O	O:0.999997
this	O	O:0.999794
solution	O	O:0.999664
,	O	O:0.999976
but	O	O:0.999923
wouldn't	O	O:0.999824
`	O	O:0.999990
.map	B-API	B-API:0.988882
`	O	O:0.999994
be	O	O:0.999783
better	O	O:0.999830
?	O	O:0.999826
	
Or	O	O:0.999946
if	O	O:0.999964
you're	O	O:0.999976
going	O	O:0.999748
to	O	O:0.999989
use	O	O:0.999996
apply	O	B-API:0.701851
on	O	O:0.999962
a	O	O:0.999997
single	O	O:0.999634
series	O	O:0.999971
,	O	O:0.999995
you	O	O:0.999996
need	O	O:0.999971
to	O	O:0.999998
include	O	O:0.999997
an	O	O:0.999956
`	O	O:0.999991
axis	O	O:0.998127
`	O	O:0.999986
parameter	O	O:0.998871
.	O	O:0.999921
	
I	O	O:0.999927
am	O	O:0.999998
trying	O	O:0.999840
to	O	O:0.999995
delete	O	O:0.999905
the	O	O:0.999994
first	O	O:0.999969
two	O	O:0.999998
rows	O	O:0.999936
from	O	O:0.999957
my	O	O:0.999996
dataframe	B-API	O:0.997960
`	O	O:0.999994
df	O	O:0.996167
`	O	O:0.999989
and	O	O:0.999968
am	O	O:0.999998
using	O	O:0.999887
the	O	O:0.999843
answer	O	O:0.999300
suggested	O	O:0.998166
in	O	O:0.999990
this	O	O:0.999949
post	O	O:0.998887
.	O	O:0.999935
	
However	O	O:0.999903
,	O	O:0.999996
I	O	O:0.999997
get	O	O:0.999989
the	O	O:0.999973
error	O	O:0.999521
`	O	O:0.999884
AttributeError	O	O:0.995306
:	O	O:0.999993
Cannot	O	O:0.999921
access	O	O:0.999823
callable	O	O:0.999711
attribute	O	O:0.999932
'	O	O:0.999871
ix	O	B-API:0.637191
'	O	O:0.999986
of	O	O:0.999778
'	O	O:0.999934
DataFrameGroupBy	B-API	B-API:0.739834
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999815
apply	O	B-API:0.964761
'	O	O:0.999332
method	O	O:0.999437
`	O	O:0.999950
and	O	O:0.999973
don't	O	O:0.999977
know	O	O:0.999562
how	O	O:0.999989
to	O	O:0.999984
do	O	O:1.000000
this	O	O:0.999964
with	O	O:0.999970
the	O	O:0.999984
`	O	O:0.999980
apply	O	B-API:0.998403
`	O	O:0.999836
method	O	O:0.998351
.	O	O:0.999930
	
I've	O	O:0.999653
shown	O	O:0.999747
the	O	O:0.999989
relevant	O	O:0.999925
lines	O	O:0.999753
of	O	O:0.999998
code	O	O:0.999628
below	O	O:0.999503
:	O	O:0.999968
#CODE	O	O:0.999701
	
If	O	O:0.999926
that's	O	O:0.999935
too	O	O:0.999980
slow	O	O:0.999909
,	O	O:0.999995
you	O	O:0.999984
can	O	O:0.999998
also	O	O:1.000000
skip	O	O:0.999796
the	O	O:0.999987
type	O	O:0.999053
checking	O	O:0.998872
and	O	O:0.999997
just	O	O:0.999867
apply	O	B-API:0.524771
the	O	O:0.999493
string	O	O:0.997717
conversion	O	O:0.999875
to	O	O:0.999999
columns	O	O:0.999999
matching	O	O:0.999878
the	O	O:0.999969
numeric	O	O:0.997570
type	O	O:0.997057
.	O	O:0.999929
	
Python	O	O:0.998787
pandas	O	O:0.999476
:	O	O:0.999991
can	O	O:0.999971
I	O	O:1.000000
speed	O	O:0.999888
up	O	O:0.999967
this	O	O:0.999460
apply	O	B-API:0.636186
statement	O	O:0.999098
?	O	O:0.999800
	
I	O	O:0.999975
do	O	O:0.999997
all	O	O:0.999901
of	O	O:0.999994
this	O	O:0.999827
with	O	O:0.999796
apply	O	B-API:0.770931
statements	O	O:0.997227
.	O	O:0.999499
	
They	O	O:0.999848
work	O	O:0.999407
,	O	O:0.999988
but	O	O:0.999995
seem	O	O:0.999906
slow	O	O:0.999877
to	O	O:0.999986
me	O	O:0.999991
:	O	O:0.999986
7	O	O:0.999989
seconds	O	O:0.999806
in	O	O:0.999988
total	O	O:0.999738
,	O	O:0.999991
whereas	O	O:0.999868
any	O	O:0.999938
SQL	O	O:0.999767
would	O	O:0.999980
take	O	O:0.999994
a	O	O:1.000000
fraction	O	O:0.999910
of	O	O:0.999997
a	O	O:0.999992
second	O	O:0.999607
,	O	O:0.999998
even	O	O:0.999877
without	O	O:0.999965
parallelisation	O	O:0.999765
,	O	O:0.999994
on	O	O:0.999989
the	O	O:0.999990
same	O	O:0.999924
machine	O	O:0.999737
.	O	O:0.999930
	
If	O	O:0.999971
this	O	O:0.999918
were	O	O:0.999989
a	O	O:0.999998
one-off	O	O:0.998466
I	O	O:0.999937
wouldn't	O	O:0.999939
invest	O	O:0.999059
time	O	O:0.999967
in	O	O:0.999977
speeding	O	O:0.999951
this	O	O:0.999898
up	O	O:0.999757
,	O	O:0.999988
but	O	O:0.999947
I	O	O:0.999991
must	O	O:0.999966
do	O	O:0.999880
it	O	O:0.999999
multiple	O	O:0.999951
times	O	O:0.999795
on	O	O:0.999998
multiple	O	O:0.999992
dataframes	O	O:0.999969
of	O	O:0.999987
similar	O	O:0.999835
size	O	O:0.999826
.	O	O:0.999794
	
Thanks	O	O:0.998337
-	O	O:0.999982
much	O	O:0.999063
appreciated	O	O:0.999701
.	O	O:0.999696
	
The	O	O:0.999984
data	O	O:0.999966
comes	O	O:0.999945
from	O	O:0.999993
a	O	O:0.999982
Microsoft	O	O:0.999056
SQL	O	O:0.999208
Server	O	O:0.999405
.	O	O:0.999617
	
I	O	O:0.999992
have	O	O:0.999994
a	O	O:0.999992
feeling	O	O:0.998661
I	O	O:0.999968
should	O	O:0.999963
learn	O	O:0.995531
LINQ	O	O:0.999376
and	O	O:0.999926
how	O	O:0.999967
to	O	O:0.999964
apply	O	O:0.982982
it	O	O:0.999887
to	O	O:0.999965
SQL	O	O:0.999989
-	O	O:0.999974
it	O	O:0.999954
might	O	O:0.999982
make	O	O:0.999953
these	O	O:0.999984
things	O	O:0.999948
much	O	O:0.999403
faster	O	O:0.999465
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999976
apply	O	B-API:0.988355
`	O	O:0.999968
,	O	O:0.999959
iterate	O	O:0.999947
over	O	O:0.999912
all	O	O:0.999990
rows	O	O:0.999695
and	O	O:0.999997
replace	O	O:0.999400
0	O	O:0.999927
by	O	O:0.999975
the	O	O:0.999984
maximal	O	O:0.999651
number	O	O:0.999930
of	O	O:0.999996
the	O	O:0.999997
row	O	O:0.999996
by	O	O:0.999986
using	O	O:0.999967
the	O	O:0.999743
`	O	O:0.999889
replace	O	O:0.806639
`	O	O:0.999985
function	O	O:0.999635
which	O	O:0.999976
gives	O	O:0.999882
you	O	O:0.999982
the	O	O:0.999995
expected	O	O:0.999626
output	O	O:0.998804
:	O	O:0.999981
#CODE	O	O:0.999811
	
Here	O	O:0.998040
is	O	O:0.999985
one	O	O:0.999968
workaround	O	O:0.999973
by	O	O:0.999982
defining	O	O:0.999641
customized	O	O:0.994301
`	O	O:0.999984
apply	O	B-API:0.866006
/	O	O:0.999814
map	O	B-API:0.980813
`	O	O:0.999927
function	O	O:0.999856
to	O	O:0.999991
unpack	O	O:0.999650
the	O	O:0.999904
list	O	O:0.994634
.	O	O:0.999906
	
#CODE	O	O:0.998453
	
I	O	O:0.999959
can't	O	O:0.999956
solve	O	O:0.999938
your	O	O:0.999982
exact	O	O:0.999894
problem	O	O:0.999954
unless	O	O:0.999893
you	O	O:0.999964
include	O	O:0.999865
demonstration	O	O:0.999905
code	O	O:0.999596
.	O	O:0.999951
	
You	O	O:0.999861
can't	O	O:0.999898
apply	O	O:0.883022
my	O	O:0.999962
example	O	O:0.999479
to	O	O:0.999999
your	O	O:0.999994
problem	O	O:0.999537
?	O	O:0.999982
	
You	O	O:0.999920
can	O	O:0.999948
use	O	O:0.999994
str.split	B-API	B-API:0.979360
on	O	O:0.999938
the	O	O:0.999964
series	O	O:0.999875
and	O	O:0.999996
apply	O	O:0.965688
a	O	O:0.999670
function	O	O:0.998714
to	O	O:0.999997
the	O	O:0.999997
result	O	O:0.998418
:	O	O:0.999961
#CODE	O	O:0.999909
	
Is	O	O:0.999979
apply	O	O:0.659399
as	O	O:0.999980
efficient	O	O:0.998649
as	O	O:0.999998
this	O	O:0.999323
"	O	O:0.999993
vectorized	O	O:0.998859
"	O	O:0.999779
function	O	O:0.999410
definition	O	O:0.999667
?	O	O:0.999952
	
I	O	O:0.999909
received	O	O:0.999970
this	O	O:0.999644
suggestion	O	O:0.999907
to	O	O:0.999989
avoid	O	O:0.999985
mapping	O	O:0.999727
,	O	O:0.999986
supposedly	O	O:0.999975
doing	O	O:0.999980
loops	O	O:0.999786
of	O	O:0.999945
my	O	O:0.999983
lambda	O	O:0.999482
functions	O	O:0.999392
:	O	O:0.999703
#URL	O	O:0.999667
	
@USER	O	O:0.999553
I	O	O:0.999990
get	O	O:0.999979
an	O	O:0.999767
AttributeError	O	O:0.999176
:	O	O:0.999807
AttributeError	O	O:0.999186
:	O	O:0.999836
'	O	O:0.999952
DatetimeIndex	B-API	O:0.693419
'	O	O:0.999809
object	O	O:0.999894
has	O	O:0.999952
no	O	O:0.999974
attribute	O	O:0.999898
'	O	O:0.999984
apply	O	B-API:0.762579
'	O	O:0.999369
	
OK	O	O:0.999885
the	O	O:0.999952
following	O	O:0.998816
should	O	O:0.999924
work	O	O:0.999968
,	O	O:0.999999
convert	O	O:0.999788
your	O	O:0.999930
datetimeindex	B-API	O:0.928352
to	O	O:0.999999
a	O	O:1.000000
series	O	O:0.999907
so	O	O:0.999997
you	O	O:0.999992
can	O	O:0.999993
call	O	O:0.999946
`	O	O:0.999997
apply	O	B-API:0.997869
`	O	O:0.999932
and	O	O:0.999721
use	O	O:0.999955
`	O	O:0.999636
strftime	B-API	B-API:0.995345
`	O	O:0.999984
to	O	O:0.999959
return	O	O:0.999984
an	O	O:0.999990
array	O	O:0.999988
of	O	O:0.999955
strings	O	O:0.985304
:	O	O:0.999980
#CODE	O	O:0.999890
	
But	O	O:0.999930
,	O	O:0.999996
again	O	O:0.999949
I	O	O:0.999996
want	O	O:0.999984
the	O	O:0.999955
output	O	O:0.999910
of	O	O:0.999992
KDE	O	O:0.999890
of	O	O:0.999996
original	O	O:0.995282
X	O	O:0.999986
not	O	O:0.999977
positions	O	O:0.999922
,	O	O:0.999998
so	O	O:0.999998
I	O	O:0.999993
can	O	O:0.999997
make	O	O:0.999988
first	O	O:0.999988
derivative	O	O:0.999912
on	O	O:0.999986
the	O	O:0.999994
output	O	O:0.999914
of	O	O:0.999957
KDE	O	O:0.999210
.	O	O:0.999915
	
That's	O	O:0.999835
why	O	O:0.999946
I	O	O:0.999945
did	O	O:0.999947
kernel	O	O:0.985936
(	O	O:0.999982
X	O	O:0.999855
)	O	O:0.999957
.	O	O:0.999769
	
I'd	O	O:0.999952
prefer	O	O:0.999905
if	O	O:0.999991
you	O	O:0.999984
could	O	O:0.999980
write	O	O:0.999997
an	O	O:0.999994
answer	O	O:0.999972
with	O	O:0.999989
your	O	O:0.999831
supported	O	O:0.999950
code	O	O:0.999934
to	O	O:0.999996
plot	O	O:0.999993
pdf	O	O:0.999932
output	O	O:0.999878
vs	O	O:0.999989
KDE	O	O:0.999806
of	O	O:0.999996
original	O	O:0.999849
data	O	O:0.999948
and	O	O:0.999997
save	O	O:0.999817
the	O	O:0.999973
output	O	O:0.999816
of	O	O:0.999978
KDE	O	O:0.999884
to	O	O:0.999994
apply	O	O:0.949467
first	O	O:0.999550
derivative	O	O:0.999474
on	O	O:0.999956
it	O	O:0.999965
	
I	O	O:0.999911
couldn't	O	O:0.999947
find	O	O:0.999820
an	O	O:0.999994
answer	O	O:0.999925
to	O	O:0.999998
this	O	O:0.999992
in	O	O:0.999996
the	O	O:0.999998
existing	O	O:0.999153
`	O	O:0.999916
SettingWithCopy	O	O:0.541353
`	O	O:0.999988
warning	O	O:0.999308
questions	O	O:0.999840
,	O	O:0.999991
because	O	O:0.999969
the	O	O:0.999978
common	O	O:0.998895
`	O	O:0.999987
.loc	B-API	B-API:0.996975
`	O	O:0.999985
solution	O	O:0.996842
doesn't	O	O:0.999975
seem	O	O:0.999893
to	O	O:0.999993
apply	O	O:0.913746
.	O	O:0.999342
	
I'm	O	O:0.999951
loading	O	O:0.999825
a	O	O:0.999996
table	O	O:0.999823
into	O	O:0.999915
pandas	O	O:0.999972
then	O	O:0.999911
trying	O	O:0.999995
to	O	O:0.999998
create	O	O:0.999988
some	O	O:0.999984
mask	O	O:0.993280
columns	O	O:0.999983
based	O	O:0.999984
on	O	O:0.999998
values	O	O:0.999402
in	O	O:0.999993
the	O	O:0.999998
other	O	O:0.999948
columns	O	O:0.999670
.	O	O:0.999908
	
For	O	O:0.999979
some	O	O:0.999648
reason	O	O:0.999742
,	O	O:0.999998
this	O	O:0.999979
returns	O	O:0.999954
a	O	O:0.999980
`	O	O:0.999880
SettingWithCopy	O	O:0.602006
`	O	O:0.999985
warning	O	O:0.999704
even	O	O:0.999933
when	O	O:0.999936
I'm	O	O:0.999990
wrapping	O	O:0.999946
the	O	O:0.999987
test	O	O:0.997836
in	O	O:0.999998
a	O	O:0.999996
`	O	O:0.999944
pd.Series	B-API	B-API:0.998985
`	O	O:0.999975
constructor	O	O:0.997728
.	O	O:0.999934
	
Data	O	O:0.999890
type	O	O:0.998636
of	O	O:0.999993
pandas	O	O:0.999980
column	O	O:0.999996
changes	O	O:0.999736
to	O	O:0.999978
object	O	O:0.999997
when	O	O:0.999581
it's	O	O:0.999980
passed	O	O:0.999967
to	O	O:0.999997
a	O	O:0.999998
function	O	O:0.999870
via	O	O:0.999947
apply	O	B-API:0.508085
?	O	O:0.999446
	
I	O	O:0.999993
need	O	O:0.999991
to	O	O:0.999961
use	O	O:0.999999
the	O	O:0.999779
`	O	O:0.999968
dtype	B-API	B-API:0.990182
`	O	O:0.999998
of	O	O:0.999925
a	O	O:0.999997
pandas	O	O:0.999952
column	O	O:0.999929
in	O	O:0.999996
a	O	O:0.999962
function	O	O:0.999009
,	O	O:0.999985
but	O	O:0.999977
for	O	O:0.999996
some	O	O:0.999754
reason	O	O:0.999965
when	O	O:0.999890
I	O	O:0.999998
call	O	O:0.999949
the	O	O:0.999625
function	O	O:0.999241
using	O	O:0.999686
`	O	O:0.999958
apply	O	B-API:0.991423
`	O	O:0.999918
,	O	O:0.999902
the	O	O:0.999986
`	O	O:0.999969
dtype	B-API	B-API:0.997350
`	O	O:0.999981
is	O	O:0.999850
changed	O	O:0.999596
to	O	O:0.999927
`	O	O:0.999994
object	O	O:0.995144
`	O	O:0.999987
.	O	O:0.999687
	
Does	O	O:0.999400
anyone	O	O:0.999806
know	O	O:0.999855
what	O	O:0.999205
is	O	O:0.999986
happening	O	O:0.999664
here	O	O:0.999344
?	O	O:0.999933
	
#CODE	O	O:0.998453
	
It	O	O:0.999936
appears	O	O:0.999939
to	O	O:0.999992
be	O	O:0.999999
due	O	O:0.999980
to	O	O:0.999985
an	O	O:0.999999
optimization	O	O:0.999893
in	O	O:0.999925
`	O	O:0.999992
DataFrame._apply_standard	O	O:0.967755
`	O	O:0.999983
.	O	O:0.999486
	
The	O	O:0.999838
"	O	O:0.999978
fast	O	O:0.999392
path	O	O:0.999869
"	O	O:0.999966
in	O	O:0.999982
the	O	O:0.999997
code	O	O:0.999815
of	O	O:0.999964
that	O	O:0.999776
method	O	O:0.999998
creates	O	O:0.999771
an	O	O:0.999981
output	O	O:0.999816
Series	O	O:0.999913
whose	O	O:0.999885
dtype	B-API	B-API:0.994904
is	O	O:0.999979
the	O	O:0.999933
dtype	B-API	B-API:0.960607
of	O	O:0.999828
`	O	O:0.999808
df.values	B-API	B-API:0.976553
`	O	O:0.999994
,	O	O:0.999967
which	O	O:0.999951
in	O	O:0.999998
your	O	O:0.999970
case	O	O:0.999738
is	O	O:0.999990
`	O	O:0.999939
object	O	O:0.998400
`	O	O:0.999995
since	O	O:0.999366
the	O	O:0.999990
DataFrame	B-API	O:0.997359
is	O	O:0.999970
of	O	O:0.999968
mixed	O	O:0.998125
type	O	O:0.998339
.	O	O:0.999818
	
If	O	O:0.999969
you	O	O:0.999992
pass	O	O:0.999172
`	O	O:0.999997
reduce=False	O	O:0.996698
`	O	O:0.999994
to	O	O:0.999996
your	O	O:0.999997
`	O	O:0.999988
apply	O	B-API:0.904660
`	O	O:0.999988
call	O	O:0.970559
,	O	O:1.000000
the	O	O:0.999766
result	O	O:0.999270
is	O	O:0.999960
correct	O	O:0.998550
:	O	O:0.999986
#CODE	O	O:0.999846
	
As	O	O:0.999874
you're	O	O:0.999958
trying	O	O:0.999953
to	O	O:0.999998
learn	O	O:0.999955
categories	O	O:0.999867
from	O	O:0.999880
one	O	O:0.999994
DataFrame	B-API	O:0.999361
to	O	O:0.999996
apply	O	O:0.983844
to	O	O:0.999988
a	O	O:0.999999
different	O	O:0.999689
DataFrame	B-API	O:0.995938
,	O	O:0.999997
using	O	O:0.999900
scikit-learn	O	O:0.982533
might	O	O:0.999780
provide	O	O:0.999891
a	O	O:0.999998
more	O	O:0.999445
elegant	O	O:0.999052
solution	O	O:0.998479
:	O	O:0.999969
#CODE	O	O:0.999811
	
Or	O	O:0.999927
use	O	O:0.999816
`	O	O:0.999942
apply	O	B-API:0.997499
`	O	O:0.999449
:	O	O:0.999171
#CODE	O	O:0.999898
	
By	O	O:0.999972
the	O	O:0.999968
way	O	O:0.999919
,	O	O:0.999994
you	O	O:0.999989
can	O	O:0.999991
apply	O	O:0.998888
your	O	O:0.999937
logic	O	O:0.999846
of	O	O:0.999991
`	O	O:0.999975
df	O	O:0.999561
[	O	O:0.999993
df	O	O:0.999334
[	O	O:0.999916
'	O	O:0.999982
col_1	O	O:0.998699
']	O	O:0.999943
!	O	O:0.999632
=	O	O:0.999773
754	O	O:0.999933
]`	O	O:0.999988
also	O	O:0.999836
on	O	O:0.999990
the	O	O:0.999940
index	O	O:0.999775
.	O	O:0.999876
	
This	O	O:0.999216
would	O	O:0.999978
give	O	O:0.999940
`	O	O:0.999998
df	O	O:0.996085
[	O	O:0.999989
df.index	O	O:0.977829
!	O	O:0.999906
=	O	O:0.999899
754	O	O:0.999919
]`	O	O:0.999856
,	O	O:0.999953
although	O	O:0.999990
this	O	O:0.999243
would	O	O:0.999980
not	O	O:0.999998
work	O	O:0.999994
with	O	O:0.999990
a	O	O:0.999985
multi-index	O	O:0.999412
	
I	O	O:0.999979
know	O	O:0.999980
that	O	O:0.999861
I	O	O:0.999997
can	O	O:0.999998
simply	O	O:0.999987
do	O	O:0.999998
one	O	O:0.999993
datetime	O	O:0.999407
minus	O	O:0.999811
the	O	O:0.999991
other	O	O:0.999910
to	O	O:0.999993
find	O	O:0.999993
the	O	O:0.999992
timedelta	O	O:0.969709
-	O	O:0.999982
but	O	O:0.999951
I	O	O:0.999993
don't	O	O:0.999978
know	O	O:0.999474
how	O	O:0.999990
to	O	O:0.999980
apply	O	O:0.996575
this	O	O:0.999743
to	O	O:0.999997
make	O	O:0.999999
a	O	O:0.999997
new	O	O:0.999807
column	O	O:0.999700
.	O	O:0.999876
	
There	O	O:0.999313
is	O	O:0.999990
an	O	O:0.999963
`	O	O:0.999991
apply	O	B-API:0.972013
`	O	O:0.999899
for	O	O:0.999661
that	O	O:0.998503
:	O	O:0.999963
#CODE	O	O:0.999877
	
The	O	O:0.999952
code	O	O:0.993444
is	O	O:0.999987
not	O	O:0.999976
that	O	O:0.999983
efficient	O	O:0.999944
,	O	O:0.999994
Is	O	O:0.999997
there	O	O:0.999980
a	O	O:0.999999
more	O	O:0.999622
efficient	O	O:0.999878
way	O	O:0.999981
to	O	O:0.999978
do	O	O:0.999999
this	O	O:0.999913
?	O	O:0.999968
	
I	O	O:0.999912
would	O	O:0.999978
assume	O	O:0.999960
there	O	O:0.999989
must	O	O:0.999901
be	O	O:0.999999
some	O	O:0.999982
special	O	O:0.987680
function	O	O:0.999422
(	O	O:0.999990
such	O	O:0.999977
as	O	O:0.999994
apply	O	B-API:0.924170
,	O	O:0.999973
roll_apply	O	O:0.989413
)	O	O:0.999987
to	O	O:0.999989
iterate	O	O:0.999985
through	O	O:0.999922
these	O	O:0.999948
values	O	O:0.998839
,	O	O:0.999987
but	O	O:0.999986
I	O	O:0.999983
couldn't	O	O:0.999876
figure	O	O:0.999823
that	O	O:0.999878
out	O	O:0.999939
.	O	O:0.999952
	
Any	O	O:0.999875
help	O	O:0.997309
would	O	O:0.999933
be	O	O:0.999992
appreciated	O	O:0.999898
.	O	O:0.999519
	
how	O	O:0.999933
do	O	O:0.999969
I	O	O:0.999998
apply	O	O:0.898679
normalize	O	B-API:0.967483
function	O	O:0.999401
to	O	O:0.999993
pandas	O	O:0.999994
string	O	O:0.999894
series	O	O:0.999757
?	O	O:0.999967
	
I	O	O:0.999922
would	O	O:0.999996
like	O	O:0.999956
to	O	O:0.999999
apply	O	O:0.964240
the	O	O:0.999952
following	O	O:0.995692
function	O	O:0.999946
to	O	O:0.999994
a	O	O:1.000000
dataframe	B-API	O:0.992006
series	O	O:0.999704
:	O	O:0.999970
	
How	O	O:0.999939
do	O	O:0.999966
I	O	O:0.999996
apply	O	O:0.734896
the	O	O:0.998589
`	O	O:0.999925
normalize	O	B-API:0.923372
`	O	O:0.999982
function	O	O:0.999901
to	O	O:0.999998
all	O	O:1.000000
members	O	O:0.999879
of	O	O:0.999991
the	O	O:0.999981
series	O	O:0.999906
?	O	O:0.999938
	
If	O	O:0.999898
`	O	O:0.999989
c	O	O:0.998719
`	O	O:0.999987
is	O	O:0.999987
your	O	O:0.999877
string	O	O:0.999776
column	O	O:0.999675
.	O	O:0.999908
	
`	O	O:0.999868
map	O	B-API:0.992459
`	O	O:0.999946
is	O	O:0.999955
used	O	O:0.999885
to	O	O:0.999990
apply	O	O:0.986302
a	O	O:0.999444
function	O	O:0.998452
elementwise	O	O:0.995090
(	O	O:0.999976
and	O	O:0.999997
of	O	O:0.999995
course	O	O:0.999426
you	O	O:0.999985
wouldn't	O	O:0.999979
have	O	O:0.999984
to	O	O:0.999998
chain	O	O:0.999979
it	O	O:0.999998
all	O	O:0.999992
together	O	O:0.999923
like	O	O:0.999983
this	O	O:0.999874
)	O	O:0.999985
#CODE	O	O:0.999397
	
This	O	O:0.999233
was	O	O:0.999949
written	O	O:0.999076
in	O	O:0.999989
Python	O	O:0.999652
2	O	O:0.999906
,	O	O:0.999959
but	O	O:0.999975
the	O	O:0.999981
basic	O	O:0.999390
idea	O	O:0.999455
should	O	O:0.999952
work	O	O:0.999966
for	O	O:0.999996
you	O	O:0.999878
.	O	O:0.999904
	
It	O	O:0.999929
uses	O	O:0.999540
the	O	O:0.999977
apply	O	B-API:0.986963
function	O	O:0.992639
:	O	O:0.999857
#CODE	O	O:0.999876
	
Note	O	O:0.999960
that	O	O:0.999975
if	O	O:0.999998
you	O	O:0.999990
loaded	O	O:0.999917
the	O	O:0.999998
other	O	O:0.999966
keys	O	O:0.999872
into	O	O:0.999675
the	O	O:0.999995
dict	O	O:0.999417
,	O	O:0.999997
you	O	O:0.999991
could	O	O:0.999979
do	O	O:0.999999
the	O	O:0.999998
apply	O	B-API:0.700956
without	O	O:0.998673
the	O	O:0.999905
swapper	O	O:0.962823
function	O	O:0.998970
:	O	O:0.999961
#CODE	O	O:0.999888
	
Could	O	O:0.999506
you	O	O:0.999986
post	O	O:0.999875
an	O	O:0.999997
array	O	O:0.999995
form	O	O:0.999966
of	O	O:0.999997
the	O	O:0.999998
data	O	O:0.999987
so	O	O:0.999996
I	O	O:0.999998
can	O	O:0.999997
play	O	O:0.999879
with	O	O:0.999987
it	O	O:0.999997
a	O	O:0.999996
bit	O	O:0.999225
?	O	O:0.999943
	
Also	O	O:0.999802
,	O	O:0.999994
consider	O	O:0.999953
creating	O	O:0.999920
a	O	O:0.999995
new	O	O:0.998907
function	O	O:0.999977
to	O	O:0.999986
use	O	O:0.999993
in	O	O:0.999941
the	O	O:0.999981
apply	O	B-API:0.582217
for	O	O:0.999759
now	O	O:0.999778
until	O	O:0.999850
you	O	O:0.999972
can	O	O:0.999995
work	O	O:0.999999
the	O	O:0.999998
problem	O	O:0.999749
out	O	O:0.999818
.	O	O:0.999927
	
Simply	O	O:0.999676
add	O	O:0.999860
axis	O	O:0.999916
=	O	O:0.999813
1	O	O:0.999953
to	O	O:0.999998
your	O	O:0.999990
apply	O	B-API:0.872082
function	O	O:0.998943
and	O	O:0.999953
it	O	O:0.999988
will	O	O:0.999330
work	O	O:0.999481
:	O	O:0.999988
#CODE	O	O:0.999900
	
You	O	O:0.999891
add	O	O:0.999927
the	O	O:0.999994
column	O	O:0.999788
to	O	O:0.999997
the	O	O:0.999999
subgroup	O	O:0.999779
inside	O	O:0.999920
the	O	O:0.999987
apply	O	B-API:0.947300
function	O	O:0.998572
,	O	O:0.999957
and	O	O:0.999999
then	O	O:0.999958
when	O	O:0.999959
you	O	O:0.999994
return	O	O:0.999966
that	O	O:0.999915
subgroup	O	O:0.999908
it	O	O:0.999988
replaces	O	O:0.999637
the	O	O:0.999994
existing	O	O:0.998704
subgroup	O	O:0.997922
.	O	O:0.999805
	
The	O	O:0.999866
way	O	O:0.999983
that	O	O:0.999935
I	O	O:0.999999
have	O	O:0.999987
found	O	O:0.999647
to	O	O:0.999994
do	O	O:0.999990
is	O	O:0.999996
by	O	O:0.999978
making	O	O:0.999960
a	O	O:0.999995
copy	O	O:0.973881
of	O	O:0.999995
the	O	O:0.999769
column	O	O:0.999656
and	O	O:0.999995
operating	O	O:0.999830
on	O	O:0.999840
it	O	O:0.999916
(	O	O:0.999994
I	O	O:0.999999
have	O	O:0.999987
to	O	O:0.999968
do	O	O:1.000000
this	O	O:0.999981
because	O	O:0.999993
a	O	O:0.999975
`	O	O:0.999943
DateTimeIndex	B-API	B-API:0.944036
`	O	O:0.999975
has	O	O:0.999870
no	O	O:0.999981
`	O	O:0.999987
apply	O	B-API:0.997951
`	O	O:0.999899
method	O	O:0.998304
)	O	O:0.999983
.	O	O:0.999835
	
I	O	O:0.999957
am	O	O:0.999997
sure	O	O:0.999643
there	O	O:0.999980
must	O	O:0.999963
be	O	O:0.999999
a	O	O:0.999998
way	O	O:0.999732
to	O	O:0.999991
operate	O	O:0.999989
on	O	O:0.999958
the	O	O:0.999997
index	O	O:0.999977
directly	O	O:0.999561
though	O	O:0.999930
but	O	O:0.999975
I	O	O:0.999943
could	O	O:0.999947
not	O	O:0.999981
find	O	O:0.999802
it	O	O:0.999920
:	O	O:0.999978
#CODE	O	O:0.999869
	
It	O	O:0.999949
could	O	O:0.999920
be	O	O:1.000000
done	O	O:0.999981
by	O	O:0.999970
calling	O	O:0.998555
`	O	O:0.999955
apply	O	B-API:0.967685
`	O	O:0.999972
on	O	O:0.999923
the	O	O:0.999997
df	O	O:0.999963
like	O	O:0.999701
so	O	O:0.999903
:	O	O:0.999980
#CODE	O	O:0.999884
	
This	O	O:0.999846
uses	O	O:0.999513
double	O	O:0.996602
subscripts	O	O:0.998068
`	O	O:0.999886
[[	O	O:0.999957
]]`	O	O:0.999973
to	O	O:0.999960
call	O	O:0.999826
`	O	O:0.999994
apply	O	B-API:0.991589
`	O	O:0.999989
on	O	O:0.999978
a	O	O:0.999999
df	O	O:0.999844
with	O	O:0.999986
a	O	O:0.999998
single	O	O:0.999837
column	O	O:0.999922
,	O	O:0.999998
this	O	O:0.999966
allows	O	O:0.999900
you	O	O:0.999985
to	O	O:0.999999
pass	O	O:0.999979
param	O	O:0.999616
`	O	O:0.999996
axis=1	O	O:0.997663
`	O	O:0.999997
so	O	O:0.999974
you	O	O:0.999993
can	O	O:0.999994
call	O	O:0.999980
you	O	O:0.999972
function	O	O:0.999903
row-wise	O	O:0.999581
,	O	O:0.999996
you	O	O:0.999997
then	O	O:0.999994
have	O	O:1.000000
access	O	O:0.999945
to	O	O:0.999987
the	O	O:0.999999
index	O	O:0.999816
attribute	O	O:0.999981
,	O	O:0.999996
which	O	O:0.999772
is	O	O:0.999942
`	O	O:0.999992
name	O	O:0.998589
`	O	O:0.999982
and	O	O:0.999985
the	O	O:0.999996
column	O	O:0.999535
name	O	O:0.999942
attribute	O	O:0.999982
,	O	O:0.999993
which	O	O:0.999634
is	O	O:0.999834
`	O	O:0.999980
index	O	O:0.998436
`	O	O:0.999990
,	O	O:0.999994
this	O	O:0.999980
allows	O	O:0.999901
you	O	O:0.999985
to	O	O:0.999998
slice	O	O:0.999999
your	O	O:0.999983
df	O	O:0.999943
to	O	O:0.999998
calculate	O	O:0.999991
a	O	O:0.999999
rolling	O	O:0.913998
`	O	O:0.999951
std	O	O:0.931198
`	O	O:0.999977
.	O	O:0.999203
	
However	O	O:0.999774
,	O	O:0.999997
when	O	O:0.999928
I	O	O:0.999995
apply	O	O:0.917229
this	O	O:0.995841
method	O	O:0.999936
to	O	O:0.999998
whole	O	O:0.999998
length	O	O:0.999964
of	O	O:0.999992
data	O	O:0.999952
,	O	O:0.999997
I	O	O:0.999994
couldn't	O	O:0.999886
wait	O	O:0.999225
until	O	O:0.999909
the	O	O:0.999923
operation	O	O:0.998375
was	O	O:0.999934
done	O	O:0.999738
.	O	O:0.999925
	
Not	O	O:0.999959
sure	O	O:0.999933
what	O	O:0.999908
you	O	O:0.999997
mean	O	O:0.999990
by	O	O:0.999999
your	O	O:0.999786
comment	O	O:0.998229
@USER	O	O:0.999756
.	O	O:0.999723
	
I	O	O:0.999948
did	O	O:0.999957
use	O	O:0.999633
pd.DataFrame()	B-API	B-API:0.996144
on	O	O:0.999990
each	O	O:0.999903
of	O	O:0.999999
your	O	O:0.999840
dict's	O	O:0.999948
,	O	O:0.999995
however	O	O:0.999852
,	O	O:0.999998
what	O	O:0.999923
I	O	O:0.999977
did	O	O:0.999970
was	O	O:0.999919
apply	O	O:0.866426
a	O	O:0.999979
dict	O	O:0.998688
comprehension	O	O:0.999918
using	O	O:0.999995
each	O	O:0.998294
of	O	O:0.999995
them	O	O:0.999801
to	O	O:0.999999
strip	O	O:0.963458
out	O	O:0.999929
the	O	O:0.999989
nested	O	O:0.998270
zeros	B-API	O:0.648119
.	O	O:0.999832
	
pd.concat()	B-API	B-API:0.995338
just	O	O:0.999485
took	O	O:0.999955
all	O	O:0.999998
three	O	O:0.999926
of	O	O:0.999973
the	O	O:0.999976
DataFrame's	O	O:0.999732
from	O	O:0.999588
dict's	O	O:0.999279
and	O	O:0.999987
concatenates	O	O:0.999977
them	O	O:0.999799
all	O	O:0.999976
together	O	O:0.998624
.	O	O:0.999834
	
Python	O	O:0.998400
pandas	O	O:0.998299
:	O	O:0.999991
banal	O	O:0.997344
apply	O	O:0.721491
statements	O	O:0.999260
incredibly	O	O:0.999227
slow	O	O:0.998996
	
apply	O	O:0.534605
sum	O	O:0.998988
calculated	O	O:0.999549
using	O	O:0.999964
pandas	O	O:0.999714
group	O	O:0.999237
by	O	O:0.999965
to	O	O:0.999988
all	O	O:1.000000
elements	O	O:0.999944
of	O	O:0.999982
group	O	O:0.996484
	
Please	O	O:0.999428
suggest	O	O:0.999615
how	O	O:0.999973
can	O	O:0.999972
I	O	O:1.000000
apply	O	O:0.989720
sum	O	O:0.998053
on	O	O:0.999994
all	O	O:0.999999
rows	O	O:0.999947
of	O	O:0.999995
one	O	O:0.999995
account	O	O:0.999509
.	O	O:0.999904
	
You	O	O:0.999952
can	O	O:0.999926
use	O	O:0.999996
the	O	O:0.999939
`	O	O:0.999807
map	O	B-API:0.999311
`	O	O:0.999991
method	O	O:0.999902
on	O	O:0.999999
your	O	O:0.999966
json-text	O	O:0.999845
column	O	O:0.999975
to	O	O:0.999997
apply	O	O:0.994029
a	O	O:0.999860
`	O	O:0.999862
lambda	O	O:0.996293
`	O	O:0.999969
function	O	O:0.998712
which	O	O:0.999970
will	O	O:0.999952
parse	O	O:0.999822
the	O	O:0.999998
json	O	O:0.999719
using	O	O:0.999848
`	O	O:0.999861
json.loads	O	O:0.502596
`	O	O:0.999998
then	O	O:0.998877
return	O	O:0.999985
the	O	O:0.999978
field	O	O:0.999869
that	O	O:0.999927
you	O	O:0.999997
want	O	O:0.999959
.	O	O:0.999918
	
#CODE	O	O:0.998453
	
You	O	O:0.999952
can	O	O:0.999928
use	O	O:0.999997
the	O	O:0.999899
`	O	O:0.999901
loc	O	B-API:0.997984
`	O	O:0.999994
method	O	O:0.999900
of	O	O:0.999998
a	O	O:0.999996
dataframe	B-API	O:0.999453
to	O	O:0.999989
select	O	O:0.999968
certain	O	O:0.999902
columns	O	O:0.999984
based	O	O:0.999957
on	O	O:0.999996
a	O	O:0.999969
Boolean	O	O:0.995502
indexer	O	O:0.998115
.	O	O:0.999756
	
Create	O	O:0.999333
the	O	O:0.999911
indexer	O	O:0.999194
like	O	O:0.999916
this	O	O:0.999522
(	O	O:0.999994
uses	O	O:0.999618
Numpy	O	O:0.999198
Array	O	O:0.999823
broadcasting	O	O:0.999778
to	O	O:0.999985
apply	O	O:0.961307
the	O	O:0.999925
condition	O	O:0.999673
to	O	O:0.999998
each	O	O:0.999990
column	O	O:0.999005
):	O	O:0.999982
#CODE	O	O:0.999792
	
I	O	O:0.999973
can	O	O:0.999987
see	O	O:0.999997
from	O	O:0.999998
your	O	O:0.999844
output	O	O:0.999917
that	O	O:0.999993
this	O	O:0.999921
is	O	O:0.999996
exactly	O	O:0.999948
what	O	O:0.999894
I	O	O:0.999993
want	O	O:0.999910
.	O	O:0.999073
	
However	O	O:0.999857
,	O	O:0.999984
I	O	O:0.999997
cant	O	O:0.999864
recreate	O	O:0.999478
it	O	O:0.999995
because	O	O:0.999973
our	O	O:0.999965
initial	O	O:0.999837
dataframes	O	O:0.999766
are	O	O:0.999982
created	O	O:0.999571
in	O	O:0.999989
different	O	O:0.999867
ways	O	O:0.999262
.	O	O:0.999855
	
I'm	O	O:0.999969
using	O	O:0.999976
a	O	O:0.999951
groupby	B-API	B-API:0.997071
to	O	O:0.999977
set	O	O:0.999934
the	O	O:0.999988
initial	O	O:0.999426
split	O	O:0.986127
and	O	O:0.999806
sex	O	O:0.999140
index	O	O:0.998177
.	O	O:0.999756
	
Then	O	O:0.999559
,	O	O:0.999999
if	O	O:0.999998
I	O	O:0.999988
use	O	O:0.999998
your	O	O:0.996411
code	O	O:0.996785
:	O	O:0.999995
level_group	O	O:0.996366
=	O	O:0.999778
np.where	B-API	B-API:0.993939
(	O	O:0.999949
df.columns.str.contains	O	O:0.986438
(	O	O:0.999972
'	O	O:0.999987
0	O	O:0.999956
')	O	O:0.999985
,	O	O:0.999948
0	O	O:0.999935
,	O	O:0.999985
1	O	O:0.999944
)	O	O:0.999992
on	O	O:0.999983
my	O	O:0.999959
groupby	B-API	B-API:0.989460
(	O	O:0.999986
replacing	O	O:0.999375
the	O	O:0.999976
df	O	O:0.999681
)	O	O:0.999992
,	O	O:0.999992
I	O	O:0.999998
get	O	O:0.999991
an	O	O:0.999921
error	O	O:0.999293
:	O	O:0.999978
Cannot	O	O:0.999959
access	O	O:0.999742
attribute	O	O:0.999924
'	O	O:0.999991
columns	O	O:0.999897
'	O	O:0.999994
of	O	O:0.999916
'	O	O:0.999938
DataFrameGroupBy	B-API	B-API:0.729006
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954730
'	O	O:0.999052
method	O	O:0.999572
	
What	O	O:0.999524
I	O	O:0.999971
did	O	O:0.999877
is	O	O:0.999965
to	O	O:0.999972
apply	O	O:0.992608
this	O	O:0.999018
function	O	O:0.999959
to	O	O:0.999995
get	O	O:0.999999
the	O	O:0.999999
count	O	O:0.999750
of	O	O:0.999998
repeating	O	O:0.999876
elements	O	O:0.999875
in	O	O:0.999890
B	O	O:0.999867
#CODE	O	O:0.999684
	
Apply	O	O:0.999361
async	O	O:0.997320
usage	O	O:0.997220
:	O	O:0.999679
	
@USER	O	O:0.995784
I'm	O	O:0.999912
not	O	O:0.999994
sure	O	O:0.999826
in	O	O:0.999997
this	O	O:0.999970
case	O	O:0.999983
,	O	O:0.999998
you	O	O:0.999988
could	O	O:0.999963
use	O	O:0.999995
`	O	O:0.999975
%timeit	O	O:0.888829
`	O	O:0.999987
in	O	O:0.999865
ipython	O	O:0.999890
to	O	O:0.999981
compare	O	O:0.999832
.	O	O:0.999929
	
Generally	O	O:0.999875
speaking	O	O:0.998984
,	O	O:0.999989
the	O	O:0.999991
advantage	O	O:0.999877
of	O	O:0.999988
pandas	O	O:0.998320
is	O	O:0.999998
crunching	O	O:0.998881
numbers	O	O:0.999710
not	O	O:0.999961
strings	O	O:0.999906
,	O	O:0.999993
so	O	O:0.999991
it	O	O:0.999907
might	O	O:0.999961
not	O	O:0.999986
matter	O	O:0.999980
too	O	O:0.999937
much	O	O:0.999286
.	O	O:0.999818
	
But	O	O:0.999928
generally	O	O:0.999817
speaking	O	O:0.999301
,	O	O:0.999945
`	O	O:0.999984
apply	O	B-API:0.941670
/	O	O:0.999955
lambda	O	O:0.994399
`	O	O:0.999976
will	O	O:0.999567
be	O	O:0.999998
slower	O	O:0.999959
than	O	O:0.999829
using	O	O:0.999950
built	O	O:0.992360
in	O	O:0.999926
pandas	O	O:0.999588
methods	O	O:0.999602
.	O	O:0.999698
	
Pandas	O	O:0.997014
:	O	O:0.999967
Apply	O	O:0.999384
function	O	O:0.999946
via	O	O:0.999567
"	O	O:0.999957
Column	O	O:0.998494
A	O	O:0.999965
"	O	O:0.999987
,	O	O:0.999981
simultaneously	O	O:0.999921
reading	O	O:0.998431
"	O	O:0.999933
Column	O	O:0.999676
B	O	O:0.999722
"	O	O:0.999875
	
In	O	O:0.999952
the	O	O:0.999951
`	O	O:0.999989
csv	O	O:0.995422
`	O	O:0.999996
,	O	O:0.999987
there	O	O:0.999891
is	O	O:0.999996
also	O	O:0.999976
a	O	O:0.999995
`"	O	O:0.999507
Column	O	O:0.999519
B	O	O:0.999917
"`	O	O:0.999971
that	O	O:0.999807
contains	O	O:0.999929
values	O	O:0.999985
that	O	O:0.999912
I	O	O:1.000000
want	O	O:0.999979
to	O	O:0.999957
read	O	O:0.999989
into	O	O:0.999912
a	O	O:0.999998
variable	O	O:0.998039
`	O	O:0.999991
x	O	O:0.998411
`	O	O:0.999990
within	O	O:0.999423
the	O	O:0.999896
function	O	O:0.999567
.	O	O:0.999802
	
It	O	O:0.999520
should	O	O:0.999842
not	O	O:0.999990
`	O	O:0.999998
apply	O	B-API:0.951440
`	O	O:0.999988
from	O	O:0.995543
`"	O	O:0.999972
Column	O	O:0.999657
B	O	O:0.999850
"`	O	O:0.999979
this	O	O:0.999231
should	O	O:0.999979
still	O	O:0.999956
be	O	O:0.999999
done	O	O:0.999972
from	O	O:0.999351
`"	O	O:0.999859
Column	O	O:0.999138
A	O	O:0.999963
"`	O	O:0.999823
.	O	O:0.999300
	
Is	O	O:0.999989
this	O	O:0.999943
possible	O	O:0.999845
?	O	O:0.999971
	
Post-edit	O	O:0.989571
:	O	O:0.999975
This	O	O:0.999895
question	O	O:0.999721
has	O	O:0.999949
been	O	O:0.999805
identified	O	O:0.999961
as	O	O:0.999997
a	O	O:0.999990
possible	O	O:0.999830
duplicate	O	O:0.999992
of	O	O:0.999995
another	O	O:0.999676
question	O	O:0.999606
.	O	O:0.999773
	
Although	O	O:0.999886
the	O	O:0.999971
answer	O	O:0.999820
may	O	O:0.999967
be	O	O:0.999996
the	O	O:0.999999
same	O	O:0.999736
,	O	O:0.999995
the	O	O:0.999992
question	O	O:0.994061
is	O	O:0.999981
not	O	O:0.999960
the	O	O:0.999996
same	O	O:0.999721
.	O	O:0.999875
	
For	O	O:0.999875
future	O	O:0.999634
readers	O	O:0.999456
it	O	O:0.999872
is	O	O:0.999984
probably	O	O:0.999815
not	O	O:0.999976
apparent	O	O:0.999963
that	O	O:0.999740
`	O	O:0.999995
apply	O	B-API:0.888353
`	O	O:0.999954
on	O	O:0.999897
two	O	O:0.999998
columns	O	O:0.999811
is	O	O:0.999989
interchangeable	O	O:0.999744
with	O	O:0.999852
`	O	O:0.999970
apply	O	B-API:0.928614
`	O	O:0.999970
on	O	O:0.999892
one	O	O:0.999996
column	O	O:0.999922
and	O	O:0.999985
"	O	O:0.999996
reading	O	O:0.996300
"	O	O:0.999985
another	O	O:0.999942
column	O	O:0.999907
at	O	O:0.999990
the	O	O:0.999986
same	O	O:0.999904
time	O	O:0.999788
.	O	O:0.999953
	
The	O	O:0.999812
question	O	O:0.999503
should	O	O:0.999986
therefore	O	O:0.999992
remain	O	O:0.999942
open	O	O:0.998579
.	O	O:0.999946
	
possible	O	O:0.999872
duplicate	O	O:0.999967
of	O	O:0.999905
[	O	O:0.999937
How	O	O:0.999991
to	O	O:0.999991
apply	O	O:0.993672
a	O	O:0.999883
function	O	O:0.999014
to	O	O:0.999996
two	O	O:1.000000
columns	O	O:0.999962
of	O	O:0.999985
Pandas	O	O:0.999965
dataframe	B-API	O:0.997974
]	O	O:0.999418
(	O	O:0.999937
#URL	O	O:0.999458
)	O	O:0.999915
	
The	O	O:0.999812
`	O	O:0.999973
axis=1	O	O:0.992440
`	O	O:0.999987
argument	O	O:0.999825
passed	O	O:0.999637
to	O	O:0.999989
the	O	O:0.999991
apply	O	B-API:0.901365
method	O	O:0.999807
puts	O	O:0.999530
the	O	O:0.999999
whole	O	O:0.999740
row	O	O:0.999958
into	O	O:0.999804
the	O	O:0.999901
apply	O	B-API:0.896553
method	O	O:0.999847
as	O	O:0.999995
a	O	O:0.999996
single	O	O:0.998813
tuple	O	O:0.999233
argument	O	O:0.999727
.	O	O:0.999741
	
This	O	O:0.999306
is	O	O:0.999997
a	O	O:0.999992
really	O	O:0.999624
messy	O	O:0.999829
way	O	O:0.999965
to	O	O:0.999969
do	O	O:1.000000
this	O	O:0.999960
,	O	O:0.999999
first	O	O:0.999915
use	O	O:0.999757
`	O	O:0.999866
first_valid_index	B-API	B-API:0.999289
`	O	O:0.999996
to	O	O:0.999954
get	O	O:0.999999
the	O	O:0.999996
valid	O	O:0.999958
columns	O	O:0.999894
,	O	O:0.999996
convert	O	O:0.999247
the	O	O:0.999990
returned	O	O:0.999734
series	O	O:0.999950
to	O	O:0.999996
a	O	O:1.000000
dataframe	B-API	O:0.998290
so	O	O:0.999996
we	O	O:0.999996
can	O	O:0.999985
call	O	O:0.999932
`	O	O:0.999997
apply	O	B-API:0.997157
`	O	O:0.999932
row-wise	O	O:0.933263
and	O	O:0.999971
use	O	O:0.999979
this	O	O:0.991607
to	O	O:0.999989
index	O	O:0.999999
back	O	O:0.999745
to	O	O:0.999999
original	O	O:0.999980
df	O	O:0.998808
:	O	O:0.999956
#CODE	O	O:0.999815
	
You	O	O:0.999931
can	O	O:0.999958
do	O	O:0.999998
the	O	O:0.999997
following	O	O:0.998549
,	O	O:0.999998
this	O	O:0.999971
tests	O	O:0.999990
each	O	O:0.999923
row	O	O:0.999917
for	O	O:0.999994
membership	O	O:0.999837
of	O	O:0.999961
`	O	O:0.999967
1	O	O:0.999938
,	O	O:0.999991
2	O	O:0.999904
`	O	O:0.999993
using	O	O:0.997999
`	O	O:0.999959
isin	B-API	B-API:0.999776
`	O	O:0.999979
and	O	O:0.999964
if	O	O:0.999993
so	O	O:0.999985
this	O	O:0.999933
generates	O	O:0.999919
a	O	O:0.999994
boolean	O	O:0.998226
series	O	O:0.999961
,	O	O:0.999996
you	O	O:0.999994
can	O	O:0.999951
use	O	O:1.000000
this	O	O:0.999758
to	O	O:0.999989
index	O	O:0.999998
into	O	O:0.999894
the	O	O:0.999999
columns	O	O:0.999908
by	O	O:0.999989
calling	O	O:0.999573
`	O	O:0.999967
apply	O	B-API:0.979388
`	O	O:0.999965
again	O	O:0.998918
,	O	O:0.999998
we	O	O:0.999987
convert	O	O:0.999508
this	O	O:0.999987
to	O	O:0.999998
a	O	O:1.000000
list	O	O:0.995982
because	O	O:0.999987
the	O	O:0.999991
dimensions	O	O:0.999764
won't	O	O:0.999940
align	O	O:0.972234
if	O	O:0.999996
you	O	O:0.999953
don't	O	O:0.999919
do	O	O:0.999992
this	O	O:0.999724
:	O	O:0.999969
#CODE	O	O:0.999844
	
output	O	O:0.999738
from	O	O:0.999867
inner	O	O:0.999333
`	O	O:0.999979
apply	O	B-API:0.996883
`	O	O:0.999537
:	O	O:0.999281
#CODE	O	O:0.999898
	
performance	O	O:0.999773
degradation	O	O:0.999860
when	O	O:0.999943
switching	O	O:0.999936
from	O	O:0.999979
pandas	O	O:0.999955
column	O	O:0.999966
concatenation	O	O:0.999878
to	O	O:0.999999
using	O	O:0.999997
apply	O	B-API:0.897477
on	O	O:0.999338
dataframe	B-API	O:0.991374
	
Generally	O	O:0.999913
using	O	O:0.999845
`	O	O:0.999924
apply	O	B-API:0.997450
`	O	O:0.999908
should	O	O:0.999024
be	O	O:0.999996
avoided	O	O:0.999839
it's	O	O:0.999690
essentially	O	O:0.999972
a	O	O:0.999988
for	O	O:0.999799
loop	O	O:0.995414
and	O	O:0.999908
not	O	O:0.999972
vectorised	O	O:0.998827
,	O	O:0.999984
it	O	O:0.999969
would	O	O:0.999977
be	O	O:0.999998
better	O	O:0.999983
to	O	O:0.999983
write	O	O:0.999996
a	O	O:0.999990
func	O	O:0.998178
that	O	O:0.999918
performed	O	O:0.999979
vectorised	O	O:0.999972
operations	O	O:0.999707
rather	O	O:0.999944
than	O	O:0.999965
using	O	O:0.999904
`	O	O:0.999942
apply	O	B-API:0.989272
`	O	O:0.999959
at	O	O:0.999720
all	O	O:0.999908
	
Right	O	O:0.999852
now	O	O:0.999958
I	O	O:0.999999
have	O	O:0.999996
the	O	O:0.999993
data	O	O:0.999961
input	O	O:0.999914
,	O	O:0.999997
and	O	O:0.999994
I	O	O:0.999996
have	O	O:0.999988
more	O	O:0.999583
or	O	O:0.999998
less	O	O:0.999254
written	O	O:0.999814
the	O	O:0.999934
function	O	O:0.999868
I	O	O:0.999983
would	O	O:0.999998
like	O	O:0.999970
to	O	O:0.999999
use	O	O:0.999998
to	O	O:0.999973
analyze	O	O:0.999974
each	O	O:0.999972
column	O	O:0.999948
separately	O	O:0.999858
.	O	O:0.999924
	
However	O	O:0.999857
,	O	O:0.999987
I	O	O:0.999993
can't	O	O:0.999926
quite	O	O:0.999740
understand	O	O:0.999938
how	O	O:0.999973
to	O	O:0.999983
use	O	O:1.000000
a	O	O:0.999972
forloop	O	O:0.999599
or	O	O:0.999977
use	O	O:0.999950
the	O	O:0.999954
apply	O	B-API:0.951964
function	O	O:0.999722
through	O	O:0.999855
all	O	O:0.999987
of	O	O:0.999996
the	O	O:0.999994
columns	O	O:0.999899
in	O	O:0.999993
the	O	O:0.999985
dataset	O	O:0.999763
.	O	O:0.999806
	
I	O	O:0.999934
would	O	O:0.999935
prefer	O	O:0.999805
not	O	O:0.999995
to	O	O:0.999997
hardcode	O	O:0.999998
the	O	O:0.999996
columns	O	O:0.999941
because	O	O:0.999964
I	O	O:0.999997
will	O	O:0.999997
have	O	O:0.999914
40,000	O	O:0.999621
~	O	O:0.999713
50,000	O	O:0.999792
columns	O	O:0.999860
to	O	O:0.999984
analyze	O	O:0.999897
.	O	O:0.999889
	
I'm	O	O:0.999967
attempting	O	O:0.999841
to	O	O:0.999958
use	O	O:0.999997
the	O	O:0.999925
apply	O	B-API:0.987463
function	O	O:0.994324
:	O	O:0.999836
#CODE	O	O:0.999876
	
`	O	O:0.999932
axis=2	O	O:0.989706
`	O	O:0.999865
is	O	O:0.999934
not	O	O:0.999985
a	O	O:0.999997
valid	O	O:0.999174
param	O	O:0.999267
for	O	O:0.999958
`	O	O:0.999979
apply	O	B-API:0.994451
`	O	O:0.999815
	
I	O	O:0.999991
know	O	O:0.999941
I	O	O:0.999964
can	O	O:0.999994
make	O	O:0.999982
a	O	O:0.999999
partial	O	O:0.986365
function	O	O:0.999938
with	O	O:0.999859
"	O	O:0.999984
or	O	O:0.999934
"	O	O:0.999928
and	O	O:0.999981
my	O	O:0.999839
vector	O	O:0.998349
and	O	O:0.999982
apply	O	O:0.696310
it	O	O:0.999713
to	O	O:0.999985
the	O	O:0.999999
df	O	O:0.998835
,	O	O:0.999960
but	O	O:0.999995
this	O	O:0.999575
is	O	O:0.999996
probably	O	O:0.999684
unidiomatic	O	O:0.998542
and	O	O:0.999979
needlessly	O	O:0.999506
time-consuming	O	O:0.994939
.	O	O:0.999595
	
What	O	O:0.998492
is	O	O:0.999978
the	O	O:0.999985
pandas	O	O:0.999583
way	O	O:0.999919
?	O	O:0.999882
	
Apply	O	O:0.999198
curve_fit	O	O:0.856505
on	O	O:0.999989
dataframe	B-API	O:0.999766
columns	O	O:0.999849
	
I	O	O:0.999993
have	O	O:0.999994
a	O	O:0.999965
`	O	O:0.999966
pandas.DataFrame	B-API	B-API:0.989346
`	O	O:0.999996
with	O	O:0.999587
with	O	O:0.999992
multiple	O	O:0.999943
columns	O	O:0.999869
and	O	O:0.999995
I	O	O:0.999991
would	O	O:0.999984
like	O	O:0.999931
to	O	O:0.999999
apply	O	O:0.992173
a	O	O:0.999949
`	O	O:0.999549
curve_fit	O	O:0.589937
`	O	O:0.999983
function	O	O:0.999750
to	O	O:0.999999
each	O	O:0.999992
of	O	O:0.999998
them	O	O:0.999142
.	O	O:0.999977
	
I	O	O:0.999954
would	O	O:0.999993
like	O	O:0.999949
the	O	O:0.999997
output	O	O:0.999804
to	O	O:0.999995
be	O	O:1.000000
a	O	O:0.999999
dataframe	B-API	O:0.993947
with	O	O:0.999960
the	O	O:0.999995
optimal	O	O:0.999776
values	O	O:0.999820
fitting	O	O:0.999962
the	O	O:0.999999
data	O	O:0.999816
in	O	O:0.999996
the	O	O:0.999996
columns	O	O:0.999419
(	O	O:0.999993
for	O	O:0.999994
now	O	O:0.999917
,	O	O:0.999989
I	O	O:0.999973
am	O	O:0.999981
not	O	O:0.999927
interested	O	O:0.999896
in	O	O:0.999990
their	O	O:0.999788
covariance	O	O:0.999807
)	O	O:0.999968
.	O	O:0.999812
	
I	O	O:0.999978
can	O	O:0.999981
apply	O	O:0.858109
the	O	O:0.999499
function	O	O:0.998921
and	O	O:0.999995
get	O	O:0.999981
an	O	O:0.999988
array	O	O:0.999922
in	O	O:0.999841
return	O	O:0.979366
:	O	O:0.999920
#CODE	O	O:0.999780
	
Can	O	O:0.999953
this	O	O:0.999931
be	O	O:0.999998
done	O	O:0.999944
with	O	O:0.999980
something	O	O:0.999906
similar	O	O:0.999902
to	O	O:0.999991
`	O	O:0.999999
apply	O	B-API:0.977071
`	O	O:0.999937
?	O	O:0.999401
	
I	O	O:0.999978
think	O	O:0.999966
the	O	O:0.999941
issue	O	O:0.997220
is	O	O:0.999987
that	O	O:0.999902
the	O	O:0.999999
apply	O	B-API:0.501944
of	O	O:0.999984
your	O	O:0.999563
fitting	O	O:0.998635
function	O	O:0.999945
returns	O	O:0.999717
an	O	O:0.999995
array	O	O:0.999984
of	O	O:0.999968
dim	O	O:0.999812
3x3	O	O:0.999010
(	O	O:0.999988
the	O	O:0.999968
3	O	O:0.999937
fitparameters	O	O:0.999894
as	O	O:0.999998
returned	O	O:0.999822
by	O	O:0.999983
conner	O	O:0.997451
)	O	O:0.999929
.	O	O:0.999704
	
But	O	O:0.999912
expected	O	O:0.999705
is	O	O:0.999999
something	O	O:0.999710
in	O	O:0.999984
the	O	O:0.999996
shape	O	O:0.999894
of	O	O:0.999994
20x3	O	O:0.999838
as	O	O:1.000000
your	O	O:0.999878
df	O	O:0.998929
.	O	O:0.999917
	
Well	O	O:0.999481
all	O	O:0.999951
you're	O	O:0.999948
doing	O	O:0.999378
is	O	O:0.999996
creating	O	O:0.999267
a	O	O:0.999994
df	O	O:0.999070
for	O	O:0.999987
each	O	O:0.999725
column	O	O:0.999528
which	O	O:0.999951
seems	O	O:0.999978
unncessary	O	O:0.999670
,	O	O:0.999989
semantically	O	O:0.999895
they	O	O:0.999920
should	O	O:0.999947
perform	O	O:0.999821
the	O	O:0.999995
same	O	O:0.999907
,	O	O:0.999988
`	O	O:0.999996
apply	O	B-API:0.939112
`	O	O:0.999988
on	O	O:0.999987
a	O	O:0.999999
df	O	O:0.999451
calls	O	O:0.999812
the	O	O:0.999942
function	O	O:0.999352
on	O	O:0.999993
each	O	O:0.999970
column	O	O:0.999967
in	O	O:0.999995
turn	O	O:0.996011
(	O	O:0.999997
as	O	O:0.999982
`	O	O:0.999971
axis=0	O	O:0.994255
`	O	O:0.999962
is	O	O:0.999958
the	O	O:0.999976
default	O	O:0.999643
param	O	O:0.999855
value	O	O:0.999891
)	O	O:0.999972
	
Can	O	O:0.999879
probably	O	O:0.999853
be	O	O:0.999991
improved	O	O:0.999936
using	O	O:0.999448
`	O	O:0.999394
map	O	B-API:0.997240
`	O	O:0.999988
or	O	O:0.999673
`	O	O:0.999993
apply	O	B-API:0.978365
`	O	O:0.999848
.	O	O:0.998142
	
#CODE	O	O:0.998453
	
I've	O	O:0.999182
been	O	O:0.999616
trying	O	O:0.999931
to	O	O:0.999969
figure	O	O:0.999993
this	O	O:0.999968
out	O	O:0.999950
for	O	O:0.999994
awhile	O	O:0.998682
now	O	O:0.999002
and	O	O:0.999947
haven't	O	O:0.999630
been	O	O:0.999561
able	O	O:0.999988
to	O	O:0.999995
apply	O	O:0.994743
any	O	O:0.999935
of	O	O:0.999982
the	O	O:0.999903
solutions	O	O:0.999810
I've	O	O:0.999799
found	O	O:0.999928
online	O	O:0.999608
for	O	O:0.999990
splitting	O	O:0.999827
columns	O	O:0.996798
in	O	O:0.999994
pandas	O	O:0.999875
yet	O	O:0.999870
.	O	O:0.999806
	
I	O	O:0.999993
have	O	O:0.999988
to	O	O:0.999983
apply	O	O:0.984819
the	O	O:0.999963
column	O	O:0.999910
split	O	O:0.998270
to	O	O:0.999997
90+	O	O:0.999983
consistently	O	O:0.999900
formatted	O	O:0.999965
columns	O	O:0.999669
.	O	O:0.999870
	
I	O	O:0.999981
feel	O	O:0.999923
like	O	O:0.999869
the	O	O:0.999981
solution	O	O:0.999340
should	O	O:0.999936
be	O	O:0.999998
trivial	O	O:0.999870
,	O	O:0.999973
I'm	O	O:0.999977
just	O	O:0.999890
too	O	O:0.999993
new	O	O:0.999909
to	O	O:0.999950
programming	O	O:0.999928
and	O	O:0.999986
python	O	O:0.999881
to	O	O:0.999956
figure	O	O:0.999971
it	O	O:0.999984
out	O	O:0.999884
!	O	O:0.999956
	
Maybe	O	O:0.999960
a	O	O:0.999978
`	O	O:0.999909
groupby	B-API	B-API:0.998191
`	O	O:0.999986
in	O	O:0.999537
conjunction	O	O:0.999887
with	O	O:0.999925
`	O	O:0.999983
apply	O	B-API:0.971080
`	O	O:0.999916
?	O	O:0.999221
	
I'm	O	O:0.999922
not	O	O:0.999977
familiar	O	O:0.999925
with	O	O:0.999872
`	O	O:0.999977
apply	O	B-API:0.944044
`	O	O:0.999923
yet	O	O:0.995223
.	O	O:0.999932
	
you	O	O:0.999916
can	O	O:0.999982
use	O	O:0.999999
apply	O	B-API:0.584124
on	O	O:0.999887
the	O	O:0.999974
groups	O	O:0.999705
,	O	O:0.999975
which	O	O:0.999976
allows	O	O:0.999888
you	O	O:0.999990
to	O	O:0.999998
transform	O	O:0.997386
a	O	O:0.999991
group	O	O:0.986790
.	O	O:0.999917
	
This	O	O:0.999766
means	O	O:0.999965
that	O	O:0.999978
the	O	O:0.999972
function	O	O:0.999948
inside	O	O:0.999729
returns	O	O:0.999951
something	O	O:0.999796
for	O	O:0.999993
each	O	O:0.999939
set	O	O:0.999956
of	O	O:0.999998
entries	O	O:0.999600
that	O	O:0.999928
has	O	O:0.999995
the	O	O:0.999997
same	O	O:0.999429
ID	O	O:0.999316
.	O	O:0.999889
	
@USER	O	O:0.999266
You	O	O:0.999934
can	O	O:0.999987
also	O	O:0.999997
define	O	O:0.999995
your	O	O:0.999793
own	O	O:0.999951
apply	O	O:0.650086
function	O	O:0.999756
to	O	O:0.999955
achieve	O	O:0.999994
the	O	O:0.999996
goal	O	O:0.999928
by	O	O:0.999993
using	O	O:0.999956
the	O	O:0.999750
`	O	O:0.999042
cumsum	B-API	B-API:0.999068
`	O	O:0.999992
trick	O	O:0.999056
.	O	O:0.999955
	
See	O	O:0.999781
the	O	O:0.999886
edited	O	O:0.999178
part	O	O:0.999443
.	O	O:0.999927
	
The	O	O:0.999359
extract	O	O:0.986130
method	O	O:0.999986
will	O	O:0.999972
create	O	O:0.999973
a	O	O:0.999999
dataframe	B-API	O:0.999184
with	O	O:0.999934
as	O	O:0.999998
many	O	O:0.999980
columns	O	O:0.999934
as	O	O:0.999998
groups	O	O:0.999887
specified	O	O:0.999565
in	O	O:0.999988
the	O	O:0.999977
pattern	O	O:0.999798
you	O	O:0.999991
pass	O	O:0.999847
,	O	O:0.999993
in	O	O:0.999998
this	O	O:0.999926
case	O	O:0.999972
two	O	O:0.999962
.	O	O:0.999911
	
Groups	O	O:0.999204
are	O	O:0.999987
delimited	O	O:0.999975
by	O	O:0.999993
brackets	O	O:0.999517
in	O	O:0.999960
the	O	O:0.999959
pattern	O	O:0.999049
.	O	O:0.999868
	
I've	O	O:0.999397
edited	O	O:0.999829
the	O	O:0.999969
question	O	O:0.999808
to	O	O:0.999988
show	O	O:0.999984
hoe	O	O:0.999944
to	O	O:0.999993
apply	O	O:0.983032
it	O	O:0.999857
in	O	O:0.999996
your	O	O:0.999947
case	O	O:0.999754
.	O	O:0.999977
	
Passing	O	O:0.999368
a	O	O:0.999980
dataframe	B-API	O:0.997403
as	O	O:0.999997
an	O	O:0.999989
an	O	O:0.999986
argument	O	O:0.999926
in	O	O:0.999971
apply	O	B-API:0.646097
with	O	O:0.999637
pandas	O	O:0.997918
	
Ok	O	O:0.999816
,	O	O:0.999993
the	O	O:0.999991
problem	O	O:0.999790
here	O	O:0.999004
is	O	O:0.999995
the	O	O:0.999990
combination	O	O:0.999945
of	O	O:0.999952
`	O	O:0.999981
func	O	O:0.945461
`	O	O:0.999979
and	O	O:0.999612
`	O	O:0.999993
apply	O	B-API:0.997491
`	O	O:0.999795
.	O	O:0.997519
	
The	O	O:0.999834
`	O	O:0.999978
apply	O	B-API:0.997461
`	O	O:0.999960
method	O	O:0.999752
of	O	O:0.999998
a	O	O:0.999994
dataframe	B-API	O:0.998262
applies	O	O:0.999871
the	O	O:0.999988
given	O	O:0.985216
function	O	O:0.999969
to	O	O:0.999997
each	O	O:0.999994
COLUMN	O	O:0.999850
in	O	O:0.999996
the	O	O:0.999997
data	O	O:0.999966
frame	O	O:0.999992
and	O	O:0.999994
returns	O	O:0.999969
the	O	O:0.999768
result	O	O:0.999444
.	O	O:0.999856
	
So	O	O:0.999975
the	O	O:0.999936
function	O	O:0.999934
you	O	O:0.999988
pass	O	O:0.999752
to	O	O:0.999992
`	O	O:1.000000
apply	O	B-API:0.979212
`	O	O:0.999944
should	O	O:0.999415
expect	O	O:0.999992
a	O	O:0.999996
pandas	O	O:0.999722
Series	O	O:0.999939
or	O	O:0.999989
an	O	O:0.999995
array	O	O:0.999988
as	O	O:0.999992
input	O	O:0.999236
,	O	O:0.999991
not	O	O:0.999978
a	O	O:0.999994
dataframe	B-API	O:0.988720
.	O	O:0.999906
	
It	O	O:0.999826
should	O	O:0.999955
give	O	O:0.999926
either	O	O:0.999995
a	O	O:0.999992
series	O	O:0.999391
/	O	O:0.999993
array	O	O:0.999955
or	O	O:0.999996
single	O	O:0.999921
value	O	O:0.999989
as	O	O:0.999954
output	O	O:0.999015
.	O	O:0.999825
	
will	O	O:0.999605
apply	O	O:0.778724
the	O	O:0.999895
`	O	O:0.999943
sum	O	O:0.993502
`	O	O:0.999992
function	O	O:0.999810
to	O	O:0.999997
each	O	O:0.999990
column	O	O:0.999633
and	O	O:0.999999
give	O	O:0.999984
a	O	O:0.999945
series	O	O:0.999768
containing	O	O:0.999212
the	O	O:0.999946
	
Secondly	O	O:0.999726
,	O	O:0.999993
the	O	O:0.999980
`	O	O:0.999978
args	O	O:0.993054
`	O	O:0.999997
parameter	O	O:0.999211
in	O	O:0.999976
`	O	O:0.999991
apply	O	B-API:0.969669
`	O	O:0.999852
is	O	O:0.999947
only	O	O:0.999970
used	O	O:0.999971
when	O	O:0.999744
the	O	O:0.999962
function	O	O:0.999974
you	O	O:0.999947
are	O	O:0.999997
passing	O	O:0.999709
takes	O	O:0.999751
additional	O	O:0.999703
arguments	O	O:0.998067
(	O	O:0.999935
besides	O	O:0.999945
the	O	O:0.999976
series	O	O:0.999925
,	O	O:0.999986
which	O	O:0.999976
should	O	O:0.999963
be	O	O:0.999999
the	O	O:0.999998
first	O	O:0.998969
argument	O	O:0.999789
)	O	O:0.999933
.	O	O:0.999823
	
For	O	O:0.999921
example	O	O:0.999747
,	O	O:0.999992
you	O	O:0.999975
might	O	O:0.999994
have	O	O:0.999998
a	O	O:0.999994
function	O	O:0.999971
that	O	O:0.999982
sums	O	O:0.999961
an	O	O:0.999990
array	O	O:0.999961
and	O	O:0.999996
then	O	O:0.999918
divides	O	O:0.999974
by	O	O:0.999998
some	O	O:0.999727
number	O	O:0.998989
(	O	O:0.999988
again	O	O:0.999996
a	O	O:0.999997
silly	O	O:0.998444
example	O	O:0.998320
):	O	O:0.999923
#CODE	O	O:0.999738
	
The	O	O:0.999912
you	O	O:0.999866
might	O	O:0.999991
want	O	O:0.999985
to	O	O:0.999994
apply	O	O:0.997578
this	O	O:0.999787
to	O	O:0.999995
each	O	O:0.999999
column	O	O:0.999983
of	O	O:0.999999
a	O	O:0.999996
dataframe	B-API	O:0.999054
with	O	O:0.999891
divisor	O	O:0.999892
=	O	O:0.999753
2	O	O:0.999832
.	O	O:0.999756
	
@USER	O	O:0.998765
Sorry	O	O:0.999939
that	O	O:0.999850
I	O	O:0.999995
misunderstood	O	O:0.999995
your	O	O:0.998518
question	O	O:0.998964
.	O	O:0.999942
	
For	O	O:0.999989
your	O	O:0.999897
case	O	O:0.999892
,	O	O:1.000000
just	O	O:0.999905
apply	O	O:0.773554
the	O	O:0.999942
same	O	O:0.994394
`	O	O:0.999964
groupby.agg	O	B-API:0.695049
(	O	O:0.999990
sum	O	O:0.999450
)`	O	O:0.999940
logic	O	O:0.999802
to	O	O:0.999992
hourly	O	O:0.999903
price	O	O:0.999242
dataframe	B-API	O:0.994297
,	O	O:0.999981
and	O	O:0.999999
then	O	O:0.999887
calculate	O	O:0.999898
dot	O	O:0.999951
product	O	O:0.999918
with	O	O:0.999932
daily	O	O:0.999839
volume	O	O:0.999967
data	O	O:0.999593
.	O	O:0.999955
	
Finally	O	O:0.999921
sum	O	O:0.999904
over	O	O:0.999560
`	O	O:0.999971
axis=1	O	O:0.986440
`	O	O:0.999976
.	O	O:0.999237
	
See	O	O:0.999782
the	O	O:0.999953
edit	O	O:0.996048
.	O	O:0.999900
	
You	O	O:0.999884
should	O	O:0.999880
use	O	O:0.999964
`	O	O:0.999973
resample	O	B-API:0.990977
`	O	O:0.999995
to	O	O:0.999957
calculate	O	O:0.999983
the	O	O:0.999999
mean	O	O:0.999908
price	O	O:0.999341
for	O	O:0.999995
the	O	O:0.999940
day	O	O:0.999585
,	O	O:0.999955
and	O	O:0.999998
then	O	O:0.999899
apply	O	O:0.910910
it	O	O:0.999970
to	O	O:0.999979
the	O	O:0.999997
volume	O	O:0.997506
:	O	O:0.999947
#CODE	O	O:0.999934
	
Actually	O	O:0.999572
,	O	O:0.999989
it	O	O:0.999947
is	O	O:0.999987
bad	O	O:0.999943
to	O	O:0.999989
use	O	O:0.999994
`'	O	O:0.999957
columns	O	O:0.999802
'`	O	O:0.999977
in	O	O:0.999982
the	O	O:0.999979
`	O	O:0.999995
query	O	O:0.979455
`	O	O:0.999997
expression	O	O:0.999510
like	O	O:0.999986
this	O	O:0.999895
.	O	O:0.999933
	
In	O	O:0.999952
the	O	O:0.999986
first	O	O:0.999760
example	O	O:0.999684
,	O	O:0.999992
it	O	O:0.999968
is	O	O:0.999993
just	O	O:0.999148
happened	O	O:0.999983
that	O	O:0.999804
returned	O	O:0.999945
Series	O	O:0.999901
can	O	O:0.999929
be	O	O:1.000000
used	O	O:0.999895
as	O	O:0.999894
index	O	O:0.998386
,	O	O:0.999943
but	O	O:0.999965
it	O	O:0.999821
might	O	O:0.999973
not	O	O:0.999997
apply	O	O:0.911803
to	O	O:0.999914
the	O	O:0.999996
general	O	O:0.998838
case	O	O:0.999718
.	O	O:0.999949
	
The	O	O:0.999956
problem	O	O:0.999594
with	O	O:0.999947
the	O	O:0.999971
`	O	O:0.999984
apply	O	B-API:0.979294
`	O	O:0.999931
/	O	O:0.998518
`	O	O:0.999966
map	O	B-API:0.993235
`	O	O:0.999977
/	O	O:0.999392
`	O	O:0.999989
applymap	B-API	B-API:0.990564
`	O	O:0.999985
functions	O	O:0.994576
is	O	O:0.999995
that	O	O:0.999945
they	O	O:0.999948
don't	O	O:0.999885
	
Here	O	O:0.998585
is	O	O:0.999997
a	O	O:0.999980
faster	O	O:0.999573
code	O	O:0.999897
using	O	O:0.999810
`	O	O:0.999895
apply	O	B-API:0.997602
`	O	O:0.999548
,	O	O:0.999149
but	O	O:0.999981
it	O	O:0.999979
will	O	O:0.999945
provide	O	O:0.999986
wrong	O	O:0.999929
result	O	O:0.999854
in	O	O:0.999992
case	O	O:0.999971
there	O	O:0.999988
are	O	O:0.999989
2	O	O:0.999940
or	O	O:0.999997
more	O	O:0.999911
months	O	O:0.999824
in	O	O:0.999992
the	O	O:0.999998
same	O	O:0.999984
column	O	O:0.999909
with	O	O:0.999988
the	O	O:0.999997
same	O	O:0.999971
value	O	O:0.999920
,	O	O:0.999997
because	O	O:0.999940
`	O	O:0.999966
np.where	B-API	B-API:0.986770
`	O	O:0.999995
returns	O	O:0.999292
an	O	O:0.999968
`	O	O:0.999984
np.array	B-API	B-API:0.995236
`	O	O:0.999996
of	O	O:0.999966
the	O	O:0.999986
indexes	O	O:0.999837
that	O	O:0.999900
it	O	O:0.999998
found	O	O:0.999973
the	O	O:0.999997
value	O	O:0.999936
of	O	O:0.999935
`	O	O:0.999987
x	O	O:0.999525
`	O	O:0.999989
in	O	O:0.999794
,	O	O:0.999982
but	O	O:0.999977
there's	O	O:0.999833
no	O	O:0.999988
way	O	O:0.999966
to	O	O:0.999986
store	O	O:0.999872
it	O	O:0.999984
and	O	O:0.999992
use	O	O:0.999983
the	O	O:0.999423
next	O	O:0.997922
index	O	O:0.999881
the	O	O:0.999991
next	O	O:0.999958
time	O	O:0.999980
we	O	O:0.999996
encounter	O	O:0.999981
the	O	O:0.999995
same	O	O:0.999737
`	O	O:0.999990
x	O	O:0.999295
`	O	O:0.999992
value	O	O:0.998431
:	O	O:0.999974
#CODE	O	O:0.999831
	
Sorry	O	O:0.998580
,	O	O:0.999980
that's	O	O:0.999937
my	O	O:0.999951
fault	O	O:0.999533
and	O	O:0.999998
this	O	O:0.998671
is	O	O:0.999971
not	O	O:0.999963
due	O	O:0.999989
to	O	O:0.999984
date	O	O:0.999669
conversion	O	O:0.999551
.	O	O:0.999940
	
I	O	O:0.999879
was	O	O:0.999965
working	O	O:0.999223
with	O	O:0.999975
a	O	O:0.999993
much	O	O:0.999166
larger	O	O:0.997781
`	O	O:0.999938
DataFrame	B-API	O:0.689516
`	O	O:0.999992
containing	O	O:0.998984
other	O	O:0.999971
columns	O	O:0.999523
.	O	O:0.999850
	
In	O	O:0.999978
this	O	O:0.999819
context	O	O:0.999806
,	O	O:0.999991
it	O	O:0.999967
was	O	O:0.999983
a	O	O:0.999991
bad	O	O:0.999921
idea	O	O:0.999944
to	O	O:0.999970
use	O	O:0.999997
the	O	O:0.999851
`	O	O:0.999946
apply	O	B-API:0.975449
`	O	O:0.999634
function	O	O:0.997747
.	O	O:0.999923
	
After	O	O:0.999873
this	O	O:0.999701
correction	O	O:0.999662
,	O	O:0.999987
it	O	O:0.999946
works	O	O:0.999925
fine	O	O:0.999912
and	O	O:0.999997
I	O	O:0.999997
obtain	O	O:0.999241
the	O	O:0.999995
same	O	O:0.999951
result	O	O:0.999841
in	O	O:0.999995
less	O	O:0.999634
time	O	O:0.999884
.	O	O:0.999882
	
Thanks	O	O:0.998663
for	O	O:0.999978
the	O	O:0.999897
solution	O	O:0.998731
and	O	O:0.999979
for	O	O:0.999994
the	O	O:0.999790
reply	O	O:0.996002
.	O	O:0.999610
	
Below	O	O:0.996969
is	O	O:0.999980
the	O	O:0.999984
code	O	O:0.999726
I	O	O:0.999998
apply	O	O:0.941219
to	O	O:0.999778
get	O	O:0.999993
the	O	O:0.999992
fitted	O	O:0.999888
volatility	O	O:0.999968
from	O	O:0.999947
the	O	O:0.999982
regression	O	O:0.999722
equation	O	O:0.999942
y	O	O:0.999973
=	O	O:0.999959
ax^2	O	O:0.999179
+	O	O:0.999921
x	O	O:0.999847
+	O	O:0.999967
c	O	O:0.999838
and	O	O:0.999999
the	O	O:0.999956
results	O	O:0.999258
are	O	O:0.999968
great	O	O:0.999431
.	O	O:0.999894
	
.	O	O:0.999615
.	O	O:0.999865
	
#CODE	O	O:0.998453
	
I	O	O:0.999993
need	O	O:0.999985
to	O	O:0.999992
have	O	O:0.999999
the	O	O:0.999995
regression	O	O:0.999854
variables	O	O:0.997736
and	O	O:0.999996
FitVol	O	O:0.999862
apply	O	B-API:0.562789
to	O	O:0.999979
all	O	O:0.999997
of	O	O:0.999995
the	O	O:0.999996
original	O	O:0.999988
data	O	O:0.999880
,	O	O:0.999994
not	O	O:0.999998
the	O	O:0.999998
data	O	O:0.999963
that	O	O:0.999866
was	O	O:0.999999
filtered	O	O:0.999977
to	O	O:0.999996
have	O	O:0.999999
the	O	O:0.999965
abs	O	B-API:0.918832
(	O	O:0.999984
Delta	O	O:0.994054
)	O	O:0.999983
be	O	O:0.999862
between	O	O:0.999032
0.01	O	O:0.982565
and	O	O:0.999915
0.5	O	O:0.995468
	
You	O	O:0.999756
haven't	O	O:0.999728
to	O	O:0.999989
apply	O	O:0.954727
`	O	O:0.999923
for	O	O:0.998377
`	O	O:0.999996
loop	O	O:0.998350
or	O	O:0.999993
`	O	O:0.999946
iterrows()	B-API	B-API:0.998796
`	O	O:0.999992
at	O	O:0.999977
all	O	O:0.999941
in	O	O:0.999964
pandas	O	O:0.994666
:	O	O:0.999977
#CODE	O	O:0.999710
	
Group	O	O:0.999730
by	O	O:0.999992
then	O	O:0.999779
apply	O	O:0.688603
function	O	O:0.999971
then	O	O:0.999741
flatten	O	O:0.988898
back	O	O:0.999603
to	O	O:0.999996
dataframe	B-API	O:0.999856
in	O	O:0.999976
Pandas	O	O:0.999902
Python	O	O:0.999390
	
pick	O	O:0.998964
the	O	O:0.999996
columns	O	O:0.999922
you	O	O:0.999994
want	O	O:0.999986
to	O	O:0.999998
diff	O	O:0.833692
,	O	O:0.999984
and	O	O:0.999991
apply	O	B-API:0.630297
`	O	O:0.999826
pd.DataFrame.diff	B-API	B-API:0.996613
`	O	O:0.999952
	
Now	O	O:0.999914
apply	O	O:0.573753
the	O	O:0.999782
logic	O	O:0.999295
described	O	O:0.999467
above	O	O:0.998707
:	O	O:0.999963
#CODE	O	O:0.999755
	
And	O	O:0.999907
I	O	O:0.999997
want	O	O:0.999974
an	O	O:0.999971
expanding	O	O:0.999908
apply	O	B-API:0.849290
function	O	O:0.999541
that	O	O:0.999660
identifies	O	O:0.999947
whether	O	O:0.999959
we	O	O:0.999990
reach	O	O:0.999912
a	O	O:0.999994
new	O	O:0.999714
maximum	O	O:0.999925
value	O	O:0.999896
for	O	O:0.999996
a	O	O:0.999991
given	O	O:0.966340
id	O	O:0.999681
.	O	O:0.999799
	
The	O	O:0.999933
resulting	O	O:0.999474
dataframe	B-API	O:0.996301
should	O	O:0.999903
look	O	O:0.999947
like	O	O:0.999973
this	O	O:0.999516
:	O	O:0.999975
#CODE	O	O:0.999814
	
I	O	O:0.999932
can't	O	O:0.999979
seem	O	O:0.999816
to	O	O:0.999998
pass	O	O:0.999985
two	O	O:0.999995
columns	O	O:0.999970
to	O	O:0.999994
the	O	O:1.000000
expanding	O	O:0.999613
apply	O	B-API:0.834359
function	O	O:0.999139
.	O	O:0.999572
	
Its	O	O:0.999925
been	O	O:0.999780
a	O	O:0.999999
long	O	O:0.999600
time	O	O:0.999978
since	O	O:0.999877
I	O	O:0.999958
worked	O	O:0.999985
with	O	O:0.999216
`	O	O:0.999973
apply	O	B-API:0.944302
`	O	O:0.999993
like	O	O:0.999639
a	O	O:0.999999
couple	O	O:0.998755
releases	O	O:0.999850
ago	O	O:0.999957
minimum	O	O:0.999934
,	O	O:0.999991
so	O	O:0.999996
my	O	O:0.999948
recollection	O	O:0.999921
may	O	O:0.999990
be	O	O:0.999991
bad	O	O:0.999984
,	O	O:0.999986
or	O	O:0.999988
things	O	O:0.999614
may	O	O:0.999997
have	O	O:0.999972
changed	O	O:0.999583
.	O	O:0.999931
	
However	O	O:0.999878
,	O	O:0.999996
as	O	O:0.999997
I	O	O:0.999961
remember	O	O:0.999838
it	O	O:0.999913
the	O	O:0.999994
grouped	O	O:0.999890
data	O	O:0.999698
is	O	O:0.999997
passed	O	O:0.999954
automatically	O	O:0.999918
as	O	O:0.999988
the	O	O:0.999936
first	O	O:0.998659
argument	O	O:0.999690
.	O	O:0.999724
	
The	O	O:0.999956
temptation	O	O:0.999811
when	O	O:0.999914
passing	O	O:0.999955
your	O	O:0.999922
own	O	O:0.999630
function	O	O:0.999959
to	O	O:0.999968
`	O	O:0.999999
apply	O	B-API:0.969633
`	O	O:0.999910
is	O	O:0.999897
to	O	O:0.999975
do	O	O:0.999998
this	O	O:0.999370
:	O	O:0.999966
#CODE	O	O:0.999889
	
In	O	O:0.999981
example	O	O:0.999988
data	O	O:0.999984
above	O	O:0.999911
,	O	O:0.999997
this	O	O:0.999833
works	O	O:0.999866
great	O	O:0.999498
but	O	O:0.999992
when	O	O:0.999838
I	O	O:0.999996
apply	O	O:0.994768
this	O	O:0.997534
concept	O	O:0.999468
to	O	O:0.999990
my	O	O:1.000000
real	O	O:0.999382
datasets	O	O:0.999966
,	O	O:0.999991
I	O	O:0.999997
get	O	O:0.999937
`	O	O:0.999838
Exception	O	O:0.998133
:	O	O:0.999989
cannot	O	O:0.999927
handle	O	O:0.999987
a	O	O:0.999991
non-unique	O	O:0.998778
multi-index	O	O:0.999584
!	O	O:0.999870
	
`	O	O:0.999846
.	O	O:0.999408
	
I	O	O:0.999940
verified	O	O:0.999929
that	O	O:0.998348
`	O	O:0.999995
df1	O	O:0.993196
`	O	O:0.999981
and	O	O:0.999813
`	O	O:0.999996
df2	O	O:0.985754
`	O	O:0.999997
have	O	O:0.999772
the	O	O:0.999997
exact	O	O:0.999980
same	O	O:0.999977
columns	O	O:0.999797
.	O	O:0.999960
	
Any	O	O:0.999957
ideas	O	O:0.999744
of	O	O:0.999986
the	O	O:0.999942
cause	O	O:0.999018
and	O	O:0.999993
how	O	O:0.999974
to	O	O:0.999948
fix	O	O:0.999959
?	O	O:0.999940
	
In	O	O:0.999934
which	O	O:0.999985
columns	O	O:0.999873
4	O	O:0.999977
,	O	O:0.999984
5	O	O:0.999865
and	O	O:0.999978
6	O	O:0.999946
are	O	O:0.999965
actually	O	O:0.999978
the	O	O:0.999997
components	O	O:0.999711
of	O	O:0.999996
a	O	O:0.999984
vector	O	O:0.999484
.	O	O:0.999772
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999962
apply	O	O:0.988023
a	O	O:0.999888
matrix	O	O:0.998042
multiplication	O	O:0.999752
in	O	O:0.999995
these	O	O:0.999989
columns	O	O:0.999908
,	O	O:0.999998
that	O	O:0.999900
is	O	O:0.999998
to	O	O:0.999996
replace	O	O:0.999970
columns	O	O:0.999833
4	O	O:0.999975
,	O	O:0.999991
5	O	O:0.999922
and	O	O:0.999985
6	O	O:0.999954
with	O	O:0.999754
the	O	O:0.999973
vector	O	O:0.999994
resulting	O	O:0.999931
of	O	O:0.999997
a	O	O:0.999994
the	O	O:0.999989
multiplication	O	O:0.999889
of	O	O:0.999992
the	O	O:0.999982
previous	O	O:0.999830
vector	O	O:0.999926
with	O	O:0.999943
a	O	O:0.999972
matrix	O	O:0.998303
.	O	O:0.999849
	
if	O	O:0.999951
so	O	O:0.999982
i	O	O:0.999907
would	O	O:0.999989
gest	O	O:0.999765
that	O	O:0.999993
the	O	O:0.999967
apply	O	B-API:0.786187
method	O	O:0.998655
is	O	O:0.999987
a	O	O:0.999994
good	O	O:0.998742
hint	O	O:0.999699
here	O	O:0.999552
but	O	O:0.999989
like	O	O:0.999897
@USER	O	O:0.999824
-sc	O	O:0.999772
i	O	O:0.999845
would	O	O:0.999966
suggest	O	O:0.999958
you	O	O:0.999996
to	O	O:0.999998
restructure	O	O:1.000000
your	O	O:0.999977
data	O	O:0.999993
model	O	O:0.999971
or	O	O:0.999999
have	O	O:0.999981
a	O	O:0.999999
look	O	O:0.999546
at	O	O:0.999998
pytables	O	O:0.999286
etc	O	O:0.999725
	
You	O	O:0.999946
can	O	O:0.999991
create	O	O:0.999997
a	O	O:1.000000
column	O	O:0.999890
with	O	O:0.999979
the	O	O:0.999957
mutation	O	O:0.999672
type	O	O:0.996417
(	O	O:0.999970
A	O	O:0.999984
->	O	O:0.999975
T	B-API	O:0.963736
,	O	O:0.999982
G	O	O:0.999753
->	O	O:0.999983
C	O	O:0.999706
)	O	O:0.999994
with	O	O:0.999950
a	O	O:0.999995
regular	O	O:0.998513
expression	O	O:0.999567
substitution	O	O:0.999977
then	O	O:0.999865
apply	O	O:0.979918
pandas	O	O:0.999548
groupby	B-API	B-API:0.962951
to	O	O:0.999974
count	O	O:0.999327
.	O	O:0.999952
	
#CODE	O	O:0.998453
	
You	O	O:0.999884
can	O	O:0.999964
transpose	O	O:0.994540
the	O	O:0.999993
df	O	O:0.999239
and	O	O:0.999995
apply	O	O:0.798782
a	O	O:0.999898
lambda	O	O:0.996855
that	O	O:0.999860
drops	O	O:0.999805
the	O	O:0.999996
NaN	O	O:0.999738
rows	O	O:0.999776
,	O	O:0.999997
slices	O	O:0.999966
from	O	O:0.999902
4th	O	O:0.999974
value	O	O:0.999977
onwards	O	O:0.999313
and	O	O:0.999987
returns	O	O:0.999854
the	O	O:0.999882
first	O	O:0.998081
valid	O	O:0.998356
index	O	O:0.997726
:	O	O:0.999961
#CODE	O	O:0.999901
	
@USER	O	O:0.999784
then	O	O:0.999734
may	O	O:0.999999
be	O	O:0.999999
you	O	O:0.999997
can	O	O:0.999937
use	O	O:0.999997
the	O	O:0.999941
idea	O	O:0.997868
and	O	O:0.999992
apply	O	O:0.524807
to	O	O:0.999692
panda	O	O:0.999945
DataFrame	B-API	O:0.991059
	
In	O	O:0.999976
case	O	O:0.999959
you	O	O:0.999997
need	O	O:0.999982
to	O	O:0.999998
convert	O	O:0.999994
existing	O	O:0.999975
columns	O	O:0.999792
in	O	O:0.999997
a	O	O:0.999998
dataframe	B-API	O:0.998541
here	O	O:0.999924
the	O	O:0.999992
solution	O	O:0.999930
using	O	O:0.999975
a	O	O:0.999941
helper	O	O:0.954460
function	O	O:0.999223
`	O	O:0.999977
conv	O	O:0.864361
`	O	O:0.999988
and	O	O:0.999941
the	O	O:0.999989
`	O	O:0.999836
apply	O	B-API:0.999050
`	O	O:0.999776
method	O	O:0.998351
.	O	O:0.999930
	
#CODE	O	O:0.998453
	
I	O	O:0.999969
believe	O	O:0.999998
your	O	O:0.999919
data	O	O:0.999889
structure	O	O:0.999944
isn't	O	O:0.999986
appropriate	O	O:0.999969
for	O	O:0.999998
your	O	O:0.999675
problem	O	O:0.997398
.	O	O:0.999927
	
Especially	O	O:0.999685
the	O	O:0.999813
`	O	O:0.999973
list	O	O:0.900235
`	O	O:0.999997
in	O	O:0.999988
fields	O	O:0.999974
of	O	O:0.999998
a	O	O:0.999940
`	O	O:0.999975
DataFrame	B-API	O:0.905787
`	O	O:0.999989
,	O	O:0.999993
they	O	O:0.999992
make	O	O:0.999958
loops	O	O:0.999846
or	O	O:0.999984
`	O	O:0.999984
apply	O	B-API:0.971722
`	O	O:0.999942
almost	O	O:0.998198
unavoidable	O	O:0.999581
.	O	O:0.999470
	
Could	O	O:0.999768
you	O	O:0.999934
in	O	O:0.999997
principle	O	O:0.999959
re-structure	O	O:0.999928
the	O	O:0.999985
data	O	O:0.999803
?	O	O:0.999963
	
(	O	O:0.999875
For	O	O:0.999984
example	O	O:0.999902
one	O	O:0.999981
`	O	O:0.999997
df	O	O:0.998618
`	O	O:0.999996
per	O	O:0.999575
solar	O	O:0.999935
panel	O	O:0.999966
with	O	O:0.999975
columns	O	O:0.999971
`	O	O:0.999998
date	O	O:0.993650
`	O	O:0.999996
,	O	O:0.999703
`	O	O:0.999998
time	O	O:0.998188
`	O	O:0.999997
,	O	O:0.999896
`	O	O:0.999998
energy	O	O:0.997652
`)	O	O:0.999962
	
I	O	O:0.999969
believe	O	O:0.999998
your	O	O:0.999919
data	O	O:0.999889
structure	O	O:0.999944
isn't	O	O:0.999986
appropriate	O	O:0.999969
for	O	O:0.999998
your	O	O:0.999675
problem	O	O:0.997398
.	O	O:0.999927
	
Especially	O	O:0.999133
the	O	O:0.999982
list	O	O:0.997980
in	O	O:0.999996
fields	O	O:0.999952
of	O	O:0.999995
a	O	O:0.999989
DataFrame	B-API	O:0.989732
,	O	O:0.999997
they	O	O:0.999983
make	O	O:0.999962
loops	O	O:0.999905
or	O	O:0.999988
apply	O	B-API:0.596149
almost	O	O:0.999414
unavoidable	O	O:0.997057
.	O	O:0.999587
	
Could	O	O:0.999768
you	O	O:0.999934
in	O	O:0.999997
principle	O	O:0.999959
re-structure	O	O:0.999928
the	O	O:0.999985
data	O	O:0.999803
?	O	O:0.999963
	
(	O	O:0.999884
For	O	O:0.999983
example	O	O:0.999926
one	O	O:0.999993
df	O	O:0.999956
per	O	O:0.999951
solar	O	O:0.999785
panel	O	O:0.999971
with	O	O:0.999994
columns	O	O:0.999970
date	O	O:0.999654
,	O	O:0.999998
time	O	O:0.999927
,	O	O:0.999996
energy	O	O:0.999787
)	O	O:0.999930
	
Python	O	O:0.999083
pandas	O	O:0.999647
:	O	O:0.999993
retrieve	O	O:0.999347
the	O	O:0.999992
field	O	O:0.999959
associated	O	O:0.999827
to	O	O:0.999993
the	O	O:1.000000
min	O	O:0.975057
of	O	O:0.999988
another	O	O:0.998877
(	O	O:0.999997
cross	O	O:0.999621
apply	O	O:0.984589
equivalent	O	O:0.996603
)	O	O:0.999839
	
In	O	O:0.999948
SQL	O	O:0.999814
I	O	O:0.999941
was	O	O:0.999977
used	O	O:0.999593
to	O	O:0.999984
doing	O	O:0.999998
this	O	O:0.999912
with	O	O:0.999978
a	O	O:0.999997
cross	O	O:0.997395
apply	O	O:0.901369
.	O	O:0.999111
	
If	O	O:0.999957
you	O	O:0.999986
want	O	O:0.999981
to	O	O:0.999997
apply	O	O:0.987507
an	O	O:0.999959
arbitrary	O	O:0.999666
Python	O	O:0.998310
function	O	O:0.999884
,	O	O:0.999990
you	O	O:0.999987
will	O	O:0.999986
have	O	O:0.999988
to	O	O:0.999997
loop	O	O:0.999992
it	O	O:0.999964
.	O	O:0.999954
	
Can	O	O:0.999881
you	O	O:0.999983
write	O	O:0.999926
out	O	O:0.999981
the	O	O:0.999989
formula	O	O:0.999749
you	O	O:0.999987
want	O	O:0.999985
to	O	O:0.999994
apply	O	O:0.962799
?	O	O:0.999794
	
Based	O	O:0.999469
on	O	O:0.999975
the	O	O:0.999981
latest	O	O:0.999888
suggestion	O	O:0.999871
of	O	O:0.999990
Firelynx	O	O:0.999540
I	O	O:0.999999
have	O	O:0.999992
a	O	O:0.999992
small	O	O:0.999140
update	O	O:0.998063
which	O	O:0.999658
makes	O	O:0.999784
it	O	O:0.999996
a	O	O:0.999997
bit	O	O:0.999434
cleaner	O	O:0.999114
.	O	O:0.999823
	
Still	O	O:0.999691
,	O	O:0.999995
you	O	O:0.999995
need	O	O:0.999984
to	O	O:1.000000
keep	O	O:0.999994
a	O	O:0.999998
list	O	O:0.997568
in	O	O:0.999996
order	O	O:0.999916
to	O	O:0.999995
prevent	O	O:0.999962
double	O	O:0.999619
counts	O	O:0.999898
of	O	O:0.999993
the	O	O:0.999975
label	O	O:0.999677
,	O	O:0.999984
because	O	O:0.999978
unique	O	O:0.927814
apply	O	O:0.947209
only	O	O:0.999760
to	O	O:0.999997
a	O	O:0.999999
unique	O	B-API:0.899701
(	O	O:0.999967
label	O	O:0.999584
,	O	O:0.999993
side	O	O:0.999728
)	O	O:0.999966
combination	O	O:0.999827
.	O	O:0.999948
	
So	O	O:0.999976
I	O	O:0.999993
now	O	O:0.999985
have	O	O:0.999367
#CODE	O	O:0.999842
	
Is	O	O:0.999947
it	O	O:0.999995
possible	O	O:0.999932
to	O	O:0.999998
have	O	O:0.999996
unique()	B-API	B-API:0.743153
apply	O	O:0.704182
on	O	O:0.999935
the	O	O:0.999981
label	O	O:0.999877
alone	O	O:0.999888
?	O	O:0.999971
	
Then	O	O:0.999717
I	O	O:0.999999
could	O	O:0.999992
remove	O	O:0.998767
the	O	O:0.999995
label_list	O	O:0.993702
to	O	O:0.999996
keep	O	O:0.999996
track	O	O:0.999927
of	O	O:0.999990
which	O	O:0.999779
label	O	O:0.999556
has	O	O:0.999924
been	O	O:0.999233
processed	O	O:0.999783
already	O	O:0.999624
	
tom's	O	O:0.995291
answer	O	O:0.999543
looks	O	O:0.999611
good	O	O:0.998279
.	O	O:0.999877
	
On	O	O:0.999983
a	O	O:0.999996
column	O	O:0.999818
you	O	O:0.999985
could	O	O:0.999996
also	O	O:0.999997
do	O	O:0.999996
`	O	O:0.999943
.map	B-API	B-API:0.999578
(	O	O:0.999980
lambda	O	O:0.998933
x	O	O:0.999197
:	O	O:0.999903
min	O	O:0.561044
(	O	O:0.999991
x	O	O:0.999967
,	O	O:0.999992
0	O	O:0.999951
)	O	O:0.999992
)`	O	O:0.999782
to	O	O:0.999985
apply	O	O:0.944297
the	O	O:0.999922
standard	O	O:0.998869
python	O	O:0.999617
`	O	O:0.999993
min	O	B-API:0.790837
`	O	O:0.999995
to	O	O:0.999982
each	O	O:0.999997
cell	O	O:0.999186
,	O	O:0.999993
but	O	O:0.999966
`	O	O:0.999938
np.minimum	B-API	B-API:0.993672
`	O	O:0.999957
is	O	O:0.999966
probably	O	O:0.999958
going	O	O:0.999868
to	O	O:0.999972
be	O	O:0.999999
the	O	O:0.999991
fastest	O	O:0.997580
way	O	O:0.999836
.	O	O:0.999734
	
OR	O	O:0.999926
you	O	O:0.999961
can	O	O:0.999993
apply	O	O:0.995732
over	O	O:0.999755
two	O	O:0.999814
columns	O	O:0.999381
:	O	O:0.999966
#CODE	O	O:0.999899
	
Further	O	O:0.999508
,	O	O:0.999985
it	O	O:0.999956
is	O	O:0.999997
possible	O	O:0.999948
to	O	O:0.999998
select	O	O:0.999962
automatically	O	O:0.999967
all	O	O:0.999994
columns	O	O:0.999955
with	O	O:0.999990
a	O	O:0.999997
certain	O	O:0.999352
dtype	B-API	B-API:0.947982
in	O	O:0.999988
a	O	O:0.999983
dataframe	B-API	O:0.998842
using	O	O:0.999847
`	O	O:0.999888
select_dtypes	B-API	B-API:0.999941
`	O	O:0.999962
.	O	O:0.999170
	
This	O	O:0.999722
way	O	O:0.999951
,	O	O:0.999996
you	O	O:0.999982
can	O	O:0.999992
apply	O	O:0.997492
above	O	O:0.999903
operation	O	O:0.999478
on	O	O:0.999987
multiple	O	O:0.999895
and	O	O:0.999996
automatically	O	O:0.999952
selected	O	O:0.999417
columns	O	O:0.998619
.	O	O:0.999865
	
Export	O	O:0.998715
pandas	O	O:0.999660
DataFrame	B-API	O:0.992862
to	O	O:0.999934
LaTeX	O	O:0.999976
and	O	O:0.999992
apply	O	O:0.873535
formatters	O	O:0.999513
by	O	O:0.999745
row	O	O:0.999746
	
Is	O	O:0.999974
there	O	O:0.999971
any	O	O:0.999986
way	O	O:0.999921
to	O	O:0.999929
hack	O	O:0.999999
this	O	O:0.999925
functionality	O	O:0.999935
?	O	O:0.999955
	
Only	O	O:0.999936
thing	O	O:0.999900
I	O	O:0.999991
thought	O	O:0.999833
about	O	O:0.998842
was	O	O:0.999893
to	O	O:0.999989
manually	O	O:0.999992
apply	O	O:0.741134
the	O	O:0.999881
formats	O	O:0.999687
converting	O	O:0.999515
all	O	O:0.999990
my	O	O:0.999997
columns	O	O:0.999902
to	O	O:0.999991
strings	O	O:0.999922
before	O	O:0.999856
transposing	O	O:0.999352
and	O	O:0.999968
exporting	O	O:0.999118
	
To	O	O:0.999953
all	O	O:0.999985
the	O	O:0.999976
answerers	O	O:0.999210
:	O	O:0.999989
as	O	O:0.999998
the	O	O:0.999951
OP	O	O:0.999323
mentions	O	O:0.999644
pandas	O	O:0.999433
,	O	O:0.999994
it	O	O:0.999984
may	O	O:0.999990
be	O	O:0.999999
desirable	O	O:0.999964
to	O	O:0.999981
enclose	O	O:0.999881
in	O	O:0.999970
apply	O	B-API:0.746818
/	O	O:0.999857
lambda	O	O:0.992705
.	O	O:0.999684
	
E.g.	O	O:0.996205
	
`	O	O:0.999841
df.apply	B-API	B-API:0.997783
(	O	O:0.999974
lambda	O	O:0.998522
x	O	O:0.998964
:	O	O:0.999977
your_code	O	O:0.999578
)`	O	O:0.999831
.	O	O:0.999830
	
It	O	O:0.999860
would	O	O:0.999978
also	O	O:0.999990
be	O	O:1.000000
good	O	O:0.999442
for	O	O:0.999982
the	O	O:0.999942
OP	O	O:0.999798
to	O	O:0.999958
be	O	O:1.000000
more	O	O:0.999874
explicit	O	O:0.998436
:	O	O:0.999978
`	O	O:0.999995
df	O	O:0.999642
=p	O	O:0.999961
d.DataFrame	O	O:0.855658
(	O	O:0.999847
[	O	O:0.999964
0.5	O	O:0.999299
,	O	O:0.999971
4.6	O	O:0.999058
,	O	O:0.999982
7.2	O	O:0.999526
]	O	O:0.999953
)`	O	O:0.999222
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
one	O	O:0.999980
more	O	O:0.999712
question	O	O:0.999822
,	O	O:0.999996
will	O	O:0.999966
I	O	O:0.999999
manually	O	O:0.999967
`	O	O:0.999961
e	O	O:0.999680
=	O	O:0.999880
re.sub	O	O:0.889933
(	O	O:0.999815
'	O	O:0.999952
/	O	O:0.999925
'	O	O:0.999962
,	O	O:0.999965
'	O	O:0.999964
-	O	O:0.999960
'	O	O:0.999972
,	O	O:0.999995
c	O	O:0.999909
)`	O	O:0.999793
and	O	O:0.999978
apply	O	O:0.508785
`	O	O:0.998164
to_datetime	B-API	B-API:0.999564
(	O	O:0.999991
e	O	O:0.999961
)`	O	O:0.999982
that	O	O:0.999873
can	O	O:0.999990
improve	O	O:0.999986
the	O	O:0.999984
performance	O	O:0.999209
?	O	O:0.999935
	
you	O	O:0.999894
already	O	O:0.999978
accessed	O	O:0.999941
the	O	O:0.999978
column	O	O:0.999712
before	O	O:0.999918
calling	O	O:0.999677
the	O	O:0.999884
`	O	O:0.999886
.apply()	B-API	B-API:0.999997
`	O	O:0.999982
method	O	O:0.999767
on	O	O:0.999994
it	O	O:0.999993
,	O	O:0.999997
notice	O	O:0.999987
that	O	O:0.999964
you	O	O:0.999997
call	O	O:0.999898
the	O	O:0.999995
apply	O	B-API:0.978089
function	O	O:0.999691
as	O	O:0.999958
-	O	O:0.999987
`	O	O:0.999988
df	O	O:0.999491
[	O	O:0.999992
0	O	O:0.999930
]	O	O:0.999941
.apply	B-API	B-API:0.988825
`	O	O:0.999972
,	O	O:0.999627
which	O	O:0.999972
means	O	O:0.999851
apply	O	O:0.847956
it	O	O:0.999847
in	O	O:0.999965
0th	O	O:0.999992
column	O	O:0.999958
of	O	O:0.999985
`	O	O:0.999986
df	O	O:0.996652
`	O	O:0.999991
dataframe	B-API	O:0.968178
.	O	O:0.999944
	
if	O	O:0.999959
I	O	O:0.999996
apply	O	O:0.941769
a	O	O:0.999662
groupy	O	O:0.527922
say	O	O:0.999922
with	O	O:0.999865
column	O	O:0.999750
col2	O	O:0.999324
and	O	O:0.999980
col3	O	O:0.999743
this	O	O:0.998952
way	O	O:0.999854
#CODE	O	O:0.999431
	
One	O	O:0.999800
option	O	O:0.999501
is	O	O:0.999991
to	O	O:0.999915
use	O	O:0.999981
groupby	B-API	B-API:0.998411
and	O	O:0.999976
apply	O	B-API:0.606259
to	O	O:0.999736
end	O	O:0.999989
with	O	O:0.999963
a	O	O:0.999989
pandas	O	O:0.998890
Series	O	O:0.998892
:	O	O:0.999923
#CODE	O	O:0.999844
	
As	O	O:0.999968
far	O	O:0.999942
as	O	O:0.999996
numpy	O	O:0.997577
is	O	O:0.999977
concerned	O	O:0.999290
,	O	O:0.999999
a	O	O:0.999942
`	O	O:0.999928
list	O	O:0.911642
`	O	O:0.999999
counts	O	O:0.999609
as	O	O:0.999998
an	O	O:0.999981
arbitrary	O	O:0.999511
Python	O	O:0.997021
object	O	O:0.999489
.	O	O:0.999984
numpy	O	O:0.999916
can	O	O:0.999995
only	O	O:0.999998
efficiently	O	O:0.999994
deal	O	O:0.999768
with	O	O:0.999931
arrays	O	O:0.999895
that	O	O:0.999972
have	O	O:0.999992
regular	O	O:0.999942
dimensions	O	O:0.998942
and	O	O:0.999969
contain	O	O:0.999963
elements	O	O:0.999890
of	O	O:0.999996
a	O	O:0.999985
constant	O	O:0.999912
size	O	O:0.999751
in	O	O:0.999956
memory	O	O:0.998234
(	O	O:0.999997
this	O	O:0.999906
all	O	O:0.999981
has	O	O:0.999987
to	O	O:0.999991
do	O	O:0.999999
with	O	O:0.999924
numpy's	O	O:0.994436
[	O	O:0.999983
internal	O	O:0.999795
representation	O	O:0.998943
]	O	O:0.999329
(	O	O:0.999960
#URL	O	O:0.999937
)	O	O:0.999991
of	O	O:0.999977
the	O	O:0.999979
array	O	O:0.999906
)	O	O:0.999933
.	O	O:0.999762
	
This	O	O:0.999620
doesn't	O	O:0.999924
apply	O	O:0.666869
to	O	O:0.999963
Python	O	O:0.999980
lists	O	O:0.999775
,	O	O:0.999992
since	O	O:0.999978
the	O	O:0.999948
length	O	O:0.999294
and	O	O:0.999975
item	O	O:0.999965
size	O	O:0.999621
can	O	O:0.999974
vary	O	O:0.999978
arbitrarily	O	O:0.999864
.	O	O:0.999814
	
Ha	O	O:0.999778
,	O	O:0.999993
that	O	O:0.999895
would	O	O:0.999987
be	O	O:0.999998
too	O	O:0.999994
easy	O	O:0.998759
:)	O	O:0.999753
.	O	O:0.999548
	
That's	O	O:0.999967
the	O	O:0.999995
result	O	O:0.999944
of	O	O:0.999982
the	O	O:0.999994
grouping	O	O:0.999895
operation	O	O:0.999935
that	O	O:0.999921
I	O	O:0.999999
want	O	O:0.999989
to	O	O:0.999868
apply	O	O:0.913112
.	O	O:0.999293
	
This	O	O:0.999830
column	O	O:0.999128
is	O	O:0.999992
unpopulated	O	O:0.999795
until	O	O:0.999775
I	O	O:0.999970
run	O	O:0.999898
the	O	O:0.999969
code	O	O:0.999580
above	O	O:0.999783
.	O	O:0.999902
	
Another	O	O:0.999577
option	O	O:0.999945
where	O	O:0.999983
you	O	O:0.999984
can	O	O:0.999995
control	O	O:0.999957
the	O	O:0.999995
format	O	O:0.998926
is	O	O:0.999993
using	O	O:0.999911
the	O	O:0.999876
`	O	O:0.999831
strftime	B-API	B-API:0.999456
`	O	O:0.999979
method	O	O:0.999793
in	O	O:0.999996
an	O	O:0.999979
apply	O	B-API:0.934882
(	O	O:0.999956
this	O	O:0.999573
would	O	O:0.999983
actually	O	O:0.999995
be	O	O:0.999999
equivalent	O	O:0.999802
to	O	O:0.999979
writing	O	O:0.999992
a	O	O:0.999964
loop	O	O:0.997576
,	O	O:0.999990
but	O	O:0.999937
shorter	O	O:0.993224
):	O	O:0.999951
#CODE	O	O:0.999670
	
However	O	O:0.999774
,	O	O:0.999997
when	O	O:0.999935
I	O	O:0.999995
apply	O	O:0.994573
this	O	O:0.998577
to	O	O:0.999979
my	O	O:1.000000
full	O	O:0.999726
dataset	O	O:0.999979
,	O	O:0.999989
with	O	O:0.999997
multiple	O	O:0.999943
dates	O	O:0.999380
in	O	O:0.999989
utctime	O	O:0.998619
,	O	O:0.999989
the	O	O:0.999962
x-axis	O	O:0.999803
remains	O	O:0.999886
a	O	O:0.999998
time	O	O:0.999833
-	O	O:0.999993
I	O	O:0.999995
want	O	O:0.999984
it	O	O:0.999969
to	O	O:0.999998
show	O	O:0.999997
the	O	O:0.999997
dates	O	O:0.993997
in	O	O:0.999995
this	O	O:0.999965
case	O	O:0.999927
.	O	O:0.999959
	
Groupby	B-API	O:0.906870
on	O	O:0.999991
level	O	O:0.998905
0	O	O:0.999566
(	O	O:0.999974
parameter1	O	O:0.996708
)	O	O:0.999962
and	O	O:0.999983
apply	O	B-API:0.584876
`	O	O:0.998336
idxmax()	B-API	B-API:0.999985
`	O	O:0.999976
and	O	O:0.999938
get	O	O:0.999993
the	O	O:0.999911
values	O	O:0.991263
:	O	O:0.999927
#CODE	O	O:0.999942
	
Go	O	O:0.999922
through	O	O:0.999394
the	O	O:0.999876
matrix	O	O:0.999830
line	O	O:0.999888
by	O	O:0.999990
line	O	O:0.999820
,	O	O:0.999993
than	O	O:0.999961
apply	O	B-API:0.562403
in	O	O:0.999967
each	O	O:0.999187
element	O	O:0.999857
`	O	O:0.999959
ord()	B-API	B-API:0.990736
-	O	O:0.999978
65	O	O:0.999756
`	O	O:0.999975
if	O	O:0.999936
it	O	O:0.999985
is	O	O:0.999991
an	O	O:0.999956
alphabet	O	O:0.999983
else	O	O:0.999387
use	O	O:0.999959
it	O	O:0.999915
as	O	O:0.999977
it	O	O:0.999684
is	O	O:0.999946
.	O	O:0.999776
	
`	O	O:0.999943
64	O	O:0.998522
`	O	O:0.999959
is	O	O:0.999519
`	O	O:0.999903
ord	B-API	B-API:0.932046
(	O	O:0.999971
"	O	O:0.999928
A	O	O:0.999970
")	O	O:0.999930
-1	O	O:0.997765
`	O	O:0.999928
.	O	O:0.999406
	
Use	O	O:0.999494
`	O	O:0.999945
groupby	B-API	B-API:0.996557
/	O	O:0.999957
agg	O	B-API:0.985508
`	O	O:0.999981
to	O	O:0.999895
aggregate	O	O:0.970933
the	O	O:0.999949
groups	O	O:0.995812
.	O	O:0.999874
	
For	O	O:0.999931
each	O	O:0.999685
group	O	O:0.999044
,	O	O:0.999996
apply	O	B-API:0.526053
`	O	O:0.999942
set	O	O:0.993612
`	O	O:0.999999
to	O	O:0.999972
find	O	O:0.999997
the	O	O:0.999996
unique	O	O:0.838491
strings	O	O:0.998892
,	O	O:0.999969
and	O	O:0.999988
`''	O	O:0.999840
.join	B-API	B-API:0.993773
`	O	O:0.999996
to	O	O:0.999945
concatenate	O	O:0.995758
the	O	O:0.999950
strings	O	O:0.990904
:	O	O:0.999965
#CODE	O	O:0.999928
	
convert	O	O:0.995942
the	O	O:0.999997
dtype	B-API	B-API:0.967069
of	O	O:0.999989
the	O	O:0.999939
df	O	O:0.999959
to	O	O:0.999997
a	O	O:0.999992
`	O	O:0.999981
bool	O	O:0.898782
`	O	O:0.999998
,	O	O:0.999986
then	O	O:0.999958
call	O	O:0.999696
`	O	O:0.999996
apply	O	B-API:0.997132
`	O	O:0.999949
and	O	O:0.999671
use	O	O:0.999963
the	O	O:0.998775
boolean	O	O:0.997499
mask	O	O:0.905705
to	O	O:0.999986
mask	O	O:0.999232
the	O	O:0.999995
columns	O	O:0.999950
,	O	O:0.999998
you	O	O:0.999998
need	O	O:0.999986
to	O	O:1.000000
pass	O	O:0.999985
param	O	O:0.999605
`	O	O:0.999994
axis=1	O	O:0.996289
`	O	O:0.999992
to	O	O:0.999768
`	O	O:1.000000
apply	O	B-API:0.971027
`	O	O:0.999980
the	O	O:0.999811
column	O	O:0.999932
mask	O	O:0.858540
row-wise	O	O:0.993957
:	O	O:0.999968
#CODE	O	O:0.999760
	
Your	O	O:0.999857
code	O	O:0.999014
`	O	O:0.999993
my_df.apply	O	O:0.957948
(	O	O:0.999984
lambda	O	O:0.999279
x	O	O:0.999519
:	O	O:0.999963
colnames	O	O:0.999076
[	O	O:0.999995
x	O	O:0.999907
])`	O	O:0.999825
won't	O	O:0.999913
work	O	O:0.999979
because	O	O:0.999995
firstly	O	O:0.999968
when	O	O:0.999963
calling	O	O:0.999488
`	O	O:0.999996
apply	O	B-API:0.979351
`	O	O:0.999981
on	O	O:0.999975
a	O	O:0.999999
df	O	O:0.999706
without	O	O:0.999884
specifying	O	O:0.999038
the	O	O:0.999625
`	O	O:0.999981
axis	O	O:0.997203
`	O	O:0.999998
will	O	O:0.999644
call	O	O:0.999752
the	O	O:0.999996
lambda	O	O:0.996330
on	O	O:0.999987
each	O	O:0.999908
column	O	O:0.999970
in	O	O:0.999998
turn	O	O:0.999745
,	O	O:0.999999
secondly	O	O:0.999975
the	O	O:0.999989
`	O	O:0.999969
1	O	O:0.999824
/	O	O:0.999990
0	O	O:0.999643
`	O	O:0.999975
will	O	O:0.998311
interpret	O	O:0.999997
this	O	O:0.999987
as	O	O:0.999987
an	O	O:0.999979
index	O	O:0.999990
value	O	O:0.999930
rather	O	O:0.999983
than	O	O:0.999960
a	O	O:0.999986
boolean	O	O:0.996097
flag	O	O:0.999647
.	O	O:0.999767
	
The	O	O:0.999759
issue	O	O:0.999399
occurs	O	O:0.999880
because	O	O:0.999939
you	O	O:0.999988
have	O	O:0.999999
three	O	O:0.999995
columns	O	O:0.999968
with	O	O:0.999993
only	O	O:0.999940
`	O	O:0.999996
NaT	O	O:0.991775
`	O	O:0.999996
values	O	O:0.998558
,	O	O:0.999993
which	O	O:0.999892
is	O	O:0.999979
causing	O	O:0.999801
those	O	O:0.999988
columns	O	O:0.999876
to	O	O:0.999992
be	O	O:1.000000
treated	O	O:0.999821
as	O	O:0.999992
objects	O	O:0.999831
when	O	O:0.999820
you	O	O:0.999996
do	O	O:0.999998
apply	O	O:0.974308
your	O	O:0.998783
condition	O	O:0.999370
on	O	O:0.999993
it	O	O:0.999970
.	O	O:0.999968
	
You	O	O:0.999846
should	O	O:0.999957
put	O	O:0.999893
some	O	O:0.999984
kind	O	O:0.999946
of	O	O:0.999992
condition	O	O:0.999608
in	O	O:1.000000
your	O	O:0.999899
`	O	O:0.999990
apply	O	B-API:0.961985
`	O	O:0.999977
part	O	O:0.997952
,	O	O:0.999999
to	O	O:0.999995
default	O	O:0.999986
to	O	O:0.999997
some	O	O:0.999997
timedelta	O	O:0.997442
in	O	O:0.999998
case	O	O:0.999975
of	O	O:0.999993
`	O	O:0.999949
NaT	O	O:0.975163
`	O	O:0.999978
.	O	O:0.999216
	
Example	O	O:0.997704
-	O	O:0.999952
#CODE	O	O:0.999568
	
Or	O	O:0.999995
a	O	O:0.999991
simpler	O	O:0.999559
way	O	O:0.999985
to	O	O:0.999985
change	O	O:0.999967
the	O	O:0.999971
`	O	O:0.999953
apply	O	B-API:0.982299
`	O	O:0.999988
part	O	O:0.999671
to	O	O:0.999999
directly	O	O:0.999990
get	O	O:0.999966
what	O	O:0.999947
you	O	O:0.999997
want	O	O:0.999964
would	O	O:0.999971
be	O	O:0.999994
-	O	O:0.999995
#CODE	O	O:0.998943
	
@USER	O	O:0.999396
I	O	O:0.999977
am	O	O:0.999997
applying	O	O:0.999908
customized	O	O:0.999161
functions	O	O:0.999637
with	O	O:0.999889
APPLY	O	O:0.994949
function	O	O:0.999888
.	O	O:0.999829
	
It	O	O:0.999964
seems	O	O:0.999953
to	O	O:0.999992
me	O	O:0.999999
that	O	O:0.999979
resample	O	O:0.830959
or	O	O:0.999980
TimeGrouper	O	O:0.990912
fills	O	O:0.999409
in	O	O:0.999984
the	O	O:0.999989
gap	O	O:0.999964
automatically	O	O:0.999859
,	O	O:0.999997
even	O	O:0.999900
there	O	O:0.999942
is	O	O:0.999998
a	O	O:0.999995
time	O	O:0.999912
gap	O	O:0.999981
of	O	O:0.999995
one	O	O:0.999965
year	O	O:0.998558
.	O	O:0.999884
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999914
to	O	O:0.999991
prevent	O	O:0.999957
from	O	O:0.999972
this	O	O:0.999872
?	O	O:0.999991
	
Thanks	O	O:0.999815
a	O	O:0.999969
lot	O	O:0.998634
	
@USER	O	O:0.999746
thanks	O	O:0.998970
for	O	O:0.999980
the	O	O:0.999850
suggestion	O	O:0.996467
.	O	O:0.999842
	
I	O	O:0.999990
have	O	O:0.999943
switched	O	O:0.999581
to	O	O:0.999985
resample	O	O:0.661670
and	O	O:0.999960
it	O	O:0.999970
almost	O	O:0.999129
works	O	O:0.999724
.	O	O:0.999717
	
Only	O	O:0.999772
resample	O	B-API:0.622293
takes	O	O:0.999465
the	O	O:0.999993
first	O	O:0.999967
column	O	O:0.999969
of	O	O:0.999993
df	O	O:0.999448
,	O	O:0.999995
does	O	O:0.999806
it	O	O:0.999997
apply	O	O:0.857165
to	O	O:0.999991
multiple	O	O:0.999998
columns	O	O:0.999984
of	O	O:0.999999
df	O	O:0.999900
at	O	O:0.999996
the	O	O:0.999981
same	O	O:0.999925
time	O	O:0.999882
?	O	O:0.999981
	
I	O	O:0.999929
would	O	O:0.999977
reedit	O	O:0.999708
my	O	O:0.999967
function	O	O:0.999953
into	O	O:0.999821
the	O	O:0.999968
question	O	O:0.998000
.	O	O:0.999977
thx	O	O:0.999808
again	O	O:0.999760
	
I	O	O:0.999986
think	O	O:0.999955
you	O	O:0.999966
want	O	O:0.999968
to	O	O:0.999986
`	O	O:0.999999
agg	O	B-API:0.998105
`	O	O:0.999901
(	O	O:0.999912
aggregate	O	O:0.577433
)	O	O:0.999779
,	O	O:0.999959
not	O	O:0.999971
`	O	O:0.999995
apply	O	B-API:0.967900
`	O	O:0.999979
,	O	O:0.999966
as	O	O:0.999996
for	O	O:0.999993
each	O	O:0.999675
of	O	O:0.999997
your	O	O:0.999921
group	O	O:0.999270
,	O	O:0.999998
you	O	O:0.999992
want	O	O:0.999899
1	O	O:0.999990
returning	O	O:0.999824
value	O	O:0.997864
:	O	O:0.999945
#CODE	O	O:0.999857
	
Apply	O	O:0.999676
the	O	O:0.999981
daily	O	O:0.999127
frequency	O	O:0.999824
to	O	O:0.999965
weekly	O	O:0.999942
frequency	O	O:0.998506
(	O	O:0.999847
eg	O	O:0.999985
.	O	O:0.999973
Monday	O	O:0.999915
to	O	O:0.999994
Sunday	O	O:0.999971
)	O	O:0.999959
	
Apply	O	O:0.999852
daily	O	O:0.999478
frequency	O	O:0.999750
to	O	O:0.999968
monthly	O	O:0.999921
frequency	O	O:0.998627
(	O	O:0.999843
eg	O	O:0.999977
.	O	O:0.999899
how	O	O:0.999993
many	O	O:0.999981
times	O	O:0.999912
I	O	O:0.999997
see	O	O:0.999976
"	O	O:0.999875
2012-01	O	O:0.999561
-**	O	O:0.999488
"	O	O:0.999956
in	O	O:0.999976
my	O	O:0.999993
column	O	O:0.999809
)	O	O:0.999975
	
Last	O	O:0.999637
apply	O	O:0.703404
to	O	O:0.999887
get	O	O:0.999932
annotation	O	O:0.999861
#CODE	O	O:0.999834
	
Pandas	O	O:0.999498
has	O	O:0.999949
an	O	O:0.999984
efficient	O	O:0.999734
`	O	O:0.999976
nlargest	B-API	B-API:0.991191
`	O	O:0.999995
operation	O	O:0.999737
you	O	O:0.999994
can	O	O:0.999972
use	O	O:0.999999
that	O	O:0.999664
is	O	O:0.999990
faster	O	O:0.999895
than	O	O:0.999928
a	O	O:0.999994
full	O	O:0.999227
sort	O	O:0.998300
.	O	O:0.999910
	
It	O	O:0.999938
will	O	O:0.999920
still	O	O:0.999984
take	O	O:0.999975
awhile	O	O:0.999945
to	O	O:0.999995
apply	O	O:0.959465
across	O	O:0.999369
500,000	O	O:0.998962
columns	O	O:0.999545
.	O	O:0.999864
	
#CODE	O	O:0.998453
	
This	O	O:0.999617
should	O	O:0.999966
be	O	O:0.999994
faster	O	O:0.999973
than	O	O:0.999883
a	O	O:0.999997
temporary	O	O:0.999916
sort	O	O:0.999404
+1	O	O:0.999936
,	O	O:0.999994
the	O	O:0.999986
problem	O	O:0.999813
here	O	O:0.999133
is	O	O:0.999997
that	O	O:0.999919
the	O	O:0.999995
`	O	O:0.999983
apply	O	B-API:0.984936
`	O	O:0.999742
is	O	O:0.999921
trying	O	O:0.999811
to	O	O:0.999993
return	O	O:0.999990
a	O	O:0.999994
df	O	O:0.999601
with	O	O:0.999960
the	O	O:0.999992
same	O	O:0.999986
shape	O	O:0.999956
as	O	O:0.999997
the	O	O:0.999996
original	O	O:0.999755
df	O	O:0.999722
which	O	O:0.998657
is	O	O:0.999968
not	O	O:0.999987
what	O	O:0.999971
can	O	O:0.999984
be	O	O:1.000000
achieved	O	O:0.999971
unless	O	O:0.999823
you	O	O:0.999990
take	O	O:0.999962
the	O	O:0.999999
raw	O	O:0.999907
values	O	O:0.998763
and	O	O:0.999988
return	O	O:0.999950
some	O	O:0.999802
other	O	O:0.999978
data	O	O:0.999981
structure	O	O:0.999990
like	O	O:0.999941
in	O	O:1.000000
your	O	O:0.999804
answer	O	O:0.999608
	
How	O	O:0.999897
to	O	O:0.999992
apply	O	O:0.992594
a	O	O:0.999966
condition	O	O:0.999409
to	O	O:0.999999
a	O	O:1.000000
large	O	O:0.999659
number	O	O:0.999923
of	O	O:0.999993
columns	O	O:0.999945
in	O	O:0.999998
a	O	O:0.999996
pandas	O	O:0.999624
dataframe	B-API	O:0.997989
	
What	O	O:0.999696
I	O	O:0.999982
would	O	O:0.999997
like	O	O:0.999937
to	O	O:0.999999
do	O	O:0.999997
now	O	O:0.999898
is	O	O:0.999995
apply	O	O:0.851638
a	O	O:0.999668
function	O	O:0.999168
that	O	O:0.999930
takes	O	O:0.999777
in	O	O:0.999996
two	O	O:0.999957
strings	O	O:0.999300
and	O	O:0.999989
produces	O	O:0.999984
a	O	O:0.999995
score	O	O:0.999801
of	O	O:0.999986
the	O	O:0.999966
similarity	O	O:0.999764
between	O	O:0.999906
them	O	O:0.999517
.	O	O:0.999942
	
For	O	O:0.999894
now	O	O:0.999924
,	O	O:0.999997
I	O	O:0.999997
am	O	O:0.999998
using	O	O:0.999843
the	O	O:0.999945
`	O	O:0.999703
difflib	O	O:0.552400
`	O	O:0.999977
library	O	O:0.998016
.	O	O:0.999901
	
You	O	O:0.999931
can	O	O:0.999937
use	O	O:0.999984
`	O	O:0.999943
groupby	B-API	B-API:0.999858
`	O	O:0.999962
and	O	O:0.999156
`	O	O:0.999993
apply	O	B-API:0.998778
`	O	O:0.999785
scheme	O	O:0.995880
.	O	O:0.999910
	
#CODE	O	O:0.998453
	
Generally	O	O:0.999972
your	O	O:0.999977
idea	O	O:0.999709
of	O	O:0.999997
trying	O	O:0.999858
to	O	O:0.999996
apply	O	O:0.882404
`	O	O:0.999867
astype	B-API	B-API:0.987554
`	O	O:0.999995
to	O	O:0.999936
each	O	O:0.999996
column	O	O:0.999479
is	O	O:0.999994
fine	O	O:0.998975
.	O	O:0.999932
	
#CODE	O	O:0.998453
	
Note	O	O:0.998710
:	O	O:0.999985
While	O	O:0.999993
using	O	O:0.999902
`	O	O:0.999908
pandas.DataFrame	B-API	B-API:0.998444
`	O	O:0.999994
avoid	O	O:0.999201
using	O	O:0.999936
iteration	O	O:0.998930
using	O	O:0.999756
loop	O	O:0.998214
as	O	O:0.999979
this	O	O:0.999909
much	O	O:0.999763
slower	O	O:0.999911
than	O	O:0.999810
performing	O	O:0.999678
the	O	O:0.999993
same	O	O:0.999909
operation	O	O:0.999944
using	O	O:0.999921
`	O	O:0.999934
apply	O	B-API:0.997658
`	O	O:0.999804
.	O	O:0.997163
	
You	O	O:0.999880
can	O	O:0.999853
`	O	O:0.999998
groupby	B-API	B-API:0.996341
`	O	O:0.999993
on	O	O:0.999311
'	O	O:0.999978
id	O	O:0.999679
'	O	O:0.999922
and	O	O:0.999997
then	O	O:0.999851
`	O	O:0.999997
apply	O	B-API:0.941562
`	O	O:0.999696
`	O	O:0.999861
list	O	O:0.945374
`	O	O:0.999996
to	O	O:0.999758
`	O	O:1.000000
value	O	O:0.998581
`	O	O:0.999995
column	O	O:0.999553
and	O	O:0.999999
then	O	O:0.999928
call	O	O:0.999129
`	O	O:0.999989
reset_index	B-API	B-API:0.999977
`	O	O:0.999892
:	O	O:0.999848
#CODE	O	O:0.999908
	
I	O	O:0.999908
resolved	O	O:0.999976
this	O	O:0.999798
error	O	O:0.999964
by	O	O:0.999961
creating	O	O:0.999832
list	O	O:0.998664
of	O	O:0.999973
tuples	O	O:0.981265
(	O	O:0.999992
i.e.	O	O:0.999783
apply	O	B-API:0.854949
(	O	O:0.999926
tuples	O	O:0.998775
))	O	O:0.999755
instead	O	O:0.999897
of	O	O:0.999979
list	O	O:0.995923
.	O	O:0.999948
	
But	O	O:0.999849
i	O	O:0.999768
am	O	O:0.999987
not	O	O:0.999995
able	O	O:0.999992
to	O	O:0.999995
explain	O	O:0.999971
why	O	O:0.999971
tuples	O	O:0.999123
works	O	O:0.999975
here	O	O:0.999759
&	O	O:0.999992
when	O	O:0.999925
to	O	O:0.999995
use	O	O:0.999999
tuples	O	O:0.989851
vs	O	O:0.999896
list	O	O:0.996947
.	O	O:0.999858
	
Please	O	O:0.999066
advise	O	O:0.998693
.	O	O:0.999796
	
For	O	O:0.999991
your	O	O:0.999832
reference	O	O:0.999901
the	O	O:0.999979
`	O	O:0.999982
apply	O	B-API:0.998235
`	O	O:0.999980
method	O	O:0.999650
automatically	O	O:0.999900
passes	O	O:0.999873
the	O	O:0.999989
data	O	O:0.999989
frame	O	O:0.999999
as	O	O:0.999998
the	O	O:0.999988
first	O	O:0.998728
argument	O	O:0.999690
.	O	O:0.999724
	
Also	O	O:0.999881
,	O	O:0.999998
as	O	O:0.999995
you	O	O:0.999836
are	O	O:0.999997
always	O	O:0.999993
going	O	O:0.999862
to	O	O:0.999971
be	O	O:0.999999
reducing	O	O:0.999934
each	O	O:0.999810
group	O	O:0.999903
of	O	O:0.999998
data	O	O:0.999935
to	O	O:1.000000
a	O	O:1.000000
single	O	O:0.999527
observation	O	O:0.999952
you	O	O:0.999984
could	O	O:0.999998
also	O	O:0.999995
use	O	O:0.999997
the	O	O:0.999598
`	O	O:0.999827
agg	O	B-API:0.999846
`	O	O:0.999924
method	O	O:0.995020
(	O	O:0.999993
aggregate	O	B-API:0.649189
)	O	O:0.999845
.	O	O:0.999608
	
`	O	O:0.999959
apply	O	B-API:0.982045
`	O	O:0.999725
is	O	O:0.999908
more	O	O:0.999919
flexible	O	O:0.999730
in	O	O:0.999996
terms	O	O:0.999927
of	O	O:0.999997
the	O	O:0.999978
length	O	O:0.999856
of	O	O:0.999990
the	O	O:0.999983
sequences	O	O:0.999953
that	O	O:0.999916
can	O	O:0.999998
be	O	O:1.000000
returned	O	O:0.999889
whereas	O	O:0.998823
`	O	O:0.999940
agg	O	B-API:0.996711
`	O	O:0.999993
must	O	O:0.998687
reduce	O	O:0.999977
the	O	O:0.999997
data	O	O:0.999932
to	O	O:0.999999
a	O	O:1.000000
single	O	O:0.999511
value	O	O:0.999897
.	O	O:0.999849
	
#CODE	O	O:0.998453
	
I	O	O:0.999947
found	O	O:0.999913
also	O	O:0.999938
this	O	O:0.999983
question	O	O:0.999891
related	O	O:0.999913
to	O	O:0.999998
a	O	O:1.000000
similar	O	O:0.999199
issues	O	O:0.999284
,	O	O:0.999987
but	O	O:0.999971
I	O	O:0.999984
can't	O	O:0.999953
figured	O	O:0.999606
out	O	O:0.999970
how	O	O:0.999980
to	O	O:0.999991
apply	O	O:0.935442
that	O	O:0.999490
method	O	O:0.999950
in	O	O:0.999996
my	O	O:0.999983
case	O	O:0.999766
.	O	O:0.999955
	
You	O	O:0.999926
can	O	O:0.999964
apply	O	O:0.950277
the	O	O:0.999978
same	O	O:0.999330
logic	O	O:0.999881
,	O	O:0.999999
just	O	O:0.999981
keep	O	O:0.999969
the	O	O:0.999999
rows	O	O:0.999933
that	O	O:0.999981
have	O	O:0.999999
the	O	O:0.999999
first	O	O:0.999950
elements	O	O:0.999939
the	O	O:0.999989
start	O	O:0.999906
with	O	O:0.999894
"	O	O:0.999975
AN	O	O:0.999989
using	O	O:0.999968
a	O	O:0.999879
generator	O	O:0.996402
expression	O	O:0.999106
	
You	O	O:0.999900
could	O	O:0.999958
apply	O	O:0.947450
a	O	O:0.999990
lambda	O	O:0.996998
on	O	O:0.999988
each	O	O:0.999705
column	O	O:0.999935
group	O	O:0.996055
:	O	O:0.999973
#CODE	O	O:0.999704
	
I've	O	O:0.999667
tried	O	O:0.999842
to	O	O:0.999959
use	O	O:0.999988
`	O	O:0.999949
apply	O	B-API:0.981296
`	O	O:0.999977
like	O	O:0.999575
this	O	O:0.999935
,	O	O:0.999982
but	O	O:0.999974
can't	O	O:0.999923
figure	O	O:0.999939
out	O	O:0.999992
the	O	O:0.999960
correct	O	O:0.996477
syntax	O	O:0.999569
:	O	O:0.999975
#CODE	O	O:0.999897
	
Pass	O	O:0.999410
param	O	O:0.998891
`	O	O:0.999985
axis=1	O	O:0.995564
`	O	O:0.999994
to	O	O:0.999679
`	O	O:1.000000
apply	O	B-API:0.964058
`	O	O:0.999982
to	O	O:0.999905
iterate	O	O:0.999955
row-wise	O	O:0.992083
:	O	O:0.999934
#CODE	O	O:0.999834
	
I'm	O	O:0.999946
trying	O	O:0.999898
to	O	O:0.999995
convert	O	O:0.999899
a	O	O:0.999991
Pandas	O	O:0.999782
dataframe	B-API	O:0.999058
series	O	O:0.999830
to	O	O:0.999984
float	O	O:0.999769
.	O	O:0.999872
	
I	O	O:0.999973
do	O	O:0.999964
`	O	O:0.999797
locale.setlocale	O	B-API:0.506727
(	O	O:0.999988
locale.LC_NUMERIC	O	O:0.994588
,	O	O:0.999949
'')`	O	O:0.999336
and	O	O:0.999996
then	O	O:0.999704
`	O	O:0.999997
df.idh.apply	O	O:0.974551
(	O	O:0.999992
locale.atof	O	O:0.998363
)`	O	O:0.998890
,	O	O:0.999917
but	O	O:0.999973
it	O	O:0.999990
gives	O	O:0.999944
me	O	O:0.999993
the	O	O:0.999983
above	O	O:0.999851
mentioned	O	O:0.999525
error	O	O:0.999496
:	O	O:0.999945
`	O	O:0.999948
AttributeError	O	O:0.998954
:	O	O:0.999941
'	O	O:0.999979
float	O	O:0.997248
'	O	O:0.999876
object	O	O:0.999810
has	O	O:0.999960
no	O	O:0.999978
attribute	O	O:0.999889
'	O	O:0.999983
replace	O	O:0.991437
'`	O	O:0.999922
.	O	O:0.999718
	
I	O	O:0.999991
assume	O	O:0.999985
at	O	O:0.999991
some	O	O:0.999545
point	O	O:0.999666
it's	O	O:0.999853
getting	O	O:0.999957
something	O	O:0.999969
like	O	O:0.999973
a	O	O:0.999996
NaN	O	O:0.993424
,	O	O:0.999998
maybe	O	O:0.999941
or	O	O:0.999998
some	O	O:0.999877
other	O	O:0.999909
string	O	O:0.998948
and	O	O:0.999958
it	O	O:0.999967
does	O	O:0.998418
not	O	O:0.999981
recognize	O	O:0.999926
it	O	O:0.999961
.	O	O:0.999936
	
How	O	O:0.999933
do	O	O:0.999881
I	O	O:0.999997
tell	O	O:0.999715
`	O	O:0.999973
apply	O	B-API:0.976709
`	O	O:0.999979
to	O	O:0.999940
skip	O	O:0.999947
those	O	O:0.999932
?	O	O:0.999951
	
Firstly	O	O:0.999771
the	O	O:0.999958
conversion	O	O:0.999630
to	O	O:0.999995
decimal	O	O:0.999772
is	O	O:0.999992
really	O	O:0.998386
`	O	O:0.999994
float	O	O:0.952839
`	O	O:0.999997
dtype	B-API	B-API:0.973648
due	O	O:0.999938
to	O	O:0.999884
the	O	O:0.999999
resampling	O	O:0.997883
as	O	O:0.999994
this	O	O:0.999893
will	O	O:0.999952
introduce	O	O:0.999827
`	O	O:0.999987
NaN	O	O:0.983662
`	O	O:0.999998
values	O	O:0.997798
for	O	O:0.999997
missing	O	O:0.999648
values	O	O:0.999028
,	O	O:0.999994
you	O	O:0.999990
can	O	O:0.999962
fix	O	O:0.999999
this	O	O:0.999994
using	O	O:0.999958
`	O	O:0.999860
astype	B-API	B-API:0.995214
`	O	O:0.999990
,	O	O:0.999954
you	O	O:0.999994
can	O	O:0.999999
then	O	O:0.999999
restore	O	O:0.999998
your	O	O:0.999845
'	O	O:0.999977
timeline	O	O:0.999954
'	O	O:0.999994
column	O	O:0.999943
which	O	O:0.999952
get	O	O:0.999983
lost	O	O:0.999869
as	O	O:0.999993
it	O	O:0.999944
can't	O	O:0.999935
figure	O	O:0.999926
out	O	O:0.999978
how	O	O:0.999986
to	O	O:0.999996
resample	O	O:0.994104
a	O	O:0.999958
`	O	O:0.999943
str	O	O:0.995984
`	O	O:0.999997
so	O	O:0.999963
we	O	O:0.999998
can	O	O:0.999985
apply	O	O:0.963576
`	O	O:0.999984
strftime	B-API	B-API:0.992084
`	O	O:0.999992
to	O	O:0.999749
the	O	O:0.999998
index	O	O:0.997441
:	O	O:0.999962
#CODE	O	O:0.999950
	
You	O	O:0.999880
can	O	O:0.999853
`	O	O:0.999998
groupby	B-API	B-API:0.995845
`	O	O:0.999994
on	O	O:0.998989
'	O	O:0.999989
col1	O	O:0.998932
'	O	O:0.999946
and	O	O:0.999997
then	O	O:0.999846
`	O	O:0.999997
apply	O	B-API:0.906556
`	O	O:0.999986
a	O	O:0.999919
lambda	O	O:0.999910
that	O	O:0.999910
joins	O	O:0.999830
the	O	O:0.999978
values	O	O:0.990923
:	O	O:0.999937
#CODE	O	O:0.999941
	
but	O	O:0.999973
this	O	O:0.999954
will	O	O:0.999952
start	O	O:0.999799
the	O	O:0.999994
index	O	O:0.999957
from	O	O:0.999924
`	O	O:0.999993
0	O	O:0.998916
`	O	O:0.999982
.	O	O:0.999097
	
I	O	O:0.999983
want	O	O:0.999970
to	O	O:0.999892
start	O	O:0.999995
it	O	O:0.999997
from	O	O:0.999972
`	O	O:0.999989
1	O	O:0.998537
`	O	O:0.999984
.	O	O:0.999414
	
How	O	O:0.999936
do	O	O:0.999959
I	O	O:0.999994
do	O	O:0.999992
that	O	O:0.999764
without	O	O:0.999955
creating	O	O:0.999571
any	O	O:0.999966
extra	O	O:0.999646
columns	O	O:0.999771
and	O	O:0.999995
by	O	O:0.999993
keeping	O	O:0.992940
the	O	O:0.999673
index	O	O:0.999250
/	O	O:0.999981
reset_index	B-API	B-API:0.961004
functionality	O	O:0.999473
and	O	O:0.999973
options	O	O:0.999773
?	O	O:0.999764
	
I	O	O:0.999899
do	O	O:0.999975
not	O	O:0.999969
want	O	O:0.999975
to	O	O:0.999996
create	O	O:0.999998
a	O	O:0.999997
new	O	O:0.999902
dataframe	B-API	O:0.999277
,	O	O:0.999995
so	O	O:0.999986
`	O	O:0.999984
inplace=True	O	O:0.990959
`	O	O:0.999985
should	O	O:0.999749
still	O	O:0.999952
apply	O	O:0.640416
.	O	O:0.998842
	
You	O	O:0.999855
can	O	O:0.999926
`	O	O:0.999999
apply	O	B-API:0.894061
`	O	O:0.999989
a	O	O:0.999949
lambda	O	O:0.999303
to	O	O:0.999999
your	O	O:0.999986
dates	O	O:0.995784
and	O	O:0.999997
call	O	O:0.998952
`	O	O:0.999954
datetime.strftime	O	B-API:0.944079
`	O	O:0.999824
:	O	O:0.999742
#CODE	O	O:0.999908
	
referring	O	O:0.998143
to	O	O:0.999987
this	O	O:0.999972
link	O	O:0.999494
:	O	O:0.999994
implementing	O	O:0.999902
R	O	O:0.999910
scale	O	O:0.998626
function	O	O:0.999730
in	O	O:0.999993
pandas	O	O:0.999786
in	O	O:0.999983
Python	O	O:0.999033
?	O	O:0.999969
	
I	O	O:0.999969
used	O	O:0.999954
the	O	O:0.999366
function	O	O:0.999795
for	O	O:0.999964
def	O	O:0.999628
scale	O	O:0.995135
and	O	O:0.999990
want	O	O:0.999919
to	O	O:0.999955
apply	O	O:0.925745
for	O	O:0.999862
it	O	O:0.999916
,	O	O:0.999995
like	O	O:0.999997
this	O	O:0.999919
fashion	O	O:0.999474
:	O	O:0.999974
#CODE	O	O:0.999856
	
Apply	O	O:0.999798
a	O	O:0.999983
func	O	O:0.993130
to	O	O:0.999996
generate	O	O:0.999996
a	O	O:0.999997
new	O	O:0.999957
colum	O	O:0.999988
based	O	O:0.999881
on	O	O:0.999997
value	O	O:0.999967
of	O	O:0.999997
other	O	O:0.999976
colums	O	O:0.999722
in	O	O:0.999957
Pandas	O	O:0.999729
	
When	O	O:0.999429
I	O	O:0.999988
'	O	O:0.999997
apply	O	B-API:0.883698
'	O	O:0.999952
that	O	O:0.999213
function	O	O:0.999971
to	O	O:0.999996
both	O	O:0.999960
'	O	O:0.999988
Time	O	O:0.999715
on	O	O:0.999983
Page	O	O:0.999133
'	O	O:0.999904
'	O	O:0.999987
Pageviews	O	O:0.999621
'	O	O:0.999989
columns	O	O:0.999774
,	O	O:0.999984
wouldn't	O	O:0.999975
it	O	O:0.999998
take	O	O:0.999990
the	O	O:0.999999
value	O	O:0.999946
from	O	O:0.999977
both	O	O:0.999995
columns	O	O:0.999978
as	O	O:0.999994
the	O	O:0.999917
argument	O	O:0.999315
and	O	O:0.999973
return	O	O:0.999669
one	O	O:0.999919
value	O	O:0.999951
,	O	O:0.999987
which	O	O:0.999775
is	O	O:0.999869
'	O	O:0.999983
AvgTimeOnPage	O	O:0.999656
'	O	O:0.999989
,	O	O:0.999996
as	O	O:0.999997
the	O	O:0.999869
output	O	O:0.999224
?	O	O:0.999939
	
I	O	O:0.999963
don't	O	O:0.999956
quite	O	O:0.999236
understand	O	O:0.999940
the	O	O:0.999978
error	O	O:0.997851
msg	O	O:0.999702
saying	O	O:0.999482
'	O	O:0.999944
1	O	O:0.999714
'	O	O:0.999954
arg	O	O:0.999845
is	O	O:0.999985
given	O	O:0.997360
,	O	O:0.999998
instead	O	O:0.999988
of	O	O:0.999972
'	O	O:0.999965
2	O	O:0.999916
'	O	O:0.999897
	
@USER	O	O:0.998399
Ah	O	O:0.999953
,	O	O:0.999987
I	O	O:0.999991
see	O	O:0.999985
,	O	O:0.999970
apply	O	O:0.677292
takes	O	O:0.996278
ONE	O	O:0.998869
argument	O	O:0.999261
(	O	O:0.999925
which	O	O:0.999840
is	O	O:0.999999
a	O	O:0.999987
row	O	O:0.998585
/	O	O:0.999964
Series	O	O:0.999433
)	O	O:0.999976
and	O	O:0.999997
you	O	O:0.999992
access	O	O:0.999443
the	O	O:0.999998
column	O	O:0.999934
as	O	O:0.999982
`	O	O:0.999978
x	O	O:0.999171
[	O	O:0.999955
'	O	O:0.999988
Time	O	O:0.999433
on	O	O:0.999979
Page	O	O:0.999752
']`	O	O:0.999922
inside	O	O:0.999613
the	O	O:0.999937
apply	O	B-API:0.929412
.	O	O:0.998735
	
Passing	O	O:0.998439
as	O	O:0.998969
(	O	O:0.999922
x	O	O:0.999903
,	O	O:0.999995
y	O	O:0.999930
)	O	O:0.999975
doesn't	O	O:0.999859
work	O	O:0.999960
-	O	O:0.999999
I	O	O:0.999992
suspect	O	O:0.999945
the	O	O:0.999898
second	O	O:0.998379
argument	O	O:0.999515
is	O	O:0.999992
used	O	O:0.999859
as	O	O:0.999987
some	O	O:0.999807
kind	O	O:0.999850
of	O	O:0.999975
flag	O	O:0.998592
.	O	O:0.999932
	
Using	O	O:0.999731
apply	O	B-API:0.676472
on	O	O:0.999974
a	O	O:0.999984
column	O	O:0.999409
	
I'd	O	O:0.999982
like	O	O:0.999989
to	O	O:0.999997
somehow	O	O:0.999997
apply	O	O:0.940746
a	O	O:0.999929
function	O	O:0.999458
to	O	O:0.999994
each	O	O:0.999993
column	O	O:0.999829
,	O	O:0.999998
converting	O	O:0.999804
it	O	O:0.999976
to	O	O:0.999996
a	O	O:0.999999
list	O	O:0.985997
and	O	O:0.999993
placing	O	O:0.999685
it	O	O:0.999758
in	O	O:0.999997
a	O	O:0.999988
new	O	O:0.999349
DataFrame	B-API	O:0.988058
.	O	O:0.999780
	
However	O	O:0.999789
,	O	O:0.999991
apply	O	O:0.888197
only	O	O:0.999823
operates	O	O:0.998904
on	O	O:0.999998
individual	O	O:0.999735
entries	O	O:0.999630
.	O	O:0.999778
	
Managed	O	O:0.999555
to	O	O:0.999954
figure	O	O:0.999996
this	O	O:0.999974
out	O	O:0.999986
from	O	O:0.999987
what	O	O:0.999826
you	O	O:0.999991
gave	O	O:0.999948
me	O	O:0.999964
.	O	O:0.999902
	
I	O	O:0.999981
simply	O	O:0.999981
needed	O	O:0.999925
to	O	O:0.999995
apply	O	O:0.994437
a	O	O:0.999985
split	O	O:0.860150
function	O	O:0.999968
to	O	O:0.999993
each	O	O:0.999994
string	O	O:0.999745
in	O	O:0.999975
the	O	O:0.999991
dataframe	B-API	O:0.993977
!	O	O:0.999878
	
:D	O	O:0.999777
Thank	O	O:0.999454
you	O	O:0.999817
!	O	O:0.999952
	
but	O	O:0.999940
there	O	O:0.999561
is	O	O:0.999984
no	O	O:0.999806
pandas	O	O:0.999226
method	O	O:0.999986
that	O	O:0.999883
allows	O	O:0.999986
you	O	O:0.999986
to	O	O:0.999994
return	O	O:0.999986
the	O	O:0.999985
minimum	O	O:0.999954
like	O	O:0.999384
`	O	O:0.999998
np.miniumum	O	O:0.968050
`	O	O:0.999994
,	O	O:0.999994
also	O	O:0.999949
`	O	O:0.999984
np.minimum	B-API	B-API:0.998395
`	O	O:0.999988
does	O	O:0.998982
not	O	O:0.999998
care	O	O:0.999978
about	O	O:0.999987
aligning	O	O:0.999726
columns	O	O:0.997462
and	O	O:0.999980
indices	O	O:0.999758
here	O	O:0.997145
.	O	O:0.999915
	
You'd	O	O:0.999940
have	O	O:0.999941
to	O	O:0.999998
define	O	O:0.999994
a	O	O:0.999996
func	O	O:0.978440
yourself	O	O:0.999688
and	O	O:0.999964
`	O	O:0.999991
apply	O	B-API:0.996548
`	O	O:0.999950
it	O	O:0.999718
,	O	O:0.999999
also	O	O:0.999971
you	O	O:0.999998
need	O	O:0.999982
to	O	O:0.999999
add	O	O:0.999997
all	O	O:0.999995
this	O	O:0.999896
information	O	O:0.999941
to	O	O:0.999999
your	O	O:0.999990
question	O	O:0.999553
and	O	O:0.999998
to	O	O:0.999995
pose	O	O:0.999931
representative	O	O:0.999948
code	O	O:0.999907
to	O	O:0.999997
show	O	O:0.999998
your	O	O:0.999958
desired	O	O:0.999665
output	O	O:0.999983
including	O	O:0.999931
a	O	O:0.999977
series	O	O:0.999807
with	O	O:0.999844
an	O	O:0.999994
index	O	O:0.999965
in	O	O:0.999997
a	O	O:0.999999
different	O	O:0.999939
order	O	O:0.999838
to	O	O:0.999999
your	O	O:0.999993
df	O	O:0.999436
	
And	O	O:0.999977
then	O	O:0.999842
apply	O	O:0.957753
it	O	O:0.999979
to	O	O:0.999996
some	O	O:0.999969
function	O	O:0.999986
that	O	O:0.999948
returns	O	O:0.999990
a	O	O:0.999995
series	O	O:0.999942
like	O	O:0.999817
so	O	O:0.999940
:	O	O:0.999969
#CODE	O	O:0.999867
	
Essentially	O	O:0.999908
this	O	O:0.999912
performs	O	O:0.999978
a	O	O:0.999997
reverse	O	O:0.994687
lookup	O	O:0.992280
,	O	O:0.999997
we	O	O:0.999997
iterate	O	O:0.999901
over	O	O:0.999881
the	O	O:0.999967
ingredients	O	O:0.998876
series	O	O:0.999964
using	O	O:0.999741
`	O	O:0.999948
apply	O	B-API:0.997785
`	O	O:0.999852
and	O	O:0.999921
then	O	O:0.999981
test	O	O:0.999315
for	O	O:0.999998
membership	O	O:0.999616
of	O	O:0.999992
this	O	O:0.999889
ingredient	O	O:0.999952
in	O	O:0.999993
the	O	O:0.999998
whole	O	O:0.999933
df	O	O:0.999955
using	O	O:0.999694
`	O	O:0.999904
contains	O	O:0.884714
`	O	O:0.999999
this	O	O:0.999519
will	O	O:0.999960
handle	O	O:0.999982
plurals	O	O:0.997478
in	O	O:0.999996
this	O	O:0.999928
case	O	O:0.999899
.	O	O:0.999959
	
I	O	O:0.999993
have	O	O:0.999989
a	O	O:0.999992
dataframe	B-API	O:0.997973
with	O	O:0.999991
sporadic	O	O:0.999930
dates	O	O:0.999453
as	O	O:0.999924
the	O	O:0.999959
index	O	O:0.999573
,	O	O:0.999984
and	O	O:0.999999
columns	O	O:0.999890
=	O	O:0.999598
'	O	O:0.999968
id	O	O:0.998822
'	O	O:0.999919
and	O	O:0.999910
'	O	O:0.999973
num	O	O:0.995785
'	O	O:0.999925
.	O	O:0.999873
	
I	O	O:0.999939
would	O	O:0.999996
like	O	O:0.999930
to	O	O:0.999998
`	O	O:0.999999
pd.groupby	O	O:0.603426
`	O	O:0.999996
the	O	O:0.999696
'	O	O:0.999952
id	O	O:0.999434
'	O	O:0.999979
column	O	O:0.999822
,	O	O:0.999992
and	O	O:0.999994
apply	O	O:0.602821
the	O	O:0.999549
reindex	O	B-API:0.964068
to	O	O:0.999976
each	O	O:0.999997
group	O	O:0.998801
in	O	O:0.999985
the	O	O:0.999978
dataframe	B-API	O:0.994582
.	O	O:0.999847
	
Which	O	O:0.999709
returns	O	O:0.998913
error	O	O:0.999085
:	O	O:0.999901
`	O	O:0.999946
AttributeError	O	O:0.998028
:	O	O:0.999992
Cannot	O	O:0.999931
access	O	O:0.999833
callable	O	O:0.999727
attribute	O	O:0.999940
'	O	O:0.999914
reindex	O	B-API:0.726394
'	O	O:0.999969
of	O	O:0.999854
'	O	O:0.999934
DataFrameGroupBy	B-API	B-API:0.739928
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999815
apply	O	B-API:0.953059
'	O	O:0.999516
method	O	O:0.999539
`	O	O:0.999946
	
This	O	O:0.999723
appears	O	O:0.999937
to	O	O:0.999988
be	O	O:0.999996
successful	O	O:0.999350
.	O	O:0.999774
	
Now	O	O:0.999895
I	O	O:0.999997
want	O	O:0.999984
to	O	O:0.999980
apply	O	O:0.980669
functions	O	O:0.999852
based	O	O:0.998882
on	O	O:0.999998
metadata	O	O:0.999520
criteria	O	O:0.999053
:	O	O:0.999978
#CODE	O	O:0.999871
	
You	O	O:0.999914
can	O	O:0.999943
use	O	O:0.999995
apply	O	B-API:0.647612
,	O	O:0.999906
like	O	O:0.999867
this	O	O:0.999827
.	O	O:0.999952
	
#CODE	O	O:0.998453
	
I	O	O:0.999987
need	O	O:0.999980
to	O	O:0.999959
apply	O	O:0.995090
this	O	O:0.999582
calculation	O	O:0.999711
to	O	O:0.999999
every	O	O:0.999992
cell	O	O:0.999471
.	O	O:0.999928
	
But	O	O:0.999987
then	O	O:0.999881
I	O	O:0.999999
am	O	O:0.999999
struggling	O	O:0.998250
to	O	O:0.999996
find	O	O:0.999997
a	O	O:0.999997
way	O	O:0.999939
to	O	O:0.999985
apply	O	O:0.992373
this	O	O:0.998740
function	O	O:0.999925
to	O	O:0.999998
each	O	O:0.999998
cell	O	O:0.999670
in	O	O:0.999989
the	O	O:0.999988
dataframe	B-API	O:0.994590
.	O	O:0.999847
	
I	O	O:0.999958
tried	O	O:0.999855
`	O	O:0.999753
iterrows	B-API	B-API:0.999855
`	O	O:0.999952
but	O	O:0.999596
it	O	O:0.999962
was	O	O:0.999988
very	O	O:0.999958
slow	O	O:0.999842
as	O	O:0.999992
the	O	O:0.999978
actual	O	O:0.999485
dataset	O	O:0.999387
is	O	O:0.999981
very	O	O:0.999621
large	O	O:0.999238
.	O	O:0.998955
	
If	O	O:0.999971
you	O	O:0.999993
have	O	O:0.999992
trends	O	O:0.999868
in	O	O:0.999999
your	O	O:0.999970
serie	O	O:0.999947
,	O	O:0.999995
you	O	O:0.999988
may	O	O:0.999987
rather	O	O:0.999982
apply	O	O:0.890356
it	O	O:0.999909
on	O	O:0.999972
time	O	O:0.999970
moving	O	O:0.998372
window	O	O:0.999955
instead	O	O:0.999982
of	O	O:0.999997
the	O	O:0.999994
whole	O	O:0.999812
serie	O	O:0.999744
.	O	O:0.999863
	
@USER	O	O:0.998943
you	O	O:0.999988
mean	O	O:0.999969
to	O	O:0.999998
apply	O	O:0.984238
the	O	O:0.999840
function	O	O:0.999875
as	O	O:0.999988
follows	O	O:0.998694
?	O	O:0.999963
	
This	O	O:0.999850
produced	O	O:0.999849
me	O	O:0.999988
an	O	O:0.999967
error	O	O:0.999541
.	O	O:0.999774
	
`	O	O:0.999701
results=	O	O:0.996637
ingredients.apply	O	O:0.993116
(	O	O:0.999888
lambda	O	O:0.998976
x	O	O:0.999618
:	O	O:0.999970
where	O	O:0.999897
(	O	O:0.999995
df	O	O:0.999949
[	O	O:0.999981
0	O	O:0.999897
]	O	O:0.999869
.str	B-API	B-API:0.971533
.lower()	B-API	B-API:0.991044
.str	B-API	B-API:0.976570
.contains	B-API	B-API:0.977863
(	O	O:0.999949
x.lower()	O	O:0.985306
)	O	O:0.999942
,	O	O:0.999980
True	O	O:0.999769
))`	O	O:0.998235
	
Now	O	O:0.999954
apply	O	O:0.806644
a	O	O:0.999909
ffill	B-API	B-API:0.948616
lambda	O	O:0.999783
as	O	O:0.999863
follows	O	O:0.968521
:	O	O:0.999959
#CODE	O	O:0.999737
	
More	O	O:0.999723
elegant	O	O:0.999796
than	O	O:0.999941
the	O	O:0.999992
apply	O	B-API:0.881915
function	O	O:0.998740
is	O	O:0.999982
to	O	O:0.999980
use	O	O:0.999998
`	O	O:0.999899
result	O	O:0.997544
[	O	O:0.999998
xstring	O	O:0.999420
]	O	O:0.999791
=	O	O:0.999687
tst.bla.str.contains	O	O:0.990756
(	O	O:0.999989
xstring	O	O:0.999538
)`	O	O:0.999605
	
So	O	O:0.999968
,	O	O:0.999993
I	O	O:0.999995
truncated	O	O:0.999989
my	O	O:0.999992
data	O	O:0.999990
set	O	O:0.999908
in	O	O:0.999998
the	O	O:0.999979
question	O	O:0.999718
to	O	O:0.999992
make	O	O:0.999993
it	O	O:0.999994
easier	O	O:0.999792
to	O	O:0.999993
read	O	O:0.999731
and	O	O:0.999994
thinking	O	O:0.999955
that	O	O:0.999810
whatever	O	O:0.999967
solution	O	O:0.999930
came	O	O:0.999693
would	O	O:0.999993
also	O	O:0.999966
apply	O	O:0.956986
..	O	O:0.997123
	
In	O	O:0.999958
actuality	O	O:0.999875
,	O	O:0.999992
the	O	O:0.999991
groupings	O	O:0.999311
are	O	O:0.999992
34	O	O:0.999995
rows	O	O:0.999857
long	O	O:0.999694
,	O	O:0.999991
and	O	O:0.999995
replacing	O	O:0.999650
the	O	O:0.999836
`	O	O:0.999964
3	O	O:0.997931
`	O	O:0.999997
with	O	O:0.999343
`	O	O:0.999988
34	O	O:0.997393
`	O	O:0.999984
does	O	O:0.998800
not	O	O:0.999997
seem	O	O:0.999977
to	O	O:0.999995
work	O	O:0.999994
-	O	O:0.999999
any	O	O:0.999986
thoughts	O	O:0.999668
?	O	O:0.999901
	
If	O	O:0.999965
you	O	O:0.999993
want	O	O:0.999990
to	O	O:0.999997
change	O	O:0.999992
the	O	O:0.999989
display	O	O:0.998052
format	O	O:0.999978
then	O	O:0.999880
you	O	O:1.000000
need	O	O:0.999991
to	O	O:1.000000
parse	O	O:0.999994
as	O	O:0.999999
a	O	O:0.999983
datetime	O	O:0.981007
and	O	O:0.999994
then	O	O:0.999642
`	O	O:0.999997
apply	O	B-API:0.947181
`	O	O:0.999893
`	O	O:0.999468
datetime.strftime	O	O:0.771484
:	O	O:0.999955
#CODE	O	O:0.999638
	
`	O	O:0.999963
apply	O	B-API:0.969131
`	O	O:0.999986
a	O	O:0.999934
lambda	O	O:0.999586
to	O	O:0.999979
convert	O	O:0.999609
to	O	O:0.999989
timedelta	O	O:0.999513
and	O	O:0.999999
then	O	O:0.999671
subtract	O	O:0.995460
:	O	O:0.999983
#CODE	O	O:0.999824
	
That	O	O:0.999591
now	O	O:0.999971
leaves	O	O:0.999839
me	O	O:0.999966
with	O	O:0.999906
$23	O	O:0.999787
to	O	O:0.999994
spend	O	O:0.999973
on	O	O:0.999988
extra	O	O:0.999685
presents	O	O:0.999984
that	O	O:0.999932
birthday	O	O:0.999659
;	O	O:0.999995
the	O	O:0.999989
same	O	O:0.999985
rules	O	O:0.999902
as	O	O:0.999997
above	O	O:0.999927
apply	O	O:0.620921
on	O	O:0.999824
any	O	O:0.999911
additional	O	O:0.999280
presents	O	O:0.997104
.	O	O:0.999690
	
apply	O	B-API:0.836237
`	O	O:0.999919
df.str.contains()	O	O:0.569647
`	O	O:0.999994
to	O	O:0.999819
`	O	O:1.000000
s2	O	O:0.998885
`	O	O:0.999998
using	O	O:0.999787
the	O	O:0.999989
contents	O	O:0.999066
of	O	O:0.999965
`	O	O:0.999982
s1	O	O:0.999683
`	O	O:0.999996
as	O	O:0.999976
the	O	O:0.999994
matching	O	O:0.998246
pattern	O	O:0.998310
	
The	O	O:0.999974
best	O	O:0.999495
I	O	O:0.999994
could	O	O:0.999995
come	O	O:0.999865
up	O	O:0.999990
with	O	O:0.999743
is	O	O:0.999991
to	O	O:0.999975
use	O	O:0.999995
`	O	O:0.999949
apply	O	B-API:0.989027
`	O	O:0.999984
instead	O	O:0.999008
of	O	O:0.999994
manual	O	O:0.995946
iterations	O	O:0.998144
:	O	O:0.999937
#CODE	O	O:0.999826
	
sorry	O	O:0.999441
to	O	O:0.999979
break	O	O:0.999982
this	O	O:0.999953
to	O	O:0.999978
you	O	O:0.999997
but	O	O:0.999989
`	O	O:0.999997
apply	O	B-API:0.948388
`	O	O:0.999854
is	O	O:0.999917
essentially	O	O:0.999980
a	O	O:0.999992
`	O	O:0.999902
for	O	O:0.999488
`	O	O:0.999991
loop	O	O:0.997827
,	O	O:0.999997
the	O	O:0.999986
code	O	O:0.999537
just	O	O:0.999951
looks	O	O:0.999969
cleaner	O	O:0.999049
	
My	O	O:0.999969
understanding	O	O:0.997098
in	O	O:0.999976
pandas	O	O:0.998939
is	O	O:0.999997
to	O	O:0.999962
use	O	O:0.999999
a	O	O:0.999961
pd.rolling_sum()	B-API	B-API:0.999424
function	O	O:0.999612
but	O	O:0.999683
i'm	O	O:0.999856
not	O	O:0.999981
quite	O	O:0.999974
sure	O	O:0.999868
how	O	O:0.999942
to	O	O:0.999951
groupby	B-API	B-API:0.817953
and	O	O:0.999978
apply	O	B-API:0.545370
it	O	O:0.999752
while	O	O:0.999930
setting	O	O:0.999859
a	O	O:0.999947
condition	O	O:0.998439
.	O	O:0.999935
	
I've	O	O:0.999738
also	O	O:0.999910
tried	O	O:0.999983
using	O	O:0.999590
cumcount()	B-API	B-API:0.907279
to	O	O:0.999920
no	O	O:0.999995
avail	O	O:0.999446
#CODE	O	O:0.999741
	
See	O	O:0.999495
comment	O	O:0.999316
@USER	O	O:0.999606
In	O	O:0.999978
short	O	O:0.999784
,	O	O:0.999996
can	O	O:0.999975
I	O	O:0.999998
"	O	O:0.999999
universalize	O	O:0.982296
"	O	O:0.999996
this	O	O:0.999633
to	O	O:0.999994
make	O	O:0.999992
it	O	O:0.999995
apply	O	O:0.799192
to	O	O:0.999990
every	O	O:0.999939
car	O	O:0.999758
?	O	O:0.999945
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
You	O	O:0.999926
can	O	O:0.999964
apply	O	O:0.935457
the	O	O:0.999931
recipe	O	O:0.999729
from	O	O:0.999809
here	O	O:0.999411
#CODE	O	O:0.999888
	
That	O	O:0.999318
loop	O	O:0.999457
works	O	O:0.999954
fine	O	O:0.999484
,	O	O:0.999989
but	O	O:0.999968
I	O	O:0.999995
trying	O	O:0.999982
to	O	O:0.999952
see	O	O:0.999997
how	O	O:0.999978
I	O	O:0.999997
could	O	O:0.999988
use	O	O:0.999710
map	O	B-API:0.960468
and	O	O:0.999973
apply	O	O:0.524353
to	O	O:0.999684
make	O	O:0.999977
this	O	O:0.999964
look	O	O:0.999809
cleaner	O	O:0.999525
.	O	O:0.999886
	
From	O	O:0.999699
reading	O	O:0.999218
,	O	O:0.999984
apply	O	B-API:0.702812
is	O	O:0.999953
a	O	O:0.999961
loop	O	O:0.995654
function	O	O:0.999913
underneath	O	O:0.999688
,	O	O:0.999981
so	O	O:0.999886
I'm	O	O:0.999960
not	O	O:0.999997
sure	O	O:0.999979
whether	O	O:0.999886
I	O	O:0.999992
will	O	O:0.999957
get	O	O:0.999967
any	O	O:0.999996
speed	O	O:0.999750
from	O	O:0.999878
doing	O	O:0.999929
this	O	O:0.999702
.	O	O:0.999759
	
But	O	O:0.999795
,	O	O:0.999995
it	O	O:0.999992
could	O	O:0.999937
shrink	O	O:0.999948
the	O	O:0.999998
code	O	O:0.999914
by	O	O:0.999995
a	O	O:0.999984
lot	O	O:0.997742
.	O	O:0.999788
	
Do	O	O:0.999964
you	O	O:0.999996
know	O	O:0.999984
of	O	O:0.999999
a	O	O:0.999984
more	O	O:0.997551
general	O	O:0.997137
method	O	O:0.999839
?	O	O:0.999895
	
This	O	O:0.999372
works	O	O:0.999957
fine	O	O:0.999905
with	O	O:0.999958
basic	O	O:0.999640
addition	O	O:0.999832
,	O	O:0.999984
but	O	O:0.999909
I	O	O:0.999921
was	O	O:0.999989
trying	O	O:0.999599
to	O	O:0.999995
find	O	O:0.999996
a	O	O:0.999997
way	O	O:0.999939
to	O	O:0.999995
apply	O	O:0.985997
a	O	O:0.999965
more	O	O:0.997898
general	O	O:0.996122
function	O	O:0.999749
.	O	O:0.999721
	
I've	O	O:0.999415
updated	O	O:0.999815
the	O	O:0.999957
question	O	O:0.999774
to	O	O:0.999996
show	O	O:0.999994
a	O	O:0.999998
more	O	O:0.999232
complicated	O	O:0.999766
example	O	O:0.999776
.	O	O:0.999850
	
I	O	O:0.999931
cannot	O	O:0.999931
understand	O	O:0.999896
the	O	O:0.999994
error	O	O:0.999468
I	O	O:0.999990
see	O	O:0.999995
when	O	O:0.999830
using	O	O:0.999989
apply	O	B-API:0.535783
or	O	O:0.998716
transform	O	B-API:0.979945
:	O	O:0.999871
	
1	O	O:0.999798
2	O	O:0.999893
)	O	O:0.999974
`	O	O:0.999983
transform	O	B-API:0.979136
`	O	O:0.999986
expects	O	O:0.999662
something	O	O:0.999764
"	O	O:0.999972
like-indexed	O	O:0.982991
"	O	O:0.999954
,	O	O:0.999962
while	O	O:0.999913
`	O	O:0.999981
apply	O	B-API:0.964330
`	O	O:0.999828
is	O	O:0.999662
flexible	O	O:0.998800
.	O	O:0.999823
	
The	O	O:0.999952
two	O	O:0.999983
failing	O	O:0.999630
functions	O	O:0.999721
are	O	O:0.999926
adding	O	O:0.999970
additional	O	O:0.999073
columns	O	O:0.999185
.	O	O:0.999789
	
4	O	O:0.999642
)	O	O:0.999970
The	O	O:0.999972
first	O	O:0.999967
two	O	O:0.999970
functions	O	O:0.999985
take	O	O:0.999964
a	O	O:0.999990
`	O	O:0.999974
DataFrame	B-API	O:0.938884
`	O	O:0.999991
with	O	O:0.999849
two	O	O:0.999980
parameters	O	O:0.998415
and	O	O:0.999994
returns	O	O:0.999970
data	O	O:0.999174
.	O	O:0.999892
	
`	O	O:0.999968
InnerFoo	O	O:0.990664
`	O	O:0.999998
actually	O	O:0.999878
returns	O	O:0.999973
another	O	O:0.998035
function	O	O:0.999867
,	O	O:0.999986
so	O	O:0.999990
it	O	O:0.999992
needs	O	O:0.999986
to	O	O:0.999996
be	O	O:0.999999
called	O	O:0.999375
before	O	O:0.999919
being	O	O:0.998850
passed	O	O:0.999292
into	O	O:0.996682
`	O	O:0.999989
apply	O	B-API:0.994314
`	O	O:0.999858
.	O	O:0.997940
	
Hi	O	O:0.999777
Tom	O	O:0.999706
,	O	O:0.999981
it	O	O:0.999960
doesn't	O	O:0.999906
look	O	O:0.999918
like	O	O:0.999980
this	O	O:0.999846
works	O	O:0.999747
.	O	O:0.999895
	
It	O	O:0.999864
outputs	O	O:0.999881
just	O	O:0.999904
one	O	O:0.999995
array	O	O:0.999835
and	O	O:0.999969
is	O	O:0.999993
equivalent	O	O:0.998846
to	O	O:0.999976
df2	O	O:0.999940
[	O	O:0.999910
'	O	O:0.999987
array	O	O:0.999983
']	O	O:0.999881
.sum()	B-API	B-API:0.999505
.	O	O:0.999468
	
But	O	O:0.999941
you	O	O:0.999993
have	O	O:0.999989
given	O	O:0.999953
me	O	O:0.999994
an	O	O:0.999991
idea	O	O:0.999867
with	O	O:0.999839
apply	O	B-API:0.813001
.	O	O:0.999362
	
Let	O	O:0.999855
me	O	O:0.999969
see	O	O:0.999980
if	O	O:0.999993
I	O	O:0.999995
can	O	O:0.999979
figure	O	O:0.999982
something	O	O:0.999932
out	O	O:0.999733
.	O	O:0.999936
	
Apply	O	O:0.999440
string.format()	O	O:0.995221
to	O	O:0.999977
row	O	O:0.999994
in	O	O:0.999936
Pandas	O	O:0.999894
DataFrame	B-API	O:0.991589
	
can	O	O:0.999804
be	O	O:1.000000
used	O	O:0.999986
to	O	O:0.999967
apply	O	O:0.944801
the	O	O:0.999824
format	O	O:0.999680
string	O	O:0.999932
using	O	O:0.999923
the	O	O:0.999985
column	O	O:0.999800
data	O	O:0.999866
.	O	O:0.999941
	
and	O	O:0.999994
then	O	O:0.999806
apply	O	B-API:0.757008
the	O	O:0.999815
method	O	O:0.999718
over	O	O:0.999232
it	O	O:0.999960
.	O	O:0.999947
	
You	O	O:0.999941
can	O	O:0.999988
create	O	O:0.999987
a	O	O:0.999998
boolean	O	O:0.999383
mask	O	O:0.972860
by	O	O:0.999980
calling	O	O:0.999342
`	O	O:0.999947
apply	O	B-API:0.979327
`	O	O:0.999971
on	O	O:0.998404
'	O	O:0.999996
type	O	O:0.999533
'	O	O:0.999995
column	O	O:0.999981
to	O	O:0.999997
create	O	O:0.999998
your	O	O:0.999985
new	O	O:0.999898
df	O	O:0.999218
:	O	O:0.999933
#CODE	O	O:0.999706
	
Apply	O	O:0.999895
a	O	O:0.999903
function	O	O:0.999741
to	O	O:0.999997
translate	O	O:0.999642
a	O	O:0.999999
column	O	O:0.999684
in	O	O:0.999993
pandas	O	O:0.999959
dataframe	B-API	O:0.999456
with	O	O:0.999911
condition	O	O:0.999952
on	O	O:0.999999
other	O	O:0.999982
columns	O	O:0.999868
	
Why	O	O:0.999896
not	O	O:0.999993
just	O	O:0.999969
convert	O	O:0.999784
the	O	O:0.999995
whole	O	O:0.999934
column	O	O:0.999948
to	O	O:0.999991
English	O	O:0.999974
,	O	O:0.999999
then	O	O:0.999875
use	O	O:0.999999
a	O	O:0.999997
mask	O	O:0.616463
of	O	O:0.999997
non-english	O	O:0.999980
rows	O	O:0.999937
to	O	O:0.999994
replace	O	O:0.999975
only	O	O:0.999984
the	O	O:0.999999
ones	O	O:0.999842
you	O	O:0.999996
need	O	O:0.999993
to	O	O:0.999996
?	O	O:0.999999
	
That	O	O:0.999196
is	O	O:0.999997
a	O	O:0.999991
bit	O	O:0.999424
easier	O	O:0.999916
than	O	O:0.999944
using	O	O:0.999962
apply	O	B-API:0.813846
with	O	O:0.999754
your	O	O:0.999454
conditionals	O	O:0.999639
happening	O	O:0.999828
in	O	O:0.999992
each	O	O:0.999779
step	O	O:0.999861
.	O	O:0.999954
	
and	O	O:0.999984
that	O	O:0.999966
the	O	O:0.999866
function	O	O:0.999945
inside	O	O:0.999362
`	O	O:0.999990
apply	O	B-API:0.987088
`	O	O:0.999917
should	O	O:0.999803
make	O	O:0.999990
use	O	O:0.999985
of	O	O:0.999944
the	O	O:0.999817
`	O	O:0.999982
isin	B-API	B-API:0.999866
`	O	O:0.999977
method	O	O:0.999398
.	O	O:0.999937
	
probably	O	O:0.997858
but	O	O:0.999973
calling	O	O:0.998462
`	O	O:0.999981
apply	O	B-API:0.992060
`	O	O:0.999956
will	O	O:0.999489
also	O	O:0.999992
be	O	O:0.999999
very	O	O:0.999894
slow	O	O:0.999328
as	O	O:0.999998
this	O	O:0.998681
is	O	O:0.999998
just	O	O:0.999938
a	O	O:0.999998
`	O	O:0.999905
for	O	O:0.999371
`	O	O:0.999980
loop	O	O:0.993383
	
Then	O	O:0.999564
apply	O	O:0.903569
your	O	O:0.996920
method	O	O:0.997210
:	O	O:0.999978
#CODE	O	O:0.999884
	
apply	O	O:0.634703
conditional	O	O:0.985682
if	O	O:0.999966
loop	O	O:0.999918
over	O	O:0.999701
groups	O	O:0.998168
	
I	O	O:0.999971
think	O	O:0.999953
it	O	O:0.999959
apply	O	O:0.767555
the	O	O:0.999734
function	O	O:0.999534
to	O	O:0.999947
the	O	O:0.999999
index	O	O:0.999972
instead	O	O:0.999986
of	O	O:0.999999
the	O	O:0.999984
value	O	O:0.999873
.	O	O:0.999789
	
OK	O	O:0.999817
,	O	O:0.999980
I'd	O	O:0.999968
`	O	O:0.999989
reindex	O	B-API:0.987837
`	O	O:0.999994
using	O	O:0.999953
your	O	O:0.999719
time_series	O	O:0.997639
,	O	O:0.999999
then	O	O:0.999803
`	O	O:0.999998
groupby	B-API	B-API:0.994606
`	O	O:0.999993
on	O	O:0.999897
your	O	O:0.999912
index	O	O:0.999814
and	O	O:0.999999
then	O	O:0.999954
apply	O	O:0.558986
`	O	O:0.999895
isnull	O	B-API:0.999305
`	O	O:0.999976
and	O	O:0.999915
call	O	O:0.999114
`	O	O:0.999963
sum	O	O:0.734394
`	O	O:0.999946
:	O	O:0.999820
#CODE	O	O:0.999908
	
If	O	O:0.999965
you	O	O:0.999993
want	O	O:0.999989
to	O	O:0.999996
add	O	O:0.999999
the	O	O:0.999995
values	O	O:0.999892
then	O	O:0.999950
you	O	O:0.999999
can	O	O:0.999997
call	O	O:0.999950
`	O	O:0.999998
apply	O	B-API:0.997093
`	O	O:0.999952
and	O	O:0.999682
use	O	O:0.999981
the	O	O:0.998857
`	O	O:0.999901
new_df	O	O:0.947741
`	O	O:0.999998
values	O	O:0.999560
to	O	O:0.999996
perform	O	O:0.999997
a	O	O:0.999986
lookup	O	O:0.989073
from	O	O:0.999916
`	O	O:0.999959
cos	O	B-API:0.907353
`	O	O:0.999990
df	O	O:0.990073
:	O	O:0.999975
#CODE	O	O:0.999675
	
This	O	O:0.999630
is	O	O:0.999998
by	O	O:0.999947
far	O	O:0.999932
the	O	O:0.999983
most	O	O:0.999618
efficient	O	O:0.999897
solution	O	O:0.999789
to	O	O:0.999999
this	O	O:0.999992
problem	O	O:0.999665
.	O	O:0.999925
	
The	O	O:0.999900
hard	O	O:0.999543
part	O	O:0.999780
was	O	O:0.999957
realizing	O	O:0.999973
that	O	O:0.999903
I	O	O:0.999997
could	O	O:0.999988
`	O	O:0.999998
sort	O	O:0.992047
`	O	O:0.999996
`	O	O:0.999984
df	O	O:0.999577
`	O	O:0.999997
by	O	O:0.999867
the	O	O:0.999970
`	O	O:0.999768
Type	O	O:0.998773
Rank	O	O:0.999947
`	O	O:0.999985
so	O	O:0.999942
the	O	O:0.999989
`	O	O:0.999905
Criterion	O	O:0.998892
Type	O	O:0.999976
`	O	O:0.999994
rows	O	O:0.997590
were	O	O:0.999982
ordered	O	O:0.999969
by	O	O:0.999995
their	O	O:0.999840
rank	O	O:0.994206
.	O	O:0.999868
	
This	O	O:0.999932
meant	O	O:0.999902
I	O	O:0.999987
wanted	O	O:0.999975
the	O	O:0.999911
highest	O	O:0.998902
`	O	O:0.999927
Max	O	O:0.999235
CPC	O	O:0.999950
`	O	O:0.999986
to	O	O:0.999973
apply	O	O:0.986419
to	O	O:0.999970
the	O	O:0.999999
first	O	O:0.999805
,	O	O:0.999996
the	O	O:0.999990
second	O	O:0.999777
highest	O	O:0.999175
`	O	O:0.999955
Max	O	O:0.999564
CPC	O	O:0.999960
`	O	O:0.999974
to	O	O:0.999924
the	O	O:1.000000
second	O	O:0.998835
,	O	O:0.999975
and	O	O:0.999998
so	O	O:0.999988
on	O	O:0.999896
.	O	O:0.999943
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999992
`	O	O:0.999932
str.split	B-API	B-API:0.998692
`	O	O:0.999990
,	O	O:0.999965
followed	O	O:0.999990
by	O	O:0.999986
a	O	O:0.999983
`	O	O:0.999758
apply	O	B-API:0.974429
(	O	O:0.999938
pd.Series	B-API	B-API:0.984772
)	O	O:0.999967
.stack()	B-API	B-API:0.998531
`	O	O:0.999691
(	O	O:0.999915
the	O	O:0.999987
`	O	O:0.999912
apply	O	B-API:0.983018
(	O	O:0.999941
pd.Series	B-API	B-API:0.982796
)`	O	O:0.999828
makes	O	O:0.999881
different	O	O:0.999992
columns	O	O:0.999939
of	O	O:0.999996
the	O	O:0.999992
elements	O	O:0.999877
,	O	O:0.999981
`	O	O:0.999997
stack	O	B-API:0.973530
`	O	O:0.999990
is	O	O:0.999925
for	O	O:0.999985
turning	O	O:0.999754
this	O	O:0.999845
to	O	O:0.999998
rows	O	O:0.999635
):	O	O:0.999959
#CODE	O	O:0.999919
	
I	O	O:0.999979
have	O	O:0.999967
tried	O	O:0.999751
to	O	O:0.999993
apply	O	O:0.995783
your	O	O:0.998785
answers	O	O:0.998697
but	O	O:0.999989
I	O	O:0.999968
do	O	O:0.999990
not	O	O:0.999911
get	O	O:0.999994
good	O	O:0.999909
results	O	O:0.999992
as	O	O:0.999997
you	O	O:0.999970
can	O	O:0.999988
see	O	O:0.999997
below	O	O:0.999875
:	O	O:0.999995
I	O	O:0.999999
just	O	O:0.999994
have	O	O:0.999954
the	O	O:0.999997
same	O	O:0.999977
value	O	O:0.999935
1970	O	O:0.998515
-	O	O:0.999984
01-01	O	O:0.998471
instead	O	O:0.999972
of	O	O:0.999993
having	O	O:0.999955
a	O	O:0.999997
column	O	O:0.999640
with	O	O:0.999972
the	O	O:0.999996
same	O	O:0.999969
value	O	O:0.999983
stored	O	O:0.999765
in	O	O:0.999989
datetime	O	O:0.999100
column	O	O:0.999566
.	O	O:0.999838
	
Arrival	O	O:0.998385
column	O	O:0.999330
is	O	O:0.999995
empty	O	O:0.999712
instead	O	O:0.999974
of	O	O:0.999977
having	O	O:0.999831
the	O	O:0.999998
count	O	O:0.999492
of	O	O:0.999998
arrivals	O	O:0.999849
as	O	O:0.999993
needed	O	O:0.999137
(	O	O:0.999994
from	O	O:0.999960
df1	O	O:0.998357
)	O	O:0.999978
#CODE	O	O:0.999214
	
@USER	O	O:0.999117
has	O	O:0.999971
a	O	O:0.999987
pretty	O	O:0.999172
good	O	O:0.999316
answer	O	O:0.999660
.	O	O:0.999757
	
Thinking	O	O:0.999290
outside	O	O:0.999455
the	O	O:0.999837
box	O	O:0.999852
,	O	O:0.999993
you	O	O:0.999972
could	O	O:0.999933
groupby	B-API	B-API:0.618704
school	O	O:0.999735
and	O	O:0.999986
set	O	O:0.999982
indexes	O	O:0.999435
on	O	O:0.999996
the	O	O:0.999998
date	O	O:0.999893
columns	O	O:0.999975
one	O	O:0.999995
at	O	O:0.999999
a	O	O:0.999993
time	O	O:0.999155
.	O	O:0.999899
	
Then	O	O:0.999865
you	O	O:0.999998
can	O	O:0.999990
use	O	O:0.999999
the	O	O:0.999984
rolling	O	O:0.975150
counts	O	O:0.998117
because	O	O:0.999924
it	O	O:0.999994
will	O	O:0.999986
be	O	O:0.999998
sorted	O	O:0.999992
by	O	O:0.999948
date	O	O:0.995664
.	O	O:0.999597
	
That	O	O:0.999746
will	O	O:0.999915
be	O	O:0.999999
much	O	O:0.999881
faster	O	O:0.999886
than	O	O:0.999847
using	O	O:0.999902
the	O	O:0.998556
apply	O	B-API:0.986654
method	O	O:0.997020
and	O	O:0.999985
checking	O	O:0.999783
len	O	B-API:0.786513
for	O	O:0.999987
each	O	O:0.989917
row	O	O:0.999467
.	O	O:0.999847
	
Check	O	O:0.999616
out	O	O:0.999909
cumcount	O	O:0.971060
#URL	O	O:0.999302
	
Pandas	O	O:0.999774
dataframe	B-API	O:0.998538
apply	O	B-API:0.677248
function	O	O:0.999791
to	O	O:0.999980
entire	O	O:0.999994
column	O	O:0.999823
	
`	O	O:0.999951
.apply()	B-API	B-API:0.999945
`	O	O:0.999944
is	O	O:0.999263
the	O	O:0.999965
method	O	O:0.999942
to	O	O:0.999992
apply	O	O:0.996721
a	O	O:0.999905
function	O	O:0.999498
to	O	O:0.999998
a	O	O:0.999999
`	O	O:0.999928
Series	O	O:0.997393
`	O	O:0.999998
on	O	O:0.999996
a	O	O:0.999997
row-by-row	O	O:0.998155
basis	O	O:0.999636
.	O	O:0.999821
	
Other	O	O:0.999872
than	O	O:0.999938
that	O	O:0.999935
you	O	O:0.999994
haven't	O	O:0.999972
given	O	O:0.999837
much	O	O:0.999878
information	O	O:0.999964
to	O	O:0.999993
work	O	O:0.999992
with	O	O:0.999934
.	O	O:0.999943
	
apply	O	O:0.736824
a	O	O:0.999481
function	O	O:0.999407
that	O	O:0.999930
return	O	O:0.999861
a	O	O:0.999983
list	O	O:0.983805
	
I	O	O:0.999982
know	O	O:0.999926
how	O	O:0.999936
to	O	O:0.999996
split	O	O:0.999965
a	O	O:0.999991
string	O	O:0.997225
,	O	O:0.999984
but	O	O:0.999979
I	O	O:0.999958
could	O	O:0.999975
not	O	O:0.999996
find	O	O:0.999990
a	O	O:0.999996
way	O	O:0.999894
to	O	O:0.999982
apply	O	O:0.972004
it	O	O:0.999961
to	O	O:0.999996
a	O	O:1.000000
series	O	O:0.999887
,	O	O:0.999997
or	O	O:0.999999
a	O	O:0.999966
Data	O	O:0.999127
Frame	O	O:0.999972
column	O	O:0.999337
.	O	O:0.999934
	
For	O	O:0.999820
all	O	O:0.999807
but	O	O:0.999982
the	O	O:0.999993
last	O	O:0.999566
names	O	O:0.999931
you	O	O:0.999981
can	O	O:0.999997
apply	O	O:0.982242
`"	O	O:0.999867
"	O	O:0.999206
.join	B-API	B-API:0.999056
(	O	O:0.999977
..	O	O:0.999957
)`	O	O:0.999804
to	O	O:0.999970
all	O	O:0.999995
but	O	O:0.999985
the	O	O:0.999993
last	O	O:0.998468
element	O	O:0.998812
(	O	O:0.999925
`	O	O:0.999984
[:	O	O:0.999778
-1	O	O:0.999983
]`)	O	O:0.999871
of	O	O:0.999985
each	O	O:0.997863
row	O	O:0.999713
:	O	O:0.999958
#CODE	O	O:0.999834
	
Without	O	O:0.999745
knowing	O	O:0.999532
the	O	O:0.999975
format	O	O:0.999771
of	O	O:0.999998
your	O	O:0.999958
csv	O	O:0.999960
files	O	O:0.999986
this	O	O:0.999864
question	O	O:0.999551
is	O	O:0.999993
hard	O	O:0.999395
to	O	O:0.999978
answer	O	O:0.999970
.	O	O:0.999757
	
Yes	O	O:0.999731
,	O	O:0.999995
you	O	O:0.999967
can	O	O:0.999994
probably	O	O:0.999995
use	O	O:0.999992
much	O	O:0.999508
less	O	O:0.998398
RAM	O	O:0.999952
than	O	O:0.999603
the	O	O:0.999983
3.8gb	O	O:0.998277
text	O	O:0.999842
file	O	O:0.999885
-	O	O:0.999993
No	O	O:0.999996
you	O	O:0.999992
cannot	O	O:0.999948
use	O	O:0.999995
the	O	O:0.999991
same	O	O:0.999948
strategies	O	O:0.999825
as	O	O:0.999995
you	O	O:0.999959
would	O	O:0.999990
apply	O	O:0.935534
to	O	O:0.999994
a	O	O:1.000000
file	O	O:0.999619
on	O	O:0.999999
your	O	O:0.999982
disk	O	O:0.999152
.	O	O:0.999956
	
On	O	O:0.999963
the	O	O:0.999993
disk	O	O:0.999605
you	O	O:0.999996
only	O	O:0.999998
have	O	O:0.999997
to	O	O:0.999999
store	O	O:0.999983
the	O	O:0.999973
information	O	O:0.999929
,	O	O:0.999990
in	O	O:0.999992
memory	O	O:0.999903
you	O	O:0.999989
often	O	O:0.999969
have	O	O:0.999992
to	O	O:0.999998
keep	O	O:0.999994
this	O	O:0.999951
information	O	O:0.999967
in	O	O:0.999998
a	O	O:0.999997
form	O	O:0.999693
which	O	O:0.999679
is	O	O:0.999998
easy	O	O:0.999624
to	O	O:0.999992
manipulate	O	O:0.999807
.	O	O:0.999896
	
The	O	O:0.999814
`	O	O:0.999983
args	O	O:0.992024
`	O	O:0.999990
argument	O	O:0.999824
given	O	O:0.999767
to	O	O:0.999994
apply	O	O:0.836502
function	O	O:0.998760
is	O	O:0.999954
passed	O	O:0.997873
`	O	O:0.999987
func	O	O:0.927480
`	O	O:0.999970
argument	O	O:0.990460
(	O	O:0.999990
lambda	O	O:0.999110
function	O	O:0.999951
given	O	O:0.997200
)	O	O:0.999985
.	O	O:0.999787
	
You	O	O:0.999770
are	O	O:0.999968
getting	O	O:0.999936
this	O	O:0.999838
error	O	O:0.999910
since	O	O:0.999954
two	O	O:0.999938
arguments	O	O:0.999973
are	O	O:0.999950
given	O	O:0.998050
but	O	O:0.999982
lambda	O	O:0.998944
function	O	O:0.999956
only	O	O:0.999594
accepts	O	O:0.999951
one	O	O:0.999901
argument	O	O:0.999670
.	O	O:0.999852
	
You	O	O:0.999890
could	O	O:0.999983
take	O	O:0.999995
advantage	O	O:0.999995
of	O	O:0.999984
the	O	O:0.999947
vectorized	O	O:0.999905
string	O	O:0.999756
operations	O	O:0.999940
available	O	O:0.999940
under	O	O:0.999764
`	O	O:0.999887
.str	B-API	B-API:0.947974
`	O	O:0.999978
,	O	O:0.999982
instead	O	O:0.999996
of	O	O:0.999996
using	O	O:0.999867
`	O	O:0.999963
apply	O	B-API:0.998983
`	O	O:0.999281
:	O	O:0.999009
#CODE	O	O:0.999898
	
`	O	O:0.999785
pd.read_table	B-API	B-API:0.999043
(	O	O:0.999986
filename	O	O:0.999920
,	O	O:0.999986
usecols	O	O:0.997203
=[	O	O:0.999872
0	O	O:0.999781
,	O	O:0.999982
8	O	O:0.999863
,	O	O:0.999978
9	O	O:0.999929
,	O	O:0.999988
11	O	O:0.999930
]	O	O:0.999952
,	O	O:0.999979
parse_dates	O	O:0.970225
=[	O	O:0.999925
1	O	O:0.999947
,	O	O:0.999983
2	O	O:0.999943
]	O	O:0.999942
,	O	O:0.999950
dtype={	O	O:0.996962
'	O	O:0.999954
LopNr	O	O:0.995624
'	O	O:0.999816
:	O	O:0.999975
np.uint32	O	O:0.999250
,	O	O:0.999980
'	O	O:0.999978
INDATUMA	O	O:0.993074
'	O	O:0.999834
:	O	O:0.999978
np.uint32	O	O:0.999250
,	O	O:0.999970
'	O	O:0.999982
UTDATUMA	O	O:0.997968
'	O	O:0.999866
:	O	O:0.999985
np.uint32	O	O:0.999250
,	O	O:0.999952
'	O	O:0.999973
DIAGNOS	O	O:0.984826
'	O	O:0.999859
:	O	O:0.999979
np.object	O	O:0.998110
}	O	O:0.999993
)`	O	O:0.999927
,	O	O:0.999993
assuming	O	O:0.999958
the	O	O:0.999978
dtype	B-API	B-API:0.988938
would	O	O:0.999957
apply	O	O:0.517188
to	O	O:0.999995
the	O	O:0.999999
data	O	O:0.999799
before	O	O:0.999854
it	O	O:0.999985
enters	O	O:0.999867
the	O	O:0.999979
converter	O	O:0.817116
,	O	O:0.999996
hiccups	O	O:0.999946
on	O	O:0.999997
a	O	O:0.999998
string	O	O:0.999735
in	O	O:0.999999
some	O	O:0.999962
of	O	O:0.999999
the	O	O:0.999992
rows	O	O:0.998897
:	O	O:0.999941
`	O	O:0.999992
ValueError	O	O:0.998737
:	O	O:0.999972
invalid	O	O:0.999610
literal	O	O:0.999755
for	O	O:0.999929
long()	O	O:0.998137
with	O	O:0.999938
base	O	O:0.999593
10	O	O:0.999758
:	O	O:0.999868
'	O	O:0.999987
string	O	O:0.999871
'`	O	O:0.999850
	
This	O	O:0.999815
can	O	O:0.999969
be	O	O:1.000000
done	O	O:0.999979
with	O	O:0.999490
`	O	O:0.999963
groupby	B-API	B-API:0.999402
`	O	O:0.999976
and	O	O:0.999949
using	O	O:0.999955
`	O	O:0.999569
apply	O	B-API:0.995821
`	O	O:0.999954
to	O	O:0.999755
run	O	O:0.999997
a	O	O:0.999995
simple	O	O:0.997601
function	O	O:0.999961
on	O	O:0.999989
each	O	O:0.999729
group	O	O:0.994515
:	O	O:0.999973
#CODE	O	O:0.999731
	
and	O	O:0.999978
if	O	O:0.999984
you	O	O:0.999976
want	O	O:0.999971
to	O	O:0.999994
apply	O	O:0.998197
your	O	O:0.999797
custom	O	O:0.989334
function	O	O:0.999987
you	O	O:0.999965
can	O	O:0.999983
use	O	O:0.999998
apply	O	O:0.525434
where	O	O:0.998721
it	O	O:0.999932
takes	O	O:0.999977
your	O	O:0.999954
custom	O	O:0.997221
function	O	O:0.999984
as	O	O:0.999996
a	O	O:0.999968
parameter	O	O:0.998288
,	O	O:0.999944
and	O	O:0.999989
it	O	O:0.999988
passes	O	O:0.999632
each	O	O:0.999954
group	O	O:0.999155
to	O	O:0.999999
your	O	O:0.999995
custom	O	O:0.987494
function	O	O:0.999913
#CODE	O	O:0.999483
	
Just	O	O:0.999831
to	O	O:0.999992
compare	O	O:0.999982
against	O	O:0.999981
using	O	O:0.999851
`	O	O:0.999903
apply	O	B-API:0.998897
`	O	O:0.999343
:	O	O:0.999009
#CODE	O	O:0.999898
	
If	O	O:0.999941
you	O	O:0.999626
had	O	O:0.999918
not	O	O:0.999985
called	O	O:0.999714
`	O	O:0.999997
apply	O	B-API:0.971350
`	O	O:0.999973
on	O	O:0.999867
the	O	O:0.999986
`	O	O:0.999974
groupby	B-API	B-API:0.999626
`	O	O:0.999988
object	O	O:0.999818
then	O	O:0.999965
you	O	O:0.999999
could	O	O:0.999996
access	O	O:0.999981
the	O	O:0.999989
`	O	O:0.999988
groups	O	O:0.952986
`	O	O:0.999956
:	O	O:0.999903
#CODE	O	O:0.999908
	
Including	O	O:0.999310
the	O	O:0.999971
group	O	O:0.998584
name	O	O:0.999893
in	O	O:0.999989
the	O	O:0.999994
apply	O	B-API:0.945559
function	O	O:0.999611
pandas	O	O:0.999126
python	O	O:0.999687
	
Is	O	O:0.999984
there	O	O:0.999988
away	O	O:0.999979
to	O	O:0.999997
specify	O	O:0.999959
the	O	O:0.999974
groupby	B-API	B-API:0.945595
call	O	O:0.999372
to	O	O:0.999963
use	O	O:0.999983
the	O	O:0.999950
group	O	O:0.998275
name	O	O:0.999913
in	O	O:0.999988
the	O	O:0.999988
apply	O	B-API:0.525927
lambda	O	O:0.982619
function	O	O:0.999210
.	O	O:0.999700
	
is	O	O:0.999983
there	O	O:0.999968
away	O	O:0.999976
to	O	O:0.999992
get	O	O:0.999996
the	O	O:0.999996
group	O	O:0.999643
name	O	O:0.999927
in	O	O:0.999990
the	O	O:0.999995
apply	O	B-API:0.898434
function	O	O:0.999561
,	O	O:0.999996
such	O	O:0.999914
as	O	O:0.999904
:	O	O:0.999448
#CODE	O	O:0.999782
	
How	O	O:0.999930
can	O	O:0.999970
I	O	O:1.000000
get	O	O:0.999994
the	O	O:0.999968
group	O	O:0.999529
name	O	O:0.999981
as	O	O:0.999996
an	O	O:0.999986
argument	O	O:0.999894
for	O	O:0.999980
the	O	O:0.999912
apply	O	B-API:0.752932
lambda	O	O:0.982729
function	O	O:0.999305
?	O	O:0.999875
	
This	O	O:0.999227
is	O	O:0.999993
difficult	O	O:0.999728
to	O	O:0.999996
do	O	O:0.999998
in	O	O:0.999998
place	O	O:0.999863
as	O	O:0.999999
pandas	O	O:0.999859
will	O	O:0.999911
expand	O	O:0.999841
the	O	O:0.999998
structure	O	O:0.998894
after	O	O:0.999949
the	O	O:0.999965
`	O	O:0.999960
apply	O	B-API:0.989082
`	O	O:0.999874
	
If	O	O:0.999957
you	O	O:0.999987
want	O	O:0.999984
to	O	O:0.999998
apply	O	O:0.996254
values	O	O:0.999682
from	O	O:0.999943
other	O	O:0.999998
parts	O	O:0.999933
of	O	O:0.999996
the	O	O:0.999995
df	O	O:0.999918
you	O	O:0.999972
could	O	O:0.999984
put	O	O:0.999996
those	O	O:0.999979
in	O	O:0.999994
a	O	O:0.999991
dict	O	O:0.999252
and	O	O:0.999999
then	O	O:0.999975
pass	O	O:0.999779
that	O	O:0.999971
into	O	O:0.999990
your	O	O:0.999959
apply	O	B-API:0.952538
function	O	O:0.999283
.	O	O:0.999402
	
#CODE	O	O:0.998453
	
But	O	O:0.999915
I	O	O:0.999991
recognise	O	O:0.999979
that	O	O:0.999883
my	O	O:0.999996
expressions	O	O:0.999906
contain	O	O:0.999613
sub-expressions	O	O:0.999849
that	O	O:0.999970
consist	O	O:0.999967
of	O	O:0.999999
only	O	O:0.999895
scalar	O	O:0.999981
values	O	O:0.999140
.	O	O:0.999827
	
Do	O	O:0.999957
the	O	O:0.999992
documented	O	O:0.999792
rules	O	O:0.999883
apply	O	O:0.618056
to	O	O:0.999982
sub-expressions	O	O:0.999924
as	O	O:0.999998
well	O	O:0.999943
then	O	O:0.999895
?	O	O:0.999994
	
The	O	O:0.999928
code	O	O:0.999784
does	O	O:0.999885
run	O	O:0.999444
,	O	O:0.999992
but	O	O:0.999996
the	O	O:0.999946
result	O	O:0.999760
isn't	O	O:0.999860
correct	O	O:0.999689
.	O	O:0.999966
	
The	O	O:0.999924
problem	O	O:0.999643
with	O	O:0.999879
`	O	O:0.999986
apply	O	B-API:0.950763
`	O	O:0.999802
is	O	O:0.999951
that	O	O:0.999937
you	O	O:0.999998
need	O	O:0.999985
to	O	O:0.999994
return	O	O:0.999994
mulitple	O	O:0.999940
rows	O	O:0.998426
and	O	O:0.999984
it	O	O:0.999996
expects	O	O:0.999685
only	O	O:0.999935
one	O	O:0.999975
.	O	O:0.999916
	
A	O	O:0.999983
possible	O	O:0.999149
solution	O	O:0.998044
:	O	O:0.999965
#CODE	O	O:0.999811
	
Thanks	O	O:0.999013
for	O	O:0.999971
the	O	O:0.999894
advice	O	O:0.999332
hellpanderrr	O	O:0.996661
.	O	O:0.999835
	
I	O	O:0.999964
think	O	O:0.999980
what	O	O:0.999546
I	O	O:0.999996
needed	O	O:0.999993
to	O	O:0.999984
know	O	O:0.999913
is	O	O:0.999994
that	O	O:0.998421
it's	O	O:0.999956
not	O	O:0.999996
possible	O	O:0.999970
to	O	O:0.999995
reassign	O	O:0.999974
different	O	O:0.999977
dimensions	O	O:0.999734
in	O	O:0.999991
an	O	O:0.999992
apply	O	B-API:0.830624
function	O	O:0.998413
.	O	O:0.999429
	
I	O	O:0.999988
also	O	O:0.999986
needed	O	O:0.999990
a	O	O:0.999993
way	O	O:0.999948
to	O	O:0.999995
generically	O	O:0.999996
assign	O	O:0.999598
the	O	O:0.999998
remaining	O	O:0.999927
columns	O	O:0.999868
to	O	O:0.999995
the	O	O:1.000000
new	O	O:0.999862
groups	O	O:0.998519
.	O	O:0.999887
	
In	O	O:0.999953
the	O	O:0.999993
end	O	O:0.999885
I	O	O:0.999999
came	O	O:0.999962
up	O	O:0.999929
with	O	O:0.999799
the	O	O:0.999978
technique	O	O:0.999980
shown	O	O:0.999424
in	O	O:0.999997
my	O	O:0.999957
answer	O	O:0.999628
.	O	O:0.999793
	
Cheers	O	O:0.997719
	
The	O	O:0.999741
`	O	O:0.999958
groupby	B-API	B-API:0.999126
`	O	O:0.999995
version	O	O:0.998911
of	O	O:0.999988
`	O	O:0.999977
apply	O	B-API:0.976127
`	O	O:0.999938
supports	O	O:0.912101
`	O	O:0.999990
DataFrame	B-API	O:0.924250
`	O	O:0.999995
as	O	O:0.999986
return	O	O:0.999815
value	O	O:0.999675
in	O	O:0.999981
the	O	O:0.999990
way	O	O:0.999894
which	O	O:0.999868
you	O	O:0.999899
intended	O	O:0.999563
:	O	O:0.999979
#CODE	O	O:0.999681
	
Just	O	O:0.999754
call	O	O:0.997379
`	O	O:0.999992
apply	O	B-API:0.998648
`	O	O:0.999849
and	O	O:0.999840
call	O	O:0.996801
`	O	O:0.999944
tuple	O	B-API:0.635434
`	O	O:0.999915
:	O	O:0.999772
#CODE	O	O:0.999908
	
How	O	O:0.999916
do	O	O:0.999952
I	O	O:0.999998
apply	O	O:0.902192
a	O	O:0.999653
regex	O	O:0.997388
substitution	O	O:0.999879
in	O	O:0.999997
a	O	O:0.999995
string	O	O:0.999938
column	O	O:0.999950
of	O	O:1.000000
a	O	O:0.999998
data	O	O:0.999946
frame	O	O:0.999991
?	O	O:0.999975
	
You	O	O:0.999880
should	O	O:0.999982
assign	O	O:0.999772
another	O	O:0.999975
DataFrame	B-API	O:0.998276
to	O	O:0.999986
hold	O	O:0.999882
the	O	O:0.999978
index	O	O:0.999780
and	O	O:0.999998
value	O	O:0.999995
of	O	O:0.999978
such	O	O:0.999610
,	O	O:0.999996
and	O	O:0.999982
apply	O	B-API:0.524323
to	O	O:0.999787
the	O	O:0.999996
original	O	O:0.999448
DataFrame	B-API	O:0.999846
base	O	O:0.999966
on	O	O:0.999996
the	O	O:0.999976
groupby	B-API	B-API:0.970415
field	O	O:0.997781
(	O	O:0.999842
as	O	O:0.999995
index	O	O:0.999520
)	O	O:0.999968
.	O	O:0.999881
	
Then	O	O:0.999475
apply	O	O:0.723451
and	O	O:0.999960
perform	O	O:0.998619
the	O	O:0.999011
lookup	O	O:0.628897
:	O	O:0.999906
#CODE	O	O:0.999784
	
For	O	O:0.999990
each	O	O:0.999715
of	O	O:0.999994
the	O	O:0.999996
new	O	O:0.999991
data	O	O:0.999965
frames	O	O:0.999868
I	O	O:1.000000
then	O	O:0.999961
apply	O	O:0.899139
this	O	O:0.998683
logic	O	O:0.997589
:	O	O:0.999956
#CODE	O	O:0.999715
	
A	O	O:0.999953
hack	O	O:0.999563
is	O	O:0.999994
to	O	O:0.999993
set	O	O:0.999995
the	O	O:0.999994
dtype	B-API	B-API:0.987348
to	O	O:0.999939
object	O	O:0.999946
before	O	O:0.999929
doing	O	O:0.999933
the	O	O:0.999838
apply	O	B-API:0.995316
:	O	O:0.999488
#CODE	O	O:0.999381
	
This	O	O:0.999163
solution	O	O:0.998743
worked	O	O:0.999856
if	O	O:0.999978
i	O	O:0.999966
apply	O	O:0.962157
group	O	O:0.996917
by	O	O:0.999961
column	O	O:0.999983
only	O	O:0.999888
on	O	O:0.999990
Sex	O	O:0.999608
field	O	O:0.999714
.	O	O:0.999768
	
Howver	O	O:0.999863
another	O	O:0.998944
requirement	O	O:0.999633
says	O	O:0.999771
the	O	O:0.999973
below	O	O:0.997665
format	O	O:0.999640
:	O	O:0.999963
Date	O	O:0.999588
Sex	O	O:0.999571
weight	O	O:0.999752
hight	O	O:0.999581
Salary	O	O:0.998464
	
How	O	O:0.999894
to	O	O:0.999984
apply	O	O:0.981845
cubic	O	O:0.995085
spline	O	O:0.999685
interpolation	O	O:0.999870
over	O	O:0.999878
long	O	O:0.999057
Pandas	O	O:0.999642
Series	O	O:0.999214
?	O	O:0.999890
	
This	O	O:0.999698
approach	O	O:0.999504
is	O	O:0.999989
very	O	O:0.999641
slow	O	O:0.999755
as	O	O:0.999959
it	O	O:0.999885
involves	O	O:0.999556
iteration	O	O:0.999533
and	O	O:0.999968
invoking	O	O:0.999834
the	O	O:0.997128
apply	O	B-API:0.885275
method	O	O:0.999166
for	O	O:0.999961
each	O	O:0.999684
group	O	O:0.989488
.	O	O:0.999894
	
Re	O	O:0.999919
transform	O	O:0.526620
vs	O	O:0.999823
apply	O	B-API:0.874552
:	O	O:0.999925
generally	O	O:0.999801
speaking	O	O:0.999913
you	O	O:0.999914
use	O	O:0.999989
transform	O	O:0.611990
to	O	O:0.999986
keep	O	O:0.999974
the	O	O:0.999997
same	O	O:0.999986
number	O	O:0.999993
of	O	O:0.999999
rows	O	O:0.999948
when	O	O:0.999961
the	O	O:0.999988
function	O	O:0.999972
would	O	O:0.999977
otherwise	O	O:0.999994
reduce	O	O:0.999973
the	O	O:0.999992
number	O	O:0.999959
of	O	O:0.999994
rows	O	O:0.999546
.	O	O:0.999961
	
It's	O	O:0.999823
not	O	O:0.999988
clear	O	O:0.999937
to	O	O:0.999990
me	O	O:0.999994
why	O	O:0.999978
it	O	O:0.999946
is	O	O:0.999997
needed	O	O:0.999968
here	O	O:0.999916
as	O	O:0.999977
expanding_mean	B-API	B-API:0.999490
should	O	O:0.999873
not	O	O:0.999989
be	O	O:0.999999
reducing	O	O:0.999438
anyway	O	O:0.999380
...	O	O:0.999639
	
You	O	O:0.999961
need	O	O:0.999948
to	O	O:0.999994
apply	O	O:0.998715
your	O	O:0.998310
function	O	O:0.999841
to	O	O:1.000000
a	O	O:1.000000
data	O	O:0.999933
frame	O	O:0.999990
,	O	O:0.999998
not	O	O:0.999996
a	O	O:0.999990
series	O	O:0.999392
#CODE	O	O:0.999761
	
I	O	O:0.999940
would	O	O:0.999982
apply	O	O:0.965983
your	O	O:0.999899
operations	O	O:0.999588
to	O	O:0.999999
a	O	O:1.000000
copy	O	O:0.986910
of	O	O:0.999997
the	O	O:0.998734
`	O	O:0.999984
DataFrame	B-API	O:0.769423
`	O	O:0.999988
and	O	O:0.999996
stack	O	O:0.957683
back	O	O:0.999377
together	O	O:0.999501
-	O	O:0.999998
something	O	O:0.999898
like	O	O:0.999908
this	O	O:0.999580
:	O	O:0.999979
#CODE	O	O:0.999846
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999982
`	O	O:0.999971
apply	O	B-API:0.980579
`	O	O:0.999986
to	O	O:0.999918
generate	O	O:0.999997
the	O	O:0.999995
values	O	O:0.999720
for	O	O:0.999991
each	O	O:0.999813
range	O	O:0.999910
,	O	O:0.999998
then	O	O:0.999754
`	O	O:0.999999
melt	B-API	B-API:0.991774
`	O	O:0.999998
to	O	O:0.999964
reshape	O	O:0.998017
the	O	O:0.999990
data	O	O:0.999916
into	O	O:0.999898
long	O	O:0.999899
form	O	O:0.999627
.	O	O:0.999815
	
#CODE	O	O:0.998453
	
Apply	O	O:0.999817
two	O	O:0.999961
operations	O	O:0.999887
on	O	O:0.999990
the	O	O:0.999997
sub	O	O:0.999352
`	O	O:0.999980
DataFrame	B-API	O:0.920211
`	O	O:0.999999
obtained	O	O:0.999792
by	O	O:0.999989
the	O	O:0.999929
`	O	O:0.999864
groupby	B-API	B-API:0.999740
`	O	O:0.999894
(	O	O:0.999930
one	O	O:0.999993
for	O	O:0.999995
each	O	O:0.999787
year	O	O:0.995571
)	O	O:0.999956
	
Alexander	O	O:0.998395
,	O	O:0.999994
this	O	O:0.999627
was	O	O:0.999967
extraordinarily	O	O:0.999871
helpful	O	O:0.998812
!	O	O:0.999853
	
It	O	O:0.999945
may	O	O:0.999996
take	O	O:0.999968
me	O	O:0.999997
some	O	O:0.999967
time	O	O:0.999967
to	O	O:0.999983
evaluate	O	O:0.999945
and	O	O:0.999988
apply	O	B-API:0.579024
.	O	O:0.997229
	
I	O	O:0.999967
will	O	O:0.999971
report	O	O:0.999574
back	O	O:0.999181
.	O	O:0.999880
	
I	O	O:0.999933
am	O	O:0.999998
proactively	O	O:0.998530
calling	O	O:0.999918
this	O	O:0.999755
question	O	O:0.999663
answered	O	O:0.999679
.	O	O:0.999793
	
Please	O	O:0.999597
let	O	O:0.999587
me	O	O:0.999984
know	O	O:0.999628
if	O	O:0.999995
there	O	O:0.999900
are	O	O:0.999991
other	O	O:0.999974
methods	O	O:0.999836
for	O	O:0.999941
up	O	O:0.999776
voting	O	O:0.992668
and	O	O:0.999965
giving	O	O:0.999864
positive	O	O:0.997098
feedback	O	O:0.997864
!	O	O:0.999796
	
I	O	O:0.999968
am	O	O:0.999997
new	O	O:0.999030
to	O	O:0.999973
python	O	O:0.999890
and	O	O:0.999993
pandas	O	O:0.999427
.	O	O:0.999772
	
How	O	O:0.999865
can	O	O:0.999952
we	O	O:1.000000
apply	O	O:0.902693
a	O	O:0.999883
groupby	B-API	B-API:0.999420
and	O	O:0.999988
an	O	O:0.999972
aggregate	O	B-API:0.887263
on	O	O:0.999989
multiple	O	O:0.999942
columns	O	O:0.999964
ignoring	O	O:0.999788
the	O	O:0.999971
blank	O	O:0.987203
/	O	O:0.999944
None	O	O:0.999090
/	O	O:0.999983
NaN	O	O:0.997016
values	O	O:0.999250
?	O	O:0.999910
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999657
to	O	O:0.999994
apply	O	O:0.973038
a	O	O:0.999877
groupby	B-API	B-API:0.999060
and	O	O:0.999991
count	O	O:0.998554
agregation	O	O:0.998890
function	O	O:0.999909
on	O	O:0.999992
these	O	O:0.999991
values	O	O:0.999783
as	O	O:0.999925
:	O	O:0.999939
	
Because	O	O:0.999982
your	O	O:0.999840
are	O	O:0.999992
updating	O	O:0.999888
the	O	O:0.999983
same	O	O:0.999987
set	O	O:0.999967
of	O	O:0.999999
values	O	O:0.998991
in	O	O:0.999995
that	O	O:0.999994
dataframe	B-API	O:0.999752
at	O	O:0.999997
the	O	O:0.999991
same	O	O:0.999957
time	O	O:0.999949
,	O	O:0.999999
you	O	O:0.999989
can	O	O:0.999987
try	O	O:1.000000
to	O	O:0.999998
use	O	O:0.999999
a	O	O:0.999986
temp	O	O:0.997508
variable	O	O:0.999978
to	O	O:0.999987
hold	O	O:0.999993
the	O	O:0.999982
result	O	O:0.999841
and	O	O:0.999999
apply	O	O:0.958243
back	O	O:0.993462
to	O	O:0.999981
the	O	O:0.999999
column	O	O:0.999892
,	O	O:0.999998
see	O	O:0.999984
if	O	O:0.999995
this	O	O:0.999965
helps	O	O:0.999991
ridding	O	O:0.999675
of	O	O:0.999966
the	O	O:0.999871
warning	O	O:0.999824
message	O	O:0.997741
.	O	O:0.999880
	
Here	O	O:0.997736
is	O	O:0.999991
the	O	O:0.999977
feedback	O	O:0.999710
I	O	O:0.999993
get	O	O:0.999994
from	O	O:0.999866
plugging	O	O:0.999936
that	O	O:0.999457
in	O	O:0.999973
:	O	O:0.999956
AttributeError	O	O:0.999383
:	O	O:0.999988
Cannot	O	O:0.999942
access	O	O:0.999877
callable	O	O:0.999727
attribute	O	O:0.999959
'	O	O:0.999923
unstack	O	B-API:0.834876
'	O	O:0.999964
of	O	O:0.999821
'	O	O:0.999935
DataFrameGroupBy	B-API	B-API:0.738233
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954730
'	O	O:0.999052
method	O	O:0.999572
	
I	O	O:0.999980
see	O	O:0.999992
you	O	O:0.999929
can	O	O:0.999983
do	O	O:1.000000
two	O	O:0.999997
conditions	O	O:0.999745
on	O	O:0.999991
one	O	O:0.999992
line	O	O:0.999744
,	O	O:0.999992
but	O	O:0.999982
I	O	O:0.999989
don't	O	O:0.999962
see	O	O:0.999883
how	O	O:0.999981
to	O	O:0.999989
apply	O	O:0.960085
it	O	O:0.999795
.	O	O:0.999810
	
The	O	O:0.999865
second	O	O:0.999633
line	O	O:0.999494
is	O	O:0.999971
perfect	O	O:0.996450
,	O	O:0.999979
but	O	O:0.999974
how	O	O:0.999982
do	O	O:0.999991
you	O	O:0.999992
implement	O	O:0.999791
the	O	O:0.999996
first	O	O:0.999722
stage	O	O:0.999791
,	O	O:0.999997
where	O	O:0.999982
location	O	O:0.999881
id	O	O:0.999955
can	O	O:0.999974
be	O	O:1.000000
specified	O	O:0.999910
for	O	O:0.999960
the	O	O:0.999982
group	O	O:0.998235
by	O	O:0.999988
to	O	O:0.999993
apply	O	O:0.938564
to	O	O:0.999967
the	O	O:0.999998
subset	O	O:0.997395
?	O	O:0.999966
	
Discretization	O	O:0.999612
of	O	O:0.999992
continuous	O	O:0.999595
attributes	O	O:0.999945
using	O	O:0.999257
np.histogram	B-API	B-API:0.993005
-	O	O:0.999896
how	O	O:0.999963
to	O	O:0.999997
apply	O	O:0.989723
on	O	O:0.999990
a	O	O:0.999998
new	O	O:0.999982
data	O	O:0.999931
point	O	O:0.999786
?	O	O:0.999972
	
After	O	O:0.999634
I	O	O:0.999963
"	O	O:0.999991
learned	O	O:0.982508
"	O	O:0.999992
my	O	O:0.999976
bins	O	O:0.999880
from	O	O:0.999990
train	O	O:0.999894
data	O	O:0.999992
,	O	O:0.999999
using	O	O:0.999939
`	O	O:0.998706
np.histogram	B-API	B-API:0.999524
(	O	O:0.999951
A	O	O:0.999946
[	O	O:0.999896
'	O	O:0.999963
my_var	O	O:0.998753
'])`	O	O:0.999731
how	O	O:0.999923
do	O	O:0.999954
I	O	O:0.999996
apply	O	O:0.840025
it	O	O:0.999711
on	O	O:0.999969
my	O	O:0.999997
test	O	O:0.999691
set	O	O:0.999975
?	O	O:0.999998
as	O	O:0.999985
in	O	O:0.999966
which	O	O:0.999930
bin	O	O:0.998808
is	O	O:0.999994
the	O	O:0.999949
my_var	O	O:0.997956
attribute	O	O:0.999969
of	O	O:0.999998
each	O	O:0.999934
data	O	O:0.999974
point	O	O:0.999863
?	O	O:0.999973
	
Both	O	O:0.999813
my	O	O:0.999954
train	O	O:0.991521
and	O	O:0.999999
test	O	O:0.999886
data	O	O:0.999943
are	O	O:0.999977
in	O	O:0.999999
pandas	O	O:0.999989
data	O	O:0.999982
frames	O	O:0.999749
,	O	O:0.999996
if	O	O:0.999986
it	O	O:0.999955
matters	O	O:0.999420
.	O	O:0.999915
	
Pandas	O	O:0.997088
:	O	O:0.999939
How	O	O:0.999974
to	O	O:0.999997
apply	O	O:0.994717
a	O	O:0.999893
function	O	O:0.999305
to	O	O:0.999998
different	O	O:0.999998
columns	O	O:0.999611
	
I	O	O:0.999990
want	O	O:0.999981
to	O	O:0.999939
apply	O	O:0.985157
the	O	O:0.999668
function	O	O:0.999621
to	O	O:0.999998
just	O	O:0.999999
columns	O	O:0.999987
`	O	O:0.999987
B	O	O:0.999006
`	O	O:0.999986
and	O	O:0.999708
`	O	O:0.999991
D	O	O:0.984752
`	O	O:0.999974
.	O	O:0.998848
	
(	O	O:0.999881
Applying	O	O:0.999780
it	O	O:0.999959
to	O	O:0.999992
the	O	O:0.999999
full	O	O:0.999133
DataFrame	B-API	O:0.992340
isn't	O	O:0.999968
the	O	O:0.999994
answer	O	O:0.999868
as	O	O:0.999992
that	O	O:0.999798
produces	O	O:0.999975
NaN	O	O:0.999876
values	O	O:0.999574
in	O	O:0.999979
the	O	O:0.999996
numeric	O	O:0.999686
columns	O	O:0.999621
)	O	O:0.999985
.	O	O:0.999909
	
But	O	O:0.999865
I	O	O:0.999983
cannot	O	O:0.999968
fathom	O	O:0.999363
how	O	O:0.999995
to	O	O:0.999996
select	O	O:0.999984
distinct	O	O:0.999967
columns	O	O:0.999953
to	O	O:0.999996
apply	O	O:0.982841
the	O	O:0.999639
function	O	O:0.999440
to	O	O:0.999967
.	O	O:0.999996
	
I've	O	O:0.999522
tried	O	O:0.999837
all	O	O:0.999981
manner	O	O:0.999589
of	O	O:0.999962
indexing	O	O:0.999823
by	O	O:0.999991
numeric	O	O:0.997418
position	O	O:0.999233
,	O	O:0.999993
name	O	O:0.999960
,	O	O:0.999986
etc	O	O:0.999957
.	O	O:0.999941
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.994087
a	O	O:0.999880
function	O	O:0.999014
to	O	O:0.999996
two	O	O:1.000000
columns	O	O:0.999960
of	O	O:0.999985
Pandas	O	O:0.999911
dataframe	B-API	O:0.997291
	
Pandas	O	O:0.997741
:	O	O:0.999940
How	O	O:0.999978
to	O	O:0.999992
use	O	O:0.999997
apply	O	B-API:0.890999
function	O	O:0.998672
to	O	O:0.999990
multiple	O	O:0.999997
columns	O	O:0.999679
	
Pandas	O	O:0.998700
:	O	O:0.999977
apply	O	O:0.959128
different	O	O:0.999786
functions	O	O:0.999501
to	O	O:0.999996
different	O	O:0.999998
columns	O	O:0.999603
	
Python	O	O:0.996888
Pandas	O	O:0.998684
:	O	O:0.999946
Using	O	O:0.999906
apply	O	O:0.507334
to	O	O:0.999968
apply	O	O:0.897802
1	O	O:0.999134
function	O	O:0.999685
to	O	O:0.999997
multiple	O	O:0.999997
columns	O	O:0.999718
	
Apply	O	O:0.994484
isn't	O	O:0.999304
inplace	O	O:0.963960
,	O	O:0.999985
it	O	O:0.999983
returns	O	O:0.999946
a	O	O:0.999990
new	O	O:0.999841
dataframe	B-API	O:0.999215
,	O	O:0.999993
so	O	O:0.999996
the	O	O:0.999982
question	O	O:0.999308
is	O	O:0.999993
can	O	O:0.999933
you	O	O:0.999999
return	O	O:0.999883
the	O	O:0.999972
complete	O	O:0.999878
dataframe	B-API	O:0.997178
in	O	O:0.999993
one	O	O:0.999990
go	O	O:0.999938
.	O	O:0.999957
	
None	O	O:0.999688
of	O	O:0.999996
them	O	O:0.999720
seem	O	O:0.999978
to	O	O:0.999997
apply	O	O:0.957574
to	O	O:0.999989
this	O	O:0.999985
problem	O	O:0.999865
,	O	O:0.999986
and	O	O:0.999999
all	O	O:0.999988
of	O	O:0.999998
them	O	O:0.999529
say	O	O:0.999998
that	O	O:0.999954
in	O	O:0.999998
order	O	O:0.999976
to	O	O:0.999996
generate	O	O:0.999995
unique	O	O:0.975218
values	O	O:0.999943
from	O	O:0.999981
every	O	O:0.999976
column	O	O:0.999966
,	O	O:0.999993
you	O	O:0.999977
should	O	O:0.999978
either	O	O:0.999994
use	O	O:0.999995
a	O	O:0.999953
groupby	B-API	B-API:0.999429
function	O	O:0.999919
,	O	O:0.999991
or	O	O:0.999989
select	O	O:0.999481
individual	O	O:0.999894
columns	O	O:0.999816
.	O	O:0.999869
	
I	O	O:0.999992
have	O	O:0.999992
a	O	O:0.999991
very	O	O:0.999740
large	O	O:0.999928
number	O	O:0.999867
of	O	O:0.999965
columns	O	O:0.999729
(	O	O:0.999998
over	O	O:0.999883
20	O	O:0.999731
)	O	O:0.999985
,	O	O:0.999986
so	O	O:0.999981
it	O	O:0.999972
doesn't	O	O:0.999960
really	O	O:0.999978
make	O	O:0.999955
sense	O	O:0.999907
to	O	O:0.999991
group	O	O:0.999998
them	O	O:0.999929
together	O	O:0.999975
just	O	O:0.999967
by	O	O:0.999995
writing	O	O:0.999041
out	O	O:0.999722
df.unique	O	O:0.997178
[	O	O:0.999883
'	O	O:0.999983
col1	O	O:0.998352
'	O	O:0.999980
,	O	O:0.999944
'	O	O:0.999981
col2	O	O:0.994634
'	O	O:0.999989
...	O	O:0.999046
'	O	O:0.999990
col20	O	O:0.999437
']	O	O:0.999906
	
I	O	O:0.999983
have	O	O:0.999977
tried	O	O:0.999324
.unique()	B-API	B-API:0.975870
,	O	O:0.999921
.value_counts()	B-API	B-API:0.996944
,	O	O:0.999916
and	O	O:0.999973
.count	B-API	B-API:0.981582
,	O	O:0.999913
but	O	O:0.999957
I	O	O:0.999982
can't	O	O:0.999979
figure	O	O:0.999577
out	O	O:0.999972
how	O	O:0.999983
to	O	O:0.999993
apply	O	O:0.997018
any	O	O:0.999923
of	O	O:0.999981
those	O	O:0.999895
to	O	O:0.999998
work	O	O:0.999991
across	O	O:0.999992
multiple	O	O:0.999981
columns	O	O:0.999974
,	O	O:0.999994
rather	O	O:0.999986
than	O	O:0.999959
a	O	O:0.999993
groupby	B-API	B-API:0.992390
function	O	O:0.999814
or	O	O:0.999987
anything	O	O:0.999963
that	O	O:0.999826
was	O	O:0.999991
suggested	O	O:0.999872
in	O	O:0.999991
the	O	O:0.999991
above	O	O:0.999759
links	O	O:0.999096
.	O	O:0.999834
	
Just	O	O:0.999754
call	O	O:0.997379
`	O	O:0.999992
apply	O	B-API:0.998658
`	O	O:0.999864
and	O	O:0.999943
pass	O	O:0.996658
`	O	O:0.999904
pd.Series.value_counts	B-API	B-API:0.996961
`	O	O:0.999855
:	O	O:0.999766
#CODE	O	O:0.999908
	
I	O	O:0.999800
had	O	O:0.999927
understood	O	O:0.995392
'	O	O:0.999980
converters	O	O:0.987491
'	O	O:0.999993
specified	O	O:0.999930
a	O	O:0.999963
function	O	O:0.999844
to	O	O:0.999996
apply	O	O:0.967701
to	O	O:0.999960
the	O	O:0.999998
column	O	O:0.999751
.	O	O:0.999994
evidently	O	O:0.999948
I	O	O:0.999981
was	O	O:0.999958
wrong	O	O:0.998380
-	O	O:0.999989
thank	O	O:0.999882
you	O	O:0.999964
for	O	O:0.999988
pointing	O	O:0.999889
this	O	O:0.999818
out	O	O:0.999943
,	O	O:0.999983
it's	O	O:0.999927
very	O	O:0.999665
useful	O	O:0.999235
!	O	O:0.999827
	
The	O	O:0.999810
read_excel()	B-API	B-API:0.999708
function	O	O:0.999839
has	O	O:0.999982
a	O	O:0.999996
converters	O	O:0.960832
argument	O	O:0.999955
,	O	O:0.999992
where	O	O:0.999978
you	O	O:0.999977
can	O	O:0.999999
apply	O	O:0.994692
functions	O	O:0.999860
to	O	O:0.999986
input	O	O:0.999996
in	O	O:0.999995
certain	O	O:0.999719
columns	O	O:0.999877
.	O	O:0.999920
	
You	O	O:0.999933
can	O	O:0.999871
use	O	O:0.999999
this	O	O:0.999910
to	O	O:0.999997
keep	O	O:0.999999
them	O	O:0.999964
as	O	O:0.999996
strings	O	O:0.998048
.	O	O:0.999844
	
It	O	O:0.999900
won't	O	O:0.999891
be	O	O:0.999995
super-performant	O	O:0.999458
,	O	O:0.999947
but	O	O:0.999968
you	O	O:0.999948
should	O	O:0.999987
be	O	O:1.000000
able	O	O:0.999991
to	O	O:0.999982
`	O	O:0.999998
apply	O	B-API:0.975801
(	O	O:0.999927
pd.Series	B-API	B-API:0.992580
)`	O	O:0.997115
:	O	O:0.999841
#CODE	O	O:0.999829
	
I	O	O:0.999986
think	O	O:0.999934
you	O	O:0.999866
may	O	O:0.999998
have	O	O:0.999994
to	O	O:0.999998
apply	O	O:0.993570
the	O	O:0.999942
operation	O	O:0.999549
to	O	O:0.999996
each	O	O:0.999998
column	O	O:0.999980
individually	O	O:0.999970
since	O	O:0.999957
`	O	O:0.999973
factorize	O	B-API:0.964059
`	O	O:0.999996
only	O	O:0.999693
takes	O	O:0.999986
a	O	O:0.999989
1D	O	O:0.999804
array	O	O:0.999939
as	O	O:0.999979
input	O	O:0.999303
.	O	O:0.999882
	
Accordingly	O	O:0.999748
,	O	O:0.999991
I	O	O:0.999982
followed	O	O:0.999967
the	O	O:0.999912
guidance	O	O:0.999699
provided	O	O:0.999897
elsewhere	O	O:0.999963
on	O	O:0.999996
stack	O	O:0.572681
overflow	O	O:0.999428
,	O	O:0.999971
but	O	O:0.999993
pertaining	O	O:0.999310
to	O	O:0.999969
`	O	O:0.999998
re.sub	O	O:0.914802
`	O	O:0.999989
,	O	O:0.999882
and	O	O:0.999994
attempted	O	O:0.999856
to	O	O:0.999925
apply	O	O:0.961031
it	O	O:0.999941
to	O	O:0.999955
`	O	O:0.999999
pandas.DataFrame.replace	B-API	B-API:0.999127
`	O	O:0.999967
(	O	O:0.999990
using	O	O:0.999980
replace	O	O:0.952572
with	O	O:0.999217
`	O	O:0.999979
regex=True	O	O:0.999276
,	O	O:0.999992
inplace=True	O	O:0.998911
`	O	O:0.999937
and	O	O:0.999974
with	O	O:0.999950
`	O	O:0.999928
to_replace	O	O:0.979218
`	O	O:0.999998
set	O	O:0.999626
as	O	O:0.999998
either	O	O:0.999938
a	O	O:0.999984
nested	O	O:0.997779
dictionary	O	O:0.999901
,	O	O:0.999986
if	O	O:0.999997
specifying	O	O:0.999918
a	O	O:0.999988
specific	O	O:0.999789
column	O	O:0.999956
,	O	O:0.999998
or	O	O:0.999999
otherwise	O	O:0.999970
as	O	O:0.999999
two	O	O:0.999979
lists	O	O:0.999692
,	O	O:0.999985
per	O	O:0.999969
its	O	O:0.999762
documentation	O	O:0.999871
)	O	O:0.999969
.	O	O:0.999789
	
My	O	O:0.999914
code	O	O:0.999225
works	O	O:0.999981
find	O	O:0.999895
without	O	O:0.999941
using	O	O:0.999967
a	O	O:0.999099
function	O	O:0.998760
call	O	O:0.991314
,	O	O:0.999975
but	O	O:0.999719
fails	O	O:0.999864
if	O	O:0.999988
I	O	O:0.999993
try	O	O:0.999988
to	O	O:0.999975
provide	O	O:0.999997
a	O	O:0.999982
function	O	O:0.999935
as	O	O:0.999999
one	O	O:0.999989
of	O	O:0.999992
the	O	O:0.999985
replacement	O	O:0.999983
values	O	O:0.999658
,	O	O:0.999995
despite	O	O:0.999989
doing	O	O:0.999939
so	O	O:0.999944
in	O	O:0.999974
the	O	O:0.999996
same	O	O:0.999982
manner	O	O:0.999795
as	O	O:0.999987
works	O	O:0.999903
with	O	O:0.999861
`	O	O:0.999945
re.sub	O	O:0.880718
`	O	O:0.999840
(	O	O:0.999956
this	O	O:0.999838
was	O	O:0.999768
tested	O	O:0.998296
and	O	O:0.999973
worked	O	O:0.999858
correctly	O	O:0.999261
)	O	O:0.999964
.	O	O:0.999694
	
I	O	O:0.999956
realize	O	O:0.999870
that	O	O:0.999756
the	O	O:0.999971
function	O	O:0.999518
is	O	O:0.999988
expected	O	O:0.999917
to	O	O:0.999995
accept	O	O:0.999994
a	O	O:0.999989
match	O	O:0.996543
object	O	O:0.999980
its	O	O:0.999983
only	O	O:0.999970
required	O	O:0.999831
parameter	O	O:0.999706
and	O	O:0.999991
return	O	O:0.999798
a	O	O:0.999805
string	O	O:0.995024
.	O	O:0.999693
	
@USER	O	O:0.998187
That	O	O:0.999620
logic	O	O:0.998367
is	O	O:0.999993
not	O	O:0.999962
correct	O	O:0.999935
in	O	O:0.999984
the	O	O:0.999995
operational	O	O:0.998913
sense	O	O:0.999913
that	O	O:0.999676
```	O	O:0.999981
re.sub	O	O:0.919058
```	O	O:0.999971
allows	O	O:0.998444
for	O	O:0.999990
my	O	O:0.999829
expected	O	O:0.999883
notion	O	O:0.999953
of	O	O:0.999929
function	O	O:0.999507
interpolation	O	O:0.999844
.	O	O:0.999903
	
I	O	O:0.999967
am	O	O:0.999998
using	O	O:0.999811
apply	O	B-API:0.595647
right	O	O:0.994195
now	O	O:0.999073
,	O	O:0.999974
but	O	O:0.999995
this	O	O:0.999942
really	O	O:0.999871
should	O	O:0.999980
work	O	O:0.999934
with	O	O:0.999930
```	O	O:0.999940
pandas.DataFrame.replace	B-API	B-API:0.997278
```	O	O:0.999911
.	O	O:0.999671
	
regardless	O	O:0.999889
,	O	O:0.999991
you	O	O:0.999987
should	O	O:0.999958
use	O	O:0.999997
apply	O	B-API:0.635132
or	O	O:0.999402
#URL	O	O:0.995365
	
if	O	O:0.999950
you	O	O:0.999959
don't	O	O:0.999987
want	O	O:0.999986
to	O	O:0.999991
merge	O	O:0.995814
both	O	O:0.999847
frames	O	O:0.999813
,	O	O:0.999998
you	O	O:0.999993
can	O	O:0.999988
apply	O	O:0.986933
the	O	O:0.999986
same	O	O:0.999731
logic	O	O:0.999931
on	O	O:0.999977
`	O	O:0.999996
dfV	O	O:0.997187
`	O	O:0.999982
	
Thanks	O	O:0.998308
@USER	O	O:0.999347
.	O	O:0.999955
how	O	O:0.999981
can	O	O:0.999989
we	O	O:1.000000
apply	O	O:0.872796
the	O	O:0.999843
function	O	O:0.999815
to	O	O:0.999997
only	O	O:1.000000
the	O	O:1.000000
rows	O	O:0.999920
missing	O	O:0.999873
values	O	O:0.999873
in	O	O:0.999933
C	O	O:0.999895
and	O	O:0.999973
D	O	O:0.999724
?	O	O:0.999740
	
Once	O	O:0.999892
you	O	O:0.999989
have	O	O:0.999995
that	O	O:0.999989
,	O	O:1.000000
you	O	O:0.999992
can	O	O:0.999982
apply	O	O:0.993162
it	O	O:0.999985
to	O	O:0.999999
every	O	O:0.999997
row	O	O:0.999978
using	O	O:0.999937
the	O	O:0.999895
`	O	O:0.999841
apply	O	B-API:0.998899
`	O	O:0.999925
method	O	O:0.999759
on	O	O:0.999989
dataframes	O	O:0.998678
:	O	O:0.999973
#CODE	O	O:0.999890
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999976
apply	O	B-API:0.979666
`	O	O:0.999975
to	O	O:0.999909
make	O	O:0.999997
the	O	O:0.999985
code	O	O:0.999925
more	O	O:0.999850
concise	O	O:0.999288
.	O	O:0.999928
	
For	O	O:0.999919
example	O	O:0.999764
,	O	O:0.999990
given	O	O:0.999672
this	O	O:0.999715
DataFrame	B-API	O:0.975781
:	O	O:0.999966
#CODE	O	O:0.999857
	
The	O	O:0.999849
`	O	O:0.999980
apply	O	B-API:0.951266
`	O	O:0.999838
function	O	O:0.998951
applies	O	O:0.999922
the	O	O:0.999868
`	O	O:0.999904
contains	O	O:0.984732
`	O	O:0.999994
function	O	O:0.999829
on	O	O:0.999997
each	O	O:0.999841
column	O	O:0.999534
(	O	O:0.999998
since	O	O:0.999990
by	O	O:0.999977
default	O	O:0.999855
`	O	O:0.999967
axis=0	O	O:0.996071
`)	O	O:0.999968
.	O	O:0.999600
	
The	O	O:0.999777
`	O	O:0.999989
any	O	O:0.999559
`	O	O:0.999947
function	O	O:0.999560
returns	O	O:0.999936
a	O	O:0.999984
Boolean	O	O:0.998378
mask	O	O:0.922115
,	O	O:0.999992
with	O	O:0.999905
element	O	O:0.999295
True	O	O:0.999889
indicating	O	O:0.999947
that	O	O:0.999898
at	O	O:0.999999
least	O	O:0.999991
one	O	O:0.999996
of	O	O:0.999995
the	O	O:0.999995
columns	O	O:0.999956
met	O	O:0.999941
the	O	O:0.999997
search	O	O:0.999194
criteria	O	O:0.999472
.	O	O:0.999920
	
This	O	O:0.999809
can	O	O:0.999993
then	O	O:0.999996
be	O	O:1.000000
used	O	O:0.999981
to	O	O:0.999973
perform	O	O:0.999977
selection	O	O:0.999887
on	O	O:0.999995
the	O	O:0.999990
original	O	O:0.999535
DataFrame	B-API	O:0.993606
.	O	O:0.999873
	
You	O	O:0.999865
can	O	O:0.999993
make	O	O:0.999996
use	O	O:0.999991
of	O	O:0.999906
the	O	O:0.999927
DataFrame's	O	O:0.998772
`	O	O:0.999964
apply	O	B-API:0.998395
`	O	O:0.999820
method	O	O:0.997742
.	O	O:0.999930
	
#CODE	O	O:0.998453
	
@USER	O	O:0.996253
This	O	O:0.999891
not	O	O:0.999996
a	O	O:0.999999
duplicate	O	O:0.999740
,	O	O:0.999996
the	O	O:0.999975
OP	O	O:0.999697
does	O	O:0.999607
not	O	O:0.999997
even	O	O:0.999979
use	O	O:0.999988
apply	O	B-API:0.689928
here	O	O:0.986934
.	O	O:0.999509
	
Pandas	O	O:0.997629
:	O	O:0.999949
How	O	O:0.999959
to	O	O:0.999995
structure	O	O:0.999996
row-wise	O	O:0.999839
apply	O	O:0.510949
which	O	O:0.999277
requires	O	O:0.999430
previous	O	O:0.999881
output	O	O:0.999889
as	O	O:0.999989
input	O	O:0.999080
	
Alternatively	O	O:0.999768
,	O	O:0.999992
you	O	O:0.999970
can	O	O:0.999996
also	O	O:1.000000
apply	O	O:0.993541
a	O	O:0.999775
function	O	O:0.999810
based	O	O:0.999826
on	O	O:0.999993
the	O	O:0.999991
column	O	O:0.999843
`	O	O:0.999990
col1	O	O:0.975560
`	O	O:0.999963
:	O	O:0.999679
#CODE	O	O:0.999906
	
The	O	O:0.999847
`	O	O:0.999979
apply	O	B-API:0.958122
`	O	O:0.999923
approach	O	O:0.998282
should	O	O:0.999951
be	O	O:0.999996
preferred	O	O:0.999803
in	O	O:0.999988
this	O	O:0.999982
case	O	O:0.999974
as	O	O:0.999995
it	O	O:0.999697
is	O	O:0.999994
much	O	O:0.997052
faster	O	O:0.997872
:	O	O:0.999896
#CODE	O	O:0.999562
	
Sadly	O	O:0.999108
Tom	O	O:0.999901
I'm	O	O:0.999980
at	O	O:0.999998
a	O	O:0.999999
loss	O	O:0.998628
of	O	O:0.999997
where	O	O:0.999879
to	O	O:0.999993
start	O	O:0.999971
.	O	O:0.999928
	
I	O	O:0.999845
was	O	O:0.999984
looking	O	O:0.998672
at	O	O:0.999995
this	O	O:0.999860
example	O	O:0.999448
#URL	O	O:0.998644
but	O	O:0.999913
couldn't	O	O:0.999580
apply	O	O:0.881058
it	O	O:0.999940
to	O	O:0.999979
my	O	O:0.999997
own	O	O:0.999784
	
You	O	O:0.999877
can	O	O:0.999880
`	O	O:0.999997
import	O	O:0.999627
json	O	O:0.998673
`	O	O:0.999966
and	O	O:0.999969
apply	O	O:0.575301
`	O	O:0.999252
json.loads	O	B-API:0.588999
`	O	O:0.999995
to	O	O:0.999946
convert	O	O:0.999942
the	O	O:0.999996
string	O	O:0.999974
data	O	O:0.999905
in	O	O:0.999999
your	O	O:0.999941
`	O	O:0.999995
geojson	O	O:0.996742
`	O	O:0.999998
column	O	O:0.999721
to	O	O:0.999983
`	O	O:0.999999
dict	O	O:0.988576
`	O	O:0.999991
.	O	O:0.999705
	
Then	O	O:0.999606
,	O	O:0.999999
you	O	O:0.999997
can	O	O:0.999998
extract	O	O:0.999998
data	O	O:0.999998
from	O	O:0.999938
`	O	O:0.999996
dict	O	O:0.999207
`	O	O:0.999998
directly	O	O:0.999627
,	O	O:0.999998
or	O	O:0.999979
use	O	O:0.999983
one	O	O:0.999955
of	O	O:0.999991
many	O	O:0.999905
Python	O	O:0.999901
modules	O	O:0.999948
that	O	O:0.999962
deal	O	O:0.999887
with	O	O:0.999991
GIS	O	O:0.999827
data	O	O:0.999790
.	O	O:0.999860
	
I	O	O:0.999984
find	O	O:0.999876
`	O	O:0.999983
shapely	O	O:0.995417
`	O	O:0.999998
easy	O	O:0.999131
to	O	O:0.999990
use	O	O:0.999984
and	O	O:0.999966
helpful	O	O:0.996608
in	O	O:0.999984
many	O	O:0.999681
cases	O	O:0.998970
.	O	O:0.999930
	
Pivot	B-API	O:0.979478
table	O	O:0.999965
from	O	O:0.999964
a	O	O:0.999995
pandas	O	O:0.999835
dataframe	B-API	O:0.999569
without	O	O:0.999824
an	O	O:0.999977
apply	O	B-API:0.928144
function	O	O:0.997880
	
I	O	O:0.999978
thought	O	O:0.999913
using	O	O:0.999829
the	O	O:0.999815
pivot	B-API	B-API:0.879283
function	O	O:0.999892
to	O	O:0.999982
the	O	O:0.999999
dataframe	B-API	O:0.977237
(	O	O:0.999989
df_pivot	O	O:0.999811
=	O	O:0.999716
df.pivot	B-API	B-API:0.982394
(	O	O:0.999845
index=	O	O:0.999342
'	O	O:0.999939
ID	O	O:0.999067
'	O	O:0.999966
,	O	O:0.999954
columns=	O	O:0.999606
...,	O	O:0.998903
values=	O	O:0.998938
'	O	O:0.999988
count	O	O:0.995606
')	O	O:0.999977
but	O	O:0.999938
I	O	O:0.999990
am	O	O:0.999997
missing	O	O:0.998800
the	O	O:0.999928
columns	O	O:0.999136
index	O	O:0.999883
list	O	O:0.999129
.	O	O:0.999958
	
I	O	O:0.999956
thought	O	O:0.999955
applying	O	O:0.999759
a	O	O:0.999957
lambda	O	O:0.995925
function	O	O:0.999926
to	O	O:0.999989
the	O	O:1.000000
df	O	O:0.999893
to	O	O:0.999997
generate	O	O:0.999988
an	O	O:0.999999
additional	O	O:0.999981
column	O	O:0.999945
with	O	O:0.999949
the	O	O:0.999989
missing	O	O:0.999703
column	O	O:0.999610
names	O	O:0.999887
but	O	O:0.999988
I	O	O:0.999996
have	O	O:0.999989
800M	O	O:0.998149
IDs	O	O:0.999631
and	O	O:0.999993
the	O	O:0.999991
apply	O	B-API:0.970116
function	O	O:0.999543
to	O	O:0.999986
a	O	O:0.999999
grouped	O	O:0.998740
dataframe	B-API	O:0.992986
is	O	O:0.999990
painfully	O	O:0.999462
slow	O	O:0.998911
.	O	O:0.999822
	
Is	O	O:0.999985
there	O	O:0.999986
a	O	O:0.999998
quick	O	O:0.998983
approach	O	O:0.999869
you	O	O:0.999910
might	O	O:0.999980
be	O	O:0.999999
aware	O	O:0.999961
off	O	O:0.999656
?	O	O:0.999879
	
Then	O	O:0.999593
apply	O	O:0.897135
the	O	O:0.999416
pivot	B-API	B-API:0.802545
method	O	O:0.999962
setting	O	O:0.999808
the	O	O:0.999984
new	O	O:0.999459
`	O	O:0.999972
subindex	O	O:0.981686
`	O	O:0.999998
as	O	O:0.999967
columns	O	O:0.999666
and	O	O:0.999995
fill	O	O:0.995320
`	O	O:0.999950
NaN	O	O:0.987588
`	O	O:0.999996
values	O	O:0.999472
with	O	O:0.999762
0	O	O:0.999361
:	O	O:0.999959
#CODE	O	O:0.999677
	
Does	O	O:0.999869
this	O	O:0.999965
work	O	O:0.999991
only	O	O:0.999987
on	O	O:0.999994
the	O	O:0.999997
index	O	O:0.999967
of	O	O:0.999983
the	O	O:0.999987
dataframe	B-API	O:0.998453
?	O	O:0.999937
	
I'd	O	O:0.999977
like	O	O:0.999955
the	O	O:0.999991
option	O	O:0.999951
to	O	O:0.999995
specify	O	O:0.999987
the	O	O:0.999978
field	O	O:0.996724
(	O	O:0.999990
s	O	O:0.999946
)	O	O:0.999995
to	O	O:0.999971
apply	O	O:0.993800
this	O	O:0.999424
to	O	O:0.999926
	
Sorry	O	O:0.999607
,	O	O:0.999987
I	O	O:0.999997
want	O	O:0.999983
to	O	O:0.999987
simply	O	O:0.999999
identify	O	O:0.999713
the	O	O:0.999988
column	O	O:0.999930
that	O	O:0.999936
contains	O	O:0.999916
the	O	O:0.999998
text	O	O:0.992605
'	O	O:0.999947
Measure	O	O:0.999806
'	O	O:0.999946
in	O	O:0.999976
it	O	O:0.999992
,	O	O:0.999996
which	O	O:0.999979
I	O	O:0.999999
then	O	O:0.999983
apply	O	O:0.884686
the	O	O:0.999931
filter	O	O:0.966124
measure_filter	O	O:0.999091
too	O	O:0.999929
using	O	O:0.999960
.isnin	O	O:0.722745
.	O	O:0.999221
	
Sorry	O	O:0.996637
for	O	O:0.999912
not	O	O:0.999977
being	O	O:0.999852
as	O	O:0.999991
clear	O	O:0.998289
cut	O	O:0.827640
,	O	O:0.999983
I've	O	O:0.999879
attempted	O	O:0.999906
to	O	O:0.999976
update	O	O:0.999991
my	O	O:0.999981
question	O	O:0.999885
to	O	O:0.999993
be	O	O:1.000000
more	O	O:0.999841
concise	O	O:0.998274
.	O	O:0.999920
	
I'm	O	O:0.999931
wanting	O	O:0.999925
to	O	O:0.999988
apply	O	O:0.959626
the	O	O:0.999884
logic	O	O:0.999584
to	O	O:0.999998
just	O	O:0.999996
identify	O	O:0.999816
the	O	O:0.999973
word	O	O:0.999198
'	O	O:0.999990
measure	O	O:0.999554
'	O	O:0.999984
within	O	O:0.999870
the	O	O:0.999983
following	O	O:0.999831
code	O	O:0.998504
`	O	O:0.999963
(	O	O:0.999967
df	O	O:0.999884
[	O	O:0.999847
'	O	O:0.999991
hereisalltherandomtextmeasure	O	O:0.999791
']	O	O:0.999843
.isin	B-API	B-API:0.999423
(	O	O:0.999927
measure_filter	O	O:0.998712
))`	O	O:0.998453
	
What	O	O:0.999130
is	O	O:0.999998
a	O	O:0.999989
concise	O	O:0.999062
way	O	O:0.999984
to	O	O:0.999988
split	O	O:0.999781
col3	O	O:0.999817
into	O	O:0.999836
new	O	O:0.999845
,	O	O:0.999983
named	O	O:0.999893
columns	O	O:0.999707
?	O	O:0.999963
	
(	O	O:0.999969
perhaps	O	O:0.999851
using	O	O:0.999904
lambda	O	O:0.995696
and	O	O:0.999946
apply	O	B-API:0.841421
)	O	O:0.997874
	
You	O	O:0.999900
could	O	O:0.999965
apply	O	O:0.985418
a	O	O:0.999992
join	O	B-API:0.976589
to	O	O:0.999972
the	O	O:0.999999
list	O	O:0.999680
elements	O	O:0.999918
to	O	O:0.999998
make	O	O:0.999999
a	O	O:0.999994
comma	O	O:0.999604
separated	O	O:0.999816
string	O	O:0.999690
and	O	O:0.999996
then	O	O:0.999913
call	O	O:0.999638
the	O	O:0.999995
vectorised	O	O:0.990757
`	O	O:0.999949
str.split	B-API	B-API:0.996136
`	O	O:0.999996
with	O	O:0.997208
`	O	O:0.999993
expand=True	O	O:0.998206
`	O	O:0.999998
to	O	O:0.999982
create	O	O:0.999994
the	O	O:0.999997
new	O	O:0.999924
columns	O	O:0.998710
:	O	O:0.999974
#CODE	O	O:0.999915
	
A	O	O:0.999452
cleaner	O	O:0.998732
method	O	O:0.999848
would	O	O:0.999976
be	O	O:0.999999
to	O	O:0.999998
apply	O	O:0.918926
the	O	O:0.999850
`	O	O:0.999856
pd.Series	B-API	B-API:0.998251
`	O	O:0.999996
ctor	O	O:0.994596
which	O	O:0.999976
will	O	O:0.999979
turn	O	O:0.999844
each	O	O:0.999938
list	O	O:0.999693
into	O	O:0.999882
a	O	O:0.999955
Series	O	O:0.962701
:	O	O:0.999948
#CODE	O	O:0.999839
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999982
`	O	O:0.999971
apply	O	B-API:0.980583
`	O	O:0.999983
to	O	O:0.999787
remove	O	O:0.999973
the	O	O:0.999983
nulls	O	O:0.999042
and	O	O:0.999998
take	O	O:0.999971
the	O	O:0.999982
integer	O	O:0.999422
location	O	O:0.999848
like	O	O:0.999950
this	O	O:0.999917
.	O	O:0.999945
	
#CODE	O	O:0.998453
	
If	O	O:0.999977
you	O	O:0.999985
change	O	O:0.999501
'	O	O:0.999993
transform	O	B-API:0.670533
'	O	O:0.999969
to	O	O:0.999964
'	O	O:0.999999
apply	O	O:0.508671
'	O	O:0.999813
,	O	O:0.999984
you'll	O	O:0.999552
get	O	O:0.999047
:	O	O:0.999983
#CODE	O	O:0.999911
	
Then	O	O:0.999687
what	O	O:0.999968
you'll	O	O:0.999972
need	O	O:0.999892
is	O	O:0.999983
to	O	O:0.999985
index	O	O:0.999999
each	O	O:0.999923
column	O	O:0.999988
using	O	O:0.999996
then	O	O:0.999415
apply	O	O:0.654164
`	O	O:0.999900
df.resample()	B-API	B-API:0.999996
`	O	O:0.999968
#CODE	O	O:0.997461
	
Are	O	O:0.999902
you	O	O:0.999990
trying	O	O:0.999989
to	O	O:0.999997
set	O	O:0.999994
the	O	O:0.999999
value	O	O:0.999979
of	O	O:0.999994
an	O	O:0.999996
existing	O	O:0.999983
column	O	O:0.999918
by	O	O:0.999994
applying	O	O:0.999966
a	O	O:0.999868
scalar	O	O:0.997346
function	O	O:0.999945
to	O	O:0.999997
each	O	O:0.999980
row	O	O:0.999905
?	O	O:0.999965
	
If	O	O:0.999939
that's	O	O:0.999925
the	O	O:0.999995
case	O	O:0.999899
,	O	O:0.999998
instead	O	O:0.999991
of	O	O:0.999999
iterating	O	O:0.999925
over	O	O:0.999967
the	O	O:0.999996
rows	O	O:0.999695
you	O	O:0.999976
can	O	O:0.999997
consider	O	O:0.999997
apply	O	O:0.894267
,	O	O:0.999923
map	O	B-API:0.873351
,	O	O:0.999989
or	O	O:0.999991
applymap	B-API	B-API:0.817791
methods	O	O:0.999948
based	O	O:0.999444
on	O	O:0.999999
your	O	O:0.999904
need	O	O:0.999814
.	O	O:0.999969
	
This	O	O:0.999308
is	O	O:0.999996
a	O	O:0.999984
pretty	O	O:0.999043
good	O	O:0.999815
summary	O	O:0.998874
#URL	O	O:0.998951
	
Assuming	O	O:0.999776
you	O	O:0.999988
have	O	O:0.999990
a	O	O:0.999996
unique-indexed	O	O:0.998024
dataframe	B-API	O:0.973974
(	O	O:0.999957
and	O	O:0.999997
if	O	O:0.999987
you	O	O:0.999901
don't	O	O:0.999963
,	O	O:0.999999
you	O	O:0.999992
can	O	O:0.999996
simply	O	O:0.999999
do	O	O:0.999997
`	O	O:0.999987
.reset_index()	B-API	B-API:0.999584
`	O	O:0.999991
,	O	O:0.999936
apply	O	O:0.924238
this	O	O:0.998383
,	O	O:0.999969
and	O	O:0.999999
then	O	O:0.999760
`	O	O:0.999994
set_index	B-API	B-API:0.996340
`	O	O:0.999980
after	O	O:0.999886
the	O	O:0.999992
fact	O	O:0.999122
)	O	O:0.999988
,	O	O:0.999990
you	O	O:0.999992
could	O	O:0.999958
use	O	O:0.999992
`	O	O:0.999931
DataFrame.sample	B-API	B-API:0.998111
`	O	O:0.999971
.	O	O:0.999394
	
[	O	O:0.999907
Actually	O	O:0.999951
,	O	O:0.999987
you	O	O:0.999976
should	O	O:0.999978
be	O	O:1.000000
able	O	O:0.999997
to	O	O:0.999983
use	O	O:0.999985
`	O	O:0.999962
sample	O	O:0.995351
`	O	O:0.999999
even	O	O:0.999438
if	O	O:0.999999
the	O	O:0.999992
frame	O	O:0.999968
didn't	O	O:0.999939
have	O	O:0.999991
a	O	O:0.999993
unique	O	O:0.674427
index	O	O:0.999067
,	O	O:0.999982
but	O	O:0.999990
you	O	O:0.999978
couldn't	O	O:0.999855
use	O	O:0.999994
the	O	O:0.999247
below	O	O:0.998633
method	O	O:0.999980
to	O	O:0.999992
get	O	O:0.999998
`	O	O:0.999993
df2	O	O:0.996099
`	O	O:0.999995
.	O	O:0.999657
]	O	O:0.999962
	
You	O	O:0.999921
can	O	O:0.999937
do	O	O:0.999999
this	O	O:0.999967
with	O	O:0.999732
groupby	B-API	B-API:0.991796
and	O	O:0.999950
apply	O	B-API:0.976090
:	O	O:0.998505
#CODE	O	O:0.999039
	
You	O	O:0.999958
need	O	O:0.999943
to	O	O:0.999994
apply	O	O:0.971614
`	O	O:0.999969
transform	O	B-API:0.969027
`	O	O:0.999994
to	O	O:0.999968
the	O	O:0.999999
`	O	O:0.999955
groupby	B-API	B-API:0.999304
`	O	O:0.999997
,	O	O:0.999835
which	O	O:0.999975
preserves	O	O:0.999706
the	O	O:0.999997
shape	O	O:0.999920
of	O	O:0.999998
your	O	O:0.999878
original	O	O:0.999768
DataFrame	B-API	O:0.996894
.	O	O:0.999796
	
#CODE	O	O:0.998453
	
Because	O	O:0.999913
that	O	O:0.999935
fft	O	O:0.925613
function	O	O:0.999982
changes	O	O:0.999805
the	O	O:0.999998
shape	O	O:0.999925
of	O	O:0.999988
the	O	O:0.999992
input	O	O:0.999957
you	O	O:0.999910
can't	O	O:0.999979
just	O	O:0.999982
apply	O	O:0.967506
it	O	O:0.999886
directly	O	O:0.997674
.	O	O:0.999879
	
Here	O	O:0.999069
would	O	O:0.999951
be	O	O:0.999999
one	O	O:0.999997
way	O	O:0.999905
to	O	O:0.999979
wrap	O	O:0.999815
it	O	O:0.999951
.	O	O:0.999930
	
#CODE	O	O:0.998453
	
We	O	O:0.999988
want	O	O:0.999938
to	O	O:0.999998
remove	O	O:0.999997
rows	O	O:0.999944
whose	O	O:0.999959
values	O	O:0.999984
show	O	O:0.999780
up	O	O:0.999973
in	O	O:0.999992
all	O	O:0.999992
columns	O	O:0.999976
,	O	O:0.999996
or	O	O:0.999996
in	O	O:0.999996
other	O	O:0.999983
words	O	O:0.999976
the	O	O:0.999976
values	O	O:0.999559
are	O	O:0.999988
equal	O	O:0.999631
=>	O	O:0.999995
their	O	O:0.999707
minimums	O	O:0.999483
and	O	O:0.999977
maximums	O	O:0.999871
are	O	O:0.999913
equal	O	O:0.999628
.	O	O:0.999832
	
This	O	O:0.985989
is	O	O:0.999894
method	O	O:0.999885
works	O	O:0.999961
on	O	O:0.999999
a	O	O:0.999953
`	O	O:0.999978
DataFrame	B-API	O:0.936506
`	O	O:0.999995
with	O	O:0.999942
any	O	O:0.999994
number	O	O:0.999945
of	O	O:0.999965
columns	O	O:0.999839
.	O	O:0.999962
	
If	O	O:0.999977
we	O	O:0.999991
apply	O	O:0.798520
the	O	O:0.999948
above	O	O:0.999447
,	O	O:0.999996
we	O	O:0.999998
remove	O	O:0.999972
rows	O	O:0.999661
0	O	O:0.999915
and	O	O:0.999982
2	O	O:0.999585
.	O	O:0.999301
	
Pandas	O	O:0.999831
apply	O	B-API:0.566877
to	O	O:0.999985
multiple	O	O:0.999998
rows	O	O:0.999791
with	O	O:0.999990
missing	O	O:0.999861
dates	O	O:0.996981
	
For	O	O:0.999963
a	O	O:0.999942
Pandas	O	O:0.999711
DataFrame	B-API	O:0.994657
I	O	O:0.999972
am	O	O:0.999998
looking	O	O:0.999391
for	O	O:0.999993
a	O	O:0.999981
vectorized	O	O:0.998765
way	O	O:0.999982
to	O	O:0.999980
calculate	O	O:0.999968
the	O	O:0.999999
cumulative	O	O:0.999839
sum	O	O:0.999942
of	O	O:0.999997
the	O	O:0.999992
number	O	O:0.999977
of	O	O:0.999988
views	O	O:0.999883
per	O	O:0.999983
given	O	O:0.999669
group	O	O:0.999439
,	O	O:0.999992
except	O	O:0.999954
the	O	O:0.999993
views	O	O:0.999817
from	O	O:0.999967
more	O	O:0.999955
than	O	O:0.999990
a	O	O:0.999995
week	O	O:0.998755
ago	O	O:0.999894
.	O	O:0.999910
	
I	O	O:0.999982
have	O	O:0.999946
tried	O	O:0.998788
all	O	O:0.999983
kinds	O	O:0.999940
apply	O	O:0.560298
functions	O	O:0.996935
,	O	O:0.999929
but	O	O:0.999975
I	O	O:0.999977
can't	O	O:0.999988
seem	O	O:0.999864
to	O	O:0.999998
go	O	O:0.999998
up	O	O:0.999959
and	O	O:0.999997
down	O	O:0.999677
7	O	O:0.999979
days	O	O:0.999934
to	O	O:0.999989
collect	O	O:0.999982
the	O	O:0.999999
data	O	O:0.999915
I	O	O:0.999997
need	O	O:0.999963
.	O	O:0.999772
	
I	O	O:0.999953
am	O	O:0.999993
also	O	O:0.999684
not	O	O:0.999998
sure	O	O:0.999900
how	O	O:0.999987
to	O	O:0.999998
pass	O	O:0.999929
`	O	O:0.999988
.year	B-API	B-API:0.996371
`	O	O:0.999991
argument	O	O:0.999491
after	O	O:0.999987
I	O	O:0.999985
successfully	O	O:0.999926
convert	O	O:0.996838
the	O	O:0.999978
strings	O	O:0.999837
into	O	O:0.999597
datetimes	O	O:0.999302
.	O	O:0.999714
	
I	O	O:0.999971
could	O	O:0.999976
write	O	O:0.999983
a	O	O:0.999993
wrapper	O	O:0.998582
function	O	O:0.999953
that	O	O:0.999919
takes	O	O:0.999991
each	O	O:0.999943
row	O	O:0.999959
as	O	O:0.999991
input	O	O:0.999835
and	O	O:0.999996
then	O	O:0.999790
extracts	O	O:0.999957
the	O	O:0.999992
year	O	O:0.988794
,	O	O:0.999982
but	O	O:0.999966
I	O	O:0.999993
think	O	O:0.999966
it	O	O:0.999961
s	O	O:0.999938
useful	O	O:0.999715
to	O	O:0.999987
know	O	O:0.999974
how	O	O:0.999987
to	O	O:0.999985
apply	O	O:0.990772
pandas	O	O:0.997879
syntax	O	O:0.999843
for	O	O:0.999940
future	O	O:0.999528
reference	O	O:0.999222
.	O	O:0.999805
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
Classic	O	O:0.999854
case	O	O:0.999930
of	O	O:0.999981
pivot	B-API	B-API:0.791500
.	O	O:0.999934
	
First	O	O:0.999411
,	O	O:0.999980
let's	O	O:0.999873
introduce	O	O:0.999942
a	O	O:0.999997
count	O	O:0.998719
column	O	O:0.999970
,	O	O:0.999999
then	O	O:0.999981
create	O	O:0.999992
a	O	O:0.999998
pivot	B-API	O:0.930028
table	O	O:0.999904
.	O	O:0.999901
	
Let's	O	O:0.999464
ignore	O	O:0.999599
your	O	O:0.999894
regex	O	O:0.999754
,	O	O:0.999996
since	O	O:0.999989
that	O	O:0.999082
is	O	O:0.999999
not	O	O:0.999987
the	O	O:0.999992
issue	O	O:0.998653
;	O	O:0.999992
just	O	O:0.999728
apply	O	O:0.969555
it	O	O:0.999902
to	O	O:0.999983
the	O	O:1.000000
column	O	O:0.999851
beforehand	O	O:0.999724
.	O	O:0.999965
	
#CODE	O	O:0.998453
	
What	O	O:0.998562
is	O	O:0.999987
the	O	O:0.999957
Pythonic	O	O:0.999551
way	O	O:0.999964
to	O	O:0.999993
apply	O	O:0.994776
a	O	O:0.999860
function	O	O:0.997863
to	O	O:0.999962
multi-index	O	O:0.999996
multi-columns	O	O:0.999925
dataFrame	B-API	O:0.997695
?	O	O:0.999956
	
Given	O	O:0.999267
a	O	O:0.999951
multi-index	O	O:0.999712
multi-column	O	O:0.999870
dataframe	B-API	O:0.999381
below	O	O:0.999847
,	O	O:0.999996
I	O	O:0.999996
want	O	O:0.999975
to	O	O:0.999969
apply	O	O:0.980690
LinearRegression	O	O:0.961680
to	O	O:0.999987
each	O	O:0.999998
block	O	O:0.999898
of	O	O:0.999997
this	O	O:0.999935
dataframe	B-API	O:0.999556
,	O	O:0.999990
for	O	O:0.999990
example	O	O:0.999541
,	O	O:0.999814
"	O	O:0.999975
index	O	O:0.995885
(	O	O:0.999981
X	O	O:0.999982
,	O	O:0.999989
1	O	O:0.999932
)	O	O:0.999984
,	O	O:0.999994
column	O	O:0.999805
A	O	O:0.999960
"	O	O:0.999968
.	O	O:0.999571
	
And	O	O:0.999885
compute	O	O:0.998703
the	O	O:0.999985
predicted	O	O:0.999717
dataframe	B-API	O:0.998452
as	O	O:0.999980
df_result	O	O:0.990163
.	O	O:0.999789
	
#CODE	O	O:0.998453
	
Some	O	O:0.999984
columns	O	O:0.999903
of	O	O:0.999996
the	O	O:0.999999
original	O	O:0.999987
data	O	O:0.999937
can	O	O:0.999964
contain	O	O:0.999993
missing	O	O:0.999947
value	O	O:0.999815
,	O	O:0.999971
and	O	O:0.999991
we	O	O:0.999987
cannot	O	O:0.999848
apply	O	O:0.982449
regression	O	O:0.999798
directly	O	O:0.999491
on	O	O:0.999997
them	O	O:0.998857
.	O	O:0.999969
	
For	O	O:0.999911
example	O	O:0.998987
,	O	O:0.999976
#CODE	O	O:0.999793
	
`	O	O:0.999968
df	O	O:0.998758
[	O	O:0.999993
df	O	O:0.999382
[	O	O:0.999915
'	O	O:0.999960
A	O	O:0.999988
']	O	O:0.999967
1.0	O	O:0.975169
]`	O	O:0.999236
:	O	O:0.999972
this	O	O:0.999892
works	O	O:0.999940
-	O	O:0.999993
But	O	O:0.999963
I	O	O:0.999998
want	O	O:0.999983
to	O	O:0.999934
apply	O	O:0.988111
the	O	O:0.999890
filter	O	O:0.984946
condition	O	O:0.999924
to	O	O:0.999998
all	O	O:1.000000
columns	O	O:0.999812
.	O	O:0.999905
	
what	O	O:0.999511
filter	O	O:0.998054
condition	O	O:0.999973
do	O	O:0.999988
you	O	O:0.999994
want	O	O:0.999965
to	O	O:0.999995
apply	O	O:0.959024
,	O	O:0.999982
what	O	O:0.999234
is	O	O:0.999995
an	O	O:0.999991
example	O	O:0.999891
`	O	O:0.999989
df	O	O:0.995606
`	O	O:0.999971
and	O	O:0.999968
what	O	O:0.999965
are	O	O:0.999968
you	O	O:0.999996
expecting	O	O:0.999984
as	O	O:0.999991
output	O	O:0.999375
?	O	O:0.999945
	
When	O	O:0.999376
trying	O	O:0.999957
it	O	O:0.999991
for	O	O:0.999997
whole	O	O:0.999851
df	O	O:0.999502
,	O	O:0.999995
there	O	O:0.999887
would	O	O:0.999983
surely	O	O:0.999985
be	O	O:1.000000
some	O	O:0.999993
rows	O	O:0.999808
where	O	O:0.999988
only	O	O:0.999998
some	O	O:0.999996
columns	O	O:0.999971
meet	O	O:0.999635
the	O	O:0.999960
condition	O	O:0.996069
(	O	O:0.999980
and	O	O:0.999998
vice-versa	O	O:0.999699
)	O	O:0.999946
,	O	O:0.999997
so	O	O:0.999992
for	O	O:0.999995
places	O	O:0.999923
where	O	O:0.999960
the	O	O:0.999987
condition	O	O:0.997255
is	O	O:0.999986
not	O	O:0.999952
met	O	O:0.999928
,	O	O:0.999994
it	O	O:0.999932
is	O	O:0.999992
substituted	O	O:0.999586
with	O	O:0.999843
`	O	O:0.999967
NaN	O	O:0.965772
`	O	O:0.999983
.	O	O:0.999401
	
B	O	O:0.999282
.	O	O:0.999772
	
Create	O	O:0.999925
a	O	O:0.999963
function	O	O:0.999670
which	O	O:0.999952
transforms	O	O:0.999940
the	O	O:0.999960
"	O	O:0.999986
refund	O	O:0.997735
"	O	O:0.999989
orders	O	O:0.999541
into	O	O:0.999825
negative	O	O:0.999859
values	O	O:0.996909
and	O	O:0.999985
,	O	O:0.999999
then	O	O:0.999168
,	O	O:0.999999
apply	O	O:0.916940
it	O	O:0.999936
on	O	O:0.999965
the	O	O:0.999956
Series	O	O:0.996415
:	O	O:0.999946
#CODE	O	O:0.999895
	
Why	O	O:0.999843
not	O	O:0.999993
just	O	O:0.999949
use	O	O:0.999992
an	O	O:0.999768
`	O	O:0.999984
apply	O	B-API:0.942303
`	O	O:0.999969
on	O	O:0.999850
the	O	O:0.999996
column	O	O:0.999815
,	O	O:0.999987
and	O	O:0.999996
do	O	O:0.999995
something	O	O:0.999944
like	O	O:0.999238
`	O	O:0.999992
lambda	O	O:0.997062
lst	O	O:0.997984
:	O	O:0.999789
'	O	O:0.999923
'	O	O:0.999952
.join	B-API	B-API:0.995942
(	O	O:0.999976
lst	O	O:0.999154
)`	O	O:0.999724
	
what	O	O:0.999761
does	O	O:0.999395
'	O	O:0.999979
'	O	O:0.999999
mean	O	O:0.999784
in	O	O:0.999995
the	O	O:0.999990
apply	O	B-API:0.936803
function	O	O:0.998720
?	O	O:0.999820
	
I	O	O:0.999981
think	O	O:0.999919
actually	O	O:0.999626
it's	O	O:0.999815
better	O	O:0.999554
to	O	O:0.999997
test	O	O:0.999907
for	O	O:0.999996
each	O	O:0.999526
value	O	O:0.999786
and	O	O:0.999991
apply	O	B-API:0.625571
`	O	O:0.999820
any	O	O:0.987606
`	O	O:0.999877
:	O	O:0.999614
#CODE	O	O:0.999908
	
lol	O	O:0.999007
..	O	O:0.999578
	
my	O	O:0.999965
apologies	O	O:0.999558
I	O	O:0.999976
didn't	O	O:0.999901
notice	O	O:0.999715
you	O	O:0.999996
have	O	O:0.999944
"	O	O:0.999996
2200	O	O:0.999353
"	O	O:0.999993
columns	O	O:0.999707
,	O	O:0.999993
I	O	O:0.999991
jumped	O	O:0.999793
too	O	O:0.999909
quick	O	O:0.999891
to	O	O:0.999990
a	O	O:0.999999
conclusion	O	O:0.992919
.	O	O:0.999947
but	O	O:0.999949
hey	O	O:0.999991
same	O	O:0.999979
rules	O	O:0.999876
apply	O	O:0.871530
you	O	O:0.999876
can	O	O:0.999871
do	O	O:0.999996
:	O	O:0.999996
`	O	O:0.999994
df	O	O:0.998527
[[	O	O:0.999993
col	O	O:0.998258
for	O	O:0.999988
col	O	O:0.994510
in	O	O:0.999979
df.columns	O	O:0.984624
if	O	O:0.999936
col.endswith	O	O:0.932508
(	O	O:0.999972
"	O	O:0.999942
_x	O	O:0.998122
")]]`	O	O:0.997216
.	O	O:0.999798
	
But	O	O:0.999779
hey	O	O:0.999972
just	O	O:0.999616
follow	O	O:0.999930
unutbu's	O	O:0.999310
solution	O	O:0.999334
,	O	O:0.999981
he's	O	O:0.999931
GOD	O	O:0.999685
of	O	O:0.999990
pandas	O	O:0.999070
	
Python	O	O:0.998780
Pandas	O	O:0.999742
Apply	O	O:0.999681
Formatting	O	O:0.997611
to	O	O:0.999828
Each	O	O:0.999976
Column	O	O:0.999292
in	O	O:0.999906
Dataframe	B-API	O:0.991476
Using	O	O:0.999946
a	O	O:0.999899
Dict	O	O:0.998349
Mapping	O	O:0.998417
	
I	O	O:0.999985
want	O	O:0.999973
to	O	O:0.999920
apply	O	O:0.994403
very	O	O:0.998748
specific	O	O:0.999778
formatting	O	O:0.999894
to	O	O:0.999990
each	O	O:0.999996
column	O	O:0.999896
in	O	O:0.999993
the	O	O:0.999997
dataframe	B-API	O:0.999579
using	O	O:0.999975
a	O	O:0.999987
dict	O	O:0.999355
like	O	O:0.999902
the	O	O:0.999971
following	O	O:0.993750
:	O	O:0.999909
#CODE	O	O:0.999803
	
I	O	O:0.999991
know	O	O:0.999945
I	O	O:0.999980
can	O	O:0.999971
use	O	O:0.999986
applymap	B-API	B-API:0.989705
for	O	O:0.999963
multiple	O	O:0.999869
columns	O	O:0.999747
or	O	O:0.999998
apply	O	O:0.789840
on	O	O:0.999990
a	O	O:0.999996
single	O	O:0.999475
column	O	O:0.999141
:	O	O:0.999970
#CODE	O	O:0.999854
	
How	O	O:0.999895
can	O	O:0.999959
I	O	O:1.000000
iterate	O	O:0.999980
through	O	O:0.999763
each	O	O:0.999910
column	O	O:0.999826
in	O	O:0.999995
a	O	O:0.999992
dataframe	B-API	O:0.992646
and	O	O:0.999988
apply	O	O:0.828955
formatting	O	O:0.999169
using	O	O:0.999809
a	O	O:0.999960
dictionary	O	O:0.999201
where	O	O:0.999937
the	O	O:0.999932
`	O	O:0.999991
dict	O	O:0.992994
`	O	O:0.999990
`	O	O:0.999974
key	O	O:0.999665
`	O	O:0.999975
is	O	O:0.999956
the	O	O:0.999965
`	O	O:0.999990
column	O	O:0.994266
`	O	O:0.999992
and	O	O:0.999986
the	O	O:0.999990
`	O	O:0.999957
value	O	O:0.998130
`	O	O:0.999977
is	O	O:0.999979
the	O	O:0.999957
`	O	O:0.999969
string	O	O:0.989291
`	O	O:0.999987
formatting	O	O:0.999045
?	O	O:0.999945
	
The	O	O:0.999928
easiest	O	O:0.999416
way	O	O:0.999926
would	O	O:0.999953
be	O	O:0.999999
to	O	O:0.999999
iterate	O	O:0.999968
through	O	O:0.999863
the	O	O:0.999915
`	O	O:0.999978
format_mapping	O	O:0.897605
`	O	O:0.999987
dictionary	O	O:0.998838
and	O	O:0.999999
then	O	O:0.999959
apply	O	O:0.798460
on	O	O:0.999973
the	O	O:0.999951
column	O	O:0.999614
(	O	O:0.999996
denoted	O	O:0.999961
by	O	O:0.999985
the	O	O:0.999983
key	O	O:0.999849
)	O	O:0.999987
the	O	O:0.999985
formatting	O	O:0.999941
denoted	O	O:0.999748
by	O	O:0.999982
the	O	O:0.999967
`	O	O:0.999964
value	O	O:0.996482
`	O	O:0.999987
.	O	O:0.999722
	
Example	O	O:0.997704
-	O	O:0.999952
#CODE	O	O:0.999568
	
With	O	O:0.999817
the	O	O:0.999990
hopes	O	O:0.999641
of	O	O:0.999971
x	O	O:0.999980
being	O	O:0.999983
a	O	O:0.999994
series	O	O:0.999569
with	O	O:0.999985
the	O	O:0.999997
values	O	O:0.999671
I	O	O:0.999994
want	O	O:0.999998
that	O	O:0.999832
I	O	O:0.999999
can	O	O:0.999996
column	O	O:0.999993
bind	O	O:0.999788
to	O	O:0.999993
my	O	O:0.999994
DF	O	O:0.999985
.	O	O:0.999904
	
What	O	O:0.999721
actually	O	O:0.999884
happens	O	O:0.999014
is	O	O:0.999984
that	O	O:0.999722
it	O	O:0.999998
errors	O	O:0.999927
out	O	O:0.999971
with	O	O:0.999962
an	O	O:0.999940
IndexError	O	O:0.999657
.	O	O:0.999760
	
In	O	O:0.999973
that	O	O:0.999981
case	O	O:0.999985
I	O	O:0.999999
made	O	O:0.999980
a	O	O:0.999833
function	O	O:0.999819
to	O	O:0.999991
apply	O	O:0.979459
,	O	O:0.999975
in	O	O:0.999997
place	O	O:0.999952
of	O	O:0.999997
the	O	O:0.999987
lambda	O	O:0.999096
function	O	O:0.999881
,	O	O:0.999983
so	O	O:0.999997
that	O	O:0.999960
it	O	O:0.999999
could	O	O:0.999976
except	O	O:0.999996
the	O	O:0.999992
error	O	O:0.999103
,	O	O:0.999938
but	O	O:0.999993
this	O	O:0.999958
returned	O	O:0.999940
all	O	O:0.999966
nulls	O	O:0.998890
.	O	O:0.999799
	
I	O	O:0.999955
don't	O	O:0.999973
have	O	O:0.999877
mongo	O	O:0.999708
installed	O	O:0.999691
.	O	O:0.999788
	
Is	O	O:0.999953
the	O	O:0.999973
1st	O	O:0.999629
box	O	O:0.999979
you	O	O:0.999988
show	O	O:0.999934
the	O	O:0.999999
first	O	O:0.999996
rows	O	O:0.999899
of	O	O:0.999992
`	O	O:0.999999
data	O	O:0.999716
`	O	O:0.999996
in	O	O:0.999997
your	O	O:0.999966
code	O	O:0.999547
?	O	O:0.999983
	
If	O	O:0.999943
it	O	O:0.999917
is	O	O:0.999993
,	O	O:0.999974
I	O	O:0.999993
think	O	O:0.999899
it	O	O:0.999877
would	O	O:0.999961
be	O	O:1.000000
more	O	O:0.999957
or	O	O:0.999990
less	O	O:0.999869
easy	O	O:0.999915
to	O	O:0.999993
solve	O	O:0.999978
with	O	O:0.999893
`	O	O:0.999989
apply	O	B-API:0.940951
`	O	O:0.999913
,	O	O:0.999777
there's	O	O:0.999979
many	O	O:0.999852
questions	O	O:0.999120
around	O	O:0.999603
but	O	O:0.999957
probably	O	O:0.998312
[	O	O:0.999997
this	O	O:0.999970
one	O	O:0.999965
]	O	O:0.999768
(	O	O:0.999948
#URL	O	O:0.999663
)	O	O:0.999979
will	O	O:0.999872
help	O	O:0.999761
you	O	O:0.999966
.	O	O:0.999958
	
If	O	O:0.999963
you	O	O:0.999988
find	O	O:0.999887
issues	O	O:0.999918
please	O	O:0.999891
post	O	O:0.999920
them	O	O:0.999594
.	O	O:0.999939
	
Hope	O	O:0.998403
it	O	O:0.999934
helps	O	O:0.998807
.	O	O:0.999898
	
To	O	O:0.999978
get	O	O:0.999954
exactly	O	O:0.999989
what	O	O:0.999955
you	O	O:0.999988
hoped	O	O:0.999961
to	O	O:0.999997
see	O	O:0.999997
,	O	O:0.999995
included	O	O:0.999926
the	O	O:0.999996
other	O	O:0.999987
columns	O	O:0.999870
in	O	O:0.999992
the	O	O:0.999998
group	O	O:0.999237
by	O	O:0.999932
,	O	O:0.999978
and	O	O:0.999994
apply	O	O:0.930315
sums	O	O:0.996744
to	O	O:0.999982
the	O	O:1.000000
Y	O	O:0.999986
variables	O	O:0.999205
in	O	O:0.999986
the	O	O:0.999990
frame	O	O:0.999810
:	O	O:0.999954
#CODE	O	O:0.999890
	
The	O	O:0.999906
issue	O	O:0.998441
is	O	O:0.999995
that	O	O:0.999809
you	O	O:0.999999
have	O	O:0.999999
some	O	O:0.999992
columns	O	O:0.999989
that	O	O:0.999936
are	O	O:0.999997
int	O	O:0.999601
,	O	O:0.999992
hence	O	O:0.999898
when	O	O:0.999876
trying	O	O:0.999986
to	O	O:0.999998
apply	O	O:0.905730
the	O	O:0.999930
regex	O	O:0.999249
on	O	O:0.999978
those	O	O:0.999971
int	O	O:0.999855
values	O	O:0.999775
it	O	O:0.999972
fails	O	O:0.999943
with	O	O:0.999977
the	O	O:0.999962
error	O	O:0.999106
-	O	O:0.999955
#CODE	O	O:0.999588
	
You	O	O:0.999904
can	O	O:0.999969
convert	O	O:0.999988
your	O	O:0.999994
columns	O	O:0.999915
to	O	O:0.999987
`	O	O:0.999999
str	O	O:0.981990
`	O	O:0.999991
and	O	O:0.999996
then	O	O:0.999950
apply	O	O:0.790064
the	O	O:0.999836
`	O	O:0.999830
DataFrame.filter	B-API	B-API:0.997983
`	O	O:0.999959
-	O	O:0.999886
#CODE	O	O:0.999801
	
You	O	O:0.999899
will	O	O:0.999958
need	O	O:0.999983
to	O	O:0.999999
convert	O	O:0.999953
to	O	O:0.999979
`	O	O:0.999999
str	O	O:0.993407
`	O	O:0.999993
before	O	O:0.999615
you	O	O:0.999981
can	O	O:0.999982
apply	O	O:0.995879
regex	O	O:0.999836
on	O	O:0.999973
the	O	O:0.999995
column	O	O:0.999957
name	O	O:0.999977
,	O	O:0.999999
a	O	O:0.999992
way	O	O:0.990719
(	O	O:0.999984
not	O	O:0.999996
sure	O	O:0.999939
if	O	O:0.999991
the	O	O:0.999997
most	O	O:0.999777
efficient	O	O:0.999881
)	O	O:0.999984
to	O	O:0.999989
not	O	O:0.999999
convert	O	O:0.999463
the	O	O:0.999996
column	O	O:0.999954
names	O	O:0.999941
to	O	O:0.999981
`	O	O:0.999999
str	O	O:0.995432
`	O	O:0.999996
permanently	O	O:0.996646
and	O	O:0.999999
still	O	O:0.999730
get	O	O:0.999957
the	O	O:0.999998
required	O	O:0.999968
data	O	O:0.999713
is	O	O:0.999982
-	O	O:0.999975
#CODE	O	O:0.999619
	
yes	O	O:0.999445
-	O	O:0.999989
however	O	O:0.999928
,	O	O:0.999993
I	O	O:0.999994
should	O	O:0.999989
have	O	O:0.999932
said	O	O:0.999996
that	O	O:0.999975
I	O	O:1.000000
want	O	O:0.999994
to	O	O:0.999934
apply	O	O:0.988935
the	O	O:0.999954
new	O	O:0.999404
series	O	O:0.999925
the	O	O:0.999858
requests.post	O	O:0.993439
method	O	O:0.999954
,	O	O:0.999994
in	O	O:0.999998
order	O	O:0.999838
to	O	O:0.999992
practice	O	O:0.999999
passing	O	O:0.999728
functions	O	O:0.999759
to	O	O:0.999993
series	O	O:0.999998
items	O	O:0.999940
..	O	O:0.999934
for	O	O:0.999988
instance	O	O:0.999832
,	O	O:0.999979
I	O	O:0.999993
could	O	O:0.999991
have	O	O:0.999965
100	O	O:0.999990
columns	O	O:0.999982
that	O	O:0.999941
I	O	O:0.999992
would	O	O:0.999988
not	O	O:0.999988
want	O	O:0.999991
to	O	O:0.999987
write	O	O:0.999986
out	O	O:0.999824
.	O	O:0.999958
	
The	O	O:0.999982
same	O	O:0.999930
principles	O	O:0.999631
would	O	O:0.999982
apply	O	O:0.951918
if	O	O:0.999980
you	O	O:0.999946
are	O	O:0.999996
using	O	O:0.999988
excel	O	O:0.994318
reader	O	O:0.998769
.	O	O:0.999637
	
Note	O	O:0.999651
:	O	O:0.999984
I	O	O:0.999996
thought	O	O:0.999922
you	O	O:0.999954
used	O	O:0.999941
to	O	O:0.999991
be	O	O:1.000000
able	O	O:0.999980
to	O	O:0.999994
return	O	O:0.999966
a	O	O:0.999986
list	O	O:0.996734
in	O	O:0.999995
an	O	O:0.999967
apply	O	B-API:0.784589
(	O	O:0.999943
to	O	O:0.999989
create	O	O:0.999980
a	O	O:0.999998
DataFrame	B-API	O:0.982589
which	O	O:0.999667
has	O	O:0.999978
list	O	O:0.999884
elements	O	O:0.999727
)	O	O:0.999997
this	O	O:0.999950
no	O	O:0.999983
longer	O	O:0.999978
appears	O	O:0.999980
to	O	O:0.999990
be	O	O:0.999999
the	O	O:0.999991
case	O	O:0.999281
.	O	O:0.999951
	
How	O	O:0.999938
to	O	O:0.999975
get	O	O:0.999989
the	O	O:0.999984
index	O	O:0.999835
and	O	O:0.999992
column	O	O:0.999987
name	O	O:0.999979
when	O	O:0.999921
apply	O	O:0.962585
transform	O	O:0.756129
to	O	O:0.999964
a	O	O:0.999999
Pandas	O	O:0.999546
dataframe	B-API	O:0.995779
?	O	O:0.999930
	
My	O	O:0.999855
version	O	O:0.999821
always	O	O:0.999888
replaces	O	O:0.999780
the	O	O:0.999990
positive	O	O:0.999524
values	O	O:0.999642
with	O	O:0.999732
999	O	O:0.999699
.	O	O:0.999861
	
It	O	O:0.999960
does	O	O:0.999301
'	O	O:0.999997
apply	O	O:0.872097
'	O	O:0.999957
over	O	O:0.999835
the	O	O:0.999995
rows	O	O:0.997726
,	O	O:0.999988
but	O	O:0.999994
I	O	O:0.999989
can't	O	O:0.999988
quite	O	O:0.999838
get	O	O:0.999972
how	O	O:0.999986
you	O	O:0.999991
could	O	O:0.999985
do	O	O:1.000000
this	O	O:0.999973
without	O	O:0.999810
that	O	O:0.999530
.	O	O:0.999942
	
2	O	O:0.999582
)	O	O:0.999978
There	O	O:0.999638
is	O	O:0.999997
a	O	O:0.999990
much	O	O:0.997513
better	O	O:0.999834
way	O	O:0.999956
to	O	O:0.999989
apply	O	O:0.992575
a	O	O:0.999737
function	O	O:0.999694
than	O	O:0.999805
map	O	B-API:0.551320
to	O	O:0.999993
validate	O	O:0.999988
urls	O	O:0.999012
?	O	O:0.999949
	
I	O	O:0.999954
might	O	O:0.999946
do	O	O:0.999980
this	O	O:0.999989
with	O	O:0.999983
apply	O	B-API:0.687634
rather	O	O:0.999785
than	O	O:0.998942
eval	O	B-API:0.981350
(	O	O:0.999995
especially	O	O:0.999927
if	O	O:0.999986
I	O	O:0.999982
didn't	O	O:0.999937
trust	O	O:0.998582
the	O	O:0.999963
source	O	O:0.966549
):	O	O:0.999886
#CODE	O	O:0.999619
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999939
to	O	O:0.999999
apply	O	O:0.992960
something	O	O:0.999873
like	O	O:0.997483
'	O	O:0.999999
text	O	O:0.999912
to	O	O:0.999997
columns	O	O:0.999982
'	O	O:0.999964
function	O	O:0.999950
in	O	O:0.999992
excel	O	O:0.998904
.	O	O:0.999924
	
You	O	O:0.999852
compared	O	O:0.999942
the	O	O:0.999995
result	O	O:0.999901
of	O	O:0.999978
groupby	B-API	B-API:0.994185
`	O	O:0.999986
upper_bound	O	O:0.919731
`	O	O:0.999994
to	O	O:0.999762
`	O	O:1.000000
df	O	O:0.998611
[	O	O:0.999985
'	O	O:0.999956
C	O	O:0.999854
']`	O	O:0.999687
,	O	O:0.999861
but	O	O:0.999992
they	O	O:0.999975
have	O	O:0.999996
different	O	O:0.999982
number	O	O:0.999954
of	O	O:0.999980
elements	O	O:0.999610
.	O	O:0.999931
	
Use	O	O:0.999759
`	O	O:0.999979
transform	O	B-API:0.929153
`	O	O:0.999995
to	O	O:0.999983
have	O	O:0.999998
the	O	O:0.999998
mean	O	O:0.999828
for	O	O:0.999995
each	O	O:0.999712
line	O	O:0.999884
existing	O	O:0.999816
witin	O	O:0.999363
each	O	O:0.999641
group	O	O:0.997013
and	O	O:0.999990
compare	O	O:0.999605
it	O	O:0.999975
to	O	O:0.999993
`	O	O:1.000000
df	O	O:0.998865
[	O	O:0.999985
'	O	O:0.999956
C	O	O:0.999757
']`	O	O:0.999741
.	O	O:0.999350
	
Apply	O	O:0.999824
this	O	O:0.999823
mask	O	O:0.924719
with	O	O:0.999872
`	O	O:0.999985
loc	O	B-API:0.987404
`	O	O:0.999921
:	O	O:0.999627
#CODE	O	O:0.999906
	
If	O	O:0.999964
you	O	O:0.999983
really	O	O:0.999978
must	O	O:0.999962
remove	O	O:0.999529
the	O	O:0.999983
`	O	O:0.999953
microsecond	O	O:0.960562
`	O	O:0.999999
part	O	O:0.999648
of	O	O:0.999999
the	O	O:0.999986
datetime	O	O:0.998453
,	O	O:0.999994
you	O	O:0.999988
can	O	O:0.999981
use	O	O:0.999999
the	O	O:0.999883
`	O	O:0.999967
Timestamp.replace	O	O:0.766482
`	O	O:0.999985
method	O	O:0.999945
along	O	O:0.999902
with	O	O:0.999562
`	O	O:0.999946
Series.apply	B-API	B-API:0.999670
`	O	O:0.999963
method	O	O:0.999726
to	O	O:0.999996
apply	O	O:0.984251
it	O	O:0.999907
across	O	O:0.999794
the	O	O:0.999983
series	O	O:0.999927
,	O	O:0.999997
to	O	O:0.999997
replace	O	O:0.999852
the	O	O:0.999976
`	O	O:0.999985
microsecond	O	O:0.968954
`	O	O:0.999998
part	O	O:0.999512
with	O	O:0.999982
`	O	O:0.999986
0	O	O:0.997758
`	O	O:0.999981
.	O	O:0.999154
	
Example	O	O:0.997704
-	O	O:0.999952
#CODE	O	O:0.999568
	
and	O	O:0.999708
got	O	O:0.999976
this	O	O:0.999168
error	O	O:0.999485
:	O	O:0.999916
`	O	O:0.999948
AttributeError	O	O:0.998090
:	O	O:0.999992
Cannot	O	O:0.999931
access	O	O:0.999837
callable	O	O:0.999734
attribute	O	O:0.999962
'	O	O:0.999975
drop	O	O:0.994600
'	O	O:0.999993
of	O	O:0.999844
'	O	O:0.999925
DataFrameGroupBy	B-API	B-API:0.764169
'	O	O:0.999968
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999815
apply	O	B-API:0.953059
'	O	O:0.999516
method	O	O:0.999539
`	O	O:0.999946
	
but	O	O:0.999957
when	O	O:0.999759
I	O	O:0.999997
apply	O	O:0.964363
it	O	O:0.999665
to	O	O:0.999996
a	O	O:0.999999
for	O	O:0.999899
loop	O	O:0.999460
,	O	O:0.999972
it	O	O:0.999981
shows	O	O:0.999632
integer	O	O:0.999933
type	O	O:0.999333
values	O	O:0.999135
.	O	O:0.999841
	
#CODE	O	O:0.998453
	
You	O	O:0.999844
can	O	O:0.999956
call	O	O:0.999879
`	O	O:0.999998
apply	O	B-API:0.995752
`	O	O:0.999982
with	O	O:0.999674
a	O	O:0.999996
lambda	O	O:0.999596
that	O	O:0.999791
calls	O	O:0.999912
the	O	O:0.999995
vectorise	O	O:0.979443
`	O	O:0.999973
str	O	O:0.991722
`	O	O:0.999998
methods	O	O:0.999278
to	O	O:0.999995
slice	O	O:0.999997
your	O	O:0.999808
strings	O	O:0.993389
:	O	O:0.999987
#CODE	O	O:0.999910
	
Whilst	O	O:0.999885
this	O	O:0.999845
answer	O	O:0.999742
is	O	O:0.999989
correct	O	O:0.999391
we	O	O:0.999992
should	O	O:0.999954
actively	O	O:0.999983
discourage	O	O:0.999949
using	O	O:0.999729
`	O	O:0.999914
apply	O	B-API:0.994402
`	O	O:0.999985
where	O	O:0.999583
a	O	O:0.999998
vectorised	O	O:0.999496
solution	O	O:0.999817
exists	O	O:0.999971
,	O	O:0.999999
of	O	O:0.999998
course	O	O:0.999874
if	O	O:0.999999
the	O	O:0.999991
version	O	O:0.999673
of	O	O:0.999991
pandas	O	O:0.999388
is	O	O:0.999998
so	O	O:0.999918
old	O	O:0.999975
that	O	O:0.999951
the	O	O:0.999986
`	O	O:0.999956
.str	B-API	B-API:0.962274
`	O	O:0.999987
methods	O	O:0.998673
don't	O	O:0.999976
exist	O	O:0.999959
then	O	O:0.999988
this	O	O:0.999990
would	O	O:0.999995
be	O	O:0.999999
a	O	O:0.999999
valid	O	O:0.993886
answer	O	O:0.999360
	
I	O	O:0.999951
wrote	O	O:0.999953
the	O	O:0.999333
function	O	O:0.999953
that	O	O:0.999948
will	O	O:0.999984
compare	O	O:0.999987
those	O	O:0.999965
2	O	O:0.999940
strings	O	O:0.998207
and	O	O:0.999960
return	O	O:0.999757
True	O	O:0.996453
or	O	O:0.999985
False	O	O:0.999361
,	O	O:0.999997
the	O	O:0.999986
problem	O	O:0.998513
is	O	O:0.999979
I	O	O:0.999996
fail	O	O:0.999959
to	O	O:0.999958
see	O	O:0.999997
how	O	O:0.999987
to	O	O:0.999997
apply	O	O:0.989104
/	O	O:0.999953
applymap	B-API	B-API:0.969823
to	O	O:0.999982
the	O	O:1.000000
consecutive	O	O:0.999830
rows	O	O:0.997752
:	O	O:0.999978
#CODE	O	O:0.999957
	
First	O	O:0.999333
`	O	O:0.999975
NaN	O	O:0.975145
`	O	O:0.999993
are	O	O:0.999965
converted	O	O:0.999911
to	O	O:0.999989
`	O	O:0.999999
0	O	O:0.998547
`	O	O:0.999996
,	O	O:0.999994
then	O	O:0.999952
apply	O	O:0.696646
function	O	O:0.999799
above	O	O:0.998267
and	O	O:0.999987
it	O	O:0.999987
return	O	O:0.996753
NaN	O	O:0.998889
instead	O	O:0.999964
of	O	O:0.999995
problematic	O	O:0.999541
values	O	O:0.999707
.	O	O:0.999851
	
So	O	O:0.999970
you	O	O:0.999996
have	O	O:0.999990
to	O	O:1.000000
find	O	O:1.000000
rows	O	O:0.999927
with	O	O:0.999966
NaN	O	O:0.999649
values	O	O:0.999243
and	O	O:0.999985
return	O	O:0.999964
subset	O	O:0.997073
of	O	O:0.999996
original	O	O:0.998404
`	O	O:0.999997
df	O	O:0.992994
`	O	O:0.999981
.	O	O:0.999314
	
#CODE	O	O:0.998453
	
Note	O	O:0.999950
that	O	O:0.999914
`	O	O:0.999996
copy()	B-API	O:0.591976
`	O	O:0.999991
is	O	O:0.999960
required	O	O:0.999856
if	O	O:0.999990
you	O	O:0.999992
wish	O	O:0.999990
to	O	O:0.999996
later	O	O:0.999999
apply	O	O:0.939623
changes	O	O:0.998462
to	O	O:0.999993
that	O	O:0.999997
new	O	O:0.999989
dataframe	B-API	O:0.998954
`	O	O:0.999987
dfa	O	O:0.988598
`	O	O:0.999979
.	O	O:0.999266
	
Otherwise	O	O:0.999827
,	O	O:0.999996
if	O	O:0.999996
I	O	O:0.999997
remember	O	O:0.999933
correctly	O	O:0.999711
,	O	O:0.999996
you	O	O:0.999955
would	O	O:0.999987
be	O	O:1.000000
applying	O	O:0.999998
changes	O	O:0.999196
by	O	O:0.999949
pointer	O	O:0.999822
,	O	O:0.999988
much	O	O:0.999946
like	O	O:0.999976
when	O	O:0.999981
using	O	O:0.999974
dictionaries	O	O:0.998137
.	O	O:0.999079
	
Function	O	O:0.998148
np.unique	B-API	B-API:0.891716
with	O	O:0.999735
parameter	O	O:0.999615
`	O	O:0.999987
return_index=True	O	O:0.982812
`	O	O:0.999992
return	O	O:0.999031
unique	O	O:0.964584
indexes	O	O:0.999311
of	O	O:0.999947
array	O	O:0.999775
.	O	O:0.999911
	
But	O	O:0.999920
I	O	O:0.999997
need	O	O:0.999981
indexes	O	O:0.998604
inverted	O	O:0.999903
,	O	O:0.999999
so	O	O:0.999996
firstly	O	O:0.999812
I	O	O:0.999991
inverted	O	O:0.999905
array	O	O:0.999485
and	O	O:0.999996
then	O	O:0.999889
subtracting	O	O:0.999996
them	O	O:0.999457
by	O	O:0.999981
index	O	O:0.999754
.	O	O:0.999708
	
Function	O	O:0.999193
apply	O	O:0.551458
cannot	O	O:0.999550
access	O	O:0.997720
to	O	O:0.999987
index	O	O:0.999992
link	O	O:0.999870
,	O	O:0.999997
so	O	O:0.999996
it	O	O:0.999966
is	O	O:0.999999
count	O	O:0.999698
from	O	O:0.999986
length	O	O:0.999835
of	O	O:0.999990
columns	O	O:0.999633
`	O	O:0.999998
colD	O	O:0.992982
`	O	O:0.999999
minus	O	O:0.996510
1	O	O:0.999923
.	O	O:0.999761
	
Last	O	O:0.999869
values	O	O:0.999872
of	O	O:0.999989
column	O	O:0.999897
`	O	O:0.999997
colB	O	O:0.989318
`	O	O:0.999995
are	O	O:0.999954
summed	O	O:0.999981
by	O	O:0.999988
indexes	O	O:0.999514
from	O	O:0.999943
list	O	O:0.999833
of	O	O:0.999997
column	O	O:0.999523
`	O	O:0.999998
colF	O	O:0.981822
`	O	O:0.999989
.	O	O:0.999339
	
#CODE	O	O:0.998453
	
You	O	O:0.999935
can	O	O:0.999964
see	O	O:0.999999
that	O	O:0.999984
the	O	O:0.999996
`	O	O:0.999989
apply	O	B-API:0.974035
`	O	O:0.999964
approach	O	O:0.984449
is	O	O:0.999978
not	O	O:0.999446
working	O	O:0.998195
:	O	O:0.999939
#CODE	O	O:0.999748
	
what	O	O:0.998855
version	O	O:0.999703
?	O	O:0.999970
	
your	O	O:0.999634
apply	O	B-API:0.553989
code	O	O:0.997694
worked	O	O:0.999636
for	O	O:0.999987
me	O	O:0.999736
in	O	O:0.999712
`	O	O:0.999978
0.16.2	O	O:0.994266
`	O	O:0.999971
	
I	O	O:0.999910
tried	O	O:0.999977
this	O	O:0.999474
approach	O	O:0.999929
,	O	O:0.999994
however	O	O:0.999896
I	O	O:0.999990
don't	O	O:0.999988
know	O	O:0.999632
how	O	O:0.999990
to	O	O:0.999991
apply	O	O:0.969706
`	O	O:0.999940
concat	O	B-API:0.997813
`	O	O:0.999994
inside	O	O:0.999576
the	O	O:0.999978
for	O	O:0.999861
loop	O	O:0.997905
.	O	O:0.999721
	
#CODE	O	O:0.998453
	
First	O	O:0.999716
,	O	O:0.999991
apply	O	B-API:0.582595
`	O	O:0.999824
isinstance	O	O:0.896891
`	O	O:0.999997
to	O	O:0.999977
determine	O	O:0.999985
which	O	O:0.999953
elements	O	O:0.999817
are	O	O:0.999992
floats	O	O:0.999935
,	O	O:0.999998
then	O	O:0.999956
slice	O	O:0.999995
your	O	O:0.999989
series	O	O:0.999970
to	O	O:0.999997
get	O	O:0.999999
the	O	O:0.999999
elements	O	O:0.999934
back	O	O:0.998790
.	O	O:0.999965
	
Then	O	O:0.999878
just	O	O:0.999978
apply	O	O:0.705640
`	O	O:0.999820
str	O	O:0.936973
`	O	O:0.999954
and	O	O:0.999855
you're	O	O:0.999949
good	O	O:0.994892
.	O	O:0.999942
	
#CODE	O	O:0.998453
	
I	O	O:0.999979
can	O	O:0.999985
do	O	O:0.999995
the	O	O:0.999997
proportion	O	O:0.999780
using	O	O:0.999934
group	O	O:0.992684
/	O	O:0.999752
apply	O	B-API:0.960047
:	O	O:0.999311
#CODE	O	O:0.999204
	
sorting	O	O:0.994003
is	O	O:0.999963
slow	O	O:0.997184
,	O	O:0.999994
it's	O	O:0.999008
O	O	O:0.993357
(	O	O:0.999944
n*log	O	O:0.924460
(	O	O:0.999975
n	O	O:0.999868
))	O	O:0.999101
.	O	O:0.999679
	
I	O	O:0.999962
think	O	O:0.999972
this	O	O:0.999666
may	O	O:0.999995
also	O	O:0.999979
be	O	O:1.000000
doing	O	O:0.999945
an	O	O:0.999927
apply	O	B-API:0.753539
,	O	O:0.999835
which	O	O:0.998458
is	O	O:0.999995
also	O	O:0.999886
slow	O	O:0.999785
.	O	O:0.999752
	
What's	O	O:0.999794
the	O	O:0.999968
reason	O	O:0.999826
you	O	O:0.999995
have	O	O:0.999994
to	O	O:0.999998
do	O	O:1.000000
this	O	O:0.999941
?	O	O:0.999972
	
For	O	O:0.999977
a	O	O:0.999993
40,000	O	O:0.998915
0	O	O:0.999951
row	O	O:0.999971
df	O	O:0.999908
using	O	O:0.999792
`	O	O:0.999797
str.replace	B-API	B-API:0.999183
`	O	O:0.999972
is	O	O:0.999859
faster	O	O:0.999876
than	O	O:0.999919
using	O	O:0.999757
`	O	O:0.999912
apply	O	B-API:0.998873
`	O	O:0.999375
:	O	O:0.999009
#CODE	O	O:0.999898
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999661
to	O	O:0.999993
apply	O	O:0.987076
something	O	O:0.999764
like	O	O:0.999512
this	O	O:0.999968
....	O	O:0.999050
	
#CODE	O	O:0.998453
	
After	O	O:0.999905
that	O	O:0.999936
I	O	O:0.999998
can	O	O:0.999997
easily	O	O:0.999992
count	O	O:0.999930
the	O	O:0.999995
occurrences	O	O:0.999437
per	O	O:0.999892
column	O	O:0.999844
.	O	O:0.999941
	
But	O	O:0.999972
currently	O	O:0.999939
I	O	O:0.999997
am	O	O:0.999997
stuck	O	O:0.996565
in	O	O:0.999994
achieving	O	O:0.999985
one	O	O:0.999986
of	O	O:0.999984
the	O	O:0.999988
two	O	O:0.999997
given	O	O:0.998618
results	O	O:0.999883
.	O	O:0.999935
	
I	O	O:0.999970
know	O	O:0.999796
it	O	O:0.999921
should	O	O:0.999993
work	O	O:0.999978
somehow	O	O:0.999989
with	O	O:0.999973
`	O	O:0.999991
apply	O	B-API:0.902117
`	O	O:0.999967
or	O	O:0.999468
`	O	O:0.999993
transform	O	B-API:0.949744
`	O	O:0.999954
,	O	O:0.999957
but	O	O:0.999991
I	O	O:0.999996
have	O	O:0.999985
no	O	O:0.999953
precise	O	O:0.999934
idea	O	O:0.999862
unfortunately	O	O:0.999407
.	O	O:0.999886
	
Here's	O	O:0.999723
one	O	O:0.999968
way	O	O:0.999960
,	O	O:0.999994
with	O	O:0.999901
`	O	O:0.999976
apply	O	B-API:0.974448
`	O	O:0.999913
and	O	O:0.998763
`	O	O:0.999987
first_valid_index	B-API	B-API:0.999971
`	O	O:0.999845
:	O	O:0.999721
#CODE	O	O:0.999908
	
Then	O	O:0.999575
,	O	O:0.999999
apply	O	O:0.719490
`	O	O:0.999959
get	O	O:0.998175
`	O	O:0.999999
to	O	O:0.999984
the	O	O:1.000000
column	O	O:0.999845
,	O	O:0.999997
returning	O	O:0.999924
the	O	O:0.999975
original	O	O:0.999793
value	O	O:0.999946
if	O	O:0.999982
it	O	O:0.999910
is	O	O:0.999993
not	O	O:0.999902
in	O	O:0.999993
the	O	O:0.999961
dictionary	O	O:0.998063
:	O	O:0.999942
#CODE	O	O:0.999866
	
I	O	O:0.999987
have	O	O:0.999968
the	O	O:0.999938
jaccard	O	O:0.998259
similarity	O	O:0.999417
function	O	O:0.999979
defined	O	O:0.999902
as	O	O:0.999977
`	O	O:0.999969
jaccard()	O	O:0.951574
`	O	O:0.999995
I	O	O:0.999992
only	O	O:0.999997
want	O	O:0.999872
to	O	O:0.999989
know	O	O:0.999991
how	O	O:0.999984
to	O	O:0.999988
apply	O	O:0.991290
it	O	O:0.999960
to	O	O:0.999985
`	O	O:1.000000
df	O	O:0.998592
`	O	O:0.999997
so	O	O:0.999992
that	O	O:0.999990
I	O	O:0.999999
can	O	O:0.999996
have	O	O:0.999992
this	O	O:0.999998
type	O	O:0.999913
of	O	O:0.999985
representation	O	O:0.999786
matrix	O	O:0.999971
by	O	O:0.999981
the	O	O:0.999973
end	O	O:0.998786
.	O	O:0.999832
	
Thank	O	O:0.998362
You	O	O:0.999727
!	O	O:0.999881
	
So	O	O:0.999963
you	O	O:0.999993
need	O	O:0.999985
apply	O	O:0.572311
`	O	O:0.999960
jaccard	O	O:0.848927
`	O	O:0.999977
function	O	O:0.999585
to	O	O:0.999989
`	O	O:1.000000
df	O	O:0.995991
`	O	O:0.999991
?	O	O:0.999788
	
What	O	O:0.998013
is	O	O:0.999982
input	O	O:0.999646
and	O	O:0.999996
output	O	O:0.999895
of	O	O:0.999831
`	O	O:0.999973
jaccard()	O	O:0.931358
`	O	O:0.999985
?	O	O:0.999787
	
Can	O	O:0.999882
you	O	O:0.999957
use	O	O:0.999887
function	O	O:0.999919
df.apply	B-API	B-API:0.879002
or	O	O:0.999941
df.applymap	B-API	B-API:0.988593
?	O	O:0.999941
	
[	O	O:0.999908
src	O	O:0.999742
]	O	O:0.999433
(	O	O:0.999892
#URL	O	O:0.999741
)	O	O:0.999978
Or	O	O:0.999986
you	O	O:0.999996
need	O	O:0.999993
create	O	O:0.999743
`	O	O:0.999999
jaccard_custom()	O	O:0.868740
`	O	O:0.999987
?	O	O:0.999818
	
use	O	O:0.999955
data	O	O:0.999685
from	O	O:0.999973
two	O	O:0.999975
or	O	O:0.999999
more	O	O:0.999966
columns	O	O:0.999990
when	O	O:0.999961
using	O	O:0.999970
.map	B-API	B-API:0.955543
to	O	O:0.999940
apply	O	O:0.981245
a	O	O:0.999511
function	O	O:0.996765
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
Ideally	O	O:0.999777
I'd	O	O:0.999995
like	O	O:0.999976
to	O	O:0.999998
add	O	O:0.999999
a	O	O:0.999976
`	O	O:0.999963
lambda	O	O:0.998520
`	O	O:0.999987
in	O	O:0.999894
the	O	O:0.999991
`	O	O:0.999849
cumsum	B-API	B-API:0.999376
`	O	O:0.999987
.	O	O:0.999417
	
So	O	O:0.999976
to	O	O:0.999995
get	O	O:0.999998
to	O	O:0.999994
`	O	O:1.000000
y	O	O:0.999686
`	O	O:0.999997
I	O	O:0.999995
take	O	O:0.999943
`	O	O:0.999951
x	O	O:0.996256
`	O	O:0.999987
and	O	O:0.999980
apply	O	O:0.950031
some	O	O:0.970760
function	O	O:0.999175
.	O	O:0.999820
	
...	O	O:0.999212
and	O	O:0.999997
then	O	O:0.999936
cast	O	O:0.999894
the	O	O:0.999999
result	O	O:0.999948
of	O	O:0.999983
"	O	O:0.999985
apply	O	O:0.502044
"	O	O:0.999900
to	O	O:0.999891
a	O	O:0.999999
list	O	O:0.984717
.	O	O:0.999907
	
#CODE	O	O:0.998453
	
I	O	O:0.999987
have	O	O:0.999973
the	O	O:0.999992
dtaaframe	O	O:0.999894
above	O	O:0.999913
,	O	O:0.999997
where	O	O:0.999877
the	O	O:0.999980
index	O	O:0.999646
is	O	O:0.999991
the	O	O:0.999994
column	O	O:0.999844
datetime	O	O:0.997060
.	O	O:0.999821
	
I	O	O:0.999936
would	O	O:0.999997
like	O	O:0.999952
to	O	O:0.999999
decrease	O	O:0.999995
the	O	O:0.999994
values	O	O:0.999152
in	O	O:0.999990
the	O	O:0.999999
column	O	O:0.999755
JD	O	O:0.999847
(	O	O:0.999998
by	O	O:0.999978
1	O	O:0.999949
)	O	O:0.999987
from	O	O:0.999898
5th	O	O:0.999801
Jan	O	O:0.999834
2000	O	O:0.999381
to	O	O:0.999980
8th	O	O:0.999983
Jan	O	O:0.999785
2000	O	O:0.999793
,	O	O:0.999996
using	O	O:0.999978
the	O	O:0.999695
dates	O	O:0.832825
(	O	O:0.999667
and	O	O:0.999989
not	O	O:0.999992
merely	O	O:0.999908
row	O	O:0.999982
numbers	O	O:0.998592
)	O	O:0.999974
.	O	O:0.999901
	
Is	O	O:0.999983
there	O	O:0.999968
a	O	O:0.999996
pandas	O	O:0.996815
command	O	O:0.999960
to	O	O:0.999980
do	O	O:0.999999
this	O	O:0.999919
?	O	O:0.999970
	
I	O	O:0.999975
have	O	O:0.999973
been	O	O:0.998992
playing	O	O:0.999785
around	O	O:0.999785
with	O	O:0.999727
apply	O	B-API:0.909922
,	O	O:0.999547
but	O	O:0.999859
not	O	O:0.999987
sure	O	O:0.999942
how	O	O:0.999990
to	O	O:0.999980
use	O	O:0.999996
it	O	O:0.999739
	
Nice	O	O:0.997713
and	O	O:0.999986
simple	O	O:0.999608
,	O	O:0.999962
no	O	O:0.999990
need	O	O:0.999856
for	O	O:0.999988
apply	O	B-API:0.780547
.	O	O:0.997086
	
The	O	O:0.999849
`	O	O:0.999980
apply	O	B-API:0.963774
`	O	O:0.999751
function	O	O:0.999142
returns	O	O:0.999972
a	O	O:0.999971
new	O	O:0.999294
DataFrame	B-API	O:0.999101
instead	O	O:0.999973
of	O	O:0.999997
modifying	O	O:0.999649
the	O	O:0.999963
input	O	O:0.998491
in-place	O	O:0.998170
.	O	O:0.999790
	
Therefore	O	O:0.999873
,	O	O:0.999988
in	O	O:0.999985
`	O	O:0.999993
remove_leap_JD()	O	O:0.915546
`	O	O:0.999994
,	O	O:0.999985
the	O	O:0.999993
code	O	O:0.999035
should	O	O:0.999975
be	O	O:0.999999
changed	O	O:0.999916
to	O	O:0.999993
something	O	O:0.999992
like	O	O:0.998592
:	O	O:0.999985
#CODE	O	O:0.999873
	
You	O	O:0.999911
could	O	O:0.999903
write	O	O:0.999995
your	O	O:0.999955
logic	O	O:0.999962
as	O	O:0.999999
a	O	O:0.999707
function	O	O:0.999371
and	O	O:0.999999
then	O	O:0.999908
apply	O	O:0.864589
the	O	O:0.999801
function	O	O:0.999521
to	O	O:0.999997
your	O	O:0.999998
dataframe	B-API	O:0.999656
using	O	O:0.999838
applymap()	B-API	B-API:0.998879
.	O	O:0.997146
	
Also	O	O:0.999568
,	O	O:0.999996
note	O	O:0.999959
that	O	O:0.999925
'	O	O:0.999992
0	O	O:0.999989
pound	O	O:0.996696
'	O	O:0.999864
should	O	O:0.999895
probably	O	O:0.999980
read	O	O:0.999645
'	O	O:0.999939
0	O	O:0.999953
pounds	O	O:0.998275
'	O	O:0.999877
.	O	O:0.999858
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999665
to	O	O:0.999996
apply	O	O:0.986800
a	O	O:0.999919
function	O	O:0.998374
which	O	O:0.999883
returns	O	O:0.999688
the	O	O:0.999989
latest	O	O:0.998938
or	O	O:0.999997
maximum	O	O:0.999918
date	O	O:0.999669
for	O	O:0.999997
a	O	O:0.999960
stock	O	O:0.970404
(	O	O:0.999989
on	O	O:0.999988
which	O	O:0.999957
I	O	O:0.999999
have	O	O:0.999989
collected	O	O:0.999807
prices	O	O:0.999486
for	O	O:0.999991
multiple	O	O:0.999950
days	O	O:0.998827
)	O	O:0.999975
.	O	O:0.999802
	
Where	O	O:0.999764
,	O	O:0.999991
`	O	O:0.999995
values	O	O:0.986993
`	O	O:0.999993
contain	O	O:0.999278
numpy	O	O:0.999965
arrays	O	O:0.999657
,	O	O:0.999973
`	O	O:0.999991
apply	O	B-API:0.977967
`	O	O:0.999960
,	O	O:0.998909
`	O	O:0.999992
lambda	O	O:0.995761
x	O	O:0.999895
:	O	O:0.999828
pd.Series	B-API	B-API:0.994202
(	O	O:0.999987
x	O	O:0.999975
)`	O	O:0.999943
on	O	O:0.999976
`	O	O:0.999995
df	O	O:0.999451
[	O	O:0.999989
'	O	O:0.999979
values	O	O:0.999452
']`	O	O:0.999809
#CODE	O	O:0.999589
	
Eventually	O	O:0.999839
,	O	O:0.999993
I	O	O:0.999995
think	O	O:0.999927
having	O	O:0.999060
the	O	O:0.999879
distance	O	O:0.999784
matrix	O	O:0.999942
as	O	O:0.999998
a	O	O:0.999985
pandas	O	O:0.999202
DataFrame	B-API	O:0.997483
may	O	O:0.999969
be	O	O:0.999996
convenient	O	O:0.999879
,	O	O:0.999995
since	O	O:0.999904
I	O	O:0.999990
may	O	O:0.999999
apply	O	O:0.841717
some	O	O:0.999320
ranking	O	O:0.997503
and	O	O:0.999985
ordering	O	O:0.999904
operations	O	O:0.999472
per	O	O:0.999689
row	O	O:0.998930
(	O	O:0.999982
e.g.	O	O:0.999918
find	O	O:0.999786
the	O	O:0.999996
top	O	O:0.999816
N	O	O:0.999863
closest	O	O:0.999833
objects	O	O:0.999763
to	O	O:0.999962
object	O	O:0.999990
`	O	O:0.999997
first	O	O:0.999237
`)	O	O:0.999987
.	O	O:0.999570
	
Use	O	O:0.999680
`	O	O:0.999975
apply	O	B-API:0.957072
`	O	O:0.999975
on	O	O:0.999918
column	O	O:0.999988
to	O	O:0.999998
do	O	O:0.999998
`	O	O:0.999996
df	O	O:0.998292
[	O	O:0.999991
'	O	O:0.999970
B	O	O:0.999956
']	O	O:0.999911
.apply	B-API	B-API:0.999334
(	O	O:0.999887
lambda	O	O:0.998798
x	O	O:0.999646
:	O	O:0.999930
sum	O	O:0.999624
(	O	O:0.999968
map	O	B-API:0.983177
(	O	O:0.999946
int	O	O:0.998930
,	O	O:0.999940
x.split	O	O:0.770604
(	O	O:0.999899
'	O	O:0.999944
,	O	O:0.999986
'))))`	O	O:0.998955
#CODE	O	O:0.999390
	
If	O	O:0.999920
I	O	O:0.999997
understood	O	O:0.999969
correctly	O	O:0.999962
your	O	O:0.999943
issue	O	O:0.999842
,	O	O:0.999999
maybe	O	O:0.999960
you	O	O:0.999965
can	O	O:0.999997
just	O	O:0.999999
apply	O	O:0.989227
a	O	O:0.999949
filter	O	O:0.944394
like	O	O:0.998670
:	O	O:0.999973
#CODE	O	O:0.999817
	
You	O	O:0.999939
can	O	O:0.999902
use	O	O:0.999997
the	O	O:0.999525
apply	O	B-API:0.983420
method	O	O:0.996500
:	O	O:0.999760
	
A	O	O:0.999981
dictionary	O	O:0.999901
can	O	O:0.999981
only	O	O:0.999999
have	O	O:0.999997
one	O	O:0.999997
value	O	O:0.999993
associated	O	O:0.999933
with	O	O:0.999982
a	O	O:0.999985
key	O	O:0.999942
,	O	O:0.999994
so	O	O:0.999993
that	O	O:0.999620
syntax	O	O:0.999979
won't	O	O:0.999964
work	O	O:0.999873
.	O	O:0.999981
	
There	O	O:0.999555
are	O	O:0.999990
two	O	O:0.999994
other	O	O:0.999910
options	O	O:0.999968
that	O	O:0.999964
come	O	O:0.999961
to	O	O:0.999999
mind	O	O:0.999997
to	O	O:0.999996
get	O	O:1.000000
a	O	O:0.999999
similar	O	O:0.998981
output	O	O:0.999765
:	O	O:0.999992
you	O	O:0.999996
could	O	O:0.999993
select	O	O:0.999943
the	O	O:0.999998
column	O	O:0.999950
using	O	O:0.999946
brackets	O	O:0.998494
,	O	O:0.999931
and	O	O:0.999998
then	O	O:0.999966
pass	O	O:0.999878
a	O	O:0.999999
list	O	O:0.998661
of	O	O:0.999995
the	O	O:0.999969
reduction	O	O:0.999953
operations	O	O:0.999896
you	O	O:0.999989
want	O	O:0.999987
to	O	O:0.999980
apply	O	O:0.768514
:	O	O:0.999801
#CODE	O	O:0.999426
	
How	O	O:0.999893
can	O	O:0.999954
I	O	O:1.000000
skip	O	O:0.995066
(	O	O:0.999968
don't	O	O:0.999973
apply	O	O:0.670216
)	O	O:0.999988
the	O	O:0.999875
filters	O	O:0.999090
that	O	O:0.998888
are	O	O:0.999995
None	O	O:0.999886
?	O	O:0.999900
	
#CODE	O	O:0.998453
	
Filtering	O	O:0.995870
in	O	O:0.999947
pandas	O	O:0.999549
-	O	O:0.999996
how	O	O:0.999965
to	O	O:0.999997
apply	O	O:0.992681
a	O	O:0.999674
custom	O	O:0.918300
method	O	O:0.999153
(	O	O:0.999980
lambda	O	O:0.999694
)	O	O:0.999952
?	O	O:0.999765
	
How	O	O:0.999878
can	O	O:0.999951
I	O	O:1.000000
apply	O	O:0.938748
`	O	O:0.999753
df	O	O:0.995231
[	O	O:0.999962
'	O	O:0.999974
column2	O	O:0.999585
']	O	O:0.999926
.apply	B-API	B-API:0.999320
(	O	O:0.999889
lambda	O	O:0.998871
x	O	O:0.999517
:	O	O:0.999855
'	O	O:0.999992
str2	O	O:0.999649
'	O	O:0.999957
in	O	O:0.999920
x.split	O	O:0.905915
(	O	O:0.999945
'	O	O:0.999945
,	O	O:0.999994
'))`	O	O:0.999736
to	O	O:0.999904
#CODE	O	O:0.999978
	
To	O	O:0.999925
apply	O	O:0.895454
this	O	O:0.999631
,	O	O:0.999997
simply	O	O:0.999857
use	O	O:0.999994
this	O	O:0.999823
to	O	O:0.999983
filter	O	O:0.999484
the	O	O:0.999946
DataFrame	B-API	O:0.989153
.	O	O:0.999876
	
Example	O	O:0.997704
-	O	O:0.999952
#CODE	O	O:0.999568
	
ops	O	O:0.999564
,	O	O:0.999987
one	O	O:0.999993
more	O	O:0.999674
thing	O	O:0.999850
.	O	O:0.999882
	
What	O	O:0.999770
if	O	O:0.999986
the	O	O:0.999989
key	O	O:0.999963
to	O	O:0.999986
filter	O	O:0.999513
for	O	O:0.999865
(	O	O:0.999933
`	O	O:0.999988
str2	O	O:0.997244
`)	O	O:0.999979
is	O	O:0.999976
an	O	O:0.999991
array	O	O:0.999978
itself	O	O:0.999206
?	O	O:0.999946
	
For	O	O:0.999718
example	O	O:0.998659
:	O	O:0.999697
`	O	O:0.999996
.....	O	O:0.998389
apply	O	B-API:0.881392
(	O	O:0.999782
lambda	O	O:0.997685
x	O	O:0.999274
:	O	O:0.999829
[	O	O:0.999975
'	O	O:0.999991
str2	O	O:0.998428
'	O	O:0.999977
,	O	O:0.999967
'	O	O:0.999988
str4	O	O:0.999701
']	O	O:0.999910
in	O	O:0.999345
x.split	O	O:0.838786
(	O	O:0.999944
'	O	O:0.999936
,	O	O:0.999990
'))]`	O	O:0.999177
?	O	O:0.999911
	
That	O	O:0.999275
won't	O	O:0.999956
work	O	O:0.999831
,	O	O:0.999997
but	O	O:0.999982
actually	O	O:0.999896
that's	O	O:0.999985
what	O	O:0.999946
I	O	O:0.999999
need	O	O:0.999963
--	O	O:0.999987
the	O	O:0.999959
filter	O	O:0.989528
should	O	O:0.999939
be	O	O:0.999998
an	O	O:0.999995
array	O	O:0.999610
.	O	O:0.999727
	
And	O	O:0.999924
if	O	O:0.999993
any	O	O:0.999985
element	O	O:0.999845
from	O	O:0.999205
[	O	O:0.999908
'	O	O:0.999989
str2	O	O:0.998206
'	O	O:0.999975
,	O	O:0.999966
'	O	O:0.999988
str4	O	O:0.999207
']	O	O:0.999973
contains	O	O:0.993777
in	O	O:0.999890
x.split	O	O:0.890318
(	O	O:0.999949
'	O	O:0.999970
,	O	O:0.999993
')	O	O:0.999988
then	O	O:0.998484
that's	O	O:0.999990
True	O	O:0.999921
condition	O	O:0.999812
.	O	O:0.999936
	
My	O	O:0.999773
Questions	O	O:0.998463
and	O	O:0.999980
/	O	O:0.999967
or	O	O:0.999857
things	O	O:0.999143
I've	O	O:0.999975
read	O	O:0.999734
about	O	O:0.999897
on	O	O:0.999895
SO	O	O:0.998971
but	O	O:0.999920
haven't	O	O:0.998966
/	O	O:0.999981
am	O	O:0.999988
unclear	O	O:0.999578
on	O	O:0.999984
how	O	O:0.999978
to	O	O:0.999992
apply	O	O:0.827364
:	O	O:0.999725
	
So	O	O:0.999851
it	O	O:0.999986
looks	O	O:0.999982
like	O	O:0.999911
`	O	O:0.999986
nextday	O	O:0.818879
`	O	O:0.999951
is	O	O:0.999755
already	O	O:0.999835
vectorized	O	O:0.994399
(	O	O:0.999901
i.e.	O	O:0.999926
operating	O	O:0.999749
on	O	O:0.999988
the	O	O:0.999997
whole	O	O:0.999978
frame	O	O:0.999998
at	O	O:0.999999
once	O	O:0.999752
)	O	O:0.999983
.	O	O:0.999813
	
Why	O	O:0.999877
are	O	O:0.999976
you	O	O:0.999982
calling	O	O:0.999673
it	O	O:0.999986
via	O	O:0.999863
`	O	O:0.999988
apply	O	B-API:0.986752
`	O	O:0.999909
?	O	O:0.999144
	
@USER	O	O:0.999335
When	O	O:0.999672
I	O	O:0.999994
don't	O	O:0.999990
call	O	O:0.995408
nextday	O	O:0.998639
via	O	O:0.999593
apply	O	B-API:0.611823
,	O	O:0.999982
the	O	O:0.999930
calculations	O	O:0.999325
don't	O	O:0.999954
get	O	O:0.999991
applied	O	O:0.999966
for	O	O:0.999981
days	O	O:0.999691
2-last	O	O:0.998552
day	O	O:0.999931
.	O	O:0.999806
	
I	O	O:0.999992
end	O	O:0.999979
up	O	O:0.999847
with	O	O:0.999980
a	O	O:0.999999
bunch	O	O:0.999863
of	O	O:0.999994
NaN	O	O:0.998884
values	O	O:0.999749
in	O	O:0.999981
the	O	O:0.999976
output	O	O:0.999187
.	O	O:0.999827
	
I	O	O:0.999917
tried	O	O:0.999931
it	O	O:0.999953
as	O	O:0.999997
well	O	O:0.999939
using	O	O:0.999765
for	O	O:0.999710
index	O	O:0.999301
,	O	O:0.999980
row	O	O:0.999924
in	O	O:0.999965
d.iterrows()	O	O:0.991471
,	O	O:0.999978
but	O	O:0.999992
that's	O	O:0.999949
about	O	O:0.999962
the	O	O:0.999996
same	O	O:0.999911
speed	O	O:0.999609
as	O	O:0.999997
the	O	O:0.999506
apply	O	B-API:0.947289
method	O	O:0.998210
.	O	O:0.999558
	
Is	O	O:0.999993
there	O	O:0.999980
another	O	O:0.999804
/	O	O:0.999991
different	O	O:0.999697
way	O	O:0.999964
I	O	O:0.999991
can	O	O:0.999989
apply	O	O:0.950303
the	O	O:0.999955
calculations	O	O:0.998802
without	O	O:0.999948
using	O	O:0.999654
apply	O	B-API:0.951222
?	O	O:0.997413
	
Can	O	O:0.999813
you	O	O:0.999962
reduce	O	O:0.999981
your	O	O:0.999965
problem	O	O:0.999928
down	O	O:0.999891
to	O	O:0.999999
some	O	O:0.999997
copy	O	O:0.999695
paste-able	O	O:0.999894
functions	O	O:0.999496
/	O	O:0.999989
data	O	O:0.999833
?	O	O:0.999962
	
Likely	O	O:0.999726
to	O	O:0.999991
to	O	O:0.999998
get	O	O:0.999999
more	O	O:0.999940
help	O	O:0.999483
.	O	O:0.999936
	
Your	O	O:0.999671
`	O	O:0.999971
nextday	O	O:0.879203
`	O	O:0.999943
function	O	O:0.998975
doesn't	O	O:0.999980
seem	O	O:0.999955
to	O	O:0.999993
use	O	O:0.999998
`	O	O:0.999950
row	O	O:0.998925
`	O	O:0.999997
at	O	O:0.999961
all	O	O:0.999981
,	O	O:0.999973
which	O	O:0.999763
it	O	O:0.999964
doesn't	O	O:0.999989
make	O	O:0.999971
sense	O	O:0.999983
to	O	O:0.999984
use	O	O:0.999996
via	O	O:0.999011
`	O	O:0.999958
apply	O	B-API:0.990738
`	O	O:0.999353
(	O	O:0.999422
which	O	O:0.999918
is	O	O:0.999990
for	O	O:0.999967
row-by-row	O	O:0.994992
function	O	O:0.999766
application	O	O:0.999804
)	O	O:0.999962
.	O	O:0.999742
	
It's	O	O:0.999786
somewhat	O	O:0.999887
tough	O	O:0.999938
to	O	O:0.999992
unpack	O	O:0.999773
without	O	O:0.999620
expected	O	O:0.999663
output	O	O:0.999363
,	O	O:0.999984
but	O	O:0.999996
your	O	O:0.999991
your	O	O:0.999484
function	O	O:0.999642
is	O	O:0.999975
already	O	O:0.999767
vectorized	O	O:0.998944
.	O	O:0.999521
	
e.g.	O	O:0.999788
when	O	O:0.999805
you	O	O:0.999998
have	O	O:0.999993
`	O	O:0.999997
d	O	O:0.999769
[	O	O:0.999973
'	O	O:0.999987
ET_WL	O	O:0.999105
']	O	O:0.999900
-d	O	O:0.998580
[	O	O:0.999754
'	O	O:0.999985
infilP	O	O:0.999547
']`	O	O:0.999948
that	O	O:0.999884
subtracts	O	O:0.999978
on	O	O:0.999996
all	O	O:0.999997
the	O	O:1.000000
rows	O	O:0.999026
in	O	O:0.999968
`	O	O:0.999998
d	O	O:0.999409
`	O	O:0.999997
,	O	O:0.999971
so	O	O:0.999995
there	O	O:0.999722
isn't	O	O:0.999980
any	O	O:0.999981
reason	O	O:0.999769
to	O	O:0.999974
call	O	O:0.999931
it	O	O:0.999991
via	O	O:0.999784
an	O	O:0.999971
apply	O	B-API:0.800504
.	O	O:0.998783
	
In	O	O:0.999877
essence	O	O:0.999867
what	O	O:0.999848
you're	O	O:0.999972
doing	O	O:0.999121
is	O	O:0.999832
:	O	O:0.999563
#CODE	O	O:0.999796
	
You	O	O:0.999854
could	O	O:0.999875
`	O	O:0.999998
apply	O	B-API:0.942577
`	O	O:0.999755
`	O	O:0.999851
tuple	O	O:0.991577
`	O	O:0.999996
on	O	O:0.999512
`	O	O:0.999995
axis=1	O	O:0.988597
`	O	O:0.999976
#CODE	O	O:0.997875
	
Apply	O	O:0.999535
the	O	O:0.999973
following	O	O:0.998514
function	O	O:0.999948
over	O	O:0.999618
the	O	O:0.999990
dataframe	B-API	O:0.999263
to	O	O:0.999997
generate	O	O:0.999998
a	O	O:0.999998
new	O	O:0.999795
column	O	O:0.998999
:	O	O:0.999966
#CODE	O	O:0.999839
	
Are	O	O:0.999947
you	O	O:0.999992
sure	O	O:0.999960
you	O	O:0.999990
are	O	O:0.999999
replacing	O	O:0.999967
df	O	O:0.999696
with	O	O:0.999991
the	O	O:0.999992
result	O	O:0.999966
of	O	O:0.999994
calling	O	O:0.998693
`	O	O:0.999994
apply	O	B-API:0.992976
`	O	O:0.999899
?	O	O:0.999153
	
Apply	O	O:0.999400
doesn't	O	O:0.999630
change	O	O:0.998346
the	O	O:0.999983
dataframe	B-API	O:0.994930
inplace	O	O:0.997001
,	O	O:0.999991
rather	O	O:0.999925
returns	O	O:0.999877
a	O	O:0.999999
copy	O	O:0.977140
of	O	O:0.999994
it	O	O:0.999870
,	O	O:0.999999
so	O	O:0.999995
you	O	O:0.999992
need	O	O:0.999988
to	O	O:0.999999
store	O	O:0.999990
it	O	O:0.999995
or	O	O:0.999999
else	O	O:0.999992
the	O	O:0.999989
results	O	O:0.999863
are	O	O:0.999973
vacuous	O	O:0.999581
...	O	O:0.999535
	
that's	O	O:0.999817
the	O	O:0.999995
only	O	O:0.999920
thing	O	O:0.999988
that	O	O:0.999975
comes	O	O:0.999872
to	O	O:0.999996
mind	O	O:0.999963
	
I	O	O:0.999983
have	O	O:0.999956
tried	O	O:0.999866
setting	O	O:0.999960
a	O	O:0.999984
new	O	O:0.999897
df	O	O:0.999867
to	O	O:0.999997
the	O	O:0.999999
results	O	O:0.999973
of	O	O:0.999996
apply	O	O:0.765938
via	O	O:0.999733
`	O	O:0.999886
df2	O	O:0.998380
=d	O	O:0.999925
f.apply	O	O:0.801072
(	O	O:0.999964
sep_yearmonths	O	O:0.994602
,	O	O:0.999989
axis=1	O	O:0.999913
)`	O	O:0.999969
then	O	O:0.999523
`	O	O:0.999999
df2	O	O:0.999056
=d	O	O:0.999980
f2.groupby	O	O:0.988221
(	O	O:0.999911
'	O	O:0.999984
month	O	O:0.999695
')	O	O:0.999946
.sum()	B-API	B-API:0.999341
`	O	O:0.999864
	
You	O	O:0.999909
can	O	O:0.999979
add	O	O:0.999998
a	O	O:0.999997
secondary	O	O:0.999644
axis	O	O:0.999952
by	O	O:0.999983
specifying	O	O:0.998674
'	O	O:0.999864
secondary_y=True	O	O:0.998111
'	O	O:0.999993
when	O	O:0.999912
you	O	O:0.999994
apply	O	O:0.995806
your	O	O:0.999876
plot	O	O:0.998391
function	O	O:0.999996
directly	O	O:0.999849
on	O	O:0.999996
your	O	O:0.999842
dataframe	B-API	O:0.996157
.	O	O:0.999943
	
Pandas	O	O:0.998815
'	O	O:0.999600
apply	O	B-API:0.805083
method	O	O:0.998486
	
You	O	O:0.999841
should	O	O:0.999945
consider	O	O:0.999970
a	O	O:0.999996
func	O	O:0.996511
that	O	O:0.999552
is	O	O:0.999997
passed	O	O:0.999593
to	O	O:0.999987
apply	O	O:0.986856
that	O	O:0.999723
simply	O	O:0.999926
makes	O	O:0.999995
some	O	O:0.999612
calculations	O	O:0.999147
and	O	O:0.999991
returns	O	O:0.999643
either	O	O:0.999914
a	O	O:0.999993
scalar	O	O:0.999321
or	O	O:0.999992
array	O	O:0.999985
like	O	O:0.999963
structure	O	O:0.999960
to	O	O:0.999993
avoid	O	O:0.999995
ambiguous	O	O:0.999857
behaviour	O	O:0.999857
,	O	O:0.999996
using	O	O:0.999868
apply	O	B-API:0.835499
to	O	O:0.999851
modify	O	O:0.999980
a	O	O:0.999995
df	O	O:0.998545
in	O	O:0.999995
place	O	O:0.995600
is	O	O:0.999993
not	O	O:0.999985
going	O	O:0.999893
to	O	O:0.999993
work	O	O:0.999974
in	O	O:0.999998
practice	O	O:0.999982
as	O	O:0.999998
especially	O	O:0.999693
if	O	O:0.999985
you	O	O:0.999982
iterating	O	O:0.999901
row-wise	O	O:0.999410
yet	O	O:0.999910
wanting	O	O:0.999948
to	O	O:0.999986
mutate	O	O:0.999981
the	O	O:0.999992
df	O	O:0.999680
row-wise	O	O:0.997989
	
Generally	O	O:0.999806
speaking	O	O:0.999667
the	O	O:0.999962
answer	O	O:0.996050
is	O	O:0.999987
that	O	O:0.999740
`	O	O:0.999998
apply	O	B-API:0.955091
`	O	O:0.999544
is	O	O:0.999615
NOT	O	O:0.999439
in	O	O:0.999977
place	O	O:0.999017
but	O	O:0.999988
you	O	O:0.999979
made	O	O:0.999971
this	O	O:0.999970
overly	O	O:0.999807
complicated	O	O:0.999492
.	O	O:0.999882
	
Generally	O	O:0.999856
you	O	O:0.999963
would	O	O:0.999981
use	O	O:0.999986
`	O	O:0.999981
iteritems	B-API	B-API:0.988032
`	O	O:0.999977
OR	O	O:0.998630
`	O	O:0.999993
apply	O	B-API:0.988243
`	O	O:0.999682
,	O	O:0.999591
not	O	O:0.999987
both	O	O:0.999697
.	O	O:0.999914
	
In	O	O:0.999985
this	O	O:0.999970
case	O	O:0.999981
,	O	O:0.999998
you	O	O:0.999992
have	O	O:0.999981
no	O	O:0.999999
need	O	O:0.999991
to	O	O:0.999996
use	O	O:0.999997
`	O	O:0.999926
iteritems	B-API	B-API:0.973687
`	O	O:0.999993
in	O	O:0.999914
addition	O	O:0.999988
to	O	O:0.999987
`	O	O:0.999997
apply	O	B-API:0.984162
`	O	O:0.999899
.	O	O:0.998599
	
In	O	O:0.999945
fact	O	O:0.999688
,	O	O:0.999998
just	O	O:0.999675
do	O	O:0.999990
this	O	O:0.999803
:	O	O:0.999968
`	O	O:0.999996
tt.iloc	O	O:0.995542
[	O	O:0.999990
1	O	O:0.999953
,	O	O:0.999932
:]	O	O:0.999955
*	O	O:0.999965
2	O	O:0.999962
`	O	O:0.999989
or	O	O:0.999622
`	O	O:0.999996
tt.iloc	O	O:0.993301
[	O	O:0.999987
1	O	O:0.999949
,	O	O:0.999925
:]	O	O:0.999952
*=	O	O:0.999860
2	O	O:0.999744
`	O	O:0.999919
	
@USER	O	O:0.998375
:	O	O:0.999978
above	O	O:0.999740
is	O	O:0.999998
a	O	O:0.999987
simple	O	O:0.999571
example	O	O:0.999895
to	O	O:0.999996
a	O	O:1.000000
much	O	O:0.999456
more	O	O:0.999905
complicated	O	O:0.997597
function	O	O:0.999908
.	O	O:0.999830
	
My	O	O:0.999953
actual	O	O:0.997808
function	O	O:0.998933
is	O	O:0.999981
not	O	O:0.999985
a	O	O:0.999998
simple	O	O:0.998360
`	O	O:0.999997
multiply	O	O:0.999681
by	O	O:0.999979
2	O	O:0.999678
`	O	O:0.999870
.	O	O:0.999527
	
It	O	O:0.999969
does	O	O:0.999862
other	O	O:0.999968
things	O	O:0.999872
,	O	O:0.999957
and	O	O:0.999995
uses	O	O:0.999589
the	O	O:0.998931
`	O	O:0.999968
index	O	O:0.999291
`	O	O:0.999998
of	O	O:0.999988
the	O	O:0.999943
`	O	O:0.999984
Series	O	O:0.993857
`	O	O:0.999999
as	O	O:0.999988
an	O	O:0.999996
input	O	O:0.999965
as	O	O:0.999992
well	O	O:0.998334
.	O	O:0.999944
	
Really	O	O:0.999465
I	O	O:0.999993
plan	O	O:0.999771
to	O	O:0.999993
have	O	O:1.000000
a	O	O:0.999998
second	O	O:0.998603
function	O	O:0.999803
which	O	O:0.999948
acts	O	O:0.999855
on	O	O:0.999998
every	O	O:0.999857
element	O	O:0.999917
in	O	O:0.999984
the	O	O:0.999982
`	O	O:0.999951
iteritems()	B-API	B-API:0.998860
`	O	O:0.999978
.	O	O:0.999557
	
Perhaps	O	O:0.999609
I	O	O:0.999992
should	O	O:0.999958
use	O	O:0.999938
two	O	O:0.999838
`	O	O:0.999961
iteritems()	B-API	B-API:0.997810
`	O	O:0.999995
instead	O	O:0.999932
of	O	O:0.999994
`	O	O:0.999978
apply	O	B-API:0.977629
`	O	O:0.999851
.	O	O:0.997815
	
Generally	O	O:0.999828
speaking	O	O:0.998876
,	O	O:0.999991
don't	O	O:0.999796
use	O	O:0.999910
`	O	O:0.999956
iteritems	B-API	B-API:0.966452
`	O	O:0.999994
or	O	O:0.999766
`	O	O:0.999990
iterrows	B-API	B-API:0.996103
`	O	O:0.999996
if	O	O:0.999952
you	O	O:0.999986
can	O	O:0.999972
help	O	O:0.999951
it	O	O:0.999940
(	O	O:0.999965
and	O	O:0.999992
it's	O	O:0.999946
rare	O	O:0.999427
you	O	O:0.999991
really	O	O:0.999935
need	O	O:0.999998
them	O	O:0.999711
)	O	O:0.999993
.	O	O:0.999795
	
You're	O	O:0.999685
almost	O	O:0.999946
certainly	O	O:0.999938
better	O	O:0.999799
off	O	O:0.999875
with	O	O:0.999823
`	O	O:0.999986
apply	O	B-API:0.963209
`	O	O:0.999986
than	O	O:0.999830
any	O	O:0.999995
of	O	O:0.999988
the	O	O:0.999893
`	O	O:0.999988
iter	O	O:0.855363
`	O	O:0.999996
-options	O	O:0.994747
,	O	O:0.999981
and	O	O:0.999995
there	O	O:0.999899
are	O	O:0.999975
often	O	O:0.999672
better	O	O:0.999650
options	O	O:0.999947
than	O	O:0.999682
apply	O	O:0.513315
.	O	O:0.999381
	
I	O	O:0.999917
realize	O	O:0.999643
it's	O	O:0.998920
an	O	O:0.999982
artificial	O	O:0.999778
example	O	O:0.998848
,	O	O:0.999952
but	O	O:0.999958
still	O	O:0.999661
...	O	O:0.999851
	
don't	O	O:0.999438
do	O	O:0.999951
it	O	O:0.999971
!	O	O:0.999860
	
And	O	O:0.999890
consider	O	O:0.999887
posting	O	O:0.999850
a	O	O:0.999992
more	O	O:0.998385
realistic	O	O:0.989177
(	O	O:0.999901
but	O	O:0.999971
still	O	O:0.999920
simple	O	O:0.999896
)	O	O:0.999991
example	O	O:0.999853
if	O	O:0.999991
you	O	O:0.999991
want	O	O:0.999980
more	O	O:0.999909
specific	O	O:0.999854
advice	O	O:0.999558
.	O	O:0.999717
	
How	O	O:0.999913
to	O	O:0.999992
apply	O	O:0.944675
tz_convert	B-API	B-API:0.995695
with	O	O:0.999924
different	O	O:0.999959
timezones	O	O:0.997911
to	O	O:0.999999
different	O	O:1.000000
rows	O	O:0.998830
in	O	O:0.999985
pandas	O	O:0.999976
dataframe	B-API	O:0.998443
	
You	O	O:0.999880
can	O	O:0.999853
`	O	O:0.999998
groupby	B-API	B-API:0.995857
`	O	O:0.999994
on	O	O:0.999236
'	O	O:0.999982
userid	O	O:0.997444
'	O	O:0.999875
and	O	O:0.999998
then	O	O:0.999936
on	O	O:0.999975
'	O	O:0.999991
var1	O	O:0.999130
'	O	O:0.999976
col	O	O:0.999810
call	O	O:0.998177
`	O	O:0.999980
apply	O	B-API:0.998612
`	O	O:0.999864
and	O	O:0.999941
pass	O	O:0.995732
`	O	O:0.999943
list	O	O:0.891264
`	O	O:0.999998
to	O	O:0.999984
create	O	O:0.999996
a	O	O:0.999997
sequence	O	O:0.999922
,	O	O:0.999998
you	O	O:0.999990
can	O	O:0.999985
rename	O	O:0.999981
/	O	O:0.999997
reset	O	O:0.999603
if	O	O:0.999971
required	O	O:0.999114
.	O	O:0.999861
	
#CODE	O	O:0.998453
	
Also	O	O:0.999687
you	O	O:0.999955
should	O	O:0.999973
almost	O	O:0.999985
never	O	O:0.999978
need	O	O:0.999947
to	O	O:0.999994
iterate	O	O:0.999993
row-wise	O	O:0.999675
so	O	O:0.999989
avoid	O	O:0.999904
using	O	O:0.999868
`	O	O:0.999777
for	O	O:0.998253
`	O	O:0.999985
loops	O	O:0.996009
,	O	O:0.999988
`	O	O:0.999988
apply	O	B-API:0.981862
`	O	O:0.999960
,	O	O:0.999589
`	O	O:0.999991
iterrows	B-API	B-API:0.998408
`	O	O:0.999976
etc	O	O:0.999670
...	O	O:0.999873
	
The	O	O:0.999959
lines	O	O:0.999368
below	O	O:0.999924
apply	O	O:0.952932
to	O	O:0.999982
data	O	O:0.999996
where	O	O:0.999940
`	O	O:0.999993
INDATUMA	O	O:0.979057
`	O	O:0.999980
and	O	O:0.999302
`	O	O:0.999995
UTDATUMA	O	O:0.974772
`	O	O:0.999998
are	O	O:0.999952
of	O	O:0.999996
the	O	O:0.999857
format	O	O:0.999922
20071231	O	O:0.999161
,	O	O:0.999991
e.g.	O	O:0.999566
Date	O	O:0.999371
parsing	O	O:0.999712
seems	O	O:0.999843
to	O	O:0.999996
work	O	O:0.999994
for	O	O:0.999989
`	O	O:0.999974
indate	O	O:0.927584
`	O	O:0.999983
and	O	O:0.999844
`	O	O:0.999995
outdate	O	O:0.799385
`	O	O:0.999989
,	O	O:0.999991
those	O	O:0.999983
values	O	O:0.999868
make	O	O:0.999748
sense	O	O:0.999916
.	O	O:0.999852
	
IIUC	O	O:0.999298
you	O	O:0.999937
can	O	O:0.999990
just	O	O:0.999998
call	O	O:0.999808
`	O	O:0.999990
apply	O	B-API:0.998279
`	O	O:0.999876
and	O	O:0.999943
pass	O	O:0.998321
`	O	O:0.999833
value_counts	B-API	B-API:0.999903
`	O	O:0.999832
:	O	O:0.999704
#CODE	O	O:0.999904
	
You	O	O:0.999932
can	O	O:0.999956
use	O	O:0.999999
a	O	O:0.999990
combination	O	O:0.999679
of	O	O:0.999982
`	O	O:0.999972
apply	O	B-API:0.974512
`	O	O:0.999722
and	O	O:0.999952
this	O	O:0.999907
[	O	O:0.999948
answer	O	O:0.999743
]	O	O:0.999094
(	O	O:0.999876
#URL	O	O:0.999809
)	O	O:0.999983
to	O	O:0.999949
achieve	O	O:0.999992
this	O	O:0.999769
but	O	O:0.999982
why	O	O:0.999862
is	O	O:0.999998
this	O	O:0.999947
an	O	O:0.999985
issue	O	O:0.999736
?	O	O:0.999891
	
I	O	O:0.999985
want	O	O:0.999973
to	O	O:0.999924
apply	O	O:0.995915
following	O	O:0.998296
rules	O	O:0.992203
:	O	O:0.999917
	
You	O	O:0.999843
could	O	O:0.999925
call	O	O:0.999485
`	O	O:0.999995
apply	O	B-API:0.998653
`	O	O:0.999873
and	O	O:0.999947
pass	O	O:0.999711
a	O	O:0.999932
lambda	O	O:0.995732
and	O	O:0.999982
call	O	O:0.994919
`	O	O:0.999949
squeeze	O	B-API:0.992829
`	O	O:0.999991
to	O	O:0.999940
flatten	O	O:0.971964
the	O	O:0.999961
Series	O	O:0.999910
into	O	O:0.999852
a	O	O:0.999993
1-D	O	O:0.996743
array	O	O:0.999047
:	O	O:0.999894
#CODE	O	O:0.999746
	
I'm	O	O:0.999845
not	O	O:0.999991
sure	O	O:0.999919
if	O	O:0.999998
this	O	O:0.999822
is	O	O:0.999993
quicker	O	O:0.999594
though	O	O:0.999890
,	O	O:0.999995
here	O	O:0.999518
we're	O	O:0.999917
applying	O	O:0.999844
the	O	O:0.999929
mask	O	O:0.857567
column-wise	O	O:0.999752
by	O	O:0.999994
calling	O	O:0.998854
`	O	O:0.999962
apply	O	B-API:0.967687
`	O	O:0.999972
on	O	O:0.999915
the	O	O:0.999997
df	O	O:0.999634
which	O	O:0.999469
is	O	O:0.999968
why	O	O:0.999983
transposing	O	O:0.998374
is	O	O:0.999949
unnecessary	O	O:0.996626
	
So	O	O:0.999984
to	O	O:0.999996
properly	O	O:0.999999
fillback	O	O:0.999976
by	O	O:0.999997
date	O	O:0.999716
I	O	O:0.999987
can	O	O:0.999967
use	O	O:0.999923
groupby	B-API	B-API:0.995465
(	O	O:0.999917
level=0	O	O:0.995801
)	O	O:0.999740
function	O	O:0.999402
.	O	O:0.999874
	
The	O	O:0.999792
groupby	B-API	B-API:0.995018
is	O	O:0.999955
fast	O	O:0.988556
but	O	O:0.999972
the	O	O:0.999985
fill	O	O:0.971642
function	O	O:0.999984
apply	O	O:0.618590
on	O	O:0.999915
the	O	O:0.999964
dataframe	B-API	O:0.999830
group	O	O:0.999883
by	O	O:0.999996
date	O	O:0.994122
is	O	O:0.999959
really	O	O:0.999502
too	O	O:0.999917
slow	O	O:0.998779
.	O	O:0.999759
	
Then	O	O:0.999600
I'd	O	O:0.999996
apply	O	O:0.834954
the	O	O:0.999686
`	O	O:0.999684
between_time	B-API	B-API:0.999725
`	O	O:0.999997
pandas	O	O:0.997358
function	O	O:0.999993
to	O	O:0.999965
filter	O	O:0.999718
the	O	O:0.999991
dataframe	B-API	O:0.999789
by	O	O:0.999968
start	O	O:0.999616
and	O	O:0.999998
end	O	O:0.999988
date	O	O:0.999600
given	O	O:0.999640
by	O	O:0.999985
the	O	O:0.999966
`	O	O:0.999949
bounds	O	O:0.984802
`	O	O:0.999989
dataframe	B-API	O:0.964642
:	O	O:0.999977
#CODE	O	O:0.999835
	
df.plot()	B-API	B-API:0.996368
correctly	O	O:0.999727
shows	O	O:0.999970
the	O	O:0.999986
labels	O	O:0.999640
,	O	O:0.999995
as	O	O:0.999996
you	O	O:0.999946
say	O	O:0.999977
.	O	O:0.999993
plot	O	O:0.997774
(	O	O:0.999997
df	O	O:0.999791
)	O	O:0.999896
was	O	O:0.999935
what	O	O:0.999901
I	O	O:0.999975
was	O	O:0.999989
doing	O	O:0.998749
,	O	O:0.999865
and	O	O:0.999896
does	O	O:0.999231
not	O	O:0.999817
.	O	O:0.999984
	
It	O	O:0.999970
seems	O	O:0.999972
like	O	O:0.999963
the	O	O:0.999950
'	O	O:0.999890
label=	O	O:0.999473
'	O	O:0.999998
part	O	O:0.999902
of	O	O:0.999995
the	O	O:0.999980
plot	O	O:0.988765
(	O	O:0.999993
...	O	O:0.999917
)	O	O:0.999993
call	O	O:0.998837
ought	O	O:0.999899
to	O	O:0.999983
take	O	O:0.999997
a	O	O:0.999999
list	O	O:0.998320
or	O	O:0.999997
series	O	O:0.999868
or	O	O:0.999998
something	O	O:0.999906
and	O	O:0.999994
apply	O	O:0.848338
the	O	O:0.999605
values	O	O:0.998235
according	O	O:0.997827
,	O	O:0.999989
but	O	O:0.999964
I	O	O:0.999986
can't	O	O:0.999973
figure	O	O:0.999562
out	O	O:0.999931
how	O	O:0.999873
.	O	O:0.999898
	
I	O	O:0.999965
probably	O	O:0.999906
should	O	O:0.999632
use	O	O:0.999957
`	O	O:0.999964
apply	O	B-API:0.991638
`	O	O:0.999755
,	O	O:0.999581
but	O	O:0.999990
how	O	O:0.999965
exactly	O	O:0.999912
?	O	O:0.999986
	
Performance	O	O:0.996910
is	O	O:0.999973
drastically	O	O:0.999570
improved	O	O:0.999874
by	O	O:0.999927
increasing	O	O:0.999472
the	O	O:0.999774
`	O	O:0.999964
arraysize	O	O:0.889394
`	O	O:0.999999
attribute	O	O:0.999894
of	O	O:0.999996
the	O	O:0.999799
Cursor	O	B-API:0.699554
-	O	O:0.999991
allowing	O	O:0.999882
me	O	O:0.999985
to	O	O:0.999985
get	O	O:0.999995
decent	O	O:0.999934
performance	O	O:0.999990
out	O	O:0.999981
of	O	O:0.999994
`	O	O:0.999899
fetchall()	O	B-API:0.629870
`	O	O:0.999963
.	O	O:0.999931
pandas	O	O:0.999916
`	O	O:0.999990
read_sql()	B-API	B-API:0.999857
`	O	O:0.999992
takes	O	O:0.999738
a	O	O:0.999994
`	O	O:0.999831
Connection	O	O:0.731613
`	O	O:0.999990
object	O	O:0.999738
as	O	O:0.999996
input	O	O:0.999483
and	O	O:0.999993
the	O	O:0.999883
cursor	O	O:0.995547
is	O	O:0.999979
created	O	O:0.999229
within	O	O:0.999910
the	O	O:0.999856
function	O	O:0.999860
,	O	O:0.999995
therefore	O	O:0.999874
it's	O	O:0.999930
not	O	O:0.999994
obvious	O	O:0.999966
to	O	O:0.999992
me	O	O:0.999998
how	O	O:0.999986
I	O	O:0.999997
can	O	O:0.999996
apply	O	O:0.937547
that	O	O:0.999917
same	O	O:0.999962
setting	O	O:0.999236
and	O	O:0.999986
still	O	O:0.999972
take	O	O:0.999956
advantage	O	O:0.999986
of	O	O:0.999988
the	O	O:0.999954
`	O	O:0.999984
read_sql()	B-API	B-API:0.999667
`	O	O:0.999902
function	O	O:0.999394
.	O	O:0.999931
	
Have	O	O:0.999657
I	O	O:0.999975
missed	O	O:0.999962
something	O	O:0.998635
?	O	O:0.999930
	
I've	O	O:0.999425
been	O	O:0.999897
able	O	O:0.999987
to	O	O:0.999997
construct	O	O:0.999965
the	O	O:0.999994
following	O	O:0.999752
code	O	O:0.998333
(	O	O:0.999996
mostly	O	O:0.999859
with	O	O:0.999965
the	O	O:0.999990
help	O	O:0.999763
from	O	O:0.999958
the	O	O:0.999991
StackOverflow	O	O:0.999916
contributors	O	O:0.999739
)	O	O:0.999998
to	O	O:0.999991
calculate	O	O:0.999962
the	O	O:0.999990
Implied	O	O:0.999935
Volatility	O	O:0.997908
of	O	O:0.999994
an	O	O:0.999947
option	O	O:0.999973
contract	O	O:0.999849
using	O	O:0.997762
Newton-Raphson	O	O:0.995106
method	O	O:0.999330
.	O	O:0.999820
	
The	O	O:0.999932
process	O	O:0.998059
calculates	O	O:0.999830
Vega	O	O:0.999826
when	O	O:0.999780
determining	O	O:0.999636
the	O	O:0.999966
Implied	O	O:0.998826
Volatility	O	O:0.960542
.	O	O:0.999882
	
Although	O	O:0.999502
I'm	O	O:0.999994
able	O	O:0.999986
to	O	O:0.999999
create	O	O:0.999996
a	O	O:0.999995
new	O	O:0.999842
DataFrame	B-API	O:0.999565
column	O	O:0.999635
for	O	O:0.999986
Implied	O	O:0.999811
Volatility	O	O:0.990704
using	O	O:0.999842
the	O	O:0.998622
Pandas	O	O:0.998918
DataFrame	B-API	O:0.941999
apply	O	B-API:0.793962
method	O	O:0.999512
,	O	O:0.999910
I'm	O	O:0.999992
unable	O	O:0.999873
to	O	O:0.999997
create	O	O:0.999995
a	O	O:0.999998
second	O	O:0.999883
column	O	O:0.999829
for	O	O:0.999960
Vega	O	O:0.983005
.	O	O:0.999468
	
Is	O	O:0.999985
there	O	O:0.999987
a	O	O:0.999997
way	O	O:0.999925
create	O	O:0.999666
two	O	O:0.999983
separate	O	O:0.999973
DataFrame	B-API	O:0.999470
columns	O	O:0.999969
when	O	O:0.999957
the	O	O:0.999987
function	O	O:0.999974
to	O	O:0.999985
returns	O	O:0.999960
IV	O	O:0.999889
Vega	O	O:0.998867
together	O	O:0.998410
?	O	O:0.999930
	
The	O	O:0.999957
two	O	O:0.999920
tricks	O	O:0.999882
I'm	O	O:0.999984
using	O	O:0.999949
here	O	O:0.999002
are	O	O:0.999932
1	O	O:0.999963
)	O	O:0.999997
using	O	O:0.999861
%i	O	O:0.999072
in	O	O:0.999870
the	O	O:0.999936
format	O	O:0.999833
string	O	O:0.999863
to	O	O:0.999987
signify	O	O:0.999984
that	O	O:0.999915
it's	O	O:0.999976
an	O	O:0.999988
integer	O	O:0.996756
(	O	O:0.999741
%f	O	O:0.999974
means	O	O:0.999934
a	O	O:0.999989
float	O	O:0.964338
,	O	O:0.999956
but	O	O:0.999945
it	O	O:0.999982
renders	O	O:0.999833
w	O	O:0.999950
/	O	O:0.999956
o	O	O:0.999972
trailing	O	O:0.999817
zeros	B-API	O:0.672595
)	O	O:0.999975
and	O	O:0.999983
2	O	O:0.999925
)	O	O:0.999966
the	O	O:0.999959
apply	O	B-API:0.899647
function	O	O:0.999620
on	O	O:0.999933
df	O	O:0.999730
.	O	O:0.999923
	
Make	O	O:0.999878
sure	O	O:0.999944
that	O	O:0.999947
axis=1	O	O:0.999885
with	O	O:0.999980
that	O	O:0.999893
one	O	O:0.999991
.	O	O:0.999956
	
or	O	O:0.999975
if	O	O:0.999937
s1	O	O:0.999875
and	O	O:0.999966
s2	O	O:0.999915
are	O	O:0.999976
columns	O	O:0.999883
in	O	O:0.999994
a	O	O:0.999995
pandas	O	O:0.999814
DataFrame	B-API	O:0.999269
df	O	O:0.999811
,	O	O:0.999999
then	O	O:0.999933
we	O	O:1.000000
can	O	O:0.999992
use	O	O:0.999998
similar	O	O:0.999316
logic	O	O:0.999110
and	O	O:0.999991
the	O	O:0.999974
apply	O	B-API:0.994401
function	O	O:0.991528
:	O	O:0.999828
#CODE	O	O:0.999876
	
When	O	O:0.999601
I	O	O:0.999990
apply	O	O:0.728294
#CODE	O	O:0.987021
	
I	O	O:0.999987
keep	O	O:0.999733
getting	O	O:0.999212
the	O	O:0.999980
following	O	O:0.999693
error	O	O:0.999916
when	O	O:0.999736
I	O	O:0.999996
apply	O	O:0.968453
it	O	O:0.999002
to	O	O:0.999996
real	O	O:0.999976
data	O	O:0.999608
(	O	O:0.999984
in	O	O:0.999991
which	O	O:0.999960
case	O	O:0.999989
,	O	O:1.000000
data	O	O:0.999962
frames	O	O:0.999942
are	O	O:0.999998
of	O	O:1.000000
different	O	O:0.999737
sizes	O	O:0.997621
):	O	O:0.999863
	
Is	O	O:0.999986
there	O	O:0.999987
a	O	O:0.999995
way	O	O:0.999877
to	O	O:0.999970
`	O	O:0.999999
apply	O	B-API:0.951711
`	O	O:0.999995
a	O	O:0.999601
function	O	O:0.999904
to	O	O:0.999993
one	O	O:1.000000
column	O	O:0.999986
of	O	O:0.999999
a	O	O:0.999997
dataframe	B-API	O:0.998247
while	O	O:0.999955
leaving	O	O:0.999219
the	O	O:0.999985
other	O	O:0.999965
columns	O	O:0.999846
fixed	O	O:0.999693
?	O	O:0.999973
	
If	O	O:0.999895
`	O	O:0.999985
apply	O	B-API:0.973054
`	O	O:0.999290
is	O	O:0.999619
not	O	O:0.999987
done	O	O:0.999780
`	O	O:0.999988
inplace	O	O:0.861816
`	O	O:0.999995
you	O	O:0.999891
still	O	O:0.999992
have	O	O:0.999985
to	O	O:0.999999
make	O	O:0.999998
an	O	O:0.999990
assignment	O	O:0.999886
,	O	O:0.999991
so	O	O:0.999992
what	O	O:0.999461
is	O	O:0.999995
the	O	O:0.999980
difference	O	O:0.999542
?	O	O:0.999902
	
@USER	O	O:0.999702
my	O	O:0.999955
point	O	O:0.998603
is	O	O:0.999997
that	O	O:0.999947
if	O	O:0.999997
I	O	O:0.999999
want	O	O:0.999981
to	O	O:0.999983
compose	O	O:0.999973
functions	O	O:0.999861
`	O	O:0.999981
f1	O	O:0.998700
`	O	O:0.999993
,	O	O:0.999744
`	O	O:0.999991
f2	O	O:0.992838
`	O	O:0.999981
and	O	O:0.999795
`	O	O:0.999995
f3	O	O:0.988993
`	O	O:0.999985
,	O	O:0.999932
the	O	O:0.999974
syntax	O	O:0.999543
would	O	O:0.999955
be	O	O:0.999998
`	O	O:0.999992
d.assign	O	B-API:0.909887
(	O	O:0.999979
A=f3	O	O:0.994111
(	O	O:0.999874
d.assign	O	B-API:0.515118
(	O	O:0.999959
A=f2	O	O:0.996451
(	O	O:0.999911
d.assign	O	O:0.547317
(	O	O:0.999956
A=f1	O	O:0.999151
))))`	O	O:0.998990
;	O	O:0.999968
agree	O	O:0.999614
that	O	O:0.999992
this	O	O:0.999814
is	O	O:0.999994
better	O	O:0.999460
than	O	O:0.999467
in-place	O	O:0.997756
,	O	O:0.999986
but	O	O:0.999974
I	O	O:0.999981
would	O	O:0.999979
argue	O	O:0.999869
that	O	O:0.999993
this	O	O:0.999836
is	O	O:0.999999
less	O	O:0.999383
readable	O	O:0.999938
than	O	O:0.999964
a	O	O:0.999992
"	O	O:0.999953
forward	O	O:0.999932
pipe	O	O:0.998033
"	O	O:0.999973
style	O	O:0.999427
syntax	O	O:0.999951
using	O	O:0.999978
something	O	O:0.999818
like	O	O:0.999007
`	O	O:0.999994
apply	O	B-API:0.988906
`	O	O:0.999836
	
Apply	O	O:0.999904
a	O	O:0.999988
value	O	O:0.999733
to	O	O:0.999992
all	O	O:1.000000
instances	O	O:0.999935
of	O	O:0.999998
a	O	O:0.999994
number	O	O:0.999933
based	O	O:0.999807
on	O	O:0.999992
conditions	O	O:0.997276
	
I	O	O:0.999986
want	O	O:0.999973
to	O	O:0.999962
apply	O	O:0.996815
a	O	O:0.999956
5	O	O:0.999244
to	O	O:0.999997
any	O	O:0.999997
ids	O	O:0.973877
that	O	O:0.999978
have	O	O:0.999999
a	O	O:0.999999
1	O	O:0.999970
anywhere	O	O:0.999922
in	O	O:0.999991
the	O	O:0.999977
number	O	O:0.999871
column	O	O:0.999684
and	O	O:1.000000
a	O	O:0.999999
zero	O	O:0.992416
to	O	O:0.999993
those	O	O:0.999997
that	O	O:0.999843
don't	O	O:0.999936
.	O	O:0.999977
	
For	O	O:0.999944
example	O	O:0.999808
,	O	O:0.999995
if	O	O:0.999997
the	O	O:0.999986
number	O	O:0.999740
"	O	O:0.999971
1	O	O:0.999884
"	O	O:0.999990
appears	O	O:0.999956
anywhere	O	O:0.999871
in	O	O:0.999975
the	O	O:0.999973
Number	O	O:0.999855
column	O	O:0.999906
for	O	O:0.999986
ID	O	O:0.999632
1	O	O:0.999861
,	O	O:0.999983
I	O	O:0.999997
want	O	O:0.999982
to	O	O:0.999990
place	O	O:1.000000
a	O	O:0.999998
5	O	O:0.999780
in	O	O:0.999985
the	O	O:0.999990
total	O	O:0.999873
column	O	O:0.999861
for	O	O:0.999993
every	O	O:0.999907
instance	O	O:0.999725
of	O	O:0.999994
that	O	O:0.999220
ID	O	O:0.999918
.	O	O:0.999879
	
You	O	O:0.999879
could	O	O:0.999750
`	O	O:0.999995
groupby	B-API	B-API:0.996836
`	O	O:0.999993
on	O	O:0.998878
'	O	O:0.999986
Area	O	O:0.997910
'	O	O:0.999875
and	O	O:0.999976
`	O	O:0.999989
apply	O	B-API:0.993593
`	O	O:0.999601
`	O	O:0.999729
list	O	O:0.750023
`	O	O:0.999937
:	O	O:0.999768
#CODE	O	O:0.999911
	
If	O	O:0.999966
you	O	O:0.999993
want	O	O:0.999989
to	O	O:0.999997
split	O	O:0.999981
the	O	O:0.999996
values	O	O:0.999686
out	O	O:0.999983
you	O	O:0.999992
can	O	O:0.999991
call	O	O:0.999943
`	O	O:0.999997
apply	O	B-API:0.997981
`	O	O:0.999883
and	O	O:0.999943
pass	O	O:0.999064
`	O	O:0.999884
pd.Series	B-API	B-API:0.998497
`	O	O:0.999962
ctor	O	O:0.955612
:	O	O:0.999980
#CODE	O	O:0.999748
	
I	O	O:0.999964
think	O	O:0.999932
what	O	O:0.999234
you're	O	O:0.999965
looking	O	O:0.999878
for	O	O:0.999966
is	O	O:0.999992
a	O	O:0.999905
`	O	O:0.999888
groupby	B-API	B-API:0.999436
`	O	O:0.999991
followed	O	O:0.999664
by	O	O:0.999989
an	O	O:0.999961
`	O	O:0.999972
apply	O	B-API:0.950132
`	O	O:0.999932
which	O	O:0.999314
does	O	O:0.999967
the	O	O:0.999990
correct	O	O:0.999866
logic	O	O:0.999913
for	O	O:0.999993
each	O	O:0.999227
user	O	O:0.996881
.	O	O:0.999712
	
For	O	O:0.999691
example	O	O:0.996811
:	O	O:0.999957
#CODE	O	O:0.999872
	
I	O	O:0.999961
know	O	O:0.999943
word_tokenize	O	O:0.997374
can	O	O:0.999728
for	O	O:1.000000
it	O	O:0.999991
for	O	O:0.999991
a	O	O:0.999981
string	O	O:0.989492
,	O	O:0.999948
but	O	O:0.999960
how	O	O:0.999968
to	O	O:0.999995
apply	O	O:0.985547
it	O	O:0.999961
onto	O	O:0.999625
the	O	O:0.999991
entire	O	O:0.999663
dataframe	B-API	O:0.998138
?	O	O:0.999951
	
You	O	O:0.999906
can	O	O:0.999941
use	O	O:0.999949
apply	O	B-API:0.628882
method	O	O:0.998559
of	O	O:0.999900
DataFrame	B-API	O:0.967862
API	O	O:0.999718
:	O	O:0.999944
#CODE	O	O:0.999734
	
For	O	O:0.999908
finding	O	O:0.999643
the	O	O:0.999970
length	O	O:0.999536
of	O	O:0.999960
each	O	O:0.999844
text	O	O:0.999918
try	O	O:0.999982
to	O	O:0.999980
use	O	O:0.999995
apply	O	B-API:0.973723
and	O	O:0.999873
lambda	O	O:0.997213
function	O	O:0.998408
again	O	O:0.996313
:	O	O:0.999971
#CODE	O	O:0.999769
	
You	O	O:0.999844
can	O	O:0.999956
call	O	O:0.999852
`	O	O:0.999997
apply	O	B-API:0.996403
`	O	O:0.999988
pass	O	O:0.852415
`	O	O:0.999992
axis=1	O	O:0.993382
`	O	O:0.999991
to	O	O:0.999608
`	O	O:1.000000
apply	O	B-API:0.968291
`	O	O:0.999970
row-wise	O	O:0.986877
,	O	O:0.999999
then	O	O:0.999885
convert	O	O:0.999820
the	O	O:0.999998
dtype	B-API	B-API:0.969397
to	O	O:0.999896
`	O	O:0.999994
str	O	O:0.988958
`	O	O:0.999987
and	O	O:0.999813
`	O	O:0.999997
join	O	B-API:0.999653
`	O	O:0.999894
:	O	O:0.999815
#CODE	O	O:0.999910
	
A	O	O:0.999935
method	O	O:0.999987
by	O	O:0.999937
which	O	O:0.999979
you	O	O:0.999958
can	O	O:0.999984
do	O	O:1.000000
this	O	O:0.999970
would	O	O:0.999981
be	O	O:0.999999
to	O	O:0.999999
apply	O	O:0.986652
a	O	O:0.999915
function	O	O:0.999256
on	O	O:0.999988
the	O	O:0.999961
grouped	O	O:0.999094
DataFrame	B-API	O:0.984778
.	O	O:0.999805
	
Strangely	O	O:0.999854
the	O	O:0.999960
condition	O	O:0.999958
that	O	O:0.999973
removed	O	O:0.999961
all	O	O:0.999989
the	O	O:0.999966
`	O	O:0.999947
nan	O	O:0.915673
`	O	O:0.999979
did	O	O:0.999709
not	O	O:0.999987
work	O	O:0.999829
.	O	O:0.999957
	
But	O	O:0.999884
I	O	O:0.999989
could	O	O:0.999962
resolve	O	O:0.999757
it	O	O:0.999993
through	O	O:0.999927
putting	O	O:0.999774
the	O	O:0.999975
output	O	O:0.999858
of	O	O:0.999991
the	O	O:0.999975
condition	O	O:0.999955
in	O	O:0.999998
a	O	O:0.999998
new	O	O:0.999791
df	O	O:0.999693
and	O	O:0.999982
apply	O	O:0.509405
the	O	O:0.999859
code	O	O:0.998860
on	O	O:0.999996
that	O	O:0.999942
,	O	O:0.999999
that	O	O:0.999516
worked	O	O:0.999718
.	O	O:0.999929
	
Thanks	O	O:0.999321
again	O	O:0.999252
!	O	O:0.999910
	
If	O	O:0.999968
you	O	O:0.999992
only	O	O:0.999994
want	O	O:0.999994
to	O	O:0.999994
remove	O	O:0.999995
certain	O	O:0.999945
rows	O	O:0.999819
within	O	O:0.999964
matching	O	O:0.999963
groups	O	O:0.999539
,	O	O:0.999996
you	O	O:0.999988
can	O	O:0.999983
write	O	O:0.999999
a	O	O:0.999982
function	O	O:0.999783
and	O	O:0.999999
then	O	O:0.999849
use	O	O:0.999968
`	O	O:0.999964
apply	O	B-API:0.997687
`	O	O:0.999520
:	O	O:0.999171
#CODE	O	O:0.999898
	
Anyone	O	O:0.999647
know	O	O:0.999674
how	O	O:0.999980
to	O	O:0.999993
apply	O	O:0.953028
a	O	O:0.999901
method	O	O:0.999662
to	O	O:0.999993
change	O	O:0.999944
it	O	O:0.999966
?	O	O:0.999940
	
what	O	O:0.999800
does	O	O:0.999687
apply	O	B-API:0.634903
(	O	O:0.999972
floor	O	B-API:0.764569
)	O	O:0.999975
do	O	O:0.999804
here	O	O:0.999648
?	O	O:0.999918
	
I	O	O:0.999949
don't	O	O:0.999971
really	O	O:0.999254
know	O	O:0.999782
..	O	O:0.999743
	
Apply	O	O:0.999850
unique	O	O:0.896734
twice	O	O:0.999604
in	O	O:0.999954
groupby	B-API	B-API:0.960346
dataframe	B-API	O:0.994088
	
thank	O	O:0.999326
you	O	O:0.999819
!	O	O:0.999947
	
I	O	O:0.999990
guess	O	O:0.999856
I	O	O:0.999943
should	O	O:0.999988
have	O	O:0.999893
mentioned	O	O:0.999956
my	O	O:0.999997
real	O	O:0.998352
df	O	O:0.999872
has	O	O:0.999894
about	O	O:0.999925
300k	O	O:0.999971
rows	O	O:0.999016
so	O	O:0.999984
it	O	O:0.999991
wouldn't	O	O:0.999956
be	O	O:0.999993
practical	O	O:0.999962
this	O	O:0.999401
way	O	O:0.999786
.	O	O:0.999802
	
Also	O	O:0.999475
,	O	O:0.999995
what	O	O:0.999840
I'm	O	O:0.999989
looking	O	O:0.999924
for	O	O:0.999947
is	O	O:0.999994
a	O	O:0.999914
"	O	O:0.999982
query	O	O:0.997502
"	O	O:0.999984
or	O	O:0.999296
"	O	O:0.999950
method	O	O:0.999851
"	O	O:0.999992
to	O	O:0.999995
apply	O	O:0.954027
to	O	O:0.999964
the	O	O:0.999999
whole	O	O:0.999872
df	O	O:0.999679
and	O	O:0.999991
return	O	O:0.999389
the	O	O:0.999838
desired	O	O:0.999574
subset	O	O:0.996225
.	O	O:0.999923
	
e.g.	O	O:0.999235
df.method_1	O	O:0.995327
=	O	O:0.999958
subset_1	O	O:0.998473
,	O	O:0.999989
df.method_2	O	O:0.998137
=	O	O:0.999896
subset_2	O	O:0.996488
	
I'd	O	O:0.999952
add	O	O:0.999982
a	O	O:0.999987
new	O	O:0.999453
col	O	O:0.999804
using	O	O:0.999926
`	O	O:0.999688
date_range	B-API	B-API:0.999774
`	O	O:0.999990
passing	O	O:0.996304
the	O	O:0.999873
`	O	O:0.999954
min	O	B-API:0.940460
`	O	O:0.999985
and	O	O:0.999699
`	O	O:0.999992
max	O	B-API:0.918217
`	O	O:0.999996
date	O	O:0.998662
values	O	O:0.999921
,	O	O:0.999997
then	O	O:0.999955
call	O	O:0.999781
`	O	O:0.999997
apply	O	B-API:0.991259
`	O	O:0.999987
on	O	O:0.999978
a	O	O:0.999999
df	O	O:0.999844
with	O	O:0.999986
a	O	O:0.999998
single	O	O:0.999825
column	O	O:0.999977
passing	O	O:0.999799
param	O	O:0.998673
`	O	O:0.999987
axis=1	O	O:0.995569
`	O	O:0.999994
to	O	O:0.999672
`	O	O:1.000000
apply	O	B-API:0.966091
`	O	O:0.999974
row-wise	O	O:0.982571
,	O	O:0.999997
you	O	O:0.999984
can	O	O:0.999998
then	O	O:0.999999
count	O	O:0.999996
the	O	O:0.999999
number	O	O:0.999979
of	O	O:0.999997
rows	O	O:0.999952
that	O	O:0.999989
meet	O	O:0.999993
your	O	O:0.999961
condition	O	O:0.999951
using	O	O:0.999968
`	O	O:0.999948
sum	O	O:0.923759
`	O	O:0.999980
(	O	O:0.999900
as	O	O:0.999999
this	O	O:0.999835
will	O	O:0.999958
convert	O	O:0.997082
`	O	O:0.999995
True	O	O:0.997459
`	O	O:0.999996
to	O	O:0.999786
`	O	O:0.999999
1	O	O:0.997204
`	O	O:0.999986
and	O	O:0.999511
`	O	O:0.999993
False	O	O:0.985792
`	O	O:0.999992
to	O	O:0.999815
`	O	O:1.000000
0	O	O:0.999461
`)	O	O:0.999986
and	O	O:0.999961
add	O	O:0.999986
this	O	O:0.999910
as	O	O:0.999998
a	O	O:0.999992
new	O	O:0.999324
column	O	O:0.998377
:	O	O:0.999960
#CODE	O	O:0.999839
	
So	O	O:0.999955
I'd	O	O:0.999995
construct	O	O:0.999955
a	O	O:0.999998
new	O	O:0.999802
df	O	O:0.999911
with	O	O:0.999994
a	O	O:0.999993
date	O	O:0.998879
range	O	O:0.999965
,	O	O:0.999995
you	O	O:0.999952
can	O	O:0.999992
just	O	O:0.999999
call	O	O:0.999959
apply	O	O:0.546327
on	O	O:0.999678
this	O	O:0.999531
and	O	O:0.999998
`	O	O:0.999996
sum	O	O:0.975100
`	O	O:0.999999
the	O	O:0.999978
number	O	O:0.999989
of	O	O:0.999996
rows	O	O:0.999942
that	O	O:0.999985
meet	O	O:0.999991
your	O	O:0.999874
condition	O	O:0.999442
.	O	O:0.999968
	
I'm	O	O:0.999973
assuming	O	O:0.999967
you	O	O:0.999987
want	O	O:0.999952
the	O	O:0.999956
actual	O	O:0.999852
index	O	O:0.999754
location	O	O:0.998150
(	O	O:0.999996
zero-based	O	O:0.999323
)	O	O:0.999983
,	O	O:0.999995
you	O	O:0.999978
can	O	O:0.999986
call	O	O:0.999957
`	O	O:0.999998
apply	O	B-API:0.991069
`	O	O:0.999972
on	O	O:0.999978
your	O	O:0.999935
'	O	O:0.999980
date_time	O	O:0.998472
'	O	O:0.999966
column	O	O:0.999641
and	O	O:0.999996
call	O	O:0.997274
`	O	O:0.999847
np.searchsorted	B-API	B-API:0.999117
`	O	O:0.999993
to	O	O:0.999971
find	O	O:0.999984
the	O	O:0.999993
index	O	O:0.999981
location	O	O:0.999979
of	O	O:0.999999
where	O	O:0.999905
in	O	O:0.999989
`	O	O:0.999995
bounds	O	O:0.996957
`	O	O:0.999995
df	O	O:0.999681
it	O	O:0.999996
falls	O	O:0.997589
in	O	O:0.999847
:	O	O:0.999922
#CODE	O	O:0.999867
	
@USER	O	O:0.998579
has	O	O:0.999928
pointed	O	O:0.999408
out	O	O:0.999981
that	O	O:0.999914
`	O	O:0.999997
apply	O	B-API:0.946955
`	O	O:0.999717
is	O	O:0.999768
unnecessary	O	O:0.999602
here	O	O:0.999642
and	O	O:0.999996
of	O	O:0.999990
course	O	O:0.999036
he's	O	O:0.999944
right	O	O:0.999158
,	O	O:0.999998
this	O	O:0.999965
will	O	O:0.999930
be	O	O:0.999999
much	O	O:0.999604
faster	O	O:0.995398
:	O	O:0.999899
#CODE	O	O:0.999569
	
No	O	O:0.999985
need	O	O:0.999957
to	O	O:0.999992
use	O	O:0.999998
apply	O	B-API:0.815569
here	O	O:0.982805
:	O	O:0.999874
```	O	O:0.999945
In	O	O:0.999911
[	O	O:0.999981
40	O	O:0.999843
]:	O	O:0.999909
bounds	O	O:0.998890
[	O	O:0.999969
'	O	O:0.999990
date_start	O	O:0.999102
']	O	O:0.999735
.searchsorted	B-API	B-API:0.998231
(	O	O:0.999941
df	O	O:0.999536
[	O	O:0.999966
'	O	O:0.999978
date_time	O	O:0.998665
'])	O	O:0.999495
	
yeah	O	O:0.999668
some	O	O:0.999704
logic	O	O:0.999865
are	O	O:0.999991
same	O	O:0.999926
i	O	O:0.999986
just	O	O:0.999985
want	O	O:0.999984
to	O	O:0.999978
learn	O	O:0.999955
how	O	O:0.999971
to	O	O:0.999992
make	O	O:0.999997
these	O	O:0.999975
simple	O	O:0.999793
logic	O	O:0.999955
work	O	O:0.999861
,	O	O:0.999998
so	O	O:0.999999
that	O	O:0.999971
I	O	O:0.999999
can	O	O:0.999993
in	O	O:0.999993
future	O	O:0.999956
easily	O	O:0.999906
apply	O	O:0.855623
different	O	O:0.998176
things	O	O:0.996105
.	O	O:0.999849
	
Thanks	O	O:0.998749
for	O	O:0.999932
replying	O	O:0.992155
.	O	O:0.999265
	
You	O	O:0.999838
should	O	O:0.999886
use	O	O:0.999705
apply	O	B-API:0.673298
method	O	O:0.998305
of	O	O:0.999885
DataFrame	B-API	O:0.967861
API	O	O:0.999718
:	O	O:0.999944
#CODE	O	O:0.999734
	
You	O	O:0.999866
can	O	O:0.999961
find	O	O:0.999991
more	O	O:0.999934
information	O	O:0.999973
about	O	O:0.999357
apply	O	B-API:0.724511
method	O	O:0.998771
here	O	O:0.996826
.	O	O:0.999936
	
@USER	O	O:0.999593
what	O	O:0.999775
are	O	O:0.999988
you	O	O:0.999996
talking	O	O:0.999864
about	O	O:0.999842
?	O	O:0.999845
	
you	O	O:0.999855
can	O	O:0.999996
just	O	O:0.999998
do	O	O:0.999998
`	O	O:0.999995
df	O	O:0.998119
[	O	O:0.999974
'	O	O:0.999993
usids	O	O:0.999676
']	O	O:0.999962
=	O	O:0.999636
df	O	O:0.999137
[	O	O:0.999912
'	O	O:0.999990
uids	O	O:0.999042
']	O	O:0.999895
.apply	B-API	B-API:0.997460
(	O	O:0.999958
set	O	O:0.999837
)`	O	O:0.999889
,	O	O:0.999993
there	O	O:0.999791
is	O	O:0.999991
no	O	O:0.999911
`	O	O:0.999989
inplace	O	O:0.832697
`	O	O:0.999993
param	O	O:0.995967
for	O	O:0.999984
`	O	O:0.999977
apply	O	B-API:0.985842
`	O	O:0.999981
anyway	O	O:0.999546
you	O	O:0.999998
have	O	O:0.999985
to	O	O:0.999999
assign	O	O:0.999998
the	O	O:0.999980
result	O	O:0.999575
	
@USER	O	O:0.999580
apply	O	B-API:0.758254
function	O	O:0.999890
take	O	O:0.999499
so	O	O:0.999996
long	O	O:0.999255
(	O	O:0.999969
19	O	O:0.999956
second	O	O:0.999821
)	O	O:0.999994
as	O	O:0.999971
my	O	O:0.999872
list	O	O:0.997907
includes	O	O:0.999577
30,000	O	O:0.999418
uids	O	O:0.991143
.	O	O:0.999767
	
Isn't	O	O:0.999925
there	O	O:0.999988
a	O	O:0.999993
better	O	O:0.999377
way	O	O:0.999979
to	O	O:0.999966
enhance	O	O:0.999915
performance	O	O:0.999819
?	O	O:0.999946
	
`	O	O:0.999959
apply	O	B-API:0.981352
`	O	O:0.999773
is	O	O:0.999950
just	O	O:0.999964
a	O	O:0.999997
`	O	O:0.999884
for	O	O:0.999394
`	O	O:0.999993
loop	O	O:0.998089
so	O	O:0.999998
this	O	O:0.999953
will	O	O:0.999976
be	O	O:0.999999
slow	O	O:0.999945
unfortunately	O	O:0.999580
,	O	O:0.999994
there	O	O:0.999861
isn't	O	O:0.999982
a	O	O:0.999988
`	O	O:0.999983
toset	O	O:0.910367
`	O	O:0.999984
method	O	O:0.999027
	
How	O	O:0.999900
to	O	O:0.999987
apply	O	O:0.985841
different	O	O:0.999821
aggregation	O	O:0.998987
functions	O	O:0.999893
to	O	O:0.999991
different	O	O:0.999999
columns	O	O:0.999646
and	O	O:0.999998
give	O	O:0.999990
the	O	O:0.999917
results	O	O:0.999962
different	O	O:0.999859
names	O	O:0.999721
?	O	O:0.999960
	
Fixing	O	O:0.999608
the	O	O:0.999991
order	O	O:0.999765
of	O	O:0.999968
the	O	O:0.999980
DataFrame	B-API	O:0.999747
columns	O	O:0.999947
returned	O	O:0.999965
by	O	O:0.999969
`	O	O:0.999979
apply	O	B-API:0.997030
`	O	O:0.999699
:	O	O:0.998932
	
I	O	O:0.999920
did	O	O:0.999975
change	O	O:0.994331
it	O	O:0.999985
before	O	O:0.999755
I	O	O:0.999991
apply	O	O:0.695437
the	O	O:0.999657
code	O	O:0.997581
,	O	O:0.999981
and	O	O:0.999998
the	O	O:0.999988
error	O	O:0.999715
come	O	O:0.999471
out	O	O:0.999882
	
Thinking	O	O:0.999315
about	O	O:0.999796
it	O	O:0.999966
,	O	O:0.999996
you	O	O:0.999992
can	O	O:0.999984
remove	O	O:0.999961
the	O	O:0.999994
transpose	O	O:0.595507
and	O	O:0.999999
just	O	O:0.999901
use	O	O:0.999966
axis=1	O	O:0.987980
in	O	O:0.999947
the	O	O:0.999944
apply	O	B-API:0.880800
.	O	O:0.998752
	
Glad	O	O:0.999352
I	O	O:0.999978
could	O	O:0.999964
help	O	O:0.998638
.	O	O:0.999953
	
You	O	O:0.999854
could	O	O:0.999875
`	O	O:0.999998
apply	O	B-API:0.941927
`	O	O:0.999892
`	O	O:0.999534
value_counts	B-API	B-API:0.999800
`	O	O:0.999850
:	O	O:0.999704
#CODE	O	O:0.999904
	
`	O	O:0.999961
apply	O	B-API:0.990631
`	O	O:0.999972
tends	O	O:0.997733
to	O	O:0.999997
be	O	O:0.999999
slow	O	O:0.999467
,	O	O:0.999967
and	O	O:0.999996
row-wise	O	O:0.998918
operations	O	O:0.999855
slow	O	O:0.999645
as	O	O:0.999997
well	O	O:0.998862
,	O	O:0.999992
but	O	O:0.999973
to	O	O:0.999989
be	O	O:1.000000
honest	O	O:0.999882
if	O	O:0.999997
your	O	O:0.999935
frame	O	O:0.999895
isn't	O	O:0.999969
very	O	O:0.999838
big	O	O:0.999859
you	O	O:0.999315
might	O	O:0.999966
not	O	O:0.999998
even	O	O:0.999981
notice	O	O:0.999983
the	O	O:0.999987
difference	O	O:0.999444
.	O	O:0.999792
	
You	O	O:0.999941
can	O	O:0.999988
create	O	O:0.999991
a	O	O:1.000000
mask	O	O:0.918024
of	O	O:0.999999
your	O	O:0.999974
df	O	O:0.999965
by	O	O:0.999991
calling	O	O:0.997882
`	O	O:0.999946
apply	O	B-API:0.993629
`	O	O:0.999867
and	O	O:0.999860
call	O	O:0.998637
`	O	O:0.999893
value_counts	B-API	B-API:0.999970
`	O	O:0.999968
,	O	O:0.999987
this	O	O:0.999985
will	O	O:0.999949
produce	O	O:0.999927
`	O	O:0.999994
NaN	O	O:0.992337
`	O	O:0.999995
for	O	O:0.999982
all	O	O:0.999997
rows	O	O:0.999068
except	O	O:0.999924
one	O	O:0.999996
,	O	O:0.999998
you	O	O:0.999991
can	O	O:0.999997
then	O	O:0.999999
call	O	O:0.999977
`	O	O:0.999993
dropna	B-API	B-API:0.999769
`	O	O:0.999981
column-wise	O	O:0.983833
and	O	O:0.999998
pass	O	O:0.998678
param	O	O:0.996317
`	O	O:0.999993
thresh=2	O	O:0.976473
`	O	O:0.999997
so	O	O:0.999979
that	O	O:0.999989
there	O	O:0.999992
must	O	O:0.999985
be	O	O:0.999997
2	O	O:0.999974
or	O	O:0.999979
more	O	O:0.999709
non-	O	O:0.996133
`	O	O:0.999972
NaN	O	O:0.985931
`	O	O:0.999986
values	O	O:0.983411
:	O	O:0.999975
#CODE	O	O:0.999903
	
You	O	O:0.999939
could	O	O:0.999848
use	O	O:0.999993
the	O	O:0.999950
apply	O	B-API:0.991227
function	O	O:0.992289
:	O	O:0.999835
#CODE	O	O:0.999876
	
You	O	O:0.999884
can	O	O:0.999967
avoid	O	O:0.999992
loops	O	O:0.999974
by	O	O:0.999971
using	O	O:0.999864
`	O	O:0.999756
apply	O	B-API:0.998456
`	O	O:0.999822
#CODE	O	O:0.991470
	
C	O	O:0.998404
:\	O	O:0.999956
Users\user\Anaconda\lib\	O	O:0.996244
site-packages	O	O:0.996340
\pandas\core\	O	O:0.999837
groupby.pyc	O	O:0.992257
in	O	O:0.999927
apply	O	B-API:0.911955
(	O	O:0.999942
self	O	O:0.995862
,	O	O:0.999991
func	O	O:0.995740
,	O	O:0.999981
*	O	O:0.999994
args	O	O:0.999530
,	O	O:0.999976
**	O	O:0.999992
kwargs	O	O:0.998379
)	O	O:0.999957
	
You	O	O:0.999922
may	O	O:0.999976
use	O	O:0.999963
apply	O	B-API:0.844388
with	O	O:0.992563
regex	O	O:0.985034
:	O	O:0.999954
#CODE	O	O:0.999848
	
Btw	O	O:0.999951
check	O	O:0.999799
into	O	O:0.998377
[	O	O:0.999992
pandas	O	O:0.999764
apply	O	O:0.502480
/	O	O:0.999673
ufunc	O	O:0.963153
object	O	O:0.999341
]	O	O:0.998847
(	O	O:0.999910
#URL	O	O:0.999407
)	O	O:0.999940
.	O	O:0.999740
	
You've	O	O:0.999647
probably	O	O:0.999351
found	O	O:0.999878
this	O	O:0.999816
already	O	O:0.999892
though	O	O:0.999720
.	O	O:0.999901
	
You	O	O:0.999877
can	O	O:0.999982
actually	O	O:0.999999
put	O	O:0.999969
a	O	O:0.999997
numpy	O	O:0.997663
function	O	O:0.999941
into	O	O:0.999251
the	O	O:0.999993
pandas	O	O:0.998797
apply	O	B-API:0.548457
object	O	O:0.996626
.	O	O:0.999517
	
So	O	O:0.999993
this	O	O:0.999964
could	O	O:0.999974
do	O	O:0.999998
the	O	O:0.999992
trick	O	O:0.998962
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999993
`	O	O:0.999961
DataFrame.apply	B-API	B-API:0.999593
`	O	O:0.999990
with	O	O:0.995560
`	O	O:0.999992
axis=1	O	O:0.985476
`	O	O:0.999949
(	O	O:0.999953
to	O	O:0.999997
apply	O	O:0.938299
the	O	O:0.999944
func	O	O:0.992645
to	O	O:0.999997
each	O	O:0.999986
row	O	O:0.999945
)	O	O:0.999990
and	O	O:0.999977
in	O	O:0.999996
that	O	O:0.999044
function	O	O:0.999985
do	O	O:0.999996
your	O	O:0.999798
logic	O	O:0.998835
.	O	O:0.999917
	
Example	O	O:0.997704
-	O	O:0.999952
#CODE	O	O:0.999568
	
So	O	O:0.999973
if	O	O:0.999992
we	O	O:0.999993
apply	O	O:0.903170
this	O	O:0.999843
we	O	O:0.999991
get	O	O:0.999993
a	O	O:0.999998
Series	O	O:0.999611
with	O	O:0.999974
the	O	O:0.999995
indices	O	O:0.999776
as	O	O:0.999995
the	O	O:0.999977
c3	O	O:0.999946
keys	O	O:0.999742
we	O	O:0.999995
want	O	O:0.999917
and	O	O:0.999998
the	O	O:0.999998
values	O	O:0.999300
as	O	O:0.999988
dictionaries	O	O:0.999509
,	O	O:0.999970
and	O	O:0.999999
that	O	O:0.999975
we	O	O:0.999996
can	O	O:0.999998
turn	O	O:0.999991
into	O	O:0.999980
a	O	O:0.999998
dictionary	O	O:0.999797
using	O	O:0.999840
`	O	O:0.999845
.to_dict()	B-API	B-API:0.999970
`	O	O:0.999855
:	O	O:0.999719
#CODE	O	O:0.999908
	
Which	O	O:0.998740
is	O	O:0.999991
the	O	O:0.999897
answer	O	O:0.999326
I'm	O	O:0.999951
looking	O	O:0.999414
for	O	O:0.999934
.	O	O:0.999602
	
The	O	O:0.999925
problem	O	O:0.998313
is	O	O:0.999996
when	O	O:0.999542
I	O	O:0.999996
apply	O	O:0.991498
this	O	O:0.998436
to	O	O:0.999995
a	O	O:0.999998
`	O	O:0.999959
DataFrame	B-API	O:0.955995
`	O	O:0.999998
with	O	O:0.999935
a	O	O:0.999997
large	O	O:0.998381
dataset	O	O:0.999490
it	O	O:0.999963
runs	O	O:0.999826
slow	O	O:0.999157
.	O	O:0.999852
	
Very	O	O:0.999407
slow	O	O:0.997530
.	O	O:0.999833
	
Is	O	O:0.999985
there	O	O:0.999986
a	O	O:0.999993
better	O	O:0.999729
way	O	O:0.999977
of	O	O:0.999960
achieving	O	O:0.999823
this	O	O:0.999789
?	O	O:0.999935
	
You	O	O:0.999929
can	O	O:0.999964
apply	O	O:0.953321
the	O	O:0.999792
`	O	O:0.999952
type	O	O:0.993463
`	O	O:0.999993
function	O	O:0.999789
to	O	O:0.999992
the	O	O:0.999999
Series	O	O:0.999434
values	O	O:0.997626
:	O	O:0.999978
#CODE	O	O:0.999941
	
but	O	O:0.999953
this	O	O:0.999876
gives	O	O:0.999779
`	O	O:0.999958
NameError	O	O:0.997083
:	O	O:0.999992
name	O	O:0.999676
'	O	O:0.999977
ex	O	O:0.999954
'	O	O:0.999692
is	O	O:0.999986
not	O	O:0.999951
defined	O	O:0.999446
`	O	O:0.999949
.	O	O:0.999259
	
These	O	O:0.999892
DataFrames	O	O:0.999386
can	O	O:0.999992
have	O	O:1.000000
a	O	O:1.000000
lot	O	O:0.999986
of	O	O:0.999999
rows	O	O:0.998811
in	O	O:1.000000
them	O	O:0.999928
so	O	O:0.999991
I'm	O	O:0.999996
also	O	O:0.999969
concerned	O	O:0.999982
that	O	O:0.999926
the	O	O:0.999993
`	O	O:0.999988
apply	O	B-API:0.979319
`	O	O:0.999708
function	O	O:0.992123
might	O	O:0.999956
not	O	O:0.999981
be	O	O:0.999999
very	O	O:0.999804
efficient	O	O:0.999045
.	O	O:0.999830
	
How	O	O:0.999877
can	O	O:0.999945
I	O	O:1.000000
apply	O	O:0.985442
a	O	O:0.999265
function	O	O:0.998634
for	O	O:0.999989
each	O	O:0.999857
city	O	O:0.998154
or	O	O:0.999994
for	O	O:0.999984
each	O	O:0.999914
column	O	O:0.999482
in	O	O:0.999999
this	O	O:0.999906
"	O	O:0.999991
pivot	B-API	O:0.915171
table	O	O:0.999860
"	O	O:0.999973
?	O	O:0.999904
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.993854
a	O	O:0.999883
function	O	O:0.999464
to	O	O:0.999996
each	O	O:0.999998
column	O	O:0.999982
of	O	O:0.999999
a	O	O:0.999986
pivot	B-API	O:0.972831
table	O	O:0.999876
in	O	O:0.999986
pandas	O	O:0.999765
?	O	O:0.999978
	
You	O	O:0.999856
should	O	O:0.999852
use	O	O:0.999958
`	O	O:0.999973
apply	O	B-API:0.987115
`	O	O:0.999927
function	O	O:0.997007
of	O	O:0.999985
DataFrame	B-API	O:0.974286
API	O	O:0.999913
.	O	O:0.999837
	
Demo	O	O:0.997497
is	O	O:0.999911
below	O	O:0.990425
:	O	O:0.999968
#CODE	O	O:0.999678
	
Put	O	O:0.999446
std	O	O:0.996720
dev	O	O:0.998965
and	O	O:0.999994
mean	O	O:0.999599
in	O	O:0.999991
your	O	O:0.999988
table	O	O:0.999968
,	O	O:0.999991
use	O	O:0.999970
dictionary	O	O:0.998538
for	O	O:0.999830
it	O	O:0.999838
:	O	O:0.999956
`	O	O:0.999996
some_dict	O	O:0.996578
=	O	O:0.999822
{	O	O:0.999862
(	O	O:0.999895
'	O	O:0.999988
city	O	O:0.997339
'	O	O:0.999986
,	O	O:0.999987
'	O	O:0.999994
date	O	O:0.999413
')	O	O:0.999892
:[	O	O:0.999957
std_dev	O	O:0.993448
,	O	O:0.999998
mean	O	O:0.999850
]	O	O:0.999950
,	O	O:0.999978
..	O	O:0.999832
	
}	O	O:0.999657
`	O	O:0.999919
.	O	O:0.999507
	
For	O	O:0.999980
putting	O	O:0.999887
data	O	O:0.999381
in	O	O:0.999995
dataframe	B-API	O:0.999343
use	O	O:0.999954
apply	O	B-API:0.961366
function	O	O:0.996280
.	O	O:0.999291
	
You	O	O:0.999963
have	O	O:0.999950
all	O	O:0.999997
necessary	O	O:0.999998
data	O	O:0.999934
for	O	O:0.999987
running	O	O:0.999943
your	O	O:0.999833
check	O	O:0.999913
by	O	O:0.999995
apply	O	B-API:0.890991
function	O	O:0.996653
.	O	O:0.999409
	
Does	O	O:0.999202
the	O	O:0.999990
standard	O	O:0.998933
deviation	O	O:0.999574
and	O	O:0.999995
the	O	O:0.999992
rolling	O	O:0.968778
mean	O	O:0.999710
need	O	O:0.999959
to	O	O:0.999999
be	O	O:1.000000
appended	O	O:0.999938
to	O	O:0.999965
the	O	O:1.000000
original	O	O:0.999913
data	O	O:0.999990
frame	O	O:0.999995
for	O	O:0.999999
this	O	O:0.999919
apply	O	O:0.573157
to	O	O:0.999934
work	O	O:0.999927
?	O	O:0.999984
	
I	O	O:0.999988
think	O	O:0.999933
yes	O	O:0.998887
bc	O	O:0.999982
this	O	O:0.999792
is	O	O:0.999994
applying	O	O:0.999753
the	O	O:0.999700
function	O	O:0.999961
by	O	O:0.999931
row	O	O:0.999864
.	O	O:0.999701
	
If	O	O:0.999952
yes	O	O:0.999848
,	O	O:0.999999
then	O	O:0.999926
how	O	O:0.999998
can	O	O:0.999994
I	O	O:1.000000
concatenate	O	O:0.944392
rolling	O	O:0.988852
mean	O	O:0.997247
and	O	O:0.999986
std	O	O:0.998640
dev	O	O:0.998704
?	O	O:0.999786
	
I	O	O:0.999943
don't	O	O:0.999944
think	O	O:0.999601
it's	O	O:0.999914
as	O	O:0.999997
simple	O	O:0.999761
as	O	O:0.999993
adding	O	O:0.999831
a	O	O:0.999968
column	O	O:0.999529
because	O	O:0.999946
df2	O	O:0.999209
is	O	O:0.999998
a	O	O:0.999952
stacked	O	O:0.999781
table	O	O:0.999890
/	O	O:0.999938
pivot	B-API	O:0.887095
table	O	O:0.999855
.	O	O:0.999892
	
How	O	O:0.999880
to	O	O:0.999991
pass	O	O:0.999991
multiple	O	O:0.999945
arguments	O	O:0.999889
to	O	O:0.999994
the	O	O:0.999999
apply	O	B-API:0.948633
function	O	O:0.998641
	
I	O	O:0.999991
have	O	O:0.999929
a	O	O:0.999957
method	O	O:0.999919
called	O	O:0.999845
counting	O	O:0.999951
that	O	O:0.999758
takes	O	O:0.999885
2	O	O:0.999966
arguments	O	O:0.999254
.	O	O:0.999774
	
I	O	O:0.999990
need	O	O:0.999973
to	O	O:0.999959
call	O	O:0.999919
this	O	O:0.999925
method	O	O:0.999923
using	O	O:0.999978
the	O	O:0.996932
apply()	B-API	B-API:0.999834
method	O	O:0.998892
.	O	O:0.999728
	
However	O	O:0.999957
when	O	O:0.999842
I	O	O:0.999998
am	O	O:1.000000
passing	O	O:0.996782
the	O	O:0.999979
two	O	O:0.999977
parameters	O	O:0.999505
to	O	O:0.999995
the	O	O:0.999995
apply	O	B-API:0.907021
method	O	O:0.999747
it	O	O:0.999860
is	O	O:0.999996
giving	O	O:0.999513
the	O	O:0.999985
following	O	O:0.998137
error	O	O:0.997662
:	O	O:0.999904
	
I	O	O:0.999992
have	O	O:0.999982
seen	O	O:0.998954
the	O	O:0.999991
following	O	O:0.997718
thread	O	O:0.999661
python	O	O:0.999610
pandas	O	O:0.999559
:	O	O:0.999996
apply	O	O:0.912011
a	O	O:0.999905
function	O	O:0.999362
with	O	O:0.999943
arguments	O	O:0.999883
to	O	O:0.999998
a	O	O:0.999999
series	O	O:0.999317
.	O	O:0.999916
	
Update	O	O:0.999217
and	O	O:0.999988
I	O	O:0.999978
do	O	O:0.999931
not	O	O:0.999962
want	O	O:0.999962
to	O	O:0.999960
use	O	O:0.999999
functool.partial	O	O:0.993362
as	O	O:0.999985
I	O	O:0.999944
do	O	O:0.999975
not	O	O:0.999963
want	O	O:0.999917
to	O	O:0.999952
import	O	O:0.999998
additional	O	O:0.999835
classes	O	O:0.999409
to	O	O:0.999989
be	O	O:1.000000
able	O	O:0.999982
to	O	O:0.999997
pass	O	O:0.999926
parameters	O	O:0.998120
.	O	O:0.999945
	
#CODE	O	O:0.998453
	
Modified	O	O:0.999588
the	O	O:0.999963
question	O	O:0.998833
for	O	O:0.999993
more	O	O:0.999224
clarity	O	O:0.999397
.	O	O:0.999979
dic	O	O:0.996102
is	O	O:0.999992
the	O	O:0.999971
column	O	O:0.999912
value	O	O:0.999986
that	O	O:0.999865
would	O	O:0.999998
come	O	O:0.999994
by	O	O:0.999998
default	O	O:0.999672
via	O	O:0.999828
the	O	O:0.999950
apply	O	B-API:0.971100
function	O	O:0.998372
.	O	O:0.999571
	
The	O	O:0.999903
second	O	O:0.999083
argument	O	O:0.999831
is	O	O:0.999995
a	O	O:0.999990
new	O	O:0.998906
argument	O	O:0.999952
that	O	O:0.998545
is	O	O:0.999998
being	O	O:0.999730
passed	O	O:0.999456
using	O	O:0.998671
logic	O	O:0.996026
.	O	O:0.999095
	
`	O	O:0.999976
partial	O	O:0.978718
`	O	O:0.999978
is	O	O:0.999944
equivalent	O	O:0.999858
here	O	O:0.999584
,	O	O:0.999985
lambda	O	O:0.998980
isn't	O	O:0.999177
'	O	O:0.999951
better	O	O:0.999767
'	O	O:0.999960
in	O	O:0.999990
any	O	O:0.999902
way	O	O:0.999707
:	O	O:0.999949
e.g.	O	O:0.999505
`	O	O:0.999996
countWord	O	O:0.996665
=	O	O:0.999967
partial	O	O:0.990499
(	O	O:0.999986
counting	O	O:0.999414
,	O	O:0.999989
strWord=	O	O:0.996505
'	O	O:0.999952
word	O	O:0.999837
')`	O	O:0.999923
and	O	O:0.999996
then	O	O:0.999766
`	O	O:0.999991
apply	O	B-API:0.981628
(	O	O:0.999963
countWord	O	O:0.998435
)`	O	O:0.999728
.	O	O:0.999637
	
And	O	O:0.999917
yes	O	O:0.999792
,	O	O:0.999999
your	O	O:0.999932
understanding	O	O:0.996546
is	O	O:0.999978
correct	O	O:0.997664
.	O	O:0.999950
	
How	O	O:0.999896
to	O	O:0.999992
apply	O	O:0.994489
a	O	O:0.999949
concat	O	B-API:0.994260
function	O	O:0.999966
to	O	O:0.999997
a	O	O:1.000000
group	O	O:0.999602
by	O	O:0.999997
data	O	O:0.999985
frame	O	O:0.999995
using	O	O:0.999968
pandas	O	O:0.997602
?	O	O:0.999834
	
How	O	O:0.999809
to	O	O:0.999986
return	O	O:0.999994
new	O	O:0.999965
data	O	O:0.999985
frame	O	O:0.999999
when	O	O:0.999971
using	O	O:0.999996
a	O	O:0.999988
apply	O	B-API:0.984894
function	O	O:0.999111
on	O	O:0.999691
old	O	O:0.999951
dataframe	B-API	O:0.997470
?	O	O:0.999938
	
How	O	O:0.999809
to	O	O:0.999986
return	O	O:0.999994
new	O	O:0.999965
data	O	O:0.999985
frame	O	O:0.999999
when	O	O:0.999971
using	O	O:0.999996
a	O	O:0.999988
apply	O	B-API:0.984894
function	O	O:0.999111
on	O	O:0.999691
old	O	O:0.999951
dataframe	B-API	O:0.997470
?	O	O:0.999938
	
Currently	O	O:0.999822
I	O	O:0.999952
am	O	O:0.999990
not	O	O:0.999929
returning	O	O:0.999963
anything	O	O:0.998945
!	O	O:0.999820
	
Which	O	O:0.999052
is	O	O:0.999978
why	O	O:0.999964
the	O	O:0.999950
output	O	O:0.999685
confuses	O	O:0.999278
me	O	O:0.999936
.	O	O:0.999866
	
Is	O	O:0.999960
it	O	O:0.999998
a	O	O:0.999996
default	O	O:0.999563
return	O	O:0.998732
with	O	O:0.999887
the	O	O:0.999980
apply	O	B-API:0.927042
function	O	O:0.998788
?	O	O:0.999837
	
I	O	O:0.999988
want	O	O:0.999953
to	O	O:0.999954
return	O	O:0.999996
a	O	O:0.999979
new	O	O:0.999871
dataframe	B-API	O:0.999649
with	O	O:0.999979
only	O	O:0.999993
the	O	O:1.000000
rows	O	O:0.999914
that	O	O:0.999937
fulfill	O	O:0.999950
the	O	O:0.999968
elif	O	O:0.840959
statement	O	O:0.999807
.	O	O:0.999889
	
However	O	O:0.999303
,	O	O:0.999992
not	O	O:0.999996
even	O	O:0.999941
the	O	O:0.999998
printing	O	O:0.999392
works	O	O:0.999540
in	O	O:0.999993
the	O	O:0.999993
elif	O	O:0.987849
so	O	O:0.999984
return	O	O:0.999807
x	O	O:0.999854
in	O	O:0.999990
the	O	O:0.999989
elif	O	O:0.967429
doesn't	O	O:0.999930
work	O	O:0.999796
either	O	O:0.999970
.	O	O:0.999936
	
This	O	O:0.998925
is	O	O:0.999989
why	O	O:0.999948
you	O	O:0.999945
are	O	O:0.999997
getting	O	O:0.999930
a	O	O:0.999996
dataframe	B-API	O:0.998317
of	O	O:0.999991
all	O	O:0.999458
`	O	O:0.999991
None	O	O:0.988007
`	O	O:0.999978
.	O	O:0.999297
	
I	O	O:0.999907
do	O	O:0.999977
not	O	O:0.999967
think	O	O:0.999959
you	O	O:0.999981
can	O	O:0.999974
achieve	O	O:0.999999
what	O	O:0.999964
you	O	O:0.999972
are	O	O:0.999999
trying	O	O:0.999948
for	O	O:0.999981
with	O	O:0.999706
`	O	O:0.999963
apply	O	B-API:0.961903
`	O	O:0.999973
,	O	O:0.999954
as	O	O:0.999997
`	O	O:0.999902
apply()	B-API	B-API:0.999643
`	O	O:0.999982
with	O	O:0.999591
axis	O	O:0.999950
`	O	O:0.999986
1	O	O:0.999077
`	O	O:0.999997
actually	O	O:0.999695
runs	O	O:0.999902
the	O	O:0.999894
function	O	O:0.999522
for	O	O:0.999996
every	O	O:0.999640
row	O	O:0.999659
and	O	O:0.999974
replaces	O	O:0.999911
the	O	O:0.999942
row	O	O:0.999896
with	O	O:0.999914
the	O	O:0.999994
returned	O	O:0.999766
value	O	O:0.999666
(	O	O:0.999994
as	O	O:0.999998
you	O	O:0.999965
see	O	O:0.999977
in	O	O:0.999999
your	O	O:0.999973
case	O	O:0.999905
)	O	O:0.999991
.	O	O:0.999741
	
Your	O	O:0.999432
comparison	O	O:0.999522
func	O	O:0.997807
won't	O	O:0.999971
work	O	O:0.999936
as	O	O:0.999999
you've	O	O:0.999856
found	O	O:0.999754
out	O	O:0.999897
,	O	O:0.999975
you're	O	O:0.999962
trying	O	O:0.999914
to	O	O:0.999998
compare	O	O:0.999994
a	O	O:0.999994
scalar	O	O:0.999819
with	O	O:0.999952
an	O	O:0.999971
array	O	O:0.999902
.	O	O:0.999790
	
Anyway	O	O:0.999923
you	O	O:0.999960
can	O	O:0.999991
call	O	O:0.999942
`	O	O:0.999997
apply	O	B-API:0.997981
`	O	O:0.999881
and	O	O:0.999942
pass	O	O:0.998594
`	O	O:0.999927
axis=1	O	O:0.995598
`	O	O:0.999995
to	O	O:0.999957
process	O	O:0.999994
the	O	O:0.999991
df	O	O:0.999655
row-wise	O	O:0.996737
.	O	O:0.999782
	
Convert	O	O:0.999417
the	O	O:0.999976
dtype	B-API	B-API:0.979838
to	O	O:0.999913
`	O	O:0.999996
str	O	O:0.997040
`	O	O:0.999997
so	O	O:0.999990
that	O	O:0.999994
you	O	O:0.999998
can	O	O:0.999989
use	O	O:0.999998
the	O	O:0.999977
vectorised	O	O:0.998603
`	O	O:0.999972
str.contains	B-API	B-API:0.996800
`	O	O:0.999995
with	O	O:0.997972
`	O	O:0.999997
any	O	O:0.999681
`	O	O:0.999996
to	O	O:0.999970
produce	O	O:0.999998
a	O	O:0.999991
boolean	O	O:0.997187
series	O	O:0.999934
and	O	O:0.999972
use	O	O:0.999997
this	O	O:0.998920
as	O	O:0.999988
the	O	O:0.999930
arg	O	O:0.999738
for	O	O:0.999841
`	O	O:0.999888
np.where	B-API	B-API:0.998831
`	O	O:0.999955
and	O	O:0.999953
return	O	O:0.998795
'	O	O:0.999801
yes	O	O:0.999769
'	O	O:0.999979
or	O	O:0.999970
'	O	O:0.999982
no	O	O:0.999974
'	O	O:0.999994
when	O	O:0.999331
`	O	O:0.999995
True	O	O:0.999671
`	O	O:0.999994
or	O	O:0.999375
`	O	O:0.999991
False	O	O:0.998428
`	O	O:0.999981
respectively	O	O:0.991410
:	O	O:0.999979
#CODE	O	O:0.999722
	
You	O	O:0.999802
can	O	O:0.999951
groupby	B-API	B-API:0.667474
on	O	O:0.999944
'	O	O:0.999919
Column1	O	O:0.999507
'	O	O:0.999912
and	O	O:0.999980
`	O	O:0.999990
apply	O	B-API:0.989398
`	O	O:0.999984
a	O	O:0.999843
lambda	O	O:0.999651
that	O	O:0.999782
calls	O	O:0.999769
`	O	O:0.999997
join	O	B-API:0.999027
`	O	O:0.999997
to	O	O:0.999977
concatenate	O	O:0.992902
all	O	O:0.999968
the	O	O:0.999991
string	O	O:0.999654
values	O	O:0.999222
and	O	O:0.999999
then	O	O:0.999980
if	O	O:0.999997
you	O	O:0.999996
desire	O	O:0.999973
construct	O	O:0.999752
a	O	O:0.999993
list	O	O:0.995138
object	O	O:0.999955
from	O	O:0.999992
that	O	O:0.999806
result	O	O:0.999905
:	O	O:0.999978
#CODE	O	O:0.999817
	
not	O	O:0.999959
sure	O	O:0.999958
why	O	O:0.999994
you	O	O:0.999975
get	O	O:0.999994
the	O	O:0.999997
error	O	O:0.999731
,	O	O:0.999994
note	O	O:0.999924
that	O	O:0.999957
I'm	O	O:0.999999
using	O	O:0.999997
a	O	O:0.999936
double	O	O:0.885783
subscript	O	O:0.999544
`	O	O:0.999813
[[	O	O:0.999940
]]`	O	O:0.999990
to	O	O:0.999984
create	O	O:0.999996
a	O	O:1.000000
single	O	O:0.999936
column	O	O:0.999988
df	O	O:0.999960
when	O	O:0.999853
calling	O	O:0.999286
`	O	O:0.999995
apply	O	B-API:0.994176
`	O	O:0.999843
.	O	O:0.998019
	
You	O	O:0.999928
could	O	O:0.999973
iterate	O	O:0.999981
over	O	O:0.999985
each	O	O:0.999785
row	O	O:0.999935
for	O	O:0.999996
that	O	O:0.999981
column	O	O:0.999888
after	O	O:0.999984
the	O	O:0.999949
groupby	B-API	B-API:0.991316
so	O	O:0.999994
just	O	O:0.999953
take	O	O:0.999998
the	O	O:0.999997
result	O	O:0.999968
of	O	O:0.999995
my	O	O:0.999912
answer	O	O:0.999920
and	O	O:0.999992
iterate	O	O:0.999802
over	O	O:0.996984
'	O	O:0.999940
Column2	O	O:0.996495
'	O	O:0.999885
	
For	O	O:0.999906
merging	O	O:0.999368
two	O	O:0.999973
lists	O	O:0.999418
use	O	O:0.999839
`	O	O:0.999949
apply	O	B-API:0.988392
`	O	O:0.999081
function	O	O:0.984924
:	O	O:0.999975
#CODE	O	O:0.999797
	
If	O	O:0.999957
you	O	O:0.999988
want	O	O:0.999984
to	O	O:0.999996
apply	O	O:0.998026
some	O	O:0.998814
function	O	O:0.999895
to	O	O:0.999998
some	O	O:0.999999
column	O	O:0.999952
of	O	O:0.999996
dataframe	B-API	O:0.998400
,	O	O:0.999997
try	O	O:0.999988
to	O	O:0.999982
use	O	O:0.999988
function	O	O:0.999575
`	O	O:0.999982
apply	O	B-API:0.949823
`	O	O:0.999926
function	O	O:0.997416
of	O	O:0.999985
DataFrame	B-API	O:0.974286
API	O	O:0.999913
.	O	O:0.999837
	
Simple	O	O:0.997572
demo	O	O:0.997825
:	O	O:0.999970
#CODE	O	O:0.999856
	
By	O	O:0.999980
passing	O	O:0.999551
a	O	O:0.999987
dict	O	O:0.999741
to	O	O:0.999994
aggregate	O	O:0.964468
you	O	O:0.999961
can	O	O:0.999993
apply	O	O:0.997446
a	O	O:0.999995
different	O	O:0.999082
aggregation	O	O:0.999122
to	O	O:0.999994
the	O	O:1.000000
columns	O	O:0.999958
of	O	O:0.999995
a	O	O:0.999990
DataFrame	B-API	O:0.985496
.	O	O:0.999842
	
You	O	O:0.999854
could	O	O:0.999875
`	O	O:0.999998
apply	O	B-API:0.941879
`	O	O:0.999762
`	O	O:0.999475
pd.Series.nunique	B-API	B-API:0.988334
`	O	O:0.999971
,	O	O:0.999922
and	O	O:1.000000
then	O	O:0.999684
use	O	O:0.999995
that	O	O:0.999953
to	O	O:0.999981
select	O	O:0.998870
:	O	O:0.999965
#CODE	O	O:0.999873
	
I	O	O:0.999990
have	O	O:0.999984
a	O	O:0.999994
dataframe	B-API	O:0.999063
on	O	O:0.999968
which	O	O:0.999949
I'm	O	O:0.999997
doing	O	O:0.999995
a	O	O:0.999993
row	O	O:0.999879
by	O	O:0.999966
row	O	O:0.999927
manipulation	O	O:0.999519
,	O	O:0.999994
I'm	O	O:0.999992
currently	O	O:0.999984
using	O	O:0.999946
iterrows()	B-API	B-API:0.998332
which	O	O:0.999205
I	O	O:0.999992
know	O	O:0.999606
is	O	O:0.999956
slow	O	O:0.994513
,	O	O:0.999977
and	O	O:0.999992
would	O	O:0.999940
rather	O	O:0.999936
use	O	O:0.999909
apply()	B-API	B-API:0.999655
.	O	O:0.998718
	
However	O	O:0.998710
I'm	O	O:0.999936
not	O	O:0.999994
sure	O	O:0.999951
how	O	O:0.999987
to	O	O:0.999996
go	O	O:0.999999
about	O	O:0.999957
it	O	O:0.999988
with	O	O:0.999837
apply	O	B-API:0.884608
(	O	O:0.999971
if	O	O:0.999968
at	O	O:0.999994
all	O	O:0.999984
possible	O	O:0.999730
)	O	O:0.999959
.	O	O:0.999749
	
You	O	O:0.999895
can	O	O:0.999954
apply	O	O:0.971607
string	O	O:0.999868
methods	O	O:0.998803
in	O	O:0.999992
a	O	O:0.999996
vectorized	O	O:0.999600
way	O	O:0.999970
using	O	O:0.999894
the	O	O:0.999677
`	O	O:0.999794
str	O	O:0.982944
`	O	O:0.999997
attribute	O	O:0.999927
of	O	O:0.999949
`	O	O:0.999934
Series	O	O:0.991497
`	O	O:0.999979
.	O	O:0.999555
	
To	O	O:0.999995
find	O	O:0.999992
rows	O	O:0.999797
in	O	O:0.999991
the	O	O:0.999992
`'	O	O:0.999944
page_name	O	O:0.998699
'`	O	O:0.999990
column	O	O:0.999907
with	O	O:0.999987
some	O	O:0.999875
string	O	O:0.999873
`'	O	O:0.999936
xxx	O	O:0.999741
'`	O	O:0.999986
you	O	O:0.999927
can	O	O:0.999967
do	O	O:0.999997
#CODE	O	O:0.999933
	
I	O	O:0.999962
recommend	O	O:0.999938
using	O	O:0.999397
datetime64	O	O:0.953094
,	O	O:0.999958
that	O	O:0.998694
is	O	O:0.999998
first	O	O:0.999912
apply	O	B-API:0.538536
`	O	O:0.999723
pd.to_datetime	B-API	B-API:0.998322
`	O	O:0.999990
on	O	O:0.999716
the	O	O:0.999985
index	O	O:0.999718
.	O	O:0.999843
	
If	O	O:0.999980
you	O	O:0.999966
set	O	O:0.999992
this	O	O:0.999994
as	O	O:0.999990
an	O	O:0.999986
index	O	O:0.999991
then	O	O:0.999939
you	O	O:0.999999
can	O	O:0.999994
use	O	O:0.999996
resample	O	B-API:0.976907
:	O	O:0.999733
#CODE	O	O:0.999770
	
Attempt	O	O:0.996098
2	O	O:0.999410
:	O	O:0.999983
When	O	O:0.999933
I	O	O:0.999998
try	O	O:0.999993
with	O	O:0.999570
`	O	O:0.999990
apply	O	B-API:0.924656
`	O	O:0.999962
I	O	O:0.999937
almost	O	O:0.999975
get	O	O:0.999886
what	O	O:0.999850
I	O	O:0.999994
need	O	O:0.999823
:	O	O:0.999848
#CODE	O	O:0.999904
	
Attempt	O	O:0.995985
3	O	O:0.999656
:	O	O:0.999980
If	O	O:0.999998
I	O	O:0.999999
to	O	O:0.999998
assign	O	O:0.999978
the	O	O:0.999994
result	O	O:0.999956
of	O	O:0.999989
`	O	O:0.999985
apply	O	B-API:0.905081
`	O	O:0.999980
to	O	O:0.999971
a	O	O:1.000000
new	O	O:0.999314
column	O	O:0.998769
:	O	O:0.999975
#CODE	O	O:0.999839
	
weirdly	O	O:0.999576
,	O	O:0.999997
even	O	O:0.999893
with	O	O:0.999987
`	O	O:0.999992
as_index=False	O	O:0.992015
`	O	O:0.999996
the	O	O:0.999919
apply	O	B-API:0.699942
version	O	O:0.997287
doesn't	O	O:0.998879
work	O	O:0.999896
...	O	O:0.999887
	
I	O	O:0.999938
kindof	O	O:0.999869
think	O	O:0.999378
perhaps	O	O:0.999620
it	O	O:0.999976
should	O	O:0.999954
work	O	O:0.999510
(	O	O:0.999994
modulo	O	O:0.999956
ordering	O	O:0.999539
)	O	O:0.999939
...	O	O:0.999180
	
Thanks	O	O:0.998129
@USER	O	O:0.998815
.	O	O:0.999745
	
Sorry	O	O:0.997395
,	O	O:0.999983
not	O	O:0.999991
sure	O	O:0.999971
if	O	O:0.999996
you	O	O:0.999966
saw	O	O:0.999959
the	O	O:0.999986
second	O	O:0.999920
part	O	O:0.999931
of	O	O:0.999996
my	O	O:0.999956
question	O	O:0.999599
.	O	O:0.999888
	
I	O	O:0.999959
tried	O	O:0.999951
using	O	O:0.998794
transform	O	B-API:0.966662
and	O	O:0.999880
apply	O	O:0.566867
without	O	O:0.991836
luck	O	O:0.982698
.	O	O:0.999569
	
@USER	O	O:0.999343
-Reina	O	O:0.999779
seen	O	O:0.999875
them	O	O:0.999945
thanks	O	O:0.999925
,	O	O:0.999989
I	O	O:0.999991
hope	O	O:0.999909
this	O	O:0.999274
way	O	O:0.999952
works	O	O:0.999858
for	O	O:0.999975
you	O	O:0.999603
.	O	O:0.999884
	
Will	O	O:0.999865
have	O	O:0.999973
a	O	O:0.999996
little	O	O:0.999631
think	O	O:0.999936
if	O	O:0.999990
I	O	O:0.999996
can	O	O:0.999979
get	O	O:0.999996
this	O	O:0.999993
with	O	O:0.999990
an	O	O:0.999968
apply	O	B-API:0.942363
(	O	O:0.999138
but	O	O:0.999974
this	O	O:0.999831
will	O	O:0.999968
always	O	O:0.999987
be	O	O:0.999999
more	O	O:0.999867
efficient	O	O:0.999132
)	O	O:0.999967
.	O	O:0.999757
	
:)	O	O:0.999244
	
Earlier	O	O:0.999168
I	O	O:0.999908
was	O	O:0.999981
trying	O	O:0.995738
len	O	B-API:0.942325
(	O	O:0.999869
filter	O	O:0.576117
(	O	O:0.999978
y.__contains__	O	O:0.996424
,	O	O:0.999994
x	O	O:0.999973
))	O	O:0.999380
for	O	O:0.999974
the	O	O:0.999986
same	O	O:0.999054
purpose	O	O:0.998944
but	O	O:0.999691
was	O	O:0.999748
not	O	O:0.999993
able	O	O:0.999981
to	O	O:0.999993
apply	O	O:0.978018
it	O	O:0.999975
on	O	O:0.999975
df	O	O:0.999780
	
One	O	O:0.999851
way	O	O:0.999899
,	O	O:0.999967
is	O	O:0.999993
to	O	O:0.999946
use	O	O:0.999994
`	O	O:0.999940
apply	O	B-API:0.994319
`	O	O:0.999949
and	O	O:0.999918
calculate	O	O:0.998106
len	O	B-API:0.518390
#CODE	O	O:0.999631
	
Typically	O	O:0.999622
,	O	O:0.999985
you're	O	O:0.999960
better	O	O:0.999746
off	O	O:0.999961
keeping	O	O:0.999665
DataFrame	B-API	O:0.998821
columns	O	O:0.999899
as	O	O:0.999998
simple	O	O:0.999951
types	O	O:0.999137
rather	O	O:0.999973
than	O	O:0.999947
lists	O	O:0.999620
,	O	O:0.999996
dicts	O	O:0.999877
,	O	O:0.999986
etc	O	O:0.999947
.	O	O:0.999941
	
In	O	O:0.999979
this	O	O:0.999975
particular	O	O:0.999981
case	O	O:0.999962
,	O	O:0.999998
you	O	O:0.999976
can	O	O:0.999995
pull	O	O:0.999982
out	O	O:0.999997
specific	O	O:0.999976
elements	O	O:0.999901
from	O	O:0.999888
that	O	O:0.999973
list	O	O:0.999972
using	O	O:0.999977
apply	O	B-API:0.821318
though	O	O:0.996536
with	O	O:0.999966
something	O	O:0.999951
like	O	O:0.999667
`	O	O:0.999996
x.apply	O	O:0.959277
(	O	O:0.999983
lambda	O	O:0.999182
x	O	O:0.999108
:	O	O:0.999948
x	O	O:0.999952
[	O	O:0.999986
1	O	O:0.999988
])`	O	O:0.999947
to	O	O:0.999980
pull	O	O:0.999961
the	O	O:0.999983
month	O	O:0.992766
,	O	O:0.999953
but	O	O:0.999977
Fabio's	O	O:0.999766
answer	O	O:0.999589
is	O	O:0.999974
better	O	O:0.999708
from	O	O:0.999995
a	O	O:0.999998
data	O	O:0.999834
organization	O	O:0.999901
perspective	O	O:0.999844
.	O	O:0.999905
	
b.count	O	O:0.977612
(	O	O:0.999992
a	O	O:0.999966
[	O	O:0.999878
i	O	O:0.999979
])	O	O:0.999972
I	O	O:0.999936
apply	O	O:0.865414
this	O	O:0.994503
but	O	O:0.999793
received	O	O:0.999954
this	O	O:0.999846
error	O	O:0.999526
.	O	O:0.999834
	
AttributeError	O	O:0.997486
:	O	O:0.999639
'	O	O:0.999954
Int64Index	O	O:0.999401
'	O	O:0.999859
object	O	O:0.999801
has	O	O:0.999961
no	O	O:0.999979
attribute	O	O:0.999914
'	O	O:0.999988
levels	O	O:0.999185
'	O	O:0.999911
	
I'd	O	O:0.999985
like	O	O:0.999952
to	O	O:0.999987
`	O	O:0.999999
group_by	O	B-API:0.835354
`	O	O:0.999997
this	O	O:0.999893
table	O	O:0.999997
according	O	O:0.999836
to	O	O:0.999996
unique	O	O:0.998008
combinations	O	O:0.999870
of	O	O:0.999974
`	O	O:0.999974
id	O	O:0.996813
`	O	O:0.999978
and	O	O:0.999683
`	O	O:0.999994
timestamp	O	O:0.980477
range	O	O:0.999819
`	O	O:0.999843
.	O	O:0.999300
	
The	O	O:0.999974
grouping	O	O:0.999190
operation	O	O:0.999565
should	O	O:0.999974
ultimately	O	O:0.999994
produce	O	O:0.999992
a	O	O:0.999998
single	O	O:0.998364
`	O	O:0.999991
grouped	O	O:0.981893
`	O	O:0.999980
object	O	O:0.999864
that	O	O:0.999977
I	O	O:0.999998
can	O	O:0.999999
then	O	O:0.999984
apply	O	O:0.993734
aggregations	O	O:0.998939
on	O	O:0.999791
.	O	O:0.999904
	
For	O	O:0.999713
example	O	O:0.997935
:	O	O:0.999935
	
you	O	O:0.999790
might	O	O:0.999986
also	O	O:0.999994
want	O	O:0.999997
to	O	O:0.999980
apply	O	O:0.986723
integer	O	O:0.998628
division	O	O:0.999736
to	O	O:0.999991
generate	O	O:0.999991
time	O	O:0.999937
intervals	O	O:0.999657
:	O	O:0.999979
#CODE	O	O:0.999841
	
Hi	O	O:0.999908
Dima	O	O:0.999272
,	O	O:0.999994
thanks	O	O:0.999534
for	O	O:0.999998
your	O	O:0.999283
answer	O	O:0.998733
.	O	O:0.999862
	
The	O	O:0.999876
challenge	O	O:0.999256
I'm	O	O:0.999962
facing	O	O:0.998285
is	O	O:0.999961
creating	O	O:0.999533
multiple	O	O:0.999798
,	O	O:0.999988
sometimes	O	O:0.999912
overlapping	O	O:0.999863
time	O	O:0.999932
bins	O	O:0.999943
that	O	O:0.999993
only	O	O:0.999996
apply	O	O:0.902342
to	O	O:0.999963
specific	O	O:0.999957
`	O	O:0.999967
id	O	O:0.997053
`	O	O:0.999992
s	O	O:0.998028
.	O	O:0.999939
	
If	O	O:0.999959
you	O	O:0.999981
try	O	O:0.999996
to	O	O:0.999997
produce	O	O:0.999998
the	O	O:0.999997
groups	O	O:0.999905
from	O	O:0.999965
my	O	O:0.999988
example	O	O:0.999937
you'll	O	O:0.999804
see	O	O:0.999992
what	O	O:0.999850
I	O	O:0.999997
mean	O	O:0.999871
.	O	O:0.999686
	
As	O	O:0.999986
a	O	O:0.999985
side-note	O	O:0.999466
,	O	O:0.999987
pandas	O	O:0.999839
has	O	O:0.999993
a	O	O:0.999992
handy	O	O:0.999227
convenience	O	O:0.999603
function	O	O:0.999604
for	O	O:0.999992
grouping	O	O:0.999682
on	O	O:0.999948
binned	O	O:0.999703
values	O	O:0.999911
called	O	O:0.997933
`	O	O:0.999992
pd.cut	B-API	B-API:0.999946
`	O	O:0.999967
.	O	O:0.999368
	
I'm	O	O:0.999882
thinking	O	O:0.999804
there	O	O:0.999956
must	O	O:0.999938
be	O	O:1.000000
a	O	O:0.999999
smarter	O	O:0.998027
or	O	O:0.999984
faster	O	O:0.999737
way	O	O:0.999983
to	O	O:0.999960
do	O	O:1.000000
this	O	O:0.999972
,	O	O:0.999998
a	O	O:0.999997
mask	O	O:0.635547
could	O	O:0.999962
have	O	O:0.999996
been	O	O:0.999864
useful	O	O:0.999929
except	O	O:0.999876
you	O	O:0.999916
can't	O	O:0.999993
fill	O	O:0.999850
down	O	O:0.999776
with	O	O:0.999998
this	O	O:0.999994
data	O	O:0.999993
as	O	O:0.999993
`	O	O:0.999992
price2	O	O:0.932977
`	O	O:0.999992
for	O	O:0.999979
one	O	O:0.999967
row	O	O:0.999706
might	O	O:0.999902
be	O	O:0.999999
thousands	O	O:0.999998
of	O	O:0.999999
rows	O	O:0.998698
after	O	O:0.999980
the	O	O:0.999961
`	O	O:0.999965
price2	O	O:0.924951
`	O	O:0.999998
for	O	O:0.999991
another	O	O:0.999830
row	O	O:0.999506
,	O	O:0.999961
and	O	O:0.999992
I	O	O:0.999985
can't	O	O:0.999960
find	O	O:0.999944
a	O	O:0.999998
way	O	O:0.999915
to	O	O:0.999997
turn	O	O:0.999994
a	O	O:0.999998
merge	O	O:0.712087
into	O	O:0.999907
a	O	O:0.999997
cross	O	O:0.996455
apply	O	O:0.981988
like	O	O:0.999409
one	O	O:0.999953
might	O	O:0.999845
in	O	O:0.999989
TSQL	O	O:0.998995
.	O	O:0.999891
	
To	O	O:0.999961
make	O	O:0.999692
it	O	O:0.999996
more	O	O:0.999924
generic	O	O:0.999735
,	O	O:0.999994
compare	O	O:0.999760
row	O	O:0.999982
values	O	O:0.999864
on	O	O:0.999876
apply	O	B-API:0.603548
method	O	O:0.999486
.	O	O:0.999513
	
You	O	O:0.999799
should	O	O:0.999974
actually	O	O:0.999972
use	O	O:0.999941
`	O	O:0.999821
groupby	B-API	B-API:0.999581
`	O	O:0.999987
to	O	O:0.999889
group	O	O:0.999990
based	O	O:0.999869
on	O	O:0.999917
`	O	O:0.999990
name	O	O:0.998703
`	O	O:0.999987
and	O	O:0.999833
`	O	O:0.999997
total_year	O	O:0.862039
`	O	O:0.999996
instead	O	O:0.999917
of	O	O:0.999995
`	O	O:0.999981
apply	O	B-API:0.980831
`	O	O:0.999637
(	O	O:0.999827
as	O	O:0.999997
second	O	O:0.999771
step	O	O:0.999899
)	O	O:0.999992
and	O	O:0.999983
in	O	O:0.999992
the	O	O:0.999904
groupby	B-API	B-API:0.963520
you	O	O:0.999972
can	O	O:0.999987
create	O	O:0.999988
the	O	O:0.999998
list	O	O:0.999362
you	O	O:0.999981
want	O	O:0.999909
.	O	O:0.999945
	
Example	O	O:0.997704
-	O	O:0.999952
#CODE	O	O:0.999568
	
In	O	O:0.999973
pandas	O	O:0.999848
you	O	O:0.999992
can	O	O:0.999969
use	O	O:0.999999
apply	O	B-API:0.531291
to	O	O:0.999887
apply	O	O:0.931072
any	O	O:0.999430
function	O	O:0.999730
to	O	O:0.999994
either	O	O:1.000000
rows	O	O:0.999896
or	O	O:0.999999
columns	O	O:0.999974
in	O	O:0.999995
a	O	O:0.999992
DataFrame	B-API	O:0.970402
.	O	O:0.999853
	
The	O	O:0.999723
function	O	O:0.999885
can	O	O:0.999975
be	O	O:1.000000
passed	O	O:0.999938
with	O	O:0.999930
a	O	O:0.999992
lambda	O	O:0.999488
,	O	O:0.999987
or	O	O:0.999996
defined	O	O:0.999840
separately	O	O:0.999723
.	O	O:0.999888
	
(	O	O:0.999838
side-remark	O	O:0.996951
:	O	O:0.999998
your	O	O:0.999951
example	O	O:0.999838
does	O	O:0.999913
not	O	O:0.999996
entirely	O	O:0.999996
make	O	O:0.999932
clear	O	O:0.999872
if	O	O:0.999994
you	O	O:0.999980
actually	O	O:0.999996
have	O	O:0.999991
a	O	O:0.999983
2-D	O	O:0.999886
DataFrame	B-API	O:0.991434
or	O	O:0.999996
just	O	O:0.999958
a	O	O:0.999996
1-D	O	O:0.997625
Series	O	O:0.999358
.	O	O:0.999915
Either	O	O:0.999948
way	O	O:0.999939
,	O	O:0.999984
`	O	O:0.999992
apply	O	B-API:0.965192
`	O	O:0.999970
can	O	O:0.999558
be	O	O:1.000000
used	O	O:0.999918
)	O	O:0.999777
	
The	O	O:0.999663
`	O	O:0.999917
.str	B-API	B-API:0.948727
`	O	O:0.999977
accessor	O	O:0.998805
only	O	O:0.999898
works	O	O:0.999974
on	O	O:0.999995
a	O	O:0.999995
Series	O	O:0.999737
or	O	O:0.999998
a	O	O:0.999999
single	O	O:0.999949
column	O	O:0.999988
of	O	O:0.999994
a	O	O:0.999960
DataFrame	B-API	O:0.794766
(	O	O:0.999981
not	O	O:0.999992
an	O	O:0.999993
entire	O	O:0.999925
DataFrame	B-API	O:0.996774
)	O	O:0.999954
.	O	O:0.999831
	
If	O	O:0.999957
you	O	O:0.999987
want	O	O:0.999982
to	O	O:0.999990
apply	O	O:0.958581
this	O	O:0.999456
method	O	O:0.999906
to	O	O:0.999999
multiple	O	O:1.000000
columns	O	O:0.999976
of	O	O:0.999996
a	O	O:0.999993
DataFrame	B-API	O:0.991537
,	O	O:0.999989
you'll	O	O:0.999948
need	O	O:0.999951
to	O	O:0.999991
use	O	O:0.999999
it	O	O:0.999956
on	O	O:0.999995
each	O	O:0.999979
column	O	O:0.999986
individually	O	O:0.999891
in	O	O:0.999995
turn	O	O:0.993659
.	O	O:0.999947
	
Sure	O	O:0.999532
-	O	O:0.999992
to	O	O:0.999988
apply	O	O:0.830907
the	O	O:0.999870
method	O	O:0.999813
to	O	O:0.999994
the	O	O:0.999999
'	O	O:0.999986
words	O	O:0.999738
'	O	O:0.999995
column	O	O:0.999971
,	O	O:0.999998
you	O	O:0.999989
could	O	O:0.999974
write	O	O:0.999991
`	O	O:0.999997
df	O	O:0.999451
[	O	O:0.999985
'	O	O:0.999986
words	O	O:0.999732
']	O	O:0.999745
.str	B-API	B-API:0.962841
.cat	B-API	B-API:0.987392
(	O	O:0.999863
sep=	O	O:0.999260
'	O	O:0.999960
,	O	O:0.999946
')`	O	O:0.999615
(	O	O:0.999986
where	O	O:0.999933
`	O	O:0.999996
df	O	O:0.999098
`	O	O:0.999978
is	O	O:0.999934
the	O	O:0.999997
name	O	O:0.999947
of	O	O:0.999992
your	O	O:0.999924
DataFrame	B-API	O:0.995921
)	O	O:0.999979
.	O	O:0.999812
	
try	O	O:0.999919
to	O	O:0.999981
use	O	O:0.999995
"	O	O:0.999952
apply	O	B-API:0.888908
"	O	O:0.999941
instead	O	O:0.999832
of	O	O:0.999984
"	O	O:0.999939
map	O	B-API:0.946448
"	O	O:0.999871
	
Anzel	O	O:0.996342
:	O	O:0.999979
thanks	O	O:0.999945
a	O	O:0.999997
lot	O	O:0.999387
for	O	O:0.999985
the	O	O:0.999774
answer	O	O:0.997871
.	O	O:0.999672
	
Unfortunately	O	O:0.999911
,	O	O:0.999996
I	O	O:0.999996
get	O	O:0.999984
the	O	O:0.999993
same	O	O:0.999932
output	O	O:0.999867
with	O	O:0.999928
"	O	O:0.999981
apply	O	B-API:0.849515
"	O	O:0.999509
.	O	O:0.998713
	
That	O	O:0.999203
is	O	O:0.999997
out	O	O:0.999908
of	O	O:0.999998
this	O	O:0.999713
question	O	O:0.999951
scope	O	O:0.999739
,	O	O:0.999975
but	O	O:0.999987
if	O	O:0.999991
you	O	O:0.999992
have	O	O:0.999985
mixed	O	O:0.999628
types	O	O:0.999695
both	O	O:0.999861
non-evaluate	O	O:0.999140
and	O	O:0.999986
evaluated	O	O:0.999922
,	O	O:0.999995
then	O	O:0.999918
do	O	O:0.999999
a	O	O:0.999998
map	O	B-API:0.918650
or	O	O:0.999992
apply	O	O:0.551635
with	O	O:0.999940
a	O	O:0.999674
function	O	O:0.999610
and	O	O:0.999992
perform	O	O:0.999855
a	O	O:0.999948
try	O	O:0.999488
/	O	O:0.999971
except	O	O:0.999981
then	O	O:0.999818
you	O	O:0.999998
should	O	O:0.999991
be	O	O:0.999998
good	O	O:0.999776
	
Andy	O	O:0.999244
,	O	O:0.999991
thanks	O	O:0.999854
a	O	O:0.999972
lot	O	O:0.998737
.	O	O:0.999836
	
literal_eval	O	O:0.867691
did	O	O:0.999908
solve	O	O:0.999758
the	O	O:0.999967
problem	O	O:0.998603
.	O	O:0.999840
	
I	O	O:0.999976
guess	O	O:0.999968
that	O	O:0.999872
,	O	O:0.999999
as	O	O:0.999999
a	O	O:0.999992
non	O	O:0.999168
expert	O	O:0.999936
,	O	O:0.999988
I	O	O:0.999997
still	O	O:0.999959
fight	O	O:0.999903
a	O	O:0.999996
bit	O	O:0.999634
with	O	O:0.999900
the	O	O:0.999976
notion	O	O:0.999934
of	O	O:0.999989
apply	O	B-API:0.581789
vs	O	O:0.999585
map	O	B-API:0.988614
.	O	O:0.999728
	
After	O	O:0.999619
filing	O	O:0.999612
the	O	O:0.999970
nans	O	O:0.999665
with	O	O:0.999897
strings	O	O:0.999639
(	O	O:0.999998
data	O	O:0.999955
[	O	O:0.999961
'	O	O:0.999994
organization	O	O:0.999905
']	O	O:0.999988
=	O	O:0.999941
data	O	O:0.999757
[	O	O:0.999941
'	O	O:0.999994
organization	O	O:0.999922
']	O	O:0.999881
.fillna	B-API	B-API:0.998120
(	O	O:0.999640
'	O	O:0.999907
[	O	O:0.999978
]')	O	O:0.999588
,	O	O:0.999981
both	O	O:0.999727
apply	O	B-API:0.750230
and	O	O:0.999859
map	O	B-API:0.826931
on	O	O:0.999823
literal_eval	O	O:0.871975
did	O	O:0.999978
the	O	O:0.999943
job	O	O:0.999614
.	O	O:0.999825
	
But	O	O:0.999964
when	O	O:0.999071
is	O	O:0.999997
one	O	O:0.999956
is	O	O:0.999994
one	O	O:0.999992
preferable	O	O:0.999852
to	O	O:0.999995
the	O	O:0.999999
other	O	O:0.999711
?	O	O:0.999954
	
btw	O	O:0.999919
,	O	O:0.999994
I	O	O:0.999994
know	O	O:0.999974
that	O	O:0.999356
map	O	B-API:0.797327
vs	O	O:0.999967
.	O	O:0.999947
apply	O	B-API:0.713696
is	O	O:0.999979
a	O	O:0.999950
complete	O	O:0.999755
different	O	O:0.999802
question	O	O:0.999565
,	O	O:0.999985
do	O	O:0.999937
not	O	O:0.999979
feel	O	O:0.999835
the	O	O:0.999997
need	O	O:0.999903
to	O	O:0.999989
reply	O	O:0.999991
it	O	O:0.999945
.	O	O:0.999917
	
I	O	O:0.999969
will	O	O:0.999992
some	O	O:0.999847
do	O	O:0.999997
some	O	O:0.999947
research	O	O:0.999632
on	O	O:0.999965
it	O	O:0.999971
.	O	O:0.999970
	
Fantastic	O	O:0.997143
!	O	O:0.999783
	
Thanks	O	O:0.999366
so	O	O:0.999964
much	O	O:0.998768
.	O	O:0.999926
	
Ironically	O	O:0.999677
,	O	O:0.999984
I	O	O:0.999951
had	O	O:0.999964
just	O	O:0.999622
been	O	O:0.999821
using	O	O:0.999941
indexed	O	O:0.999909
keys	O	O:0.999462
on	O	O:0.999991
a	O	O:0.999997
standard	O	O:0.999787
json	O	O:0.999682
import	O	O:0.999889
a	O	O:0.999993
little	O	O:0.995412
earlier	O	O:0.998780
,	O	O:0.999939
but	O	O:0.999802
hadn't	O	O:0.999484
thought	O	O:0.999747
to	O	O:0.999994
apply	O	O:0.959326
it	O	O:0.999941
to	O	O:0.999976
the	O	O:0.999999
pandas	O	O:0.999911
read	O	O:0.998099
:)	O	O:0.999865
	
I	O	O:0.999937
would	O	O:0.999996
like	O	O:0.999952
to	O	O:0.999998
filter	O	O:0.999521
`	O	O:0.999989
df1	O	O:0.996308
`	O	O:0.999998
keeping	O	O:0.999279
only	O	O:0.999970
the	O	O:0.999993
values	O	O:0.999649
that	O	O:0.999499
ARE	O	O:0.999993
NOT	O	O:0.999867
in	O	O:0.999962
`	O	O:0.999968
df2	O	O:0.993849
`	O	O:0.999979
.	O	O:0.999296
	
Values	O	O:0.999656
to	O	O:0.999966
filter	O	O:0.999404
are	O	O:0.999991
expected	O	O:0.999979
to	O	O:0.999998
be	O	O:1.000000
as	O	O:0.999984
`	O	O:0.999547
(	O	O:0.999794
A	O	O:0.999987
,	O	O:0.999987
b	O	O:0.999881
)`	O	O:0.999675
and	O	O:0.999837
`	O	O:0.999945
(	O	O:0.999597
C	O	O:0.999930
,	O	O:0.999996
a	O	O:0.999991
)`	O	O:0.999297
tuples	O	O:0.998262
.	O	O:0.999910
	
So	O	O:0.999963
far	O	O:0.999882
I	O	O:0.999994
tried	O	O:0.999944
to	O	O:0.999944
apply	O	O:0.931682
the	O	O:0.999736
`	O	O:0.999904
isin	B-API	B-API:0.999764
`	O	O:0.999956
method	O	O:0.997997
:	O	O:0.999978
#CODE	O	O:0.999874
	
You	O	O:0.999871
can	O	O:0.999992
also	O	O:0.999999
create	O	O:0.999995
a	O	O:0.999984
function	O	O:0.999939
to	O	O:0.999995
check	O	O:0.999999
your	O	O:0.999952
conditions	O	O:0.998251
,	O	O:0.999997
and	O	O:0.999997
apply	O	O:0.505083
to	O	O:0.999529
the	O	O:0.999991
dataframe	B-API	O:0.962322
:	O	O:0.999957
#CODE	O	O:0.999929
	
When	O	O:0.999823
using	O	O:0.999929
`	O	O:0.999908
DataFrame.apply	B-API	B-API:0.999816
`	O	O:0.999991
if	O	O:0.999939
you	O	O:0.999988
use	O	O:0.999909
`	O	O:0.999942
axis=0	O	O:0.983101
`	O	O:0.999994
it	O	O:0.999902
applies	O	O:0.999951
the	O	O:0.999972
condition	O	O:0.999804
through	O	O:0.999964
columns	O	O:0.999934
,	O	O:0.999998
to	O	O:0.999992
use	O	O:0.999994
`	O	O:0.999966
apply	O	B-API:0.975702
`	O	O:0.999986
to	O	O:0.999885
go	O	O:1.000000
through	O	O:0.999979
each	O	O:0.999763
row	O	O:0.999958
,	O	O:0.999996
you	O	O:0.999994
need	O	O:0.999944
`	O	O:0.999997
axis=1	O	O:0.995666
`	O	O:0.999980
.	O	O:0.999199
	
You	O	O:0.999829
can	O	O:0.999994
just	O	O:0.999997
set	O	O:0.999991
all	O	O:0.999995
the	O	O:0.999990
values	O	O:0.999650
that	O	O:0.999948
meet	O	O:0.999998
your	O	O:0.999993
criteria	O	O:0.999564
rather	O	O:0.999987
than	O	O:0.999979
looping	O	O:0.999906
over	O	O:0.999780
the	O	O:0.999981
df	O	O:0.999909
by	O	O:0.999980
calling	O	O:0.998959
`	O	O:0.999980
apply	O	B-API:0.972523
`	O	O:0.999974
so	O	O:0.999843
the	O	O:0.999989
following	O	O:0.998888
should	O	O:0.999811
work	O	O:0.999943
and	O	O:0.999999
as	O	O:0.999982
it's	O	O:0.998676
vectorised	O	O:0.999700
will	O	O:0.999844
scale	O	O:0.999811
better	O	O:0.999847
for	O	O:0.999987
larger	O	O:0.996530
datasets	O	O:0.994138
:	O	O:0.999874
#CODE	O	O:0.999865
	
this	O	O:0.999881
will	O	O:0.999971
set	O	O:0.999994
all	O	O:0.999999
rows	O	O:0.999921
that	O	O:0.999943
meet	O	O:0.999992
the	O	O:0.999996
criteria	O	O:0.999524
,	O	O:0.999997
the	O	O:0.999994
problem	O	O:0.999855
using	O	O:0.999859
`	O	O:0.999950
apply	O	B-API:0.993397
`	O	O:0.999657
is	O	O:0.999831
that	O	O:0.999765
it's	O	O:0.999978
just	O	O:0.999947
syntactic	O	O:0.999922
sugar	O	O:0.999815
for	O	O:0.999992
a	O	O:0.999978
`	O	O:0.999809
for	O	O:0.999164
`	O	O:0.999975
loop	O	O:0.995391
and	O	O:0.999998
where	O	O:0.999943
possible	O	O:0.999694
this	O	O:0.999956
should	O	O:0.999972
be	O	O:0.999997
avoided	O	O:0.999985
where	O	O:0.999911
a	O	O:0.999992
vectorised	O	O:0.999425
solution	O	O:0.999683
exists	O	O:0.999712
.	O	O:0.999935
	
I	O	O:0.999963
think	O	O:0.999973
this	O	O:0.999710
may	O	O:0.999993
be	O	O:0.999998
a	O	O:0.999996
bug	O	O:0.999407
in	O	O:0.999971
apply	O	B-API:0.819983
/	O	O:0.999809
map_infer	O	O:0.995661
,	O	O:0.999989
definitely	O	O:0.999872
worth	O	O:0.999910
a	O	O:0.999989
github	O	O:0.996725
issue	O	O:0.999410
.	O	O:0.999656
	
It	O	O:0.999960
seems	O	O:0.999941
strange	O	O:0.999887
to	O	O:0.999990
use	O	O:0.999998
a	O	O:0.999961
lambda	O	O:0.998719
that	O	O:0.999903
returns	O	O:0.999879
a	O	O:0.999995
Series	O	O:0.998949
in	O	O:0.999997
a	O	O:0.999994
transform	O	B-API:0.899048
!	O	O:0.999782
	
(	O	O:0.999838
Rather	O	O:0.999977
than	O	O:0.999746
use	O	O:0.999978
an	O	O:0.999916
apply	O	B-API:0.688965
.	O	O:0.999285
)	O	O:0.999844
	
I	O	O:0.999983
guess	O	O:0.999992
they	O	O:0.999650
use	O	O:0.999967
the	O	O:0.999927
same	O	O:0.999579
path	O	O:0.999665
,	O	O:0.999974
*	O	O:0.999990
but	O	O:0.999925
*	O	O:0.999994
tranform	O	O:0.999095
usually	O	O:0.999717
means	O	O:0.999955
that	O	O:0.999953
one	O	O:0.999998
value	O	O:0.999897
is	O	O:0.999994
spread	O	O:0.999114
on	O	O:0.999991
the	O	O:0.999985
group	O	O:0.977324
(	O	O:0.999985
e.g.	O	O:0.999635
transform	O	B-API:0.886259
(	O	O:0.999858
'	O	O:0.999985
min	O	O:0.846823
'))	O	O:0.999936
whereas	O	O:0.999643
apply	O	B-API:0.620335
means	O	O:0.999806
that	O	O:0.999844
the	O	O:0.999998
group	O	O:0.996987
can	O	O:0.999901
return	O	O:0.999956
anything	O	O:0.999834
.	O	O:0.999785
	
But	O	O:0.999825
y'know	O	O:0.995635
I'm	O	O:0.999954
not	O	O:0.999993
sure	O	O:0.999908
,	O	O:0.999997
that	O	O:0.999737
was	O	O:0.999981
my	O	O:0.999988
understanding	O	O:0.998304
.	O	O:0.999715
	
to	O	O:0.999949
which	O	O:0.999996
I	O	O:0.999995
apply	O	O:0.775281
pivot_table	B-API	B-API:0.999235
#CODE	O	O:0.997294
	
Bear	O	O:0.999262
in	O	O:0.999972
mind	O	O:0.999927
that	O	O:0.999845
groupby	B-API	B-API:0.914968
didn't	O	O:0.999912
really	O	O:0.999763
apply	O	B-API:0.572034
in	O	O:0.999972
your	O	O:0.999535
case	O	O:0.999576
and	O	O:0.999998
that	O	O:0.999916
it	O	O:0.999993
returns	O	O:0.999972
a	O	O:0.999893
`	O	O:0.999930
DataFrame	B-API	O:0.897180
`	O	O:0.999982
-ish	O	O:0.975764
object	O	O:0.999649
	
I'm	O	O:0.999932
looking	O	O:0.997356
for	O	O:0.999945
method	O	O:0.999792
,	O	O:0.999996
that	O	O:0.999995
iterates	O	O:0.999929
over	O	O:0.999982
the	O	O:0.999995
rows	O	O:0.997480
,	O	O:0.999982
but	O	O:0.999995
apply	O	O:0.512900
some	O	O:0.998212
method	O	O:0.999976
only	O	O:0.999896
for	O	O:0.999999
every	O	O:0.999887
20th	O	O:0.998790
or	O	O:0.999988
30th	O	O:0.999788
row	O	O:0.999952
values	O	O:0.998765
	
Actually	O	O:0.999791
I	O	O:0.999993
try	O	O:0.999995
to	O	O:0.999961
minimize	O	O:0.999989
the	O	O:0.999990
number	O	O:0.999952
of	O	O:0.999991
requests	O	O:0.999859
,	O	O:0.999999
cause	O	O:0.999966
otherwise	O	O:0.999984
I	O	O:0.999998
have	O	O:0.999986
the	O	O:0.999917
timeout	O	O:0.999759
issue	O	O:0.999541
.	O	O:0.999875
	
That's	O	O:0.999832
why	O	O:0.999957
I	O	O:0.999995
tried	O	O:0.999992
iterate	O	O:0.999337
over	O	O:0.999896
the	O	O:0.999993
rows	O	O:0.999009
,	O	O:0.999986
and	O	O:0.999998
apply	O	O:0.708592
the	O	O:0.999404
function	O	O:0.999731
of	O	O:0.999964
request	O	O:0.999966
only	O	O:0.999957
for	O	O:0.999998
every	O	O:0.999878
20th	O	O:0.998367
or	O	O:0.999992
60th	O	O:0.997756
row	O	O:0.999736
(	O	O:0.999992
cause	O	O:0.999845
I	O	O:0.999998
have	O	O:0.999981
7000	O	O:0.999939
rows	O	O:0.999518
)	O	O:0.999851
and	O	O:0.999996
not	O	O:0.999991
to	O	O:0.999985
speed	O	O:0.999985
the	O	O:0.999997
process	O	O:0.999860
by	O	O:0.999993
applying	O	O:0.999920
the	O	O:0.995844
time.sleep	O	O:0.808858
method	O	O:0.999715
	
then	O	O:0.999728
you	O	O:0.999998
can	O	O:0.999997
apply	O	O:0.980637
`	O	O:0.999972
mean()	B-API	B-API:0.965278
`	O	O:0.999990
to	O	O:0.999955
the	O	O:0.999998
series	O	O:0.998354
:	O	O:0.999962
#CODE	O	O:0.999942
	
Another	O	O:0.999886
way	O	O:0.999952
of	O	O:0.999982
doing	O	O:0.999936
this	O	O:0.999798
is	O	O:0.999981
to	O	O:0.999986
put	O	O:0.999994
your	O	O:0.999768
conversion	O	O:0.999753
logic	O	O:0.999983
in	O	O:0.999996
a	O	O:0.999933
function	O	O:0.999394
,	O	O:0.999979
and	O	O:0.999996
to	O	O:0.999983
apply	O	O:0.983723
this	O	O:0.999455
function	O	O:0.999960
over	O	O:0.999886
the	O	O:0.999969
column	O	O:0.999569
.	O	O:0.999907
	
#CODE	O	O:0.998453
	
You're	O	O:0.999904
looking	O	O:0.999600
for	O	O:0.999979
the	O	O:0.999871
`	O	O:0.999944
axis	O	O:0.996643
`	O	O:0.999988
parameter	O	O:0.999150
.	O	O:0.999921
	
Many	O	O:0.999838
Pandas	O	O:0.999843
functions	O	O:0.999887
take	O	O:0.999909
this	O	O:0.999956
argument	O	O:0.999982
to	O	O:0.999993
apply	O	O:0.990018
an	O	O:0.999957
operation	O	O:0.999760
across	O	O:0.999956
the	O	O:0.999997
columns	O	O:0.999918
or	O	O:0.999993
across	O	O:0.999985
the	O	O:0.999997
rows	O	O:0.998359
.	O	O:0.999870
	
Use	O	O:0.999636
`	O	O:0.999957
axis=0	O	O:0.991848
`	O	O:0.999993
to	O	O:0.999952
apply	O	O:0.975784
row-wise	O	O:0.980980
and	O	O:0.999861
`	O	O:0.999985
axis=1	O	O:0.965674
`	O	O:0.999993
to	O	O:0.999921
apply	O	O:0.971002
column-wise	O	O:0.988631
.	O	O:0.999611
	
This	O	O:0.999677
operation	O	O:0.999471
is	O	O:0.999993
actually	O	O:0.999955
traversing	O	O:0.999922
the	O	O:0.999964
columns	O	O:0.999856
,	O	O:0.999998
so	O	O:0.999997
you	O	O:0.999994
want	O	O:0.999967
`	O	O:0.999993
axis=1	O	O:0.993887
`	O	O:0.999980
.	O	O:0.999191
	
Problem	O	O:0.995748
:	O	O:0.999951
Given	O	O:0.999685
the	O	O:0.999996
dataframe	B-API	O:0.998790
below	O	O:0.999600
,	O	O:0.999992
I'm	O	O:0.999988
trying	O	O:0.999907
to	O	O:0.999999
come	O	O:0.999989
up	O	O:0.999985
with	O	O:0.999967
the	O	O:0.999983
code	O	O:0.999862
that	O	O:0.999972
will	O	O:0.999993
apply	O	O:0.985286
a	O	O:0.999900
function	O	O:0.998596
to	O	O:0.999996
three	O	O:0.999998
distinct	O	O:0.999927
columns	O	O:0.999726
without	O	O:0.999945
having	O	O:0.999704
to	O	O:0.999913
write	O	O:0.999995
three	O	O:0.999953
separate	O	O:0.999428
function	O	O:0.999854
calls	O	O:0.999228
.	O	O:0.999917
	
Then	O	O:0.999752
I	O	O:0.999998
apply	O	O:0.950509
the	O	O:0.998654
function	O	O:0.999618
to	O	O:0.999987
the	O	O:1.000000
particular	O	O:0.999805
column	O	O:0.999117
:	O	O:0.999986
#CODE	O	O:0.999892
	
This	O	O:0.999616
works	O	O:0.999979
exactly	O	O:0.999983
as	O	O:0.999984
I	O	O:0.999982
want	O	O:0.999963
it	O	O:0.999953
to	O	O:0.999993
for	O	O:1.000000
that	O	O:0.999935
one	O	O:0.999994
column	O	O:0.999920
.	O	O:0.999937
	
However	O	O:0.999854
,	O	O:0.999988
I	O	O:0.999994
don't	O	O:0.999987
want	O	O:0.999851
to	O	O:0.999998
have	O	O:0.999999
to	O	O:0.999993
rewrite	O	O:0.999998
this	O	O:0.999951
for	O	O:0.999999
each	O	O:0.999835
of	O	O:0.999975
the	O	O:0.999991
three	O	O:0.999959
different	O	O:0.999757
"	O	O:0.999983
spend	O	O:0.997681
"	O	O:0.999981
columns	O	O:0.997353
(	O	O:0.999973
30	O	O:0.999938
,	O	O:0.999967
90	O	O:0.999849
,	O	O:0.999978
365	O	O:0.999532
)	O	O:0.999956
.	O	O:0.999768
	
I	O	O:0.999988
want	O	O:0.999972
to	O	O:0.999936
be	O	O:1.000000
able	O	O:0.999987
to	O	O:0.999987
write	O	O:0.999991
code	O	O:0.999871
that	O	O:0.999969
will	O	O:0.999971
generalize	O	O:0.999792
and	O	O:0.999990
apply	O	O:0.899526
this	O	O:0.993983
function	O	O:0.999766
to	O	O:0.999997
multiple	O	O:0.999999
columns	O	O:0.999859
in	O	O:0.999996
one	O	O:0.999997
pass	O	O:0.995867
.	O	O:0.999913
	
The	O	O:0.999674
`	O	O:0.999982
lambda	O	O:0.993820
`	O	O:0.999995
will	O	O:0.999260
ensure	O	O:0.999977
that	O	O:0.999992
only	O	O:0.999989
one	O	O:0.999999
input	O	O:0.999983
parameter	O	O:0.999971
of	O	O:0.999998
your	O	O:0.999314
function	O	O:0.999768
is	O	O:0.999996
dangling	O	O:0.999202
free	O	O:0.999533
when	O	O:0.998170
it	O	O:0.999995
gets	O	O:0.999911
`	O	O:0.999992
apply	O	B-API:0.978710
`	O	O:0.999926
d	O	O:0.997246
.	O	O:0.999926
	
@USER	O	O:0.999688
sure	O	O:0.998458
:)	O	O:0.999793
The	O	O:0.999974
lambda	O	O:0.999614
can	O	O:0.999992
only	O	O:0.999996
use	O	O:0.999995
variables	O	O:0.998773
that	O	O:0.999920
are	O	O:0.999998
explicitly	O	O:0.999947
passed	O	O:0.999233
to	O	O:0.999975
it	O	O:1.000000
,	O	O:0.999998
so	O	O:0.999997
you	O	O:0.999997
pass	O	O:0.998909
`	O	O:0.999995
col	O	O:0.992153
`	O	O:0.999992
and	O	O:0.999727
`	O	O:0.999994
day	O	O:0.995515
`	O	O:0.999987
to	O	O:0.999874
it	O	O:0.999999
.	O	O:0.999931
	
It's	O	O:0.999945
a	O	O:0.999996
lazy	O	O:0.999516
thing	O	O:0.999944
to	O	O:0.999985
name	O	O:0.999999
the	O	O:0.999987
lambda's	O	O:0.999821
parameters	O	O:0.999821
this	O	O:0.999946
way	O	O:0.999988
,	O	O:0.999989
probably	O	O:0.999969
this	O	O:0.999873
would	O	O:0.999989
be	O	O:0.999993
clearer	O	O:0.999777
:	O	O:0.999884
`	O	O:0.999990
lambda	O	O:0.999563
var1	O	O:0.999376
,	O	O:0.999979
var2=col	O	O:0.997890
,	O	O:0.999986
var3	O	O:0.999526
=d	O	O:0.999847
ay	O	O:0.999596
:	O	O:0.999932
annualize_spend	O	O:0.992971
(	O	O:0.999987
var2	O	O:0.998878
,	O	O:0.999986
var3	O	O:0.998387
,	O	O:0.999983
var1	O	O:0.999282
)`	O	O:0.999596
.	O	O:0.999651
	
So	O	O:0.999980
you	O	O:0.999992
set	O	O:0.999987
default	O	O:0.999984
values	O	O:0.999552
for	O	O:0.999982
the	O	O:0.999953
*	O	O:0.999986
last	O	O:0.997720
*	O	O:0.999998
two	O	O:0.999997
parameters	O	O:0.999768
of	O	O:0.999990
the	O	O:0.999987
lambda	O	O:0.999721
,	O	O:0.999989
thereby	O	O:0.999858
effectively	O	O:0.999810
rendering	O	O:0.999854
it	O	O:0.999987
a	O	O:0.999996
single-input	O	O:0.992086
function	O	O:0.999904
for	O	O:0.999936
`	O	O:0.999968
apply	O	B-API:0.995088
`	O	O:0.999842
.	O	O:0.997762
	
Since	O	O:0.999794
these	O	O:0.999857
are	O	O:0.999998
just	O	O:0.999967
default	O	O:0.999972
values	O	O:0.999453
,	O	O:0.999987
the	O	O:0.999995
lambda	O	O:0.999077
could	O	O:0.999965
also	O	O:0.999997
work	O	O:0.999993
in	O	O:0.999999
a	O	O:0.999997
2	O	O:0.999712
or	O	O:0.999975
3-input	O	O:0.996798
syntax	O	O:0.999725
,	O	O:0.999973
but	O	O:0.999973
`	O	O:0.999988
apply	O	B-API:0.956865
`	O	O:0.999984
only	O	O:0.999466
uses	O	O:0.999980
a	O	O:0.999992
single	O	O:0.998802
variable	O	O:0.999938
,	O	O:0.999988
so	O	O:0.999988
it	O	O:0.999992
must	O	O:0.999995
have	O	O:0.999987
at	O	O:1.000000
most	O	O:0.999421
1	O	O:0.999953
non-default	O	O:0.997190
parameter	O	O:0.999225
.	O	O:0.999807
	
:	O	O:0.999802
Wow	O	O:0.999931
,	O	O:0.999996
thanks	O	O:0.999834
so	O	O:0.999994
much	O	O:0.999479
for	O	O:0.999993
the	O	O:0.999842
explanation	O	O:0.996754
.	O	O:0.999854
	
One	O	O:0.999898
more	O	O:0.990114
(	O	O:0.999990
general	O	O:0.999440
)	O	O:0.999921
question	O	O:0.996793
:	O	O:0.999992
why	O	O:0.999997
pass	O	O:0.999832
a	O	O:0.999996
lambda	O	O:0.999564
into	O	O:0.999622
the	O	O:0.999962
apply	O	B-API:0.971325
function	O	O:0.999789
instead	O	O:0.999957
of	O	O:0.999998
just	O	O:0.999925
the	O	O:0.999996
function	O	O:0.999879
itself	O	O:0.999531
?	O	O:0.999982
	
That	O	O:0.998541
is	O	O:0.999990
why	O	O:0.999868
df.apply	B-API	B-API:0.987834
(	O	O:0.999987
lambda	O	O:0.999537
row	O	O:0.999784
,	O	O:0.999984
col=col	O	O:0.999602
,	O	O:0.999993
day	O	O:0.999970
=d	O	O:0.999870
ay	O	O:0.999680
:	O	O:0.999931
annualize_spend	O	O:0.990098
(	O	O:0.999988
col	O	O:0.999635
,	O	O:0.999995
day	O	O:0.999970
,	O	O:0.999992
row	O	O:0.999934
)	O	O:0.999995
instead	O	O:0.999977
of	O	O:0.999999
just	O	O:0.999424
df.apply	B-API	B-API:0.895268
(	O	O:0.999959
annualize_spend	O	O:0.994947
)	O	O:0.999967
?	O	O:0.999878
	
What	O	O:0.999680
efficiency	O	O:0.999825
/	O	O:0.999985
value	O	O:0.999294
is	O	O:0.999978
gained	O	O:0.999647
from	O	O:0.999899
utilizing	O	O:0.999930
lambda	O	O:0.999704
functionality	O	O:0.999818
when	O	O:0.999573
the	O	O:0.999901
function	O	O:0.999889
has	O	O:0.999799
already	O	O:0.999955
been	O	O:0.999452
created	O	O:0.999459
?	O	O:0.999955
	
(	O	O:0.999950
I	O	O:0.999997
have	O	O:0.999973
seen	O	O:0.999726
this	O	O:0.999978
approach	O	O:0.999993
taken	O	O:0.998686
for	O	O:0.999994
much	O	O:0.999619
simpler	O	O:0.999348
functions	O	O:0.999639
,	O	O:0.999927
and	O	O:0.999978
was	O	O:0.999944
curious	O	O:0.999088
why	O	O:0.999975
invoking	O	O:0.999283
the	O	O:0.999940
lambda	O	O:0.998428
was	O	O:0.999963
necessary	O	O:0.999967
when	O	O:0.999951
the	O	O:0.999938
function	O	O:0.999840
had	O	O:0.999602
already	O	O:0.999940
been	O	O:0.999730
created	O	O:0.999509
)	O	O:0.999971
.	O	O:0.999755
	
Thanks	O	O:0.999469
again	O	O:0.999717
,	O	O:0.999998
most	O	O:0.999752
helpful	O	O:0.998381
!	O	O:0.999901
	
@USER	O	O:0.999086
try	O	O:0.999945
it	O	O:0.999980
without	O	O:0.999878
the	O	O:0.999962
lambda	O	O:0.995825
:)	O	O:0.999652
You	O	O:0.999798
should	O	O:0.999982
get	O	O:0.999993
an	O	O:0.999997
error	O	O:0.999969
that	O	O:0.999991
your	O	O:0.999643
function	O	O:0.999984
expects	O	O:0.999759
3	O	O:0.999948
arguments	O	O:0.999501
,	O	O:0.999975
and	O	O:0.999999
only	O	O:0.999884
1	O	O:0.999525
is	O	O:0.999987
specified	O	O:0.998313
,	O	O:0.999970
How	O	O:0.999898
should	O	O:0.999988
your	O	O:0.999908
function	O	O:0.999975
know	O	O:0.999956
what	O	O:0.999745
`	O	O:0.999985
col	O	O:0.991621
`	O	O:0.999992
and	O	O:0.999776
`	O	O:0.999996
day	O	O:0.995759
`	O	O:0.999983
are	O	O:0.999787
?	O	O:0.999982
	
The	O	O:0.999961
names	O	O:0.999513
in	O	O:0.999962
function	O	O:0.999970
definitions	O	O:0.999661
are	O	O:0.999988
quite	O	O:0.999971
arbitrary	O	O:0.999900
,	O	O:0.999983
as	O	O:0.999991
exemplified	O	O:0.999860
by	O	O:0.999995
my	O	O:0.999991
use	O	O:0.999905
of	O	O:0.999765
`	O	O:0.999976
lambda	O	O:0.999561
row	O	O:0.999903
,	O	O:0.999977
col=col	O	O:0.999474
,	O	O:0.999993
day	O	O:0.999969
=d	O	O:0.999874
ay	O	O:0.999130
:	O	O:0.999958
...	O	O:0.999509
	
`	O	O:0.999974
,	O	O:0.999980
so	O	O:0.999997
the	O	O:0.999997
name	O	O:0.999966
of	O	O:0.999998
the	O	O:0.999998
variables	O	O:0.999530
in	O	O:0.999987
the	O	O:0.999992
function's	O	O:0.999417
definition	O	O:0.999650
can't	O	O:0.999952
help	O	O:0.999741
in	O	O:0.999996
any	O	O:0.999897
way	O	O:0.999001
(	O	O:0.999968
it	O	O:0.999996
only	O	O:0.999933
helps	O	O:0.999936
the	O	O:0.999983
programmer	O	O:0.999408
)	O	O:0.999951
.	O	O:0.999888
	
So	O	O:0.999922
it's	O	O:0.999888
simply	O	O:0.999946
because	O	O:0.999962
`	O	O:0.999985
apply	O	B-API:0.972631
`	O	O:0.999972
expects	O	O:0.998407
a	O	O:0.999997
single-input	O	O:0.972730
function	O	O:0.999924
,	O	O:0.999980
which	O	O:0.999970
it	O	O:0.999998
then	O	O:0.999978
applies	O	O:0.999990
to	O	O:0.999990
the	O	O:0.999997
variable	O	O:0.999604
.	O	O:0.999877
	
Okay	O	O:0.999676
,	O	O:0.999987
I	O	O:0.999996
think	O	O:0.999909
I	O	O:0.999904
understand	O	O:0.999623
:	O	O:0.999961
the	O	O:0.999990
use	O	O:0.999982
of	O	O:0.999959
a	O	O:0.999983
multi-argument	O	O:0.996437
`	O	O:0.999981
lambda	O	O:0.994616
`	O	O:0.999965
is	O	O:0.999986
your	O	O:0.999966
way	O	O:0.999965
of	O	O:0.999990
getting	O	O:0.997515
around	O	O:0.999853
the	O	O:0.999943
single-argument	O	O:0.999155
constraint	O	O:0.999931
of	O	O:0.999986
`	O	O:0.999979
apply	O	B-API:0.973622
`	O	O:0.999850
.	O	O:0.997815
	
And	O	O:0.999988
this	O	O:0.999958
approach	O	O:0.999968
can	O	O:0.999954
be	O	O:0.999999
generalized	O	O:0.999965
when	O	O:0.999672
wanting	O	O:0.999977
to	O	O:0.999996
apply	O	O:0.847217
**	O	O:0.999964
any	O	O:0.999445
**	O	O:0.999992
multi-argument	O	O:0.994862
function	O	O:0.999901
with	O	O:0.999812
`	O	O:0.999989
apply	O	B-API:0.910465
`	O	O:0.999965
or	O	O:0.999526
`	O	O:0.999981
map	O	B-API:0.965191
`	O	O:0.999993
or	O	O:0.999822
`	O	O:0.999992
applymap	B-API	B-API:0.997177
`	O	O:0.999956
.	O	O:0.998881
	
That	O	O:0.998822
is	O	O:0.999985
,	O	O:0.999998
first	O	O:0.999985
explicitly	O	O:0.999902
create	O	O:0.998985
the	O	O:0.999992
multi-argument	O	O:0.993736
function	O	O:0.999714
.	O	O:0.999905
	
Then	O	O:0.999790
specify	O	O:0.999958
each	O	O:0.999907
argument	O	O:0.999803
in	O	O:0.999995
that	O	O:0.999840
function	O	O:0.999997
as	O	O:0.999999
a	O	O:0.999997
variable	O	O:0.999159
in	O	O:0.999968
the	O	O:0.999970
lambda	O	O:0.998340
.	O	O:0.999721
	
Finally	O	O:0.999842
,	O	O:0.999993
complete	O	O:0.999818
the	O	O:0.999993
lambda	O	O:0.999881
by	O	O:0.999977
calling	O	O:0.999375
the	O	O:0.999222
function	O	O:0.996072
(	O	O:0.999987
along	O	O:0.999901
with	O	O:0.999903
each	O	O:0.999145
argument	O	O:0.999918
)	O	O:0.999966
.	O	O:0.999783
	
Again	O	O:0.999163
,	O	O:0.999997
many	O	O:0.999919
thanks	O	O:0.998558
!	O	O:0.999922
	
I	O	O:0.999973
thought	O	O:0.999928
about	O	O:0.999864
using	O	O:0.999337
`	O	O:0.999778
iloc	B-API	B-API:0.999239
`	O	O:0.999974
`	O	O:0.999689
loc	O	B-API:0.984946
`	O	O:0.999948
but	O	O:0.997745
I'm	O	O:0.999977
not	O	O:0.999993
very	O	O:0.999927
strong	O	O:0.999524
with	O	O:0.999975
this	O	O:0.999906
methods	O	O:0.999952
,	O	O:0.999997
so	O	O:0.999996
if	O	O:0.999991
you	O	O:0.999992
know	O	O:0.999927
how	O	O:0.999991
better	O	O:0.999860
apply	O	O:0.991491
them	O	O:0.997377
to	O	O:0.999992
this	O	O:0.999997
case	O	O:0.999947
,	O	O:0.999998
it	O	O:0.999992
could	O	O:0.999978
be	O	O:0.999999
solution	O	O:0.999957
for	O	O:0.999988
my	O	O:0.999871
problem	O	O:0.997769
	
But	O	O:0.999974
when	O	O:0.999727
I	O	O:0.999992
try	O	O:0.999995
and	O	O:0.999882
use	O	O:0.999989
this	O	O:0.989262
function	O	O:0.999917
with	O	O:0.999683
apply	O	B-API:0.955021
:	O	O:0.999752
#CODE	O	O:0.999277
	
I'm	O	O:0.999853
not	O	O:0.999989
sure	O	O:0.999964
why	O	O:0.999990
you	O	O:0.999986
have	O	O:0.999998
this	O	O:0.999988
problem	O	O:0.999964
with	O	O:0.999928
`	O	O:0.999984
apply	O	B-API:0.960827
`	O	O:0.999822
,	O	O:0.999754
but	O	O:0.999981
you	O	O:0.999813
should	O	O:0.999984
not	O	O:0.999996
write	O	O:0.999988
the	O	O:0.999953
function	O	O:0.999986
like	O	O:0.999924
you	O	O:0.999993
did	O	O:0.999969
in	O	O:0.999995
the	O	O:0.999997
first	O	O:0.999916
place	O	O:0.999424
.	O	O:0.999941
	
Here	O	O:0.998773
is	O	O:0.999997
a	O	O:0.999974
suggestion	O	O:0.999375
that	O	O:0.999825
avoids	O	O:0.999963
dividing	O	O:0.999786
two	O	O:0.999957
huge	O	O:0.999878
numbers	O	O:0.999809
one	O	O:0.999996
by	O	O:0.999994
another	O	O:0.998575
:	O	O:0.999778
#CODE	O	O:0.999663
	
Is	O	O:0.999944
conversion	O	O:0.999512
in	O	O:0.999994
the	O	O:0.999986
`	O	O:0.999945
read_csv	B-API	B-API:0.999417
`	O	O:0.999958
is	O	O:0.999947
mandatory	O	O:0.999788
?	O	O:0.999946
	
Otherwise	O	O:0.999771
,	O	O:0.999996
passing	O	O:0.999931
a	O	O:0.999892
function	O	O:0.999358
which	O	O:0.999899
returns	O	O:0.998805
`	O	O:0.999983
Series	O	O:0.992706
`	O	O:0.999995
to	O	O:0.999837
`	O	O:1.000000
apply	O	B-API:0.869596
`	O	O:0.999975
results	O	O:0.999022
in	O	O:0.999943
`	O	O:0.999987
DataFrame	B-API	O:0.873593
`	O	O:0.999980
.	O	O:0.999613
	
#CODE	O	O:0.998453
	
You	O	O:0.999945
can	O	O:0.999973
construct	O	O:0.999973
the	O	O:0.999998
lists	O	O:0.998676
for	O	O:0.999984
each	O	O:0.998143
continent	O	O:0.999340
and	O	O:0.999988
`	O	O:0.999990
apply	O	B-API:0.991410
`	O	O:0.999981
a	O	O:0.999453
func	O	O:0.915425
:	O	O:0.999935
#CODE	O	O:0.999674
	
if	O	O:0.999959
I	O	O:0.999994
apply	O	O:0.796428
`	O	O:0.999202
.value_counts	B-API	B-API:0.995822
`	O	O:0.999996
directly	O	O:0.998893
to	O	O:0.999979
`	O	O:0.999997
groupby	B-API	B-API:0.998242
`	O	O:0.999989
as	O	O:0.999734
#CODE	O	O:0.999575
	
I	O	O:0.999983
have	O	O:0.999955
tried	O	O:0.999874
creating	O	O:0.999937
a	O	O:0.999975
new	O	O:0.995999
function	O	O:0.999821
and	O	O:0.999995
using	O	O:0.999810
`	O	O:0.998996
groupby	B-API	B-API:0.999957
`	O	O:0.999935
and	O	O:0.998991
`	O	O:0.999993
apply	O	B-API:0.996044
`	O	O:0.999672
,	O	O:0.999158
but	O	O:0.999993
this	O	O:0.999810
works	O	O:0.999992
only	O	O:0.999993
if	O	O:0.999999
rows	O	O:0.999762
are	O	O:0.999957
sorted	O	O:0.999796
.	O	O:0.999831
	
Also	O	O:0.999522
it's	O	O:0.999814
slow	O	O:0.998805
and	O	O:0.999994
ugly	O	O:0.998862
.	O	O:0.999454
	
#CODE	O	O:0.998453
	
Not	O	O:0.999982
sure	O	O:0.999938
about	O	O:0.999848
efficiently	O	O:0.999206
but	O	O:0.999990
a	O	O:0.999872
cleaner	O	O:0.997349
method	O	O:0.999893
is	O	O:0.999983
to	O	O:0.999988
call	O	O:0.999836
`	O	O:0.999989
apply	O	B-API:0.998461
`	O	O:0.999903
and	O	O:0.999932
pass	O	O:0.999112
`'	O	O:0.999702
,	O	O:0.999930
'	O	O:0.999970
,	O	O:0.999997
join	O	B-API:0.568405
`	O	O:0.999994
as	O	O:0.999983
the	O	O:0.999991
func	O	O:0.994321
to	O	O:0.999946
call	O	O:0.998410
:	O	O:0.999980
#CODE	O	O:0.998709
	
@USER	O	O:0.997634
:	O	O:0.999946
I	O	O:0.999989
tried	O	O:0.999963
it	O	O:0.999943
with	O	O:0.999950
column	O	O:0.999945
name	O	O:0.999989
also	O	O:0.999716
,	O	O:0.999995
but	O	O:0.999908
it	O	O:0.999813
did	O	O:0.999927
not	O	O:0.999984
help	O	O:0.999237
.	O	O:0.999927
	
My	O	O:0.999922
dataframe	B-API	O:0.997826
contains	O	O:0.999745
one	O	O:0.999997
column	O	O:0.999810
which	O	O:0.999991
consists	O	O:0.999967
of	O	O:0.999994
sentences	O	O:0.998793
.	O	O:0.999938
	
When	O	O:0.998936
i	O	O:0.999979
try	O	O:0.999990
to	O	O:0.999996
apply	O	O:0.982681
drop_duplicates()	B-API	B-API:0.998811
on	O	O:0.999985
a	O	O:0.999995
column	O	O:0.999949
containing	O	O:0.999847
1	O	O:0.999980
or	O	O:0.999975
2	O	O:0.999959
words	O	O:0.999873
,	O	O:0.999983
if	O	O:0.999971
works	O	O:0.999911
fine	O	O:0.999597
.	O	O:0.999913
	
But	O	O:0.999882
not	O	O:0.999982
when	O	O:0.999903
it	O	O:0.999998
come	O	O:0.999984
to	O	O:0.999995
sentences	O	O:0.999940
.	O	O:0.999893
	
Anything	O	O:0.999924
that	O	O:0.999885
can	O	O:0.999991
be	O	O:1.000000
done	O	O:0.999919
?	O	O:0.999904
	
@USER	O	O:0.997634
:	O	O:0.999946
I	O	O:0.999989
tried	O	O:0.999963
it	O	O:0.999943
with	O	O:0.999950
column	O	O:0.999945
name	O	O:0.999989
also	O	O:0.999716
,	O	O:0.999995
but	O	O:0.999908
it	O	O:0.999813
did	O	O:0.999927
not	O	O:0.999984
help	O	O:0.999237
.	O	O:0.999927
	
My	O	O:0.999922
dataframe	B-API	O:0.997826
contains	O	O:0.999745
one	O	O:0.999997
column	O	O:0.999810
which	O	O:0.999991
consists	O	O:0.999967
of	O	O:0.999994
sentences	O	O:0.998793
.	O	O:0.999938
	
When	O	O:0.998936
i	O	O:0.999979
try	O	O:0.999990
to	O	O:0.999996
apply	O	O:0.982681
drop_duplicates()	B-API	B-API:0.998811
on	O	O:0.999985
a	O	O:0.999995
column	O	O:0.999949
containing	O	O:0.999847
1	O	O:0.999980
or	O	O:0.999973
2	O	O:0.999951
words	O	O:0.999925
,	O	O:0.999995
or	O	O:0.999998
on	O	O:0.999998
a	O	O:0.999997
smaller	O	O:0.999887
sample	O	O:0.999821
of	O	O:0.999978
comments	O	O:0.999587
,	O	O:0.999995
if	O	O:0.999940
works	O	O:0.999905
fine	O	O:0.999591
.	O	O:0.999913
	
But	O	O:0.999882
not	O	O:0.999982
when	O	O:0.999931
it	O	O:0.999999
come	O	O:0.999968
to	O	O:0.999998
the	O	O:1.000000
entire	O	O:0.999439
dataset	O	O:0.999803
(	O	O:0.999994
about	O	O:0.999984
300	O	O:0.999970
rows	O	O:0.998647
)	O	O:0.999976
,	O	O:0.999993
it	O	O:0.999973
does	O	O:0.999700
not	O	O:0.999989
work	O	O:0.999949
.	O	O:0.999966
	
Anything	O	O:0.999924
that	O	O:0.999885
can	O	O:0.999991
be	O	O:1.000000
done	O	O:0.999919
?	O	O:0.999904
	
The	O	O:0.999954
problem	O	O:0.999685
I	O	O:0.999988
am	O	O:0.999997
running	O	O:0.997807
in	O	O:0.999972
to	O	O:0.999943
is	O	O:0.999998
`	O	O:0.999974
df.loc	B-API	B-API:0.988495
`	O	O:0.999958
is	O	O:0.999846
running	O	O:0.999761
pretty	O	O:0.999714
slow	O	O:0.999503
on	O	O:0.999986
large	O	O:0.999686
DataFrames	O	O:0.995664
(	O	O:0.999923
2-7	O	O:0.999979
million	O	O:0.999951
rows	O	O:0.999337
)	O	O:0.999966
.	O	O:0.999931
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999996
way	O	O:0.999904
to	O	O:0.999994
speed	O	O:0.999952
up	O	O:0.999995
this	O	O:0.999843
operation	O	O:0.999853
?	O	O:0.999962
	
I've	O	O:0.998815
looked	O	O:0.999798
into	O	O:0.998769
`	O	O:0.999961
eval()	B-API	B-API:0.999718
`	O	O:0.999939
,	O	O:0.999815
but	O	O:0.999978
it	O	O:0.999939
doesn't	O	O:0.999968
seem	O	O:0.999956
to	O	O:0.999998
apply	O	O:0.971262
to	O	O:0.999943
hard-coded	O	O:0.999991
lists	O	O:0.999177
of	O	O:0.999988
index	O	O:0.999957
values	O	O:0.999944
like	O	O:0.999974
this	O	O:0.999953
.	O	O:0.999947
	
I	O	O:0.999988
have	O	O:0.999988
also	O	O:0.999868
thought	O	O:0.999985
about	O	O:0.999946
using	O	O:0.999121
`	O	O:0.999759
pd.DataFrame.isin	B-API	B-API:0.996749
`	O	O:0.999969
,	O	O:0.999920
but	O	O:0.999995
that	O	O:0.999820
misses	O	O:0.999981
the	O	O:0.999998
repeat	O	O:0.989086
values	O	O:0.995743
(	O	O:0.999995
only	O	O:0.999989
returns	O	O:0.999986
a	O	O:0.999991
row	O	O:0.999705
per	O	O:0.999945
unique	O	O:0.851026
element	O	O:0.999605
in	O	O:0.999927
`	O	O:0.999995
selection	O	O:0.998995
`)	O	O:0.999987
.	O	O:0.999657
	
I	O	O:0.999989
want	O	O:0.999982
to	O	O:0.999921
use	O	O:1.000000
a	O	O:0.999834
function	O	O:0.999877
from	O	O:0.999961
an	O	O:0.999983
add-in	O	O:0.999814
in	O	O:0.999971
excel	O	O:0.999218
and	O	O:0.999993
apply	O	O:0.599307
it	O	O:0.999708
to	O	O:0.999998
some	O	O:0.999999
data	O	O:0.999974
i	O	O:0.999996
have	O	O:0.999990
simulated	O	O:0.999660
in	O	O:0.999980
python	O	O:0.999427
.	O	O:0.999937
	
Is	O	O:0.999976
there	O	O:0.999987
any	O	O:0.999983
modules	O	O:0.999913
that	O	O:0.999834
can	O	O:0.999989
achieve	O	O:0.999998
this	O	O:0.999927
?	O	O:0.999972
	
Unfortunately	O	O:0.999524
,	O	O:0.999998
this	O	O:0.999983
only	O	O:0.999964
runs	O	O:0.999971
a	O	O:0.999994
macro	O	O:0.997806
.	O	O:0.999895
	
I	O	O:0.999989
need	O	O:0.999980
to	O	O:0.999980
be	O	O:1.000000
able	O	O:0.999987
to	O	O:0.999988
call	O	O:0.999904
the	O	O:0.999947
add-in	O	O:0.995957
and	O	O:0.999992
apply	O	O:0.940487
my	O	O:0.999935
data	O	O:0.999814
indexes	O	O:0.999589
there	O	O:0.999965
...	O	O:0.999984
something	O	O:0.999919
along	O	O:0.999861
these	O	O:0.999725
lines	O	O:0.995198
:	O	O:0.999952
=	O	O:0.999955
add-in_name	O	O:0.999303
(	O	O:0.999978
data_range1	O	O:0.998977
,	O	O:0.999993
data_range2	O	O:0.999161
,	O	O:0.999963
"	O	O:0.999994
GGCV	O	O:0.996927
")	O	O:0.999845
	
To	O	O:0.999977
take	O	O:0.999991
this	O	O:0.999979
further	O	O:0.999902
,	O	O:0.999997
you	O	O:0.999987
could	O	O:0.999971
use	O	O:0.999997
an	O	O:0.999923
[	O	O:0.999979
apply	O	O:0.511645
]	O	O:0.993889
(	O	O:0.999748
#URL	O	O:0.999755
)	O	O:0.999987
combined	O	O:0.999442
with	O	O:0.999994
a	O	O:0.999947
function	O	O:0.999952
to	O	O:0.999998
carry	O	O:0.999980
out	O	O:0.999986
the	O	O:0.999983
logic	O	O:0.999935
to	O	O:0.999984
remove	O	O:0.999893
the	O	O:0.999988
loop	O	O:0.999735
entirely	O	O:0.999614
.	O	O:0.999918
	
This	O	O:0.999544
would	O	O:0.999977
make	O	O:0.999977
the	O	O:0.999999
code	O	O:0.999924
a	O	O:0.999989
lot	O	O:0.999883
more	O	O:0.999688
portable	O	O:0.991964
(	O	O:0.999961
and	O	O:0.999995
hopefully	O	O:0.999897
efficient	O	O:0.999247
)	O	O:0.999986
and	O	O:0.999986
allow	O	O:0.999854
the	O	O:0.999865
output	O	O:0.999250
to	O	O:0.999995
also	O	O:0.999999
be	O	O:0.999999
a	O	O:0.999995
pandas	O	O:0.997834
object	O	O:0.999887
without	O	O:0.999481
any	O	O:0.999661
conversion	O	O:0.997163
.	O	O:0.999850
	
You	O	O:0.999891
can	O	O:0.999991
then	O	O:0.999993
apply	O	O:0.935071
`	O	O:0.999951
np.where	B-API	B-API:0.996085
`	O	O:0.999997
as	O	O:0.999961
you	O	O:0.999966
did	O	O:0.999979
to	O	O:0.999997
find	O	O:0.999997
the	O	O:0.999996
indices	O	O:0.999775
where	O	O:0.999995
your	O	O:0.999938
condition	O	O:0.999738
is	O	O:0.999986
fulfilled	O	O:0.996149
:	O	O:0.999956
#CODE	O	O:0.999745
	
When	O	O:0.999772
you	O	O:0.999980
use	O	O:0.999981
`	O	O:0.999964
apply	O	B-API:0.990728
`	O	O:0.999919
,	O	O:0.999845
it	O	O:0.999991
calls	O	O:0.999969
your	O	O:0.999858
function	O	O:0.999944
once	O	O:0.999930
for	O	O:0.999998
each	O	O:0.999852
column	O	O:0.999821
,	O	O:0.999997
with	O	O:0.999986
that	O	O:0.999979
column	O	O:0.999996
as	O	O:0.999999
an	O	O:0.999911
argument	O	O:0.999733
.	O	O:0.999701
	
So	O	O:0.999793
`	O	O:0.999992
x	O	O:0.999221
`	O	O:0.999991
in	O	O:0.999992
your	O	O:0.999965
NewCols	O	O:0.999570
will	O	O:0.999973
be	O	O:0.999999
set	O	O:0.999976
to	O	O:0.999997
a	O	O:1.000000
single	O	O:0.999343
column	O	O:0.999876
.	O	O:0.999929
	
When	O	O:0.999741
you	O	O:0.999991
do	O	O:0.999980
`	O	O:0.999996
x	O	O:0.998453
[	O	O:0.999996
string	O	O:0.999875
]	O	O:0.999757
=	O	O:0.999725
list.count	O	O:0.982284
(	O	O:0.999965
string	O	O:0.999916
)`	O	O:0.999846
,	O	O:0.999988
you	O	O:0.999973
are	O	O:0.999999
adding	O	O:0.999981
values	O	O:0.999102
to	O	O:0.999992
that	O	O:0.999999
column	O	O:0.999936
.	O	O:0.999973
	
Since	O	O:0.999559
`	O	O:0.999985
apply	O	B-API:0.967085
`	O	O:0.999708
is	O	O:0.999866
called	O	O:0.999235
for	O	O:0.999994
each	O	O:0.998994
column	O	O:0.999767
,	O	O:0.999997
you	O	O:0.999994
wind	O	O:0.999856
up	O	O:0.999994
appending	O	O:0.999979
the	O	O:0.999963
values	O	O:0.998604
to	O	O:0.999995
both	O	O:1.000000
columns	O	O:0.999831
in	O	O:0.999997
this	O	O:0.999940
way	O	O:0.999928
.	O	O:0.999843
	
`	O	O:0.999955
apply	O	B-API:0.976985
`	O	O:0.999499
is	O	O:0.999706
not	O	O:0.999984
the	O	O:0.999996
right	O	O:0.999788
choice	O	O:0.999938
when	O	O:0.999991
your	O	O:0.999954
computation	O	O:0.999982
depends	O	O:0.999990
only	O	O:0.999930
on	O	O:0.999998
the	O	O:0.999998
values	O	O:0.999938
of	O	O:0.999997
a	O	O:0.999999
single	O	O:0.999791
column	O	O:0.999806
.	O	O:0.999889
	
Instead	O	O:0.999844
,	O	O:0.999985
use	O	O:0.999931
`	O	O:0.999726
map	O	B-API:0.997250
`	O	O:0.999978
.	O	O:0.999332
	
In	O	O:0.999984
this	O	O:0.999970
case	O	O:0.999952
,	O	O:0.999999
what	O	O:0.999946
you	O	O:0.999994
need	O	O:0.999994
to	O	O:0.999998
do	O	O:0.999996
is	O	O:0.999995
write	O	O:0.999695
a	O	O:0.999995
NewCol	O	O:0.979325
function	O	O:0.999960
that	O	O:0.999903
accepts	O	O:0.999992
a	O	O:0.999998
single	O	O:0.996338
`	O	O:0.999979
Column2	O	O:0.981000
`	O	O:0.999994
value	O	O:0.998985
and	O	O:0.999989
returns	O	O:0.999938
the	O	O:0.999981
data	O	O:0.999891
for	O	O:0.999997
a	O	O:0.999999
single	O	O:0.997147
row	O	O:0.999836
.	O	O:0.999766
	
You	O	O:0.999809
can	O	O:0.999917
return	O	O:0.999991
this	O	O:0.999979
as	O	O:0.999998
a	O	O:0.999990
dict	O	O:0.999649
,	O	O:0.999993
or	O	O:0.999996
,	O	O:0.999990
handily	O	O:0.999901
,	O	O:0.999998
a	O	O:0.999981
dict-like	O	O:0.999389
object	O	O:0.999984
such	O	O:0.999981
as	O	O:0.999999
a	O	O:0.999804
`	O	O:0.999855
collections.Counter	O	O:0.574558
`	O	O:0.999980
.	O	O:0.999265
	
Then	O	O:0.999706
you	O	O:0.999998
need	O	O:0.999993
to	O	O:0.999997
wrap	O	O:0.999996
this	O	O:0.999986
new	O	O:0.999989
row	O	O:0.999994
data	O	O:0.999971
into	O	O:0.999859
a	O	O:0.999987
DataFrame	B-API	O:0.913696
and	O	O:0.999972
attach	O	O:0.999582
it	O	O:0.999933
column-wise	O	O:0.999127
to	O	O:0.999999
your	O	O:0.999999
existing	O	O:0.999961
data	O	O:0.999987
using	O	O:0.999931
`	O	O:0.999908
concat	O	B-API:0.999404
`	O	O:0.999971
.	O	O:0.999307
	
Here	O	O:0.998543
is	O	O:0.999984
an	O	O:0.999914
example	O	O:0.998380
:	O	O:0.999942
#CODE	O	O:0.999849
	
Pandas	O	O:0.998908
Dataframe	B-API	O:0.980743
-	O	O:0.999969
faster	O	O:0.999716
apply	O	O:0.507942
?	O	O:0.999268
	
You	O	O:0.999756
should	O	O:0.999903
avoid	O	O:0.999629
`	O	O:0.999992
apply	O	B-API:0.993824
`	O	O:0.999929
and	O	O:0.999749
use	O	O:0.999947
`	O	O:0.999092
to_datetime	B-API	B-API:0.999810
`	O	O:0.999966
:	O	O:0.999675
`	O	O:0.999998
df	O	O:0.999303
[	O	O:0.999966
'	O	O:0.999979
local_time	O	O:0.998985
']	O	O:0.999957
=	O	O:0.998567
pd.to_datetime	B-API	B-API:0.993401
(	O	O:0.999960
df	O	O:0.999673
[	O	O:0.999891
'	O	O:0.999969
local_time	O	O:0.999052
'])`	O	O:0.999226
	
I	O	O:0.999962
could	O	O:0.999948
do	O	O:0.999973
it	O	O:0.999998
using	O	O:0.999817
apply	O	B-API:0.945461
and	O	O:0.999924
a	O	O:0.999944
for	O	O:0.998851
loop	O	O:0.994739
(	O	O:0.999969
see	O	O:0.999976
below	O	O:0.999522
)	O	O:0.999964
,	O	O:0.999903
but	O	O:0.999974
it	O	O:0.999870
is	O	O:0.999994
pretty	O	O:0.999342
clunky	O	O:0.999162
.	O	O:0.999837
	
Is	O	O:0.999985
there	O	O:0.999986
a	O	O:0.999993
better	O	O:0.998487
way	O	O:0.999910
?	O	O:0.999879
	
#CODE	O	O:0.998453
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999991
`	O	O:0.999970
apply	O	B-API:0.992021
`	O	O:0.999947
and	O	O:0.999662
use	O	O:0.999978
the	O	O:0.999656
column's	O	O:0.999509
`	O	O:0.999990
name	O	O:0.999262
`	O	O:0.999998
attribute	O	O:0.999970
to	O	O:0.999994
get	O	O:0.999997
the	O	O:0.999994
key	O	O:0.999961
for	O	O:0.999990
the	O	O:0.999952
outer	O	B-API:0.525485
dictionary	O	O:0.997743
:	O	O:0.999934
#CODE	O	O:0.999866
	
IIUC	O	O:0.999462
correctly	O	O:0.999984
then	O	O:0.999952
you	O	O:0.999997
use	O	O:0.999990
`	O	O:0.999982
apply	O	B-API:0.979642
`	O	O:0.999982
with	O	O:0.999796
a	O	O:0.999987
`	O	O:0.999960
lambda	O	O:0.975996
`	O	O:0.999922
:	O	O:0.999556
#CODE	O	O:0.999909
	
Didn't	O	O:0.999807
know	O	O:0.999781
I	O	O:0.999992
can	O	O:0.999959
use	O	O:0.999963
apply	O	B-API:0.927324
and	O	O:0.999699
axis=1	O	O:0.998301
,	O	O:0.999920
thanks	O	O:0.997854
!	O	O:0.999818
	
Should	O	O:0.999446
the	O	O:0.999982
DataFrame	B-API	O:0.996731
be	O	O:0.999991
used	O	O:0.999842
in	O	O:0.999986
this	O	O:0.999811
way	O	O:0.999954
?	O	O:0.999931
	
I	O	O:0.999978
know	O	O:0.999961
that	O	O:0.999706
dtype	B-API	B-API:0.970283
object	O	O:0.999902
can	O	O:0.999729
be	O	O:1.000000
ultra	O	O:0.999965
slow	O	O:0.997635
for	O	O:0.999961
sorting	O	O:0.993792
and	O	O:0.999884
whatnot	O	O:0.999229
,	O	O:0.999921
but	O	O:0.999983
I	O	O:0.999985
am	O	O:0.999998
really	O	O:0.999890
just	O	O:0.999960
using	O	O:0.999964
the	O	O:0.999922
dataframe	B-API	O:0.998084
a	O	O:0.999991
convenient	O	O:0.999448
container	O	O:0.999970
because	O	O:0.999964
the	O	O:0.999990
column	O	O:0.999288
/	O	O:0.999904
index	O	O:0.999799
notation	O	O:0.999628
is	O	O:0.999997
quite	O	O:0.999685
slick	O	O:0.999128
.	O	O:0.999801
	
If	O	O:0.999921
DataFrames	O	O:0.995253
should	O	O:0.999911
not	O	O:0.999995
be	O	O:0.999999
used	O	O:0.999772
in	O	O:0.999982
this	O	O:0.999892
way	O	O:0.999825
is	O	O:0.999995
there	O	O:0.999906
similar	O	O:0.999892
alternative	O	O:0.999843
?	O	O:0.999886
	
I	O	O:0.999888
was	O	O:0.999989
looking	O	O:0.999313
at	O	O:0.999955
the	O	O:0.999929
Panel	O	O:0.999775
class	O	O:0.999797
but	O	O:0.999982
I	O	O:0.999976
am	O	O:0.999991
not	O	O:0.999952
sure	O	O:0.999956
if	O	O:0.999992
it	O	O:0.999942
is	O	O:0.999993
the	O	O:0.999988
proper	O	O:0.999704
solution	O	O:0.999638
for	O	O:0.999990
my	O	O:0.999845
application	O	O:0.999277
.	O	O:0.999850
	
I	O	O:0.999909
would	O	O:0.999982
hate	O	O:0.999735
forge	O	O:0.999909
ahead	O	O:0.999692
and	O	O:0.999978
apply	O	B-API:0.583766
the	O	O:0.999615
hack	O	O:0.999518
shown	O	O:0.999859
above	O	O:0.999972
to	O	O:0.999997
some	O	O:0.999992
code	O	O:0.999665
and	O	O:0.999999
then	O	O:0.999965
have	O	O:0.999926
it	O	O:0.999996
not	O	O:0.999994
supported	O	O:0.999939
in	O	O:0.999981
future	O	O:0.999942
releases	O	O:0.999848
of	O	O:0.999978
pandas	O	O:0.999299
.	O	O:0.999964
	
You	O	O:0.999938
can	O	O:0.999987
create	O	O:0.999983
a	O	O:1.000000
list	O	O:0.999126
of	O	O:0.999994
column	O	O:0.999815
names	O	O:0.999919
and	O	O:0.999999
then	O	O:0.999954
iterate	O	O:0.999898
through	O	O:0.999987
them	O	O:0.999314
and	O	O:0.999994
apply	O	O:0.932675
your	O	O:0.996517
logic	O	O:0.998626
for	O	O:0.999997
them	O	O:0.996733
.	O	O:0.999814
	
Example	O	O:0.997704
-	O	O:0.999952
#CODE	O	O:0.999568
	
Melt	B-API	O:0.925634
the	O	O:0.999989
data	O	O:0.999944
frame	O	O:0.999997
,	O	O:1.000000
then	O	O:0.999937
apply	O	O:0.912813
the	O	O:0.999966
repalce	O	O:0.990934
and	O	O:0.999989
to	O	O:0.999994
lower	O	O:0.999323
function	O	O:0.999607
.	O	O:0.999801
	
Pivot	B-API	O:0.964906
the	O	O:0.999985
data	O	O:0.999967
frame	O	O:0.999999
to	O	O:0.999999
get	O	O:0.999999
back	O	O:0.999370
	
Firstly	O	O:0.999882
column	O	O:0.999782
`	O	O:0.999995
week	O	O:0.997070
`	O	O:0.999989
is	O	O:0.999981
set	O	O:0.998851
to	O	O:0.999974
index	O	O:0.999968
.	O	O:0.999882
	
Then	O	O:0.999669
df	O	O:0.999775
is	O	O:0.999996
grouped	O	O:0.999582
by	O	O:0.999991
column	O	O:0.999705
`	O	O:0.999961
product	O	O:0.992943
`	O	O:0.999987
and	O	O:0.999981
apply	O	O:0.856945
reindex	O	B-API:0.976186
by	O	O:0.999748
max	O	O:0.936870
values	O	O:0.997596
of	O	O:0.999992
index	O	O:0.999967
of	O	O:0.999996
each	O	O:0.999701
group	O	O:0.998387
.	O	O:0.999909
	
Missing	O	O:0.999144
values	O	O:0.998374
are	O	O:0.999978
filled	O	O:0.999959
by	O	O:0.999967
`	O	O:0.999961
0	O	O:0.992733
`	O	O:0.999981
.	O	O:0.999067
	
#CODE	O	O:0.998453
	
Apply	O	O:0.997795
function	O	O:0.999832
with	O	O:0.999931
args	O	O:0.998956
in	O	O:0.999987
pandas	O	O:0.999449
	
You	O	O:0.999843
can	O	O:0.999988
then	O	O:0.999987
apply	O	O:0.989226
it	O	O:0.999905
straightforwardly	O	O:0.991982
:	O	O:0.999969
#CODE	O	O:0.999724
	
The	O	O:0.999901
strange	O	O:0.999600
thing	O	O:0.999542
is	O	O:0.999987
that	O	O:0.999951
when	O	O:0.999964
I	O	O:0.999998
apply	O	O:0.982367
this	O	O:0.996444
logic	O	O:0.999849
to	O	O:0.999997
a	O	O:0.999999
bigger	O	O:0.999750
table	O	O:0.999965
that	O	O:0.999854
im	O	O:0.999997
working	O	O:0.999886
on	O	O:0.999990
,	O	O:0.999997
I	O	O:0.999999
get	O	O:0.999996
a	O	O:0.999914
"	O	O:0.999959
True	O	O:0.999165
"	O	O:0.999974
for	O	O:0.999909
all	O	O:0.999939
boolean	O	O:0.999037
values	O	O:0.999675
,	O	O:0.999989
despite	O	O:0.999937
me	O	O:0.999947
having	O	O:0.999920
different	O	O:0.999481
"	O	O:0.999981
time	O	O:0.999501
"	O	O:0.999988
-columns	O	O:0.994810
and	O	O:0.999989
the	O	O:0.999991
same	O	O:0.999408
ID-number	O	O:0.998988
?	O	O:0.999958
	
Do	O	O:0.999965
you	O	O:0.999990
know	O	O:0.999945
if	O	O:0.999998
there	O	O:0.999916
are	O	O:0.999998
any	O	O:0.999994
cases	O	O:0.999733
where	O	O:0.999904
the	O	O:0.999968
boolean	O	O:0.998798
expression	O	O:0.999855
isnt	O	O:0.999955
evaluated	O	O:0.999983
over	O	O:0.999799
all	O	O:0.999962
three	O	O:0.999878
included	O	O:0.999800
colums	O	O:0.999744
,	O	O:0.999994
so	O	O:0.999993
it	O	O:0.999994
only	O	O:0.999988
looks	O	O:0.999985
on	O	O:0.999994
the	O	O:0.999994
first	O	O:0.999883
column	O	O:0.998952
(	O	O:0.999983
"	O	O:0.999989
id	O	O:0.998818
")	O	O:0.999797
	
IIUC	O	O:0.999739
then	O	O:0.999839
you	O	O:0.999991
`	O	O:0.999997
groupby	B-API	B-API:0.995501
`	O	O:0.999996
on	O	O:0.999663
`	O	O:0.999996
level=0	O	O:0.997020
`	O	O:0.999994
of	O	O:0.999944
your	O	O:0.999745
index	O	O:0.999739
and	O	O:0.999989
`	O	O:0.999994
apply	O	B-API:0.989377
`	O	O:0.999991
a	O	O:0.998572
`	O	O:0.999979
lambda	O	O:0.994887
`	O	O:0.999994
to	O	O:0.999652
`	O	O:1.000000
join	O	B-API:0.992766
`	O	O:0.999998
the	O	O:0.999897
values	O	O:0.995289
:	O	O:0.999930
#CODE	O	O:0.999929
	
One	O	O:0.999845
way	O	O:0.999840
would	O	O:0.999964
be	O	O:0.999998
to	O	O:0.999997
use	O	O:0.999986
`	O	O:0.999947
apply	O	B-API:0.972818
`	O	O:0.999983
by	O	O:0.999784
constructing	O	O:0.999821
column	O	O:0.999794
name	O	O:0.999951
for	O	O:0.999996
each	O	O:0.999593
row	O	O:0.999951
based	O	O:0.999893
on	O	O:0.999993
year	O	O:0.999614
like	O	O:0.999954
`'	O	O:0.999962
w	O	O:0.999730
'	O	O:0.999900
+	O	O:0.999930
str	O	O:0.992677
(	O	O:0.999966
x.year	O	O:0.998215
)`	O	O:0.999373
.	O	O:0.999583
	
#CODE	O	O:0.998453
	
I	O	O:0.999951
am	O	O:0.999997
facing	O	O:0.999717
difficulty	O	O:0.999779
with	O	O:0.999948
the	O	O:0.999979
correct	O	O:0.999902
syntax	O	O:0.999982
of	O	O:0.999996
the	O	O:0.999984
if	O	O:0.999972
condition	O	O:0.999647
.	O	O:0.999940
	
I	O	O:0.999990
want	O	O:0.999981
to	O	O:0.999938
apply	O	O:0.982272
the	O	O:0.999934
condition	O	O:0.999784
to	O	O:0.999998
check	O	O:0.999995
the	O	O:0.999999
equality	O	O:0.999910
of	O	O:0.999996
a	O	O:0.999968
string	O	O:0.998836
.	O	O:0.999741
	
But	O	O:0.999934
the	O	O:0.999966
way	O	O:0.999891
i	O	O:0.999878
am	O	O:0.999996
trying	O	O:0.999895
to	O	O:0.999987
do	O	O:0.999996
it	O	O:0.999992
,	O	O:0.999928
is	O	O:0.999995
giving	O	O:0.999659
me	O	O:0.999982
an	O	O:0.999929
error	O	O:0.997591
:	O	O:0.999927
#CODE	O	O:0.999723
	
simply	O	O:0.999900
you	O	O:0.999990
can	O	O:0.999986
apply	O	O:0.983114
the	O	O:0.999963
regex	O	O:0.998231
`	O	O:0.999983
b	O	O:0.999418
,?	O	O:0.999971
	
`	O	O:0.999964
,	O	O:0.999873
which	O	O:0.999983
means	O	O:0.999894
replace	O	O:0.999236
any	O	O:0.999996
value	O	O:0.999965
of	O	O:0.999897
`	O	O:0.999979
b	O	O:0.998685
`	O	O:0.999985
and	O	O:0.999521
`	O	O:0.999995
,	O	O:0.999269
`	O	O:0.999998
found	O	O:0.996539
after	O	O:0.999981
the	O	O:0.999846
`	O	O:0.999943
b	O	O:0.998560
`	O	O:0.999998
if	O	O:0.999874
exists	O	O:0.999904
#CODE	O	O:0.999733
	
Now	O	O:0.999884
let's	O	O:0.999775
write	O	O:0.999890
an	O	O:0.999967
`	O	O:0.999995
apply	O	B-API:0.968283
`	O	O:0.999743
function	O	O:0.999250
that	O	O:0.999981
adds	O	O:0.999987
a	O	O:0.999999
column	O	O:0.999707
of	O	O:0.999998
nearest	O	O:0.999796
dates	O	O:0.999559
to	O	O:0.999954
`	O	O:0.999999
df1	O	O:0.996071
`	O	O:0.999998
using	O	O:0.998659
scikit-learn	O	O:0.959500
:	O	O:0.999675
#CODE	O	O:0.999677
	
Next	O	O:0.999823
I	O	O:0.999999
apply	O	O:0.978568
data	O	O:0.997867
=	O	O:0.999577
`	O	O:0.999982
np.asarray()	B-API	B-API:0.999381
`	O	O:0.999993
on	O	O:0.999884
the	O	O:0.999975
DataFrame	B-API	O:0.949283
:	O	O:0.999929
#CODE	O	O:0.999900
	
@USER	O	O:0.999441
,	O	O:0.999991
yes	O	O:0.999869
I	O	O:0.999992
know	O	O:0.999943
I'll	O	O:0.999832
have	O	O:0.999954
to	O	O:0.999997
specify	O	O:0.999992
the	O	O:0.999997
order	O	O:0.999885
manually	O	O:0.999714
,	O	O:0.999983
I'm	O	O:0.999990
just	O	O:0.999868
wondering	O	O:0.999955
how	O	O:0.999966
to	O	O:0.999993
apply	O	O:0.990199
those	O	O:0.999859
specified	O	O:0.999179
orders	O	O:0.999275
.	O	O:0.999767
	
In	O	O:0.999939
reality	O	O:0.999907
my	O	O:0.999960
dataset	O	O:0.998877
is	O	O:0.999983
much	O	O:0.999003
larger	O	O:0.997543
and	O	O:0.999709
has	O	O:0.999916
several	O	O:0.998495
'	O	O:0.999987
questions	O	O:0.999745
'	O	O:0.999983
with	O	O:0.999973
the	O	O:0.999996
same	O	O:0.999991
set	O	O:0.999965
of	O	O:0.999995
responses	O	O:0.998658
.	O	O:0.999931
	
For	O	O:0.999839
example	O	O:0.999864
many	O	O:0.999763
Questions	O	O:0.999962
that	O	O:0.999935
can	O	O:0.999984
be	O	O:0.999998
(	O	O:0.999988
"	O	O:0.999962
Yes	O	O:0.999338
"	O	O:0.999979
,	O	O:0.999918
"	O	O:0.999977
No	O	O:0.999907
"	O	O:0.999988
,	O	O:0.999883
"	O	O:0.999977
Unsure	O	O:0.999598
")	O	O:0.999906
,	O	O:0.999996
many	O	O:0.999890
questions	O	O:0.999948
that	O	O:0.999961
can	O	O:0.999992
be	O	O:0.999997
(	O	O:0.999979
"	O	O:0.999983
Not	O	O:0.999968
at	O	O:0.999996
all	O	O:0.999910
"	O	O:0.999985
,	O	O:0.999921
"	O	O:0.999875
A	O	O:0.999962
Little	O	O:0.999630
"	O	O:0.999965
,	O	O:0.999936
"	O	O:0.999935
A	O	O:0.999951
Lot	O	O:0.999879
")	O	O:0.999939
,	O	O:0.999950
etc	O	O:0.999895
.	O	O:0.999924
	
I'd	O	O:0.999989
like	O	O:0.999980
to	O	O:0.999998
specify	O	O:0.999984
the	O	O:0.999995
orders	O	O:0.999333
of	O	O:0.999996
these	O	O:0.999949
responses	O	O:0.999868
and	O	O:0.999998
then	O	O:0.999977
have	O	O:0.999999
them	O	O:0.999989
applied	O	O:0.999969
to	O	O:0.999993
the	O	O:1.000000
appropriate	O	O:0.999927
questions	O	O:0.999246
(	O	O:0.999999
level	O	O:0.999937
0	O	O:0.999909
in	O	O:0.999870
the	O	O:0.999974
index	O	O:0.999714
)	O	O:0.999964
.	O	O:0.999915
	
Does	O	O:0.999875
this	O	O:0.999974
make	O	O:0.999873
sense	O	O:0.999848
?	O	O:0.999940
	
If	O	O:0.999971
you	O	O:0.999983
have	O	O:0.999997
multiple	O	O:0.999984
conditions	O	O:0.999609
besides	O	O:0.999987
this	O	O:0.999976
example	O	O:0.999968
you	O	O:0.999987
can	O	O:0.999986
use	O	O:0.999998
`	O	O:0.999980
apply	O	B-API:0.996233
`	O	O:0.999529
:	O	O:0.999171
#CODE	O	O:0.999898
	
Does	O	O:0.999160
color	O	O:0.999898
mean	O	O:0.999894
anything	O	O:0.999984
special	O	O:0.999461
or	O	O:0.999989
can	O	O:0.999906
we	O	O:1.000000
treat	O	O:0.999971
a	O	O:0.999999
combination	O	O:0.999775
of	O	O:0.999994
item	O	O:0.998850
id	O	O:0.999833
and	O	O:0.999989
color	O	O:0.999742
id	O	O:0.999794
as	O	O:0.999997
a	O	O:0.999980
new	O	O:0.999661
unique	O	O:0.811078
item	O	O:0.998870
?	O	O:0.999919
	
Does	O	O:0.999497
the	O	O:0.999990
store_min_buy	O	O:0.998051
apply	O	O:0.627617
to	O	O:0.999978
just	O	O:0.999990
the	O	O:0.999998
one	O	O:0.999992
thing	O	O:0.999972
or	O	O:0.999995
across	O	O:0.999931
the	O	O:0.999998
sum	O	O:0.999877
of	O	O:0.999994
all	O	O:0.999985
the	O	O:0.999997
things	O	O:0.999403
you	O	O:0.999988
buy	O	O:0.999927
at	O	O:1.000000
this	O	O:0.999926
store	O	O:0.999034
?	O	O:0.999943
	
What	O	O:0.999696
does	O	O:0.999857
it	O	O:0.999997
even	O	O:0.999982
mean	O	O:0.999982
that	O	O:0.999980
there's	O	O:0.999991
a	O	O:1.000000
min_buy	O	O:0.998340
of	O	O:0.999972
9.14	O	O:0.999339
,	O	O:0.999996
can	O	O:0.999951
I	O	O:0.999999
buy	O	O:0.999939
9	O	O:0.999041
and	O	O:0.999984
14%	O	O:0.999981
of	O	O:0.999937
an	O	O:0.999996
item	O	O:0.999909
somehow	O	O:0.999766
?	O	O:0.999977
	
Thanks	O	O:0.998513
,	O	O:0.999990
that's	O	O:0.999971
a	O	O:0.999996
good	O	O:0.999115
hint	O	O:0.999689
.	O	O:0.999878
	
It	O	O:0.999827
works	O	O:0.999437
,	O	O:0.999990
but	O	O:0.999965
I	O	O:0.999988
can't	O	O:0.999991
pass	O	O:0.999209
the	O	O:0.999957
first()	B-API	O:0.618819
-function	O	O:0.999699
to	O	O:0.999938
g.agg	O	O:0.978192
(	O	O:0.999989
...	O	O:0.999790
)	O	O:0.999994
,	O	O:0.999994
can	O	O:0.999961
I	O	O:0.999999
?	O	O:0.999995
	
I	O	O:0.999942
would	O	O:0.999991
like	O	O:0.999964
that	O	O:0.999986
better	O	O:0.999917
,	O	O:0.999998
because	O	O:0.999933
I	O	O:0.999973
would	O	O:0.999999
like	O	O:0.999958
to	O	O:0.999998
apply	O	O:0.986214
many	O	O:0.999707
different	O	O:0.999872
aggregation	O	O:0.999828
functions	O	O:0.999952
at	O	O:0.999987
once	O	O:0.998593
(	O	O:0.999982
amin	B-API	B-API:0.762956
,	O	O:0.999978
amax	B-API	B-API:0.839583
,	O	O:0.999994
first	O	O:0.999224
,	O	O:0.999995
...	O	O:0.999690
)	O	O:0.999951
.	O	O:0.999849
	
It	O	O:0.999955
will	O	O:0.999936
be	O	O:0.999999
a	O	O:0.999996
workaround	O	O:0.999079
to	O	O:0.999955
use	O	O:0.999991
it	O	O:0.999833
and	O	O:0.999998
then	O	O:0.999975
assemble	O	O:0.999874
my	O	O:0.999996
final	O	O:0.999863
dataset	O	O:0.999984
manually	O	O:0.999736
,	O	O:0.999993
I	O	O:0.999989
guess	O	O:0.999710
.	O	O:0.999670
	
That's	O	O:0.999745
not	O	O:0.999988
an	O	O:0.999996
error	O	O:0.999849
,	O	O:0.999998
just	O	O:0.999980
a	O	O:0.999999
representation	O	O:0.999450
of	O	O:0.999991
the	O	O:0.999890
groupby	B-API	B-API:0.991995
object	O	O:0.999015
.	O	O:0.999538
	
You	O	O:0.999960
just	O	O:0.999936
need	O	O:0.999985
to	O	O:0.999996
apply	O	O:0.981202
an	O	O:0.999968
aggregation	O	O:0.999287
operation	O	O:0.999899
to	O	O:0.999975
the	O	O:0.999998
object	O	O:0.999826
to	O	O:0.999992
return	O	O:0.999981
a	O	O:0.999991
DataFrame	B-API	O:0.973936
or	O	O:0.999975
Series	O	O:0.999260
.	O	O:0.999916
	
There's	O	O:0.999865
more	O	O:0.999808
information	O	O:0.999956
about	O	O:0.999994
this	O	O:0.999746
in	O	O:0.999979
the	O	O:0.999990
docs	O	O:0.999779
on	O	O:0.999941
groupby	B-API	B-API:0.985027
.	O	O:0.999914
	
Group	O	O:0.999502
series	O	O:0.999974
using	O	O:0.999339
mapper	O	O:0.535324
(	O	O:0.999947
dict	O	O:0.999760
or	O	O:0.999982
key	O	O:0.999862
function	O	O:0.999971
,	O	O:0.999996
apply	O	O:0.892997
given	O	O:0.969672
function	O	O:0.999587
	
Use	O	O:0.999475
`	O	O:0.999962
Series.value_counts	B-API	B-API:0.993691
`	O	O:0.999998
to	O	O:0.999982
count	O	O:0.999993
the	O	O:0.999997
number	O	O:0.999948
of	O	O:0.999996
occurrences	O	O:0.999900
for	O	O:0.999998
each	O	O:0.999921
city	O	O:0.996110
in	O	O:0.999984
`	O	O:0.999938
US	O	O:0.998316
[	O	O:0.999965
'	O	O:0.999974
city	O	O:0.998842
']`	O	O:0.999895
,	O	O:0.999910
and	O	O:0.999999
then	O	O:0.999816
use	O	O:0.999965
`	O	O:0.999951
Series.map	B-API	B-API:0.999740
`	O	O:0.999994
to	O	O:0.999925
apply	O	O:0.993470
those	O	O:0.999916
counts	O	O:0.999354
to	O	O:0.999999
corresponding	O	O:0.999994
values	O	O:0.999573
in	O	O:0.999969
`	O	O:0.999990
UK	O	O:0.998519
[	O	O:0.999960
'	O	O:0.999974
city	O	O:0.996678
']`	O	O:0.999452
:	O	O:0.999757
#CODE	O	O:0.999747
	
I	O	O:0.999984
have	O	O:0.999966
tried	O	O:0.999792
using	O	O:0.999868
`	O	O:0.999676
apply	O	B-API:0.999112
`	O	O:0.999661
but	O	O:0.999252
it	O	O:0.999955
is	O	O:0.999992
pretty	O	O:0.998538
slow	O	O:0.996212
:	O	O:0.999938
#CODE	O	O:0.999758
	
`	O	O:0.999851
get_dummies	B-API	B-API:0.999924
`	O	O:0.999971
and	O	O:0.999963
other	O	O:0.999939
Categorical	B-API	B-API:0.980062
operations	O	O:0.999429
don't	O	O:0.999745
apply	O	O:0.695121
because	O	O:0.999909
they	O	O:0.999874
operate	O	O:0.999982
on	O	O:0.999998
a	O	O:0.999997
per	O	O:0.999892
row	O	O:0.999928
level	O	O:0.998985
.	O	O:0.999895
	
Not	O	O:0.999865
within	O	O:0.999865
the	O	O:0.999951
row	O	O:0.999617
.	O	O:0.999813
	
Apply	O	O:0.999897
a	O	O:0.999905
function	O	O:0.999755
to	O	O:0.999999
each	O	O:0.999996
of	O	O:0.999993
the	O	O:0.999999
subsequent	O	O:0.999997
rows	O	O:0.999732
of	O	O:0.999983
the	O	O:0.999993
dataframe	B-API	O:0.999711
that	O	O:0.999911
will	O	O:0.999992
give	O	O:0.999985
the	O	O:0.999994
depreciation	O	O:0.999924
relative	O	O:0.999831
to	O	O:0.999990
the	O	O:0.999999
base-year	O	O:0.997707
,	O	O:0.999986
base-price	O	O:0.998846
.	O	O:0.999857
	
This	O	O:0.999621
should	O	O:0.999963
be	O	O:0.999999
put	O	O:0.999875
in	O	O:0.999996
a	O	O:0.999998
set	O	O:0.999457
or	O	O:0.999996
a	O	O:0.999982
list	O	O:0.992076
.	O	O:0.999893
	
Used	O	O:0.999172
group.apply()	O	O:0.910923
	
I	O	O:0.999976
constructed	O	O:0.999964
a	O	O:0.999977
separate	O	O:0.999475
dataframe	B-API	O:0.998562
with	O	O:0.999972
one	O	O:0.999998
column	O	O:0.999987
as	O	O:0.999992
"	O	O:0.999993
make	O	O:0.998705
"	O	O:0.999995
,	O	O:0.999997
another	O	O:0.999935
as	O	O:0.999931
"	O	O:0.999944
model	O	O:0.998589
"	O	O:0.999964
,	O	O:0.999947
and	O	O:0.999997
a	O	O:0.999997
third	O	O:0.998975
one	O	O:0.999978
"	O	O:0.999984
average	O	O:0.999551
yearly	O	O:0.999438
depreciation	O	O:0.998737
"	O	O:0.999903
.	O	O:0.999640
	
What	O	O:0.999934
this	O	O:0.999932
really	O	O:0.999947
boiled	O	O:0.999933
down	O	O:0.999432
to	O	O:0.999970
was	O	O:0.999993
how	O	O:0.999992
to	O	O:0.999998
sequentially	O	O:0.999997
apply	O	O:0.953430
a	O	O:0.999875
function	O	O:0.999834
to	O	O:0.999999
rows	O	O:0.999995
of	O	O:0.999995
a	O	O:0.999996
dataframe	B-API	O:0.994496
.	O	O:0.999862
	
#CODE	O	O:0.998453
	
Now	O	O:0.999938
I	O	O:0.999993
can	O	O:0.999994
apply	O	O:0.962797
a	O	O:0.999631
function	O	O:0.980783
:	O	O:0.999956
#CODE	O	O:0.999829
	
I'm	O	O:0.999917
new	O	O:0.999729
to	O	O:0.999969
Pandas	O	O:0.999964
.	O	O:0.999809
	
I	O	O:0.999933
created	O	O:0.999949
this	O	O:0.999367
pivot	B-API	O:0.964797
table	O	O:0.999872
,	O	O:0.999992
but	O	O:0.999988
I	O	O:0.999997
need	O	O:0.999989
to	O	O:0.999982
figure	O	O:0.999988
out	O	O:0.999961
how	O	O:0.999988
to	O	O:0.999997
apply	O	O:0.996557
a	O	O:0.999784
function	O	O:0.999299
within	O	O:0.999974
each	O	O:0.999927
day	O	O:0.999982
on	O	O:0.999992
the	O	O:0.999895
'	O	O:0.999977
is_match	O	O:0.997966
'	O	O:0.999988
values	O	O:0.999916
only	O	O:0.999748
.	O	O:0.999981
	
See	O	O:0.999776
img	O	O:0.999550
below	O	O:0.999076
for	O	O:0.999985
head	O	O:0.999919
of	O	O:0.999988
data	O	O:0.999723
.	O	O:0.999963
	
Using	O	O:0.999914
a	O	O:0.999759
function	O	O:0.999705
with	O	O:0.999804
`	O	O:0.999988
apply	O	B-API:0.957470
`	O	O:0.999925
is	O	O:0.999763
slower	O	O:0.999787
than	O	O:0.999561
the	O	O:0.999985
list	O	O:0.995444
comprehension	O	O:0.996772
:	O	O:0.999983
#CODE	O	O:0.999785
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
Really	O	O:0.999728
much	O	O:0.998436
faster	O	O:0.999074
.	O	O:0.999734
	
But	O	O:0.999939
maybe	O	O:0.999871
it's	O	O:0.999953
possible	O	O:0.999858
to	O	O:0.999996
make	O	O:0.999988
it	O	O:0.999986
trough	O	O:0.999958
pandas	O	O:0.999925
apply	O	O:0.694166
/	O	O:0.999478
map	O	B-API:0.993809
function	O	O:0.999745
?	O	O:0.999922
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999976
apply	O	B-API:0.994843
`	O	O:0.999430
(	O	O:0.999724
see	O	O:0.999987
updated	O	O:0.999736
answer	O	O:0.999942
above	O	O:0.999469
)	O	O:0.999938
.	O	O:0.999702
	
But	O	O:0.999887
it	O	O:0.999953
is	O	O:0.999994
slower	O	O:0.999817
due	O	O:0.999923
to	O	O:0.999987
the	O	O:0.999982
function	O	O:0.999918
calling	O	O:0.998962
overhead	O	O:0.999762
.	O	O:0.999703
	
Yep	O	O:0.999643
,	O	O:0.999992
added	O	O:0.999971
a	O	O:0.999992
new	O	O:0.999387
option	O	O:0.999908
above	O	O:0.999945
that	O	O:0.999956
will	O	O:0.999972
apply	O	O:0.907375
the	O	O:0.999977
same	O	O:0.999628
logic	O	O:0.999908
to	O	O:0.999996
the	O	O:1.000000
entire	O	O:0.999720
df	O	O:0.999667
.	O	O:0.999901
	
This	O	O:0.999704
also	O	O:0.999864
looks	O	O:0.999975
promising	O	O:0.998081
.	O	O:0.999743
	
Can	O	O:0.999617
you	O	O:0.999990
give	O	O:0.999962
an	O	O:0.999999
example	O	O:0.999952
of	O	O:0.999993
the	O	O:0.999771
function	O	O:0.999805
and	O	O:0.999987
how	O	O:0.999993
to	O	O:0.999992
apply	O	O:0.977189
to	O	O:0.999947
the	O	O:0.999992
groupby	B-API	B-API:0.990409
?	O	O:0.999901
	
Pandas	O	O:0.999772
dataframe	B-API	O:0.998873
apply	O	O:0.803502
refer	O	O:0.998158
to	O	O:0.999980
previous	O	O:0.999989
row	O	O:0.999984
to	O	O:0.999989
calculate	O	O:0.999971
difference	O	O:0.999940
	
The	O	O:0.999908
problem	O	O:0.994467
is	O	O:0.999979
not	O	O:0.999958
calculating	O	O:0.999886
the	O	O:0.999986
day-difference	O	O:0.998083
between	O	O:0.999629
two	O	O:0.999964
`	O	O:0.999994
datetime	O	O:0.872138
`	O	O:0.999986
objects	O	O:0.995010
.	O	O:0.999924
	
I	O	O:0.999938
am	O	O:0.999991
just	O	O:0.999281
not	O	O:0.999999
sure	O	O:0.999933
on	O	O:0.999996
how	O	O:0.999994
to	O	O:0.999998
add	O	O:0.999998
the	O	O:0.999989
new	O	O:0.999821
column	O	O:0.999685
.	O	O:0.999919
	
I	O	O:0.999985
know	O	O:0.999877
,	O	O:0.999994
that	O	O:0.999929
I	O	O:0.999999
have	O	O:0.999993
to	O	O:0.999996
make	O	O:0.999999
a	O	O:0.999989
`	O	O:0.999941
groupby	B-API	B-API:0.998906
`	O	O:0.999989
first	O	O:0.974757
(	O	O:0.999980
`	O	O:0.999946
df.groupby	B-API	B-API:0.997111
(	O	O:0.999954
'	O	O:0.999932
player	O	O:0.999676
')`)	O	O:0.999525
and	O	O:0.999998
then	O	O:0.999744
use	O	O:0.999970
`	O	O:0.999968
apply	O	B-API:0.996009
`	O	O:0.999682
(	O	O:0.999725
or	O	O:0.999999
maybe	O	O:0.999878
`	O	O:0.999997
transform	O	B-API:0.968211
`	O	O:0.999991
?	O	O:0.999892
)	O	O:0.999979
.	O	O:0.999822
	
However	O	O:0.999854
,	O	O:0.999991
I	O	O:0.999996
am	O	O:0.999995
stuck	O	O:0.997698
,	O	O:0.999998
because	O	O:0.999944
for	O	O:0.999987
calculating	O	O:0.999719
the	O	O:0.999963
difference	O	O:0.999909
,	O	O:0.999990
I	O	O:0.999999
need	O	O:0.999991
to	O	O:0.999992
refer	O	O:0.999993
to	O	O:0.999988
the	O	O:1.000000
previous	O	O:0.999889
row	O	O:0.999922
in	O	O:0.999990
the	O	O:0.999989
apply-function	O	O:0.998902
,	O	O:0.999979
and	O	O:0.999992
I	O	O:0.999989
don't	O	O:0.999939
know	O	O:0.999646
how	O	O:0.999989
to	O	O:0.999985
do	O	O:1.000000
that	O	O:0.999970
,	O	O:0.999999
if	O	O:0.999999
possible	O	O:0.999865
at	O	O:0.999992
all	O	O:0.999894
.	O	O:0.999876
	
I	O	O:0.999940
suggest	O	O:0.999968
that	O	O:0.999881
you	O	O:0.999995
apply	O	O:0.909130
the	O	O:0.999859
function	O	O:0.999810
on	O	O:0.999997
a	O	O:0.999999
subset	O	O:0.999836
of	O	O:0.999999
data	O	O:0.999890
for	O	O:0.999996
example	O	O:0.999893
the	O	O:0.999981
first	O	O:0.999664
`	O	O:0.999979
100	O	O:0.997147
`	O	O:0.999993
row	O	O:0.999615
if	O	O:0.999979
it	O	O:0.999955
worked	O	O:0.999958
then	O	O:0.999814
increase	O	O:0.999962
the	O	O:0.999990
subset	O	O:0.999329
until	O	O:0.999920
you	O	O:0.999957
get	O	O:0.999994
the	O	O:0.999994
error	O	O:0.999633
and	O	O:0.999997
know	O	O:0.999912
which	O	O:0.999987
rows	O	O:0.999822
specifically	O	O:0.999858
in	O	O:1.000000
your	O	O:0.999996
data	O	O:0.999988
set	O	O:0.999958
causes	O	O:0.999908
the	O	O:0.999970
issue	O	O:0.998569
	
use	O	O:0.999901
of	O	O:0.999932
apply	O	B-API:0.933533
function	O	O:0.999936
when	O	O:0.999393
you	O	O:0.999998
need	O	O:0.999996
to	O	O:0.999999
pass	O	O:0.999878
'	O	O:0.999993
self	O	O:0.999708
'	O	O:0.999992
as	O	O:0.999959
argument	O	O:0.999422
	
python	O	O:0.998899
-	O	O:0.999995
pass	O	O:0.998967
dataframe	B-API	O:0.999824
column	O	O:0.999955
as	O	O:0.999992
argument	O	O:0.999827
in	O	O:0.999972
apply	O	B-API:0.892436
function	O	O:0.998651
	
You	O	O:0.999968
have	O	O:0.999923
to	O	O:0.999992
`	O	O:1.000000
apply	O	B-API:0.911077
`	O	O:0.999988
over	O	O:0.997264
the	O	O:0.999983
other	O	O:0.999706
axis	O	O:0.999563
.	O	O:0.999842
	
#CODE	O	O:0.998453
	
does	O	O:0.998880
not	O	O:0.999976
work	O	O:0.999932
.	O	O:0.999965
	
Lets	O	O:0.999877
assume	O	O:0.999952
I	O	O:0.999999
have	O	O:0.999958
3	O	O:0.999963
categories	O	O:0.999667
in	O	O:0.999996
column	O	O:0.999992
a	O	O:0.999998
,	O	O:0.999973
for	O	O:0.999993
each	O	O:0.999769
specific	O	O:0.999901
on	O	O:0.999992
I	O	O:0.999999
have	O	O:0.999992
5	O	O:0.999976
categories	O	O:0.999841
of	O	O:0.999980
b	O	O:0.999725
.	O	O:0.999936
	
What	O	O:0.999757
I	O	O:0.999997
need	O	O:0.999989
to	O	O:0.999975
do	O	O:0.999995
is	O	O:0.999992
to	O	O:0.999972
find	O	O:0.999997
total	O	O:0.999939
number	O	O:0.999985
of	O	O:0.999984
on	O	O:0.999998
class	O	O:0.999989
of	O	O:0.999997
b	O	O:0.999905
for	O	O:0.999996
each	O	O:0.999623
class	O	O:0.999933
of	O	O:0.999997
a	O	O:0.999954
.	O	O:0.999763
	
I	O	O:0.999959
tried	O	O:0.999815
apply	O	B-API:0.953338
command	O	O:0.988900
,	O	O:0.999961
but	O	O:0.999970
I	O	O:0.999996
think	O	O:0.999971
I	O	O:0.999919
do	O	O:0.999974
not	O	O:0.999954
know	O	O:0.999839
how	O	O:0.999988
to	O	O:0.999959
use	O	O:0.999999
it	O	O:0.999944
properly	O	O:0.999770
.	O	O:0.999963
	
#CODE	O	O:0.998453
	
Or	O	O:0.999977
you	O	O:0.999969
can	O	O:0.999996
apply	O	O:0.996909
a	O	O:0.999950
`	O	O:0.999879
lambda	O	O:0.997080
`	O	O:0.999960
function	O	O:0.999696
onto	O	O:0.999893
the	O	O:0.999959
groups	O	O:0.986252
:	O	O:0.999939
#CODE	O	O:0.999893
	
One	O	O:0.999875
way	O	O:0.999922
could	O	O:0.999930
have	O	O:0.999993
been	O	O:0.999941
to	O	O:0.999996
use	O	O:0.999995
pd.exanding_apply()	O	O:0.669377
,	O	O:0.999909
but	O	O:0.999981
it	O	O:0.999982
doesn't	O	O:0.999966
preserve	O	O:0.999140
the	O	O:0.999996
dataframe	B-API	O:0.999000
to	O	O:0.999989
apply	O	O:0.983601
the	O	O:0.999820
function	O	O:0.999749
on	O	O:0.999988
,	O	O:0.999997
so	O	O:0.999998
there	O	O:0.999709
is	O	O:0.999996
no	O	O:0.999985
way	O	O:0.999980
to	O	O:0.999995
have	O	O:0.999999
the	O	O:0.999988
correct	O	O:0.999831
groupyby	O	O:0.999570
index	O	O:0.999927
..	O	O:0.999661
	
I	O	O:0.999982
know	O	O:0.999890
how	O	O:0.999913
to	O	O:0.999981
do	O	O:0.999999
it	O	O:0.999997
using	O	O:0.999945
`	O	O:0.999960
apply	O	B-API:0.994115
`	O	O:0.999911
with	O	O:0.998580
python	O	O:0.997528
function	O	O:0.999801
but	O	O:0.999832
it's	O	O:0.999961
very	O	O:0.999534
slow	O	O:0.998405
:	O	O:0.999992
~16s	O	O:0.999525
for	O	O:0.999980
1M	O	O:0.999952
elements	O	O:0.999703
on	O	O:0.999990
a	O	O:0.999982
MacBookPro	O	O:0.999334
#CODE	O	O:0.999634
	
I	O	O:0.999992
have	O	O:0.999998
a	O	O:0.999998
data	O	O:0.999950
frame	O	O:0.999999
that	O	O:0.999985
needs	O	O:0.999998
a	O	O:0.999999
column	O	O:0.999531
,	O	O:0.999992
`	O	O:0.999990
c3	O	O:0.995279
`	O	O:0.999994
,	O	O:0.999945
added	O	O:0.999808
.	O	O:0.999749
	
Each	O	O:0.999890
entry	O	O:0.999773
in	O	O:0.999981
the	O	O:0.999996
column	O	O:0.999964
depends	O	O:0.999972
on	O	O:0.999999
entries	O	O:0.999916
from	O	O:0.999979
the	O	O:0.999999
same	O	O:0.999973
row	O	O:0.999859
in	O	O:0.999994
two	O	O:0.999996
other	O	O:0.999991
columns	O	O:0.999896
,	O	O:0.999984
`	O	O:0.999991
c1	O	O:0.993350
`	O	O:0.999989
and	O	O:0.999774
`	O	O:0.999991
c2	O	O:0.970484
`	O	O:0.999976
.	O	O:0.999114
	
`	O	O:0.999931
c3	O	O:0.993165
`	O	O:0.999968
was	O	O:0.999491
originally	O	O:0.999976
created	O	O:0.999835
by	O	O:0.999992
mapping	O	O:0.999963
a	O	O:0.999910
function	O	O:0.999965
over	O	O:0.999980
pairs	O	O:0.999957
of	O	O:0.999998
entries	O	O:0.999744
in	O	O:0.999982
`	O	O:0.999991
c1	O	O:0.995465
`	O	O:0.999985
and	O	O:0.999707
`	O	O:0.999991
c2	O	O:0.970484
`	O	O:0.999976
.	O	O:0.999114
	
I'm	O	O:0.999943
trying	O	O:0.999924
to	O	O:0.999998
speed	O	O:0.999957
up	O	O:0.999983
the	O	O:0.999994
creation	O	O:0.999884
of	O	O:0.999981
`	O	O:0.999976
c3	O	O:0.998928
`	O	O:0.999994
,	O	O:0.999964
since	O	O:0.999988
there	O	O:0.999798
is	O	O:0.999999
a	O	O:0.999996
lot	O	O:0.999962
of	O	O:0.999995
data	O	O:0.999901
,	O	O:0.999999
by	O	O:0.999994
using	O	O:0.999796
`	O	O:0.999796
apply	O	B-API:0.997042
`	O	O:0.999803
.	O	O:0.997163
	
Here's	O	O:0.999825
what	O	O:0.999847
I	O	O:0.999999
have	O	O:0.999934
now	O	O:0.997973
:	O	O:0.999987
#CODE	O	O:0.999845
	
However	O	O:0.999812
,	O	O:0.999998
when	O	O:0.999938
I	O	O:0.999994
do	O	O:0.999999
this	O	O:0.999786
,	O	O:0.999978
'	O	O:0.999979
c3	O	O:0.999541
'	O	O:0.999990
becomes	O	O:0.999943
a	O	O:0.999964
`	O	O:0.999889
float64	O	O:0.980319
`	O	O:0.999992
,	O	O:0.999962
while	O	O:0.999980
I	O	O:0.999990
need	O	O:0.999987
it	O	O:0.999986
to	O	O:0.999999
be	O	O:1.000000
of	O	O:0.999997
type	O	O:0.994665
`	O	O:0.999991
object	O	O:0.997655
`	O	O:0.999997
to	O	O:0.999982
preserve	O	O:0.999633
`	O	O:0.999988
None	O	O:0.998705
`	O	O:0.999996
values	O	O:0.999639
that	O	O:0.999969
I	O	O:1.000000
have	O	O:0.999994
for	O	O:0.999945
further	O	O:0.999949
processing	O	O:0.999622
of	O	O:0.999946
the	O	O:0.999946
dataframe	B-API	O:0.997400
(	O	O:0.999973
rather	O	O:0.999972
than	O	O:0.999891
having	O	O:0.999986
them	O	O:0.999907
converted	O	O:0.999875
to	O	O:0.999985
`	O	O:0.999999
NaN	O	O:0.978484
`	O	O:0.999997
,	O	O:0.999956
which	O	O:0.999780
is	O	O:0.999989
what	O	O:0.999815
happens	O	O:0.999945
with	O	O:0.999981
the	O	O:0.999974
given	O	O:0.999799
line	O	O:0.999954
of	O	O:0.999997
code	O	O:0.999841
,	O	O:0.999999
since	O	O:0.999965
the	O	O:0.999996
other	O	O:0.999986
values	O	O:0.999950
generated	O	O:0.999905
by	O	O:0.999995
the	O	O:0.999838
function	O	O:0.999875
are	O	O:0.999983
of	O	O:0.999997
type	O	O:0.996293
`	O	O:0.999995
int	O	O:0.994747
`)	O	O:0.999970
.	O	O:0.999332
	
I	O	O:0.999986
know	O	O:0.999976
one	O	O:0.999970
can	O	O:0.999918
use	O	O:0.999996
`	O	O:0.999941
astype	B-API	B-API:0.980002
`	O	O:0.999996
to	O	O:0.999916
change	O	O:0.999975
the	O	O:0.999997
type	O	O:0.999270
of	O	O:0.999998
a	O	O:0.999995
column	O	O:0.999406
,	O	O:0.999987
but	O	O:0.999988
using	O	O:0.999962
it	O	O:0.999954
on	O	O:0.999972
the	O	O:0.999988
already-created	O	O:0.999726
column	O	O:0.999773
does	O	O:0.999926
not	O	O:0.999996
work	O	O:0.999971
-	O	O:0.999998
the	O	O:0.999986
`	O	O:0.999974
NaN	O	O:0.986361
`	O	O:0.999999
values	O	O:0.999766
remain	O	O:0.999890
as	O	O:0.999995
`	O	O:0.999942
NaN	O	O:0.985105
`	O	O:0.999991
values	O	O:0.994373
.	O	O:0.999923
	
Is	O	O:0.999974
there	O	O:0.999971
any	O	O:0.999986
way	O	O:0.999895
to	O	O:0.999983
tell	O	O:0.999968
`	O	O:0.999996
apply	O	B-API:0.980735
`	O	O:0.999995
that	O	O:0.999211
I	O	O:1.000000
want	O	O:0.999994
to	O	O:0.999944
preserve	O	O:0.999977
the	O	O:0.999803
`	O	O:0.999971
None	O	O:0.998623
`	O	O:0.999995
values	O	O:0.996912
?	O	O:0.999968
	
Do	O	O:0.999956
I	O	O:0.999997
need	O	O:0.999990
to	O	O:0.999973
do	O	O:1.000000
something	O	O:0.999965
special	O	O:0.998937
within	O	O:0.999753
the	O	O:0.999953
lambda	O	O:0.999789
expression	O	O:0.999601
or	O	O:0.999982
within	O	O:0.999684
`	O	O:0.999982
my_func	O	O:0.658789
`	O	O:0.999986
?	O	O:0.999682
	
Your	O	O:0.999803
apply	O	B-API:0.819212
function	O	O:0.998546
is	O	O:0.999895
weird	O	O:0.999543
because	O	O:0.999949
you	O	O:0.999963
don't	O	O:0.999979
use	O	O:0.999951
`	O	O:0.999970
x	O	O:0.996635
`	O	O:0.999993
,	O	O:0.999983
instead	O	O:0.999998
you	O	O:0.999988
extract	O	O:0.999680
the	O	O:0.999998
two	O	O:0.999996
whole	O	O:0.999994
columns	O	O:0.999974
of	O	O:0.999999
your	O	O:0.999967
dataframe	B-API	O:0.999259
on	O	O:0.999998
each	O	O:0.999706
row	O	O:0.999921
.	O	O:0.999887
	
Apply	O	O:0.999831
time	O	O:0.999945
shift	O	B-API:0.593369
on	O	O:0.999931
Pandas	O	O:0.999960
DataFrame	B-API	O:0.999710
from	O	O:0.999955
another	O	O:0.999950
column	O	O:0.999798
	
How	O	O:0.999930
do	O	O:0.999965
I	O	O:0.999985
use	O	O:0.999975
pandas	O	O:0.992650
groupby	B-API	B-API:0.987901
function	O	O:0.999830
to	O	O:0.999977
apply	O	O:0.990565
a	O	O:0.999931
formula	O	O:0.999641
based	O	O:0.999844
on	O	O:0.999986
the	O	O:0.999963
groupby	B-API	B-API:0.946124
value	O	O:0.999587
	
You	O	O:0.999869
could	O	O:0.999987
also	O	O:0.999997
create	O	O:0.999982
a	O	O:0.999995
special	O	O:0.982920
function	O	O:0.999665
and	O	O:0.999987
pass	O	O:0.999231
it	O	O:0.999950
to	O	O:0.999994
the	O	O:0.999998
groupby	B-API	B-API:0.992543
`	O	O:0.999981
apply	O	B-API:0.998922
`	O	O:0.999668
method	O	O:0.992524
:	O	O:0.999975
#CODE	O	O:0.999860
	
Writing	O	O:0.999484
a	O	O:0.999956
named	O	O:0.990861
funtion	O	O:0.999772
and	O	O:0.999995
using	O	O:0.999909
`	O	O:0.999576
apply	O	B-API:0.998660
`	O	O:0.999366
works	O	O:0.978930
:	O	O:0.999979
#CODE	O	O:0.999591
	
and	O	O:0.999840
after	O	O:0.999972
that	O	O:0.998399
apply	O	B-API:0.538841
#CODE	O	O:0.998279
	
Pandas	O	O:0.999442
groupby	B-API	B-API:0.958088
apply	O	O:0.685984
performing	O	O:0.991887
slow	O	O:0.983360
	
The	O	O:0.999827
bottleneck	O	O:0.999816
seems	O	O:0.999952
to	O	O:0.999994
be	O	O:1.000000
the	O	O:0.999993
apply	O	B-API:0.950889
function	O	O:0.999568
,	O	O:0.999995
even	O	O:0.999989
when	O	O:0.999971
I	O	O:0.999998
remove	O	O:0.999951
the	O	O:0.999852
for	O	O:0.999978
loop	O	O:0.998993
in	O	O:0.999974
the	O	O:0.999886
function	O	O:0.999901
it	O	O:0.999983
remains	O	O:0.999853
slow	O	O:0.998638
(	O	O:0.999926
~	O	O:0.999852
4.25s	O	O:0.994180
per	O	O:0.999925
loop	O	O:0.999467
)	O	O:0.999963
.	O	O:0.999785
	
I	O	O:0.999956
am	O	O:0.999996
wondering	O	O:0.999047
if	O	O:0.999994
there	O	O:0.999914
is	O	O:0.999996
another	O	O:0.999878
way	O	O:0.999977
to	O	O:0.999971
apply	O	O:0.967182
the	O	O:0.999218
function	O	O:0.996747
(	O	O:0.999964
without	O	O:0.999912
the	O	O:0.999908
apply	O	B-API:0.970821
command	O	O:0.997113
)	O	O:0.999925
.	O	O:0.999800
	
I	O	O:0.999966
perform	O	O:0.999922
some	O	O:0.999818
other	O	O:0.999983
procedures	O	O:0.999808
on	O	O:0.999996
the	O	O:1.000000
data	O	O:0.999897
in	O	O:0.999998
this	O	O:0.999995
code	O	O:0.999979
using	O	O:0.999968
the	O	O:0.999306
agg	O	B-API:0.999440
command	O	O:0.998219
.	O	O:0.999703
	
This	O	O:0.999159
works	O	O:0.999947
much	O	O:0.999662
faster	O	O:0.998715
,	O	O:0.999974
but	O	O:0.999946
I	O	O:0.999985
don't	O	O:0.999989
know	O	O:0.999679
if	O	O:0.999997
its	O	O:0.999975
possible	O	O:0.999943
to	O	O:0.999979
perform	O	O:0.999990
this	O	O:0.999924
check	O	O:0.999316
(	O	O:0.999998
full_coverage	O	O:0.999135
)	O	O:0.999993
using	O	O:0.999878
the	O	O:0.999305
agg	O	B-API:0.999499
command	O	O:0.998076
.	O	O:0.999703
	
and	O	O:0.999968
that	O	O:0.999642
worked	O	O:0.999842
on	O	O:0.999984
the	O	O:0.999938
masked	O	O:0.999518
sample	O	O:0.998857
.	O	O:0.999848
	
But	O	O:0.999968
since	O	O:0.999933
I	O	O:0.999998
have	O	O:0.999997
to	O	O:0.999955
apply	O	O:0.994670
several	O	O:0.999391
filters	O	O:0.999117
keeping	O	O:0.999704
the	O	O:0.999982
original	O	O:0.999308
`	O	O:0.999983
H	O	O:0.998821
`	O	O:0.999998
column	O	O:0.998301
for	O	O:0.999997
non-filtered	O	O:0.999051
values	O	O:0.997923
I'm	O	O:0.999960
getting	O	O:0.999705
confused	O	O:0.998151
.	O	O:0.999887
	
If	O	O:0.999972
you	O	O:0.999994
have	O	O:0.999996
a	O	O:0.999997
`	O	O:0.999957
groupby	B-API	B-API:0.999279
`	O	O:0.999975
object	O	O:0.998625
,	O	O:0.999996
you	O	O:0.999987
should	O	O:0.999930
use	O	O:0.999994
the	O	O:0.999948
`	O	O:0.999953
apply	O	B-API:0.982688
`	O	O:0.999955
,	O	O:0.999406
`	O	O:0.999987
agg	O	B-API:0.998289
`	O	O:0.999987
,	O	O:0.999724
`	O	O:0.999995
filter	O	O:0.907985
`	O	O:0.999995
or	O	O:0.999904
`	O	O:0.999994
transform	O	B-API:0.942920
`	O	O:0.999982
methods	O	O:0.997382
.	O	O:0.999910
	
In	O	O:0.999991
your	O	O:0.999949
case	O	O:0.999908
`	O	O:0.999998
apply	O	B-API:0.982042
`	O	O:0.999887
is	O	O:0.999726
appropriate	O	O:0.999786
.	O	O:0.999826
	
Now	O	O:0.999778
,	O	O:0.999988
let's	O	O:0.999719
`	O	O:0.999989
apply	O	B-API:0.976676
`	O	O:0.999993
that	O	O:0.999342
to	O	O:0.999999
each	O	O:0.999999
group	O	O:0.999519
of	O	O:0.999998
your	O	O:0.999806
real	O	O:0.998023
dataframe	B-API	O:0.987570
:	O	O:0.999875
#CODE	O	O:0.999864
	
You	O	O:0.999902
apply	O	O:0.622102
the	O	O:0.999193
function	O	O:0.998667
`	O	O:0.999992
fill_seq	O	O:0.985203
`	O	O:0.999996
to	O	O:0.999985
the	O	O:0.999999
H	O	O:0.999860
/	O	O:0.999937
K	O	O:0.999961
sequence	O	O:0.999991
columns	O	O:0.999917
using	O	O:0.999991
the	O	O:0.999972
values	O	O:0.999442
from	O	O:0.999776
H	O	O:0.999966
/	O	O:0.999971
K	O	O:0.999890
sequence	O	O:0.999951
as	O	O:0.999981
input	O	O:0.999658
.	O	O:0.999882
	
You	O	O:0.999844
can	O	O:0.999956
call	O	O:0.999831
`	O	O:0.999998
apply	O	B-API:0.990852
`	O	O:0.999974
on	O	O:0.999917
the	O	O:0.999997
df	O	O:0.999966
pass	O	O:0.996019
`	O	O:0.999984
axis=1	O	O:0.996735
`	O	O:0.999994
to	O	O:0.999937
apply	O	O:0.983615
row-wise	O	O:0.992897
and	O	O:0.999916
use	O	O:0.999970
the	O	O:0.999905
column	O	O:0.999891
values	O	O:0.999894
to	O	O:0.999993
slice	O	O:0.999990
the	O	O:0.999940
str	O	O:0.982952
:	O	O:0.999955
#CODE	O	O:0.999830
	
How	O	O:0.999898
to	O	O:0.999991
apply	O	O:0.992549
a	O	O:0.999896
function	O	O:0.999252
on	O	O:0.999998
every	O	O:0.999939
row	O	O:0.999990
on	O	O:0.999992
a	O	O:0.999996
dataframe	B-API	O:0.994577
?	O	O:0.999952
	
And	O	O:0.999876
`	O	O:0.999974
ch	O	O:0.968555
`	O	O:0.999988
and	O	O:0.999667
`	O	O:0.999997
ck	O	O:0.981174
`	O	O:0.999987
are	O	O:0.999943
float	O	O:0.999556
types	O	O:0.997211
.	O	O:0.999803
	
Now	O	O:0.999895
I	O	O:0.999998
want	O	O:0.999988
to	O	O:0.999937
apply	O	O:0.978083
the	O	O:0.999836
formula	O	O:0.999301
to	O	O:0.999999
every	O	O:0.999997
row	O	O:0.999971
on	O	O:0.999971
the	O	O:0.999988
dataframe	B-API	O:0.994440
and	O	O:0.999975
return	O	O:0.999694
it	O	O:0.999969
as	O	O:0.999996
an	O	O:0.999997
extra	O	O:0.999656
row	O	O:0.999825
'	O	O:0.999930
Q	O	O:0.999800
'	O	O:0.999929
.	O	O:0.999810
	
An	O	O:0.999846
example	O	O:0.997139
(	O	O:0.999994
that	O	O:0.999927
does	O	O:0.999921
not	O	O:0.999998
work	O	O:0.999978
)	O	O:0.999994
would	O	O:0.999878
be	O	O:0.999954
:	O	O:0.999990
#CODE	O	O:0.999483
	
Here	O	O:0.999544
you	O	O:0.999952
will	O	O:0.999976
find	O	O:0.999953
arrays	O	O:0.999886
and	O	O:0.999989
methods	O	O:0.999892
that	O	O:0.999330
are	O	O:0.999998
much	O	O:0.999727
faster	O	O:0.999690
than	O	O:0.998756
built-in	O	O:0.998094
list	O	O:0.997190
.	O	O:0.999784
	
For	O	O:0.999909
example	O	O:0.999871
instead	O	O:0.999982
of	O	O:0.999996
looping	O	O:0.999625
trough	O	O:0.999916
every	O	O:0.999681
element	O	O:0.999797
in	O	O:0.999994
a	O	O:0.999996
numpy	O	O:0.999773
array	O	O:0.999963
to	O	O:0.999988
do	O	O:0.999999
some	O	O:0.999978
processing	O	O:0.999828
you	O	O:0.999968
can	O	O:0.999995
apply	O	O:0.996285
a	O	O:0.999993
numpy	O	O:0.998275
function	O	O:0.999986
directly	O	O:0.999759
on	O	O:0.999985
the	O	O:0.999973
array	O	O:0.999945
and	O	O:0.999989
get	O	O:0.999995
the	O	O:0.999978
results	O	O:0.999919
in	O	O:0.999994
seconds	O	O:0.999804
rather	O	O:0.999982
than	O	O:0.999890
hours	O	O:0.999838
.	O	O:0.999996
as	O	O:0.999997
an	O	O:0.999932
example	O	O:0.998135
:	O	O:0.999946
#CODE	O	O:0.999859
	
the	O	O:0.999911
`	O	O:0.999972
f	O	O:0.998668
`	O	O:0.999978
function	O	O:0.998548
is	O	O:0.999997
more	O	O:0.999469
complicated	O	O:0.999804
that	O	O:0.999990
this	O	O:0.999990
one	O	O:0.999999
,	O	O:0.999998
of	O	O:0.999995
course	O	O:0.999661
,	O	O:0.999998
and	O	O:0.999989
I	O	O:0.999996
want	O	O:0.999942
to	O	O:0.999964
apply	O	O:0.988096
a	O	O:0.999986
sequence	O	O:0.999918
of	O	O:0.999994
functions	O	O:0.999944
to	O	O:0.999994
transform	O	O:0.994486
the	O	O:0.999991
data	O	O:0.999948
frame	O	O:0.999991
.	O	O:0.999958
	
There	O	O:0.999761
are	O	O:0.999991
basically	O	O:0.999983
string	O	O:0.999965
parsers	O	O:0.999268
to	O	O:0.999993
normalize	O	O:0.989293
,	O	O:0.999997
transform	O	O:0.857757
to	O	O:0.999988
unicode	O	O:0.999983
,	O	O:0.999994
remove	O	O:0.999515
characters	O	O:0.999876
,	O	O:0.999997
split	O	O:0.999540
into	O	O:0.999821
components	O	O:0.999897
,	O	O:0.999992
etc	O	O:0.999986
,	O	O:0.999998
so	O	O:0.999997
so	O	O:0.999994
far	O	O:0.999982
I	O	O:0.999996
can	O	O:0.999988
t	B-API	O:0.996612
see	O	O:0.999997
a	O	O:0.999994
way	O	O:0.999898
to	O	O:0.999979
do	O	O:0.999998
it	O	O:0.999993
without	O	O:0.999696
`	O	O:0.999977
applymap	B-API	B-API:0.999194
`	O	O:0.999958
.	O	O:0.998721
	
Can	O	O:0.999656
you	O	O:0.999974
give	O	O:0.999965
more	O	O:0.999939
insight	O	O:0.999541
in	O	O:0.999994
what	O	O:0.999908
you	O	O:0.999996
want	O	O:0.999989
to	O	O:0.999992
apply	O	O:0.964001
?	O	O:0.999794
	
(	O	O:0.999947
the	O	O:0.999988
simple	O	O:0.999738
example	O	O:0.999840
you	O	O:0.999995
give	O	O:0.999986
can	O	O:0.999995
of	O	O:1.000000
course	O	O:0.999968
easily	O	O:0.999984
be	O	O:0.999994
done	O	O:0.999860
without	O	O:0.999039
`	O	O:0.999945
applymap	B-API	B-API:0.998962
`	O	O:0.999947
,	O	O:0.999851
but	O	O:0.999995
maybe	O	O:0.999983
your	O	O:0.999984
real	O	O:0.996711
function	O	O:0.999980
as	O	O:0.999987
well	O	O:0.999817
?	O	O:0.999990
)	O	O:0.999915
	
Length	O	O:0.999567
of	O	O:0.999977
the	O	O:0.999934
code	O	O:0.999557
.	O	O:0.999904
	
As	O	O:0.999877
it	O	O:0.999968
stands	O	O:0.999931
,	O	O:0.999997
one	O	O:0.999971
would	O	O:0.999988
need	O	O:0.999995
to	O	O:1.000000
keep	O	O:0.999992
adding	O	O:0.999534
`	O	O:0.999906
&	O	O:0.999345
`	O	O:0.999994
in	O	O:0.999974
order	O	O:0.999968
to	O	O:0.999983
add	O	O:0.999998
more	O	O:0.999912
columns	O	O:0.999555
.	O	O:0.999939
	
It	O	O:0.999892
would	O	O:0.999941
be	O	O:0.999995
better	O	O:0.999944
if	O	O:0.999963
it	O	O:0.999988
could	O	O:0.999975
be	O	O:0.999998
wrapped	O	O:0.999968
into	O	O:0.998298
,	O	O:0.999995
say	O	O:0.999909
,	O	O:0.999996
a	O	O:0.999996
list	O	O:0.991021
comprehension	O	O:0.998954
(	O	O:0.999995
or	O	O:0.999994
apply	O	B-API:0.678617
function	O	O:0.999717
)	O	O:0.999982
since	O	O:0.999958
each	O	O:0.999869
column	O	O:0.999858
is	O	O:0.999982
independent	O	O:0.997025
	
Python	O	O:0.999369
pandas	O	O:0.999343
groupby	B-API	B-API:0.952103
object	O	O:0.996946
apply	O	B-API:0.948846
method	O	O:0.998585
adds	O	O:0.997477
index	O	O:0.999758
	
I	O	O:0.999976
have	O	O:0.999991
this	O	O:0.999784
question	O	O:0.999807
is	O	O:0.999993
an	O	O:0.999984
extension	O	O:0.999848
after	O	O:0.999959
reading	O	O:0.999367
the	O	O:0.999652
"	O	O:0.999920
Python	O	O:0.999507
pandas	O	O:0.999602
groupby	B-API	B-API:0.943117
object	O	O:0.997264
apply	O	B-API:0.724137
method	O	O:0.999891
duplicates	O	O:0.998977
first	O	O:0.999952
group	O	O:0.997387
"	O	O:0.999928
.	O	O:0.999526
	
Actually	O	O:0.999872
,	O	O:0.999992
I	O	O:0.999999
have	O	O:0.999997
data	O	O:0.999774
for	O	O:0.999997
several	O	O:0.999858
days	O	O:0.998816
,	O	O:0.999985
and	O	O:0.999993
interpolate	O	O:0.932729
one	O	O:0.999960
by	O	O:0.999987
one	O	O:0.999944
is	O	O:0.999995
a	O	O:0.999988
dificult	O	O:0.996252
option	O	O:0.999619
.	O	O:0.999828
	
Maybe	O	O:0.999913
using	O	O:0.999815
`	O	O:0.999900
apply	O	B-API:0.998721
`	O	O:0.999902
but	O	O:0.999329
I	O	O:0.999997
dont	O	O:0.999970
know	O	O:0.998748
how	O	O:0.999951
.	O	O:0.999835
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999992
`	O	O:0.999981
apply	O	B-API:0.967885
`	O	O:0.999973
on	O	O:0.999867
the	O	O:0.999998
column	O	O:0.999969
to	O	O:0.999998
generate	O	O:0.999996
a	O	O:0.999996
boolean	O	O:0.999178
mask	O	O:0.980079
describing	O	O:0.999848
the	O	O:0.999984
desired	O	O:0.999840
columns	O	O:0.999743
,	O	O:0.999994
and	O	O:1.000000
then	O	O:0.999819
filter	O	O:0.998455
the	O	O:0.999995
DataFrame	B-API	O:0.998158
by	O	O:0.999986
this	O	O:0.999800
mask	O	B-API:0.503995
:	O	O:0.999960
#CODE	O	O:0.999896
	
What	O	O:0.999495
I've	O	O:0.999691
got	O	O:0.999970
so	O	O:0.999965
far	O	O:0.999577
is	O	O:0.999997
printing	O	O:0.998530
out	O	O:0.999960
the	O	O:0.999974
correct	O	O:0.999878
expanded	O	O:0.999977
dataframes	O	O:0.999873
for	O	O:0.999996
each	O	O:0.999492
row	O	O:0.999385
,	O	O:0.999988
but	O	O:0.999976
I	O	O:0.999986
don't	O	O:0.999987
know	O	O:0.999768
how	O	O:0.999995
to	O	O:0.999993
consolidate	O	O:0.997339
the	O	O:0.999997
results	O	O:0.999979
of	O	O:0.999970
apply	O	B-API:0.946885
:	O	O:0.999867
#CODE	O	O:0.999159
	
You	O	O:0.999869
could	O	O:0.999968
,	O	O:1.000000
of	O	O:0.999998
course	O	O:0.999872
,	O	O:0.999999
do	O	O:0.999945
all	O	O:0.999992
this	O	O:0.999948
within	O	O:0.999970
a	O	O:0.999947
function	O	O:0.999914
that	O	O:0.999961
you	O	O:0.999998
apply	O	O:0.942975
on	O	O:0.999993
a	O	O:0.999963
`	O	O:0.999951
groupby	B-API	B-API:0.999532
`	O	O:0.999937
,	O	O:0.999452
but	O	O:0.999987
it	O	O:0.999962
would	O	O:0.999983
be	O	O:0.999999
superfluous	O	O:0.999754
in	O	O:0.999989
this	O	O:0.999939
case	O	O:0.999880
.	O	O:0.999959
	
python	O	O:0.999028
pandas	O	O:0.999686
nested	O	O:0.998362
loop	O	O:0.998710
:	O	O:0.999985
to	O	O:0.999998
apply	O	O:0.996789
a	O	O:0.999888
function	O	O:0.999490
to	O	O:0.999995
each	O	O:0.999996
element	O	O:0.999951
of	O	O:0.999992
e.g.	O	O:0.999945
column	O	O:0.999866
2	O	O:0.999915
involving	O	O:0.999869
compounding	O	O:0.999331
same	O	O:0.999961
elements	O	O:0.999517
in	O	O:0.999993
previous	O	O:0.999977
column	O	O:0.999912
1s	O	O:0.999913
	
In	O	O:0.999922
fact	O	O:0.999590
,	O	O:0.999989
it	O	O:0.999984
seems	O	O:0.999974
to	O	O:0.999997
me	O	O:0.999998
,	O	O:0.999998
that	O	O:0.999979
one	O	O:0.999998
could	O	O:0.999989
apply	O	O:0.992103
a	O	O:0.999818
similar	O	O:0.997134
method	O	O:0.999991
to	O	O:0.999972
calculations	O	O:0.999992
involving	O	O:0.999762
n	O	O:0.999835
nested	O	O:0.999229
loops	O	O:0.999221
.	O	O:0.999725
	
As	O	O:0.999992
long	O	O:0.999907
as	O	O:0.999989
one	O	O:0.999862
has	O	O:0.999971
pre-calculated	O	O:0.999980
each	O	O:0.999733
of	O	O:0.999996
the	O	O:0.999972
n	O	O:0.999959
loops	O	O:0.999690
,	O	O:0.999981
and	O	O:0.999995
ordered	O	O:0.999991
them	O	O:0.999790
using	O	O:0.999982
sort	O	O:0.991888
,	O	O:0.999991
one	O	O:0.999987
can	O	O:0.999973
apply	O	O:0.997526
a	O	O:0.999968
function	O	O:0.999206
to	O	O:0.999999
the	O	O:1.000000
result	O	O:0.999980
by	O	O:0.999992
using	O	O:0.999960
groupby	B-API	B-API:0.997561
on	O	O:0.999891
the	O	O:0.999936
nth	O	O:0.999961
bin	O	O:0.999699
directly	O	O:0.999705
.	O	O:0.999859
	
In	O	O:0.999968
the	O	O:0.999993
problem	O	O:0.999885
above	O	O:0.999829
,	O	O:0.999994
the	O	O:0.999980
loop	O	O:0.998819
was	O	O:0.999966
a	O	O:0.999995
2-variable	O	O:0.998322
nested	O	O:0.999539
loop	O	O:0.999802
,	O	O:0.999990
with	O	O:0.999888
bin	O	O:0.999930
being	O	O:0.999952
at	O	O:0.999995
level	O	O:0.998649
1	O	O:0.999888
,	O	O:0.999948
and	O	O:0.999985
port	O	O:0.999783
being	O	O:0.999661
at	O	O:0.999997
level	O	O:0.997389
0	O	O:0.999808
.	O	O:0.999714
	
This	O	O:0.999738
may	O	O:0.999985
relate	O	O:0.999823
to	O	O:0.999969
indexing	O	O:0.999969
?	O	O:0.999921
	
I	O	O:0.999974
feel	O	O:0.999937
like	O	O:0.999182
`	O	O:0.999995
df.pct_change()	B-API	B-API:0.991166
`	O	O:0.999983
would	O	O:0.999834
be	O	O:0.999998
helpful	O	O:0.999583
,	O	O:0.999968
but	O	O:0.999950
I	O	O:0.999983
can't	O	O:0.999979
figure	O	O:0.999577
out	O	O:0.999961
how	O	O:0.999975
to	O	O:0.999992
apply	O	O:0.991748
it	O	O:0.999899
in	O	O:0.999984
the	O	O:0.999983
way	O	O:0.999767
I'm	O	O:0.999972
trying	O	O:0.999936
to	O	O:0.999989
describe	O	O:0.999884
.	O	O:0.999891
	
or	O	O:0.999970
apply	O	O:0.561519
the	O	O:0.999962
patch	O	O:0.998317
in	O	O:0.999971
the	O	O:0.999995
pandas	O	O:0.999896
code	O	O:0.999324
(	O	O:0.999991
see	O	O:0.999979
the	O	O:0.999991
link	O	O:0.999822
above	O	O:0.999806
,	O	O:0.999993
it's	O	O:0.999977
only	O	O:0.999986
a	O	O:0.999999
one	O	O:0.999976
line	O	O:0.999968
change	O	O:0.999103
)	O	O:0.999958
	
I	O	O:0.999989
have	O	O:0.999983
seen	O	O:0.999401
here	O	O:0.999992
a	O	O:0.999997
similar	O	O:0.999684
question	O	O:0.999816
for	O	O:0.999975
scatterplots	O	O:0.997076
,	O	O:0.999891
but	O	O:0.999966
it	O	O:0.999955
doesn't	O	O:0.999979
seem	O	O:0.999961
I	O	O:0.999998
can	O	O:0.999994
apply	O	O:0.847468
the	O	O:0.999989
same	O	O:0.999719
solution	O	O:0.999911
to	O	O:0.999999
a	O	O:1.000000
time	O	O:0.999741
series	O	O:0.999975
line	O	O:0.999824
chart	O	O:0.999843
.	O	O:0.999915
	
Pandas	O	O:0.998265
/	O	O:0.999923
Scikit	O	O:0.997625
-	O	O:0.999971
Apply	O	O:0.999807
sparse	O	O:0.999126
PCA	B-API	O:0.916544
while	O	O:0.999934
creating	O	O:0.999611
feature	O	O:0.999902
vectors	O	O:0.998215
	
I	O	O:0.999955
am	O	O:0.999997
planning	O	O:0.999131
to	O	O:0.999996
generate	O	O:0.999991
a	O	O:0.999998
huge	O	O:0.999125
sparse	O	O:0.999839
matrix	O	O:0.999718
of	O	O:0.999991
70000	O	O:0.999954
rows	O	O:0.999294
and	O	O:0.999981
150000	O	O:0.999979
columns	O	O:0.999574
using	O	O:0.999935
Pandas	O	O:0.998274
get_dummies()	B-API	B-API:0.999478
,	O	O:0.999980
however	O	O:0.999949
I	O	O:0.999995
get	O	O:0.999998
a	O	O:0.999963
MemoryError	O	O:0.961022
.	O	O:0.999772
	
How	O	O:0.999914
do	O	O:0.999943
I	O	O:0.999995
apply	O	O:0.763755
PCA	B-API	B-API:0.624071
on	O	O:0.999973
this	O	O:0.999869
sparse	O	O:0.999914
matrix	O	O:0.999861
to	O	O:0.999982
reduce	O	O:0.999967
dimensionality	O	O:0.999725
?	O	O:0.999914
	
How	O	O:0.999897
can	O	O:0.999948
I	O	O:0.999999
do	O	O:0.999999
this	O	O:0.999826
without	O	O:0.999785
using	O	O:0.999059
groupby	B-API	B-API:0.999389
and	O	O:0.999903
apply	O	B-API:0.964656
function	O	O:0.993590
?	O	O:0.999695
	
Because	O	O:0.999851
I	O	O:0.999997
need	O	O:0.999996
a	O	O:0.999981
good	O	O:0.999527
performance	O	O:0.999844
in	O	O:0.999919
computation	O	O:0.999614
.	O	O:0.999941
	
The	O	O:0.999955
normal	O	O:0.998994
op	O	O:0.999993
here	O	O:0.999146
is	O	O:0.999993
to	O	O:0.999946
`	O	O:0.999999
groupby	B-API	B-API:0.998421
`	O	O:0.999994
on	O	O:0.998966
'	O	O:0.999994
item	O	O:0.999637
'	O	O:0.999941
and	O	O:0.999996
call	O	O:0.998136
`	O	O:0.999981
sum	O	O:0.973035
`	O	O:0.999997
on	O	O:0.999967
the	O	O:0.999975
'	O	O:0.999982
grade	O	O:0.997999
'	O	O:0.999990
column	O	O:0.999945
no	O	O:0.999997
need	O	O:0.999948
to	O	O:0.999996
call	O	O:0.999942
`	O	O:0.999994
apply	O	B-API:0.996056
`	O	O:0.999965
here	O	O:0.985979
	
Note	O	O:0.999962
that	O	O:0.999967
if	O	O:0.999999
you	O	O:0.999998
have	O	O:0.999984
to	O	O:0.999998
perform	O	O:0.999958
`	O	O:0.999995
urljoin	O	O:0.992987
`	O	O:1.000000
then	O	O:0.999796
using	O	O:0.999997
`	O	O:0.999882
map	O	B-API:0.996649
`	O	O:0.999990
or	O	O:0.999723
`	O	O:0.999994
apply	O	B-API:0.960785
`	O	O:0.999911
would	O	O:0.999337
be	O	O:0.999999
fine	O	O:0.999961
here	O	O:0.998781
	
For	O	O:0.999947
pure	O	O:0.999258
string	O	O:0.999701
concatenation	O	O:0.999076
,	O	O:0.999999
this	O	O:0.999953
will	O	O:0.999921
be	O	O:0.999998
vectorised	O	O:0.999949
,	O	O:0.999989
using	O	O:0.999866
`	O	O:0.999524
map	O	B-API:0.999063
`	O	O:0.999971
and	O	O:0.999684
`	O	O:0.999995
apply	O	B-API:0.997362
`	O	O:0.999987
this	O	O:0.993474
is	O	O:0.999999
just	O	O:0.999928
a	O	O:0.999998
`	O	O:0.999906
for	O	O:0.999394
`	O	O:0.999993
loop	O	O:0.998103
so	O	O:0.999999
this	O	O:0.999913
approach	O	O:0.999971
will	O	O:0.999828
be	O	O:0.999997
much	O	O:0.999907
faster	O	O:0.999272
for	O	O:0.999986
large	O	O:0.998143
datasets	O	O:0.996375
	
In	O	O:0.999884
`	O	O:0.999982
R	O	O:0.996988
`	O	O:0.999996
,	O	O:0.999971
can	O	O:0.999975
use	O	O:0.999987
`	O	O:0.999981
na.aggregate	O	O:0.936669
/	O	O:0.999995
data.table	O	O:0.980080
`	O	O:0.999991
to	O	O:0.999959
replace	O	O:0.999931
the	O	O:0.999981
`	O	O:0.999974
NA	O	O:0.992592
`	O	O:0.999998
by	O	O:0.998807
`	O	O:0.999998
mean	O	O:0.993238
`	O	O:1.000000
value	O	O:0.999896
of	O	O:0.999993
the	O	O:0.999967
group	O	O:0.995978
.	O	O:0.999850
	
We	O	O:0.999960
convert	O	O:0.997302
the	O	O:0.999931
'	O	O:0.999952
data.frame	O	O:0.999856
'	O	O:0.999981
to	O	O:0.999975
'	O	O:0.999999
data.table	O	O:0.964656
'	O	O:0.999804
(	O	O:0.999967
`	O	O:0.999992
setDT	O	O:0.992044
(	O	O:0.999996
df	O	O:0.999925
)`)	O	O:0.999359
,	O	O:0.999988
grouped	O	O:0.999878
by	O	O:0.999922
'	O	O:0.999878
A	O	O:0.999938
'	O	O:0.999983
,	O	O:0.999992
apply	O	O:0.612919
the	O	O:0.999449
`	O	O:0.999935
na.aggregate	O	O:0.947607
`	O	O:0.999998
on	O	O:0.999944
'	O	O:0.999988
B	O	O:0.999869
'	O	O:0.999920
.	O	O:0.999824
	
#CODE	O	O:0.998453
	
However	O	O:0.999825
I	O	O:0.999983
am	O	O:0.999998
wondering	O	O:0.998974
if	O	O:0.999993
there	O	O:0.999827
is	O	O:0.999998
a	O	O:0.999992
way	O	O:0.999894
I	O	O:0.999988
can	O	O:0.999976
write	O	O:0.999965
my	O	O:0.999803
function	O	O:0.999841
and	O	O:0.999990
apply	O	O:0.726060
it	O	O:0.999712
to	O	O:0.999972
my	O	O:0.999998
grouped	O	O:0.999568
object	O	O:0.999974
such	O	O:0.999975
that	O	O:0.999986
I	O	O:0.999996
can	O	O:0.999998
specify	O	O:0.999898
when	O	O:0.999916
applying	O	O:0.999837
it	O	O:0.999989
,	O	O:0.999986
which	O	O:0.999987
column	O	O:0.999899
I	O	O:0.999999
want	O	O:0.999993
to	O	O:0.999960
calculate	O	O:0.999942
for	O	O:0.999982
(	O	O:0.999934
or	O	O:0.999995
both	O	O:0.999696
)	O	O:0.999984
.	O	O:0.999765
	
Rather	O	O:0.999905
than	O	O:0.999924
have	O	O:0.999781
'	O	O:0.999994
var1	O	O:0.999669
'	O	O:0.999976
written	O	O:0.999718
into	O	O:0.999853
my	O	O:0.999863
function	O	O:0.999734
,	O	O:0.999993
I'd	O	O:0.999998
like	O	O:0.999963
to	O	O:0.999997
be	O	O:1.000000
able	O	O:0.999991
to	O	O:0.999998
specify	O	O:0.999990
when	O	O:0.999869
applying	O	O:0.999937
the	O	O:0.999829
function	O	O:0.999290
.	O	O:0.999804
	
You	O	O:0.999853
can	O	O:0.999925
apply	O	O:0.718026
and	O	O:0.999924
return	O	O:0.999019
both	O	O:0.997865
averages	O	O:0.991592
:	O	O:0.999896
#CODE	O	O:0.999881
	
Pandas	O	O:0.999024
dataframe	B-API	O:0.981908
:	O	O:0.999970
how	O	O:0.999992
to	O	O:0.999998
apply	O	O:0.982990
describe()	B-API	B-API:0.548680
to	O	O:0.999952
each	O	O:0.999983
group	O	O:0.998210
and	O	O:0.999997
add	O	O:0.999933
to	O	O:0.999978
new	O	O:0.999995
columns	O	O:0.999722
?	O	O:0.999966
	
Probably	O	O:0.999950
a	O	O:0.999992
convoluted	O	O:0.999477
way	O	O:0.999987
of	O	O:0.999983
doing	O	O:0.999655
it	O	O:0.999932
,	O	O:0.999907
but	O	O:0.999960
You	O	O:0.999962
could	O	O:0.999893
`	O	O:0.999996
groupby	B-API	B-API:0.999193
`	O	O:0.999972
ID1	O	O:0.993709
and	O	O:0.999989
ID2	O	O:0.999697
;	O	O:0.999982
then	O	O:0.999488
*	O	O:1.000000
iterate	O	O:0.999961
over	O	O:0.999877
the	O	O:0.999979
groups	O	O:0.997373
*	O	O:0.999980
zipping	O	O:0.998580
(	O	O:0.999952
use	O	O:0.999895
`	O	O:0.999919
zip	O	O:0.986900
`)	O	O:0.999967
`	O	O:0.999922
x	O	O:0.996649
`	O	O:0.999985
and	O	O:0.999888
`	O	O:0.999997
y	O	O:0.994725
`	O	O:0.999997
into	O	O:0.999496
a	O	O:0.999995
`	O	O:0.999890
xy	O	O:0.998312
`	O	O:0.999997
column	O	O:0.999914
where	O	O:0.999985
values	O	O:0.999654
are	O	O:0.999978
points	O	O:0.997876
(	O	O:0.999979
x	O	O:0.999937
,	O	O:0.999995
y	O	O:0.999932
)	O	O:0.999959
.	O	O:0.999813
	
Then	O	O:0.999284
,	O	O:0.999999
shifting	O	O:0.999951
this	O	O:0.999702
`	O	O:0.999997
xy	O	O:0.999158
`	O	O:0.999998
column	O	O:0.999928
by	O	O:0.999980
1	O	O:0.999670
(	O	O:0.999931
use	O	O:0.999911
`	O	O:0.999967
shift	O	B-API:0.946352
`)	O	O:0.999989
,	O	O:0.999991
get	O	O:0.999994
a	O	O:0.999998
new	O	O:0.999934
column	O	O:0.999791
`	O	O:0.999991
xyshift	O	O:0.916175
`	O	O:0.999986
.	O	O:0.999528
	
Then	O	O:0.999780
apply	O	O:0.953936
a	O	O:0.999990
difference	O	O:0.996627
function	O	O:0.999862
in	O	O:0.999989
the	O	O:0.999995
row-axis	O	O:0.995327
in	O	O:0.999995
this	O	O:0.999946
`	O	O:0.999998
xyshift	O	O:0.953306
`	O	O:0.999997
column	O	O:0.998962
;	O	O:0.999993
and	O	O:0.999979
finally	O	O:0.999924
merge	O	B-API:0.580362
it	O	O:0.999945
iteratively	O	O:0.999833
into	O	O:0.999933
your	O	O:0.999954
dataframe	B-API	O:0.996893
or	O	O:0.999998
compose	O	O:0.999884
a	O	O:0.999997
new	O	O:0.999514
one	O	O:0.999908
	
Here's	O	O:0.999910
a	O	O:0.999980
solution	O	O:0.999579
with	O	O:0.999847
apply	O	B-API:0.849266
#CODE	O	O:0.998186
	
Use	O	O:0.999842
the	O	O:0.999964
vectorised	O	O:0.998752
`	O	O:0.999934
str.split	B-API	B-API:0.998329
`	O	O:0.999998
this	O	O:0.999698
will	O	O:0.999974
be	O	O:0.999998
much	O	O:0.999813
faster	O	O:0.999849
than	O	O:0.999882
using	O	O:0.999785
`	O	O:0.999930
apply	O	B-API:0.991292
`	O	O:0.999975
on	O	O:0.999921
a	O	O:0.999999
large	O	O:0.997213
dataset	O	O:0.997178
:	O	O:0.999895
#CODE	O	O:0.999860
	
To	O	O:0.999963
extract	O	O:0.999450
just	O	O:0.999957
the	O	O:0.999996
month-year	O	O:0.999764
piece	O	O:0.999943
from	O	O:0.999978
the	O	O:0.999996
resulting	O	O:0.999884
list	O	O:0.999668
created	O	O:0.999911
by	O	O:0.999990
the	O	O:0.999987
split	O	O:0.979452
,	O	O:0.999994
apply	O	O:0.530720
`	O	O:0.999745
map	O	B-API:0.998258
`	O	O:0.999987
and	O	O:0.999989
a	O	O:0.999999
lambda	O	O:0.995165
to	O	O:0.999995
the	O	O:0.999990
result	O	O:0.998476
:	O	O:0.999963
#CODE	O	O:0.999909
	
Or	O	O:0.999948
as	O	O:0.999938
@USER	O	O:0.999495
suggests	O	O:0.999765
apply	O	B-API:0.737007
`	O	O:0.999786
str	O	O:0.979132
`	O	O:0.999995
again	O	O:0.999824
instead	O	O:0.999994
of	O	O:0.999989
the	O	O:0.999935
map-lambda	O	O:0.992049
:	O	O:0.999926
#CODE	O	O:0.999867
	
More	O	O:0.999731
generally	O	O:0.999465
,	O	O:0.999994
it	O	O:0.999933
is	O	O:0.999998
a	O	O:0.999998
case	O	O:0.999930
of	O	O:0.999984
`	O	O:0.999979
rolling	O	O:0.937600
`	O	O:0.999982
apply	O	B-API:0.909460
,	O	O:0.999844
`	O	O:0.999962
min_periods	O	O:0.644163
`	O	O:0.999992
control	O	O:0.989299
the	O	O:0.999992
minimal	O	O:0.920175
window	O	O:0.999913
that	O	O:0.999931
will	O	O:0.999988
be	O	O:0.999999
considered	O	O:0.999958
as	O	O:0.999980
valid	O	O:0.997260
.	O	O:0.999736
	
Skipping	O	O:0.999123
it	O	O:0.999800
in	O	O:0.999994
this	O	O:0.999968
case	O	O:0.999995
will	O	O:0.999974
result	O	O:0.999952
in	O	O:0.999992
having	O	O:0.999549
`	O	O:0.999984
nan	O	O:0.972936
`	O	O:0.999996
for	O	O:0.999937
the	O	O:0.999988
1st	O	O:0.999068
cell	O	O:0.995653
:	O	O:0.999971
#CODE	O	O:0.999886
	
When	O	O:0.999767
you	O	O:0.999987
do	O	O:0.999996
the	O	O:0.999995
apply	O	B-API:0.876538
,	O	O:0.999908
it's	O	O:0.999702
across	O	O:0.999979
each	O	O:0.999441
row	O	O:0.999673
(	O	O:0.999975
which	O	O:0.999875
is	O	O:0.999992
a	O	O:0.999988
Series	O	O:0.998279
)	O	O:0.999953
.	O	O:0.999775
	
I'm	O	O:0.999922
guessing	O	O:0.999925
the	O	O:0.999982
slow	O	O:0.999413
part	O	O:0.999284
is	O	O:0.999996
the	O	O:0.999970
apply	O	B-API:0.874665
(	O	O:0.999800
rather	O	O:0.999882
than	O	O:0.999948
the	O	O:0.999996
split	O	O:0.997982
,	O	O:0.999992
or	O	O:0.999998
the	O	O:0.999994
stack	O	B-API:0.606622
)	O	O:0.999984
?	O	O:0.999936
	
@USER	O	O:0.999005
how	O	O:0.999891
would	O	O:0.999978
you	O	O:0.999997
apply	O	O:0.969448
the	O	O:0.999970
answer	O	O:0.998945
in	O	O:0.999996
your	O	O:0.999919
link	O	O:0.999899
to	O	O:0.999998
my	O	O:0.999998
question	O	O:0.999616
?	O	O:0.999973
	
This	O	O:0.999087
is	O	O:0.999992
my	O	O:0.999986
first	O	O:0.999827
question	O	O:0.999884
,	O	O:0.999984
I	O	O:0.999967
wouldn't	O	O:0.999974
mind	O	O:0.999830
if	O	O:0.999996
you	O	O:0.999989
undid	O	O:0.999978
your	O	O:0.999975
down	O	O:0.999480
vote	O	O:0.999755
.	O	O:0.999895
	
You	O	O:0.999892
can	O	O:0.999936
do	O	O:0.999997
that	O	O:0.999967
but	O	O:0.999994
to	O	O:0.999995
me	O	O:0.999999
this	O	O:0.999897
defeats	O	O:0.999957
the	O	O:0.999996
whole	O	O:0.999926
point	O	O:0.999965
of	O	O:0.999993
using	O	O:0.999974
pandas	O	O:0.998538
which	O	O:0.999377
provides	O	O:0.999561
vectorised	O	O:0.999856
methods	O	O:0.999734
,	O	O:0.999984
if	O	O:0.999979
you're	O	O:0.999968
going	O	O:0.999815
to	O	O:0.999994
do	O	O:0.999999
that	O	O:0.999995
then	O	O:0.999936
use	O	O:0.999998
`	O	O:0.999975
apply	O	B-API:0.986745
`	O	O:0.999967
to	O	O:0.999927
process	O	O:0.999992
an	O	O:0.999975
element	O	O:0.999765
	
Tried	O	O:0.999793
so	O	O:0.999906
far	O	O:0.998908
:	O	O:0.999983
Re-indexing	O	O:0.999629
to	O	O:0.999986
Date_time	O	O:0.999625
and	O	O:0.999988
df2.update	O	O:0.997755
(	O	O:0.999984
df	O	O:0.999864
)	O	O:0.999989
with	O	O:0.999895
variations	O	O:0.999609
,	O	O:0.999996
multiple	O	O:0.999963
merging	O	O:0.999325
/	O	O:0.999976
join	O	B-API:0.901338
/	O	O:0.999942
concat	O	B-API:0.753983
variations	O	O:0.999789
,	O	O:0.999996
an	O	O:0.999990
adapted	O	O:0.999414
definition	O	O:0.999339
(	O	O:0.999988
below	O	O:0.999744
)	O	O:0.999993
with	O	O:0.999239
apply	O	B-API:0.672015
...	O	O:0.998945
and	O	O:0.999927
now	O	O:0.999972
wondering	O	O:0.999746
if	O	O:0.999984
I	O	O:0.999998
need	O	O:0.999990
to	O	O:0.999973
use	O	O:0.999990
iterrows	B-API	B-API:0.998290
(	O	O:0.999971
see	O	O:0.999911
below	O	O:0.999758
?	O	O:0.999985
)	O	O:0.999946
.	O	O:0.999850
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.994811
a	O	O:0.999894
function	O	O:0.999838
to	O	O:1.000000
rows	O	O:0.999992
of	O	O:0.999987
two	O	O:0.999979
pandas	O	O:0.999945
DataFrame	B-API	O:0.993412
	
There	O	O:0.999562
are	O	O:0.999978
two	O	O:0.999971
pandas	O	O:0.999884
DataFrame	B-API	O:0.997295
,	O	O:0.999993
say	O	O:0.999924
`	O	O:0.999989
dfx	O	O:0.996527
,	O	O:0.999999
dfy	O	O:0.999901
`	O	O:0.999992
of	O	O:0.999956
the	O	O:0.999994
same	O	O:0.999953
shape	O	O:0.999770
and	O	O:0.999997
exactly	O	O:0.999974
the	O	O:0.999978
same	O	O:0.999901
column	O	O:0.999747
and	O	O:0.999996
row	O	O:0.999952
indices	O	O:0.994922
.	O	O:0.999841
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.997156
a	O	O:0.999897
function	O	O:0.999389
to	O	O:0.999995
the	O	O:1.000000
corresponding	O	O:0.999982
rows	O	O:0.999745
of	O	O:0.999987
these	O	O:0.999936
two	O	O:0.999971
DataFrame	B-API	O:0.991639
.	O	O:0.999815
	
By	O	O:0.999961
the	O	O:0.999977
following	O	O:0.999808
code	O	O:0.999804
,	O	O:0.999996
I	O	O:0.999999
make	O	O:0.999977
a	O	O:0.999950
grouped	O	O:0.997901
two-level	O	O:0.999049
indexed	O	O:0.999405
DataFrame	B-API	O:0.984753
.	O	O:0.999770
	
Then	O	O:0.999639
I	O	O:0.999994
do	O	O:0.999992
not	O	O:0.999950
know	O	O:0.999871
how	O	O:0.999987
to	O	O:0.999992
apply	O	O:0.959035
`	O	O:0.999916
agg	O	B-API:0.997299
`	O	O:0.999983
in	O	O:0.999836
the	O	O:0.999996
proper	O	O:0.999174
way	O	O:0.999784
.	O	O:0.999792
	
#CODE	O	O:0.998453
	
However	O	O:0.999565
,	O	O:0.999982
it	O	O:0.999988
occured	O	O:0.999898
to	O	O:0.999986
me	O	O:0.999999
this	O	O:0.999742
may	O	O:0.999992
not	O	O:0.999990
be	O	O:0.999999
always	O	O:0.999977
correct	O	O:0.999873
,	O	O:0.999993
since	O	O:0.999979
there	O	O:0.999707
is	O	O:0.999998
no	O	O:0.999993
guarantee	O	O:0.999931
data	O	O:0.999829
was	O	O:0.999897
collected	O	O:0.999914
everyday	O	O:0.999639
.	O	O:0.999819
	
Instead	O	O:0.999834
,	O	O:0.999986
I	O	O:0.999992
tried	O	O:0.999972
counting	O	O:0.999733
unique	O	O:0.949072
days	O	O:0.999370
in	O	O:0.999993
the	O	O:0.999991
timestamp	O	O:0.998925
series	O	O:0.999976
using	O	O:0.999818
`	O	O:0.999858
map	O	B-API:0.999270
`	O	O:0.999962
and	O	O:0.999678
`	O	O:0.999993
apply	O	B-API:0.996268
`	O	O:0.999835
,	O	O:0.998955
and	O	O:0.999998
both	O	O:0.999980
take	O	O:0.999867
a	O	O:0.999998
considerable	O	O:0.999540
amount	O	O:0.999910
of	O	O:0.999990
time	O	O:0.999855
for	O	O:0.999997
3,000,000	O	O:0.999878
rows	O	O:0.984773
:	O	O:0.999946
#CODE	O	O:0.999934
	
@USER	O	O:0.999641
do	O	O:0.999935
you	O	O:0.999994
mean	O	O:0.999940
doing	O	O:0.999984
the	O	O:0.999962
apply	O	B-API:0.954156
?	O	O:0.999428
	
This	O	O:0.998541
is	O	O:0.999992
very	O	O:0.999697
surprising	O	O:0.999689
,	O	O:0.999983
mainly	O	O:0.999291
because	O	O:0.999947
the	O	O:0.999982
accepted	O	O:0.999889
answer	O	O:0.999614
is	O	O:0.999808
O	O	O:0.977747
(	O	O:0.999977
n^2	O	O:0.998724
)	O	O:0.999935
.	O	O:0.999785
	
I	O	O:0.999973
can	O	O:0.999970
see	O	O:0.999995
the	O	O:0.999993
apply	O	B-API:0.582520
part	O	O:0.999607
being	O	O:0.999605
slow	O	O:0.998767
,	O	O:0.999976
but	O	O:0.999991
as	O	O:0.999991
I	O	O:0.999996
say	O	O:0.999985
I	O	O:0.999943
don't	O	O:0.999969
think	O	O:0.999701
you	O	O:0.999993
really	O	O:0.999932
need	O	O:0.999976
that	O	O:0.999946
part	O	O:0.999942
.	O	O:0.999958
	
you've	O	O:0.999205
got	O	O:0.999962
a	O	O:0.999999
couple	O	O:0.999313
of	O	O:0.999993
problems	O	O:0.999500
here	O	O:0.999832
.	O	O:0.999988
the	O	O:0.999988
first	O	O:0.998995
involves	O	O:0.999806
repopulating	O	O:0.999914
your	O	O:0.999882
dataframe	B-API	O:0.999335
from	O	O:0.999994
a	O	O:0.999997
subset	O	O:0.995724
.	O	O:0.999987
the	O	O:0.999991
other	O	O:0.999784
,	O	O:0.999993
more	O	O:0.999914
computational	O	O:0.999423
problem	O	O:0.999074
involved	O	O:0.999521
not	O	O:0.999945
`	O	O:0.999987
for	O	O:0.999676
`	O	O:0.999990
loops	O	O:0.991510
,	O	O:0.999984
but	O	O:0.999868
`	O	O:0.999962
groupby	B-API	B-API:0.999417
`	O	O:0.999975
and	O	O:0.999306
`	O	O:0.999995
transform	O	B-API:0.996169
`	O	O:0.999911
(	O	O:0.999890
or	O	O:0.999994
`	O	O:0.999983
apply	O	B-API:0.969283
`	O	O:0.999967
?	O	O:0.999878
)	O	O:0.999988
operations	O	O:0.999263
.	O	O:0.999796
	
I	O	O:0.999936
recommend	O	O:0.999933
splitting	O	O:0.999833
this	O	O:0.999818
up	O	O:0.999977
into	O	O:0.999720
two	O	O:0.999988
separate	O	O:0.999621
questions	O	O:0.999246
.	O	O:0.999871
	
Consider	O	O:0.999666
using	O	O:0.999696
groupby	B-API	B-API:0.972760
apply	O	B-API:0.770411
functions	O	O:0.997301
to	O	O:0.999776
dataset	O	O:0.999986
.	O	O:0.999845
	
The	O	O:0.999980
first	O	O:0.999511
function	O	O:0.999974
averages	O	O:0.999861
the	O	O:0.999985
values	O	O:0.999937
only	O	O:0.999875
for	O	O:0.999983
'	O	O:0.999928
Print	O	O:0.999314
Buffer	O	O:0.999691
'	O	O:0.999984
using	O	O:0.999891
`	O	O:0.999759
mean()	B-API	B-API:0.988393
`	O	O:0.999981
,	O	O:0.999965
leaving	O	O:0.999738
the	O	O:0.999956
others	O	O:0.999466
in	O	O:0.999968
Block	O	O:0.999934
zero	O	O:0.999105
.	O	O:0.999893
	
And	O	O:0.999978
then	O	O:0.999908
the	O	O:0.999999
second	O	O:0.998915
function	O	O:0.999926
maximizes	O	O:0.999864
the	O	O:0.999966
`	O	O:0.999990
meanvalue	O	O:0.985583
`	O	O:0.999990
.	O	O:0.999642
	
Finally	O	O:0.999831
,	O	O:0.999998
simply	O	O:0.999984
create	O	O:0.999130
`	O	O:0.999995
newvalue	O	O:0.998627
`	O	O:0.999997
as	O	O:0.999899
arithmetic	O	O:0.999749
difference	O	O:0.998243
:	O	O:0.999898
#CODE	O	O:0.999810
	
UPDATE	O	O:0.992903
:	O	O:0.999963
Here	O	O:0.999680
is	O	O:0.999998
a	O	O:0.999992
photo	O	O:0.999576
to	O	O:0.999981
illustrate	O	O:0.999992
what	O	O:0.999956
I	O	O:0.999999
keep	O	O:0.999840
geting	O	O:0.996415
!	O	O:0.999798
	
Box	O	O:0.999571
6	O	O:0.999259
is	O	O:0.999978
the	O	O:0.999973
implementation	O	O:0.999822
of	O	O:0.999978
apply	O	B-API:0.871370
,	O	O:0.999837
and	O	O:0.999909
box	O	O:0.999896
7	O	O:0.997816
is	O	O:0.999991
what	O	O:0.999936
my	O	O:0.999990
data	O	O:0.999935
looks	O	O:0.999962
like	O	O:0.999869
.	O	O:0.999930
	
You	O	O:0.999906
could	O	O:0.999887
use	O	O:0.999839
apply	O	B-API:0.830853
method	O	O:0.999082
for	O	O:0.999945
pd.Series	B-API	B-API:0.979238
of	O	O:0.999894
dataframe	B-API	O:0.987631
	
So	O	O:0.999971
you	O	O:0.999982
could	O	O:0.999988
convert	O	O:0.999984
your	O	O:0.999892
`	O	O:0.999991
df.columns	O	O:0.969553
`	O	O:0.999996
to	O	O:0.999793
`	O	O:1.000000
pd.Series	B-API	B-API:0.996843
`	O	O:0.999995
with	O	O:0.998746
`	O	O:0.999971
pd.Series	B-API	B-API:0.999429
(	O	O:0.999988
df.columns	O	O:0.991534
)`	O	O:0.999525
and	O	O:0.999995
then	O	O:0.999841
use	O	O:0.999735
apply	O	B-API:0.929948
method	O	O:0.996195
.	O	O:0.999448
	
Look	O	O:0.999633
to	O	O:0.999989
the	O	O:1.000000
last	O	O:0.999387
edit	O	O:0.998963
	
Python	O	O:0.998124
Pandas	O	O:0.999734
Dataframe	B-API	O:0.995161
Columns	O	O:0.999568
of	O	O:0.999977
Lists	O	O:0.998884
,	O	O:0.999984
Get	O	O:0.999635
Intersection	O	O:0.995624
And	O	O:0.999971
Apply	O	O:0.999720
Function	O	O:0.998446
To	O	O:0.999895
Another	O	O:0.999525
Column	O	O:0.999133
	
I'm	O	O:0.999780
not	O	O:0.999988
used	O	O:0.999966
to	O	O:0.999983
working	O	O:0.999985
with	O	O:0.999888
`	O	O:0.999994
lists	O	O:0.989563
`	O	O:0.999996
in	O	O:0.999993
columns	O	O:0.999966
of	O	O:0.999985
Pandas	O	O:0.999465
and	O	O:0.999990
don't	O	O:0.999905
know	O	O:0.999748
how	O	O:0.999994
to	O	O:0.999984
get	O	O:0.999999
the	O	O:0.999997
intersection	O	O:0.973659
of	O	O:0.999984
`	O	O:0.999985
lists	O	O:0.990254
`	O	O:0.999997
from	O	O:0.999900
two	O	O:0.999998
columns	O	O:0.999961
in	O	O:0.999997
a	O	O:0.999989
`	O	O:0.999980
dataframe	B-API	O:0.971315
`	O	O:0.999997
,	O	O:0.999998
then	O	O:0.999958
get	O	O:0.999980
the	O	O:0.999999
index	O	O:0.999983
of	O	O:0.999995
where	O	O:0.999986
the	O	O:0.999999
words	O	O:0.999869
appear	O	O:0.999882
,	O	O:0.999999
then	O	O:0.999946
apply	O	O:0.991044
plus	O	O:0.999952
signs	O	O:0.999687
to	O	O:0.999996
the	O	O:1.000000
front	O	O:0.999885
of	O	O:0.999991
each	O	O:0.996529
found	O	O:0.999743
index	O	O:0.999654
.	O	O:0.999793
	
Or	O	O:0.999986
maybe	O	O:0.999904
easier	O	O:0.999739
would	O	O:0.999976
be	O	O:0.999999
a	O	O:0.999998
string	O	O:0.998578
replacement	O	O:0.999954
on	O	O:0.999982
`	O	O:0.999996
df	O	O:0.999371
[	O	O:0.999955
'	O	O:0.999936
Keyword	O	O:0.999961
']`	O	O:0.999973
using	O	O:0.999861
the	O	O:0.999936
words	O	O:0.999480
from	O	O:0.999611
`	O	O:0.999992
StemmedAG	O	O:0.979696
`	O	O:0.999990
?	O	O:0.999798
	
How	O	O:0.999905
to	O	O:0.999970
do	O	O:0.999999
this	O	O:0.999918
?	O	O:0.999970
	
Do	O	O:0.999964
we	O	O:0.999996
have	O	O:0.999985
any	O	O:0.999917
function	O	O:0.999865
?	O	O:0.999888
	
I	O	O:0.999937
tried	O	O:0.999906
with	O	O:0.999150
apply	O	B-API:0.953058
and	O	O:0.999894
groupby	B-API	B-API:0.998411
function	O	O:0.998780
,	O	O:0.999557
did	O	O:0.999885
not	O	O:0.999967
work	O	O:0.999886
.	O	O:0.999972
	
Please	O	O:0.999597
let	O	O:0.999578
me	O	O:0.999983
know	O	O:0.999580
if	O	O:0.999995
more	O	O:0.999379
information	O	O:0.999743
is	O	O:0.999994
required	O	O:0.998580
for	O	O:0.999992
this	O	O:0.999510
.	O	O:0.999820
	
The	O	O:0.999953
thing	O	O:0.999196
is	O	O:0.999989
,	O	O:0.999976
I	O	O:0.999996
know	O	O:0.999977
that	O	O:0.999823
I	O	O:0.999998
can	O	O:0.999996
set	O	O:0.999977
it	O	O:0.999997
to	O	O:0.999992
the	O	O:1.000000
Boolean	O	O:0.999677
false	O	O:0.999955
using	O	O:0.999647
str.contains()	B-API	B-API:0.999869
.	O	O:0.998422
	
But	O	O:0.999888
I	O	O:0.999990
don't	O	O:0.999974
know	O	O:0.999676
what	O	O:0.999966
the	O	O:0.999988
proper	O	O:0.999785
way	O	O:0.999967
to	O	O:0.999994
apply	O	O:0.967239
str.contains()	B-API	B-API:0.998033
to	O	O:0.999785
pd.read_csv	B-API	B-API:0.811660
'	O	O:0.999960
s	O	O:0.999909
na_values	O	O:0.968952
.	O	O:0.999742
	
#CODE	O	O:0.998453
	
The	O	O:0.999979
first	O	O:0.999890
step	O	O:0.999891
is	O	O:0.999988
to	O	O:0.999994
read	O	O:0.999991
the	O	O:0.999997
data	O	O:0.999986
into	O	O:0.999935
a	O	O:0.999989
Pandas	O	O:0.998332
DataFrame	B-API	O:0.980554
.	O	O:0.999699
	
If	O	O:0.999967
the	O	O:0.999991
format	O	O:0.999888
of	O	O:0.999973
the	O	O:0.999987
dataframe	B-API	O:0.997914
is	O	O:0.999988
consistent	O	O:0.999613
with	O	O:0.999976
the	O	O:0.999971
example	O	O:0.999738
you	O	O:0.999981
gave	O	O:0.999984
above	O	O:0.999983
,	O	O:0.999999
then	O	O:0.999965
you	O	O:0.999999
can	O	O:0.999997
apply	O	O:0.994848
the	O	O:0.999930
function	O	O:0.999698
to	O	O:0.999986
the	O	O:0.999997
groupby	B-API	B-API:0.994924
object	O	O:0.999353
.	O	O:0.999704
	
It	O	O:0.999946
seems	O	O:0.999985
some	O	O:0.999871
error	O	O:0.999026
(	O	O:0.999989
s	O	O:0.999850
)	O	O:0.999998
come	O	O:0.999899
out	O	O:0.999989
of	O	O:0.999984
the	O	O:0.999954
reading	O	O:0.999147
procedure	O	O:0.999859
.	O	O:0.999938
	
Another	O	O:0.999224
method	O	O:0.999955
using	O	O:0.999619
`	O	O:0.999940
apply	O	B-API:0.998974
`	O	O:0.999293
:	O	O:0.999009
#CODE	O	O:0.999898
	
I	O	O:0.999949
am	O	O:0.999999
able	O	O:0.999893
to	O	O:0.999998
add	O	O:0.999999
a	O	O:0.999996
new	O	O:0.999885
column	O	O:0.999817
in	O	O:0.999991
Panda	O	O:0.999959
by	O	O:0.999974
defining	O	O:0.999557
user	O	O:0.983331
function	O	O:0.999483
and	O	O:0.999996
then	O	O:0.999968
using	O	O:0.999950
apply	O	B-API:0.906763
.	O	O:0.993601
	
However	O	O:0.999860
,	O	O:0.999990
I	O	O:0.999998
want	O	O:0.999978
to	O	O:0.999906
do	O	O:1.000000
this	O	O:0.999975
using	O	O:0.999961
lambda	O	O:0.997265
;	O	O:0.999382
is	O	O:0.999968
there	O	O:0.999985
a	O	O:0.999993
way	O	O:0.999263
around	O	O:0.999337
?	O	O:0.999867
	
Next	O	O:0.999707
solution	O	O:0.999328
is	O	O:0.999993
with	O	O:0.999482
function	O	O:0.999959
apply	O	O:0.701080
with	O	O:0.999470
parameter	O	O:0.999111
`	O	O:0.999987
axis=1	O	O:0.980915
`	O	O:0.999952
:	O	O:0.999598
	
axis	O	O:0.999734
=	O	O:0.999908
1	O	O:0.999963
or	O	O:0.999973
columns	O	O:0.999541
:	O	O:0.999997
apply	O	O:0.703488
function	O	O:0.999875
to	O	O:0.999991
each	O	O:0.999979
row	O	O:0.999827
	
This	O	O:0.999288
avoids	O	O:0.999880
the	O	O:0.999986
apply	O	B-API:0.799267
so	O	O:0.999895
will	O	O:0.999711
be	O	O:0.999999
more	O	O:0.999903
efficient	O	O:0.998695
.	O	O:0.999863
	
Thanks	O	O:0.999454
Andy	O	O:0.999804
,	O	O:0.999988
I	O	O:0.999988
will	O	O:0.999985
post	O	O:0.999854
a	O	O:0.999999
new	O	O:0.999141
question	O	O:0.999201
.	O	O:0.999836
	
I	O	O:0.999976
know	O	O:0.999962
there	O	O:0.999391
is	O	O:0.999994
a	O	O:0.999996
group	O	O:0.998630
by	O	O:0.999994
rank	O	O:0.982184
function	O	O:0.999765
but	O	O:0.999985
the	O	O:0.999992
challenge	O	O:0.999881
so	O	O:0.999977
far	O	O:0.999783
is	O	O:0.999997
to	O	O:0.999977
combine	O	O:0.999961
that	O	O:0.999922
with	O	O:0.999963
logical	O	O:0.999498
operator	O	O:0.999975
of	O	O:0.999989
a	O	O:0.999996
different	O	O:0.999820
column	O	O:0.999657
and	O	O:0.999999
then	O	O:0.999955
apply	O	O:0.811762
to	O	O:0.999991
all	O	O:0.999999
rows	O	O:0.999349
.	O	O:0.999851
	
I	O	O:0.999984
really	O	O:0.999914
appreciate	O	O:0.999932
your	O	O:0.999735
help	O	O:0.996926
.	O	O:0.999957
	
call	O	O:0.987718
`	O	O:0.999985
apply	O	B-API:0.998710
`	O	O:0.999864
and	O	O:0.999909
pass	O	O:0.999503
func	O	O:0.978572
`	O	O:0.999961
len	O	B-API:0.995706
`	O	O:0.999931
:	O	O:0.999010
#CODE	O	O:0.999896
	
You	O	O:0.999818
can	O	O:0.999930
try	O	O:0.999995
`	O	O:0.999993
apply	O	B-API:0.983269
(	O	O:0.999967
pandas.Series.interpolate	B-API	B-API:0.563170
)`	O	O:0.999941
instead	O	O:0.999984
of	O	O:0.999992
`	O	O:0.999957
fillna	B-API	B-API:0.997579
`	O	O:0.999968
.	O	O:0.999248
	
@USER	O	O:0.999584
first	O	O:0.999805
transpose	O	O:0.967736
your	O	O:0.999909
dataframe	B-API	O:0.997257
,	O	O:0.999999
then	O	O:0.999944
apply	O	O:0.967756
my	O	O:0.999801
solution	O	O:0.997338
:	O	O:0.999958
#URL	O	O:0.999524
	
Python	O	O:0.999480
pandas	O	O:0.999765
groupby	B-API	B-API:0.881427
transform	O	B-API:0.712938
/	O	O:0.999882
apply	O	B-API:0.840740
function	O	O:0.999832
operating	O	O:0.998864
on	O	O:0.999995
multiple	O	O:0.999943
columns	O	O:0.999841
	
Trying	O	O:0.999753
to	O	O:0.999956
use	O	O:0.999993
apply-split-combine	O	O:0.999640
pandas	O	O:0.999311
transform	O	B-API:0.532605
.	O	O:0.999513
	
With	O	O:0.999868
the	O	O:0.999970
twist	O	O:0.999806
that	O	O:0.999963
the	O	O:0.999996
apply	O	B-API:0.845042
function	O	O:0.999526
needs	O	O:0.999813
to	O	O:0.999997
operate	O	O:0.999976
on	O	O:0.999997
multiple	O	O:0.999969
columns	O	O:0.999909
.	O	O:0.999922
	
It	O	O:0.999969
seems	O	O:0.999850
I	O	O:0.999992
can't	O	O:0.999942
get	O	O:0.999931
it	O	O:0.999998
to	O	O:0.999999
work	O	O:0.999999
using	O	O:0.999913
`	O	O:0.999971
pd.transform	O	O:0.638870
`	O	O:0.999978
and	O	O:0.999990
have	O	O:0.999989
to	O	O:0.999983
go	O	O:0.999999
indirect	O	O:0.999923
via	O	O:0.999862
`	O	O:0.999965
pd.apply	O	B-API:0.950046
`	O	O:0.999959
.	O	O:0.999132
	
There	O	O:0.999958
a	O	O:0.999992
way	O	O:0.999912
to	O	O:0.999963
do	O	O:0.999991
#CODE	O	O:0.999799
	
I	O	O:0.999983
get	O	O:0.999996
a	O	O:0.999995
factor	O	O:0.999369
of	O	O:0.999967
~5	O	O:0.999553
speed	O	O:0.999780
improvement	O	O:0.999911
on	O	O:0.999992
a	O	O:0.999995
simple	O	O:0.999170
N=	O	O:0.999892
10,000	O	O:0.999686
test	O	O:0.999724
case	O	O:0.999988
by	O	O:0.999997
using	O	O:0.999961
a	O	O:0.999888
pandas	O	O:0.990624
groupby	B-API	B-API:0.957671
/	O	O:0.999876
apply	O	B-API:0.936096
and	O	O:0.999874
writing	O	O:0.999265
the	O	O:0.999891
csv	O	O:0.999834
from	O	O:0.999967
the	O	O:0.999992
resulting	O	O:0.999646
dataframe	B-API	O:0.979176
:	O	O:0.999956
#CODE	O	O:0.999899
	
You	O	O:0.999929
can	O	O:0.999956
use	O	O:0.999996
apply	O	B-API:0.664793
with	O	O:0.997688
`	O	O:0.999819
to_json	B-API	B-API:0.999693
`	O	O:0.999946
:	O	O:0.999781
#CODE	O	O:0.999908
	
To	O	O:0.999989
apply	O	O:0.754867
functions	O	O:0.999118
to	O	O:0.999975
this	O	O:0.999989
object	O	O:0.999958
,	O	O:0.999998
you	O	O:0.999991
can	O	O:0.999992
do	O	O:1.000000
a	O	O:0.999999
few	O	O:0.998811
things	O	O:0.998583
:	O	O:0.999910
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999981
to	O	O:0.999999
pass	O	O:0.999991
a	O	O:0.999996
custom	O	O:0.988463
function	O	O:0.999944
,	O	O:0.999994
you	O	O:0.999984
can	O	O:0.999989
call	O	O:0.999934
`	O	O:0.999992
grouped.apply	O	B-API:0.838432
(	O	O:0.999985
func	O	O:0.996968
)`	O	O:0.999921
to	O	O:0.999971
apply	O	O:0.990572
that	O	O:0.998973
function	O	O:0.999966
to	O	O:0.999997
each	O	O:0.999986
group	O	O:0.997063
.	O	O:0.999937
	
The	O	O:0.999982
last	O	O:0.999588
question	O	O:0.999945
about	O	O:0.999950
the	O	O:0.999986
average	O	O:0.999071
over	O	O:0.999925
a	O	O:0.999996
range	O	O:0.999934
of	O	O:0.999994
columns	O	O:0.999899
relies	O	O:0.999831
on	O	O:0.999994
pandas	O	O:0.999965
understanding	O	O:0.999924
of	O	O:0.999881
how	O	O:0.999688
it	O	O:0.999992
should	O	O:0.999993
apply	O	O:0.820297
functions	O	O:0.999359
.	O	O:0.999257
	
If	O	O:0.999968
you	O	O:0.999994
take	O	O:0.999983
a	O	O:0.999998
dataframe	B-API	O:0.993650
and	O	O:0.999995
call	O	O:0.998800
`	O	O:0.999970
dataframe.mean()	B-API	B-API:0.998766
`	O	O:0.999980
,	O	O:0.999986
pandas	O	O:0.999945
returns	O	O:0.999655
the	O	O:0.999996
mean	O	O:0.999865
of	O	O:0.999996
each	O	O:0.999759
column	O	O:0.999909
.	O	O:0.999937
	
There's	O	O:0.999962
a	O	O:0.999992
default	O	O:0.999092
argument	O	O:0.999869
in	O	O:0.999914
`	O	O:0.999970
mean()	B-API	B-API:0.946015
`	O	O:0.999996
that	O	O:0.998714
is	O	O:0.999997
`	O	O:0.999978
axis=0	O	O:0.982949
`	O	O:0.999967
.	O	O:0.999162
	
If	O	O:0.999979
you	O	O:0.999981
change	O	O:0.999937
that	O	O:0.999977
to	O	O:0.999993
`	O	O:1.000000
axis=1	O	O:0.992383
`	O	O:0.999987
,	O	O:0.999977
pandas	O	O:0.999933
will	O	O:0.999902
instead	O	O:0.999997
take	O	O:0.999974
the	O	O:1.000000
mean	O	O:0.999901
of	O	O:0.999998
each	O	O:0.999404
row	O	O:0.999940
.	O	O:0.999869
	
However	O	O:0.999774
,	O	O:0.999997
when	O	O:0.999936
I	O	O:0.999995
apply	O	O:0.994960
this	O	O:0.993168
in	O	O:0.999903
IPython	O	O:0.999526
,	O	O:0.999989
it	O	O:0.999986
gives	O	O:0.999792
me	O	O:0.999997
this	O	O:0.999815
error	O	O:0.999159
:	O	O:0.999950
#CODE	O	O:0.999723
	
This	O	O:0.998772
is	O	O:0.999990
because	O	O:0.999881
you	O	O:0.999959
are	O	O:0.999999
operating	O	O:0.999978
a	O	O:0.999987
element	O	O:0.997903
`	O	O:0.999986
x	O	O:0.998333
`	O	O:0.999995
against	O	O:0.999791
series	O	O:0.999844
`	O	O:0.999984
va2	O	O:0.998759
[	O	O:0.999952
'	O	O:0.999980
pct_vote	O	O:0.998068
']`	O	O:0.999780
.	O	O:0.999746
	
What	O	O:0.999796
you	O	O:0.999986
need	O	O:0.999931
is	O	O:0.999997
operation	O	O:0.999909
on	O	O:0.999966
`	O	O:0.999991
va2	O	O:0.999067
[	O	O:0.999971
'	O	O:0.999924
winner	O	O:0.999745
']`	O	O:0.999661
and	O	O:0.999895
`	O	O:0.999985
va2	O	O:0.992227
[	O	O:0.999952
'	O	O:0.999979
pct_vote	O	O:0.998704
']`	O	O:0.999916
element	O	O:0.999712
wise	O	O:0.998752
.	O	O:0.999890
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999982
`	O	O:0.999970
apply	O	B-API:0.984681
`	O	O:0.999959
to	O	O:0.999664
achieve	O	O:0.999996
that	O	O:0.999727
.	O	O:0.999970
	
You	O	O:0.999932
could	O	O:0.999754
use	O	O:0.999984
Pandas	O	O:0.999341
`	O	O:0.999960
apply	O	B-API:0.985009
`	O	O:0.999738
function	O	O:0.999128
,	O	O:0.999989
which	O	O:0.999950
allows	O	O:0.999841
you	O	O:0.999991
to	O	O:0.999999
traverse	O	O:1.000000
rows	O	O:0.999844
or	O	O:0.999995
columns	O	O:0.999954
and	O	O:0.999997
apply	O	O:0.965393
your	O	O:0.997970
own	O	O:0.998594
function	O	O:0.999937
to	O	O:0.999998
them	O	O:0.999960
.	O	O:0.999941
	
and	O	O:0.999926
apply	O	B-API:0.590742
it	O	O:0.998076
column-wise	O	O:0.971445
:	O	O:0.999958
#CODE	O	O:0.999722
	
We	O	O:0.999961
can	O	O:0.999989
group	O	O:0.999983
by	O	O:0.999994
the	O	O:0.999944
User	O	O:0.993194
Id	O	O:0.999750
,	O	O:0.999973
and	O	O:0.999999
then	O	O:0.999833
for	O	O:0.999998
each	O	O:0.999901
group	O	O:0.999000
apply	O	O:0.943422
a	O	O:0.999795
function	O	O:0.999535
to	O	O:0.999988
evaluate	O	O:0.999985
the	O	O:0.999994
difference	O	O:0.999793
between	O	O:0.999890
the	O	O:0.999997
rows	O	O:0.998553
.	O	O:0.999855
	
Now	O	O:0.999957
define	O	O:0.999908
a	O	O:0.999951
function	O	O:0.999804
that	O	O:0.999929
will	O	O:0.999989
operate	O	O:0.999979
on	O	O:0.999994
each	O	O:0.999850
group	O	O:0.998323
,	O	O:0.999979
and	O	O:0.999977
apply	O	B-API:0.649093
it	O	O:0.998863
.	O	O:0.999715
	
Apply	O	O:0.999848
a	O	O:0.999984
numeric	O	O:0.998088
rank	O	O:0.999700
column	O	O:0.999953
basis	O	O:0.999977
the	O	O:0.999968
datetime	O	O:0.992101
	
You	O	O:0.999844
can	O	O:0.999956
call	O	O:0.999801
`	O	O:0.999996
apply	O	B-API:0.998343
`	O	O:0.999900
and	O	O:0.999869
convert	O	O:0.999777
your	O	O:0.999908
dict	O	O:0.999861
values	O	O:0.999962
into	O	O:0.999963
a	O	O:0.999999
set	O	O:0.998935
can	O	O:0.999976
convert	O	O:0.999876
the	O	O:0.999986
`	O	O:0.999961
intersection	O	B-API:0.688187
`	O	O:0.999998
to	O	O:0.999963
a	O	O:0.999999
list	O	O:0.938262
:	O	O:0.999968
#CODE	O	O:0.999850
	
Running	O	O:0.996412
to_numeric	B-API	B-API:0.975874
via	O	O:0.999953
apply	O	B-API:0.590911
on	O	O:0.999769
the	O	O:0.999961
dataframe	B-API	O:0.999476
iloc	B-API	B-API:0.915343
selection	O	O:0.999932
,	O	O:0.999965
ie	O	O:0.999970
#CODE	O	O:0.999573
	
So	O	O:0.999997
your	O	O:0.999977
approach	O	O:0.999969
of	O	O:0.999996
using	O	O:0.999651
`	O	O:0.999970
apply	O	B-API:0.994383
`	O	O:0.999706
is	O	O:0.999892
the	O	O:0.999982
correct	O	O:0.999913
one	O	O:0.999993
if	O	O:0.999995
you	O	O:0.999997
want	O	O:0.999983
to	O	O:0.999978
use	O	O:1.000000
this	O	O:0.999808
functions	O	O:0.999814
on	O	O:0.999995
several	O	O:0.999990
columns	O	O:0.999948
at	O	O:0.999995
the	O	O:0.999992
same	O	O:0.999907
time	O	O:0.999802
.	O	O:0.999953
	
You	O	O:0.999897
can	O	O:0.999953
apply	O	O:0.993710
difference	O	O:0.999947
of	O	O:0.999982
sets	O	O:0.999891
converted	O	O:0.999976
from	O	O:0.999993
lists	O	O:0.999783
of	O	O:0.999994
columns	O	O:0.999755
and	O	O:0.999999
then	O	O:0.999959
convert	O	O:0.997818
to	O	O:0.999993
list	O	O:0.999746
.	O	O:0.999920
	
You	O	O:0.999975
have	O	O:0.999963
to	O	O:0.999991
use	O	O:0.999996
`	O	O:0.999942
axis=1	O	O:0.983639
`	O	O:0.999989
,	O	O:0.999965
because	O	O:0.999983
apply	O	B-API:0.675252
function	O	O:0.999850
to	O	O:0.999991
each	O	O:0.999975
row	O	O:0.999837
.	O	O:0.999914
	
#CODE	O	O:0.998453
	
More	O	O:0.999800
efficient	O	O:0.999805
way	O	O:0.999951
to	O	O:0.999937
import	O	O:0.999896
and	O	O:0.999994
apply	O	O:0.850195
a	O	O:0.999495
function	O	O:0.997830
to	O	O:0.999998
text	O	O:0.999999
data	O	O:0.999973
in	O	O:0.999998
a	O	O:0.999993
Pandas	O	O:0.998941
Dataframe	B-API	O:0.964204
	
The	O	O:0.999935
code	O	O:0.999592
runs	O	O:0.999946
fine	O	O:0.999940
when	O	O:0.999935
parsing	O	O:0.999965
a	O	O:0.999997
short	O	O:0.998572
paragraph	O	O:0.999399
,	O	O:0.999977
but	O	O:0.999992
when	O	O:0.999853
working	O	O:0.999925
on	O	O:0.999994
larger	O	O:0.999939
text	O	O:0.999868
files	O	O:0.999833
the	O	O:0.999977
code	O	O:0.999842
takes	O	O:0.999942
a	O	O:0.999994
lot	O	O:0.999235
longer	O	O:0.999814
.	O	O:0.999846
	
I	O	O:0.999982
know	O	O:0.999912
the	O	O:0.999952
key	O	O:0.999935
to	O	O:0.999991
speed	O	O:0.999992
when	O	O:0.999904
working	O	O:0.999917
with	O	O:0.999984
Dataframes	O	O:0.999166
is	O	O:0.999984
to	O	O:0.999984
avoid	O	O:0.999947
for-loops	O	O:0.999369
and	O	O:0.999977
to	O	O:0.999999
apply	O	O:0.940897
functions	O	O:0.999505
to	O	O:0.999974
the	O	O:1.000000
whole	O	O:0.999981
data	O	O:0.999974
set	O	O:0.999840
.	O	O:0.999968
	
My	O	O:0.999911
question	O	O:0.998305
is	O	O:0.999985
,	O	O:0.999837
is	O	O:0.999996
there	O	O:0.999973
a	O	O:0.999995
quicker	O	O:0.999309
way	O	O:0.999965
to	O	O:0.999990
apply	O	O:0.993037
a	O	O:0.999864
function	O	O:0.999571
to	O	O:0.999998
a	O	O:1.000000
string	O	O:0.999525
when	O	O:0.999908
reading	O	O:0.999867
in	O	O:0.999996
a	O	O:0.999995
text	O	O:0.999609
file	O	O:0.999919
,	O	O:0.999995
other	O	O:0.999974
than	O	O:0.999914
line	O	O:0.999919
by	O	O:0.999980
line	O	O:0.999522
and	O	O:0.999978
appending	O	O:0.999891
it	O	O:0.999837
to	O	O:0.999995
a	O	O:1.000000
dataframe	B-API	O:0.989249
?	O	O:0.999964
	
Right	O	O:0.998766
.	O	O:0.999847
	
The	O	O:0.999942
problem	O	O:0.998164
is	O	O:0.999991
the	O	O:0.999949
way	O	O:0.999801
you	O	O:0.999954
save	O	O:0.999355
it	O	O:0.999988
.	O	O:0.999950
	
You	O	O:0.999847
apply	O	O:0.798134
jsonification	O	O:0.990195
to	O	O:0.999981
it	O	O:0.999999
twice	O	O:0.999907
.	O	O:0.999972
	
You	O	O:0.999834
should	O	O:0.999917
do	O	O:0.999998
something	O	O:0.999993
like	O	O:0.999625
`	O	O:0.999996
with	O	O:0.999717
open	O	O:0.990572
(	O	O:0.999998
myoutfilename	O	O:0.999802
,	O	O:0.999981
'	O	O:0.999987
w	O	O:0.999985
')	O	O:0.999992
as	O	O:0.999981
f	O	O:0.999841
:\	O	O:0.999964
n	O	O:0.998865
f.write	O	O:0.924529
(	O	O:0.999986
dataframe.to_json()	B-API	B-API:0.736920
)`	O	O:0.999562
	
I	O	O:0.999910
am	O	O:0.999997
trying	O	O:0.999665
to	O	O:0.999996
apply	O	O:0.988030
a	O	O:0.999883
function	O	O:0.999432
to	O	O:0.999998
each	O	O:0.999992
row	O	O:0.999946
in	O	O:0.999994
a	O	O:0.999995
dataframe	B-API	O:0.987195
.	O	O:0.999871
	
The	O	O:0.999941
problem	O	O:0.998631
is	O	O:0.999980
,	O	O:0.999989
the	O	O:0.999884
function	O	O:0.999903
requires	O	O:0.999793
output	O	O:0.999968
from	O	O:0.999952
the	O	O:0.999992
previous	O	O:0.999857
row	O	O:0.999974
as	O	O:0.999994
an	O	O:0.999982
input	O	O:0.999793
.	O	O:0.999870
	
It	O	O:0.999941
looks	O	O:0.999964
like	O	O:0.999940
you	O	O:0.999995
want	O	O:0.999980
to	O	O:0.999997
apply	O	O:0.993806
a	O	O:0.999980
recursive	O	O:0.933753
function	O	O:0.999737
.	O	O:0.999741
	
In	O	O:0.999973
that	O	O:0.999965
case	O	O:0.999975
,	O	O:0.999998
.rolling_apply	B-API	B-API:0.531126
won't	O	O:0.999765
work	O	O:0.999870
.	O	O:0.999986
	
One	O	O:0.999845
way	O	O:0.999840
would	O	O:0.999973
be	O	O:0.999999
to	O	O:0.999997
use	O	O:0.999994
the	O	O:0.999957
series	O	O:0.999942
values	O	O:0.999940
as	O	O:0.999997
a	O	O:0.999998
list	O	O:0.993727
or	O	O:0.999994
numpy	O	O:0.999700
array	O	O:0.999881
.	O	O:0.999791
	
Then	O	O:0.999733
loop	O	O:0.999978
through	O	O:0.999750
the	O	O:0.999989
list	O	O:0.999409
to	O	O:0.999983
use	O	O:0.999997
the	O	O:0.999958
recursive	O	O:0.985064
function	O	O:0.999679
.	O	O:0.999798
	
Try	O	O:0.999917
grouping	O	O:0.999856
certain	O	O:0.998804
columns	O	O:0.999668
and	O	O:0.999999
then	O	O:0.999969
apply	O	O:0.667994
sum()	B-API	O:0.669725
like	O	O:0.999404
this	O	O:0.999310
:	O	O:0.999976
#CODE	O	O:0.999843
	
`	O	O:0.999946
Series.str.replace	B-API	B-API:0.995744
`	O	O:0.999994
Cythonizes	O	O:0.998035
the	O	O:0.999990
calls	O	O:0.999605
to	O	O:0.999968
`	O	O:0.999987
re.sub	O	O:0.886026
`	O	O:0.999941
(	O	O:0.999727
which	O	O:0.999945
makes	O	O:0.999759
it	O	O:0.999982
faster	O	O:0.999863
than	O	O:0.999956
what	O	O:0.999920
you	O	O:0.999989
could	O	O:0.999992
achieve	O	O:0.999996
using	O	O:0.999934
`	O	O:0.999915
apply	O	B-API:0.995700
`	O	O:0.999960
since	O	O:0.991834
`	O	O:0.999995
apply	O	B-API:0.951298
`	O	O:0.999975
uses	O	O:0.996368
a	O	O:0.999986
Python	O	O:0.996380
loop	O	O:0.999863
.	O	O:0.999910
)	O	O:0.999969
	
try	O	O:0.999937
using	O	O:0.999908
apply	O	B-API:0.968349
function	O	O:0.992710
.	O	O:0.999196
	
#CODE	O	O:0.998453
	
Pandas	O	O:0.998742
apply	O	B-API:0.722159
but	O	O:0.999928
only	O	O:0.999914
for	O	O:1.000000
rows	O	O:0.999791
where	O	O:0.999973
a	O	O:0.999997
condition	O	O:0.998662
is	O	O:0.999987
met	O	O:0.999230
	
I	O	O:0.999993
have	O	O:0.999988
a	O	O:0.999986
dataframe	B-API	O:0.999442
that	O	O:0.999949
I	O	O:0.999999
created	O	O:0.999982
from	O	O:0.999841
a	O	O:0.999994
text	O	O:0.999439
file	O	O:0.999753
.	O	O:0.999869
	
Columns	O	O:0.998767
B-F	O	O:0.999131
should	O	O:0.999921
apply	O	O:0.799406
to	O	O:0.999960
all	O	O:0.999998
null	O	O:0.999684
fields	O	O:0.999765
below	O	O:0.999987
them	O	O:0.999936
,	O	O:1.000000
then	O	O:0.999987
once	O	O:0.999996
all	O	O:0.999998
nulls	O	O:0.999881
are	O	O:0.999968
filled	O	O:0.999822
the	O	O:0.999995
next	O	O:0.999907
set	O	O:0.999964
of	O	O:0.999993
periods	O	O:0.998623
should	O	O:0.999978
be	O	O:0.999999
filled	O	O:0.999956
by	O	O:0.999951
the	O	O:0.999994
next	O	O:0.999097
values	O	O:0.999890
populated	O	O:0.999567
in	O	O:0.999989
B-F	O	O:0.998749
.	O	O:0.999873
	
How	O	O:0.999771
would	O	O:0.999948
I	O	O:0.999999
go	O	O:0.999998
about	O	O:0.999704
accomplishing	O	O:0.999816
this	O	O:0.998693
?	O	O:0.999942
	
But	O	O:0.999963
what	O	O:0.999434
is	O	O:0.999993
the	O	O:0.999984
common	O	O:0.999480
approach	O	O:0.999880
to	O	O:0.999993
this	O	O:0.999991
problem	O	O:0.999648
.	O	O:0.999921
	
Is	O	O:0.999988
this	O	O:0.999962
where	O	O:0.999985
people	O	O:0.999836
apply	O	O:0.764466
normalization	O	O:0.998431
?	O	O:0.999863
	
It	O	O:0.999892
would	O	O:0.999958
be	O	O:0.999998
great	O	O:0.999948
if	O	O:0.999969
someone	O	O:0.999750
could	O	O:0.999855
explain	O	O:0.999879
how	O	O:0.999992
to	O	O:0.999993
apply	O	O:0.991768
normalization	O	O:0.999542
in	O	O:0.999993
such	O	O:0.999994
a	O	O:0.999993
situation	O	O:0.989966
.	O	O:0.999873
	
Group	O	O:0.999502
series	O	O:0.999974
using	O	O:0.999339
mapper	O	O:0.535324
(	O	O:0.999947
dict	O	O:0.999760
or	O	O:0.999982
key	O	O:0.999862
function	O	O:0.999971
,	O	O:0.999996
apply	O	O:0.897186
given	O	O:0.988512
function	O	O:0.999879
to	O	O:0.999994
group	O	O:0.999894
,	O	O:0.999999
return	O	O:0.999430
result	O	O:0.999933
as	O	O:0.999996
series	O	O:0.999958
)	O	O:0.999995
or	O	O:0.999998
by	O	O:0.999994
a	O	O:0.999998
series	O	O:0.999857
of	O	O:0.999992
columns	O	O:0.999650
	
As	O	O:0.999984
a	O	O:0.999989
workaround	O	O:0.999811
for	O	O:0.999980
now	O	O:0.999898
,	O	O:0.999995
you	O	O:0.999985
can	O	O:0.999993
easily	O	O:0.999997
use	O	O:0.999990
the	O	O:0.999673
`	O	O:0.999917
nunique	B-API	B-API:0.999152
`	O	O:0.999889
Series	O	O:0.994449
method	O	O:0.999979
through	O	O:0.998583
`	O	O:0.999990
apply	O	B-API:0.983448
`	O	O:0.999972
instead	O	O:0.999655
of	O	O:0.999995
calling	O	O:0.999704
it	O	O:0.999996
directly	O	O:0.999720
on	O	O:0.999985
the	O	O:0.999907
groupby	B-API	B-API:0.996181
object	O	O:0.997265
:	O	O:0.999874
#CODE	O	O:0.999875
	
OK	O	O:0.999880
I	O	O:0.999969
missed	O	O:0.999900
the	O	O:0.999767
`	O	O:0.999983
NaN	O	O:0.996518
values	O	O:0.999860
are	O	O:0.999973
maintained	O	O:0.999676
`	O	O:0.999979
part	O	O:0.998443
.	O	O:0.999967
	
This	O	O:0.994103
is	O	O:0.999949
not	O	O:0.999887
pretty	O	O:0.999158
and	O	O:0.999990
it	O	O:0.999868
is	O	O:0.999980
still	O	O:0.999292
slow	O	O:0.991145
(	O	O:0.999964
but	O	O:0.999932
faster	O	O:0.999857
than	O	O:0.999713
apply	O	B-API:0.910219
):	O	O:0.999459
	
But	O	O:0.999966
that	O	O:0.999651
is	O	O:0.999999
different	O	O:0.999913
from	O	O:0.999960
what	O	O:0.999864
you	O	O:0.999995
will	O	O:0.999992
get	O	O:0.999997
using	O	O:0.999990
the	O	O:0.999123
apply	O	B-API:0.986990
method	O	O:0.997780
.	O	O:0.999448
	
Here	O	O:0.999922
your	O	O:0.999695
mask	O	O:0.700790
has	O	O:0.999976
float	O	O:0.998938
dtype	B-API	B-API:0.948287
containing	O	O:0.997239
NaN	O	O:0.989791
,	O	O:0.999939
0.0	O	O:0.997435
and	O	O:0.999922
1.0	O	O:0.994942
.	O	O:0.999350
	
In	O	O:0.999966
the	O	O:0.999991
apply	O	B-API:0.525531
solution	O	O:0.999460
you	O	O:0.999960
get	O	O:0.999956
`	O	O:0.999993
object	O	O:0.999028
`	O	O:0.999997
dtype	B-API	B-API:0.982148
with	O	O:0.999888
NaN	O	O:0.950858
,	O	O:0.999985
False	O	O:0.998750
,	O	O:0.999841
and	O	O:0.999980
True	O	O:0.998911
.	O	O:0.999477
	
Neither	O	O:0.999686
are	O	O:0.999960
OK	O	O:0.999980
to	O	O:0.999982
be	O	O:1.000000
used	O	O:0.999977
as	O	O:0.999989
a	O	O:0.999977
mask	O	O:0.570000
because	O	O:0.999907
you	O	O:0.999881
might	O	O:0.999993
not	O	O:0.999992
get	O	O:0.999997
what	O	O:0.999973
you	O	O:0.999992
want	O	O:0.999941
.	O	O:0.999926
	
IEEE	O	O:0.998768
says	O	O:0.999778
that	O	O:0.999966
any	O	O:0.999988
NaN	O	O:0.998328
comparison	O	O:0.999639
must	O	O:0.999892
yield	O	O:0.999876
False	O	O:0.999406
and	O	O:0.999992
the	O	O:0.999789
apply	O	B-API:0.969787
method	O	O:0.998419
is	O	O:0.999960
implicitly	O	O:0.999582
violates	O	O:0.999910
that	O	O:0.999842
by	O	O:0.999997
returning	O	O:0.999748
NaN	O	O:0.964023
!	O	O:0.999861
	
but	O	O:0.999675
after	O	O:0.999966
that	O	O:0.999942
one	O	O:0.999994
can	O	O:0.999987
apply	O	O:0.963198
`	O	O:0.999776
.reset_index	B-API	B-API:0.999157
(	O	O:0.999988
drop=True	O	O:0.998826
)`	O	O:0.996081
(	O	O:0.999980
mind	O	O:0.999918
drop=True	O	O:0.999842
here	O	O:0.999612
)	O	O:0.999958
and	O	O:0.999994
that	O	O:0.999828
returns	O	O:0.998624
#CODE	O	O:0.999609
	
Just	O	O:0.999739
the	O	O:0.999993
usual	O	O:0.999700
apply	O	B-API:0.590479
warning	O	O:0.995648
,	O	O:0.999993
this	O	O:0.999944
can	O	O:0.999985
be	O	O:0.999999
slow	O	O:0.998422
(	O	O:0.999967
that's	O	O:0.999964
why	O	O:0.999971
we	O	O:0.999995
special	O	O:0.999730
cased	O	O:0.999477
groupby	B-API	B-API:0.918465
head	O	O:0.999859
to	O	O:0.999976
use	O	O:0.999999
cumcount	O	O:0.898359
under	O	O:0.999914
the	O	O:0.999972
hood	O	O:0.999714
,	O	O:0.999995
at	O	O:0.999994
least	O	O:0.998744
originally	O	O:0.999867
not	O	O:0.999904
100%	O	O:0.999955
sure	O	O:0.999782
if	O	O:0.999980
it	O	O:0.999990
still	O	O:0.999938
does	O	O:0.999854
)	O	O:0.999980
.	O	O:0.999915
	
:)	O	O:0.999244
	
as_type	O	O:0.985191
has	O	O:0.999971
casting	O	O:0.999536
rules	O	O:0.999118
,	O	O:0.999997
none	O	O:0.999968
of	O	O:0.999967
which	O	O:0.999937
seems	O	O:0.999986
to	O	O:0.999988
apply	O	O:0.699022
(	O	O:0.999866
you'd	O	O:0.999834
think	O	O:0.999801
it'd	O	O:0.999909
be	O	O:0.999959
casting=	O	O:0.999127
'	O	O:0.999983
safe	O	O:0.997527
'	O	O:0.999976
#URL	O	O:0.999646
)	O	O:0.999932
	
You	O	O:0.999960
group	O	O:0.998883
on	O	O:0.999921
`	O	O:0.999963
user.id	O	O:0.987275
`	O	O:0.999978
,	O	O:0.999900
and	O	O:1.000000
then	O	O:0.999776
use	O	O:0.999965
`	O	O:0.999927
agg	O	B-API:0.998905
`	O	O:0.999992
to	O	O:0.999936
apply	O	O:0.993940
a	O	O:0.999944
custom	O	O:0.980994
aggregation	O	O:0.999287
function	O	O:0.999886
to	O	O:0.999988
each	O	O:0.999990
column	O	O:0.999776
.	O	O:0.999958
	
In	O	O:0.999983
this	O	O:0.999967
case	O	O:0.999984
,	O	O:0.999999
we	O	O:0.999993
use	O	O:0.999992
a	O	O:0.999910
`	O	O:0.999889
lambda	O	O:0.992259
`	O	O:0.999981
expression	O	O:0.994987
and	O	O:1.000000
then	O	O:0.999851
use	O	O:0.999950
`	O	O:0.999972
iloc	B-API	B-API:0.997330
`	O	O:0.999997
to	O	O:0.999974
take	O	O:0.999998
the	O	O:0.999997
last	O	O:0.999917
member	O	O:0.999812
of	O	O:0.999991
each	O	O:0.999328
group	O	O:0.998430
.	O	O:0.999904
	
We	O	O:0.999995
then	O	O:0.999759
use	O	O:0.999996
`	O	O:0.999995
count	O	O:0.987043
`	O	O:0.999999
on	O	O:0.999901
the	O	O:0.999998
text	O	O:0.999793
column	O	O:0.999739
.	O	O:0.999935
	
#CODE	O	O:0.998453
	
In	O	O:0.999962
the	O	O:0.999990
current	O	O:0.999513
implementation	O	O:0.999865
apply	O	O:0.629476
calls	O	O:0.999463
func	O	O:0.999263
twice	O	O:0.999634
on	O	O:0.999995
the	O	O:0.999994
first	O	O:0.999958
group	O	O:0.998965
to	O	O:0.999990
decide	O	O:0.999977
whether	O	O:0.999912
it	O	O:0.999980
can	O	O:0.999997
take	O	O:0.999999
a	O	O:1.000000
fast	O	O:0.999271
or	O	O:0.999995
slow	O	O:0.999480
code	O	O:0.999846
path	O	O:0.999747
.	O	O:0.999900
	
This	O	O:0.999683
can	O	O:0.999973
lead	O	O:0.999960
to	O	O:0.999997
unexpected	O	O:0.999976
behavior	O	O:0.999837
if	O	O:0.999941
func	O	O:0.989533
has	O	O:0.999931
side-effects	O	O:0.999808
,	O	O:0.999991
as	O	O:0.999998
they	O	O:0.999853
will	O	O:0.999994
take	O	O:0.999991
effect	O	O:0.999999
twice	O	O:0.999982
for	O	O:0.999995
the	O	O:0.999973
first	O	O:0.999235
group	O	O:0.995362
.	O	O:0.999854
	
Pandas	O	O:0.999458
Apply	O	O:0.999590
Function	O	O:0.998556
with	O	O:0.999773
Multiple	O	O:0.997659
**	O	O:0.999977
Kwarg	O	O:0.998828
Arguments	O	O:0.999122
	
If	O	O:0.999928
I	O	O:0.999985
understand	O	O:0.999992
your	O	O:0.998983
question	O	O:0.998831
,	O	O:0.999995
it	O	O:0.999992
seems	O	O:0.999982
to	O	O:0.999996
me	O	O:0.999999
that	O	O:0.999957
the	O	O:0.999999
easiest	O	O:0.999771
solution	O	O:0.999657
would	O	O:0.999987
be	O	O:0.999999
to	O	O:1.000000
pick	O	O:0.999968
the	O	O:0.999998
columns	O	O:0.999970
from	O	O:0.999993
your	O	O:0.999977
dataframe	B-API	O:0.999571
first	O	O:0.999942
,	O	O:0.999999
then	O	O:0.999933
apply	O	O:0.986163
a	O	O:0.999903
function	O	O:0.999480
that	O	O:0.999858
concatenates	O	O:0.999930
all	O	O:0.999993
columns	O	O:0.999720
.	O	O:0.999856
	
This	O	O:0.998578
is	O	O:0.999998
just	O	O:0.999796
as	O	O:0.999998
dynamic	O	O:0.983834
,	O	O:0.999963
but	O	O:0.999982
a	O	O:0.999994
lot	O	O:0.999832
cleaner	O	O:0.999797
,	O	O:0.999981
in	O	O:0.999993
my	O	O:0.999915
opinion	O	O:0.999581
.	O	O:0.999924
	
Probably	O	O:0.999566
not	O	O:0.999963
ideal	O	O:0.999346
,	O	O:0.999973
but	O	O:0.999996
this	O	O:0.999937
can	O	O:0.999987
be	O	O:1.000000
done	O	O:0.999989
using	O	O:0.999382
`	O	O:0.999685
groupby	B-API	B-API:0.999954
`	O	O:0.999963
and	O	O:0.999905
apply	O	O:0.938905
a	O	O:0.999454
function	O	O:0.996591
which	O	O:0.999804
returns	O	O:0.999757
the	O	O:0.999944
expanded	O	O:0.999625
DataFrame	B-API	O:0.994634
for	O	O:0.999996
each	O	O:0.999336
row	O	O:0.998952
(	O	O:0.999989
here	O	O:0.999831
the	O	O:0.999988
time	O	O:0.999947
difference	O	O:0.999679
is	O	O:0.999987
assumed	O	O:0.999874
to	O	O:0.999991
be	O	O:0.999999
fixed	O	O:0.999888
at	O	O:0.999903
2.0	O	O:0.953594
):	O	O:0.999882
#CODE	O	O:0.999299
	
So	O	O:0.999962
you	O	O:0.999978
could	O	O:0.999969
use	O	O:0.999991
apply	O	B-API:0.903736
and	O	O:0.999339
pd.to_numeric	B-API	B-API:0.995500
methods	O	O:0.981154
:	O	O:0.999878
#CODE	O	O:0.999777
	
Your	O	O:0.999666
solution	O	O:0.998990
is	O	O:0.999993
so	O	O:0.999964
elegant	O	O:0.999660
,	O	O:0.999993
it	O	O:0.999997
stimulates	O	O:0.999703
me	O	O:0.999992
to	O	O:0.999997
learn	O	O:0.999930
deeper	O	O:0.999067
in	O	O:0.999860
groupby	B-API	B-API:0.991583
and	O	O:0.999982
apply	O	B-API:0.729230
methods	O	O:0.979589
.	O	O:0.999051
	
here	O	O:0.998504
`	O	O:0.999990
apply	O	B-API:0.974953
`	O	O:0.999960
will	O	O:0.998331
call	O	O:0.999500
`	O	O:0.999991
nunique	B-API	B-API:0.999422
`	O	O:0.999995
on	O	O:0.999964
each	O	O:0.999935
column	O	O:0.999837
	
Apply	O	O:0.999902
a	O	O:0.999988
value	O	O:0.999533
to	O	O:0.999992
max	O	O:0.995976
values	O	O:0.999693
in	O	O:0.999996
a	O	O:0.999993
groupby	B-API	B-API:0.996815
	
The	O	O:0.999940
idea	O	O:0.998017
is	O	O:0.999989
to	O	O:0.999982
write	O	O:0.999997
an	O	O:0.999994
anonymous	O	O:0.999342
function	O	O:0.999980
that	O	O:0.999954
operates	O	O:0.999949
on	O	O:0.999999
each	O	O:0.999823
of	O	O:0.999999
your	O	O:0.999884
groups	O	O:0.999455
and	O	O:0.999995
feed	O	O:0.999810
this	O	O:0.999824
to	O	O:0.999999
your	O	O:0.999992
groupby	B-API	B-API:0.936887
using	O	O:0.999887
`	O	O:0.999734
apply	O	B-API:0.998886
`	O	O:0.999343
:	O	O:0.999009
#CODE	O	O:0.999898
	
Assuming	O	O:0.999863
that	O	O:0.999986
your	O	O:0.999890
'	O	O:0.999982
Time	O	O:0.999570
'	O	O:0.999982
column	O	O:0.999304
is	O	O:0.999992
already	O	O:0.999970
a	O	O:0.999978
`	O	O:0.999908
datetime64	O	O:0.955195
`	O	O:0.999998
then	O	O:0.999096
you	O	O:1.000000
want	O	O:0.999989
to	O	O:0.999981
`	O	O:0.999999
groupby	B-API	B-API:0.997806
`	O	O:0.999994
on	O	O:0.999715
'	O	O:0.999981
ID	O	O:0.999762
'	O	O:0.999965
column	O	O:0.999716
and	O	O:0.999999
then	O	O:0.999939
call	O	O:0.999478
`	O	O:0.999996
transform	O	B-API:0.994911
`	O	O:0.999994
to	O	O:0.999979
apply	O	O:0.993124
a	O	O:0.999976
lambda	O	O:0.998417
to	O	O:0.999995
create	O	O:0.999988
a	O	O:0.999998
series	O	O:0.999960
with	O	O:0.999913
an	O	O:0.999993
index	O	O:0.999981
aligned	O	O:0.999866
with	O	O:0.999996
your	O	O:0.999962
original	O	O:0.999616
df	O	O:0.999314
:	O	O:0.999943
#CODE	O	O:0.999739
	
apply	O	O:0.732750
a	O	O:0.999719
function	O	O:0.999370
to	O	O:0.999995
a	O	O:1.000000
dataframe	B-API	O:0.997742
column	O	O:0.999194
(	O	O:0.999997
datetime.date	O	O:0.989388
)	O	O:0.999907
	
I'm	O	O:0.999933
trying	O	O:0.999903
to	O	O:0.999982
apply	O	O:0.978181
this	O	O:0.999524
formula	O	O:0.999908
on	O	O:0.999996
a	O	O:0.999997
dataframe	B-API	O:0.999540
column	O	O:0.999707
'	O	O:0.999989
Days	O	O:0.996178
'	O	O:0.999637
(	O	O:0.999954
datetime.date	O	O:0.995961
type	O	O:0.986708
):	O	O:0.999956
#CODE	O	O:0.999652
	
function	O	O:0.999611
won't	O	O:0.999922
apply	O	O:0.640126
to	O	O:0.999994
pandas	O	O:0.999996
data	O	O:0.999988
frame	O	O:0.999993
,	O	O:0.999996
getting	O	O:0.999359
syntax	O	O:0.999680
error	O	O:0.999485
	
I'm	O	O:0.999933
trying	O	O:0.999903
to	O	O:0.999985
apply	O	O:0.986901
this	O	O:0.998777
function	O	O:0.999942
to	O	O:0.999997
a	O	O:1.000000
pandas	O	O:0.999941
data	O	O:0.999995
frame	O	O:0.999997
in	O	O:0.999997
order	O	O:0.999947
to	O	O:0.999994
see	O	O:0.999999
if	O	O:0.999997
a	O	O:0.999999
taxi	O	O:0.999607
pickup	O	O:0.998909
or	O	O:0.999994
dropoff	O	O:0.999686
time	O	O:0.999987
falls	O	O:0.999773
within	O	O:0.999904
the	O	O:0.999949
range	O	O:0.999966
that	O	O:0.999934
I	O	O:0.999999
created	O	O:0.999978
using	O	O:0.999723
the	O	O:0.999905
arrivemin	O	O:0.996745
,	O	O:0.999988
arrive	O	O:0.999818
max	O	O:0.930291
variable	O	O:0.999865
below	O	O:0.999421
.	O	O:0.999904
	
Let's	O	O:0.999879
say	O	O:0.999961
forecast	O	O:0.996385
is	O	O:0.999990
the	O	O:0.999870
function	O	O:0.999915
I	O	O:0.999997
have	O	O:0.999984
created	O	O:0.999846
that	O	O:0.999967
I	O	O:0.999999
want	O	O:0.999990
to	O	O:0.999733
apply	O	O:0.696639
:	O	O:0.999719
#CODE	O	O:0.999426
	
But	O	O:0.999958
here	O	O:0.999729
we	O	O:0.999992
are	O	O:0.999997
where	O	O:0.999990
my	O	O:0.999973
problem	O	O:0.997628
is	O	O:0.999976
...	O	O:0.998889
	
How	O	O:0.999876
can	O	O:0.999945
I	O	O:0.999999
apply	O	O:0.989610
this	O	O:0.995091
function	O	O:0.999891
to	O	O:0.999996
the	O	O:1.000000
dataframes	O	O:0.999323
?	O	O:0.999955
	
I	O	O:0.999985
have	O	O:0.999942
tried	O	O:0.999767
the	O	O:0.999990
apply	O	B-API:0.926637
function	O	O:0.999741
as	O	O:0.999906
follows	O	O:0.991811
:	O	O:0.999953
#CODE	O	O:0.999727
	
The	O	O:0.999849
`	O	O:0.999980
apply	O	B-API:0.964402
`	O	O:0.999627
function	O	O:0.999255
takes	O	O:0.999789
in	O	O:0.999996
a	O	O:0.999902
function	O	O:0.999225
and	O	O:0.999993
its	O	O:0.999926
args	O	O:0.996113
.	O	O:0.999745
	
The	O	O:0.999746
documentation	O	O:0.998566
is	O	O:0.999981
here	O	O:0.996478
.	O	O:0.999894
	
How	O	O:0.999914
do	O	O:0.999933
I	O	O:0.999998
apply	O	O:0.633328
datetime.date()	O	B-API:0.879056
and	O	O:0.999877
datetime.time()	O	O:0.603731
to	O	O:0.999944
the	O	O:1.000000
whole	O	O:0.999591
series	O	O:0.999873
	
Whether	O	O:0.999879
the	O	O:0.999993
speed	O	O:0.999105
of	O	O:0.999998
this	O	O:0.999836
operation	O	O:0.999836
is	O	O:0.999985
important	O	O:0.995223
is	O	O:0.999974
unknown	O	O:0.994218
--	O	O:0.999964
it	O	O:0.999946
probably	O	O:0.999856
isn't	O	O:0.999952
at	O	O:0.999982
all	O	O:0.999874
.	O	O:0.999874
	
It's	O	O:0.999827
certainly	O	O:0.999868
the	O	O:0.999996
nice	O	O:0.997596
,	O	O:0.999997
normal	O	O:0.999804
,	O	O:0.999996
readable	O	O:0.999934
thing	O	O:0.999968
to	O	O:0.999982
use	O	O:0.999999
serieswise	O	O:0.999561
operations	O	O:0.999659
rather	O	O:0.999967
than	O	O:0.999941
apply	O	B-API:0.709568
in	O	O:0.999946
these	O	O:0.999979
sorts	O	O:0.999871
of	O	O:0.999992
cases	O	O:0.999099
,	O	O:0.999997
though	O	O:0.999659
.	O	O:0.999915
	
So	O	O:0.999781
is	O	O:0.999993
the	O	O:0.999942
issue	O	O:0.999828
that	O	O:0.999759
I'm	O	O:0.999997
creating	O	O:0.999967
lists	O	O:0.998529
in	O	O:0.999979
my	O	O:0.999995
dataframe	B-API	O:0.997388
or	O	O:0.999996
that	O	O:0.999920
I'm	O	O:0.999999
applying	O	O:0.999986
a	O	O:0.999888
function	O	O:0.999763
to	O	O:0.999998
adjacent	O	O:0.999998
rows	O	O:0.999077
?	O	O:0.999953
	
I	O	O:0.999988
just	O	O:0.999952
used	O	O:0.999664
the	O	O:0.999957
list	O	O:0.986577
function	O	O:0.999982
arbitrarily	O	O:0.999457
in	O	O:0.999995
this	O	O:0.999811
example	O	O:0.999841
and	O	O:0.999985
am	O	O:0.999994
more	O	O:0.998901
interested	O	O:0.999939
generally	O	O:0.999465
in	O	O:0.999977
how	O	O:0.999973
to	O	O:0.999998
apply	O	O:0.996568
a	O	O:0.999902
function	O	O:0.999509
to	O	O:0.999998
adjacent	O	O:0.999998
rows	O	O:0.998631
.	O	O:0.999882
	
You	O	O:0.999912
can	O	O:0.999944
write	O	O:0.999998
your	O	O:0.999961
own	O	O:0.999758
function	O	O:0.999985
that	O	O:0.999923
accepts	O	O:0.999995
a	O	O:0.999999
subdataframe	O	O:0.999384
in	O	O:0.999982
the	O	O:0.999898
groupby	B-API	B-API:0.991391
...	O	O:0.999892
what	O	O:0.998905
function	O	O:0.999986
do	O	O:0.999983
you	O	O:0.999994
want	O	O:0.999965
to	O	O:0.999991
apply	O	O:0.962121
?	O	O:0.999794
	
Or	O	O:0.999784
is	O	O:0.999989
the	O	O:0.999958
question	O	O:0.999645
how	O	O:0.999960
to	O	O:0.999986
groupby	B-API	O:0.730788
adjacency	O	O:0.999638
?	O	O:0.999708
	
I've	O	O:0.999752
done	O	O:0.999885
some	O	O:0.999734
debugging	O	O:0.999161
and	O	O:0.999987
everytime	O	O:0.999920
I	O	O:0.999912
get	O	O:0.999994
this	O	O:0.999805
error	O	O:0.999723
is	O	O:0.999996
when	O	O:0.999879
apply	O	O:0.964603
duplicates	O	O:0.999601
the	O	O:0.999932
first	O	O:0.999836
group	O	O:0.995396
.	O	O:0.999869
	
So	O	O:0.999906
are	O	O:0.999992
there	O	O:0.999984
any	O	O:0.999951
better	O	O:0.999828
ways	O	O:0.999689
to	O	O:0.999981
do	O	O:0.999999
it	O	O:0.999994
without	O	O:0.999934
using	O	O:0.999788
apply	O	B-API:0.963954
?	O	O:0.997446
	
Consider	O	O:0.999708
simply	O	O:0.999934
creating	O	O:0.999899
an	O	O:0.999983
absolute	O	O:0.981469
value	O	O:0.999966
column	O	O:0.999950
through	O	O:0.999980
a	O	O:0.999992
defined	O	O:0.991630
function	O	O:0.999951
,	O	O:0.999988
apply	O	O:0.679663
the	O	O:0.999555
function	O	O:0.999811
on	O	O:0.999995
a	O	O:0.999991
groupby	B-API	B-API:0.992572
,	O	O:0.999965
and	O	O:0.999992
then	O	O:0.999765
sorting	O	O:0.999908
item	O	O:0.999870
ascending	O	O:0.997704
and	O	O:0.999989
absolute	O	O:0.931976
value	O	O:0.999651
descending	O	O:0.992616
.	O	O:0.999741
	
Finally	O	O:0.999895
,	O	O:0.999994
filter	O	O:0.997994
out	O	O:0.999938
the	O	O:0.999994
newly	O	O:0.999762
created	O	O:0.999309
,	O	O:0.999996
unneeded	O	O:0.999512
column	O	O:0.997433
:	O	O:0.999966
#CODE	O	O:0.999886
	
Actually	O	O:0.999788
,	O	O:0.999991
when	O	O:0.999806
i	O	O:0.999984
apply	O	O:0.978899
it	O	O:0.999926
to	O	O:0.999988
some	O	O:0.999998
dataFrame	B-API	O:0.999510
where	O	O:0.999997
some	O	O:0.999985
entries	O	O:0.999884
are	O	O:0.999974
nan	O	O:0.998573
,	O	O:0.999987
and	O	O:0.999999
some	O	O:0.999864
with	O	O:0.999893
unequal	O	O:0.998948
length	O	O:0.999636
,	O	O:0.999974
I	O	O:0.999995
have	O	O:0.999993
this	O	O:0.999660
error	O	O:0.999664
:	O	O:0.999954
Unalignable	O	O:0.999627
boolean	O	O:0.999033
Series	O	O:0.999818
key	O	O:0.999948
provided	O	O:0.999293
	
It's	O	O:0.999681
not	O	O:0.999991
really	O	O:0.999967
a	O	O:0.999983
bug	O	O:0.999364
,	O	O:0.999955
and	O	O:0.999969
it's	O	O:0.999962
just	O	O:0.999928
when	O	O:0.999981
you	O	O:0.999975
use	O	O:0.999993
`	O	O:0.999966
apply	O	B-API:0.994181
`	O	O:0.999873
.	O	O:0.997625
	
Did	O	O:0.999895
you	O	O:0.999985
read	O	O:0.999768
the	O	O:0.999988
documentation	O	O:0.999971
referenced	O	O:0.999594
in	O	O:0.999986
the	O	O:0.999989
github	O	O:0.995468
function	O	O:0.999776
?	O	O:0.999923
	
Can	O	O:0.999762
you	O	O:0.999990
make	O	O:0.999980
a	O	O:0.999999
more	O	O:0.999636
demonstrative	O	O:0.999786
example	O	O:0.999512
?	O	O:0.999934
	
You're	O	O:0.999651
not	O	O:0.999990
really	O	O:0.999987
even	O	O:0.999947
using	O	O:0.999995
the	O	O:0.999976
data	O	O:0.999896
frame	O	O:0.999998
on	O	O:0.999984
which	O	O:0.999936
you're	O	O:0.999980
calling	O	O:0.999388
`	O	O:0.999993
apply	O	B-API:0.982198
`	O	O:0.999980
other	O	O:0.999393
than	O	O:0.999960
the	O	O:0.999976
needless	O	O:0.996979
print	O	O:0.998724
statement	O	O:0.999883
.	O	O:0.999864
	
Seems	O	O:0.999909
like	O	O:0.999849
omitted	O	O:0.999968
that	O	O:0.999887
would	O	O:0.999991
provide	O	O:0.999958
the	O	O:0.999998
desired	O	O:0.998680
results	O	O:0.999719
.	O	O:0.999921
	
I	O	O:0.999953
can	O	O:0.999988
imagine	O	O:0.999996
a	O	O:0.999995
use	O	O:0.999661
case	O	O:0.999253
would	O	O:0.999838
be	O	O:0.999963
:	O	O:0.999999
generating	O	O:0.999858
a	O	O:0.999989
column	O	O:0.999857
representing	O	O:0.999974
a	O	O:0.999981
state	O	O:0.999373
,	O	O:0.999994
whose	O	O:0.999985
value	O	O:0.999952
changes	O	O:0.999960
according	O	O:0.999861
to	O	O:0.999985
both	O	O:0.999990
the	O	O:0.999994
previous	O	O:0.999461
state	O	O:0.999619
and	O	O:0.999993
the	O	O:0.999998
other	O	O:0.999843
current	O	O:0.999809
row	O	O:0.999947
values	O	O:0.999317
.	O	O:0.999876
	
This	O	O:0.998454
is	O	O:0.999997
typically	O	O:0.999980
a	O	O:0.999998
case	O	O:0.999485
the	O	O:0.999990
Pandas	O	O:0.999181
doc	O	O:0.999928
warns	O	O:0.999929
about	O	O:0.999982
when	O	O:0.999656
using	O	O:0.999955
the	O	O:0.999655
apply	O	B-API:0.990428
method	O	O:0.988455
(	O	O:0.999760
"	O	O:0.999993
side-effect	O	O:0.997183
")	O	O:0.999915
...	O	O:0.998510
	
`	O	O:0.999958
apply	O	B-API:0.992595
`	O	O:0.999880
works	O	O:0.999410
fine	O	O:0.999865
for	O	O:0.999981
that	O	O:0.999406
.	O	O:0.999928
	
I	O	O:0.999977
think	O	O:0.999921
you're	O	O:0.999780
missing	O	O:0.999674
the	O	O:0.999992
fundamentals	O	O:0.999846
of	O	O:0.999985
apply	O	B-API:0.593611
,	O	O:0.999994
when	O	O:0.999351
passed	O	O:0.999571
the	O	O:0.999994
Series	O	O:0.999396
`	O	O:0.999992
clasif	O	O:0.993352
`	O	O:0.999997
,	O	O:0.999997
your	O	O:0.999685
function	O	O:0.999874
should	O	O:0.999975
do	O	O:0.999999
something	O	O:0.999978
with	O	O:0.999759
`	O	O:0.999994
clasif	O	O:0.988308
`	O	O:0.999990
(	O	O:0.999927
at	O	O:0.999998
the	O	O:0.999974
moment	O	O:0.999862
,	O	O:0.999996
the	O	O:0.999925
function	O	O:0.999901
body	O	O:0.999874
makes	O	O:0.999845
no	O	O:0.999993
mention	O	O:0.999743
of	O	O:0.999992
it	O	O:0.999929
)	O	O:0.999989
.	O	O:0.999818
	
You	O	O:0.999981
have	O	O:0.999955
to	O	O:0.999998
pass	O	O:0.999982
the	O	O:0.999929
function	O	O:0.999944
to	O	O:0.999962
`	O	O:0.999999
apply	O	B-API:0.977790
`	O	O:0.999902
.	O	O:0.998599
	
#CODE	O	O:0.998453
	
for	O	O:0.999930
example	O	O:0.999057
,	O	O:0.999938
i'm	O	O:0.999956
looping	O	O:0.999700
through	O	O:0.999889
a	O	O:0.999971
dataset	O	O:0.999739
.	O	O:0.999925
after	O	O:0.999976
the	O	O:0.999973
first	O	O:0.999443
loop	O	O:0.999736
,	O	O:0.999992
i	O	O:0.999988
get	O	O:0.999992
a	O	O:0.999999
subset	O	O:0.999340
of	O	O:0.999992
my	O	O:0.999908
dataframe	B-API	O:0.996490
(	O	O:0.999999
rows	O	O:0.999912
1-10	O	O:0.999252
for	O	O:0.999994
example	O	O:0.999077
)	O	O:0.999980
.	O	O:0.999941
for	O	O:0.999988
the	O	O:0.999977
next	O	O:0.998668
loop	O	O:0.999703
,	O	O:0.999987
i	O	O:0.999979
want	O	O:0.999946
it	O	O:0.999989
to	O	O:0.999997
start	O	O:0.999997
iterating	O	O:0.999876
on	O	O:0.999717
`	O	O:0.999986
index	O	O:0.999829
=	O	O:0.999957
11	O	O:0.999845
`	O	O:0.999917
,	O	O:0.999929
and	O	O:0.999999
then	O	O:0.999877
apply	O	O:0.734486
whatever	O	O:0.999873
alg	O	O:0.999429
i	O	O:0.999986
have	O	O:0.999833
.	O	O:0.999987
the	O	O:0.999994
thing	O	O:0.999223
is	O	O:0.999950
,	O	O:0.999980
i	O	O:0.999964
do	O	O:0.999988
it	O	O:0.999993
by	O	O:0.999986
truncating	O	O:0.999664
the	O	O:0.999813
dataframe	B-API	O:0.993881
.	O	O:0.999846
	
so	O	O:0.999959
if	O	O:0.999990
the	O	O:0.999997
last	O	O:0.999733
item	O	O:0.999776
in	O	O:0.999986
the	O	O:0.999995
previous	O	O:0.999089
run	O	O:0.999393
was	O	O:0.999957
at	O	O:0.999964
`	O	O:0.999982
index=10	O	O:0.983398
`	O	O:0.999995
i	O	O:0.999906
truncate	O	O:0.904817
the	O	O:0.999988
dataframe	B-API	O:0.998989
to	O	O:0.999984
`	O	O:1.000000
df	O	O:0.999799
=	O	O:0.999986
df	O	O:0.999522
[	O	O:0.999953
11	O	O:0.999728
:]	O	O:0.999717
`	O	O:0.999902
	
I	O	O:0.999926
am	O	O:0.999997
trying	O	O:0.999757
to	O	O:0.999997
iterate	O	O:0.999989
over	O	O:0.999838
groups	O	O:0.995418
(	O	O:0.999996
produced	O	O:0.999833
by	O	O:0.999994
group.by	O	O:0.990476
in	O	O:0.999962
Pandas	O	O:0.999892
)	O	O:0.999983
in	O	O:0.999981
order	O	O:0.999927
to	O	O:0.999995
apply	O	O:0.989696
a	O	O:0.999563
function	O	O:0.995611
(	O	O:0.999995
create	O	O:0.999923
a	O	O:0.999996
chart	O	O:0.999385
in	O	O:0.999987
MatPlotLib	O	O:0.999614
)	O	O:0.999976
and	O	O:0.999987
get	O	O:0.999998
a	O	O:0.999989
result	O	O:0.999801
for	O	O:0.999995
each	O	O:0.999869
group	O	O:0.995227
in	O	O:0.999966
the	O	O:0.999938
DataFrame	B-API	O:0.986398
.	O	O:0.999820
	
I	O	O:0.999968
thought	O	O:0.999877
to	O	O:0.999959
do	O	O:0.999999
something	O	O:0.999963
like	O	O:0.999958
this	O	O:0.999934
,	O	O:0.999994
but	O	O:0.999984
I	O	O:0.999992
know	O	O:0.999967
there's	O	O:0.999909
a	O	O:0.999982
better	O	O:0.995753
/	O	O:0.999978
functional	O	O:0.991389
way	O	O:0.999107
:	O	O:0.999885
#CODE	O	O:0.999796
	
The	O	O:0.999982
result	O	O:0.999938
of	O	O:0.999993
the	O	O:0.999944
groupby	B-API	B-API:0.991563
function	O	O:0.999613
is	O	O:0.999979
a	O	O:0.999998
pandas	O	O:0.999925
data	O	O:0.999991
frame	O	O:0.999993
or	O	O:0.999991
series	O	O:0.999831
.	O	O:0.999934
	
You	O	O:0.999939
can	O	O:0.999911
use	O	O:0.999997
the	O	O:0.999960
apply	O	B-API:0.982340
function	O	O:0.998338
.	O	O:0.999491
	
See	O	O:0.999748
below	O	O:0.998916
example	O	O:0.998853
:	O	O:0.999943
#CODE	O	O:0.999872
	
You	O	O:0.999943
can	O	O:0.999942
filter	O	O:0.999889
the	O	O:0.999997
columns	O	O:0.999977
first	O	O:0.999973
to	O	O:0.999997
get	O	O:0.999997
the	O	O:0.999998
cols	O	O:0.999734
of	O	O:0.999993
interest	O	O:0.999192
and	O	O:0.999999
then	O	O:0.999915
call	O	O:0.999127
`	O	O:0.999995
apply	O	B-API:0.998215
`	O	O:0.999949
and	O	O:0.999671
use	O	O:0.999963
the	O	O:0.998775
boolean	O	O:0.997497
mask	O	O:0.903490
to	O	O:0.999984
mask	O	O:0.997352
the	O	O:0.999970
cols	O	O:0.991307
:	O	O:0.999982
#CODE	O	O:0.999792
	
You	O	O:0.999900
can	O	O:0.999972
apply	O	O:0.859107
function	O	O:0.999807
`	O	O:0.999962
f	O	O:0.999393
`	O	O:0.999991
for	O	O:0.999930
each	O	O:0.999662
group	O	O:0.989508
.	O	O:0.999882
	
the	O	O:0.999819
answer	O	O:0.999020
was	O	O:0.999905
to	O	O:0.999993
resample	O	O:0.971643
so	O	O:0.999964
I	O	O:0.999992
won't	O	O:0.999995
have	O	O:0.999800
any	O	O:0.999996
hole	O	O:0.999771
,	O	O:0.999979
and	O	O:0.999999
then	O	O:0.999861
apply	O	O:0.892200
the	O	O:0.999960
answer	O	O:0.997207
for	O	O:0.999993
this	O	O:0.998896
question	O	O:0.999119
:	O	O:0.999984
How	O	O:0.999985
do	O	O:0.999992
you	O	O:0.999985
shift	O	B-API:0.659381
Pandas	O	O:0.999904
DataFrame	B-API	O:0.997767
with	O	O:0.999920
a	O	O:0.999986
multiindex	O	O:0.999459
?	O	O:0.999952
	
Apply	O	O:0.999031
Number	O	O:0.999326
formatting	O	O:0.999620
to	O	O:0.999953
Pandas	O	O:0.999990
HTML	O	O:0.998849
CSS	O	O:0.999702
Styling	O	O:0.998485
	
Given	O	O:0.999195
the	O	O:0.999985
following	O	O:0.999545
,	O	O:0.999990
how	O	O:0.999989
can	O	O:0.999990
I	O	O:1.000000
set	O	O:0.999990
the	O	O:0.999918
NaN	O	O:0.954375
/	O	O:0.999976
None	O	O:0.999969
value	O	O:0.999971
of	O	O:0.999992
the	O	O:0.999978
B	O	O:0.999972
row	O	O:0.999983
based	O	O:0.999732
on	O	O:0.999996
the	O	O:0.999997
other	O	O:0.999991
rows	O	O:0.999281
?	O	O:0.999952
	
Should	O	O:0.999851
I	O	O:0.999990
use	O	O:0.999974
apply	O	B-API:0.978525
?	O	O:0.998685
	
#CODE	O	O:0.998453
	
Apply	O	O:0.996989
is	O	O:0.999966
the	O	O:0.999917
way	O	O:0.999857
forward	O	O:0.999336
,	O	O:0.999987
it	O	O:0.999976
seems	O	O:0.999741
.	O	O:0.999948
	
`	O	O:0.999884
fillna	B-API	B-API:0.999124
`	O	O:0.999993
doesn't	O	O:0.999649
appear	O	O:0.999977
to	O	O:0.999983
accept	O	O:0.999989
custom	O	O:0.998349
functions	O	O:0.999644
.	O	O:0.999763
	
[	O	O:0.999881
Reference	O	O:0.999848
SO	O	O:0.999916
question	O	O:0.999133
]	O	O:0.999650
(	O	O:0.999911
#URL	O	O:0.999470
)	O	O:0.999917
	
Then	O	O:0.999682
I	O	O:0.999997
use	O	O:0.999959
apply	O	B-API:0.996504
:	O	O:0.998983
#CODE	O	O:0.999022
	
dropped	O	O:0.995090
vectorization	O	O:0.999059
and	O	O:0.999963
list-comprehension	O	O:0.999911
tags	O	O:0.996628
-	O	O:0.999997
they	O	O:0.999913
don't	O	O:0.999983
really	O	O:0.999918
apply	O	O:0.838000
here	O	O:0.993856
	
I	O	O:0.999983
said	O	O:0.999955
,	O	O:0.999983
let	O	O:0.999893
me	O	O:0.999958
use	O	O:0.999956
a	O	O:0.999983
lambda	O	O:0.998626
to	O	O:0.999983
apply	O	O:0.914859
the	O	O:0.999921
.hour	B-API	B-API:0.994113
to	O	O:0.999994
every	O	O:0.999986
"	O	O:0.999988
row	O	O:0.999400
"	O	O:0.999952
.	O	O:0.999720
	
Thus	O	O:0.997081
:	O	O:0.999956
#CODE	O	O:0.999874
	
not	O	O:0.999944
sure	O	O:0.999906
how	O	O:0.999987
to	O	O:0.999990
apply	O	O:0.997598
this	O	O:0.999834
suggestion	O	O:0.999788
to	O	O:0.999997
the	O	O:0.999999
problem	O	O:0.999688
above	O	O:0.999660
.	O	O:0.999920
	
First	O	O:0.999864
of	O	O:0.999987
all	O	O:0.999904
-	O	O:0.999998
does	O	O:0.999980
your	O	O:0.999991
suggestion	O	O:0.999945
select	O	O:0.999836
the	O	O:0.999998
columns	O	O:0.999787
in	O	O:0.999985
the	O	O:0.999995
hypothetical	O	O:0.999668
array	O	O:0.999954
you	O	O:0.999935
suggest	O	O:0.999835
?	O	O:0.999980
	
Or	O	O:0.999933
would	O	O:0.999940
I	O	O:0.999998
do	O	O:0.999997
array	O	O:0.998932
[:	O	O:0.999828
,	O	O:0.999988
mask	O	O:0.939662
]	O	O:0.999925
which	O	O:0.999753
doesn't	O	O:0.999968
seem	O	O:0.999936
to	O	O:0.999996
work	O	O:0.999990
?	O	O:0.999985
	
Can	O	O:0.999866
I	O	O:0.999974
use	O	O:0.999986
the	O	O:0.994873
apply	O	B-API:0.932519
method	O	O:0.999101
to	O	O:0.999993
this	O	O:0.999999
task	O	O:0.999917
?,	O	O:0.999991
can	O	O:0.999949
someone	O	O:0.999998
help	O	O:0.999924
me	O	O:0.999992
to	O	O:0.999997
do	O	O:0.999997
in	O	O:0.999996
the	O	O:0.999986
right	O	O:0.999868
way	O	O:0.999965
using	O	O:0.999923
pandas	O	O:0.996901
.	O	O:0.999577
	
Apply	O	O:0.999736
group	O	O:0.998669
specific	O	O:0.999237
function	O	O:0.999913
to	O	O:0.999994
groups	O	O:0.999959
in	O	O:0.999965
Pandas	O	O:0.999786
	
I'm	O	O:0.999944
trying	O	O:0.999924
to	O	O:0.999994
figure	O	O:0.999967
out	O	O:0.999958
the	O	O:0.999993
best	O	O:0.999542
way	O	O:0.999979
to	O	O:0.999993
apply	O	O:0.994782
a	O	O:0.999854
function	O	O:0.999355
to	O	O:0.999992
groups	O	O:0.999990
within	O	O:0.999906
a	O	O:0.999992
Pandas	O	O:0.999882
dataframe	B-API	O:0.998978
where	O	O:0.999934
the	O	O:0.999962
function	O	O:0.999984
depends	O	O:0.999678
on	O	O:0.999992
the	O	O:0.999982
group	O	O:0.995902
.	O	O:0.999873
	
This	O	O:0.999541
question	O	O:0.999839
manages	O	O:0.999960
the	O	O:0.999986
result	O	O:0.999868
for	O	O:0.999997
a	O	O:0.999997
single	O	O:0.999289
column	O	O:0.999777
,	O	O:0.999989
but	O	O:0.999984
I	O	O:0.999998
have	O	O:0.999991
an	O	O:0.999994
arbitrary	O	O:0.999976
number	O	O:0.999898
of	O	O:0.999973
columns	O	O:0.999885
,	O	O:0.999996
and	O	O:0.999996
I	O	O:0.999997
want	O	O:0.999935
to	O	O:0.999893
lag	O	O:0.999998
all	O	O:0.999966
of	O	O:0.999999
them	O	O:0.998213
.	O	O:0.999969
	
I	O	O:0.999980
can	O	O:0.999974
use	O	O:0.999947
`	O	O:0.999942
groupby	B-API	B-API:0.999862
`	O	O:0.999962
and	O	O:0.999155
`	O	O:0.999993
apply	O	B-API:0.995967
`	O	O:0.999623
,	O	O:0.999548
but	O	O:0.999979
`	O	O:0.999989
apply	O	B-API:0.969049
`	O	O:0.999964
runs	O	O:0.995768
the	O	O:0.999990
`	O	O:0.999967
shift	O	B-API:0.982479
`	O	O:0.999980
function	O	O:0.999943
over	O	O:0.999961
each	O	O:0.999782
column	O	O:0.999917
independently	O	O:0.999648
,	O	O:0.999975
and	O	O:0.999974
it	O	O:0.999959
doesn't	O	O:0.999901
seem	O	O:0.999944
to	O	O:0.999998
like	O	O:0.999999
receiving	O	O:0.999953
an	O	O:0.999919
`	O	O:0.999954
[	O	O:0.999947
nrow	O	O:0.999927
,	O	O:0.999982
2	O	O:0.999919
]`	O	O:0.999899
shaped	O	O:0.999629
dataframe	B-API	O:0.994848
in	O	O:0.999941
return	O	O:0.997282
.	O	O:0.999765
	
Is	O	O:0.999986
there	O	O:0.999976
perhaps	O	O:0.999986
a	O	O:0.999983
function	O	O:0.999935
like	O	O:0.999772
`	O	O:0.999996
apply	O	B-API:0.982262
`	O	O:0.999970
that	O	O:0.999692
acts	O	O:0.999974
on	O	O:0.999996
the	O	O:0.999992
whole	O	O:0.999908
group	O	O:0.996510
sub-frame	O	O:0.999955
?	O	O:0.999910
	
Or	O	O:0.999711
is	O	O:0.999993
there	O	O:0.999978
a	O	O:0.999993
better	O	O:0.999237
way	O	O:0.999972
to	O	O:0.999965
do	O	O:0.999999
this	O	O:0.999912
?	O	O:0.999968
	
Great	O	O:0.999070
,	O	O:0.999987
thanks	O	O:0.999766
,	O	O:0.999986
I	O	O:0.999992
can't	O	O:0.999922
remember	O	O:0.999774
why	O	O:0.999979
I	O	O:0.999989
thought	O	O:0.999875
I	O	O:0.999975
needed	O	O:0.999975
to	O	O:0.999964
do	O	O:0.999998
it	O	O:0.999993
with	O	O:0.999941
`	O	O:0.999993
apply	O	B-API:0.963565
`	O	O:0.999948
-	O	O:0.999906
maybe	O	O:0.999926
it'll	O	O:0.999955
come	O	O:0.999770
to	O	O:0.999998
me	O	O:0.999995
later	O	O:0.999674
.	O	O:0.999912
	
Part	O	O:0.999674
of	O	O:0.999992
the	O	O:0.999949
solution	O	O:0.999822
,	O	O:0.999992
because	O	O:0.999959
you'll	O	O:0.999950
have	O	O:0.999998
duplicated	O	O:0.999993
rows	O	O:0.999882
with	O	O:0.999954
slightly	O	O:0.999982
different	O	O:0.999970
names	O	O:0.999825
so	O	O:0.999983
you	O	O:0.999984
couldn't	O	O:0.999969
apply	O	B-API:0.564501
drop_duplicates	B-API	B-API:0.998141
method	O	O:0.999916
of	O	O:0.999977
dataframes	O	O:0.996754
:	O	O:0.999976
#CODE	O	O:0.999869
	
Within	O	O:0.999824
each	O	O:0.999617
iteration	O	O:0.999957
,	O	O:0.999994
apply	O	O:0.603106
the	O	O:0.998328
function	O	O:0.998832
.	O	O:0.999857
	
As	O	O:0.999979
a	O	O:0.999992
general	O	O:0.999172
idea	O	O:0.999775
,	O	O:0.999994
you	O	O:0.999987
can	O	O:0.999973
use	O	O:0.999998
`	O	O:0.999986
apply	O	B-API:0.968406
`	O	O:0.999969
on	O	O:0.999967
your	O	O:0.999991
grouped	O	O:0.999961
data	O	O:0.999988
to	O	O:0.999999
take	O	O:0.999996
compute	O	O:0.999806
the	O	O:0.999997
ratio	O	O:0.999793
for	O	O:0.999991
each	O	O:0.998346
state	O	O:0.999057
:	O	O:0.999972
`	O	O:0.999992
sum	O	O:0.991104
(	O	O:0.999999
bads	O	O:0.999558
)	O	O:0.999979
/	O	O:0.999934
sum	O	O:0.996777
(	O	O:0.999991
goods	O	O:0.998910
)`	O	O:0.999711
	
The	O	O:0.999928
easiest	O	O:0.999391
way	O	O:0.999877
would	O	O:0.999951
probably	O	O:0.999981
be	O	O:0.999999
to	O	O:0.999995
set	O	O:0.999889
'	O	O:0.999967
Date	O	O:0.998457
and	O	O:0.999988
Time	O	O:0.999322
'	O	O:0.999909
as	O	O:0.999929
the	O	O:0.999893
index	O	O:0.999623
and	O	O:0.999999
then	O	O:0.999934
use	O	O:0.999973
`	O	O:0.999959
groupby	B-API	B-API:0.999608
`	O	O:0.999993
with	O	O:0.995164
`	O	O:0.999985
TimeGrouper	O	O:0.826290
`	O	O:0.999994
to	O	O:0.999953
group	O	O:0.999993
the	O	O:0.999984
dates	O	O:0.987961
.	O	O:0.999870
	
Then	O	O:0.999763
you	O	O:0.999995
can	O	O:0.999996
apply	O	O:0.981984
`	O	O:0.999969
cumsum()	B-API	B-API:0.999961
`	O	O:0.999922
:	O	O:0.999722
#CODE	O	O:0.999908
	
In	O	O:0.999964
reality	O	O:0.999760
I	O	O:0.999996
need	O	O:0.999979
to	O	O:0.999953
apply	O	O:0.995453
this	O	O:0.998991
function	O	O:0.999917
on	O	O:0.999990
40K	O	O:0.999993
over	O	O:0.999953
rows	O	O:0.998252
.	O	O:0.999896
	
And	O	O:0.999922
currently	O	O:0.999887
it	O	O:0.999988
runs	O	O:0.998850
	
very	O	O:0.999627
slow	O	O:0.999669
using	O	O:0.999881
Pandas	O	O:0.996604
'	O	O:0.999826
apply	O	B-API:0.924776
'	O	O:0.997286
:	O	O:0.999863
#CODE	O	O:0.999795
	
Without	O	O:0.999679
trying	O	O:0.999975
this	O	O:0.999892
I	O	O:0.999991
can't	O	O:0.999979
be	O	O:0.999994
entirely	O	O:0.999981
sure	O	O:0.999853
that	O	O:0.999926
the	O	O:0.999998
returned	O	O:0.999964
value	O	O:0.999958
of	O	O:0.999945
`	O	O:0.999987
func	O	O:0.961375
`	O	O:0.999995
will	O	O:0.999356
be	O	O:0.999999
acceptable	O	O:0.999971
for	O	O:0.999901
use	O	O:0.999784
with	O	O:0.997785
`	O	O:0.999960
apply	O	B-API:0.963926
`	O	O:0.999960
,	O	O:0.999955
so	O	O:0.999994
you	O	O:0.999944
might	O	O:0.999995
need	O	O:0.999994
to	O	O:0.999999
play	O	O:0.999987
around	O	O:0.999892
with	O	O:0.999972
that	O	O:0.999976
a	O	O:0.999998
little	O	O:0.997603
.	O	O:0.999810
	
But	O	O:0.999965
this	O	O:0.999815
should	O	O:0.999985
give	O	O:0.999969
you	O	O:0.999999
a	O	O:0.999999
series	O	O:0.999920
with	O	O:0.999873
the	O	O:0.999985
index	O	O:0.999944
being	O	O:0.999715
the	O	O:0.999979
description	O	O:0.998451
and	O	O:0.999995
the	O	O:0.999992
value	O	O:0.999909
being	O	O:0.999546
a	O	O:0.999996
list	O	O:0.991950
or	O	O:0.999999
dict	O	O:0.999919
of	O	O:0.999996
the	O	O:0.999987
last	O	O:0.999923
five	O	O:0.999847
counts	O	O:0.999111
.	O	O:0.999945
	
After	O	O:0.999791
creating	O	O:0.999175
new	O	O:0.999929
dataframe	B-API	O:0.999711
by	O	O:0.999930
`	O	O:0.999980
concat	O	B-API:0.995348
`	O	O:0.999999
dataframes	O	O:0.999131
I	O	O:0.999993
can	O	O:0.999992
group	O	O:0.999725
it	O	O:0.999998
by	O	O:0.999955
row	O	O:0.999915
and	O	O:0.999977
apply	O	O:0.503599
`	O	O:0.999680
resample	O	B-API:0.994939
`	O	O:0.999985
on	O	O:0.999990
each	O	O:0.999936
of	O	O:0.999996
these	O	O:0.999902
groups	O	O:0.998471
(	O	O:0.999845
with	O	O:0.999886
method	O	O:0.999809
`	O	O:0.999993
ffill	B-API	B-API:0.957283
`	O	O:0.999996
to	O	O:0.999833
forward	O	O:0.999998
fill	O	O:0.992481
)	O	O:0.999971
.	O	O:0.999797
	
#CODE	O	O:0.998453
	
numpy	O	O:0.996655
and	O	O:0.999986
pandas	O	O:0.999169
are	O	O:0.999947
not	O	O:0.999975
needed	O	O:0.999972
here	O	O:0.999876
although	O	O:0.999979
you	O	O:0.999994
need	O	O:0.999991
to	O	O:0.999998
apply	O	O:0.989847
the	O	O:0.999945
strip	O	B-API:0.941305
function	O	O:0.999928
to	O	O:0.999996
every	O	O:0.999996
element	O	O:0.999870
in	O	O:0.999996
each	O	O:0.999904
row	O	O:0.999983
to	O	O:0.999987
remove	O	O:0.999977
excess	O	O:0.999611
spaces	O	O:0.994391
(	O	O:0.999976
`	O	O:0.999970
map	O	B-API:0.995759
(	O	O:0.999984
str.strip	B-API	B-API:0.643417
,	O	O:0.999965
row	O	O:0.999928
)`)	O	O:0.998888
and	O	O:0.999995
also	O	O:0.999987
pass	O	O:0.997521
`	O	O:0.999944
delimiter=	O	O:0.998049
'	O	O:0.999973
|	O	O:0.999947
'`	O	O:0.999984
into	O	O:0.997356
`	O	O:0.999983
csv.reader	O	O:0.564237
`	O	O:0.999994
because	O	O:0.999824
the	O	O:0.999993
default	O	O:0.999730
delimiter	O	O:0.999422
is	O	O:0.999995
a	O	O:0.999974
comma	O	O:0.998158
.	O	O:0.999866
	
Lastly	O	O:0.999884
you	O	O:0.999990
need	O	O:0.999984
to	O	O:0.999994
`	O	O:1.000000
return	O	O:0.999252
sum	O	O:0.999858
`	O	O:0.999994
at	O	O:0.999982
the	O	O:0.999999
end	O	O:0.999932
of	O	O:0.999982
you	O	O:0.999300
function	O	O:0.999978
.	O	O:0.999932
	
Thanks	O	O:0.999008
for	O	O:0.999973
the	O	O:0.999962
great	O	O:0.995542
solution	O	O:0.999412
.	O	O:0.999885
	
Is	O	O:0.999997
your	O	O:0.999945
use	O	O:0.999953
of	O	O:0.999938
`	O	O:0.999941
apply	O	B-API:0.937930
`	O	O:0.999987
a	O	O:0.998232
recommended	O	O:0.999079
method	O	O:0.999974
to	O	O:0.999993
access	O	O:0.999998
pandas	O	O:0.999927
functionality	O	O:0.999951
that	O	O:0.999682
isn't	O	O:0.999991
present	O	O:0.999565
in	O	O:0.999985
dask	O	O:0.998314
(	O	O:0.999995
assuming	O	O:0.999957
the	O	O:0.999995
block	O	O:0.999686
can	O	O:0.999945
fit	O	O:0.999993
into	O	O:0.999942
memory	O	O:0.999812
)	O	O:0.999942
?	O	O:0.999904
	
This	O	O:0.999524
would	O	O:0.999975
be	O	O:0.999999
a	O	O:0.999999
huge	O	O:0.999131
help	O	O:0.998957
to	O	O:0.999990
by-pass	O	O:0.999984
the	O	O:0.999992
current	O	O:0.999915
limitations	O	O:0.999925
of	O	O:0.999996
dask	O	O:0.999842
dataframes	O	O:0.999770
!	O	O:0.999821
	
For	O	O:0.999946
the	O	O:0.999979
record	O	O:0.997051
`	O	O:0.999987
applymap	B-API	B-API:0.995158
`	O	O:0.999934
is	O	O:0.999905
used	O	O:0.999886
to	O	O:0.999990
apply	O	O:0.973056
a	O	O:0.999966
lambda	O	O:0.969797
function	O	O:0.999912
elementwise	O	O:0.990750
(	O	O:0.999967
documentation	O	O:0.999685
)	O	O:0.999949
	
You	O	O:0.999923
could	O	O:0.999790
use	O	O:0.999920
standard	O	O:0.999408
method	O	O:0.999970
of	O	O:0.999990
strings	O	O:0.998543
`	O	O:0.999991
isnumeric	B-API	B-API:0.903808
`	O	O:0.999974
and	O	O:0.999938
apply	O	O:0.808880
it	O	O:0.999700
to	O	O:0.999990
each	O	O:0.999996
value	O	O:0.999926
in	O	O:0.999999
your	O	O:0.999945
`	O	O:0.999976
id	O	O:0.998619
`	O	O:0.999986
column	O	O:0.992968
:	O	O:0.999988
#CODE	O	O:0.999824
	
I	O	O:0.999991
then	O	O:0.999873
would	O	O:0.999996
like	O	O:0.999995
to	O	O:0.999999
apply	O	O:0.994584
a	O	O:0.999879
function	O	O:0.999367
to	O	O:0.999999
each	O	O:0.999989
of	O	O:0.999991
these	O	O:0.999938
groups	O	O:0.999590
.	O	O:0.999839
	
This	O	O:0.998228
function	O	O:0.999825
computes	O	O:0.999896
two	O	O:0.999993
values	O	O:0.999736
for	O	O:0.999984
each	O	O:0.999589
group	O	O:0.992044
#CODE	O	O:0.999728
	
I	O	O:0.999933
am	O	O:0.999994
having	O	O:0.999844
some	O	O:0.999796
issues	O	O:0.999781
understanding	O	O:0.999446
the	O	O:0.999993
type	O	O:0.998802
of	O	O:0.999999
your	O	O:0.999741
`	O	O:0.999998
group	O	O:0.988445
`	O	O:0.999994
argument	O	O:0.999695
to	O	O:0.999973
`	O	O:0.999999
compute_thing()	O	O:0.688033
`	O	O:0.999990
.	O	O:0.999641
	
Shouldn't	O	O:0.999920
apply	O	O:0.924686
iterate	O	O:0.999254
over	O	O:0.999920
the	O	O:0.999990
results	O	O:0.999947
of	O	O:0.999968
the	O	O:0.999992
grouping	O	O:0.999836
,	O	O:0.999928
and	O	O:0.999994
the	O	O:0.999973
`	O	O:0.999962
group	O	O:0.969049
`	O	O:0.999993
argument	O	O:0.999915
refers	O	O:0.999705
to	O	O:0.999993
the	O	O:0.999999
current	O	O:0.999889
group	O	O:0.999507
in	O	O:0.999987
consideration	O	O:0.998582
?	O	O:0.999987
	
I	O	O:0.999985
am	O	O:0.999997
familiar	O	O:0.998920
with	O	O:0.999907
the	O	O:0.999926
page	O	O:0.998890
.	O	O:0.999955
but	O	O:0.999986
I	O	O:0.999997
dont	O	O:0.999982
know	O	O:0.999214
how	O	O:0.999989
i	O	O:0.999945
can	O	O:0.999983
apply	O	O:0.993658
this	O	O:0.999869
to	O	O:0.999996
my	O	O:1.000000
data	O	O:0.999799
and	O	O:0.999998
plot	O	O:0.999945
,	O	O:0.999987
as	O	O:0.999998
they	O	O:0.999832
are	O	O:0.999998
using	O	O:0.999989
only	O	O:0.999505
one	O	O:0.999985
variable	O	O:0.999962
with	O	O:0.999949
an	O	O:0.999990
arithmetic	O	O:0.999952
operation	O	O:0.999869
,	O	O:0.999997
while	O	O:0.999978
I	O	O:0.999998
have	O	O:0.999999
a	O	O:0.999990
dataset	O	O:0.999859
with	O	O:0.999981
different	O	O:0.999918
categories	O	O:0.998590
.	O	O:0.999913
	
so	O	O:0.999972
you	O	O:0.999993
can	O	O:0.999988
later	O	O:0.999991
apply	O	B-API:0.794467
:	O	O:0.999666
#CODE	O	O:0.999337
	
Although	O	O:0.999918
technically	O	O:0.999943
correct	O	O:0.999881
we	O	O:0.999985
should	O	O:0.999963
avoid	O	O:0.999975
posting	O	O:0.999804
answers	O	O:0.999859
that	O	O:0.999858
use	O	O:0.999977
`	O	O:0.999972
apply	O	B-API:0.988008
`	O	O:0.999987
where	O	O:0.999651
a	O	O:0.999998
vectorised	O	O:0.999487
solution	O	O:0.999914
exists	O	O:0.999917
as	O	O:0.999998
this	O	O:0.999888
confuses	O	O:0.999778
users	O	O:0.999577
	
Figured	O	O:0.999593
it	O	O:0.999974
out	O	O:0.999791
!	O	O:0.999936
	
Apparently	O	O:0.999681
I	O	O:0.999975
had	O	O:0.999992
some	O	O:0.999849
missing	O	O:0.999745
values	O	O:0.999836
denoted	O	O:0.999805
as	O	O:0.999962
'	O	O:0.999872
..	O	O:0.999763
	
'	O	O:0.999938
,	O	O:0.999997
so	O	O:0.999989
I	O	O:0.999978
had	O	O:0.999979
to	O	O:0.999931
wrangle	O	O:0.999976
it	O	O:0.999989
out	O	O:0.999996
first	O	O:0.999973
by	O	O:0.999981
dropping	O	O:0.999832
those	O	O:0.999948
rows	O	O:0.999789
-	O	O:0.999999
then	O	O:0.999974
I	O	O:1.000000
can	O	O:0.999996
apply	O	O:0.721556
.astype	B-API	B-API:0.993541
	
Is	O	O:0.999979
there	O	O:0.999986
some	O	O:0.999863
way	O	O:0.999975
i	O	O:0.999960
can	O	O:0.999988
apply	O	O:0.980226
a	O	O:0.999988
lambda	O	O:0.986617
function	O	O:0.999929
to	O	O:0.999986
all	O	O:1.000000
members	O	O:0.999898
of	O	O:0.999973
the	O	O:0.999993
list	O	O:0.999928
columns	O	O:0.999879
in	O	O:0.999997
order	O	O:0.999977
to	O	O:0.999992
speed	O	O:0.999978
the	O	O:0.999996
following	O	O:0.999514
up	O	O:0.999821
?	O	O:0.999933
	
Thanks	O	O:0.997593
!	O	O:0.999815
	
#CODE	O	O:0.998453
	
All	O	O:0.999794
you're	O	O:0.999967
doing	O	O:0.999555
is	O	O:0.999999
skipping	O	O:0.999605
rows	O	O:0.999807
that	O	O:0.999977
have	O	O:0.999986
`	O	O:0.999994
?	O	O:0.999907
	
`	O	O:0.999982
so	O	O:0.999977
you	O	O:0.999990
can	O	O:0.999997
just	O	O:0.999994
filter	O	O:0.999888
these	O	O:0.999956
out	O	O:0.999986
using	O	O:0.999925
`	O	O:0.999870
apply	O	B-API:0.998874
`	O	O:0.999353
:	O	O:0.999009
#CODE	O	O:0.999898
	
Is	O	O:0.999986
there	O	O:0.999983
a	O	O:0.999995
way	O	O:0.999916
to	O	O:0.999993
apply	O	O:0.991480
a	O	O:0.999881
`	O	O:0.999867
math	O	O:0.998116
`	O	O:0.999980
function	O	O:0.999840
to	O	O:0.999999
a	O	O:1.000000
whole	O	O:0.999620
column	O	O:0.999909
?	O	O:0.999975
	
You	O	O:0.999905
could	O	O:0.999890
use	O	O:0.999948
apply	O	B-API:0.970647
:	O	O:0.998961
#CODE	O	O:0.999124
	
Index	O	O:0.996388
levels	O	O:0.999863
doubled	O	O:0.999829
when	O	O:0.999878
using	O	O:0.999847
groupby	B-API	B-API:0.986842
/	O	O:0.999874
apply	O	B-API:0.774759
on	O	O:0.999895
a	O	O:0.999975
multiindexed	O	O:0.999888
dataframe	B-API	O:0.995445
	
I	O	O:0.999993
have	O	O:0.999996
a	O	O:0.999990
problem	O	O:0.999886
when	O	O:0.999948
using	O	O:0.999990
a	O	O:0.999966
groupby	B-API	B-API:0.999362
/	O	O:0.999958
apply	O	B-API:0.527319
chain	O	O:0.988188
on	O	O:0.999958
multiindexed	O	O:0.999989
pandas	O	O:0.999986
data	O	O:0.999922
frames	O	O:0.998127
:	O	O:0.999994
The	O	O:0.999999
resulting	O	O:0.999982
data	O	O:0.999972
frame	O	O:0.999996
contains	O	O:0.999813
the	O	O:0.999995
grouped	O	O:0.999342
level	O	O:0.997055
(	O	O:0.999987
s	O	O:0.999952
)	O	O:0.999995
twice	O	O:0.999537
!	O	O:0.999944
	
Is	O	O:0.999984
this	O	O:0.999919
intended	O	O:0.999865
behavior	O	O:0.999780
?	O	O:0.999816
	
How	O	O:0.999908
can	O	O:0.999948
I	O	O:1.000000
avoid	O	O:0.999992
that	O	O:0.999162
another	O	O:0.999968
index	O	O:0.999981
level	O	O:0.998066
is	O	O:0.999987
created	O	O:0.997087
?	O	O:0.999962
	
Do	O	O:0.999959
I	O	O:0.999997
have	O	O:0.999987
to	O	O:0.999971
remove	O	O:0.999964
it	O	O:0.999994
by	O	O:0.999989
hand	O	O:0.999979
every	O	O:0.999952
time	O	O:0.999965
I	O	O:0.999996
do	O	O:0.999997
a	O	O:0.999935
groupby	B-API	B-API:0.997735
/	O	O:0.999979
apply	O	B-API:0.798927
operation	O	O:0.997355
?	O	O:0.999801
	
My	O	O:0.999963
actual	O	O:0.996784
function	O	O:0.999985
that	O	O:0.999931
I	O	O:0.999996
apply	O	O:0.849792
looks	O	O:0.996355
different	O	O:0.998592
.	O	O:0.999696
	
I	O	O:0.999989
just	O	O:0.999954
used	O	O:0.999923
the	O	O:0.999964
sum	O	O:0.999806
here	O	O:0.999949
to	O	O:0.999997
show	O	O:0.999995
the	O	O:0.999997
effect	O	O:0.999988
of	O	O:0.999999
a	O	O:0.999916
function	O	O:0.999941
that	O	O:0.999903
takes	O	O:0.999962
a	O	O:0.999995
dataframe	B-API	O:0.979110
and	O	O:0.999988
returns	O	O:0.999904
a	O	O:0.999909
dataframe	B-API	O:0.949366
(	O	O:0.999957
"	O	O:0.999998
case	O	O:0.999801
2	O	O:0.999971
"	O	O:0.999961
in	O	O:0.999956
the	O	O:0.999982
documentation	O	O:0.999916
of	O	O:0.999989
apply	O	B-API:0.773330
)	O	O:0.999904
.	O	O:0.998966
	
It	O	O:0.999927
seems	O	O:0.999976
that	O	O:0.999968
you	O	O:0.999991
would	O	O:0.999997
have	O	O:0.999996
quite	O	O:0.999997
a	O	O:0.999998
few	O	O:0.999927
columns	O	O:0.999927
to	O	O:0.999990
aggregate	O	O:0.938288
-	O	O:0.999991
assume	O	O:0.999919
'	O	O:0.999995
date	O	O:0.997693
'	O	O:0.999912
is	O	O:0.999999
your	O	O:0.999828
timestamp	O	O:0.997009
,	O	O:0.999998
there	O	O:0.999969
seem	O	O:0.999883
to	O	O:0.999997
be	O	O:1.000000
seven	O	O:0.999832
,	O	O:0.999988
ie	O	O:0.999994
,	O	O:0.999985
data1	O	O:0.999266
-	O	O:0.999983
data7	O	O:0.997889
.	O	O:0.999888
	
If	O	O:0.999971
you	O	O:0.999967
apply	O	O:0.958404
three	O	O:0.999863
aggregation	O	O:0.999335
functions	O	O:0.999867
to	O	O:0.999977
these	O	O:0.999999
seven	O	O:0.999817
columns	O	O:0.999193
(	O	O:0.999998
mean	O	O:0.999845
,	O	O:0.999996
min	O	O:0.826665
,	O	O:0.999992
max	O	O:0.786986
)	O	O:0.999985
you'll	O	O:0.999873
get	O	O:0.999901
7	O	O:0.999988
x	O	O:0.999955
3	O	O:0.999982
columns	O	O:0.999964
with	O	O:0.999981
a	O	O:0.999997
hierarchical	O	O:0.973799
`	O	O:0.999956
MultiIndex	O	B-API:0.742273
`	O	O:0.999931
(	O	O:0.999978
where	O	O:0.999932
`	O	O:0.999919
.agg	B-API	B-API:0.998509
(	O	O:0.999989
dict	O	O:0.999645
)`	O	O:0.999841
works	O	O:0.999956
differently	O	O:0.999973
as	O	O:0.999979
for	O	O:0.999394
'	O	O:0.999954
ordinary	O	O:0.999216
'	O	O:0.999990
columns	O	O:0.999753
)	O	O:0.999980
.	O	O:0.999874
	
Example	O	O:0.999670
follows	O	O:0.999335
,	O	O:0.999993
including	O	O:0.999864
saving	O	O:0.999308
to	O	O:0.999990
csv	O	O:0.999996
at	O	O:0.999995
the	O	O:0.999975
end	O	O:0.999637
.	O	O:0.999800
	
`	O	O:0.999898
GroupBy	B-API	B-API:0.939613
`	O	O:0.999981
docs	O	O:0.997548
and	O	O:0.999992
`	O	O:0.999965
to_csv	B-API	B-API:0.999838
`	O	O:0.999983
docs	O	O:0.997297
.	O	O:0.999942
	
Thank	O	O:0.999614
you	O	O:0.999942
so	O	O:0.999995
much	O	O:0.999695
:)	O	O:0.999968
it	O	O:0.999945
prints	O	O:0.999916
the	O	O:0.999991
output	O	O:0.999428
in	O	O:0.999987
the	O	O:0.999961
way	O	O:0.999960
you've	O	O:0.999718
shown	O	O:0.999018
.	O	O:0.999937
	
AttributeError	O	O:0.995253
:	O	O:0.999967
Cannot	O	O:0.999934
access	O	O:0.999860
callable	O	O:0.999727
attribute	O	O:0.999954
'	O	O:0.999840
to_csv	B-API	B-API:0.952093
'	O	O:0.999987
of	O	O:0.999802
'	O	O:0.999934
DataFrameGroupBy	B-API	B-API:0.739934
'	O	O:0.999969
objects	O	O:0.999708
,	O	O:0.999996
try	O	O:0.999988
using	O	O:0.999928
the	O	O:0.999744
'	O	O:0.999808
apply	O	B-API:0.954750
'	O	O:0.999137
method	O	O:0.999884
But	O	O:0.999976
I	O	O:0.999998
still	O	O:0.999888
get	O	O:0.999976
this	O	O:0.999977
error	O	O:0.999939
while	O	O:0.999974
printing	O	O:0.999188
to	O	O:0.999978
csv	O	O:0.999993
file	O	O:0.999761
	
Then	O	O:0.999816
you	O	O:0.999996
can	O	O:0.999990
use	O	O:0.999998
`	O	O:0.999983
apply	O	B-API:0.993351
`	O	O:0.999678
(	O	O:0.999462
or	O	O:0.999998
there	O	O:0.999941
probably	O	O:0.999649
is	O	O:0.999999
something	O	O:0.999781
better	O	O:0.999617
)	O	O:0.999995
,	O	O:0.999992
to	O	O:0.999994
get	O	O:0.999998
the	O	O:0.999993
output	O	O:0.999922
you	O	O:0.999996
have	O	O:0.999947
above	O	O:0.999729
:	O	O:0.999980
#CODE	O	O:0.999822
	
The	O	O:0.999934
simplest	O	O:0.999479
way	O	O:0.999930
would	O	O:0.999958
be	O	O:0.999999
to	O	O:0.999993
use	O	O:0.999994
DeepSpace	O	O:0.995475
answer	O	O:0.999174
.	O	O:0.999785
	
However	O	O:0.999814
,	O	O:0.999994
if	O	O:0.999995
you	O	O:0.999987
really	O	O:0.999977
want	O	O:0.999985
to	O	O:0.999983
use	O	O:0.999999
an	O	O:0.999976
anonymous	O	O:0.998903
function	O	O:0.999964
you	O	O:0.999955
can	O	O:0.999985
use	O	O:0.999994
apply	O	B-API:0.951154
:	O	O:0.999305
#CODE	O	O:0.999212
	
In	O	O:0.999887
xlswriter	O	O:0.998846
,	O	O:0.999998
once	O	O:0.999937
a	O	O:0.999992
format	O	O:0.998407
is	O	O:0.999987
defined	O	O:0.998963
,	O	O:0.999993
how	O	O:0.999933
can	O	O:0.999966
you	O	O:0.999999
apply	O	O:0.964455
it	O	O:0.999980
to	O	O:0.999994
a	O	O:0.999999
range	O	O:0.997538
and	O	O:0.999993
not	O	O:0.999984
to	O	O:0.999992
the	O	O:1.000000
whole	O	O:0.999972
column	O	O:0.999957
or	O	O:0.999999
the	O	O:0.999999
whole	O	O:0.999753
row	O	O:0.999883
?	O	O:0.999950
	
In	O	O:0.999887
xlswriter	O	O:0.998846
,	O	O:0.999998
once	O	O:0.999937
a	O	O:0.999992
format	O	O:0.998407
is	O	O:0.999987
defined	O	O:0.998963
,	O	O:0.999993
how	O	O:0.999933
can	O	O:0.999966
you	O	O:0.999999
apply	O	O:0.964455
it	O	O:0.999980
to	O	O:0.999994
a	O	O:0.999999
range	O	O:0.997538
and	O	O:0.999993
not	O	O:0.999984
to	O	O:0.999992
the	O	O:1.000000
whole	O	O:0.999972
column	O	O:0.999957
or	O	O:0.999999
the	O	O:0.999999
whole	O	O:0.999753
row	O	O:0.999883
?	O	O:0.999950
	
There	O	O:0.999587
isn't	O	O:0.999963
a	O	O:0.999992
helper	O	O:0.990914
function	O	O:0.999860
to	O	O:0.999954
do	O	O:0.999999
this	O	O:0.999882
.	O	O:0.999925
	
You	O	O:0.999896
will	O	O:0.999958
need	O	O:0.999980
to	O	O:0.999999
loop	O	O:0.999998
over	O	O:0.999749
the	O	O:0.999960
range	O	O:0.999823
and	O	O:0.999977
apply	O	O:0.796721
the	O	O:0.999846
data	O	O:0.997717
and	O	O:0.999993
formatting	O	O:0.999958
to	O	O:0.999972
each	O	O:0.999985
cell	O	O:0.999309
.	O	O:0.999956
	
I've	O	O:0.999532
written	O	O:0.999816
some	O	O:0.999941
code	O	O:0.999945
to	O	O:0.999999
clean	O	O:0.999972
up	O	O:0.999991
the	O	O:0.999991
tweet	O	O:0.998256
for	O	O:0.999992
some	O	O:0.999292
machine	O	O:0.999957
learning	O	O:0.999058
applications	O	O:0.999588
and	O	O:0.999959
I	O	O:0.999984
would	O	O:0.999989
like	O	O:0.999945
to	O	O:0.999998
apply	O	O:0.963128
the	O	O:0.999961
cleaning	O	O:0.994821
function	O	O:0.999923
to	O	O:0.999995
the	O	O:1.000000
entire	O	O:0.999480
Tweet	O	O:0.999601
column	O	O:0.999743
.	O	O:0.999901
	
If	O	O:0.999992
this	O	O:0.999589
is	O	O:0.999997
the	O	O:0.999955
reason	O	O:0.999782
,	O	O:0.999994
you	O	O:0.999971
would	O	O:0.999995
need	O	O:0.999997
to	O	O:0.999999
apply	O	O:0.975268
`	O	O:0.999691
.fillna	B-API	B-API:0.999324
(	O	O:0.999993
value	O	O:0.999974
)`	O	O:0.999984
prior	O	O:0.999831
to	O	O:0.999992
`	O	O:0.999999
.groupby()	B-API	B-API:0.999878
`	O	O:0.999996
with	O	O:0.999967
a	O	O:0.999999
value	O	O:0.999927
of	O	O:0.999998
your	O	O:0.999799
choice	O	O:0.999891
-	O	O:0.999987
for	O	O:0.999976
instance	O	O:0.999222
0	O	O:0.999363
.	O	O:0.999779
	
it	O	O:0.999980
just	O	O:0.999950
returns	O	O:0.999993
a	O	O:0.999991
df	O	O:0.999560
with	O	O:0.999946
all	O	O:0.999960
NaN	O	O:0.999254
values	O	O:0.998920
.	O	O:0.999818
	
With	O	O:0.999886
rolling	O	O:0.988253
apply	O	B-API:0.909070
is	O	O:0.999807
the	O	O:0.995954
window	O	O:0.999826
size	O	O:0.999917
time	O	O:0.999966
based	O	O:0.999814
?	O	O:0.999966
	
Is	O	O:0.999974
there	O	O:0.999949
no	O	O:0.999990
other	O	O:0.999983
ways	O	O:0.999886
to	O	O:0.999983
reference	O	O:0.999999
the	O	O:0.999994
value	O	O:0.999951
in	O	O:0.999995
a	O	O:0.999999
previous	O	O:0.998876
row	O	O:0.999814
.	O	O:0.999812
	
I	O	O:0.999945
get	O	O:0.999994
this	O	O:0.999482
error	O	O:0.999697
:	O	O:0.999898
TypeError	O	O:0.999056
:	O	O:0.999955
unsupported	O	O:0.999458
operand	O	O:0.999864
type	O	O:0.991279
(	O	O:0.999990
s	O	O:0.999924
)	O	O:0.999981
for	O	O:0.999594
+	O	O:0.999358
:	O	O:0.999094
'	O	O:0.999967
numpy.int64	O	O:0.987241
'	O	O:0.999904
and	O	O:0.999923
'	O	O:0.999964
str	O	O:0.988504
'	O	O:0.999888
.	O	O:0.999832
	
This	O	O:0.998559
is	O	O:0.999988
how	O	O:0.999947
I	O	O:0.999996
apply	O	O:0.989706
your	O	O:0.994007
code	O	O:0.996668
:	O	O:0.999996
featuresA	O	O:0.999716
=	O	O:0.999783
[	O	O:0.999978
col	O	O:0.999055
+	O	O:0.999950
'	O	O:0.999909
_x	O	O:0.999187
'	O	O:0.999937
for	O	O:0.999991
col	O	O:0.998112
in	O	O:0.999961
group.to_frame()	O	O:0.854750
.columns	O	O:0.919710
]	O	O:0.999863
	
Scikit	O	O:0.998691
learn's	O	O:0.997069
MultiLabelBinarizer	O	O:0.999546
creates	O	O:0.999419
a	O	O:0.999992
binary	O	O:0.998609
matrix	O	O:0.999943
from	O	O:0.999704
labels	O	O:0.998961
.	O	O:0.999908
	
You	O	O:0.999957
can	O	O:0.999977
extract	O	O:0.999748
`	O	O:0.999997
feature	O	O:0.998770
`	O	O:0.999998
column	O	O:0.999602
from	O	O:0.999961
pandas	O	O:0.999809
dataframe	B-API	O:0.997770
and	O	O:0.999969
apply	O	B-API:0.664716
it	O	O:0.994384
:	O	O:0.999848
#CODE	O	O:0.999804
	
Another	O	O:0.999739
approach	O	O:0.999560
which	O	O:0.999753
might	O	O:0.999974
be	O	O:0.999997
cleaner	O	O:0.999969
if	O	O:0.999985
you	O	O:0.999995
have	O	O:0.999990
a	O	O:0.999999
lot	O	O:0.999958
of	O	O:0.999989
conditions	O	O:0.999059
to	O	O:0.999997
apply	O	O:0.940686
would	O	O:0.999805
to	O	O:0.999997
be	O	O:1.000000
to	O	O:0.999996
chain	O	O:0.999996
your	O	O:0.999989
filters	O	O:0.999517
together	O	O:0.999897
with	O	O:0.999982
reduce	O	O:0.998953
or	O	O:0.999997
a	O	O:0.999964
loop	O	O:0.993626
:	O	O:0.999956
#CODE	O	O:0.999830
	
I	O	O:0.999987
completely	O	O:0.999965
change	O	O:0.999824
your	O	O:0.999788
solution	O	O:0.999535
to	O	O:0.999988
`	O	O:0.999999
groupby	B-API	B-API:0.998809
`	O	O:0.999994
with	O	O:0.996932
`	O	O:0.999993
apply	O	B-API:0.972495
`	O	O:0.999972
custom	O	O:0.921421
function	O	O:0.999932
`	O	O:0.999971
f	O	O:0.997688
`	O	O:0.999982
.	O	O:0.999310
	
For	O	O:0.999933
check	O	O:0.999814
string	O	O:0.999953
values	O	O:0.998156
is	O	O:0.999986
better	O	O:0.999703
use	O	O:0.999782
`	O	O:0.999844
isin	B-API	B-API:0.999469
`	O	O:0.999981
.	O	O:0.999133
	
I	O	O:0.999922
would	O	O:0.999995
like	O	O:0.999939
to	O	O:0.999999
apply	O	O:0.983233
a	O	O:0.999964
boolean	O	O:0.964173
`	O	O:0.999991
mask	O	B-API:0.640861
`	O	O:0.999995
in	O	O:0.999934
function	O	O:0.999986
of	O	O:0.999993
the	O	O:0.999995
name	O	O:0.999977
of	O	O:0.999989
the	O	O:0.999987
column	O	O:0.999874
.	O	O:0.999900
	
I	O	O:0.999967
know	O	O:0.999932
that	O	O:0.999683
it	O	O:0.999957
is	O	O:0.999999
easy	O	O:0.999622
for	O	O:0.999962
values	O	O:0.982972
:	O	O:0.999837
#CODE	O	O:0.999909
	
I	O	O:0.999961
am	O	O:0.999997
sure	O	O:0.999786
that	O	O:0.999968
could	O	O:0.999993
be	O	O:0.999999
do	O	O:0.999993
with	O	O:0.999885
aggregates	O	O:0.986774
(	O	O:0.999977
lambdas	O	O:0.999905
func	O	O:0.998194
)	O	O:0.999992
or	O	O:0.999963
apply	O	B-API:0.698333
.	O	O:0.999348
	
How	O	O:0.999897
to	O	O:0.999994
apply	O	O:0.963812
drop_duplicates	B-API	B-API:0.998747
to	O	O:0.999874
grouped	O	O:0.999977
dataframe	B-API	O:0.996223
?	O	O:0.999930
	
You	O	O:0.999947
could	O	O:0.999995
once	O	O:0.999995
iterate	O	O:0.999958
over	O	O:0.999853
the	O	O:0.999961
array	O	O:0.999876
and	O	O:0.999986
get	O	O:0.999984
the	O	O:0.999976
colours	O	O:0.999842
corresponding	O	O:0.999559
to	O	O:0.999995
each	O	O:0.999984
value	O	O:0.999906
and	O	O:0.999996
store	O	O:0.999985
them	O	O:0.999238
in	O	O:0.999987
an	O	O:0.999954
NxMx3	O	O:0.984469
(	O	O:0.999966
image	O	O:0.999657
)	O	O:0.999970
array	O	O:0.999701
.	O	O:0.999828
	
Then	O	O:0.999701
sort	O	O:0.999846
the	O	O:0.999993
array	O	O:0.999705
and	O	O:0.999989
the	O	O:0.999991
image	O	O:0.998712
in	O	O:0.999976
the	O	O:0.999996
same	O	O:0.999970
manner	O	O:0.999876
e.g.	O	O:0.999864
get	O	O:0.999974
the	O	O:0.999999
sort	O	O:0.999693
indices	O	O:0.999910
from	O	O:0.999951
the	O	O:0.999995
original	O	O:0.999488
array	O	O:0.999896
and	O	O:0.999993
apply	O	O:0.988633
them	O	O:0.995949
to	O	O:0.999969
the	O	O:0.999998
image	O	O:0.999634
array	O	O:0.999852
.	O	O:0.999894
	
Then	O	O:0.999859
you	O	O:0.999997
can	O	O:0.999997
display	O	O:0.999990
the	O	O:0.999992
image	O	O:0.999822
with	O	O:0.999838
`	O	O:0.999968
plt.imshow	B-API	B-API:0.991453
`	O	O:0.999967
	
I	O	O:0.999966
found	O	O:0.999945
an	O	O:0.999931
issue	O	O:0.999945
about	O	O:0.999978
a	O	O:0.999989
similar	O	O:0.999522
error	O	O:0.999975
when	O	O:0.999824
using	O	O:0.999969
the	O	O:0.999593
apply	O	B-API:0.987669
method	O	O:0.996181
and	O	O:0.999972
that	O	O:0.999880
bug	O	O:0.999831
was	O	O:0.999875
fixed	O	O:0.998637
.	O	O:0.999820
	
Since	O	O:0.999936
they	O	O:0.999923
fixed	O	O:0.999921
for	O	O:0.999989
apply	O	B-API:0.830144
I	O	O:0.999814
used	O	O:0.999875
the	O	O:0.999844
apply	O	B-API:0.924582
function	O	O:0.999597
to	O	O:0.999947
do	O	O:0.999999
what	O	O:0.999933
I	O	O:0.999993
want	O	O:0.999947
.	O	O:0.999055
	
#CODE	O	O:0.998453
	
I	O	O:0.999962
used	O	O:0.999949
the	O	O:0.998693
apply	O	B-API:0.797131
method	O	O:0.999634
on	O	O:0.999963
the	O	O:0.999998
grouped	O	O:0.999937
data	O	O:0.999909
,	O	O:0.999984
and	O	O:0.999998
the	O	O:0.999986
easiest	O	O:0.999194
way	O	O:0.999985
to	O	O:0.999987
get	O	O:0.999999
the	O	O:0.999938
'	O	O:0.999962
identifier	O	O:0.999739
'	O	O:0.999971
was	O	O:0.999987
to	O	O:0.999992
get	O	O:0.999998
the	O	O:0.999996
groups	O	O:0.999826
keys	O	O:0.999260
.	O	O:0.999936
	
If	O	O:0.999971
you	O	O:0.999992
have	O	O:0.999996
a	O	O:0.999999
suggestion	O	O:0.999784
on	O	O:0.999993
how	O	O:0.999990
to	O	O:0.999995
do	O	O:1.000000
this	O	O:0.999994
more	O	O:0.999944
efficiently	O	O:0.999906
let	O	O:0.999786
me	O	O:0.999964
know	O	O:0.998139
!	O	O:0.999917
	
tz-aware	O	O:0.993972
datetime	O	O:0.998043
series	O	O:0.999771
producing	O	O:0.999873
UTC-based	O	O:0.999604
.date()	B-API	B-API:0.991432
output	O	O:0.998666
in	O	O:0.999985
pandas	O	O:0.999913
series	O	O:0.999957
apply	O	B-API:0.918103
(	O	O:0.999956
lambda	O	O:0.999314
)	O	O:0.999949
operation	O	O:0.997590
	
Pandas	O	O:0.999734
apply	O	B-API:0.830503
function	O	O:0.997654
-	O	O:0.999973
comparing	O	O:0.999969
each	O	O:0.999767
row	O	O:0.999971
to	O	O:0.999996
entire	O	O:0.999995
column	O	O:0.999850
	
The	O	O:0.999746
`	O	O:0.999957
groupby	B-API	B-API:0.998912
`	O	O:0.999914
function	O	O:0.998999
makes	O	O:0.999916
sense	O	O:0.999596
,	O	O:0.999951
but	O	O:0.999924
I'm	O	O:0.999969
having	O	O:0.999916
trouble	O	O:0.999862
defining	O	O:0.999799
the	O	O:0.999974
appropriate	O	O:0.999931
apply	O	B-API:0.903126
function	O	O:0.999319
.	O	O:0.999572
	
I've	O	O:0.999855
seen	O	O:0.999690
examples	O	O:0.999872
using	O	O:0.999980
multiple	O	O:0.999952
columns	O	O:0.999729
as	O	O:0.999992
inputs	O	O:0.999824
to	O	O:0.999997
a	O	O:0.999998
function	O	O:0.999377
,	O	O:0.999988
and	O	O:0.999997
others	O	O:0.999971
using	O	O:0.999607
`	O	O:0.999947
axis=1	O	O:0.959023
`	O	O:0.999988
to	O	O:0.999956
look	O	O:0.999989
at	O	O:0.999999
individual	O	O:0.999943
rows	O	O:0.999136
,	O	O:0.999910
but	O	O:0.999978
haven't	O	O:0.999903
seen	O	O:0.999897
a	O	O:0.999999
description	O	O:0.999881
of	O	O:0.999994
using	O	O:0.999944
both	O	O:0.999811
the	O	O:0.999974
entire	O	O:0.999445
column	O	O:0.999317
(	O	O:0.999990
to	O	O:0.999997
look	O	O:0.999966
for	O	O:0.999993
matches	O	O:0.999281
)	O	O:0.999908
and	O	O:0.999984
the	O	O:0.999996
entry	O	O:0.998904
for	O	O:0.999990
the	O	O:0.999979
row	O	O:0.999761
in	O	O:0.999913
question	O	O:0.999387
(	O	O:0.999997
to	O	O:0.999996
determine	O	O:0.999983
the	O	O:0.999989
time	O	O:0.999938
range	O	O:0.999930
)	O	O:0.999974
.	O	O:0.999771
	
Not	O	O:0.999981
sure	O	O:0.999925
if	O	O:0.999983
I	O	O:0.999982
understand	O	O:0.999959
what	O	O:0.999121
you	O	O:0.999978
looking	O	O:0.999907
for	O	O:0.999957
.	O	O:0.999697
	
But	O	O:0.999960
you	O	O:0.999986
can	O	O:0.999996
access	O	O:0.999997
a	O	O:0.999998
column	O	O:0.999890
inside	O	O:0.999958
an	O	O:0.999981
`	O	O:0.999982
apply	O	B-API:0.977528
`	O	O:0.999585
function	O	O:0.997011
.	O	O:0.999923
	
For	O	O:0.999919
example	O	O:0.999356
,	O	O:0.999998
this	O	O:0.999952
calculates	O	O:0.998995
how	O	O:0.999999
many	O	O:0.999992
rows	O	O:0.999940
inside	O	O:0.999977
a	O	O:0.999999
group	O	O:0.998313
have	O	O:0.999953
times	O	O:0.999925
less	O	O:0.999916
than	O	O:0.999249
12	O	O:0.998977
:	O	O:0.999955
#CODE	O	O:0.999774
	
This	O	O:0.999595
functionality	O	O:0.999898
makes	O	O:0.999840
sense	O	O:0.999886
-	O	O:0.999994
you	O	O:0.999980
can	O	O:0.999988
use	O	O:0.999999
an	O	O:0.999987
apply	O	O:0.535306
to	O	O:0.999915
compare	O	O:0.999961
each	O	O:0.999880
element	O	O:0.999953
to	O	O:0.999999
a	O	O:1.000000
fixed	O	O:0.999183
value	O	O:0.999764
(	O	O:0.999962
in	O	O:0.999999
your	O	O:0.999930
example	O	O:0.999879
,	O	O:0.999988
`	O	O:0.999993
x	O	O:0.999042
<	O	O:0.999983
12	O	O:0.999756
`	O	O:0.999928
and	O	O:0.999853
`	O	O:0.999993
6	O	O:0.993219
<	O	O:0.999978
x	O	O:0.999706
<	O	O:0.999956
12	O	O:0.999857
`)	O	O:0.999915
.	O	O:0.999711
	
What	O	O:0.999718
I	O	O:0.999986
am	O	O:0.999998
looking	O	O:0.998965
for	O	O:0.999953
would	O	O:0.999955
need	O	O:0.999964
to	O	O:0.999999
,	O	O:1.000000
for	O	O:0.999994
each	O	O:0.999244
element	O	O:0.999848
,	O	O:0.999997
compare	O	O:0.999832
to	O	O:0.999992
all	O	O:0.999999
the	O	O:0.999995
other	O	O:0.999904
elements	O	O:0.999556
and	O	O:0.999986
return	O	O:0.999902
the	O	O:0.999861
number	O	O:0.999899
matching	O	O:0.999636
the	O	O:0.999990
closeness	O	O:0.999093
criterion	O	O:0.999798
.	O	O:0.999968
	
To	O	O:0.999928
continue	O	O:0.999473
-	O	O:0.999991
I	O	O:0.999990
think	O	O:0.999948
it	O	O:0.999852
is	O	O:0.999923
O	O	O:0.988332
(	O	O:0.999981
n^2	O	O:0.999093
)	O	O:0.999985
,	O	O:0.999989
as	O	O:0.999993
it	O	O:0.999976
needs	O	O:0.999978
to	O	O:0.999996
compare	O	O:0.999992
each	O	O:0.999950
value	O	O:0.999977
to	O	O:0.999994
all	O	O:1.000000
other	O	O:0.999936
values	O	O:0.998866
.	O	O:0.999846
	
I	O	O:0.999873
had	O	O:0.999969
hoped	O	O:0.999633
using	O	O:0.999940
a	O	O:0.999960
grouping	O	O:0.992336
criterion	O	O:0.999898
that	O	O:0.999934
produces	O	O:0.999994
a	O	O:0.999998
greater	O	O:0.999755
number	O	O:0.999965
of	O	O:0.999976
smaller	O	O:0.999911
segments	O	O:0.999936
to	O	O:0.999990
apply	O	O:0.987209
the	O	O:0.999678
function	O	O:0.999684
to	O	O:0.999985
would	O	O:1.000000
speed	O	O:0.999931
up	O	O:0.999991
the	O	O:0.999959
calculation	O	O:0.998199
,	O	O:0.999977
but	O	O:0.999991
this	O	O:0.999857
doesn't	O	O:0.999988
seem	O	O:0.999963
to	O	O:0.999997
be	O	O:1.000000
the	O	O:0.999997
case	O	O:0.999480
in	O	O:0.999988
practice	O	O:0.999506
.	O	O:0.999920
	
Any	O	O:0.999885
idea	O	O:0.999172
whether	O	O:0.999946
this	O	O:0.999677
is	O	O:0.999997
a	O	O:0.999984
fundamental	O	O:0.998956
misunderstanding	O	O:0.999679
,	O	O:0.999950
or	O	O:0.999998
just	O	O:0.999847
issues	O	O:0.999975
with	O	O:0.999948
the	O	O:0.999950
implementation	O	O:0.999440
?	O	O:0.999946
	
To	O	O:0.999957
get	O	O:0.999691
around	O	O:0.999974
this	O	O:0.999947
,	O	O:0.999993
I	O	O:0.999991
found	O	O:0.999955
that	O	O:0.999862
you	O	O:0.999995
can	O	O:0.999997
apply	O	O:0.998996
a	O	O:0.999996
date	O	O:0.982963
function	O	O:0.999957
to	O	O:0.999992
the	O	O:1.000000
column	O	O:0.999790
in	O	O:0.999996
sqlalchemy	O	O:0.999945
,	O	O:0.999997
similar	O	O:0.999764
to	O	O:0.999998
this	O	O:0.999991
issue	O	O:0.999816
.	O	O:0.999892
	
Use	O	O:0.999624
`	O	O:0.999967
apply	O	B-API:0.989650
`	O	O:0.999876
and	O	O:0.999948
pass	O	O:0.998594
`	O	O:0.999927
axis=1	O	O:0.993997
`	O	O:0.999992
to	O	O:0.999932
call	O	O:0.999947
`	O	O:0.999995
describe	O	O:0.949961
`	O	O:0.999983
row-wise	O	O:0.912950
:	O	O:0.999962
#CODE	O	O:0.999716
	
But	O	O:0.999983
when	O	O:0.999898
I	O	O:0.999997
apply	O	O:0.959120
the	O	O:0.999628
code	O	O:0.999237
,	O	O:0.999998
I	O	O:0.999996
get	O	O:0.999983
the	O	O:0.999955
following	O	O:0.998958
Error	O	O:0.996347
:	O	O:0.999916
#CODE	O	O:0.999745
	
However	O	O:0.999817
,	O	O:0.999998
when	O	O:0.999881
I	O	O:0.999996
try	O	O:0.999999
to	O	O:0.999966
apply	O	O:0.991500
that	O	O:0.998986
function	O	O:0.999952
in	O	O:0.999998
order	O	O:0.999951
to	O	O:0.999988
write	O	O:0.999994
the	O	O:0.999985
output	O	O:0.999947
to	O	O:0.999999
a	O	O:1.000000
new	O	O:0.999937
column	O	O:0.999923
in	O	O:0.999996
a	O	O:0.999999
pandas	O	O:0.999943
data	O	O:0.999987
frame	O	O:0.999990
,	O	O:0.999987
it's	O	O:0.999642
returning	O	O:0.999443
None	O	O:0.998820
.	O	O:0.999856
	
See	O	O:0.999275
below	O	O:0.995097
:	O	O:0.999959
#CODE	O	O:0.999736
	
formatter	O	O:0.999274
function	O	O:0.999919
to	O	O:0.999994
apply	O	O:0.984655
to	O	O:0.999984
columns	O	O:0.999997
elements	O	O:0.999944
if	O	O:0.999997
they	O	O:0.999983
are	O	O:0.999993
floats	O	O:0.999783
,	O	O:0.999895
default	O	O:0.999636
None	O	O:0.998966
.	O	O:0.999781
	
The	O	O:0.999976
result	O	O:0.999887
of	O	O:0.999998
this	O	O:0.999005
function	O	O:0.999988
must	O	O:0.999959
be	O	O:0.999999
a	O	O:0.999998
unicode	O	O:0.989424
string	O	O:0.998561
.	O	O:0.999526
	
One	O	O:0.999800
option	O	O:0.999452
is	O	O:0.999991
to	O	O:0.999968
use	O	O:0.999998
an	O	O:0.999717
apply	O	B-API:0.967932
:	O	O:0.999604
#CODE	O	O:0.999107
	
My	O	O:0.999956
understanding	O	O:0.994456
is	O	O:0.999974
that	O	O:0.999908
this	O	O:0.999993
just	O	O:0.999973
uses	O	O:0.999922
the	O	O:0.999992
keys	O	O:0.999696
to	O	O:0.999988
perform	O	O:0.999991
the	O	O:0.999967
lookup	O	O:0.980145
,	O	O:0.999999
same	O	O:0.999985
as	O	O:0.999997
if	O	O:0.999990
you	O	O:0.999997
pass	O	O:0.999859
a	O	O:0.999969
`	O	O:0.999942
Series	O	O:0.981233
`	O	O:0.999991
and	O	O:0.999975
similarly	O	O:0.999954
it	O	O:0.999939
will	O	O:0.999862
bork	O	O:0.999740
and	O	O:0.999999
generate	O	O:0.999936
a	O	O:0.999945
`	O	O:0.999969
KeyError	O	O:0.997178
`	O	O:0.999994
if	O	O:0.999923
the	O	O:0.999993
label	O	O:0.997731
/	O	O:0.999904
key	O	O:0.999913
doesn't	O	O:0.999944
exist	O	O:0.999936
,	O	O:0.999997
in	O	O:0.999996
that	O	O:0.999954
case	O	O:0.999996
doing	O	O:0.999971
`	O	O:0.999932
apply	O	B-API:0.998019
(	O	O:0.999903
lambda	O	O:0.997128
x	O	O:0.999025
:	O	O:0.999922
other_dict.get	O	O:0.995583
(	O	O:0.999990
x	O	O:0.999839
,	O	O:0.999992
other_val	O	O:0.999172
))`	O	O:0.999355
would	O	O:0.999951
at	O	O:0.999995
least	O	O:0.999952
not	O	O:0.999978
go	O	O:0.999988
mental	O	O:0.999528
if	O	O:0.999977
the	O	O:0.999921
key	O	O:0.999796
doesn't	O	O:0.999830
exist	O	O:0.999729
.	O	O:0.999980
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.995976
a	O	O:0.999857
function	O	O:0.999408
to	O	O:0.999998
groups	O	O:0.999993
of	O	O:0.999959
`	O	O:0.999978
x1	O	O:0.999328
`	O	O:0.999998
based	O	O:0.999231
on	O	O:0.999998
the	O	O:0.999996
columns	O	O:0.999891
in	O	O:0.999963
`	O	O:0.999993
x2	O	O:0.997743
`	O	O:0.999977
.	O	O:0.999449
	
e.g.	O	O:0.988618
:	O	O:0.999914
#CODE	O	O:0.999820
	
I	O	O:0.999992
have	O	O:0.999988
a	O	O:0.999955
big	O	O:0.999683
dataframe	B-API	O:0.990327
,	O	O:0.999919
and	O	O:0.999968
I'm	O	O:0.999991
grouping	O	O:0.999820
by	O	O:0.999982
one	O	O:0.999987
to	O	O:0.999984
n	O	O:0.999999
columns	O	O:0.999872
,	O	O:0.999989
and	O	O:0.999999
want	O	O:0.999948
to	O	O:0.999975
apply	O	O:0.995405
a	O	O:0.999852
function	O	O:0.998917
on	O	O:0.999993
these	O	O:0.999987
groups	O	O:0.999824
across	O	O:0.999944
two	O	O:0.999973
columns	O	O:0.998816
(	O	O:0.999976
e.g.	O	O:0.999752
foo	O	O:0.998927
and	O	O:0.999993
bar	O	O:0.999636
)	O	O:0.999777
.	O	O:0.999459
	
But	O	O:0.999823
`	O	O:0.999990
transform	O	B-API:0.935613
`	O	O:0.999987
apparently	O	O:0.998504
isn't	O	O:0.999990
able	O	O:0.999949
to	O	O:0.999994
combine	O	O:0.999985
multiple	O	O:0.999986
columns	O	O:0.999936
together	O	O:0.999771
because	O	O:0.999911
it	O	O:0.999986
looks	O	O:0.999979
at	O	O:0.999997
each	O	O:0.999947
column	O	O:0.999935
separately	O	O:0.998476
(	O	O:0.999987
unlike	O	O:0.999842
apply	O	B-API:0.750426
)	O	O:0.999534
.	O	O:0.999176
	
What	O	O:0.998554
is	O	O:0.999987
the	O	O:0.999981
next	O	O:0.999725
best	O	O:0.999856
alternative	O	O:0.999906
in	O	O:0.999994
terms	O	O:0.999941
of	O	O:0.999992
speed	O	O:0.994175
/	O	O:0.999985
elegance	O	O:0.999635
?	O	O:0.999923
	
e.g.	O	O:0.999282
I	O	O:0.999990
could	O	O:0.999965
use	O	O:0.999913
`	O	O:0.999960
apply	O	B-API:0.995086
`	O	O:0.999896
and	O	O:0.999984
then	O	O:0.999983
create	O	O:0.999804
`	O	O:0.999998
df	O	O:0.999160
[	O	O:0.999971
'	O	O:0.999967
new_col	O	O:0.999283
']`	O	O:0.999983
by	O	O:0.999969
using	O	O:0.999615
`	O	O:0.999798
pd.match	O	O:0.687460
`	O	O:0.999965
,	O	O:0.999839
but	O	O:0.999996
that	O	O:0.999737
would	O	O:0.999995
necessitate	O	O:0.999997
matching	O	O:0.999983
over	O	O:0.999616
sometimes	O	O:0.999847
multiple	O	O:0.999915
groupby	B-API	B-API:0.928476
columns	O	O:0.995197
(	O	O:0.999905
col1	O	O:0.998661
and	O	O:0.999989
col2	O	O:0.999426
)	O	O:0.999915
which	O	O:0.999655
seems	O	O:0.999954
really	O	O:0.999933
hacky	O	O:0.999529
/	O	O:0.999935
would	O	O:0.999978
take	O	O:0.999995
a	O	O:1.000000
fair	O	O:0.999653
amount	O	O:0.999956
of	O	O:0.999968
code	O	O:0.998818
.	O	O:0.999966
	
P.S.	O	O:0.994230
	
:	O	O:0.999925
Guess	O	O:0.999967
need	O	O:0.999988
to	O	O:0.999991
use	O	O:0.999999
the	O	O:0.999840
groupby	B-API	B-API:0.998584
function	O	O:0.999444
,	O	O:0.999912
but	O	O:0.999995
because	O	O:0.999969
of	O	O:0.999998
lack	O	O:0.999736
of	O	O:0.999996
experience	O	O:0.999683
,	O	O:0.999989
do	O	O:0.999953
not	O	O:0.999957
understand	O	O:0.999811
how	O	O:0.999974
to	O	O:0.999982
apply	O	O:0.987953
it	O	O:0.999945
to	O	O:0.999992
my	O	O:0.999998
problem	O	O:0.999282
.	O	O:0.999923
	
I've	O	O:0.999756
also	O	O:0.999958
done	O	O:0.999955
my	O	O:0.999981
Google	O	O:0.999597
searches	O	O:0.999522
but	O	O:0.999973
I	O	O:0.999982
do	O	O:0.999972
not	O	O:0.999888
feel	O	O:0.999895
found	O	O:0.999870
results	O	O:0.999961
apply	O	O:0.515323
to	O	O:0.999971
my	O	O:0.999985
issue	O	O:0.999487
.	O	O:0.999875
	
using	O	O:0.999734
the	O	O:0.999735
`	O	O:0.999861
apply	O	B-API:0.998223
`	O	O:0.999973
method	O	O:0.999738
of	O	O:0.999989
the	O	O:0.999978
DataFrame	B-API	O:0.997474
,	O	O:0.999988
with	O	O:0.999993
something	O	O:0.999918
like	O	O:0.999539
:	O	O:0.999983
	
Actually	O	O:0.999857
apply	O	O:0.614444
produces	O	O:0.998694
the	O	O:0.999789
`	O	O:0.999817
<	O	O:0.998079
built-in	O	O:0.999710
method	O	O:0.999985
values	O	O:0.999431
of	O	O:0.999987
dict	O	O:0.999824
object	O	O:0.999953
at	O	O:0.999960
0x00	O	O:0.998913
...	O	O:0.999460
	
`	O	O:0.999859
output	O	O:0.997573
.	O	O:0.999939
	
So	O	O:0.999755
apply()	B-API	B-API:0.996528
may	O	O:0.999913
not	O	O:0.999974
be	O	O:0.999999
good	O	O:0.999598
for	O	O:0.999989
this	O	O:0.999887
particular	O	O:0.999603
transformation	O	O:0.999734
.	O	O:0.999895
	
I	O	O:0.999980
also	O	O:0.999984
tend	O	O:0.998906
to	O	O:0.999983
not	O	O:0.999997
use	O	O:0.999920
apply	O	B-API:0.932471
but	O	O:0.999697
it	O	O:0.999944
can	O	O:0.999978
be	O	O:0.999999
convenient	O	O:0.999443
(	O	O:0.999963
for	O	O:0.999995
readability	O	O:0.999666
or	O	O:0.999995
when	O	O:0.999929
using	O	O:0.999996
certain	O	O:0.999322
functions	O	O:0.999250
for	O	O:0.999973
example	O	O:0.999162
)	O	O:0.999923
.	O	O:0.999832
	
Anyway	O	O:0.999692
in	O	O:0.999979
my	O	O:0.999979
test	O	O:0.995565
(	O	O:0.999993
on	O	O:0.999987
python	O	O:0.999572
3.4	O	O:0.999717
/	O	O:0.999954
pandas	O	O:0.999640
0.17	O	O:0.999839
)	O	O:0.999980
the	O	O:0.999901
following	O	O:0.998729
statment	O	O:0.999467
```	O	O:0.999962
df	O	O:0.999283
[	O	O:0.999945
'	O	O:0.999987
word	O	O:0.999985
count	O	O:0.999541
']	O	O:0.999986
=	O	O:0.998849
df.apply	B-API	B-API:0.990157
(	O	O:0.999907
lambda	O	O:0.998771
x	O	O:0.999146
:	O	O:0.999925
dict	O	O:0.999665
(	O	O:0.999958
Counter	O	O:0.965192
(	O	O:0.999962
x	O	O:0.999834
[	O	O:0.999908
'	O	O:0.999997
test	O	O:0.999327
']	O	O:0.999928
.split	B-API	B-API:0.998311
(	O	O:0.999872
"	O	O:0.999983
"))	O	O:0.999842
.items()	O	O:0.563031
)	O	O:0.999975
,	O	O:0.999969
axis=1	O	O:0.999791
)```	O	O:0.999755
make	O	O:0.999925
a	O	O:0.999999
new	O	O:0.999921
column	O	O:0.999917
with	O	O:0.999940
the	O	O:0.999986
word	O	O:0.999928
count	O	O:0.981004
(	O	O:0.999996
not	O	O:0.999993
sure	O	O:0.999954
why	O	O:0.999994
you	O	O:0.999968
use	O	O:0.999987
join	O	B-API:0.978810
*	O	O:0.999916
and	O	O:0.999985
*	O	O:0.999998
split	O	O:0.989537
on	O	O:0.999996
your	O	O:0.999977
text	O	O:0.999653
)	O	O:0.999989
.	O	O:0.999750
	
You	O	O:0.999868
can	O	O:0.999990
also	O	O:0.999981
use	O	O:0.999997
list	O	O:0.993884
comprehension	O	O:0.999563
to	O	O:0.999994
avoid	O	O:0.999964
apply	O	O:0.722332
,	O	O:0.999970
like	O	O:0.999577
```	O	O:0.999982
df	O	O:0.998841
[	O	O:0.999956
'	O	O:0.999986
word	O	O:0.999986
count	O	O:0.999586
']	O	O:0.999976
=	O	O:0.997243
[	O	O:0.999940
dict	O	O:0.998859
(	O	O:0.999864
Counter	O	O:0.969775
(	O	O:0.999949
i	O	O:0.999950
[	O	O:0.999989
1	O	O:0.999923
]	O	O:0.999905
[	O	O:0.999627
'	O	O:0.999996
text	O	O:0.999728
']	O	O:0.999864
.split	B-API	B-API:0.998864
(	O	O:0.999874
"	O	O:0.999981
"))	O	O:0.999833
.items()	O	O:0.672715
)	O	O:0.999966
for	O	O:0.999962
i	O	O:0.999822
in	O	O:0.999935
df.iterrows()	B-API	B-API:0.985667
]```	O	O:0.999007
	
You	O	O:0.999887
are	O	O:0.999988
right	O	O:0.999896
,	O	O:0.999990
join	O	B-API:0.904726
isn't	O	O:0.999782
needed	O	O:0.999848
.	O	O:0.999948
	
i	O	O:0.999938
see	O	O:0.999969
now	O	O:0.999609
Counter	O	O:0.994834
works	O	O:0.999970
fine	O	O:0.999925
on	O	O:0.999997
split	O	O:0.999117
words	O	O:0.999924
without	O	O:0.999932
needing	O	O:0.999645
commas	O	O:0.998933
to	O	O:0.999991
separate	O	O:0.999999
them	O	O:0.999322
.	O	O:0.999954
	
List	O	O:0.998108
comprehension	O	O:0.998421
works	O	O:0.999885
perfectly	O	O:0.998622
.	O	O:0.999736
	
Apply	O	O:0.999447
still	O	O:0.998897
outputs	O	O:0.999538
`	O	O:0.999912
<	O	O:0.998885
built-in	O	O:0.999603
method	O	O:0.999979
values	O	O:0.999431
of	O	O:0.999987
dict	O	O:0.999824
object	O	O:0.999953
at	O	O:0.999960
0x00	O	O:0.998913
...	O	O:0.999460
	
`	O	O:0.999905
Quick	O	O:0.997892
timer	O	O:0.999974
test	O	O:0.999121
shows	O	O:0.999938
apply	O	B-API:0.753675
is	O	O:0.999903
bit	O	O:0.998567
faster	O	O:0.999846
than	O	O:0.996084
direct	O	O:0.995097
method	O	O:0.999710
:	O	O:0.999944
**	O	O:0.999971
apply	O	B-API:0.543619
method	O	O:0.998990
**	O	O:0.999896
`	O	O:0.999989
1	O	O:0.999848
loops	O	O:0.999787
,	O	O:0.999997
best	O	O:0.999903
of	O	O:0.999905
3	O	O:0.998368
:	O	O:0.999996
14.6	O	O:0.999672
s	O	O:0.999890
per	O	O:0.999929
loop	O	O:0.998943
`	O	O:0.999959
**	O	O:0.999626
direct	O	O:0.999641
method	O	O:0.999767
**	O	O:0.999952
`	O	O:0.999990
1	O	O:0.999864
loops	O	O:0.999787
,	O	O:0.999997
best	O	O:0.999903
of	O	O:0.999905
3	O	O:0.998459
:	O	O:0.999987
18.2	O	O:0.999825
s	O	O:0.999842
per	O	O:0.999874
loop	O	O:0.998310
`	O	O:0.999954
.	O	O:0.999566
	
My	O	O:0.999970
data	O	O:0.999670
has	O	O:0.999992
~60k	O	O:0.999956
rows	O	O:0.998343
and	O	O:0.999999
mean	O	O:0.999977
of	O	O:0.999969
314	O	O:0.999823
words	O	O:0.999917
per	O	O:0.999698
row	O	O:0.999730
.	O	O:0.999834
	
Type	O	O:0.999784
of	O	O:0.999973
`	O	O:0.999974
df	O	O:0.997204
`	O	O:0.999982
isn't	O	O:0.991751
`	O	O:0.999996
dataframe	B-API	O:0.962664
`	O	O:0.999976
,	O	O:0.999947
but	O	O:0.999931
`	O	O:0.999971
TextFileReader	O	O:0.924365
`	O	O:0.999978
.	O	O:0.999203
	
I	O	O:0.999986
think	O	O:0.999958
you	O	O:0.999968
need	O	O:0.999953
concat	O	O:0.580085
all	O	O:0.999990
chunks	O	O:0.999771
to	O	O:0.999994
dataframe	B-API	O:0.999993
by	O	O:0.999924
function	O	O:0.999941
`	O	O:0.999953
concat	O	B-API:0.996812
`	O	O:0.999981
and	O	O:0.999993
then	O	O:0.999942
apply	O	B-API:0.822949
function	O	O:0.996718
:	O	O:0.999795
#CODE	O	O:0.999851
	
You	O	O:0.999952
can	O	O:0.999913
use	O	O:0.999996
the	O	O:0.999901
`	O	O:0.999927
apply	O	B-API:0.990341
`	O	O:0.999892
and	O	O:0.999523
`	O	O:0.999993
applymap	B-API	B-API:0.999303
`	O	O:0.999983
from	O	O:0.999093
pandas	O	O:0.999754
.	O	O:0.999950
	
But	O	O:0.999890
I	O	O:0.999981
don't	O	O:0.999963
how	O	O:0.999949
to	O	O:0.999995
apply	O	O:0.995279
that	O	O:0.999778
to	O	O:0.999995
my	O	O:1.000000
code	O	O:0.999454
either	O	O:0.999937
.	O	O:0.999930
	
Please	O	O:0.999480
help	O	O:0.996755
.	O	O:0.999894
	
(	O	O:0.999664
Note	O	O:0.999739
:	O	O:0.999997
this	O	O:0.999977
assumes	O	O:0.999987
the	O	O:0.999999
rows	O	O:0.999501
we	O	O:0.999997
need	O	O:0.999991
to	O	O:0.999999
fill	O	O:0.999933
look	O	O:0.999939
like	O	O:0.999977
the	O	O:0.999999
ones	O	O:0.999144
in	O	O:0.999998
your	O	O:0.999972
example	O	O:0.999817
.	O	O:0.999961
If	O	O:0.999992
they're	O	O:0.999950
messier	O	O:0.999758
we'd	O	O:0.999990
have	O	O:0.999977
to	O	O:0.999998
do	O	O:1.000000
a	O	O:0.999996
little	O	O:0.999377
more	O	O:0.999913
work	O	O:0.999420
,	O	O:0.999991
but	O	O:0.999989
the	O	O:0.999992
same	O	O:0.999923
techniques	O	O:0.999835
will	O	O:0.999923
apply	O	O:0.902915
.	O	O:0.999771
)	O	O:0.999870
	
Haven't	O	O:0.998994
benched	O	O:0.999836
this	O	O:0.999747
,	O	O:0.999989
@USER	O	O:0.999136
,	O	O:0.999984
but	O	O:0.999984
I	O	O:0.999995
think	O	O:0.999975
the	O	O:0.999981
numpy	O	O:0.999270
approach	O	O:0.999820
should	O	O:0.999895
be	O	O:0.999995
pretty	O	O:0.999909
quick	O	O:0.998645
too	O	O:0.999155
.	O	O:0.999904
	
Especially	O	O:0.999328
because	O	O:0.999898
Pandas	O	O:0.999777
`	O	O:0.999990
.apply()	B-API	B-API:0.999926
`	O	O:0.999989
now	O	O:0.999832
runs	O	O:0.999932
through	O	O:0.999818
the	O	O:0.999984
first	O	O:0.999859
apply	O	O:0.750887
twice	O	O:0.999686
,	O	O:0.999994
to	O	O:0.999996
find	O	O:0.999984
out	O	O:0.999981
if	O	O:0.999996
it	O	O:0.999993
can	O	O:0.999996
take	O	O:0.999999
a	O	O:0.999999
shortcut	O	O:0.999677
approach	O	O:0.999790
.	O	O:0.999790
	
I	O	O:0.999964
don't	O	O:0.999973
know	O	O:0.999648
the	O	O:0.999997
details	O	O:0.999545
of	O	O:0.999964
under-the-hood	O	O:0.999273
working	O	O:0.998438
,	O	O:0.999910
but	O	O:0.999912
it	O	O:0.999984
looks	O	O:0.999965
similar	O	O:0.999921
to	O	O:0.999992
Numba's	O	O:0.999994
approach	O	O:0.999919
at	O	O:0.999990
speeding	O	O:0.999734
things	O	O:0.999200
up	O	O:0.999714
:	O	O:0.999991
run	O	O:0.999975
once	O	O:0.999964
to	O	O:0.999996
figure	O	O:0.999984
out	O	O:0.999953
what's	O	O:0.999889
happening	O	O:0.999640
,	O	O:0.999998
speed	O	O:0.999526
up	O	O:0.999926
,	O	O:0.999993
if	O	O:0.999990
possible	O	O:0.999484
.	O	O:0.999919
	
This	O	O:0.999321
is	O	O:0.999997
a	O	O:0.999990
new	O	O:0.999792
thing	O	O:0.999841
I	O	O:0.999985
found	O	O:0.999798
in	O	O:0.999944
their	O	O:0.998648
[	O	O:0.999984
docs	O	O:0.999944
here	O	O:0.999323
]	O	O:0.999802
(	O	O:0.999920
#URL	O	O:0.999391
)	O	O:0.999939
.	O	O:0.999740
	
Read	O	O:0.999319
the	O	O:0.999896
warning	O	O:0.999691
towards	O	O:0.999710
the	O	O:0.999997
end	O	O:0.999931
of	O	O:0.999993
the	O	O:0.999973
subsection	O	O:0.998601
.	O	O:0.999910
	
It's	O	O:0.999716
been	O	O:0.999571
doing	O	O:0.999991
that	O	O:0.999891
for	O	O:0.999986
as	O	O:0.999997
long	O	O:0.999891
a	O	O:0.999990
I	O	O:0.999953
can	O	O:0.999951
remember	O	O:0.999457
(	O	O:0.999998
a	O	O:0.999995
few	O	O:0.999493
years	O	O:0.997565
(	O	O:0.999969
!	O	O:0.999986
)	O	O:0.999989
at	O	O:0.999996
least	O	O:0.999741
)	O	O:0.999965
:)	O	O:0.999431
The	O	O:0.999950
apply	O	B-API:0.501763
still	O	O:0.998362
happens	O	O:0.999384
in	O	O:0.999989
python	O	O:0.999865
so	O	O:0.999996
if	O	O:0.999991
you	O	O:0.999997
have	O	O:0.999992
a	O	O:0.999999
lot	O	O:0.999955
of	O	O:0.999995
small	O	O:0.999350
groups	O	O:0.999796
the	O	O:0.999967
dummy_column	O	O:0.982676
+	O	O:0.999969
groupby	B-API	B-API:0.895649
sum	O	O:0.999651
will	O	O:0.999837
blow	O	O:0.999948
apply	O	O:0.981147
out	O	O:0.999775
of	O	O:0.999980
the	O	O:0.999850
water	O	O:0.999712
.	O	O:0.999681
	
Numba	O	O:0.997828
is	O	O:0.999974
a	O	O:0.999992
game	O	O:0.999885
changer	O	O:0.999761
however	O	O:0.999845
,	O	O:0.999994
if	O	O:0.999981
it	O	O:0.999983
were	O	O:0.999960
using	O	O:0.999961
numba	O	O:0.997488
it	O	O:0.999814
might	O	O:0.999952
be	O	O:0.999990
different	O	O:0.999963
...	O	O:0.998030
	
(	O	O:0.999661
Edit	O	O:0.999182
:	O	O:0.999903
[	O	O:0.999984
the	O	O:0.999981
warning	O	O:0.998106
is	O	O:0.999974
new	O	O:0.999857
though	O	O:0.999713
]	O	O:0.999610
(	O	O:0.999843
#URL	O	O:0.999342
)	O	O:0.999979
.	O	O:0.999857
)	O	O:0.999971
	
@USER	O	O:0.999357
-	O	O:0.999983
I	O	O:0.999988
am	O	O:0.999999
new	O	O:0.998975
to	O	O:0.999992
pandas.I	O	O:0.999680
am	O	O:0.999998
guessing	O	O:0.999968
from	O	O:0.999943
you	O	O:0.999929
explanation	O	O:0.999857
and	O	O:0.999998
needing	O	O:0.999832
to	O	O:0.999943
apply	O	O:0.988927
some	O	O:0.999921
some	O	O:0.999368
map	O	B-API:0.729409
reduce	O	O:0.999869
type	O	O:0.999343
of	O	O:0.999992
thing	O	O:0.998804
is	O	O:0.999997
going	O	O:0.998446
on	O	O:0.999938
?	O	O:0.999911
	
Is	O	O:0.999978
my	O	O:0.999983
assumption	O	O:0.999817
correct	O	O:0.999761
?	O	O:0.999968
	
If	O	O:0.999969
I	O	O:0.999974
use	O	O:0.999969
groupby	B-API	B-API:0.997520
apply	O	B-API:0.864042
,	O	O:0.999824
everything	O	O:0.998837
works	O	O:0.999728
fine	O	O:0.999162
:	O	O:0.999968
#CODE	O	O:0.999836
	
Thanks	O	O:0.999012
for	O	O:0.999986
the	O	O:0.999958
links	O	O:0.997184
,	O	O:0.999976
@USER	O	O:0.999857
,	O	O:0.999989
unfortunately	O	O:0.999969
this	O	O:0.999476
is	O	O:0.999998
what	O	O:0.999690
I	O	O:0.999935
was	O	O:0.999980
saying	O	O:0.998262
in	O	O:0.999979
my	O	O:0.999933
intro	O	O:0.999867
,	O	O:0.999999
those	O	O:0.999964
approaches	O	O:0.999949
work	O	O:0.999975
like	O	O:0.999997
a	O	O:0.999999
charm	O	O:0.999656
when	O	O:0.999869
you	O	O:0.999993
have	O	O:0.999998
non	O	O:0.999989
complex	O	O:0.999979
data	O	O:0.999993
such	O	O:0.999941
as	O	O:0.999998
int	O	O:0.977423
or	O	O:0.999978
float	O	O:0.985954
,	O	O:0.999993
but	O	O:0.999935
in	O	O:0.999987
the	O	O:0.999998
case	O	O:0.999985
of	O	O:0.999994
vectors	O	O:0.999447
inside	O	O:0.999915
the	O	O:0.999989
dataframe	B-API	O:0.996137
,	O	O:0.999996
things	O	O:0.999903
get	O	O:0.999947
pretty	O	O:0.999900
messy	O	O:0.999705
.	O	O:0.999816
	
I	O	O:0.999914
tried	O	O:0.999931
those	O	O:0.999324
ideas	O	O:0.997987
and	O	O:0.999959
failed	O	O:0.999720
,	O	O:0.999982
so	O	O:0.999995
maybe	O	O:0.999943
I	O	O:0.999995
am	O	O:0.999999
just	O	O:0.999614
missing	O	O:0.999877
how	O	O:0.999950
to	O	O:0.999994
apply	O	O:0.999638
them	O	O:0.998704
in	O	O:0.999992
my	O	O:0.999974
situation	O	O:0.999482
:(	O	O:0.999928
	
Then	O	O:0.999826
you	O	O:0.999996
can	O	O:0.999995
apply	O	O:0.985511
the	O	O:0.999984
numpy	O	O:0.998346
/	O	O:0.999962
scipy	O	O:0.999682
vectorised	O	O:0.999857
methods	O	O:0.999146
for	O	O:0.999959
computing	O	O:0.998921
cosine	O	O:0.999547
similarity	O	O:0.999979
as	O	O:0.999962
in	O	O:0.999952
Whats	O	O:0.999942
the	O	O:0.999983
fastest	O	O:0.999558
way	O	O:0.999861
in	O	O:0.999974
Python	O	O:0.999949
to	O	O:0.999993
calculate	O	O:0.999933
cosine	O	O:0.999970
similarity	O	O:0.999974
given	O	O:0.999241
sparse	O	O:0.999917
matrix	O	O:0.999921
data	O	O:0.999837
?	O	O:0.999974
	
It's	O	O:0.999743
because	O	O:0.999903
`	O	O:0.999991
apply	O	B-API:0.994732
`	O	O:0.999730
method	O	O:0.998981
works	O	O:0.999940
for	O	O:0.999997
column	O	O:0.999925
by	O	O:0.999964
default	O	O:0.999807
,	O	O:0.999981
change	O	O:0.997353
`	O	O:0.999988
axis	O	O:0.997036
`	O	O:0.999998
to	O	O:0.999935
1	O	O:0.999998
if	O	O:0.999986
you'd	O	O:0.999989
like	O	O:0.999992
through	O	O:0.999983
rows	O	O:0.997235
:	O	O:0.999916
	
0	O	O:0.998489
or	O	O:0.999869
index	O	O:0.999226
:	O	O:0.999995
apply	O	O:0.720603
function	O	O:0.999884
to	O	O:0.999983
each	O	O:0.999992
column	O	O:0.999719
	
1	O	O:0.999836
or	O	O:0.999975
columns	O	O:0.999534
:	O	O:0.999997
apply	O	O:0.703488
function	O	O:0.999875
to	O	O:0.999991
each	O	O:0.999979
row	O	O:0.999827
	
Like	O	O:0.999861
indicated	O	O:0.999888
by	O	O:0.999974
Anton	O	O:0.999675
you	O	O:0.999910
should	O	O:0.999948
execute	O	O:0.999969
the	O	O:0.999996
apply	O	B-API:0.867744
function	O	O:0.999549
with	O	O:0.999330
`	O	O:0.999987
axis=1	O	O:0.994413
`	O	O:0.999980
parameter	O	O:0.998212
.	O	O:0.999921
	
However	O	O:0.999733
it	O	O:0.999617
is	O	O:0.999993
not	O	O:0.999984
necessary	O	O:0.999990
to	O	O:0.999999
then	O	O:0.999996
loop	O	O:0.999996
through	O	O:0.999988
the	O	O:0.999999
rows	O	O:0.999793
as	O	O:0.999993
you	O	O:0.999986
did	O	O:0.999962
in	O	O:0.999997
the	O	O:0.999912
function	O	O:0.999977
test	O	O:0.998951
,	O	O:0.999998
since	O	O:0.999845
	
the	O	O:0.999866
`	O	O:0.999965
apply	O	B-API:0.981066
`	O	O:0.999857
documentation	O	O:0.990114
mentions	O	O:0.999262
:	O	O:0.999907
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.994087
a	O	O:0.999880
function	O	O:0.999014
to	O	O:0.999996
two	O	O:1.000000
columns	O	O:0.999960
of	O	O:0.999985
Pandas	O	O:0.999911
dataframe	B-API	O:0.997291
	
If	O	O:0.999943
you're	O	O:0.999956
using	O	O:0.999917
`	O	O:0.999974
apply	O	B-API:0.993775
`	O	O:0.999912
,	O	O:0.999908
the	O	O:0.999991
speed	O	O:0.998933
difference	O	O:0.999486
is	O	O:0.999991
minimal	O	O:0.999214
;	O	O:0.999978
you	O	O:0.999728
should	O	O:0.999991
feel	O	O:0.999982
free	O	O:0.999975
to	O	O:0.999990
use	O	O:0.999991
`	O	O:0.999914
iteritems	B-API	B-API:0.991885
`	O	O:0.999983
.	O	O:0.999167
	
Thanks	O	O:0.999813
a	O	O:0.999978
lot	O	O:0.998291
!	O	O:0.999842
	
If	O	O:0.999951
I	O	O:0.999985
am	O	O:0.999999
focusing	O	O:0.999298
on	O	O:0.999995
a	O	O:0.999995
single	O	O:0.999723
dataframe	B-API	O:0.998612
,	O	O:0.999971
and	O	O:0.999998
want	O	O:0.999963
to	O	O:0.999936
use	O	O:0.999992
function	O	O:0.999702
to	O	O:0.999995
do	O	O:0.999999
calculations	O	O:0.999880
to	O	O:0.999995
each	O	O:0.999995
column	O	O:0.999915
,	O	O:0.999992
is	O	O:0.999984
iteritems()	B-API	B-API:0.959506
also	O	O:0.999740
better	O	O:0.999978
than	O	O:0.999311
apply	O	B-API:0.910794
(	O	O:0.999886
lambda	O	O:0.999647
x	O	O:0.999760
)	O	O:0.999938
?	O	O:0.999944
	
@USER	O	O:0.998341
-	O	O:0.999992
they	O	O:0.999850
are	O	O:0.999999
very	O	O:0.999844
similar	O	O:0.999972
from	O	O:0.999972
a	O	O:0.999995
pandas	O	O:0.999874
POV	O	O:0.999855
I	O	O:0.999989
think	O	O:0.999859
-	O	O:0.999898
it's	O	O:0.999935
just	O	O:0.999925
whatever	O	O:0.999992
you	O	O:0.999969
think	O	O:0.999902
is	O	O:0.999991
cleaner	O	O:0.995759
.	O	O:0.999915
	
For	O	O:0.999901
me	O	O:0.999899
,	O	O:0.999983
`	O	O:0.999991
apply	O	B-API:0.979459
`	O	O:0.999915
is	O	O:0.999783
cleaner	O	O:0.998430
,	O	O:0.999985
but	O	O:0.999976
you	O	O:0.999977
don't	O	O:0.999977
get	O	O:0.999985
the	O	O:0.999993
name	O	O:0.999810
.	O	O:0.999849
	
to	O	O:0.999952
apply	O	O:0.971318
various	O	O:0.999631
aggregation	O	O:0.999489
functions	O	O:0.999971
as	O	O:0.999983
described	O	O:0.999259
in	O	O:0.999979
the	O	O:0.999957
docs	O	O:0.999163
.	O	O:0.999860
	
If	O	O:0.999965
you	O	O:0.999973
provide	O	O:0.999963
some	O	O:0.999962
detail	O	O:0.999821
on	O	O:0.999994
what	O	O:0.999938
you'd	O	O:0.999995
like	O	O:0.999977
to	O	O:0.999996
aggregate	O	O:0.735103
and	O	O:0.999973
how	O	O:0.999963
,	O	O:0.999993
happy	O	O:0.999902
to	O	O:0.999987
add	O	O:0.999993
an	O	O:0.999985
example	O	O:0.999491
.	O	O:0.999894
	
Generally	O	O:0.999782
speaking	O	O:0.998529
,	O	O:0.999987
you'd	O	O:0.999948
apply	O	O:0.734475
an	O	O:0.999931
"	O	O:0.999979
easing	O	O:0.982691
function	O	O:0.999723
"	O	O:0.999985
over	O	O:0.999842
some	O	O:0.999557
range	O	O:0.999816
.	O	O:0.999766
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.995941
a	O	O:0.999855
function	O	O:0.999260
to	O	O:0.999997
every	O	O:0.999998
group	O	O:0.999219
in	O	O:0.999997
a	O	O:0.999984
`	O	O:0.999920
groupby	B-API	B-API:0.999521
`	O	O:0.999974
object	O	O:0.999164
,	O	O:0.999998
so	O	O:0.999996
that	O	O:0.999963
the	O	O:0.999991
function	O	O:0.999989
operates	O	O:0.999444
on	O	O:0.999998
multiple	O	O:0.999993
columns	O	O:0.999982
of	O	O:0.999994
each	O	O:0.999802
group	O	O:0.998937
,	O	O:0.999980
and	O	O:0.999991
returns	O	O:0.999958
a	O	O:0.999896
1	O	O:0.999844
x	O	O:0.999940
n	O	O:0.999932
"	O	O:0.999988
row	O	O:0.999881
vector	O	O:0.999872
"	O	O:0.999997
as	O	O:0.999940
result	O	O:0.999432
.	O	O:0.999864
	
I	O	O:0.999981
want	O	O:0.999980
the	O	O:0.999958
n	O	O:0.999995
entries	O	O:0.999831
of	O	O:0.999997
these	O	O:0.999975
row	O	O:0.999992
vectors	O	O:0.999706
to	O	O:0.999990
form	O	O:0.999999
the	O	O:0.999998
contents	O	O:0.999955
of	O	O:0.999994
n	O	O:0.999988
new	O	O:0.999997
columns	O	O:0.999801
in	O	O:0.999992
the	O	O:0.999995
resulting	O	O:0.999629
dataframe	B-API	O:0.995294
.	O	O:0.999875
	
What	O	O:0.999481
did	O	O:0.999926
you	O	O:0.999967
try	O	O:0.999975
?	O	O:0.999981
	
Attach	O	O:0.999877
part	O	O:0.999778
of	O	O:0.999997
your	O	O:0.999881
dataframe	B-API	O:0.995767
.	O	O:0.999927
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999985
`	O	O:0.999976
apply	O	B-API:0.986312
`	O	O:0.999967
with	O	O:0.992698
`	O	O:0.999987
rsplit	B-API	B-API:0.996615
`	O	O:0.999974
.	O	O:0.999342
	
You	O	O:0.999741
are	O	O:0.999991
probably	O	O:0.999779
right	O	O:0.999596
.	O	O:0.999890
	
But	O	O:0.999895
I	O	O:0.999987
thought	O	O:0.999835
`	O	O:0.999857
map	O	B-API:0.999550
`	O	O:0.999989
method	O	O:0.999912
access	O	O:0.999957
directrly	O	O:0.999852
to	O	O:0.999993
each	O	O:0.999988
value	O	O:0.999980
instead	O	O:0.999990
of	O	O:0.999994
`	O	O:0.999983
apply	O	B-API:0.929713
`	O	O:0.999949
which	O	O:0.998572
for	O	O:0.999994
whole	O	O:0.999047
Series	O	O:0.998615
.	O	O:0.999818
	
If	O	O:0.999947
so	O	O:0.999969
it	O	O:0.999992
should	O	O:0.999994
access	O	O:0.999874
as	O	O:0.999996
Pandas	O	O:0.999454
`	O	O:0.999923
Timedelta	O	B-API:0.777067
`	O	O:0.999958
.	O	O:0.999247
	
Is	O	O:0.999969
it	O	O:0.999978
correct	O	O:0.999868
?	O	O:0.999984
	
`	O	O:0.999958
apply	O	B-API:0.982318
`	O	O:0.999861
would	O	O:0.999515
fail	O	O:0.999971
here	O	O:0.999979
also	O	O:0.999924
,	O	O:0.999998
`	O	O:0.999982
apply	O	B-API:0.978539
`	O	O:0.999873
is	O	O:0.999956
also	O	O:0.999981
a	O	O:0.999998
`	O	O:0.999786
for	O	O:0.999102
`	O	O:0.999981
loop	O	O:0.998035
it	O	O:0.999996
just	O	O:0.999912
allows	O	O:0.999942
you	O	O:0.999953
operate	O	O:0.999813
either	O	O:0.999990
column-wise	O	O:0.999520
or	O	O:0.999996
row-wise	O	O:0.998640
when	O	O:0.999906
called	O	O:0.999914
on	O	O:1.000000
a	O	O:0.999993
df	O	O:0.999570
,	O	O:0.999988
the	O	O:0.999978
type	O	O:0.997833
conversion	O	O:0.999315
is	O	O:0.999997
being	O	O:0.999831
doing	O	O:0.999794
by	O	O:0.999924
pandas	O	O:0.999460
here	O	O:0.998915
	
but	O	O:0.999973
this	O	O:0.999958
will	O	O:0.999924
filter	O	O:0.999757
the	O	O:0.999996
data	O	O:0.999930
frame	O	O:0.999998
several	O	O:0.999964
times	O	O:0.999831
,	O	O:0.999998
one	O	O:0.999998
value	O	O:0.999976
at	O	O:0.999998
a	O	O:0.999996
time	O	O:0.999279
,	O	O:0.999910
and	O	O:0.999993
not	O	O:0.999976
apply	O	O:0.829621
all	O	O:0.999964
filters	O	O:0.997588
at	O	O:0.999981
the	O	O:0.999988
same	O	O:0.999908
time	O	O:0.999791
.	O	O:0.999953
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999994
way	O	O:0.999884
to	O	O:0.999978
do	O	O:0.999999
it	O	O:0.999996
programmatically	O	O:0.999513
?	O	O:0.999977
	
if	O	O:0.999963
used	O	O:0.999804
apply	O	B-API:0.606182
i	O	O:0.999709
will	O	O:0.999796
be	O	O:0.999995
how	O	O:0.999993
to	O	O:0.999978
implement	O	O:0.999999
them	O	O:0.999860
thx	O	O:0.999846
;	O	O:0.999970
^^	O	O:0.999574
	
Consider	O	O:0.999888
a	O	O:0.999980
series	O	O:0.999807
sum	O	O:0.997642
function	O	O:0.999909
and	O	O:0.999987
apply	O	O:0.725787
it	O	O:0.999799
to	O	O:0.999994
a	O	O:0.999999
`	O	O:0.999907
groupby()	B-API	B-API:0.999902
`	O	O:0.999913
:	O	O:0.999672
#CODE	O	O:0.999908
	
Previously	O	O:0.997640
`	O	O:0.999980
train_y	O	O:0.892993
`	O	O:0.999985
was	O	O:0.999654
a	O	O:0.999994
Series	O	O:0.999366
,	O	O:0.999983
now	O	O:0.999913
it's	O	O:0.999908
numpy	O	O:0.999815
array	O	O:0.999228
(	O	O:0.999970
it	O	O:0.999961
is	O	O:0.999996
a	O	O:0.999982
column-vector	O	O:0.998304
)	O	O:0.999958
.	O	O:0.999482
	
If	O	O:0.999964
I	O	O:0.999992
apply	O	O:0.752982
`	O	O:0.999747
train_y.ravel()	O	O:0.500688
`	O	O:0.999992
,	O	O:0.999989
then	O	O:0.999924
it	O	O:0.999999
becomes	O	O:0.999988
a	O	O:0.999993
row	O	O:0.999179
vector	O	O:0.999680
and	O	O:0.999993
no	O	O:0.999987
error	O	O:0.999501
message	O	O:0.999685
appears	O	O:0.999910
,	O	O:0.999990
through	O	O:0.999448
the	O	O:0.999973
prediction	O	O:0.999667
step	O	O:0.999948
takes	O	O:0.999933
very	O	O:0.999959
long	O	O:0.999720
time	O	O:0.998528
(	O	O:0.999985
actually	O	O:0.999972
it	O	O:0.999984
never	O	O:0.997714
finishes	O	O:0.999888
...	O	O:0.999562
)	O	O:0.999927
.	O	O:0.999806
	
A	O	O:0.999959
custom	O	O:0.987302
function	O	O:0.999807
should	O	O:0.999924
apply	O	O:0.895982
to	O	O:0.999995
a	O	O:1.000000
series	O	O:0.999894
of	O	O:0.999988
the	O	O:0.999991
dataframe	B-API	O:0.999354
,	O	O:0.999996
a	O	O:0.999981
boolean	O	O:0.994755
operator	O	O:0.999894
for	O	O:0.999894
example	O	O:0.995341
:	O	O:0.999896
#CODE	O	O:0.999858
	
I	O	O:0.999979
currently	O	O:0.999987
want	O	O:0.999861
to	O	O:0.999955
apply	O	O:0.977848
several	O	O:0.998401
machine	O	O:0.999861
learning	O	O:0.999777
models	O	O:0.998761
on	O	O:0.999998
this	O	O:0.999988
data	O	O:0.999948
.	O	O:0.999945
	
With	O	O:0.999928
some	O	O:0.999734
models	O	O:0.999522
,	O	O:0.999993
it	O	O:0.999964
is	O	O:0.999996
necessary	O	O:0.999957
to	O	O:0.999995
do	O	O:0.999998
normalization	O	O:0.999941
to	O	O:0.999993
get	O	O:0.999999
better	O	O:0.999783
result	O	O:0.999907
.	O	O:0.999901
	
For	O	O:0.999917
example	O	O:0.999473
,	O	O:0.999994
converting	O	O:0.999708
categorical	B-API	B-API:0.620562
variable	O	O:0.999974
into	O	O:0.999802
dummy	O	O:0.998700
/	O	O:0.999950
indicator	O	O:0.999663
variables	O	O:0.997467
.	O	O:0.999869
	
Indeed	O	O:0.998770
,	O	O:0.999985
pandas	O	O:0.999664
has	O	O:0.999994
a	O	O:0.999920
function	O	O:0.999877
called	O	O:0.999529
get_dummies	B-API	B-API:0.989354
for	O	O:0.999973
that	O	O:0.999557
purpose	O	O:0.999524
.	O	O:0.999906
	
However	O	O:0.999506
,	O	O:0.999999
this	O	O:0.999834
function	O	O:0.999967
returns	O	O:0.999967
the	O	O:0.999989
result	O	O:0.999964
depending	O	O:0.999867
on	O	O:0.999997
the	O	O:0.999996
data	O	O:0.999863
.	O	O:0.999921
	
So	O	O:0.999979
if	O	O:0.999988
I	O	O:0.999997
call	O	O:0.999358
get_dummies	B-API	B-API:0.996495
on	O	O:0.999953
training	O	O:0.999935
data	O	O:0.999960
,	O	O:0.999998
then	O	O:0.999927
call	O	O:0.999902
it	O	O:0.999998
again	O	O:0.999595
on	O	O:0.999999
test	O	O:0.999909
data	O	O:0.999995
,	O	O:0.999999
columns	O	O:0.999990
achieved	O	O:0.999722
in	O	O:0.999995
two	O	O:0.999988
cases	O	O:0.999899
can	O	O:0.999979
be	O	O:1.000000
different	O	O:0.999986
because	O	O:0.999942
a	O	O:0.999994
categorical	B-API	O:0.549945
column	O	O:0.999795
in	O	O:0.999998
test	O	O:0.999958
data	O	O:0.999977
can	O	O:0.999965
contains	O	O:0.999996
just	O	O:0.999988
a	O	O:0.999998
sub-set	O	O:0.997599
/	O	O:0.999995
different	O	O:0.999971
set	O	O:0.999861
of	O	O:0.999998
possible	O	O:0.999839
values	O	O:0.999950
compared	O	O:0.999768
to	O	O:0.999999
possible	O	O:0.999996
values	O	O:0.999666
in	O	O:0.999996
training	O	O:0.999963
data	O	O:0.999826
.	O	O:0.999866
	
@USER	O	O:0.999468
-so	O	O:0.999582
one	O	O:0.999990
more	O	O:0.999848
thing	O	O:0.999951
,	O	O:0.999981
can	O	O:0.999956
i	O	O:0.999998
apply	O	O:0.969538
chunksize	O	O:0.988213
filtering	O	O:0.970210
(	O	O:0.999964
taking	O	O:0.999928
a	O	O:0.999993
chunk	O	O:0.999263
of	O	O:0.999996
dataframe	B-API	O:0.999796
like	O	O:0.999928
in	O	O:0.999996
the	O	O:0.999997
case	O	O:0.999915
of	O	O:0.999994
pandas	O	O:0.999905
dataframe	B-API	O:0.999779
,	O	O:0.999997
then	O	O:0.999957
doing	O	O:0.999997
some	O	O:0.999815
Op	O	O:0.999897
.	O	O:0.999980
then	O	O:0.999909
merging	O	O:0.999999
them	O	O:0.999647
--	O	O:0.999998
sending	O	O:0.999897
back	O	O:0.999633
)	O	O:0.999997
on	O	O:0.999974
dask	O	O:0.999598
dataframe	B-API	O:0.997878
???	O	O:0.999719
	
would	O	O:0.999941
give	O	O:0.999910
you	O	O:0.999994
the	O	O:0.999999
mean	O	O:0.999794
for	O	O:0.999993
the	O	O:0.999993
second	O	O:0.999431
row	O	O:0.999960
anyway	O	O:0.999950
,	O	O:0.999998
to	O	O:0.999989
operate	O	O:0.999991
row-wise	O	O:0.999784
you	O	O:0.999985
can	O	O:0.999981
use	O	O:0.999997
`	O	O:0.999976
apply	O	B-API:0.992673
`	O	O:0.999880
and	O	O:0.999960
pass	O	O:0.999887
a	O	O:0.999788
`	O	O:0.999945
lambda	O	O:0.967527
`	O	O:0.999898
:	O	O:0.999556
#CODE	O	O:0.999909
	
First	O	O:0.999786
I	O	O:0.999992
started	O	O:0.999979
by	O	O:0.999958
using	O	O:0.999784
`	O	O:0.999867
pd.rank()	O	O:0.538718
`	O	O:0.999991
on	O	O:0.999988
the	O	O:0.999999
data	O	O:0.999902
and	O	O:0.999999
then	O	O:0.999962
I	O	O:0.999999
planned	O	O:0.999974
on	O	O:0.999990
then	O	O:0.999972
using	O	O:0.999997
`	O	O:0.999958
pd.cut()	B-API	B-API:0.999928
`	O	O:0.999995
to	O	O:0.999933
cut	O	O:0.999596
the	O	O:0.999997
data	O	O:0.999968
into	O	O:0.999903
bins	O	O:0.999685
,	O	O:0.999948
but	O	O:0.999976
it	O	O:0.999961
does	O	O:0.999832
not	O	O:0.999997
seem	O	O:0.999985
like	O	O:0.999978
this	O	O:0.999978
accepts	O	O:0.999928
top	O	O:0.999871
N%	O	O:0.999926
,	O	O:0.999968
rather	O	O:0.999869
it	O	O:0.999980
accepts	O	O:0.999920
explicit	O	O:0.999859
bin	O	O:0.999662
edges	O	O:0.999384
.	O	O:0.999837
	
Is	O	O:0.999986
there	O	O:0.999963
an	O	O:0.999997
easy	O	O:0.999879
way	O	O:0.999982
to	O	O:0.999973
do	O	O:1.000000
this	O	O:0.999857
in	O	O:0.999994
pandas	O	O:0.999959
,	O	O:0.999998
or	O	O:0.999995
do	O	O:0.999962
I	O	O:0.999999
need	O	O:0.999990
to	O	O:0.999994
create	O	O:0.999995
a	O	O:0.999997
lambda	O	O:0.999055
/	O	O:0.999982
apply	O	B-API:0.852513
function	O	O:0.998282
which	O	O:0.999674
calculates	O	O:0.999165
which	O	O:0.999977
bin	O	O:0.999984
each	O	O:0.999958
of	O	O:0.999993
the	O	O:0.999991
ranked	O	O:0.999920
items	O	O:0.999673
should	O	O:0.999907
be	O	O:0.999999
placed	O	O:0.999560
in	O	O:0.999824
.	O	O:0.999843
	
Not	O	O:0.999907
quite	O	O:0.999290
.	O	O:0.999882
	
When	O	O:0.999644
I	O	O:0.999995
apply	O	O:0.980100
this	O	O:0.998369
to	O	O:0.999994
my	O	O:1.000000
data	O	O:0.999963
set	O	O:0.999614
it	O	O:0.999995
says	O	O:0.999928
there	O	O:0.999914
are	O	O:0.999993
419	O	O:0.999992
posts	O	O:0.999350
in	O	O:0.999987
the	O	O:0.999991
top	O	O:0.999774
0-5	O	O:0.999353
%	O	O:0.999980
percentile	O	O:0.999897
,	O	O:0.999998
when	O	O:0.999909
in	O	O:0.999997
actuality	O	O:0.999983
in	O	O:0.999997
my	O	O:0.999997
data	O	O:0.999995
set	O	O:0.999954
of	O	O:0.999999
1674	O	O:0.999355
samples	O	O:0.999554
,	O	O:0.999990
there	O	O:0.999965
should	O	O:0.999984
only	O	O:0.999992
be	O	O:0.999999
84	O	O:0.999971
samples	O	O:0.997214
within	O	O:0.999587
the	O	O:0.999990
top	O	O:0.999203
5%	O	O:0.999911
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999991
`	O	O:0.999961
apply	O	B-API:0.995502
`	O	O:0.999894
and	O	O:0.999914
apply	O	O:0.863679
a	O	O:0.999756
lambda	O	O:0.972111
row-wise	O	O:0.978846
:	O	O:0.999781
#CODE	O	O:0.999765
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999994
`	O	O:0.999981
apply	O	B-API:0.984393
`	O	O:0.999980
with	O	O:0.999796
a	O	O:0.999988
`	O	O:0.999966
lambda	O	O:0.996726
`	O	O:0.999994
to	O	O:0.999878
return	O	O:0.999984
the	O	O:0.999994
name	O	O:0.999952
of	O	O:0.999994
the	O	O:0.999994
column	O	O:0.999955
,	O	O:0.999998
here	O	O:0.999945
we	O	O:0.999994
compare	O	O:0.999931
the	O	O:0.999998
value	O	O:0.999919
row-wise	O	O:0.998491
against	O	O:0.999920
the	O	O:0.999960
max	O	B-API:0.536646
,	O	O:0.999995
this	O	O:0.999969
produces	O	O:0.999930
a	O	O:0.999992
boolean	O	O:0.999076
mask	O	O:0.972209
we	O	O:0.999993
can	O	O:0.999990
use	O	O:0.999998
to	O	O:0.999976
mask	O	O:0.994640
the	O	O:0.999980
columns	O	O:0.998799
:	O	O:0.999978
#CODE	O	O:0.999922
	
which	O	O:0.999602
difference	O	O:0.999704
?	O	O:0.999950
	
sorry	O	O:0.997690
but	O	O:0.999994
your	O	O:0.999832
are	O	O:0.999990
asking	O	O:0.999962
a	O	O:0.999991
lot	O	O:0.999836
of	O	O:0.999991
questions	O	O:0.999484
in	O	O:0.999998
a	O	O:0.999999
single	O	O:0.999001
question	O	O:0.999401
!	O	O:0.999884
	
which	O	O:0.994924
is	O	O:0.999977
not	O	O:0.999939
SO	O	O:0.999910
working	O	O:0.999023
...	O	O:0.998673
	
I	O	O:0.999946
already	O	O:0.999945
provided	O	O:0.999075
two	O	O:0.999993
different	O	O:0.999948
answer	O	O:0.999868
solving	O	O:0.999458
the	O	O:0.999980
original	O	O:0.999168
problem	O	O:0.998299
(	O	O:0.999986
with	O	O:0.999906
`	O	O:0.999978
apply	O	B-API:0.975816
`	O	O:0.999930
and	O	O:0.999974
a	O	O:0.999991
`	O	O:0.999784
vectorized	O	O:0.992278
`	O	O:0.999997
one	O	O:0.999841
)	O	O:0.999983
	
You	O	O:0.999930
can	O	O:0.999953
use	O	O:0.999993
double	O	O:0.991940
square	O	O:0.999672
brackets	O	O:0.999807
to	O	O:0.999991
force	O	O:0.999961
`	O	O:0.999991
apply	O	B-API:0.969343
`	O	O:0.999978
to	O	O:0.999818
be	O	O:1.000000
called	O	O:0.999886
on	O	O:0.999997
a	O	O:0.999989
`	O	O:0.999986
df	O	O:0.997527
`	O	O:0.999990
,	O	O:0.999986
this	O	O:0.999981
allows	O	O:0.999854
you	O	O:0.999978
operate	O	O:0.999927
row-wise	O	O:0.999739
,	O	O:0.999999
then	O	O:0.999895
use	O	O:0.999999
a	O	O:0.999995
user	O	O:0.997661
defined	O	O:0.999761
func	O	O:0.997632
to	O	O:0.999981
compare	O	O:0.999989
the	O	O:0.999998
current	O	O:0.999765
row	O	O:0.999984
value	O	O:0.999950
against	O	O:0.999981
all	O	O:0.999984
row	O	O:0.999988
values	O	O:0.999933
prior	O	O:0.999932
to	O	O:0.999999
current	O	O:0.999984
row	O	O:0.999934
,	O	O:0.999998
this	O	O:0.999973
generates	O	O:0.999891
a	O	O:0.999992
boolean	O	O:0.999252
mask	O	O:0.988905
to	O	O:0.999986
select	O	O:0.999934
the	O	O:0.999994
invalid	O	O:0.999930
rows	O	O:0.999445
and	O	O:0.999991
assign	O	O:0.999708
`	O	O:0.999926
NaN	O	O:0.964231
`	O	O:0.999988
to	O	O:0.999921
these	O	O:0.999997
and	O	O:0.999998
then	O	O:0.999717
`	O	O:0.999997
ffill	B-API	B-API:0.992268
`	O	O:0.999900
:	O	O:0.999639
#CODE	O	O:0.999908
	
which	O	O:0.999393
I	O	O:0.999998
read	O	O:0.999910
as	O	O:0.999959
for	O	O:0.999989
each	O	O:0.997393
`	O	O:0.999975
x	O	O:0.999306
`	O	O:0.999991
in	O	O:0.999975
the	O	O:0.999994
series	O	O:0.999740
`	O	O:0.999990
df1.var1	O	O:0.988421
`	O	O:0.999997
,	O	O:0.999978
apply	O	O:0.803519
the	O	O:0.999123
function	O	O:0.998709
`	O	O:0.999928
np.percentile	B-API	B-API:0.998027
(	O	O:0.999992
df2.var1	O	O:0.997370
,	O	O:0.999986
x	O	O:0.999970
)`	O	O:0.999942
,	O	O:0.999981
which	O	O:0.999962
finds	O	O:0.999763
the	O	O:0.999998
percentile	O	O:0.999845
of	O	O:0.999928
`	O	O:0.999994
x	O	O:0.999726
`	O	O:0.999991
in	O	O:0.999972
the	O	O:0.999994
series	O	O:0.999553
`	O	O:0.999987
df2.var1	O	O:0.983489
`	O	O:0.999987
.	O	O:0.999660
	
For	O	O:0.999978
some	O	O:0.999643
reason	O	O:0.999845
,	O	O:0.999991
I'm	O	O:0.999982
getting	O	O:0.999805
the	O	O:0.999922
error	O	O:0.998799
#CODE	O	O:0.999391
	
This	O	O:0.999753
allows	O	O:0.999927
me	O	O:0.999984
to	O	O:0.999980
control	O	O:0.999900
the	O	O:0.999976
layout	O	O:0.996356
,	O	O:0.999981
but	O	O:0.999955
I	O	O:0.999986
can't	O	O:0.999957
apply	O	O:0.641832
it	O	O:0.999930
to	O	O:0.999973
bar	O	O:0.999994
charts	O	O:0.999101
.	O	O:0.999825
	
I'm	O	O:0.999962
assuming	O	O:0.999956
you	O	O:0.999993
want	O	O:0.999981
to	O	O:0.999991
use	O	O:0.999999
all	O	O:0.999652
`	O	O:0.999919
[	O	O:0.999829
'	O	O:0.999990
W	O	O:0.999796
'	O	O:0.999971
,	O	O:0.999953
'	O	O:0.999978
X	O	O:0.999857
'	O	O:0.999981
,	O	O:0.999983
'	O	O:0.999979
Y	O	O:0.999869
'	O	O:0.999980
,	O	O:0.999980
'	O	O:0.999973
Z	O	O:0.999973
']`	O	O:0.999918
`	O	O:0.999984
columns	O	O:0.996363
`	O	O:0.999994
,	O	O:0.999956
and	O	O:0.999999
only	O	O:0.999993
one	O	O:0.999992
of	O	O:0.999996
the	O	O:0.999988
`	O	O:0.999995
date	O	O:0.987199
`	O	O:0.999997
columns	O	O:0.998999
.	O	O:0.999958
	
If	O	O:0.999978
so	O	O:0.999978
,	O	O:0.999998
the	O	O:0.999985
below	O	O:0.999364
should	O	O:0.999974
get	O	O:0.999984
you	O	O:0.999998
there	O	O:0.999990
-	O	O:0.999998
if	O	O:0.999992
you	O	O:0.999996
first	O	O:0.999956
apply	O	B-API:0.501173
`	O	O:0.999579
set_index	B-API	B-API:0.999933
`	O	O:0.999976
and	O	O:0.999993
then	O	O:0.999939
`	O	O:0.999995
unstack	O	B-API:0.993621
`	O	O:0.999979
,	O	O:0.999614
`	O	O:0.999999
pandas	O	O:0.994133
`	O	O:0.999997
creates	O	O:0.997230
the	O	O:0.999941
`	O	O:0.999932
MultiIndex	O	O:0.704208
`	O	O:0.999997
automatically	O	O:0.999763
,	O	O:0.999995
which	O	O:0.999943
you	O	O:0.999979
can	O	O:0.999999
then	O	O:0.999997
`	O	O:1.000000
swap	O	O:0.996232
`	O	O:0.999999
by	O	O:0.999440
`	O	O:0.999997
level	O	O:0.955676
`	O	O:0.999986
and	O	O:0.999715
`	O	O:0.999999
sort	O	O:0.958758
`	O	O:0.999998
as	O	O:0.999976
you	O	O:0.999956
wish	O	O:0.999457
:	O	O:0.999970
#CODE	O	O:0.999886
	
How	O	O:0.999897
to	O	O:0.999991
apply	O	O:0.988260
a	O	O:0.999976
expanding	O	O:0.894130
window	O	O:0.999689
formula	O	O:0.999924
that	O	O:0.999906
restarts	O	O:0.999971
with	O	O:0.999986
change	O	O:0.999230
in	O	O:0.999995
date	O	O:0.995691
in	O	O:0.999970
Pandas	O	O:0.999871
dataframe	B-API	O:0.995624
?	O	O:0.999900
	
So	O	O:0.999911
in	O	O:0.999998
your	O	O:0.999947
example	O	O:0.999892
,	O	O:0.999997
do	O	O:0.999973
`	O	O:0.999939
df.set_index	B-API	B-API:0.998389
(	O	O:0.999965
'	O	O:0.999939
Date	O	O:0.998973
Time	O	O:0.998929
')`	O	O:0.999835
and	O	O:0.999993
then	O	O:0.999514
`	O	O:0.999992
groupby	B-API	B-API:0.999301
`	O	O:0.999960
and	O	O:0.999230
`	O	O:0.999993
apply	O	B-API:0.997489
`	O	O:0.999795
.	O	O:0.997519
	
You	O	O:0.999960
can	O	O:0.999989
of	O	O:1.000000
course	O	O:0.999969
assign	O	O:0.999983
the	O	O:0.999992
result	O	O:0.999980
back	O	O:0.999636
to	O	O:0.999997
the	O	O:1.000000
original	O	O:0.996469
`	O	O:0.999988
DataFrame	B-API	O:0.900547
`	O	O:0.999986
.	O	O:0.999626
	
You	O	O:0.999917
can	O	O:0.999924
use	O	O:0.999993
`	O	O:0.999981
apply	O	B-API:0.972962
`	O	O:0.999983
together	O	O:0.996386
with	O	O:0.999990
a	O	O:0.999986
lambda	O	O:0.999394
expression	O	O:0.999877
to	O	O:0.999996
check	O	O:0.999990
for	O	O:0.999994
the	O	O:0.999975
target	O	O:0.999474
word	O	O:0.999819
in	O	O:0.999991
each	O	O:0.999903
column	O	O:0.999801
.	O	O:0.999941
	
Then	O	O:0.999344
use	O	O:0.999955
`	O	O:0.999959
any	O	O:0.997099
(	O	O:0.999988
axis=1	O	O:0.999722
)`	O	O:0.999892
to	O	O:0.999967
locate	O	O:0.999998
any	O	O:0.999970
row	O	O:0.999952
containing	O	O:0.999314
that	O	O:0.999820
word	O	O:0.999860
.	O	O:0.999943
	
Finally	O	O:0.999873
,	O	O:0.999975
use	O	O:0.999861
boolean	O	O:0.990500
indexing	O	O:0.999727
with	O	O:0.999946
a	O	O:0.999944
tilda	O	O:0.996645
(	O	O:0.999975
`	O	O:0.999989
~	O	O:0.998222
`)	O	O:0.999997
to	O	O:0.999979
locate	O	O:0.999998
all	O	O:0.999999
rows	O	O:0.999924
where	O	O:0.999882
income	O	O:0.998620
is	O	O:0.999991
NOT	O	O:0.996156
in	O	O:0.999993
the	O	O:0.999919
row	O	O:0.999656
.	O	O:0.999813
	
#CODE	O	O:0.998453
	
Without	O	O:0.999611
seeing	O	O:0.999846
the	O	O:0.999978
data	O	O:0.999668
and	O	O:0.999999
assuming	O	O:0.999990
you	O	O:0.999963
want	O	O:0.999981
the	O	O:0.999996
resultant	O	O:0.999938
prediction	O	O:0.999953
as	O	O:1.000000
a	O	O:0.999998
column	O	O:0.999447
in	O	O:0.999992
the	O	O:0.999996
second	O	O:0.999895
data	O	O:0.999645
(	O	O:0.999992
df2	O	O:0.999877
)	O	O:0.999991
frame	O	O:0.999992
you	O	O:0.999988
can	O	O:0.999992
apply	O	O:0.988183
the	O	O:0.999990
kn.predict()	O	O:0.966227
using	O	O:0.999912
the	O	O:0.999822
.apply()	B-API	B-API:0.999971
function	O	O:0.999117
and	O	O:0.999988
specifying	O	O:0.999699
the	O	O:0.999690
vertical	O	O:0.998018
axis	O	O:0.999355
.	O	O:0.999826
	
This	O	O:0.999624
will	O	O:0.999950
give	O	O:0.999972
you	O	O:0.999990
an	O	O:0.999999
additional	O	O:0.999974
column	O	O:0.999931
with	O	O:0.999930
the	O	O:0.999989
predicted	O	O:0.998380
output	O	O:0.999413
.	O	O:0.999881
	
Heres	O	O:0.998537
the	O	O:0.999961
info	O	O:0.999793
on	O	O:0.999980
apply	O	B-API:0.581580
.	O	O:0.999687
	
`	O	O:0.999948
shifted	O	O:0.997253
=	O	O:0.999974
data.sign()	O	O:0.991383
!	O	O:0.999743
	
=	O	O:0.999899
data.sign()	O	O:0.996688
.shift()	B-API	B-API:0.998653
`	O	O:0.999969
should	O	O:0.999958
work	O	O:0.999977
rather	O	O:0.999995
than	O	O:0.999902
use	O	O:0.999914
`	O	O:0.999962
apply	O	B-API:0.993964
`	O	O:0.999813
	
HINT	O	O:0.991308
:	O	O:0.999952
Use	O	O:0.999973
the	O	O:0.999970
Theano	O	O:0.999639
flag	O	O:0.999309
'	O	O:0.999982
exception_verbosity=high	O	O:0.998759
'	O	O:0.999977
for	O	O:0.999995
a	O	O:0.999982
debugprint	O	O:0.978887
and	O	O:0.999993
storage	O	O:0.999566
map	O	B-API:0.817966
footprint	O	O:0.999878
of	O	O:0.999995
this	O	O:0.999859
apply	O	O:0.918514
node	O	O:0.998084
.	O	O:0.999460
	
You	O	O:0.999968
have	O	O:0.999943
to	O	O:0.999991
use	O	O:0.999995
apply	O	B-API:0.921642
.	O	O:0.998116
	
Here's	O	O:0.999792
a	O	O:0.999987
toy	O	O:0.999044
example	O	O:0.998574
:	O	O:0.999926
#CODE	O	O:0.999872
	
why	O	O:0.999900
I	O	O:0.999995
need	O	O:0.999990
to	O	O:0.999984
apply	O	O:0.995177
nth	O	O:0.999695
to	O	O:0.999979
the	O	O:1.000000
whole	O	O:0.999594
grouped	O	O:0.999707
dataframe	B-API	O:0.997318
	
Because	O	O:0.999864
you	O	O:0.999981
need	O	O:0.999994
first	O	O:0.999978
apply	O	O:0.544539
function	O	O:0.998600
`	O	O:0.999948
nth	O	O:0.998905
`	O	O:0.999989
for	O	O:0.999899
all	O	O:0.999966
group	O	O:0.994666
and	O	O:0.999998
then	O	O:0.999892
get	O	O:0.999998
first	O	O:0.999999
rows	O	O:0.999877
of	O	O:0.999981
group	O	O:0.996881
.	O	O:0.999948
	
I	O	O:0.999932
try	O	O:0.999984
it	O	O:0.999871
in	O	O:0.999995
second	O	O:0.999683
approach	O	O:0.999851
.	O	O:0.999676
	
It	O	O:0.999867
is	O	O:0.999992
together	O	O:0.998756
`	O	O:0.999980
df.groupby	B-API	B-API:0.994665
([	O	O:0.999903
'	O	O:0.999955
a	O	O:0.999959
'	O	O:0.999892
,	O	O:0.999971
'	O	O:0.999987
b	O	O:0.999954
'])	O	O:0.999768
[	O	O:0.999644
'	O	O:0.999954
c	O	O:0.999904
']`	O	O:0.999872
and	O	O:0.999993
then	O	O:0.999884
apply	O	O:0.518985
function	O	O:0.999379
`	O	O:0.999939
nth	O	O:0.997136
`	O	O:0.999979
.	O	O:0.999412
	
Not	O	O:0.999923
for	O	O:0.999985
all	O	O:0.999963
group	O	O:0.994892
`	O	O:0.999963
df.groupby	B-API	B-API:0.993610
([	O	O:0.999931
'	O	O:0.999959
a	O	O:0.999959
'	O	O:0.999893
,	O	O:0.999962
'	O	O:0.999977
b	O	O:0.999949
'])`	O	O:0.999555
.	O	O:0.999450
	
@USER	O	O:0.995625
:	O	O:0.999951
Your	O	O:0.999981
first	O	O:0.999927
block	O	O:0.999599
isn't	O	O:0.999952
applicable	O	O:0.999930
to	O	O:0.999996
my	O	O:0.999999
question	O	O:0.999902
as	O	O:0.999996
the	O	O:0.999905
group	O	O:0.995757
index	O	O:0.997859
is	O	O:0.999978
not	O	O:0.999971
present	O	O:0.998939
(	O	O:0.999985
I	O	O:0.999997
want	O	O:0.999986
to	O	O:0.999894
maintain	O	O:0.999991
this	O	O:0.999915
)	O	O:0.999984
.	O	O:0.999873
	
In	O	O:0.999989
your	O	O:0.999873
2nd	O	O:0.999920
example	O	O:0.999950
,	O	O:0.999990
I	O	O:0.999988
don't	O	O:0.999921
understand	O	O:0.999764
why	O	O:0.999972
I	O	O:0.999953
can't	O	O:0.999992
just	O	O:0.999863
do	O	O:0.999992
`	O	O:0.999987
g	O	O:0.998798
[	O	O:0.999980
'	O	O:0.999982
c	O	O:0.999949
']	O	O:0.999878
.nth	B-API	B-API:0.998053
(	O	O:0.999874
0	O	O:0.999893
)`	O	O:0.999502
and	O	O:0.999982
why	O	O:0.999979
I	O	O:0.999988
need	O	O:0.999989
to	O	O:0.999975
apply	O	O:0.956015
`	O	O:0.999965
nth	O	O:0.997086
`	O	O:0.999996
to	O	O:0.999975
the	O	O:1.000000
whole	O	O:0.999413
grouped	O	O:0.999637
dataframe	B-API	O:0.996242
and	O	O:0.999996
_then_	O	O:0.999672
select	O	O:0.987379
`	O	O:0.999992
c	O	O:0.996418
`	O	O:0.999990
.	O	O:0.999309
	
If	O	O:0.999957
you	O	O:0.999982
want	O	O:0.999977
to	O	O:0.999992
apply	O	O:0.988701
it	O	O:0.999961
to	O	O:0.999993
all	O	O:1.000000
columns	O	O:0.999957
,	O	O:0.999997
do	O	O:0.999990
`	O	O:0.999995
df	O	O:0.998738
[	O	O:0.999999
df	O	O:0.999869
0	O	O:0.999908
]`	O	O:0.999961
with	O	O:0.999630
`	O	O:0.999981
dropna()	B-API	B-API:0.999125
`	O	O:0.999909
:	O	O:0.999851
#CODE	O	O:0.999908
	
If	O	O:0.999967
you	O	O:0.999973
know	O	O:0.999979
what	O	O:0.999990
columns	O	O:0.999907
to	O	O:0.999996
apply	O	O:0.984869
it	O	O:0.999952
to	O	O:0.999985
,	O	O:1.000000
then	O	O:0.999947
do	O	O:0.999998
for	O	O:0.999999
only	O	O:0.999897
those	O	O:0.999982
cols	O	O:0.999698
with	O	O:0.999959
`	O	O:0.999986
df	O	O:0.999464
[	O	O:0.999994
df	O	O:0.999061
[	O	O:0.999989
cols	O	O:0.999765
]	O	O:0.999984
0	O	O:0.998971
]`	O	O:0.999498
:	O	O:0.999785
#CODE	O	O:0.999815
	
access	O	O:0.999752
previous	O	O:0.999983
rows	O	O:0.998878
in	O	O:0.999954
python	O	O:0.999968
dataframe	B-API	O:0.993922
apply	O	B-API:0.810444
method	O	O:0.998834
	
For	O	O:0.999986
this	O	O:0.999889
dataset	O	O:0.999988
if	O	O:0.999995
I	O	O:0.999998
delete	O	O:0.999569
the	O	O:0.999990
first	O	O:0.999884
3	O	O:0.999992
rows	O	O:0.999842
the	O	O:0.999989
fit	O	O:0.999506
is	O	O:0.999980
greater	O	O:0.999625
than	O	O:0.999869
0.995	O	O:0.999148
,	O	O:0.999995
I	O	O:0.999997
have	O	O:0.999848
tested	O	O:0.999551
this	O	O:0.999957
but	O	O:0.999976
I	O	O:0.999994
want	O	O:0.999994
this	O	O:0.999707
to	O	O:0.999998
be	O	O:1.000000
a	O	O:0.999998
general	O	O:0.997725
expression	O	O:0.999945
so	O	O:0.999980
I	O	O:0.999995
can	O	O:0.999989
apply	O	O:0.914348
it	O	O:0.999969
to	O	O:0.999993
other	O	O:0.999997
datasets	O	O:0.999700
.	O	O:0.999811
	
`	O	O:0.999963
apply	O	B-API:0.969131
`	O	O:0.999986
a	O	O:0.999952
lambda	O	O:0.999825
to	O	O:0.999983
access	O	O:0.999922
the	O	O:0.999993
last	O	O:0.996746
element	O	O:0.999056
:	O	O:0.999944
#CODE	O	O:0.999883
	
I	O	O:0.999981
have	O	O:0.999960
two	O	O:0.999982
pandas	O	O:0.999987
tables	O	O:0.999746
,	O	O:0.999973
`	O	O:0.999994
d	O	O:0.996834
`	O	O:0.999990
and	O	O:0.999613
`	O	O:0.999995
num_original_introns	O	O:0.735273
`	O	O:0.999974
.	O	O:0.999588
	
They	O	O:0.999411
are	O	O:0.999988
both	O	O:0.999953
indexed	O	O:0.999894
with	O	O:0.999938
the	O	O:0.999975
same	O	O:0.999626
non-numeric	O	O:0.998423
index	O	O:0.999755
.	O	O:0.999911
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999962
apply	O	O:0.997026
a	O	O:0.999988
step	O	O:0.997454
function	O	O:0.999987
to	O	O:0.999996
transform	O	O:0.958014
`	O	O:0.999986
d	O	O:0.999027
`	O	O:0.999999
based	O	O:0.999525
on	O	O:0.999997
values	O	O:0.999352
in	O	O:0.999969
`	O	O:0.999995
d	O	O:0.998381
`	O	O:0.999987
and	O	O:0.999595
`	O	O:0.999996
num_original_introns	O	O:0.839796
`	O	O:0.999993
,	O	O:0.999995
like	O	O:0.999929
so	O	O:0.999853
:	O	O:0.999971
#CODE	O	O:0.999896
	
I	O	O:0.999977
know	O	O:0.999924
that	O	O:0.999940
this	O	O:0.999591
is	O	O:0.999990
invalid	O	O:0.996481
,	O	O:0.999917
and	O	O:0.999980
it	O	O:0.999593
is	O	O:0.999947
not	O	O:0.999984
possible	O	O:0.999960
to	O	O:0.999997
apply	O	O:0.994689
a	O	O:0.999995
pair	O	O:0.998997
of	O	O:0.999993
conditionals	O	O:0.999510
like	O	O:0.999991
this	O	O:0.999882
,	O	O:0.999994
but	O	O:0.999976
I	O	O:0.999980
can't	O	O:0.999988
seem	O	O:0.999794
to	O	O:0.999999
find	O	O:0.999997
an	O	O:0.999996
alternative	O	O:0.999974
from	O	O:0.999864
googling	O	O:0.998240
.	O	O:0.999807
	
How	O	O:0.999897
can	O	O:0.999949
I	O	O:0.999999
do	O	O:0.999998
this	O	O:0.999572
?	O	O:0.999961
	
Why	O	O:0.999904
you	O	O:0.999957
couldn't	O	O:0.999779
use	O	O:0.999976
`	O	O:0.999967
apply	O	B-API:0.983030
`	O	O:0.999964
with	O	O:0.993002
`	O	O:0.999992
axis=1	O	O:0.995976
`	O	O:0.999997
then	O	O:0.998281
?	O	O:0.999998
	
IIUC	O	O:0.998983
you	O	O:0.999968
could	O	O:0.999928
use	O	O:0.999995
`	O	O:0.999982
apply	O	B-API:0.982180
`	O	O:0.999966
with	O	O:0.990226
`	O	O:0.999989
axis=1	O	O:0.987709
`	O	O:0.999976
and	O	O:0.999844
`	O	O:0.999990
fillna	B-API	B-API:0.999416
`	O	O:0.999989
with	O	O:0.999938
your	O	O:0.999966
custom	O	O:0.984949
function	O	O:0.999483
:	O	O:0.999925
#CODE	O	O:0.999848
	
If	O	O:0.999967
you	O	O:0.999991
want	O	O:0.999988
to	O	O:0.999995
get	O	O:0.999999
column	O	O:0.999989
names	O	O:0.999955
for	O	O:0.999997
missing	O	O:0.999597
values	O	O:0.999236
you	O	O:0.999963
could	O	O:0.999997
apply	O	O:0.980744
or	O	O:0.999960
use	O	O:0.999925
that	O	O:0.998938
function	O	O:0.999868
for	O	O:0.999977
processing	O	O:0.983671
:	O	O:0.999711
#CODE	O	O:0.999794
	
When	O	O:0.999657
looking	O	O:0.999914
online	O	O:0.999861
,	O	O:0.999989
I	O	O:0.999996
tend	O	O:0.999912
to	O	O:0.999984
see	O	O:1.000000
examples	O	O:0.999911
of	O	O:0.999965
'	O	O:0.999988
hardcoded	O	O:0.999953
'	O	O:0.999993
variables	O	O:0.997913
,	O	O:0.999988
but	O	O:0.999986
I	O	O:0.999991
don't	O	O:0.999974
get	O	O:0.999866
how	O	O:0.999994
to	O	O:0.999994
apply	O	O:0.996693
this	O	O:0.999846
to	O	O:0.999994
a	O	O:1.000000
dataframe	B-API	O:0.998726
column	O	O:0.999953
-	O	O:0.999997
I	O	O:0.999986
found	O	O:0.999981
that	O	O:0.999392
I	O	O:0.999997
should	O	O:0.999990
use	O	O:0.999893
strptime	O	O:0.978382
to	O	O:0.999954
identify	O	O:0.999924
what	O	O:0.999862
format	O	O:0.999989
my	O	O:0.999995
date	O	O:0.999683
column	O	O:0.999657
is	O	O:0.999953
,	O	O:0.999978
but	O	O:0.999974
I	O	O:0.999983
don't	O	O:0.999988
know	O	O:0.999340
if	O	O:0.999996
this	O	O:0.999751
has	O	O:0.999993
any	O	O:0.999958
effect	O	O:0.999635
(	O	O:0.999992
I	O	O:0.999994
get	O	O:0.999984
the	O	O:0.999991
same	O	O:0.999966
error	O	O:0.999934
if	O	O:0.999996
I	O	O:0.999995
comment	O	O:0.999885
out	O	O:0.999788
the	O	O:0.999980
convert_dates	O	O:0.542524
apply	O	B-API:0.623864
method	O	O:0.998929
)	O	O:0.999908
.	O	O:0.999862
	
python	O	O:0.999543
pandas-	O	O:0.999766
apply	O	B-API:0.726975
function	O	O:0.999207
with	O	O:0.999840
two	O	O:0.999980
arguments	O	O:0.999962
to	O	O:0.999988
columns	O	O:0.999989
	
Continuing	O	O:0.999736
off	O	O:0.999854
of	O	O:0.999996
part	O	O:0.999636
1	O	O:0.999990
,	O	O:0.999999
you	O	O:0.999985
can	O	O:0.999992
merge	O	O:0.996439
the	O	O:0.999998
values	O	O:0.999960
back	O	O:0.999843
on	O	O:0.999998
to	O	O:0.999996
the	O	O:1.000000
original	O	O:0.999554
dataframe	B-API	O:0.998139
.	O	O:0.999917
	
At	O	O:0.999984
that	O	O:0.999921
point	O	O:0.999983
,	O	O:0.999999
you	O	O:0.999988
can	O	O:0.999987
write	O	O:0.999999
a	O	O:0.999999
custom	O	O:0.994347
function	O	O:0.999971
to	O	O:0.999986
subtract	O	O:0.999998
your	O	O:0.999974
date	O	O:0.999361
strings	O	O:0.999615
and	O	O:0.999997
then	O	O:0.999916
apply	O	O:0.856553
it	O	O:0.999963
to	O	O:0.999993
each	O	O:0.999978
row	O	O:0.999845
.	O	O:0.999918
	
You	O	O:0.999880
can	O	O:0.999861
`	O	O:0.999998
groupby	B-API	B-API:0.998740
`	O	O:0.999997
dataframe	B-API	O:0.996431
by	O	O:0.999995
column	O	O:0.999825
`	O	O:0.999978
Name	O	O:0.997498
`	O	O:0.999992
,	O	O:0.999765
`	O	O:0.999996
apply	O	B-API:0.986506
`	O	O:0.999977
custom	O	O:0.932608
function	O	O:0.999927
`	O	O:0.999970
f	O	O:0.997639
`	O	O:0.999988
and	O	O:0.999997
then	O	O:0.999976
select	O	O:0.999821
dataframes	O	O:0.999694
`	O	O:0.999985
df_A	O	O:0.954655
`	O	O:0.999981
and	O	O:0.999477
`	O	O:0.999992
df_B	O	B-API:0.513285
`	O	O:0.999871
:	O	O:0.999677
#CODE	O	O:0.999908
	
I	O	O:0.999989
have	O	O:0.999983
a	O	O:0.999979
dataframe	B-API	O:0.991665
and	O	O:0.999985
I'd	O	O:0.999998
like	O	O:0.999881
to	O	O:0.999996
apply	O	O:0.991017
a	O	O:0.999872
function	O	O:0.999483
to	O	O:0.999998
each	O	O:0.999986
2	O	O:0.999965
columns	O	O:0.999600
(	O	O:0.999996
or	O	O:0.999992
3	O	O:0.999848
,	O	O:0.999983
it's	O	O:0.999960
variable	O	O:0.999862
)	O	O:0.999977
.	O	O:0.999839
	
For	O	O:0.999953
example	O	O:0.999774
with	O	O:0.999954
the	O	O:0.999990
following	O	O:0.998497
`	O	O:0.999973
DataFrame	B-API	O:0.918948
`	O	O:0.999994
,	O	O:0.999972
I'd	O	O:0.999999
like	O	O:0.999969
to	O	O:0.999995
apply	O	O:0.955932
the	O	O:0.999974
mean	O	O:0.995182
function	O	O:0.999983
to	O	O:0.999998
columns	O	O:0.999997
0-1	O	O:0.999942
,	O	O:0.999992
2-3	O	O:0.999719
,	O	O:0.999969
4-5	O	O:0.998095
,	O	O:0.999980
....	O	O:0.998299
	
28-29	O	O:0.994770
#CODE	O	O:0.999290
	
Then	O	O:0.999398
I	O	O:0.999999
push	O	O:0.999375
all	O	O:0.999870
but	O	O:0.999975
1	O	O:0.999967
column	O	O:0.999952
into	O	O:0.999200
the	O	O:0.999980
index	O	O:0.999644
with	O	O:0.999378
set_index	B-API	B-API:0.992132
.	O	O:0.999889
	
This	O	O:0.999606
leaves	O	O:0.999354
one	O	O:0.999994
column	O	O:0.999843
which	O	O:0.999992
comes	O	O:0.999959
back	O	O:0.999934
as	O	O:0.999996
a	O	O:0.999944
Series	O	O:0.995814
.	O	O:0.999835
	
Then	O	O:0.999229
use	O	O:0.999967
apply	O	B-API:0.956088
and	O	O:0.999848
return	O	O:0.999126
a	O	O:0.999789
series	O	O:0.999899
indexed	O	O:0.999905
on	O	O:0.999994
the	O	O:0.999994
expanded	O	O:0.999973
set	O	O:0.999975
of	O	O:0.999998
dates	O	O:0.997658
for	O	O:0.999997
each	O	O:0.998684
row	O	O:0.996091
(	O	O:0.999992
Series	O	O:0.999826
of	O	O:0.999972
Series	O	O:0.998359
=	O	O:0.999975
DataFrame	B-API	O:0.993321
)	O	O:0.999931
.	O	O:0.999831
	
So	O	O:0.999957
for	O	O:0.999999
each	O	O:0.999785
of	O	O:0.999988
the	O	O:0.999991
7	O	O:0.999998
rows	O	O:0.999386
in	O	O:0.999969
the	O	O:0.999996
DataFrame	B-API	O:0.997548
,	O	O:0.999994
I	O	O:0.999998
get	O	O:0.999996
a	O	O:0.999976
series	O	O:0.999969
indexed	O	O:0.999927
on	O	O:0.999995
the	O	O:0.999996
expanded	O	O:0.999862
date	O	O:0.999066
range	O	O:0.999855
.	O	O:0.999801
	
Then	O	O:0.999655
its	O	O:0.999996
just	O	O:0.999899
clever	O	O:0.999945
stacking	O	O:0.999194
,	O	O:0.999977
naming	O	O:0.998861
,	O	O:0.999912
and	O	O:0.999959
reset_index	B-API	B-API:0.994024
.	O	O:0.999153
	
#CODE	O	O:0.998453
	
You	O	O:0.999855
can	O	O:0.999924
`	O	O:0.999999
apply	O	B-API:0.913081
`	O	O:0.999880
function	O	O:0.999202
to	O	O:0.999972
`	O	O:0.999999
groupby	B-API	B-API:0.998803
`	O	O:0.999999
where	O	O:0.999644
use	O	O:0.999990
another	O	O:0.999229
`	O	O:0.999953
apply	O	B-API:0.983616
`	O	O:0.999966
with	O	O:0.996024
`	O	O:0.999994
replace	O	O:0.907988
`	O	O:0.999996
`	O	O:0.999954
0	O	O:0.999504
`	O	O:0.999995
to	O	O:0.999433
`	O	O:0.999999
NaN	O	O:0.908228
`	O	O:0.999945
:	O	O:0.999839
#CODE	O	O:0.999908
	
You	O	O:0.999915
can	O	O:0.999839
use	O	O:0.999999
this	O	O:0.999860
apply	O	B-API:0.903047
function	O	O:0.995257
:	O	O:0.999782
#CODE	O	O:0.999835
	
Although	O	O:0.999910
this	O	O:0.999841
does	O	O:0.999935
not	O	O:0.999981
use	O	O:0.999995
explicit	O	O:0.996156
`	O	O:0.999935
for-loop	O	O:0.993535
`	O	O:0.999996
s	O	O:0.999761
or	O	O:0.999997
a	O	O:0.999994
list	O	O:0.997624
comprehension	O	O:0.999586
,	O	O:0.999998
there	O	O:0.999777
is	O	O:0.999988
an	O	O:0.999975
implicit	O	O:0.999694
for-loop	O	O:0.999859
hidden	O	O:0.995951
in	O	O:0.999992
the	O	O:0.999987
call	O	O:0.998357
to	O	O:0.999973
`	O	O:0.999994
apply	O	B-API:0.979599
`	O	O:0.999893
.	O	O:0.998599
	
In	O	O:0.999921
fact	O	O:0.999556
,	O	O:0.999992
it	O	O:0.999866
is	O	O:0.999995
much	O	O:0.999503
slower	O	O:0.999957
than	O	O:0.999930
using	O	O:0.999933
a	O	O:0.999975
list	O	O:0.943018
comprehension	O	O:0.995983
:	O	O:0.999966
#CODE	O	O:0.999705
	
Yes	O	O:0.998809
and	O	O:0.999984
no	O	O:0.999931
--	O	O:0.999977
there	O	O:0.999676
is	O	O:0.999998
a	O	O:0.999983
way	O	O:0.999871
to	O	O:0.999976
do	O	O:0.999998
it	O	O:0.999996
using	O	O:0.999915
`	O	O:0.999946
apply	O	B-API:0.974371
/	O	O:0.999923
stack	O	B-API:0.941024
`	O	O:0.999959
which	O	O:0.999388
avoids	O	O:0.999949
the	O	O:0.999939
*	O	O:0.999976
explicit	O	O:0.999432
*	O	O:0.999988
double	O	O:0.991632
for-loops	O	O:0.998697
,	O	O:0.999884
but	O	O:0.999972
it	O	O:0.999924
is	O	O:0.999993
actually	O	O:0.999982
much	O	O:0.999764
slower	O	O:0.999813
than	O	O:0.999426
the	O	O:0.999977
list	O	O:0.999346
comprehension-based	O	O:0.999615
solution	O	O:0.999964
shown	O	O:0.999783
above	O	O:0.999783
.	O	O:0.999867
	
So	O	O:0.999973
if	O	O:0.999989
you	O	O:0.999969
are	O	O:0.999997
trying	O	O:0.999970
to	O	O:0.999990
avoid	O	O:0.999914
`	O	O:0.999974
for-loop	O	O:0.992693
`	O	O:0.999997
s	O	O:0.999298
for	O	O:0.999991
performance	O	O:0.999570
,	O	O:0.999996
then	O	O:0.999908
I	O	O:0.999998
don't	O	O:0.999990
think	O	O:0.999891
there	O	O:0.999905
is	O	O:0.999994
a	O	O:0.999989
good	O	O:0.996949
way	O	O:0.999893
.	O	O:0.999761
	
You	O	O:0.999921
see	O	O:0.999963
,	O	O:0.999998
when	O	O:0.999935
you	O	O:0.999988
put	O	O:0.999973
non-native	O	O:0.999963
NumPy	O	O:0.999949
data	O	O:0.999947
types	O	O:0.999630
,	O	O:1.000000
such	O	O:0.999982
as	O	O:0.999997
lists	O	O:0.997165
,	O	O:0.999990
in	O	O:0.999989
a	O	O:0.999990
DataFrame	B-API	O:0.991292
,	O	O:0.999999
ultimately	O	O:0.999976
computations	O	O:0.999861
on	O	O:0.999997
those	O	O:0.999989
values	O	O:0.999878
require	O	O:0.999796
plain	O	O:0.999772
Python	O	O:0.999859
methods	O	O:0.999663
which	O	O:0.999782
are	O	O:0.999994
relatively	O	O:0.999830
slow	O	O:0.994240
(	O	O:0.999987
compared	O	O:0.999590
to	O	O:0.999987
native	O	O:0.999956
NumPy	O	O:0.999896
methods	O	O:0.998143
)	O	O:0.999930
.	O	O:0.999778
	
To	O	O:0.999990
break	O	O:0.999646
apart	O	O:0.999982
the	O	O:0.999996
items	O	O:0.999266
in	O	O:0.999990
the	O	O:0.999997
lists	O	O:0.999481
require	O	O:0.999759
plain	O	O:0.999750
Python	O	O:0.999855
loops	O	O:0.999882
no	O	O:0.999960
matter	O	O:0.999863
how	O	O:0.999975
you	O	O:0.999959
phrase	O	O:0.999608
it	O	O:0.999984
.	O	O:0.999958
	
Do	O	O:0.999969
I	O	O:0.999997
then	O	O:0.999983
save	O	O:0.999947
that	O	O:0.999990
as	O	O:1.000000
a	O	O:0.999870
function	O	O:0.998792
and	O	O:0.999988
apply	O	O:0.736187
it	O	O:0.999624
to	O	O:0.999949
the	O	O:1.000000
dataframe	B-API	O:0.998218
or	O	O:0.999996
could	O	O:0.999971
I	O	O:1.000000
just	O	O:0.999955
run	O	O:0.999898
that	O	O:0.999867
on	O	O:0.999988
it's	O	O:0.999779
own	O	O:0.999910
and	O	O:0.999996
have	O	O:0.999981
it	O	O:0.999978
append	O	O:0.885518
the	O	O:0.999985
column	O	O:0.999856
to	O	O:0.999996
the	O	O:1.000000
original	O	O:0.999739
df	O	O:0.999784
?	O	O:0.999961
	
`	O	O:0.999898
apply	O	B-API:0.980033
(	O	O:0.999927
F	O	O:0.999840
)`	O	O:0.999848
calles	O	O:0.975519
`	O	O:0.999994
_python_apply_general	O	O:0.824514
`	O	O:0.999984
.	O	O:0.999451
	
As	O	O:0.999951
the	O	O:0.999963
name	O	O:0.999747
implies	O	O:0.999185
,	O	O:0.999995
it	O	O:0.999837
is	O	O:0.999992
ageneral	O	O:0.994293
propose	O	O:0.998546
method	O	O:0.999632
.	O	O:0.999861
	
Under	O	O:0.999694
the	O	O:0.999957
hood	O	O:0.999212
,	O	O:0.999984
it	O	O:0.999979
does	O	O:0.999903
not	O	O:0.999990
attempt	O	O:0.999993
checking	O	O:0.999893
if	O	O:0.999996
a	O	O:0.999990
faster	O	O:0.996616
`	O	O:0.999986
cython	O	O:0.982150
`	O	O:0.999999
version	O	O:0.999567
of	O	O:0.999997
aggerate	O	O:0.998790
function	O	O:0.999956
exists	O	O:0.999688
.	O	O:0.999943
	
It	O	O:0.999932
applies	O	O:0.999606
`	O	O:0.999977
F	O	O:0.997154
`	O	O:0.999995
to	O	O:0.999942
each	O	O:0.999995
group	O	O:0.997606
and	O	O:0.999994
assembles	O	O:0.999973
the	O	O:0.999931
results	O	O:0.999913
together	O	O:0.999441
,	O	O:0.999984
which	O	O:0.999870
means	O	O:0.999872
it	O	O:0.999989
would	O	O:0.999980
run	O	O:0.999935
slower	O	O:0.999971
than	O	O:0.999907
the	O	O:0.999985
optimized	O	O:0.999474
`	O	O:0.999989
cython	O	O:0.995107
`	O	O:0.999997
version	O	O:0.998781
equivalent	O	O:0.999459
(	O	O:0.999998
such	O	O:0.999957
as	O	O:0.999985
`	O	O:0.999783
.sum	B-API	B-API:0.995144
`)	O	O:0.999947
.	O	O:0.999585
	
Finally	O	O:0.999716
,	O	O:0.999983
`	O	O:0.999982
apply	O	B-API:0.992766
(	O	O:0.999933
lambda	O	O:0.997974
x	O	O:0.999622
:	O	O:0.999839
F	O	O:0.999671
(	O	O:0.999989
x	O	O:0.999908
))`	O	O:0.999590
will	O	O:0.999904
be	O	O:0.999998
slightly	O	O:0.999899
slower	O	O:0.999660
than	O	O:0.999415
`	O	O:0.999972
apply	O	B-API:0.957322
(	O	O:0.999930
F	O	O:0.999932
)`	O	O:0.999961
due	O	O:0.999752
to	O	O:0.999984
the	O	O:1.000000
additional	O	O:0.997764
`	O	O:0.999985
lambda	O	O:0.993451
`	O	O:0.999939
function	O	O:0.998083
.	O	O:0.999931
	
In	O	O:0.999921
Pandas	O	O:0.999766
,	O	O:0.999990
how	O	O:0.999971
to	O	O:0.999996
apply	O	O:0.995375
a	O	O:0.999983
customized	O	O:0.987286
function	O	O:0.999948
using	O	O:0.999204
Group	O	O:0.999716
mean	O	O:0.998503
on	O	O:0.999962
Groupby	B-API	O:0.779487
Object	O	O:0.999680
	
I	O	O:0.999988
want	O	O:0.999984
to	O	O:0.999968
create	O	O:0.999994
groups	O	O:0.999964
based	O	O:0.999949
on	O	O:0.999999
value	O	O:0.999966
of	O	O:0.999995
column	O	O:0.999398
A	O	O:0.999990
.	O	O:0.999896
	
So	O	O:0.999959
I	O	O:0.999995
slice	O	O:0.999441
A	O	O:0.999964
first	O	O:0.999260
.	O	O:0.999785
	
And	O	O:0.999944
define	O	O:0.999869
a	O	O:0.999915
function	O	O:0.998733
.	O	O:0.999858
	
Then	O	O:0.999684
I	O	O:0.999997
use	O	O:0.999904
apply	O	B-API:0.961133
method	O	O:0.999252
on	O	O:0.999910
the	O	O:0.999968
Groupby	B-API	O:0.703567
Obj	O	O:0.999737
.	O	O:0.999714
	
I	O	O:0.999972
am	O	O:0.999997
expecting	O	O:0.999847
the	O	O:0.999994
new	O	O:0.999969
column	O	O:0.999954
to	O	O:0.999995
be	O	O:1.000000
the	O	O:0.999991
difference	O	O:0.999542
between	O	O:0.998479
B	O	O:0.999935
and	O	O:0.999994
C	O	O:0.999906
over	O	O:0.998970
the	O	O:0.999924
group	O	O:0.999578
mean	O	O:0.999913
of	O	O:0.999955
A	O	O:0.999952
.	O	O:0.999944
	
#CODE	O	O:0.998453
	
I	O	O:0.999986
want	O	O:0.999974
to	O	O:0.999963
apply	O	O:0.993091
a	O	O:0.999987
group	O	O:0.997346
by	O	O:0.999991
on	O	O:0.999987
a	O	O:0.999986
pandas	O	O:0.999759
dataframe	B-API	O:0.997361
.	O	O:0.999802
	
I	O	O:0.999989
want	O	O:0.999961
to	O	O:0.999979
group	O	O:0.999979
by	O	O:0.999995
three	O	O:0.999912
columns	O	O:0.999719
and	O	O:0.999993
calculate	O	O:0.999957
their	O	O:0.999904
count	O	O:0.998573
.	O	O:0.999885
	
I	O	O:0.999972
used	O	O:0.999936
the	O	O:0.999865
following	O	O:0.999220
code	O	O:0.998992
#CODE	O	O:0.999779
	
I	O	O:0.999954
think	O	O:0.999969
native	O	O:0.998794
apply	O	B-API:0.871765
is	O	O:0.999659
the	O	O:0.999877
best	O	O:0.995867
,	O	O:0.999870
but	O	O:0.999906
not	O	O:0.999922
.	O	O:0.999969
	
I	O	O:0.999961
found	O	O:0.999894
faster	O	O:0.995466
approach	O	O:0.998453
:	O	O:0.999848
#CODE	O	O:0.999699
	
You	O	O:0.999929
can	O	O:0.999956
use	O	O:0.999997
apply	O	B-API:0.758796
with	O	O:0.999049
lambda	O	O:0.998911
with	O	O:0.999768
is	O	O:0.999926
faster	O	O:0.999789
than	O	O:0.999989
your	O	O:0.999431
solution	O	O:0.997623
:	O	O:0.999984
#CODE	O	O:0.999821
	
You	O	O:0.999932
could	O	O:0.999895
use	O	O:0.999982
`	O	O:0.999922
functools.reduce	O	O:0.579456
`	O	O:0.999996
to	O	O:0.999978
iteratively	O	O:0.999993
apply	O	O:0.561310
`	O	O:0.999774
pd.merge	B-API	B-API:0.997088
`	O	O:0.999995
to	O	O:0.999995
each	O	O:0.999997
of	O	O:0.999992
the	O	O:0.999951
DataFrames	O	O:0.997685
:	O	O:0.999929
#CODE	O	O:0.999910
	
you	O	O:0.999897
don't	O	O:0.999988
even	O	O:0.999989
need	O	O:0.999997
to	O	O:0.999994
use	O	O:0.999997
`	O	O:0.999948
apply	O	B-API:0.995737
`	O	O:0.999882
:	O	O:0.998847
`	O	O:0.999998
df	O	O:0.998922
[[	O	O:0.999932
'	O	O:0.999965
AccX	O	O:0.999343
'	O	O:0.999980
,	O	O:0.999941
'	O	O:0.999982
AccY	O	O:0.999597
']]	O	O:0.999927
.values	B-API	B-API:0.997622
`	O	O:0.999803
	
But	O	O:0.999960
if	O	O:0.999986
I	O	O:0.999998
want	O	O:0.999980
to	O	O:0.999926
do	O	O:1.000000
some	O	O:0.999961
operation	O	O:0.999912
on	O	O:0.999998
each	O	O:0.999857
row	O	O:0.999986
,	O	O:0.999994
I	O	O:0.999997
still	O	O:0.999965
need	O	O:0.999827
`	O	O:0.999994
apply	O	B-API:0.908170
`	O	O:0.999947
correct	O	O:0.996101
?	O	O:0.999989
	
Also	O	O:0.999325
I	O	O:0.999998
kind	O	O:0.999975
of	O	O:0.999982
just	O	O:0.999907
want	O	O:0.999994
to	O	O:0.999991
know	O	O:0.999995
why	O	O:0.999990
the	O	O:0.999982
first	O	O:0.999927
three	O	O:0.999547
don't	O	O:0.999846
work	O	O:0.999779
.	O	O:0.999971
	
My	O	O:0.999992
whole	O	O:0.999951
data	O	O:0.999963
frame	O	O:0.999994
has	O	O:0.999978
11	O	O:0.999968
columns	O	O:0.999378
	
This	O	O:0.999721
code	O	O:0.999817
gives	O	O:0.999962
me	O	O:0.999986
an	O	O:0.999987
attribute	O	O:0.999981
error	O	O:0.999967
when	O	O:0.999831
I	O	O:0.999996
apply	O	O:0.956906
the	O	O:0.989955
seasonal_decompose	O	O:0.886825
method	O	O:0.999121
:	O	O:0.999929
	
Creating	O	O:0.992425
Period	O	O:0.996448
objects	O	O:0.998396
is	O	O:0.999981
expensive	O	O:0.999730
,	O	O:0.999995
so	O	O:0.999988
let's	O	O:0.999854
identify	O	O:0.999175
the	O	O:0.999992
unique	O	O:0.613108
quarters	O	O:0.999139
and	O	O:0.999999
then	O	O:0.999945
apply	O	O:0.697160
the	O	O:0.999807
period	O	O:0.997844
mapping	O	O:0.999230
.	O	O:0.999846
	
#CODE	O	O:0.998453
	
Consider	O	O:0.999812
a	O	O:0.999976
groupby	B-API	B-API:0.984717
apply	O	B-API:0.751621
function	O	O:0.998578
with	O	O:0.999541
sort	O	O:0.985999
:	O	O:0.999982
#CODE	O	O:0.999823
	
This	O	O:0.999196
works	O	O:0.999966
fine	O	O:0.999866
for	O	O:0.999997
some	O	O:0.999634
files	O	O:0.998942
but	O	O:0.999962
for	O	O:0.999996
some	O	O:0.999889
other	O	O:0.999902
files	O	O:0.999789
it	O	O:0.999951
raises	O	O:0.999927
the	O	O:0.999956
error	O	O:0.997939
:	O	O:0.999911
`	O	O:0.999960
ValueError	O	O:0.999232
:	O	O:0.999959
could	O	O:0.999912
not	O	O:0.999998
convert	O	O:0.999819
string	O	O:0.999879
to	O	O:0.999975
float	O	O:0.999759
`	O	O:0.999965
.	O	O:0.999572
	
Which	O	O:0.999707
naturally	O	O:0.999886
makes	O	O:0.999866
me	O	O:0.999966
think	O	O:0.999939
there	O	O:0.999784
is	O	O:0.999997
something	O	O:0.999926
wrong	O	O:0.999711
with	O	O:0.999886
the	O	O:0.999978
file	O	O:0.999503
.	O	O:0.999884
	
But	O	O:0.999915
,	O	O:0.999998
when	O	O:0.999838
I	O	O:0.999996
try	O	O:0.999998
to	O	O:0.999990
loop	O	O:0.999999
sequentially	O	O:0.999859
over	O	O:0.999951
the	O	O:0.999988
data	O	O:0.999857
and	O	O:0.999994
apply	O	O:0.746798
the	O	O:0.999679
same	O	O:0.998305
conversion	O	O:0.999430
it	O	O:0.999989
doesn't	O	O:0.999959
give	O	O:0.999951
any	O	O:0.999979
error	O	O:0.999047
.	O	O:0.999606
	
So	O	O:0.999930
I	O	O:0.999989
cannot	O	O:0.999989
figure	O	O:0.999802
out	O	O:0.999989
where	O	O:0.999985
the	O	O:0.999992
problem	O	O:0.999686
in	O	O:0.999975
the	O	O:0.999994
file	O	O:0.999740
is	O	O:0.999986
or	O	O:0.999992
what's	O	O:0.999941
the	O	O:0.999988
problem	O	O:0.999719
with	O	O:0.999944
the	O	O:0.999962
converter	O	O:0.868077
.	O	O:0.999875
	
I	O	O:0.999917
can't	O	O:0.999973
seem	O	O:0.999829
to	O	O:0.999997
apply	O	O:0.958241
`	O	O:0.999876
to_datetime	B-API	B-API:0.998913
`	O	O:0.999996
to	O	O:0.999977
a	O	O:1.000000
pandas	O	O:0.999751
dataframe	B-API	O:0.999782
column	O	O:0.999827
,	O	O:0.999988
although	O	O:0.999910
I've	O	O:0.999834
done	O	O:0.999814
it	O	O:0.999994
dozens	O	O:0.999976
of	O	O:0.999997
times	O	O:0.999224
in	O	O:0.999994
the	O	O:0.999986
past	O	O:0.998044
.	O	O:0.999887
	
The	O	O:0.999938
following	O	O:0.999599
code	O	O:0.999842
tells	O	O:0.999909
me	O	O:0.999990
that	O	O:0.999955
any	O	O:0.999998
random	O	O:0.999904
value	O	O:0.999704
in	O	O:0.999986
the	O	O:0.999975
"	O	O:0.999959
Date	O	O:0.998471
Time	O	O:0.999307
"	O	O:0.999986
column	O	O:0.998781
is	O	O:0.999997
a	O	O:0.999983
string	O	O:0.999438
,	O	O:0.999982
after	O	O:0.999938
I	O	O:0.999966
try	O	O:0.999980
to	O	O:0.999959
convert	O	O:0.999913
it	O	O:0.999995
to	O	O:0.999999
a	O	O:1.000000
timestamp	O	O:0.977667
.	O	O:0.999900
	
The	O	O:0.999797
`'	O	O:0.999949
errors=coerce	O	O:0.998511
'`	O	O:0.999951
should	O	O:0.999824
convert	O	O:0.999293
any	O	O:0.999995
parsing	O	O:0.999545
errors	O	O:0.999233
to	O	O:0.999981
`'	O	O:0.999997
NaT	O	O:0.996864
'`	O	O:0.999897
,	O	O:0.999941
but	O	O:0.999977
instead	O	O:0.999966
I	O	O:0.999998
still	O	O:0.999989
have	O	O:0.999594
`'	O	O:0.999966
2015-10-10	O	O:0.998991
12:31	O	O:0.997978
:	O	O:0.999946
04	O	O:0.999987
'`	O	O:0.999991
as	O	O:0.999990
a	O	O:0.999965
string	O	O:0.995884
.	O	O:0.999731
	
#CODE	O	O:0.998453
	
I	O	O:0.999991
have	O	O:0.999982
an	O	O:0.999964
`	O	O:0.999995
apply	O	B-API:0.968242
`	O	O:0.999715
function	O	O:0.999718
that	O	O:0.999987
operates	O	O:0.999924
on	O	O:0.999999
each	O	O:0.999813
row	O	O:0.999957
in	O	O:0.999982
my	O	O:0.999978
dataframe	B-API	O:0.993041
.	O	O:0.999894
	
The	O	O:0.999978
result	O	O:0.999908
of	O	O:0.999996
that	O	O:0.999830
`	O	O:0.999999
apply	O	B-API:0.937204
`	O	O:0.999768
function	O	O:0.997205
is	O	O:0.999998
a	O	O:0.999991
new	O	O:0.999506
value	O	O:0.999674
.	O	O:0.999711
	
This	O	O:0.999855
new	O	O:0.999948
value	O	O:0.999612
is	O	O:0.999967
intended	O	O:0.999828
to	O	O:0.999994
go	O	O:0.999997
in	O	O:0.999999
a	O	O:0.999998
new	O	O:0.999951
column	O	O:0.999798
for	O	O:0.999997
that	O	O:0.999686
row	O	O:0.999839
.	O	O:0.999910
	
If	O	O:0.999971
you	O	O:0.999991
need	O	O:0.999992
to	O	O:0.999997
use	O	O:0.999999
other	O	O:0.999783
arguments	O	O:0.999705
,	O	O:0.999995
you	O	O:0.999984
can	O	O:0.999997
pass	O	O:1.000000
them	O	O:0.999959
to	O	O:0.999998
the	O	O:0.999999
`	O	O:0.999978
apply	O	B-API:0.969805
`	O	O:0.999870
function	O	O:0.996059
,	O	O:0.999993
but	O	O:0.999971
sometimes	O	O:0.999667
it's	O	O:0.999796
easier	O	O:0.998948
(	O	O:0.999988
for	O	O:0.999993
me	O	O:0.999925
)	O	O:0.999976
to	O	O:0.999997
just	O	O:0.999993
use	O	O:0.999994
a	O	O:0.999827
lambda	O	O:0.963759
:	O	O:0.999919
#CODE	O	O:0.999419
	
I	O	O:0.999907
should've	O	O:0.999753
mentioned	O	O:0.999689
this	O	O:0.999640
before	O	O:0.999622
:	O	O:0.999993
my	O	O:0.999765
function	O	O:0.999894
has	O	O:0.999980
two	O	O:0.999982
arguments	O	O:0.999905
,	O	O:0.999999
a	O	O:0.999998
row	O	O:0.999896
from	O	O:0.999957
the	O	O:0.999966
`	O	O:0.999989
dataframe	B-API	O:0.946942
`	O	O:0.999992
,	O	O:0.999968
and	O	O:0.999998
a	O	O:0.999983
global	O	O:0.967971
dictionary	O	O:0.999701
.	O	O:0.999578
	
I	O	O:0.999903
tried	O	O:0.999823
incorporating	O	O:0.998761
these	O	O:0.999927
like	O	O:0.999844
so	O	O:0.999972
:	O	O:0.999991
`	O	O:0.999997
df	O	O:0.999444
[	O	O:0.999982
'	O	O:0.999982
new_column	O	O:0.998030
']	O	O:0.999954
=	O	O:0.998983
df.apply	B-API	B-API:0.988407
(	O	O:0.999898
my_fxn	O	O:0.985550
(	O	O:0.999988
row	O	O:0.999949
)	O	O:0.999987
,	O	O:0.999990
args	O	O:0.999393
=(	O	O:0.999802
)	O	O:0.999966
,	O	O:0.999974
axis=1	O	O:0.999142
)`	O	O:0.999012
but	O	O:0.999852
it	O	O:0.999992
seems	O	O:0.999983
to	O	O:0.999995
be	O	O:0.999999
breaking	O	O:0.999871
the	O	O:0.999984
global_dictionary	O	O:0.996701
up	O	O:0.999878
into	O	O:0.999662
individual	O	O:0.999910
individual	O	O:0.998139
K	O	O:0.999836
/	O	O:0.999971
V	O	O:0.999906
pairs	O	O:0.999051
.	O	O:0.999753
	
As	O	O:0.999997
a	O	O:0.999984
result	O	O:0.999583
it	O	O:0.999992
tells	O	O:0.999938
me	O	O:0.999990
that	O	O:0.999944
there	O	O:0.999981
are	O	O:0.999984
too	O	O:0.999976
many	O	O:0.999842
arguments	O	O:0.998535
.	O	O:0.999843
	
How	O	O:0.999930
do	O	O:0.999945
I	O	O:0.999999
pass	O	O:0.999754
arguments	O	O:0.999137
to	O	O:0.999990
the	O	O:0.999999
`	O	O:0.999978
apply	O	B-API:0.963778
`	O	O:0.999824
function	O	O:0.998002
?	O	O:0.999968
	
I'm	O	O:0.999855
hoping	O	O:0.999750
the	O	O:0.999958
solution	O	O:0.999820
will	O	O:0.999865
detect	O	O:0.999791
that	O	O:0.999991
there	O	O:0.999900
is	O	O:0.999996
no	O	O:0.999980
existing	O	O:0.999769
COL3=	O	O:0.996526
'	O	O:0.999927
Y	O	O:0.999905
'	O	O:0.999952
for	O	O:0.999982
COL1=	O	O:0.996044
'	O	O:0.999882
B	O	O:0.999676
'	O	O:0.999961
and	O	O:0.999997
therefore	O	O:0.999982
add	O	O:0.999957
the	O	O:0.999986
row	O	O:0.999748
while	O	O:0.999948
setting	O	O:0.999756
COL2	O	O:0.999864
to	O	O:0.999987
0	O	O:0.999992
for	O	O:0.999988
the	O	O:0.999984
new	O	O:0.999253
row	O	O:0.999647
.	O	O:0.999812
	
The	O	O:0.999943
code	O	O:0.999700
should	O	O:0.999968
get	O	O:0.999994
the	O	O:0.999999
set	O	O:0.999908
of	O	O:0.999998
unique	O	O:0.960123
values	O	O:0.999934
of	O	O:0.999961
COL3	O	O:0.999181
,	O	O:0.999998
check	O	O:0.999868
to	O	O:0.999994
see	O	O:0.999998
if	O	O:0.999995
all	O	O:0.999996
exist	O	O:0.999904
for	O	O:0.999991
all	O	O:0.999987
unique	O	O:0.944591
values	O	O:0.999446
of	O	O:0.999952
COL1	O	O:0.999103
,	O	O:0.999985
and	O	O:0.999966
if	O	O:0.999981
not	O	O:0.999966
,	O	O:0.999997
add	O	O:0.999957
the	O	O:0.999948
row	O	O:0.999495
.	O	O:0.999855
	
It	O	O:0.999931
doesn't	O	O:0.999788
get	O	O:0.999983
more	O	O:0.999929
complex	O	O:0.999566
than	O	O:0.999970
this	O	O:0.999948
,	O	O:0.999995
I	O	O:0.999978
was	O	O:0.999981
only	O	O:0.999892
trying	O	O:0.999981
to	O	O:0.999995
get	O	O:0.999998
an	O	O:0.999991
answer	O	O:0.999990
that	O	O:0.999939
I	O	O:0.999998
can	O	O:0.999997
apply	O	O:0.770546
to	O	O:0.999997
many	O	O:0.999998
rows	O	O:0.999886
instead	O	O:0.999988
of	O	O:1.000000
just	O	O:0.999886
manually	O	O:0.999986
inserting	O	O:0.999777
that	O	O:0.999884
specific	O	O:0.999928
row	O	O:0.999886
.	O	O:0.999781
	
There	O	O:0.999871
must	O	O:0.999951
be	O	O:0.999999
a	O	O:0.999998
way	O	O:0.999808
to	O	O:0.999943
use	O	O:0.999998
pandas	O	O:0.997744
/	O	O:0.999977
numpy	O	O:0.999903
array	O	O:0.999572
functions	O	O:0.999107
but	O	O:0.999950
tell	O	O:0.999839
it	O	O:0.999997
to	O	O:0.999998
skip	O	O:0.999941
the	O	O:0.999999
first	O	O:0.999904
row	O	O:0.999902
in	O	O:0.999981
the	O	O:0.999965
calculation	O	O:0.999298
.	O	O:0.999929
	
How	O	O:0.999913
to	O	O:0.999979
do	O	O:0.999999
that	O	O:0.999917
?	O	O:0.999985
	
I've	O	O:0.998702
tried	O	O:0.999148
Boolean	O	O:0.995227
indexing	O	O:0.997016
but	O	O:0.999899
can't	O	O:0.999664
get	O	O:0.999987
it	O	O:0.999996
to	O	O:0.999997
work	O	O:0.999991
,	O	O:0.999995
and	O	O:0.999998
maybe	O	O:0.999979
there	O	O:0.999645
is	O	O:0.999998
a	O	O:0.999986
way	O	O:0.999798
to	O	O:0.999984
tell	O	O:0.999983
Pandas	O	O:0.999976
to	O	O:0.999993
skip	O	O:0.999916
the	O	O:0.999997
NaN	O	O:0.986222
results	O	O:0.999861
...	O	O:0.999705
but	O	O:0.999978
the	O	O:0.999995
best	O	O:0.999187
approach	O	O:0.999959
seems	O	O:0.999907
to	O	O:0.999996
be	O	O:1.000000
a	O	O:0.999993
qualifier	O	O:0.998429
that	O	O:0.999906
says	O	O:0.999925
"	O	O:0.999994
apply	O	O:0.710175
this	O	O:0.999664
code	O	O:0.999648
,	O	O:0.999999
starting	O	O:0.999878
at	O	O:0.999992
the	O	O:0.999991
second	O	O:0.999281
row	O	O:0.999765
.	O	O:0.999809
	
"	O	O:0.999739
	
It	O	O:0.999915
occurred	O	O:0.999830
to	O	O:0.999980
me	O	O:0.999998
that	O	O:0.999892
it	O	O:0.999996
might	O	O:0.999986
be	O	O:0.999998
much	O	O:0.999935
faster	O	O:0.999712
to	O	O:0.999979
identify	O	O:0.999947
those	O	O:0.999965
groups	O	O:0.999880
that	O	O:0.999993
have	O	O:0.999997
duplicates	O	O:0.999982
using	O	O:0.999967
count	O	O:0.990720
.	O	O:0.999689
	
Then	O	O:0.999776
I	O	O:0.999999
can	O	O:0.999995
apply	O	O:0.813866
the	O	O:0.999915
max	O	B-API:0.556340
transformation	O	O:0.999803
to	O	O:0.999992
that	O	O:0.999998
grouping	O	O:0.999888
,	O	O:0.999991
and	O	O:0.999999
then	O	O:0.999946
recombine	O	O:0.999839
the	O	O:0.999994
two	O	O:0.999969
into	O	O:0.999694
one	O	O:0.999961
.	O	O:0.999831
	
I	O	O:0.999979
think	O	O:0.999973
the	O	O:0.999939
problem	O	O:0.995752
is	O	O:0.999993
that	O	O:0.999876
g	O	O:0.999965
[	O	O:0.999964
"	O	O:0.999972
liq	O	O:0.997500
"]	O	O:0.999728
.transform	B-API	B-API:0.998872
(	O	O:0.999781
"	O	O:0.999984
max	O	B-API:0.663616
")	O	O:0.999797
resets	O	O:0.997005
the	O	O:0.999965
index	O	O:0.999786
,	O	O:0.999992
losing	O	O:0.999858
the	O	O:0.999921
original	O	O:0.999552
index	O	O:0.999902
in	O	O:0.999992
the	O	O:0.999995
process	O	O:0.998146
?	O	O:0.999958
	
certainly	O	O:0.999612
df	O	O:0.999786
[	O	O:0.999963
df	O	O:0.999499
[	O	O:0.999926
"	O	O:0.999982
liq	O	O:0.997096
"]	O	O:0.999860
==	O	O:0.999528
g	O	O:0.999438
[	O	O:0.999929
"	O	O:0.999978
liq	O	O:0.997654
"]	O	O:0.999728
.transform	B-API	B-API:0.998872
(	O	O:0.999796
"	O	O:0.999983
max	O	O:0.792330
")	O	O:0.999951
results	O	O:0.999805
in	O	O:0.999994
a	O	O:0.999997
memory	O	O:0.998738
error	O	O:0.999755
...	O	O:0.999228
	
I'm	O	O:0.999924
still	O	O:0.999868
struggling	O	O:0.999590
with	O	O:0.999953
this	O	O:0.999812
.	O	O:0.999995
doing	O	O:0.999904
g.size()	O	O:0.993433
produces	O	O:0.999258
an	O	O:0.999997
effective	O	O:0.999996
count	O	O:0.999749
of	O	O:0.999998
the	O	O:0.999986
number	O	O:0.999978
of	O	O:0.999986
duplicates	O	O:0.999578
,	O	O:0.999992
and	O	O:0.999973
is	O	O:0.999991
very	O	O:0.995873
,	O	O:0.999997
very	O	O:0.999242
,	O	O:0.999994
fast	O	O:0.999608
,	O	O:0.999998
so	O	O:0.999992
I	O	O:0.999989
am	O	O:0.999999
trying	O	O:0.999839
to	O	O:0.999977
use	O	O:0.999999
this	O	O:0.999887
to	O	O:0.999988
get	O	O:0.999999
the	O	O:0.999968
unique_id	O	O:0.993121
and	O	O:0.999988
period_id	O	O:0.999061
pairs	O	O:0.999609
where	O	O:0.999942
size	O	O:0.999920
>	O	O:0.999967
2	O	O:0.999973
,	O	O:0.999999
then	O	O:0.999904
apply	O	O:0.892566
the	O	O:0.999931
max	O	O:0.691423
idea	O	O:0.999813
above	O	O:0.999904
to	O	O:0.999997
those	O	O:0.999987
which	O	O:0.999910
should	O	O:0.999962
be	O	O:0.999999
much	O	O:0.999850
faster	O	O:0.999010
,	O	O:0.999959
and	O	O:0.999993
then	O	O:0.999796
I'll	O	O:0.999983
need	O	O:0.999991
to	O	O:0.999997
recombine	O	O:0.999982
with	O	O:0.999961
the	O	O:0.999999
original	O	O:0.999954
data	O	O:0.999966
frame	O	O:0.999991
.	O	O:0.999959
	
Pandas	O	O:0.999602
DataFrame	B-API	O:0.992902
apply	O	B-API:0.517429
Specific	O	O:0.998936
Function	O	O:0.997411
to	O	O:0.999953
Each	O	O:0.999988
column	O	O:0.999649
	
In	O	O:0.999977
case	O	O:0.999961
you	O	O:0.999998
have	O	O:0.999993
a	O	O:0.999999
core	O	O:0.999950
set	O	O:0.999980
of	O	O:0.999997
columns	O	O:0.999900
,	O	O:0.999999
as	O	O:0.999997
here	O	O:0.999730
represented	O	O:0.999936
by	O	O:0.999942
`	O	O:0.999984
df1	O	O:0.983697
`	O	O:0.999993
,	O	O:0.999974
you	O	O:0.999992
could	O	O:0.999980
apply	O	O:0.957213
`	O	O:0.999979
.fillna()	B-API	B-API:0.999814
`	O	O:0.999992
to	O	O:0.999972
the	O	O:0.999999
`	O	O:0.999984
.difference()	B-API	B-API:0.992142
`	O	O:0.999989
between	O	O:0.997991
the	O	O:0.999994
core	O	O:0.999517
set	O	O:0.999497
and	O	O:0.999997
any	O	O:0.999994
new	O	O:0.999894
columns	O	O:0.999351
in	O	O:0.999992
more	O	O:0.999909
recent	O	O:0.999410
`	O	O:0.999980
DataFrames	O	O:0.969931
`	O	O:0.999981
.	O	O:0.999705
	
#CODE	O	O:0.998453
	
what	O	O:0.997951
is	O	O:0.999996
your	O	O:0.999923
pandas	O	O:0.999436
version	O	O:0.999847
.	O	O:0.999733
	
I	O	O:0.999968
can	O	O:0.999942
run	O	O:0.999974
this	O	O:0.999976
example	O	O:0.999975
fine	O	O:0.999538
in	O	O:0.999973
0.16.1	O	O:0.999454
.	O	O:0.999857
	
As	O	O:0.999974
an	O	O:0.999990
aside	O	O:0.999995
,	O	O:0.999985
rather	O	O:0.999957
than	O	O:0.999957
doing	O	O:0.999847
apply	O	B-API:0.838568
(	O	O:0.999211
pd.to_datetime	B-API	B-API:0.992377
)	O	O:0.999955
,	O	O:0.999997
just	O	O:0.999953
do	O	O:0.999943
pd.to_datetime	B-API	B-API:0.991599
(	O	O:0.999980
df	O	O:0.999660
)	O	O:0.999954
.	O	O:0.999711
	
This	O	O:0.999357
line	O	O:0.999579
:	O	O:0.999990
df	O	O:0.999915
[	O	O:0.999992
0	O	O:0.999964
]=	O	O:0.999955
df	O	O:0.999279
[	O	O:0.999977
0	O	O:0.999936
]	O	O:0.999887
.apply	B-API	B-API:0.996270
(	O	O:0.999934
pd.to_datetime	B-API	B-API:0.986413
)	O	O:0.999988
also	O	O:0.999912
seems	O	O:0.999989
to	O	O:0.999980
be	O	O:0.999999
wrong	O	O:0.999879
it	O	O:0.999978
seems	O	O:0.999976
you	O	O:0.999996
want	O	O:0.999978
df	O	O:0.999693
[	O	O:0.999984
'	O	O:0.999989
timestamp	O	O:0.999225
']	O	O:0.999975
=	O	O:0.999622
df	O	O:0.999130
[	O	O:0.999926
'	O	O:0.999982
timestamp	O	O:0.998406
']	O	O:0.999899
.	O	O:0.998790
	
.	O	O:0.999439
	
Apply	O	O:0.999651
functon	O	O:0.998813
with	O	O:0.999985
a	O	O:0.999996
condition	O	O:0.999849
on	O	O:0.999996
the	O	O:0.999998
first	O	O:0.999776
row	O	O:0.999805
	
For	O	O:0.999851
instance	O	O:0.999781
,	O	O:0.999989
I	O	O:0.999984
would	O	O:0.999995
like	O	O:0.999951
to	O	O:0.999998
apply	O	O:0.578586
(	O	O:0.999865
lambda	O	O:0.998502
x	O	O:0.999614
:	O	O:0.999841
x+	O	O:0.999992
273.15	O	O:0.998893
)	O	O:0.999985
on	O	O:0.999991
each	O	O:0.999972
columns	O	O:0.999878
which	O	O:0.999957
contain	O	O:0.999858
C	O	O:0.999979
data	O	O:0.999800
.	O	O:0.999863
	
Ah	O	O:0.999923
,	O	O:0.999989
now	O	O:0.999895
I	O	O:0.999982
understand	O	O:0.999796
.	O	O:0.999389
	
Unfortunately	O	O:0.999868
,	O	O:0.999987
I	O	O:0.999990
can't	O	O:0.999987
think	O	O:0.999951
of	O	O:0.999998
a	O	O:0.999989
good	O	O:0.998564
solution	O	O:0.999654
.	O	O:0.999885
	
Which	O	O:0.999889
dataframe	B-API	O:0.998572
operation	O	O:0.999933
do	O	O:0.999980
you	O	O:0.999994
want	O	O:0.999968
to	O	O:0.999997
apply	O	O:0.993504
if	O	O:0.999967
you	O	O:0.999849
had	O	O:0.999994
the	O	O:0.999999
rows	O	O:0.999712
combined	O	O:0.999900
into	O	O:0.999978
a	O	O:0.999991
dataframe	B-API	O:0.970945
?	O	O:0.999945
	
Edit	O	O:0.998654
:	O	O:0.999984
I	O	O:0.999998
have	O	O:0.999990
found	O	O:0.999909
a	O	O:0.999996
way	O	O:0.999852
to	O	O:0.999983
do	O	O:0.999997
that	O	O:0.999887
:	O	O:0.999996
I	O	O:0.999999
apply	O	O:0.869415
`	O	O:0.999263
ast.literal_eval	O	B-API:0.536395
`	O	O:0.999991
to	O	O:0.999921
each	O	O:0.999988
line	O	O:0.999473
.	O	O:0.999917
	
Apply	O	O:0.998276
function	O	O:0.999877
to	O	O:0.999992
each	O	O:0.999996
column	O	O:0.999980
that	O	O:0.999967
returns	O	O:0.999981
the	O	O:0.999993
value	O	O:0.999965
associated	O	O:0.999780
with	O	O:0.999966
the	O	O:0.999821
`	O	O:0.999987
index	O	O:0.999502
`	O	O:0.999999
of	O	O:0.999989
the	O	O:0.999967
`	O	O:0.999989
min	O	B-API:0.881595
`	O	O:0.999992
`	O	O:0.999915
abs	O	B-API:0.836789
`	O	O:0.999995
value	O	O:0.999879
like	O	O:0.999883
so	O	O:0.999908
:	O	O:0.999962
#CODE	O	O:0.999866
	
You	O	O:0.999866
could	O	O:0.999986
pass	O	O:0.999868
an	O	O:0.999985
argument	O	O:0.999968
to	O	O:0.999941
`	O	O:0.999999
apply	O	B-API:0.991643
`	O	O:0.999677
:	O	O:0.999511
#CODE	O	O:0.999898
	
Using	O	O:0.999617
apply	O	B-API:0.676272
to	O	O:0.999938
go	O	O:0.999998
through	O	O:0.999931
row	O	O:0.999988
by	O	O:0.999949
row	O	O:0.999849
and	O	O:0.999993
test	O	O:0.999371
whether	O	O:0.999889
the	O	O:0.999983
value	O	O:0.998636
is	O	O:0.999993
numeric	O	O:0.998844
of	O	O:0.999986
string	O	O:0.996661
is	O	O:0.999988
the	O	O:0.999971
quickest	O	O:0.999457
way	O	O:0.999966
separate	O	O:0.999958
them	O	O:0.999345
.	O	O:0.999929
	
#CODE	O	O:0.998453
	
I	O	O:0.999976
have	O	O:0.999896
tried	O	O:0.999537
expressing	O	O:0.999902
it	O	O:0.999837
in	O	O:0.999998
terms	O	O:0.999968
of	O	O:0.999997
join	O	B-API:0.908206
or	O	O:0.999988
merge	O	B-API:0.614363
but	O	O:0.999973
have	O	O:0.999831
failed	O	O:0.999944
so	O	O:0.999976
far	O	O:0.999646
.	O	O:0.999904
	
Is	O	O:0.999973
there	O	O:0.999959
any	O	O:0.999990
simple	O	O:0.999787
way	O	O:0.999926
to	O	O:0.999981
express	O	O:0.999998
that	O	O:0.999947
or	O	O:0.999999
will	O	O:0.999971
I	O	O:1.000000
have	O	O:0.999992
to	O	O:0.999968
use	O	O:0.999996
apply	O	B-API:0.912151
and	O	O:0.999947
create	O	O:0.999805
a	O	O:0.999964
new	O	O:0.999451
DataFrame	B-API	O:0.991026
?	O	O:0.999918
	
You	O	O:0.999917
could	O	O:0.999871
use	O	O:0.999985
`	O	O:0.999976
apply	O	B-API:0.986603
`	O	O:0.999966
with	O	O:0.992897
`	O	O:0.999990
axis=1	O	O:0.993912
`	O	O:0.999995
to	O	O:0.999982
apply	O	O:0.993556
for	O	O:0.999990
rows	O	O:0.998603
with	O	O:0.999655
`	O	O:0.999997
any	O	O:0.995571
`	O	O:0.999986
method	O	O:0.999724
,	O	O:0.999998
if	O	O:0.999996
you	O	O:0.999992
have	O	O:0.999994
only	O	O:0.999990
one	O	O:0.999998
valid	O	O:0.999880
value	O	O:0.999834
and	O	O:0.999988
all	O	O:0.999989
other	O	O:0.999708
are	O	O:0.999935
`	O	O:0.999980
NaN	O	O:0.945601
`	O	O:0.999961
(	O	O:0.999932
using	O	O:0.999932
@USER	O	O:0.996424
example	O	O:0.980693
):	O	O:0.999901
#CODE	O	O:0.999630
	
If	O	O:0.999965
you	O	O:0.999991
want	O	O:0.999981
to	O	O:0.999996
subset	O	O:0.999996
your	O	O:0.999976
dataframe	B-API	O:0.998114
you	O	O:0.999996
could	O	O:0.999972
use	O	O:0.999997
mask	O	O:0.787323
with	O	O:0.999988
your	O	O:0.999946
columns	O	O:0.999683
and	O	O:0.999997
apply	O	O:0.849215
it	O	O:0.999689
to	O	O:0.999984
the	O	O:1.000000
whole	O	O:0.999474
dataframe	B-API	O:0.991350
:	O	O:0.999973
#CODE	O	O:0.999899
	
and	O	O:0.999993
then	O	O:0.999417
use	O	O:0.999925
groupBy	B-API	B-API:0.997223
and	O	O:0.999977
apply	O	O:0.630532
to	O	O:0.999739
calculate	O	O:0.999918
the	O	O:0.999999
median	O	B-API:0.500541
somehow	O	O:0.999904
?	O	O:0.999985
	
and	O	O:0.999980
apply	O	O:0.887950
a	O	O:0.999505
function	O	O:0.998458
to	O	O:0.999989
the	O	O:0.999999
groups	O	O:0.997774
.	O	O:0.999870
	
Ex	O	O:0.999414
.	O	O:0.999755
	
1	O	O:0.999527
Find	O	O:0.999845
the	O	O:0.999986
number	O	O:0.999770
of	O	O:0.999978
trips	O	O:0.999943
each	O	O:0.999948
team	O	O:0.999866
went	O	O:0.999722
on	O	O:0.999974
.	O	O:0.999915
	
`	O	O:0.999980
team	O	O:0.997433
`	O	O:0.999985
is	O	O:0.999926
the	O	O:0.999946
grouper	B-API	B-API:0.799179
,	O	O:0.999946
and	O	O:0.999995
we	O	O:0.999993
apply	O	B-API:0.566482
the	O	O:0.999582
function	O	O:0.999180
`	O	O:0.999964
count()	B-API	B-API:0.782678
`	O	O:0.999997
on	O	O:0.999959
column	O	O:0.999942
`	O	O:0.999986
[	O	O:0.999555
'	O	O:0.999990
trips	O	O:0.999622
']`	O	O:0.999779
.	O	O:0.999140
	
#CODE	O	O:0.998453
	
Ex	O	O:0.999414
.	O	O:0.999755
	
2	O	O:0.996372
(	O	O:0.999992
multiple	O	O:0.999976
columns	O	O:0.999700
)	O	O:0.999961
:	O	O:0.999953
Find	O	O:0.999861
the	O	O:0.999988
total	O	O:0.999529
time	O	O:0.999987
each	O	O:0.999901
player	O	O:0.999971
on	O	O:0.999996
a	O	O:0.999998
team	O	O:0.999858
spent	O	O:0.999843
traveling	O	O:0.999264
.	O	O:0.999777
	
We	O	O:0.999973
use	O	O:0.999898
2	O	O:0.999942
columns	O	O:0.999076
`	O	O:0.999961
[	O	O:0.999748
'	O	O:0.999996
team	O	O:0.999621
'	O	O:0.999982
,	O	O:0.999986
'	O	O:0.999983
player	O	O:0.999973
']`	O	O:0.999962
as	O	O:0.999973
the	O	O:0.999818
grouper	B-API	B-API:0.734621
,	O	O:0.999958
and	O	O:0.999991
apply	O	O:0.704101
the	O	O:0.998201
function	O	O:0.999437
`	O	O:0.999932
sum()	B-API	B-API:0.764172
`	O	O:0.999996
on	O	O:0.999963
column	O	O:0.999942
`	O	O:0.999986
[	O	O:0.999640
'	O	O:0.999995
time	O	O:0.999912
']`	O	O:0.999815
.	O	O:0.999773
	
#CODE	O	O:0.998453
	
IIUC	O	O:0.998940
you	O	O:0.999975
need	O	O:0.999960
groupby	B-API	B-API:0.672696
by	O	O:0.999895
`	O	O:0.999907
Feed	O	O:0.987204
`	O	O:0.999982
from	O	O:0.998894
multiindex	O	O:0.999923
and	O	O:0.999995
apply	O	B-API:0.559905
`	O	O:0.999055
pct_change	B-API	B-API:0.999979
`	O	O:0.999944
.	O	O:0.999106
	
Then	O	O:0.999809
you	O	O:0.999997
can	O	O:0.999992
use	O	O:1.000000
subset	O	O:0.999361
of	O	O:0.999971
`	O	O:0.999958
df3	O	O:0.997258
`	O	O:0.999994
,	O	O:0.999985
where	O	O:0.999991
column	O	O:0.999441
`	O	O:0.999998
Rate_Return	O	O:0.979004
`	O	O:0.999981
is	O	O:0.999560
`	O	O:0.999984
notnull	O	B-API:0.998612
`	O	O:0.999975
#CODE	O	O:0.997276
	
We	O	O:0.999983
get	O	O:0.999941
3	O	O:0.999993
rows	O	O:0.999659
but	O	O:0.999997
only	O	O:0.999973
2	O	O:0.999992
columns	O	O:0.999674
.	O	O:0.999898
	
In	O	O:0.999943
the	O	O:0.999990
docs	O	O:0.999798
I	O	O:0.999994
find	O	O:0.999983
that	O	O:0.999977
different	O	O:0.999988
from	O	O:0.999953
standard	O	O:0.999707
python	O	O:0.999861
,	O	O:0.999994
label	O	O:0.999842
based	O	O:0.999713
slicing	O	O:0.999191
in	O	O:0.999963
pandas	O	O:0.998670
is	O	O:0.999982
inclusive	O	O:0.994149
.	O	O:0.999851
	
Does	O	O:0.999876
this	O	O:0.999915
apply	O	O:0.742554
here	O	O:0.994368
and	O	O:0.999728
is	O	O:0.999987
it	O	O:0.999901
inclusive	O	O:0.999913
for	O	O:0.999986
rows	O	O:0.987087
but	O	O:0.999944
not	O	O:0.999993
for	O	O:0.999999
columns	O	O:0.999946
then	O	O:0.999501
?	O	O:0.999998
	
Here	O	O:0.999681
,	O	O:0.999992
I	O	O:0.999975
am	O	O:0.999998
grouping	O	O:0.999760
by	O	O:0.999908
`	O	O:0.999918
id	O	O:0.983777
`	O	O:0.999986
and	O	O:0.999913
for	O	O:0.999997
each	O	O:0.994852
`	O	O:0.999920
id	O	O:0.997991
`	O	O:0.999992
,	O	O:0.999980
the	O	O:0.999996
df	O	O:0.997660
is	O	O:0.999989
sorted	O	O:0.999850
by	O	O:0.999935
`	O	O:0.999988
time	O	O:0.992562
`	O	O:0.999989
.	O	O:0.999675
	
Now	O	O:0.999938
,	O	O:0.999994
I	O	O:0.999999
want	O	O:0.999984
to	O	O:0.999943
replace	O	O:0.999970
the	O	O:0.999994
values	O	O:0.999512
in	O	O:0.999967
`	O	O:0.999999
a	O	O:0.999840
`	O	O:0.999949
and	O	O:0.999726
`	O	O:0.999997
b	O	O:0.997670
`	O	O:0.999997
by	O	O:0.999856
the	O	O:0.999995
maximum	O	O:0.999451
value	O	O:0.999965
seen	O	O:0.999942
thus	O	O:0.999916
far	O	O:0.999935
.	O	O:0.999884
	
I	O	O:0.999989
guess	O	O:0.999942
I	O	O:0.999972
can	O	O:0.999991
apply	O	O:0.944526
a	O	O:0.999979
rolling	O	O:0.826641
max	O	O:0.640722
on	O	O:0.999963
each	O	O:0.999691
group	O	O:0.998697
but	O	O:0.999880
is	O	O:0.999994
there	O	O:0.999975
a	O	O:0.999992
better	O	O:0.999194
way	O	O:0.999972
to	O	O:0.999965
do	O	O:0.999999
this	O	O:0.999912
?	O	O:0.999968
	
You	O	O:0.999855
can	O	O:0.999924
`	O	O:0.999999
apply	O	B-API:0.951577
`	O	O:0.999977
custom	O	O:0.918970
function	O	O:0.999949
,	O	O:0.999991
where	O	O:0.999899
find	O	O:0.999901
index	O	O:0.999991
of	O	O:0.999998
first	O	O:0.999898
1	O	O:0.999993
by	O	O:0.999776
`	O	O:0.999910
idxmax	B-API	B-API:0.999670
`	O	O:0.999987
and	O	O:0.999993
set	O	O:0.999998
rows	O	O:0.999483
to	O	O:0.999990
the	O	O:1.000000
end	O	O:0.999950
of	O	O:0.999996
group	O	O:0.998824
to	O	O:0.999995
`	O	O:0.999998
1	O	O:0.994928
`	O	O:0.999957
:	O	O:0.999853
#CODE	O	O:0.999910
	
My	O	O:0.999873
knowledge	O	O:0.999337
isn't	O	O:0.999962
that	O	O:0.999983
great	O	O:0.999929
of	O	O:0.999985
Pandas	O	O:0.997732
(	O	O:0.999989
yet	O	O:0.999670
)	O	O:0.999950
,	O	O:0.999920
but	O	O:0.999949
I'm	O	O:0.999958
guessing	O	O:0.999887
it's	O	O:0.999879
an	O	O:0.999973
"	O	O:0.999991
apply	O	B-API:0.720824
"	O	O:0.999911
or	O	O:0.999960
an	O	O:0.999937
agg()	B-API	B-API:0.999140
function	O	O:0.999570
but	O	O:0.999978
so	O	O:0.999987
far	O	O:0.999934
,	O	O:0.999996
syntactically	O	O:0.999136
,	O	O:0.999981
I'm	O	O:0.999974
banging	O	O:0.999824
my	O	O:0.999981
head	O	O:0.999927
from	O	O:0.999944
the	O	O:0.999952
syntax	O	O:0.999893
errors	O	O:0.998776
,	O	O:0.999994
but	O	O:0.999990
I	O	O:0.999990
appreciate	O	O:0.999992
any	O	O:0.999943
pointers	O	O:0.999300
in	O	O:0.999977
the	O	O:0.999992
right	O	O:0.999718
direction	O	O:0.997915
.	O	O:0.999985
..	O	O:0.999857
	
JW	O	O:0.998840
	
But	O	O:0.999960
this	O	O:0.999897
takes	O	O:0.999936
quite	O	O:0.999989
a	O	O:0.999997
while	O	O:0.999834
given	O	O:0.999351
the	O	O:0.999996
time	O	O:0.999916
complexity	O	O:0.999878
,	O	O:0.999998
running	O	O:0.999680
at	O	O:0.999878
around	O	O:0.999769
20s	O	O:0.999180
for	O	O:0.999860
500	O	O:0.999080
points	O	O:0.997942
and	O	O:0.999986
I	O	O:0.999999
have	O	O:0.999975
a	O	O:0.999984
much	O	O:0.994199
longer	O	O:0.999943
list	O	O:0.996253
.	O	O:0.999916
	
This	O	O:0.999661
has	O	O:0.999959
me	O	O:0.999991
looking	O	O:0.999750
at	O	O:0.999969
vectorization	O	O:0.999529
,	O	O:0.999943
and	O	O:0.999983
I've	O	O:0.999931
come	O	O:0.999346
across	O	O:0.999736
`	O	O:0.999927
numpy.vectorize	B-API	B-API:0.997874
`	O	O:0.999778
(	O	O:0.998662
(	O	O:0.999995
docs	O	O:0.999717
)	O	O:0.999953
,	O	O:0.999963
but	O	O:0.999968
can't	O	O:0.999881
figure	O	O:0.999914
out	O	O:0.999971
how	O	O:0.999975
to	O	O:0.999990
apply	O	O:0.988482
it	O	O:0.999768
in	O	O:0.999990
this	O	O:0.999869
context	O	O:0.999575
.	O	O:0.999920
	
Thanks	O	O:0.997861
.	O	O:0.999761
	
It	O	O:0.999934
doesn	O	O:0.999807
t	B-API	O:0.986355
work	O	O:0.999757
.	O	O:0.999952
	
The	O	O:0.999970
format	O	O:0.999863
of	O	O:0.999998
the	O	O:0.999983
date	O	O:0.997076
is	O	O:0.999918
"	O	O:0.999964
2015-12-01	O	O:0.995848
00:00	O	O:0.997406
:	O	O:0.999904
00-06	O	O:0.997758
:	O	O:0.999971
00	O	O:0.999913
"	O	O:0.999969
.	O	O:0.999554
	
I	O	O:0.999979
used	O	O:0.999881
"	O	O:0.999717
to_datetime	B-API	B-API:0.981767
"	O	O:0.999984
to	O	O:0.999973
convert	O	O:0.999886
the	O	O:0.999999
original	O	O:0.999684
date	O	O:0.999667
format	O	O:0.999947
to	O	O:0.999998
a	O	O:0.999999
datetime	O	O:0.985812
object	O	O:0.999887
,	O	O:0.999982
in	O	O:0.999996
order	O	O:0.999910
to	O	O:0.999996
apply	O	O:0.932366
"	O	O:0.999844
tz_localize	B-API	B-API:0.998431
"	O	O:0.999982
to	O	O:0.999981
convert	O	O:0.999952
to	O	O:0.999996
another	O	O:0.999994
time	O	O:0.999949
zone	O	O:0.999723
.	O	O:0.999943
	
It	O	O:0.999956
seems	O	O:0.999339
tz_localize	B-API	B-API:0.966976
adds	O	O:0.999673
that	O	O:0.999634
offset	O	O:0.999884
and	O	O:0.999994
I	O	O:0.999996
have	O	O:0.999820
not	O	O:0.999888
found	O	O:0.999938
how	O	O:0.999985
to	O	O:0.999980
get	O	O:0.999999
rid	O	O:0.999976
of	O	O:0.999986
it	O	O:0.999933
.	O	O:0.999967
	
I	O	O:0.999840
am	O	O:0.999994
not	O	O:0.999955
exactly	O	O:0.999993
sure	O	O:0.999915
how	O	O:0.999989
to	O	O:0.999995
go	O	O:0.999999
about	O	O:0.999981
this	O	O:0.999655
.	O	O:0.999891
	
One	O	O:0.999938
of	O	O:0.999984
the	O	O:0.999965
ideas	O	O:0.999349
is	O	O:0.999948
use	O	O:0.999483
itterrows()	O	O:0.690461
and	O	O:0.999959
apply	O	O:0.739215
harvesine()	O	O:0.776159
function	O	O:0.999706
,	O	O:0.999998
if	O	O:0.999999
rows	O	O:0.998357
'	O	O:0.999983
sequence	O	O:0.999958
'	O	O:0.999973
parameter	O	O:0.999031
is	O	O:0.999989
not	O	O:0.999885
0	O	O:0.999947
and	O	O:0.999987
row's	O	O:0.998394
'	O	O:0.999790
track_id	O	O:0.995839
'	O	O:0.999887
is	O	O:0.999994
equal	O	O:0.999275
to	O	O:0.999996
previous	O	O:0.999987
row's	O	O:0.999436
'	O	O:0.999958
track_id	O	O:0.995950
'	O	O:0.999903
	
[	O	O:0.999904
EDIT	O	O:0.999867
]	O	O:0.999959
I	O	O:0.999868
figured	O	O:0.999950
there	O	O:0.998401
is	O	O:0.999989
no	O	O:0.999988
need	O	O:0.999960
to	O	O:0.999998
check	O	O:0.999996
if	O	O:0.999973
'	O	O:0.999976
track_id	O	O:0.998196
'	O	O:0.999993
of	O	O:0.999965
row	O	O:0.999599
and	O	O:0.999999
previous	O	O:0.999856
row	O	O:0.998849
is	O	O:0.999982
the	O	O:0.999989
same	O	O:0.999937
,	O	O:0.999995
since	O	O:0.999974
the	O	O:0.999991
haversine()	O	O:0.993522
function	O	O:0.999848
is	O	O:0.999995
applied	O	O:0.999697
to	O	O:0.999995
two	O	O:1.000000
rows	O	O:0.999952
only	O	O:0.999907
,	O	O:0.999999
and	O	O:0.999996
when	O	O:0.999758
sequence	O	O:0.999963
=	O	O:0.999971
0	O	O:0.999930
,	O	O:0.999996
that	O	O:0.999917
row's	O	O:0.999954
distance	O	O:0.999945
==	O	O:0.999969
0	O	O:0.999951
,	O	O:0.999974
which	O	O:0.999884
means	O	O:0.999962
that	O	O:0.999979
the	O	O:0.999983
track_id	O	O:0.994019
has	O	O:0.999854
changed	O	O:0.998275
.	O	O:0.999887
	
So	O	O:0.999935
,	O	O:0.999997
basically	O	O:0.999964
,	O	O:0.999996
apply	O	O:0.799058
haversine()	O	O:0.962523
function	O	O:0.999855
to	O	O:0.999999
all	O	O:1.000000
rows	O	O:0.999887
whose	O	O:0.998973
'	O	O:0.999990
sequence	O	O:0.999811
'	O	O:0.999916
!	O	O:0.999950
	
=	O	O:0.999663
0	O	O:0.999941
,	O	O:0.999969
ie	O	O:0.999972
haversine	O	O:0.973405
(	O	O:0.999990
previous_row.lng	O	O:0.994188
,	O	O:0.999989
previous_row.lat	O	O:0.996497
,	O	O:0.999994
current_row.lng	O	O:0.997070
,	O	O:0.999994
current_row.lat	O	O:0.995432
)	O	O:0.999979
.	O	O:0.999842
	
Still	O	O:0.999869
need	O	O:0.999968
help	O	O:0.999750
with	O	O:0.999993
that	O	O:0.999858
though	O	O:0.999949
	
I	O	O:0.999994
normally	O	O:0.999994
populate	O	O:0.999821
new	O	O:0.999985
columns	O	O:0.999966
using	O	O:0.999865
"	O	O:0.999927
apply	O	B-API:0.940222
,	O	O:0.999917
axis	O	O:0.999617
=	O	O:0.999827
1	O	O:0.999938
"	O	O:0.999993
so	O	O:0.999962
I	O	O:0.999985
would	O	O:0.999993
really	O	O:0.999751
appreciate	O	O:0.999992
any	O	O:0.999926
solution	O	O:0.999928
based	O	O:0.999534
on	O	O:0.999990
that	O	O:0.999702
.	O	O:0.999988
	
I	O	O:0.999918
found	O	O:0.999945
that	O	O:0.999271
"	O	O:0.999996
apply	O	B-API:0.828226
"	O	O:0.999530
works	O	O:0.999574
fine	O	O:0.999956
when	O	O:0.999756
for	O	O:0.999999
each	O	O:0.999830
row	O	O:0.999821
,	O	O:0.999983
computation	O	O:0.999147
is	O	O:0.999996
done	O	O:0.999852
across	O	O:0.999978
columns	O	O:0.999984
using	O	O:0.999985
values	O	O:0.998952
at	O	O:0.999961
the	O	O:0.999997
same	O	O:0.999911
row	O	O:0.999960
level	O	O:0.999412
.	O	O:0.999925
	
However	O	O:0.999854
,	O	O:0.999988
I	O	O:0.999993
don't	O	O:0.999973
know	O	O:0.999676
how	O	O:0.999994
an	O	O:0.999968
"	O	O:0.999995
apply	O	B-API:0.788332
"	O	O:0.999632
function	O	O:0.999124
can	O	O:0.999911
involve	O	O:0.999998
different	O	O:0.999991
rows	O	O:0.999385
,	O	O:0.999990
which	O	O:0.999827
is	O	O:0.999984
what	O	O:0.999971
this	O	O:0.999961
problem	O	O:0.999928
requires	O	O:0.999131
.	O	O:0.999980
the	O	O:0.999997
only	O	O:0.999931
exception	O	O:0.999949
I	O	O:0.999999
have	O	O:0.999993
seen	O	O:0.999336
so	O	O:0.999995
far	O	O:0.999727
is	O	O:0.999975
"	O	O:0.999983
diff	O	B-API:0.952797
"	O	O:0.999967
,	O	O:0.999919
which	O	O:0.998437
is	O	O:0.999969
not	O	O:0.999949
useful	O	O:0.999869
here	O	O:0.998985
.	O	O:0.999768
	
@USER	O	O:0.998139
:	O	O:0.999974
using	O	O:0.999907
min_period	O	O:0.996982
to	O	O:0.999977
fill	O	O:0.999793
in	O	O:0.999971
NaN	O	O:0.990203
is	O	O:0.999994
good	O	O:0.998702
if	O	O:0.999989
e.g.	O	O:0.999717
one	O	O:0.999970
wants	O	O:0.999962
to	O	O:0.999991
remove	O	O:0.999961
seasonality	O	O:0.999708
in	O	O:0.999992
data	O	O:0.999854
.	O	O:0.999947
	
I	O	O:0.999969
,	O	O:0.999997
however	O	O:0.999565
,	O	O:0.999999
want	O	O:0.999987
to	O	O:0.999975
use	O	O:0.999999
the	O	O:0.999938
rolling	O	O:0.988646
mean	O	O:0.999766
to	O	O:0.999998
create	O	O:0.999997
a	O	O:0.999998
feature	O	O:0.999945
to	O	O:0.999995
feed	O	O:0.999985
into	O	O:0.999946
a	O	O:0.999987
ML	O	O:0.998968
model	O	O:0.999170
.	O	O:0.999800
	
I	O	O:0.999967
can't	O	O:0.999935
use	O	O:0.999767
rolling_mean	B-API	B-API:0.999273
for	O	O:0.999852
store-dates	O	O:0.996437
not	O	O:0.999849
in	O	O:0.999993
the	O	O:0.999987
initial	O	O:0.999345
dataset	O	O:0.999950
,	O	O:0.999944
which	O	O:0.999879
min_period	O	O:0.999153
does	O	O:0.999563
.	O	O:0.999974
	
Therefore	O	O:0.999881
,	O	O:0.999993
I	O	O:0.999998
loop	O	O:0.999974
over	O	O:0.998350
the	O	O:0.999917
1115	O	O:0.998265
stores	O	O:0.998222
and	O	O:0.999994
apply	O	O:0.971833
your	O	O:0.993433
solution	O	O:0.990145
(	O	O:0.999977
without	O	O:0.999886
min_periods	O	O:0.954520
)	O	O:0.999974
,	O	O:0.999963
which	O	O:0.999646
is	O	O:0.999986
still	O	O:0.999903
much	O	O:0.999846
faster	O	O:0.999902
than	O	O:0.999650
my	O	O:0.999973
initial	O	O:0.999293
attempt	O	O:0.999281
.	O	O:0.999774
	
Thanks	O	O:0.999116
for	O	O:0.999996
your	O	O:0.999714
help	O	O:0.993232
	
I	O	O:0.999992
have	O	O:0.999998
a	O	O:0.999997
data	O	O:0.999974
frame	O	O:0.999991
in	O	O:0.999997
pandas	O	O:0.999568
which	O	O:0.999968
includes	O	O:0.999868
number	O	O:0.999978
of	O	O:0.999989
days	O	O:0.999941
since	O	O:0.999982
an	O	O:0.999971
event	O	O:0.999905
occurred	O	O:0.999376
.	O	O:0.999880
	
I	O	O:0.999988
want	O	O:0.999985
to	O	O:0.999982
create	O	O:0.999998
a	O	O:0.999999
new	O	O:0.999940
column	O	O:0.999973
that	O	O:0.999919
calculates	O	O:0.999984
the	O	O:0.999999
date	O	O:0.999329
of	O	O:0.999988
the	O	O:0.999985
event	O	O:0.999985
by	O	O:0.999985
subtracting	O	O:0.999906
the	O	O:0.999965
number	O	O:0.999974
of	O	O:0.999996
days	O	O:0.999970
from	O	O:0.999993
the	O	O:0.999998
current	O	O:0.999684
date	O	O:0.997990
.	O	O:0.999883
	
Every	O	O:0.999929
time	O	O:0.999935
I	O	O:0.999994
attempt	O	O:0.999970
to	O	O:0.999970
apply	O	O:0.917688
`	O	O:0.999917
pd.offsets.Day	O	O:0.624590
`	O	O:0.999995
or	O	O:0.999732
`	O	O:0.999991
pd.Timedelta	O	O:0.717780
`	O	O:0.999995
I	O	O:0.999986
get	O	O:0.999997
an	O	O:0.999932
error	O	O:0.999797
stating	O	O:0.999005
that	O	O:0.999551
Series	O	O:0.999924
are	O	O:0.999990
an	O	O:0.999948
unsupported	O	O:0.999776
type	O	O:0.996965
.	O	O:0.999825
	
This	O	O:0.999814
also	O	O:0.999902
occurs	O	O:0.999996
when	O	O:0.999806
I	O	O:0.999995
use	O	O:0.999993
`	O	O:0.999585
apply	O	B-API:0.995743
`	O	O:0.999826
.	O	O:0.997625
	
When	O	O:0.999750
I	O	O:0.999994
use	O	O:0.999987
`	O	O:0.999141
map	O	B-API:0.992692
`	O	O:0.999993
I	O	O:0.999973
receive	O	O:0.999980
a	O	O:0.999956
runtime	O	O:0.998971
error	O	O:0.999742
saying	O	O:0.999478
"	O	O:0.999980
maximum	O	O:0.999410
recursion	O	O:0.999865
depth	O	O:0.999958
exceeded	O	O:0.999773
while	O	O:0.999979
calling	O	O:0.999668
a	O	O:0.999974
Python	O	O:0.991492
object	O	O:0.999663
"	O	O:0.999915
.	O	O:0.999734
	
What	O	O:0.999125
is	O	O:0.999997
a	O	O:0.999992
proper	O	O:0.999303
idiom	O	O:0.999284
in	O	O:0.999987
pandas	O	O:0.999833
for	O	O:0.999997
creating	O	O:0.999850
a	O	O:0.999993
dataframes	O	O:0.999652
from	O	O:0.999962
the	O	O:0.999994
output	O	O:0.999940
of	O	O:0.999997
a	O	O:0.999987
apply	O	B-API:0.741585
function	O	O:0.999770
on	O	O:0.999992
a	O	O:0.999996
df	O	O:0.999169
?	O	O:0.999942
	
One	O	O:0.999940
of	O	O:0.999992
the	O	O:0.999981
operations	O	O:0.999909
I	O	O:0.999995
need	O	O:0.999990
to	O	O:0.999977
conduct	O	O:0.999805
is	O	O:0.999993
grabbing	O	O:0.998997
the	O	O:0.999959
latest	O	O:0.999909
feed	O	O:0.999541
entries	O	O:0.999653
---	O	O:0.999981
the	O	O:0.999994
feed	O	O:0.999333
urls	O	O:0.999891
exist	O	O:0.999912
in	O	O:0.999999
a	O	O:0.999998
column	O	O:0.999767
in	O	O:0.999999
a	O	O:0.999999
data	O	O:0.999892
frame	O	O:0.999989
.	O	O:0.999942
	
Once	O	O:0.999636
I've	O	O:0.999900
done	O	O:0.999943
the	O	O:0.999988
apply	O	B-API:0.655856
I	O	O:0.999950
get	O	O:0.999921
feed	O	O:0.999465
objects	O	O:0.999885
back	O	O:0.994173
:	O	O:0.999973
#CODE	O	O:0.999796
	
So	O	O:0.999970
,	O	O:0.999991
now	O	O:0.999974
I'm	O	O:0.999990
stuck	O	O:0.999800
with	O	O:0.999980
the	O	O:0.999999
feed	O	O:0.999894
entries	O	O:0.999696
in	O	O:0.999994
the	O	O:0.999997
"	O	O:0.999996
entries	O	O:0.998329
"	O	O:0.999992
column	O	O:0.999880
,	O	O:0.999994
I'd	O	O:0.999997
like	O	O:0.999978
to	O	O:0.999999
create	O	O:0.999994
a	O	O:0.999999
two	O	O:0.999992
new	O	O:0.999995
data	O	O:0.999969
frames	O	O:0.999685
in	O	O:0.999997
one	O	O:0.999882
apply	O	B-API:0.652242
method	O	O:0.999523
,	O	O:0.999957
and	O	O:0.999995
concatenate	O	O:0.621305
the	O	O:0.999940
two	O	O:0.999953
frames	O	O:0.999419
immediately	O	O:0.999643
.	O	O:0.999933
	
But	O	O:0.999404
I'm	O	O:0.999952
not	O	O:0.999990
sure	O	O:0.999859
how	O	O:0.999994
this	O	O:0.999936
will	O	O:0.999988
help	O	O:0.999835
me	O	O:0.999968
.	O	O:0.999863
	
I	O	O:0.999955
took	O	O:0.999960
a	O	O:0.999992
look	O	O:0.998818
at	O	O:0.999987
the	O	O:0.999983
pandas	O	O:0.999113
Dataframe.to_dict()	B-API	B-API:0.860423
but	O	O:0.999934
I	O	O:0.999993
don't	O	O:0.999976
think	O	O:0.999847
the	O	O:0.999994
above	O	O:0.999714
code	O	O:0.999812
reads	O	O:0.999942
into	O	O:0.999881
a	O	O:0.999985
dataframe	B-API	O:0.952062
(	O	O:0.999976
or	O	O:0.999991
,	O	O:0.999989
if	O	O:0.999991
it	O	O:0.999994
does	O	O:0.999937
,	O	O:0.999998
I	O	O:0.999995
don't	O	O:0.999927
understand	O	O:0.999658
the	O	O:0.999973
documentation	O	O:0.999630
well	O	O:0.999884
enough	O	O:0.999810
)	O	O:0.999964
.	O	O:0.999522
	
It	O	O:0.999933
looks	O	O:0.999896
like	O	O:0.999864
it'll	O	O:0.999974
only	O	O:0.999977
store	O	O:0.999825
one	O	O:0.999992
value	O	O:0.999936
per	O	O:0.999964
key	O	O:0.999977
at	O	O:0.999996
a	O	O:0.999989
time	O	O:0.999154
.	O	O:0.999905
	
Another	O	O:0.999354
thread	O	O:0.999632
I	O	O:0.999928
was	O	O:0.999900
reading	O	O:0.996939
says	O	O:0.999064
it's	O	O:0.999965
possible	O	O:0.999919
to	O	O:0.999996
store	O	O:0.999974
more	O	O:0.999935
than	O	O:0.999965
one	O	O:0.999997
value	O	O:0.999954
per	O	O:0.999920
key	O	O:0.999958
,	O	O:0.999985
though	O	O:0.999233
(	O	O:0.999996
using	O	O:0.999934
.append()	B-API	B-API:0.999715
)	O	O:0.999822
but	O	O:0.999915
I	O	O:0.999984
don't	O	O:0.999976
know	O	O:0.999185
how	O	O:0.999985
to	O	O:0.999983
apply	O	O:0.986072
it	O	O:0.999879
to	O	O:0.999996
this	O	O:0.999995
situation	O	O:0.999744
.	O	O:0.999944
	
Pandas	O	O:0.998561
:	O	O:0.999963
apply	O	B-API:0.535962
returns	O	O:0.998481
list	O	O:0.983641
	
I	O	O:0.999988
have	O	O:0.999977
the	O	O:0.999978
following	O	O:0.998497
function	O	O:0.999983
that	O	O:0.999935
I	O	O:1.000000
want	O	O:0.999991
to	O	O:0.999957
apply	O	O:0.979702
to	O	O:0.999961
each	O	O:0.999918
group	O	O:0.992466
:	O	O:0.999978
#CODE	O	O:0.999795
	
How	O	O:0.999948
do	O	O:0.999955
I	O	O:0.999998
make	O	O:0.999989
the	O	O:0.999980
results	O	O:0.999937
of	O	O:0.999995
the	O	O:0.999994
apply	O	O:0.624044
operation	O	O:0.999799
the	O	O:0.999993
values	O	O:0.999840
of	O	O:0.999991
the	O	O:0.999957
"	O	O:0.999995
mean_to_date	O	O:0.975580
"	O	O:0.999982
column	O	O:0.999630
?	O	O:0.999957
	
That	O	O:0.999107
is	O	O:0.999982
,	O	O:0.999981
the	O	O:0.999993
mean_to_date	O	O:0.988103
for	O	O:0.999962
player	O	O:0.999698
200	O	O:0.999622
,	O	O:0.999961
season	O	O:0.998715
21999	O	O:0.998636
would	O	O:0.999971
be	O	O:0.999990
0	O	O:0.999975
and	O	O:0.999926
10	O	O:0.999820
,	O	O:0.999990
then	O	O:0.999830
for	O	O:0.999997
player	O	O:0.999798
200	O	O:0.999539
,	O	O:0.999958
season	O	O:0.997795
21200	O	O:0.999275
it	O	O:0.999960
would	O	O:0.999992
be	O	O:0.999996
0	O	O:0.999988
,	O	O:0.999936
10	O	O:0.999441
,	O	O:0.999929
and	O	O:0.999978
15	O	O:0.999794
,	O	O:0.999888
and	O	O:0.999997
so	O	O:0.999983
forth	O	O:0.997749
.	O	O:0.999913
	
Note	O	O:0.999942
that	O	O:0.999911
the	O	O:0.999999
mean_to_date	O	O:0.997379
value	O	O:0.999919
represents	O	O:0.999795
the	O	O:0.999999
mean	O	O:0.999977
prior	O	O:0.999885
to	O	O:0.999996
the	O	O:0.999999
game	O	O:0.999951
,	O	O:0.999996
so	O	O:0.999991
before	O	O:0.999820
the	O	O:0.999965
1st	O	O:0.999689
game	O	O:0.999929
it	O	O:0.999943
is	O	O:0.999996
zero	O	O:0.998372
,	O	O:0.999985
and	O	O:0.999969
before	O	O:0.999758
the	O	O:0.999740
second	O	O:0.999493
game	O	O:0.999947
it	O	O:0.999941
is	O	O:0.999997
the	O	O:0.999993
total	O	O:0.999762
from	O	O:0.999927
the	O	O:0.999976
first	O	O:0.999866
game	O	O:0.999798
.	O	O:0.999863
	
you're	O	O:0.999781
getting	O	O:0.999917
lists	O	O:0.999867
back	O	O:0.999524
because	O	O:0.999997
your	O	O:0.999556
function	O	O:0.999933
`	O	O:0.999997
previous_mean	O	O:0.963817
`	O	O:0.999997
,	O	O:0.999992
when	O	O:0.999952
fed	O	O:0.999971
a	O	O:0.999998
dataframe	B-API	O:0.990799
,	O	O:0.999992
returns	O	O:0.999778
a	O	O:0.999977
list	O	O:0.985151
--	O	O:0.999978
it	O	O:0.999890
has	O	O:0.999995
nothing	O	O:0.999885
to	O	O:0.999985
do	O	O:0.999999
with	O	O:0.999933
`	O	O:0.999978
apply	O	B-API:0.968843
`	O	O:0.999873
.	O	O:0.998179
	
You	O	O:0.999971
said	O	O:0.999938
in	O	O:0.999998
another	O	O:0.999849
comment	O	O:0.999938
that	O	O:0.999932
you	O	O:0.999997
want	O	O:0.999987
one	O	O:0.999997
mean	O	O:0.999958
per	O	O:0.999982
row	O	O:0.999953
,	O	O:0.999997
therefore	O	O:0.999988
the	O	O:0.999970
function	O	O:0.999959
you	O	O:0.999966
apply	O	O:0.754542
should	O	O:0.999885
return	O	O:0.999728
a	O	O:0.999998
single	O	O:0.998965
value	O	O:0.999840
.	O	O:0.999775
	
Apply	O	O:0.999765
the	O	O:0.999835
function	O	O:0.999781
to	O	O:0.999991
the	O	O:0.999999
groups	O	O:0.992923
:	O	O:0.999958
#CODE	O	O:0.999925
	
How	O	O:0.999898
to	O	O:0.999992
apply	O	O:0.993282
a	O	O:0.999556
function	O	O:0.986308
(	O	O:0.999992
BigramCollocationFinder	O	O:0.999766
)	O	O:0.999977
to	O	O:0.999919
Pandas	O	O:0.999990
DataFrame	B-API	O:0.984980
	
I	O	O:0.999988
want	O	O:0.999970
to	O	O:0.999863
adapt	O	O:0.999997
this	O	O:0.999705
function	O	O:0.999969
to	O	O:0.999993
my	O	O:0.999996
Pandas	O	O:0.999627
Dataframe	B-API	O:0.978777
.	O	O:0.999730
	
I	O	O:0.999976
am	O	O:0.999999
aware	O	O:0.999628
of	O	O:0.999992
the	O	O:0.999938
apply	O	B-API:0.729980
function	O	O:0.998459
for	O	O:0.999911
Pandas	O	O:0.999782
Dataframes	O	O:0.997415
,	O	O:0.999915
but	O	O:0.999947
can't	O	O:0.999810
manage	O	O:0.999976
to	O	O:0.999989
get	O	O:0.999996
it	O	O:0.999994
work	O	O:0.999873
.	O	O:0.999978
	
If	O	O:0.999957
you	O	O:0.999988
want	O	O:0.999984
to	O	O:0.999996
apply	O	O:0.953891
`	O	O:0.999970
BigramCollocationFinder.from_words()	O	O:0.741796
`	O	O:0.999997
to	O	O:0.999980
each	O	O:0.999991
`	O	O:0.999995
value	O	O:0.999679
`	O	O:0.999994
in	O	O:0.999969
the	O	O:0.999978
`	O	O:0.999981
Body	O	O:0.995260
`	O	O:0.999990
`	O	O:0.999973
column	O	O:0.999803
,	O	O:0.999998
you'd	O	O:0.999982
have	O	O:0.999951
to	O	O:0.999993
do	O	O:0.999987
:	O	O:0.999976
#CODE	O	O:0.999772
	
In	O	O:0.999913
essence	O	O:0.999768
,	O	O:0.999986
`	O	O:0.999991
apply	O	B-API:0.985794
`	O	O:0.999970
allows	O	O:0.998399
you	O	O:0.999985
to	O	O:0.999996
loop	O	O:0.999998
through	O	O:0.999904
the	O	O:0.999989
`	O	O:0.999998
rows	O	O:0.987785
`	O	O:0.999993
and	O	O:0.999992
provide	O	O:0.999860
the	O	O:0.999960
corresponding	O	O:0.997683
`	O	O:0.999988
value	O	O:0.999677
`	O	O:0.999998
of	O	O:0.999978
the	O	O:0.999950
`	O	O:0.999990
Body	O	O:0.995033
`	O	O:0.999990
`	O	O:0.999982
column	O	O:0.999475
`	O	O:0.999997
to	O	O:0.999977
the	O	O:1.000000
applied	O	O:0.996861
function	O	O:0.999639
.	O	O:0.999881
	
`	O	O:0.999951
Apply	O	O:0.996216
`	O	O:0.999967
function	O	O:0.999935
over	O	O:0.999984
rows	O	O:0.999379
and	O	O:0.999992
put	O	O:0.999984
the	O	O:0.999963
result	O	O:0.999862
in	O	O:0.999997
a	O	O:0.999998
new	O	O:0.999829
column	O	O:0.999621
.	O	O:0.999888
	
#CODE	O	O:0.998453
	
You	O	O:0.999831
could	O	O:0.999970
also	O	O:0.999991
do	O	O:0.999986
apply	O	B-API:0.915340
:	O	O:0.999344
#CODE	O	O:0.999252
	
For	O	O:0.999985
my	O	O:0.999996
data	O	O:0.999952
set	O	O:0.999448
(	O	O:0.999992
with	O	O:0.999990
tens	O	O:0.999837
of	O	O:0.999999
thousands	O	O:0.999988
of	O	O:1.000000
rows	O	O:0.999452
)	O	O:0.999990
,	O	O:0.999999
this	O	O:0.999751
is	O	O:0.999992
somewhat	O	O:0.999653
slow	O	O:0.999602
,	O	O:0.999988
and	O	O:0.999986
I	O	O:0.999981
understand	O	O:0.999915
that	O	O:0.999468
loops	O	O:0.999784
should	O	O:0.999967
be	O	O:0.999996
avoided	O	O:0.999983
when	O	O:0.999742
possible	O	O:0.999968
when	O	O:0.999969
using	O	O:0.999988
pandas	O	O:0.999860
dataframes	O	O:0.997379
.	O	O:0.999644
	
I	O	O:0.999980
feel	O	O:0.999924
like	O	O:0.999532
the	O	O:0.999996
pandas	O	O:0.999578
`	O	O:0.999993
apply	O	B-API:0.972389
`	O	O:0.999780
function	O	O:0.998863
may	O	O:0.999990
be	O	O:0.999999
able	O	O:0.999989
to	O	O:0.999975
do	O	O:0.999999
what	O	O:0.999940
I	O	O:0.999996
need	O	O:0.999963
,	O	O:0.999894
but	O	O:0.999990
I'm	O	O:0.999979
at	O	O:0.999999
a	O	O:0.999998
loss	O	O:0.998773
as	O	O:0.999995
to	O	O:0.999937
how	O	O:0.999998
to	O	O:0.999982
implement	O	O:0.999973
it	O	O:0.999970
.	O	O:0.999934
	
`	O	O:0.999962
apply	O	B-API:0.984929
`	O	O:0.999946
calls	O	O:0.950668
`	O	O:0.999997
tuple_to_timestamp	O	O:0.761925
`	O	O:0.999993
for	O	O:0.999984
each	O	O:0.999912
row	O	O:0.999947
of	O	O:0.999981
`	O	O:0.999983
df	O	O:0.999294
[	O	O:0.999954
'	O	O:0.999977
orig	O	O:0.998649
']`	O	O:0.999720
.	O	O:0.999516
	
The	O	O:0.999982
first	O	O:0.999822
operation	O	O:0.999907
can	O	O:0.999949
be	O	O:1.000000
done	O	O:0.999983
with	O	O:0.999921
an	O	O:0.999978
`	O	O:0.999993
apply	O	B-API:0.967981
`	O	O:0.999743
function	O	O:0.999702
returning	O	O:0.999968
a	O	O:0.999943
series	O	O:0.998448
(	O	O:0.999987
see	O	O:0.999985
the	O	O:0.999991
accepted	O	O:0.999817
answer	O	O:0.999750
to	O	O:0.999996
this	O	O:0.999996
question	O	O:0.999917
)	O	O:0.999995
,	O	O:0.999992
followed	O	O:0.999984
by	O	O:0.999974
a	O	O:0.999992
horizontal	O	O:0.995676
`	O	O:0.999971
concat	O	B-API:0.991574
`	O	O:0.999982
operation	O	O:0.990292
(	O	O:0.999992
i.e.	O	O:0.999789
,	O	O:0.999993
with	O	O:0.999877
`	O	O:0.999987
axis=1	O	O:0.998561
`)	O	O:0.999979
.	O	O:0.999595
	
I	O	O:0.999992
have	O	O:0.999991
a	O	O:0.999927
groupby	B-API	B-API:0.993038
object	O	O:0.999836
I	O	O:0.999968
apply	O	O:0.932329
expanding	O	O:0.996871
mean	O	O:0.997465
to	O	O:0.999963
.	O	O:0.999994
	
However	O	O:0.999824
I	O	O:0.999992
want	O	O:0.999992
that	O	O:0.999597
calculation	O	O:0.999998
over	O	O:0.999984
another	O	O:0.999778
series	O	O:0.999870
/	O	O:0.999994
group	O	O:0.999126
at	O	O:0.999991
the	O	O:0.999975
same	O	O:0.999899
time	O	O:0.999791
.	O	O:0.999953
	
Here	O	O:0.997879
is	O	O:0.999987
my	O	O:0.999895
code	O	O:0.997692
:	O	O:0.999976
#CODE	O	O:0.999795
	
Then	O	O:0.999493
,	O	O:0.999999
define	O	O:0.999885
what's	O	O:0.999925
a	O	O:0.999957
'	O	O:0.999910
win	O	O:0.999159
'	O	O:0.999994
,	O	O:0.999996
calculate	O	O:0.999503
overall	O	O:0.999824
record	O	O:0.998783
and	O	O:0.999992
apply	O	B-API:0.623377
`	O	O:0.999392
expanding_mean	B-API	B-API:0.999974
`	O	O:0.999912
:	O	O:0.999758
#CODE	O	O:0.999909
	
I	O	Performance by label (#match, #model, #ref) (precision, recall, F1):
have	O	    O: (142625, 143663, 145350) (0.9928, 0.9813, 0.9870)
already	O	    B-API: (1675, 4400, 2713) (0.3807, 0.6174, 0.4710)
asked	O	Macro-average precision, recall, F1: (0.686728, 0.799325, 0.728974)
a	O	Item accuracy: 144300 / 148063 (0.9746)
similar	O	Instance accuracy: 4762 / 7789 (0.6114)
question	O	Elapsed time: 9.808601 [sec] (794.1 [instance/sec])
here	O	
but	O	
couldn't	O	
manage	O	
to	O	
apply	O	
the	O	
solution	O	
for	O	
my	O	
problem	O	
with	O	
two	O	
columns	O	
.	O	
