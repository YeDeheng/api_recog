Minor	O	O:0.996971
:	O	O:0.999747
`	O	O:0.999974
notnull	B-API	B-API:0.957198
`	O	O:0.999926
is	O	O:0.999881
also	O	O:0.999993
a	O	O:0.999994
method	O	O:0.999990
of	O	O:0.999984
DataFrames	O	O:0.999272
.	O	O:0.999931
	
I	O	O:0.999808
want	O	O:0.999991
to	O	O:0.999914
apply	O	O:0.990793
a	O	O:0.999939
function	O	O:0.982320
f	O	O:0.959691
(	O	O:0.999965
lat1	O	O:0.999472
,	O	O:0.999960
lon1	O	O:0.999727
,	O	O:0.999979
lat2	O	O:0.999779
,	O	O:0.999981
lon2	O	O:0.999829
)	O	O:0.999983
which	O	O:0.999841
calculates	O	O:0.999932
the	O	O:0.999991
distance	O	O:0.999928
between	O	O:0.998352
two	O	O:0.999965
points	O	O:0.999281
(	O	O:0.999989
defined	O	O:0.999960
using	O	O:0.999976
lat1	O	O:0.997944
,	O	O:0.999917
lon1	O	O:0.999463
,	O	O:0.999959
lat2	O	O:0.999783
,	O	O:0.999981
lon2	O	O:0.999228
)	O	O:0.999953
.	O	O:0.999432
	
For	O	O:0.999923
all	O	O:0.998337
110k+	O	O:0.999926
records	O	O:0.999896
in	O	O:0.999950
`	O	O:0.999987
df1	O	O:0.986350
`	O	O:0.999991
do	O	O:0.999850
you	O	O:0.999998
want	O	O:0.999997
to	O	O:0.999994
apply	O	O:0.995965
your	O	O:0.999977
distance	O	O:0.999771
function	O	O:0.999090
for	O	O:0.999998
every	O	O:0.999986
record	O	O:0.984104
in	O	O:0.999984
`	O	O:0.999983
df2	O	O:0.984325
`	O	O:0.999959
?	O	O:0.999221
	
I	O	O:0.999871
chose	O	O:0.999983
to	O	O:0.999959
use	O	O:0.996820
map	B-API	B-API:0.983568
and	O	O:0.999983
list	O	O:0.994422
comprehensions	O	O:0.999761
because	O	O:0.999970
they	O	O:0.999959
will	O	O:0.999999
be	O	O:0.999997
faster	O	O:0.999960
than	O	O:0.999982
a	O	O:0.999985
standard	O	O:0.998469
`	O	O:0.999992
for	O	O:0.999982
each	O	O:0.999539
`	O	O:0.999857
	
However	O	O:0.999820
I	O	O:0.999742
took	O	O:0.999992
this	O	O:0.999952
into	O	O:0.999969
account	O	O:0.999648
and	O	O:0.999997
used	O	O:0.999919
map	B-API	B-API:0.971305
,	O	O:0.999879
and	O	O:0.999995
nested	O	O:0.999700
comprehensions	O	O:0.999460
which	O	O:0.999968
are	O	O:0.999989
going	O	O:0.999975
to	O	O:0.999993
be	O	O:0.999999
faster	O	O:0.999937
than	O	O:0.999991
a	O	O:0.999975
for	O	O:0.999863
loop	O	O:0.999948
.	O	O:0.999586
	
Keep	O	O:0.998932
getting	O	O:0.998441
:	O	O:0.999322
KeyError	O	O:0.999768
:	O	O:0.999854
'	O	O:0.999981
cannot	O	O:0.999969
use	O	O:0.999634
a	O	O:0.999986
single	O	O:0.999270
bool	O	O:0.963137
to	O	O:0.999964
index	O	O:0.999973
into	O	O:0.999946
setitem	O	O:0.987657
'	O	O:0.999916
on	O	O:0.999991
this	O	O:0.999985
line	O	O:0.999998
of	O	O:0.999996
code	O	O:0.999913
in	O	O:0.999998
the	O	O:0.999996
second	O	O:0.995416
chunk	O	O:0.999983
I	O	O:0.999826
posted	O	O:0.999896
.	O	O:0.998546
	
i	O	O:0.999900
have	O	O:0.999998
to	O	O:0.999993
merge	O	O:0.999677
them	O	O:0.999986
in	O	O:0.999997
to	O	O:0.999997
the	O	O:1.000000
same	O	O:0.999988
cell	O	O:0.999982
before	O	O:0.999954
applying	O	O:0.999894
this	O	O:0.999395
method	O	O:0.999964
.	O	O:0.999825
	
Or	O	O:0.999672
is	O	O:0.999970
there	O	O:0.999974
are	O	O:0.999993
way	O	O:0.999982
to	O	O:0.999988
marge	O	O:0.999992
the	O	O:0.999998
columns	O	O:0.999968
in	O	O:0.999997
pandas	O	O:0.999946
?	O	O:0.999927
	
I	O	O:0.999764
have	O	O:0.999990
two	O	O:0.999939
TimeSeries	O	O:0.999935
with	O	O:0.999993
some	O	O:0.999985
overlapping	O	O:0.999824
dates	O	O:0.975225
/	O	O:0.999935
indices	O	O:0.970830
and	O	O:0.999989
I'd	O	O:0.999994
like	O	O:0.999991
to	O	O:0.999998
merge	O	O:0.994981
them	O	O:0.999924
.	O	O:0.999885
	
I	O	O:0.999749
have	O	O:0.999994
an	O	O:0.999981
excel	O	O:0.999941
file	O	O:0.999856
(	O	O:0.999991
.xls	O	O:0.999734
format	O	O:0.991773
)	O	O:0.999989
with	O	O:0.999987
5	O	O:0.999913
sheets	O	O:0.999945
,	O	O:0.999983
I	O	O:0.999985
want	O	O:0.999995
to	O	O:0.999939
replace	O	O:0.999568
the	O	O:0.999998
contents	O	O:0.999995
of	O	O:0.999998
sheet	O	O:0.999971
5	O	O:0.999990
with	O	O:0.999995
contents	O	O:0.999985
of	O	O:0.999991
my	O	O:0.999986
pandas	O	O:0.999995
data	O	O:0.998947
frame	O	O:0.999994
.	O	O:0.999919
	
So	O	O:0.999890
,	O	O:0.999960
I	O	O:0.999941
decided	O	O:0.999944
to	O	O:0.999898
do	O	O:0.999999
this	O	O:0.999993
task	O	O:0.999876
in	O	O:0.999977
VBA	O	O:0.999550
and	O	O:0.999992
drop	O	O:0.981533
python	O	O:0.999450
completely	O	O:0.999835
.	O	O:0.999490
	
It	O	O:0.999841
could	O	O:0.999982
be	O	O:0.999993
I'm	O	O:0.999982
not	O	O:0.999970
using	O	O:0.999996
the	O	O:0.999979
right	O	O:0.999926
keywords	O	O:0.999811
,	O	O:0.999996
so	O	O:0.999998
if	O	O:0.999993
you	O	O:0.999999
have	O	O:0.999996
suggestions	O	O:0.999981
,	O	O:0.999998
that	O	O:0.999991
could	O	O:0.999998
also	O	O:0.999998
help	O	O:0.999986
.	O	O:0.999777
	
plus	O	O:0.999967
the	O	O:0.999998
selected	O	O:0.999981
rows	O	O:0.999986
usage	O	O:0.999993
x	O	O:0.999960
2	O	O:0.999835
,	O	O:0.999988
which	O	O:0.999989
will	O	O:0.999984
happen	O	O:0.999998
when	O	O:0.999999
you	O	O:0.999995
concat	O	O:0.931646
the	O	O:0.999997
rows	O	O:0.999872
	
after	O	O:0.999968
the	O	O:0.999934
concat	B-API	B-API:0.959113
the	O	O:0.999981
usage	O	O:0.999986
will	O	O:0.999998
go	O	O:0.999999
down	O	O:0.999995
to	O	O:0.999999
selected	O	O:0.999998
rows	O	O:0.999956
usage	O	O:0.999933
	
See	O	O:0.999844
example	O	O:0.999483
here	O	O:0.999720
:	O	O:0.999951
#URL	O	O:0.999804
Not	O	O:0.999941
sure	O	O:0.999989
this	O	O:0.999976
will	O	O:0.999975
solve	O	O:0.998610
it	O	O:0.999977
,	O	O:0.999988
but	O	O:0.999998
that	O	O:0.999981
will	O	O:0.999996
do	O	O:0.999998
the	O	O:0.999999
query	O	O:0.972173
in	O	O:0.999996
chunks	O	O:0.999945
,	O	O:0.999985
and	O	O:0.999998
you	O	O:0.999995
can	O	O:0.999997
aggregate	O	O:0.977176
or	O	O:0.999998
merge	O	O:0.984347
them	O	O:0.999961
in	O	O:0.999994
pandas	O	O:0.999893
	
Try	O	O:0.999929
a	O	O:0.999946
`	O	O:0.999820
dropna	B-API	B-API:0.993739
`	O	O:0.999991
or	O	O:0.999923
use	O	O:0.994308
`	O	O:0.999888
missing=	O	O:0.998893
'	O	O:0.999980
drop	O	O:0.968199
'`	O	O:0.999960
to	O	O:0.999862
Logit	O	O:0.999956
.	O	O:0.999778
	
You	O	O:0.999685
might	O	O:0.999992
also	O	O:0.999998
check	O	O:0.999999
that	O	O:0.999994
the	O	O:0.999997
right	O	O:0.999993
hand	O	O:0.999994
side	O	O:0.999957
is	O	O:0.999992
full	O	O:0.991595
rank	O	O:0.981026
`	O	O:0.999893
np.linalg.matrix_rank	B-API	B-API:0.994087
(	O	O:0.999982
data	O	O:0.996326
[	O	O:0.999974
train_cols	O	O:0.998926
]	O	O:0.999769
.values	B-API	B-API:0.995820
)`	O	O:0.999267
	
append	O	O:0.876574
pandas.DataFrame.GroupBy	B-API	B-API:0.934298
results	O	O:0.999985
into	O	O:0.999968
another	O	O:0.999920
dataframe	O	O:0.992393
	
You	O	O:0.999964
need	O	O:0.999998
to	O	O:0.999998
append	O	O:0.983365
the	O	O:0.999994
intermediate	O	O:0.999901
DataFrames	O	O:0.999484
to	O	O:0.999986
a	O	O:0.999998
list	O	O:0.990251
and	O	O:1.000000
then	O	O:0.999993
concatenate	O	O:0.977425
the	O	O:0.999945
results	O	O:0.999955
.	O	O:0.999903
	
I	O	O:0.999628
am	O	O:0.999973
taking	O	O:0.999614
the	O	O:0.999960
second	O	O:0.987052
dataframe	O	O:0.995680
and	O	O:0.999998
doing	O	O:0.999999
some	O	O:0.999685
calculations	O	O:0.999650
with	O	O:0.999997
it	O	O:0.999998
to	O	O:0.999999
append	O	O:0.972033
to	O	O:0.999990
the	O	O:0.999999
first	O	O:0.995789
dataframe	O	O:0.993077
.	O	O:0.999846
	
However	O	O:0.999898
it	O	O:0.999953
does	O	O:0.999991
not	O	O:0.999994
appear	O	O:0.999989
that	O	O:0.999998
what	O	O:0.999988
I	O	O:0.999954
am	O	O:0.999997
appending	O	O:0.999626
to	O	O:0.999978
the	O	O:1.000000
first	O	O:0.999547
data	O	O:0.999784
frame	O	O:0.999991
is	O	O:0.999997
actually	O	O:0.999957
happening	O	O:0.999864
.	O	O:0.999690
	
Could	O	O:0.999960
you	O	O:0.999997
use	O	O:0.999253
concat	B-API	B-API:0.960986
instead	O	O:0.999945
?	O	O:0.999951
	
`	O	O:0.999540
m=	O	O:0.999710
m.concat	O	O:0.998171
([	O	O:0.999831
a0	O	O:0.998446
,	O	O:0.999946
a1	O	O:0.999560
,	O	O:0.999972
a2	O	O:0.999677
,	O	O:0.999980
a3	O	O:0.999628
,	O	O:0.999980
a4	O	O:0.999650
,	O	O:0.999979
a5	O	O:0.999712
,	O	O:0.999986
a6	O	O:0.999745
,	O	O:0.999988
a7	O	O:0.999776
,	O	O:0.999989
a8	O	O:0.999644
,	O	O:0.999970
a9	O	O:0.999926
]	O	O:0.999870
,	O	O:0.999958
ignore_index=True	O	O:0.999024
)`	O	O:0.999638
	
I	O	O:0.999774
get	O	O:0.999573
an	O	O:0.999970
error	O	O:0.999988
trying	O	O:0.999985
to	O	O:0.999966
use	O	O:0.999279
this	O	O:0.999919
...	O	O:0.999282
	
AttributeError	O	O:0.993613
:	O	O:0.999373
'	O	O:0.999953
DataFrame	O	O:0.995951
'	O	O:0.999884
object	O	O:0.999935
has	O	O:0.999975
no	O	O:0.999936
attribute	O	O:0.999961
'	O	O:0.999966
concat	B-API	B-API:0.956742
'	O	O:0.999620
	
[	O	O:0.999793
`	O	O:0.999978
append	B-API	B-API:0.998140
`]	O	O:0.986140
(	O	O:0.999980
#URL	O	O:0.999140
)	O	O:0.999941
does	O	O:0.999409
*	O	O:0.999987
not	O	O:0.999962
*	O	O:0.999995
operate	O	O:0.999873
in	O	O:0.999984
place	O	O:0.995720
.	O	O:0.999925
	
But	O	O:0.999691
for	O	O:0.999996
a	O	O:0.999984
start	O	O:0.999705
I	O	O:0.999863
would	O	O:0.999997
just	O	O:0.999995
be	O	O:0.999999
happy	O	O:0.999990
to	O	O:0.999984
get	O	O:0.999889
the	O	O:0.999999
first	O	O:0.997065
result	O	O:0.999985
.	O	O:0.999824
	
I	O	O:0.999597
suspect	O	O:0.999981
that	O	O:0.999933
I	O	O:0.999974
need	O	O:0.999998
to	O	O:0.999962
use	O	O:0.999690
searchsort	O	O:0.998549
and	O	O:0.999978
asof	B-API	B-API:0.982189
,	O	O:0.999916
but	O	O:0.999870
I	O	O:0.999389
am	O	O:0.999992
not	O	O:0.999978
quite	O	O:0.999984
sure	O	O:0.999990
how	O	O:0.999987
to	O	O:0.999991
do	O	O:0.999999
that	O	O:0.999984
with	O	O:0.999988
.	O	O:0.999889
	
You're	O	O:0.999903
looking	O	O:0.999939
for	O	O:0.999998
a	O	O:0.999987
near	O	O:0.999297
timestamp	O	O:0.999571
,	O	O:0.999986
where	O	O:0.994847
`	O	O:0.999952
asof	B-API	B-API:0.977952
`	O	O:0.999996
searches	O	O:0.998996
for	O	O:0.999996
the	O	O:0.999992
latest	O	O:0.999127
timestamp	O	O:0.999415
.	O	O:0.999604
	
It	O	O:0.999590
is	O	O:0.999984
only	O	O:0.999996
applied	O	O:0.999950
to	O	O:0.999996
a	O	O:0.999998
time	O	O:0.995438
series	O	O:0.999993
,	O	O:0.999998
so	O	O:0.999996
you	O	O:0.999985
would	O	O:0.999999
have	O	O:1.000000
to	O	O:0.999999
apply	O	O:0.950322
`	O	O:0.999966
reset_index	B-API	B-API:0.999535
`	O	O:0.999981
to	O	O:0.999981
your	O	O:0.999993
`	O	O:0.999982
DataFrame	O	O:0.955696
`	O	O:0.999971
	
You're	O	O:0.999904
going	O	O:0.999943
to	O	O:0.999996
have	O	O:1.000000
to	O	O:0.999999
iterate	O	O:0.999996
over	O	O:0.998030
your	O	O:0.999963
list	O	O:0.996960
,	O	O:0.999999
get	O	O:0.999190
copies	O	O:0.999979
of	O	O:0.999999
them	O	O:0.999961
filtered	O	O:0.999995
and	O	O:0.999999
then	O	O:0.999996
concat	O	O:0.947355
them	O	O:0.999986
all	O	O:0.998608
together	O	O:0.999862
#CODE	O	O:0.999530
	
A	O	O:0.999903
solution	O	O:0.999818
without	O	O:0.999885
loop	O	O:0.999929
but	O	O:0.999943
`	O	O:0.999972
merge	B-API	B-API:0.996430
`	O	O:0.999789
:	O	O:0.999831
#CODE	O	O:0.999810
	
If	O	O:0.999891
there	O	O:0.999949
are	O	O:0.999996
no	O	O:0.999988
blanks	O	O:0.999991
some	O	O:0.999992
columns	O	O:0.999995
convert	O	O:0.982026
to	O	O:0.999982
`	O	O:0.999998
TRUE	O	O:0.999641
/	O	O:0.999973
FALSE	O	O:0.999838
`	O	O:0.999984
,	O	O:0.999974
others	O	O:0.999993
leave	O	O:0.999905
as	O	O:0.999978
`	O	O:0.999931
Yes	O	O:0.997446
/	O	O:0.999962
No	O	O:0.998957
`	O	O:0.999923
but	O	O:0.999920
dtype	B-API	B-API:0.995285
is	O	O:0.999834
bool	B-API	B-API:0.842274
.	O	O:0.999434
	
`	O	O:0.999962
fhs	O	O:0.998555
=	O	O:0.999973
fhs.drop	O	O:0.993774
([	O	O:0.999857
1002	O	O:0.998586
])`	O	O:0.999929
to	O	O:0.999934
drop	O	O:0.999217
that	O	O:0.999987
row	O	O:0.999996
and	O	O:1.000000
data	O	O:0.998471
types	O	O:0.999446
are	O	O:0.999996
still	O	O:0.999955
good	O	O:0.999882
.	O	O:0.999828
	
first	O	O:0.993959
column	O	O:0.999992
comes	O	O:0.999973
into	O	O:0.999985
df	O	O:0.999724
as	O	O:0.999967
Yes	O	O:0.998601
,	O	O:0.999987
No	O	O:0.999944
,	O	O:0.999969
Yes	O	O:0.999919
,	O	O:0.999989
Yes	O	O:0.999793
type	O	O:0.999966
bool	O	O:0.990124
xxxx	O	O:0.999838
below	O	O:0.999738
	
3rd	O	O:0.999898
column	O	O:0.999989
comes	O	O:0.999968
into	O	O:0.999985
df	O	O:0.999798
as	O	O:0.999969
FALSE	O	O:0.999553
,	O	O:0.999986
FALSE	O	O:0.999875
,	O	O:0.999983
TRUE	O	O:0.999903
,	O	O:0.999981
TRUE	O	O:0.999895
type	O	O:0.999809
bool	O	O:0.953693
	
print	O	O:0.998470
(	O	O:0.999781
len	B-API	B-API:0.989567
(	O	O:0.999978
upregulated	O	O:0.999459
)	O	O:0.999973
,	O	O:0.999914
end=	O	O:0.999887
'	O	O:0.999923
\n	O	O:0.999158
')	O	O:0.999817
	
remove	O	O:0.970071
overlay	O	O:0.999921
text	O	O:0.987948
from	O	O:0.999992
pandas	O	O:0.999809
boxplot	O	O:0.990590
	
I	O	O:0.999617
am	O	O:0.999992
trying	O	O:0.999964
to	O	O:0.999995
remove	O	O:0.999191
the	O	O:0.999996
overlay	O	O:0.999904
text	O	O:0.994962
on	O	O:0.999992
my	O	O:0.999942
boxplot	O	O:0.997621
I	O	O:0.999987
created	O	O:0.999976
using	O	O:0.999902
pandas	O	O:0.999115
.	O	O:0.999050
	
The	O	O:0.999894
code	O	O:0.999928
to	O	O:0.999994
generate	O	O:0.999998
it	O	O:0.999976
is	O	O:0.999998
as	O	O:0.999986
follows	O	O:0.998231
(	O	O:0.999983
minus	O	O:0.999965
a	O	O:0.999975
few	O	O:0.999896
other	O	O:0.999944
modifications	O	O:0.997847
):	O	O:0.999588
	
I	O	O:0.999864
just	O	O:0.999996
want	O	O:0.999995
to	O	O:0.999990
remove	O	O:0.999538
the	O	O:0.999987
"	O	O:0.999940
boxplot	O	O:0.998127
grouped	O	O:0.999983
by	O	O:0.999894
0	O	O:0.999520
...	O	O:0.999231
	
I	O	O:0.999825
know	O	O:0.999987
how	O	O:0.999962
to	O	O:0.999992
create	O	O:1.000000
a	O	O:0.999998
new	O	O:0.999952
column	O	O:0.999996
with	O	O:0.999979
`	O	O:0.999976
apply	B-API	B-API:0.930395
`	O	O:0.999966
or	O	O:0.999285
`	O	O:0.999962
np.where	B-API	B-API:0.992007
`	O	O:0.999995
based	O	O:0.999627
on	O	O:0.999999
the	O	O:0.999998
values	O	O:0.998893
of	O	O:0.999999
another	O	O:0.999988
column	O	O:0.999995
,	O	O:0.999991
but	O	O:0.999998
a	O	O:0.999990
way	O	O:0.999976
of	O	O:0.999996
selectively	O	O:0.999907
changing	O	O:0.999997
the	O	O:0.999973
values	O	O:0.993316
of	O	O:0.999998
an	O	O:0.999998
existing	O	O:0.999995
column	O	O:0.999926
is	O	O:0.999991
escaping	O	O:0.999913
me	O	O:0.999857
;	O	O:0.999943
I	O	O:0.999392
suspect	O	O:0.999954
`	O	O:0.999849
df.ix	B-API	B-API:0.995570
`	O	O:0.999951
is	O	O:0.999721
involved	O	O:0.999868
?	O	O:0.999903
	
@USER	O	O:0.998250
For	O	O:0.999937
indexing	O	O:0.999948
with	O	O:0.999995
boolean	O	O:0.999431
vectors	O	O:0.999961
this	O	O:0.999869
is	O	O:0.999989
perfectly	O	O:0.999903
fine	O	O:0.999933
,	O	O:0.999995
if	O	O:0.999995
you	O	O:0.999997
want	O	O:0.999997
to	O	O:0.999999
add	O	O:0.999601
in	O	O:0.999999
other	O	O:0.999994
forms	O	O:0.999987
of	O	O:0.999948
indexing	O	O:0.999972
you	O	O:0.999994
would	O	O:0.999996
want	O	O:0.999994
`	O	O:0.999993
loc	B-API	B-API:0.965227
`	O	O:0.999961
.	O	O:0.997926
	
For	O	O:0.999424
instance	O	O:0.998478
:	O	O:0.999765
`	O	O:0.999969
df.loc	B-API	B-API:0.991855
[	O	O:0.999961
df.name.str.contains	O	O:0.990754
(	O	O:0.999583
'	O	O:0.999978
e$	O	O:0.999728
')	O	O:0.999932
,	O	O:0.999888
'	O	O:0.999947
flag	O	O:0.997376
']	O	O:0.999914
=	O	O:0.998847
'	O	O:0.999862
Blue	O	O:0.999156
'`	O	O:0.999670
.	O	O:0.999034
	
use	O	O:0.961185
``	O	O:0.999311
apply	B-API	B-API:0.984801
``	O	O:0.999612
ONLY	O	O:0.999509
as	O	O:0.999999
a	O	O:0.999986
last	O	O:0.974947
resort	O	O:0.999635
(	O	O:0.999945
e.g.	O	O:0.999890
you	O	O:0.999950
can't	O	O:0.999988
do	O	O:0.999998
vectorized	O	O:0.999979
things	O	O:0.999658
)	O	O:0.999980
.	O	O:0.999973
even	O	O:0.999995
if	O	O:0.999998
you	O	O:0.999994
have	O	O:0.999999
a	O	O:0.999998
very	O	O:0.999921
complicated	O	O:0.999924
function	O	O:0.999073
to	O	O:0.999994
do	O	O:0.999997
,	O	O:0.999996
you	O	O:0.999991
can	O	O:0.999998
often	O	O:0.999998
do	O	O:0.999999
vectorized	O	O:0.999902
calculations	O	O:0.999931
on	O	O:0.999990
most	O	O:0.999969
of	O	O:0.999998
it	O	O:0.999973
,	O	O:0.999998
saving	O	O:0.995597
the	O	O:0.999986
last	O	O:0.996675
for	O	O:0.999992
``	O	O:0.999688
apply	B-API	B-API:0.961879
``	O	O:0.999334
,	O	O:0.999683
which	O	O:0.999912
is	O	O:0.999968
essentially	O	O:0.999996
a	O	O:0.999979
loop	O	O:0.999669
.	O	O:0.999744
	
Using	O	O:0.999883
apply	B-API	B-API:0.957917
took	O	O:0.999613
172ms	O	O:0.996042
versus	O	O:0.999972
39ms	O	O:0.998783
using	O	O:0.999866
Jeff's	O	O:0.995160
method	O	O:0.999926
,	O	O:0.999978
I	O	O:0.999925
can	O	O:0.999997
also	O	O:0.999995
confirm	O	O:0.999997
that	O	O:0.999994
it	O	O:0.999992
made	O	O:0.999993
negligle	O	O:0.999924
difference	O	O:0.996400
whether	O	O:0.999955
the	O	O:0.999956
apply	B-API	B-API:0.954184
was	O	O:0.999946
called	O	O:0.999980
inside	O	O:0.999966
or	O	O:0.999976
outside	O	O:0.999967
the	O	O:0.999789
function	O	O:0.994612
but	O	O:0.999996
it	O	O:0.999991
does	O	O:0.999993
modify	O	O:0.999972
the	O	O:0.999994
df	O	O:0.999790
so	O	O:0.999988
you	O	O:0.999956
didn't	O	O:0.999994
need	O	O:0.999998
to	O	O:0.999996
return	O	O:0.999997
the	O	O:0.999989
df	O	O:0.999708
as	O	O:0.999996
it	O	O:0.999745
was	O	O:0.999991
being	O	O:0.999983
modified	O	O:0.999954
inside	O	O:0.999976
the	O	O:0.999843
function	O	O:0.991943
	
And	O	O:0.999982
then	O	O:0.999988
sometimes	O	O:0.999999
different	O	O:0.999985
solutions	O	O:0.999177
(	O	O:0.999880
in	O	O:0.999996
this	O	O:0.999978
case	O	O:0.999996
using	O	O:0.999984
`	O	O:0.999844
apply	B-API	B-API:0.980323
`)	O	O:0.999986
come	O	O:0.999710
up	O	O:0.999978
on	O	O:0.999987
google	O	O:0.999529
/	O	O:0.999982
stackoverflow	O	O:0.999688
and	O	O:0.999992
yet	O	O:0.999926
again	O	O:0.999908
I	O	O:0.999754
can	O	O:0.999995
NOT	O	O:0.999994
verify	O	O:0.999987
that	O	O:0.999993
there	O	O:0.999887
is	O	O:0.999994
no	O	O:0.999983
better	O	O:0.999925
solution	O	O:0.999988
as	O	O:0.999975
I	O	O:0.999808
dont	O	O:0.999992
have	O	O:0.999993
the	O	O:0.999998
insight	O	O:0.999966
into	O	O:0.999979
the	O	O:0.999927
library	O	O:0.981857
.	O	O:0.999875
	
I	O	O:0.999853
kindof	O	O:0.999966
disagree	O	O:0.999881
with	O	O:0.999996
using	O	O:0.999996
df	O	O:0.999370
as	O	O:0.999969
the	O	O:0.999963
variable	O	O:0.999961
name	O	O:0.998380
here	O	O:0.999958
,	O	O:0.999988
I	O	O:0.999966
also	O	O:0.999993
think	O	O:0.999939
I'd	O	O:0.999983
just	O	O:0.999986
use	O	O:0.985931
len	B-API	B-API:0.983986
:	O	O:0.999659
`	O	O:0.999890
df.groupby	B-API	B-API:0.994527
(	O	O:0.999958
"	O	O:0.999960
Name	O	O:0.999792
")	O	O:0.999532
.filter	B-API	B-API:0.997849
(	O	O:0.999942
lambda	O	O:0.999386
x	O	O:0.999451
:	O	O:0.999682
len	B-API	B-API:0.933667
(	O	O:0.999980
x	O	O:0.999794
)	O	O:0.999962
>	O	O:0.999824
2	O	O:0.999812
)`	O	O:0.999346
	
Merge	O	O:0.988939
existing	O	O:0.999899
dataframe	O	O:0.999199
into	O	O:0.999950
fixed	O	O:0.999922
size	O	O:0.995644
new	O	O:0.999863
dataframe	O	O:0.993275
	
Then	O	O:0.999885
I	O	O:0.999996
want	O	O:0.999994
merge	B-API	B-API:0.913559
these	O	O:0.999989
kinds	O	O:0.999988
of	O	O:0.999994
table	O	O:0.999028
into	O	O:0.999992
new	O	O:0.999932
dataframe	O	O:0.989139
	
How	O	O:0.999861
could	O	O:0.999986
I	O	O:0.999997
merge	O	O:0.990130
them	O	O:0.999791
in	O	O:0.999999
that	O	O:0.999980
way	O	O:0.999952
?	O	O:0.999927
	
Inconsistent	O	O:0.999823
behavior	O	O:0.999977
of	O	O:0.999978
apply	B-API	B-API:0.931404
with	O	O:0.999974
operator.itemgetter	O	O:0.970253
v.s.	O	O:0.977570
applymap	B-API	B-API:0.980334
operator.itemgetter	O	O:0.971858
	
`	O	O:0.999913
apply	B-API	B-API:0.989806
`	O	O:0.999925
gives	O	O:0.999931
wrong	O	O:0.999971
result	O	O:0.999982
#CODE	O	O:0.999507
	
apply	B-API	B-API:0.938354
is	O	O:0.999940
being	O	O:0.999871
passed	O	O:0.999958
an	O	O:0.999991
entire	O	O:0.999947
row	O	O:0.999992
which	O	O:0.999877
is	O	O:0.999995
a	O	O:0.999995
series	O	O:0.999993
of	O	O:0.999995
2	O	O:0.999940
elements	O	O:0.999984
which	O	O:0.999991
are	O	O:0.999992
lists	O	O:0.999914
;	O	O:0.999982
the	O	O:0.999954
last	O	O:0.994326
list	O	O:0.987995
is	O	O:0.999979
returned	O	O:0.999680
and	O	O:0.999995
coerced	O	O:0.999330
to	O	O:0.999983
a	O	O:0.999995
series	O	O:0.999963
.	O	O:0.999991
embedded	O	O:0.999983
lists	O	O:0.999993
as	O	O:0.999985
elements	O	O:0.999808
are	O	O:0.999977
not	O	O:0.999998
a	O	O:0.999996
good	O	O:0.999854
idea	O	O:0.999963
in	O	O:0.999975
general	O	O:0.999519
.	O	O:0.999630
	
The	O	O:0.999901
reason	O	O:0.999775
I	O	O:0.999918
am	O	O:0.999991
asking	O	O:0.999330
,	O	O:0.999936
is	O	O:0.999987
because	O	O:0.999956
I	O	O:0.999848
suspect	O	O:0.999878
(	O	O:0.999761
?	O	O:0.999899
)	O	O:0.999989
it	O	O:0.999937
is	O	O:0.999991
faster	O	O:0.999940
to	O	O:0.999991
create	O	O:0.999998
a	O	O:0.999993
zero	O	O:0.999687
filled	O	O:0.996215
dataframe	O	O:0.993633
,	O	O:0.999981
and	O	O:0.999999
then	O	O:0.999996
replace	O	O:0.997467
each	O	O:0.999987
element	O	O:0.999986
as	O	O:0.999992
needed	O	O:0.999927
.	O	O:0.999875
	
So	O	O:0.999934
it	O	O:0.999886
might	O	O:0.999996
be	O	O:0.999996
faster	O	O:0.999990
to	O	O:0.999987
create	O	O:0.999996
an	O	O:0.999993
empty	O	O:0.995090
dataframe	O	O:0.994111
with	O	O:0.999994
nxm	O	O:0.999841
dimensions	O	O:0.999952
and	O	O:0.999998
then	O	O:0.999999
replace	O	O:0.997105
elements	O	O:0.999992
as	O	O:0.999991
needed	O	O:0.999881
(	O	O:0.999997
by	O	O:0.999986
copying	O	O:0.999916
a	O	O:0.999972
list	O	O:0.991236
to	O	O:0.999997
each	O	O:0.999995
column	O	O:0.999975
)	O	O:0.999990
.	O	O:0.999727
	
in	O	O:0.999949
general	O	O:0.999872
creating	O	O:0.999937
an	O	O:0.999923
empty	O	O:0.990337
frame	O	O:0.999989
,	O	O:0.999994
then	O	O:0.999994
filling	O	O:0.999997
it	O	O:0.999995
column	O	O:0.999999
by	O	O:0.999995
column	O	O:0.999907
is	O	O:0.999990
not	O	O:0.999989
very	O	O:0.999965
efficient	O	O:0.999957
;	O	O:0.999949
use	O	O:0.992360
a	O	O:0.999957
dict	O	O:0.998598
/	O	O:0.999952
list	O	O:0.991777
instead	O	O:0.999993
,	O	O:0.999994
or	O	O:0.999999
create	O	O:0.999943
sub-frames	O	O:0.999955
and	O	O:0.999999
concat	O	O:0.936967
them	O	O:0.999523
	
Are	O	O:0.999926
you	O	O:0.999991
trying	O	O:0.999997
to	O	O:0.999999
shift	O	O:0.978916
ends	O	O:0.999987
by	O	O:0.999993
one	O	O:0.999970
(	O	O:0.999978
month	O	O:0.970735
)	O	O:0.999945
?	O	O:0.999786
	
My	O	O:0.999857
initial	O	O:0.999768
suggestion	O	O:0.999948
was	O	O:0.999936
to	O	O:0.999984
do	O	O:0.999999
the	O	O:0.999996
shift	B-API	B-API:0.954568
after	O	O:0.999969
you've	O	O:0.999916
reindexed	O	O:0.998327
(	O	O:0.999982
since	O	O:0.999931
you're	O	O:0.999982
about	O	O:0.999997
to	O	O:0.999993
do	O	O:0.999998
that	O	O:0.999980
anyway	O	O:0.999549
):	O	O:0.999986
#CODE	O	O:0.999451
	
the	O	O:0.999876
shift	B-API	B-API:0.940474
index	O	O:0.997854
looks	O	O:0.999995
like	O	O:0.999999
a	O	O:0.999997
better	O	O:0.999765
fix	O	O:0.988876
,	O	O:0.999994
still	O	O:0.999983
would	O	O:0.999998
like	O	O:0.999999
to	O	O:0.999999
know	O	O:0.999999
if	O	O:0.999993
there	O	O:0.999754
is	O	O:0.999995
a	O	O:0.999996
simple	O	O:0.999297
date	O	O:0.989993
add	O	O:0.975530
function	O	O:0.999126
,	O	O:0.999990
which	O	O:0.999934
is	O	O:0.999982
how	O	O:0.999971
I'd	O	O:0.999957
do	O	O:0.999996
it	O	O:0.999980
in	O	O:0.999995
sql	O	O:0.999845
,	O	O:0.999996
that	O	O:0.999992
could	O	O:0.999990
apply	O	O:0.913198
?	O	O:0.999918
	
I'd	O	O:0.999915
still	O	O:0.999988
like	O	O:0.999998
to	O	O:0.999998
know	O	O:0.999999
if	O	O:0.999993
there	O	O:0.999738
is	O	O:0.999995
a	O	O:0.999975
simple	O	O:0.999355
DateAdd	O	O:0.999803
type	O	O:0.999078
function	O	O:0.999613
that	O	O:0.999976
I	O	O:0.999976
could	O	O:0.999996
use	O	O:0.997854
that	O	O:0.999925
might	O	O:0.999993
also	O	O:0.999998
apply	O	O:0.947962
for	O	O:0.999986
use	O	O:0.982661
elsewhere	O	O:0.999825
if	O	O:0.999969
needed	O	O:0.999947
?	O	O:0.999911
	
Alternatively	O	O:0.999905
you	O	O:0.999988
could	O	O:0.999990
use	O	O:0.999303
`	O	O:0.999978
apply	B-API	B-API:0.993572
`	O	O:0.998721
(	O	O:0.999072
but	O	O:0.999997
this	O	O:0.999911
will	O	O:0.999993
usually	O	O:0.999996
be	O	O:0.999987
slower	O	O:0.996610
):	O	O:0.999877
#CODE	O	O:0.998822
	
Since	O	O:0.999875
you	O	O:0.999978
are	O	O:0.999999
using	O	O:0.999998
the	O	O:0.999911
"	O	O:0.999962
trailing	O	O:0.999778
row	O	O:0.999924
"	O	O:0.999972
you	O	O:0.999925
are	O	O:0.999995
going	O	O:0.999988
to	O	O:0.999995
need	O	O:1.000000
to	O	O:0.999994
use	O	O:0.999714
`	O	O:0.999965
shift	B-API	B-API:0.998564
`	O	O:0.999726
:	O	O:0.999852
#CODE	O	O:0.999814
	
thanks	O	O:0.999800
shift	B-API	B-API:0.940658
is	O	O:0.999976
what	O	O:0.999974
i	O	O:0.999795
was	O	O:0.999991
looking	O	O:0.999695
for	O	O:0.999994
.	O	O:0.999979
now	O	O:0.999960
i	O	O:0.999978
can	O	O:0.999999
find	O	O:0.999605
examples	O	O:0.999967
in	O	O:0.999991
the	O	O:0.999996
Pandas	O	O:0.999832
book	O	O:0.999957
	
I	O	O:0.999701
have	O	O:0.999975
been	O	O:0.999903
searching	O	O:0.999991
for	O	O:0.999990
hours	O	O:0.990092
,	O	O:0.999989
literally	O	O:0.999995
the	O	O:0.999999
entire	O	O:0.999927
day	O	O:0.999769
on	O	O:0.999995
how	O	O:0.999997
to	O	O:0.999998
generate	O	O:1.000000
a	O	O:0.999993
pivot	O	O:0.971706
table	O	O:0.997867
in	O	O:0.999949
Python	O	O:0.999843
.	O	O:0.999798
	
What	O	O:0.999798
I	O	O:0.999867
want	O	O:0.999971
is	O	O:0.999955
to	O	O:0.999991
take	O	O:0.999938
a	O	O:0.999996
csv	O	O:0.999920
file	O	O:0.999996
,	O	O:0.999993
extract	O	O:0.991359
the	O	O:0.999995
first	O	O:0.997895
column	O	O:0.999989
and	O	O:0.999998
generate	O	O:0.999997
a	O	O:0.999970
pivot	O	O:0.962019
table	O	O:0.999193
using	O	O:0.999995
the	O	O:0.999992
count	O	O:0.981376
or	O	O:0.999998
frequency	O	O:0.999985
of	O	O:0.999996
the	O	O:0.999995
numbers	O	O:0.999903
in	O	O:0.999997
that	O	O:0.999996
column	O	O:0.999994
,	O	O:0.999991
and	O	O:0.999999
sort	O	O:0.986122
descending	O	O:0.999434
#CODE	O	O:0.999392
	
These	O	O:0.999936
columns	O	O:0.999959
all	O	O:0.997705
contain	O	O:0.999986
an	O	O:0.999979
identical	O	O:0.997457
kind	O	O:0.999993
of	O	O:0.999993
data	O	O:0.992416
,	O	O:0.999997
and	O	O:0.999998
I'd	O	O:0.999993
like	O	O:0.999987
to	O	O:0.999999
stack	O	O:0.999776
them	O	O:0.999990
into	O	O:0.999993
a	O	O:0.999993
single	O	O:0.999501
series	O	O:0.999996
,	O	O:0.999894
ergo	O	O:0.999568
:	O	O:0.999930
#CODE	O	O:0.999524
	
From	O	O:0.999901
here	O	O:0.999883
,	O	O:0.999979
I	O	O:0.999832
can't	O	O:0.999987
quite	O	O:0.999932
figure	O	O:0.998432
out	O	O:0.999991
how	O	O:0.999997
to	O	O:0.999993
reindex	O	O:0.964847
my	O	O:0.999987
series	O	O:0.999994
such	O	O:0.999997
that	O	O:0.999999
the	O	O:0.999998
indexes	O	O:0.999980
go	O	O:0.999997
from	O	O:0.999997
0	O	O:0.999948
to	O	O:0.999976
`	O	O:0.999988
len	B-API	B-API:0.994264
(	O	O:0.999979
s	O	O:0.999814
)`	O	O:0.999071
.	O	O:0.999243
	
But	O	O:0.999928
it	O	O:0.999935
could	O	O:0.999996
be	O	O:0.999999
an	O	O:0.999997
unexpected	O	O:0.999652
system	O	O:0.999905
difference	O	O:0.993175
--	O	O:0.999951
I	O	O:0.999720
am	O	O:0.999990
using	O	O:0.999889
Python	O	O:0.998776
2.7.3	O	O:0.998558
on	O	O:0.999956
an	O	O:0.999948
Ubuntu	O	O:0.999838
machine	O	O:0.999870
.	O	O:0.999677
	
An	O	O:0.999871
alternative	O	O:0.999915
you	O	O:0.999973
might	O	O:0.999985
try	O	O:0.999982
is	O	O:0.999997
to	O	O:0.999996
replace	O	O:0.992657
exit()	O	O:0.996607
with	O	O:0.999970
os._exit	O	O:0.950651
(	O	O:0.999994
os.EX_OK	O	O:0.994317
)	O	O:0.999941
.	O	O:0.999539
	
I	O	O:0.999530
think	O	O:0.999982
it	O	O:0.999899
uses	O	O:0.999719
`	O	O:0.999993
patsy	O	O:0.997368
`	O	O:0.999974
in	O	O:0.999957
the	O	O:0.999995
backend	O	O:0.999989
to	O	O:0.999994
translate	O	O:0.999807
the	O	O:0.999993
formula	O	O:0.999971
expression	O	O:0.999977
,	O	O:0.999958
and	O	O:0.999994
intercept	O	O:0.999901
is	O	O:0.999989
added	O	O:0.999901
automatically	O	O:0.999886
.	O	O:0.999781
	
Trying	O	O:0.999953
to	O	O:0.999985
append	O	O:0.972471
this	O	O:0.999967
to	O	O:0.999999
a	O	O:1.000000
new	O	O:0.999794
datastore	O	O:0.999977
.	O	O:0.999713
	
The	O	O:0.999856
datastore	O	O:0.999688
does	O	O:0.999984
not	O	O:0.999991
exist	O	O:0.999999
so	O	O:0.999996
I	O	O:0.999883
use	O	O:0.998964
the	O	O:0.999774
following	O	O:0.999905
to	O	O:0.999996
create	O	O:0.999995
and	O	O:0.999999
append	O	O:0.955866
the	O	O:0.999958
data	O	O:0.991871
;	O	O:0.999979
#CODE	O	O:0.999034
	
I'm	O	O:0.999632
not	O	O:0.999985
looking	O	O:0.999995
to	O	O:0.999997
concatenate	O	O:0.982705
strings	O	O:0.999826
,	O	O:0.999999
just	O	O:0.999996
shift	O	O:0.956595
everything	O	O:0.999962
over	O	O:0.989276
.	O	O:0.999723
	
I	O	O:0.999326
saw	O	O:0.999966
a	O	O:0.999836
method	O	O:0.999985
using	O	O:0.999986
"	O	O:0.999789
R	O	O:0.995154
"	O	O:0.999774
and	O	O:0.999782
melt	B-API	B-API:0.956655
,	O	O:0.999961
however	O	O:0.999908
I	O	O:0.999935
would	O	O:0.999999
like	O	O:0.999997
to	O	O:0.999998
stick	O	O:0.999998
with	O	O:0.999994
python	O	O:0.999687
/	O	O:0.999987
pandas	O	O:0.999936
if	O	O:0.999957
possible	O	O:0.999836
.	O	O:0.999805
	
I	O	O:0.999632
cannot	O	O:0.999976
post	O	O:0.999923
real	O	O:0.989538
request	O	O:0.999962
for	O	O:0.999981
security	O	O:0.997931
reason	O	O:0.999821
.	O	O:0.999622
	
By	O	O:0.999943
the	O	O:0.999955
way	O	O:0.999983
the	O	O:0.999984
code	O	O:0.999857
works	O	O:0.999995
without	O	O:0.999969
"	O	O:0.999974
append	B-API	B-API:0.961281
"	O	O:0.999923
within	O	O:0.999716
for	O	O:0.999902
loop	O	O:0.999870
.	O	O:0.999452
	
At	O	O:0.999959
first	O	O:0.991226
I	O	O:0.999959
tried	O	O:0.999986
using	O	O:0.999497
pivot	B-API	B-API:0.977334
(	O	O:0.999950
with	O	O:0.999971
timestamp	O	O:0.999654
as	O	O:0.999990
an	O	O:0.999965
index	O	O:0.999402
)	O	O:0.999969
,	O	O:0.999982
but	O	O:0.999990
that	O	O:0.999941
didn't	O	O:0.999970
work	O	O:0.999998
because	O	O:0.999997
of	O	O:0.999998
those	O	O:0.999989
duplicates	O	O:0.999969
.	O	O:0.999794
	
I	O	O:0.999413
don't	O	O:0.999989
want	O	O:0.999978
to	O	O:0.999995
drop	O	O:0.999958
them	O	O:0.999974
,	O	O:0.999992
since	O	O:0.999989
the	O	O:0.999995
other	O	O:0.999999
data	O	O:0.994529
is	O	O:0.999990
different	O	O:0.999887
and	O	O:0.999965
should	O	O:0.999963
not	O	O:0.999987
be	O	O:0.999992
lost	O	O:0.999896
.	O	O:0.999453
	
Since	O	O:0.999594
index	O	O:0.995887
contains	O	O:0.999486
no	O	O:0.999991
duplicates	O	O:0.999945
,	O	O:0.999988
I	O	O:0.999960
thought	O	O:0.999974
maybe	O	O:0.999910
I	O	O:0.999971
can	O	O:0.999994
pivot	O	O:0.939078
over	O	O:0.998621
it	O	O:0.999923
and	O	O:0.999990
after	O	O:0.999999
that	O	O:0.999946
merge	O	O:0.950630
the	O	O:0.999996
result	O	O:0.999991
into	O	O:0.999985
the	O	O:0.999982
original	O	O:0.999906
DataFrame	O	O:0.998233
,	O	O:0.999989
but	O	O:0.999974
I	O	O:0.999704
was	O	O:0.999990
wondering	O	O:0.999914
if	O	O:0.999990
there	O	O:0.999857
is	O	O:0.999991
an	O	O:0.999987
easier	O	O:0.999960
more	O	O:0.999974
intuitive	O	O:0.999864
solution	O	O:0.999900
.	O	O:0.999756
	
As	O	O:0.999975
your	O	O:0.999852
`	O	O:0.999903
get_dummies	B-API	B-API:0.999824
`	O	O:0.999956
returns	O	O:0.999592
a	O	O:0.999983
df	O	O:0.999357
this	O	O:0.999977
will	O	O:0.999989
be	O	O:0.999998
aligned	O	O:0.999946
already	O	O:0.999891
with	O	O:0.999997
your	O	O:0.999991
existing	O	O:0.999945
df	O	O:0.999778
so	O	O:0.999987
just	O	O:0.999951
`	O	O:0.999996
concat	B-API	B-API:0.994682
`	O	O:0.999864
column-wise	O	O:0.983537
:	O	O:0.999977
#CODE	O	O:0.999509
	
You	O	O:0.999946
can	O	O:0.999988
drop	O	O:0.999130
the	O	O:0.999992
'	O	O:0.999956
cat	O	O:0.991650
'	O	O:0.999989
column	O	O:0.999995
by	O	O:0.999991
doing	O	O:0.999942
`	O	O:0.999782
df.drop	B-API	B-API:0.999177
(	O	O:0.999928
'	O	O:0.999917
cat	O	O:0.963150
'	O	O:0.999947
,	O	O:0.999978
axis=1	O	O:0.999799
)`	O	O:0.999642
	
You	O	O:0.999926
can	O	O:0.999992
see	O	O:0.999999
that	O	O:0.999998
the	O	O:0.999994
array	O	O:0.987561
is	O	O:0.999990
masked	O	O:0.958396
and	O	O:0.999998
that	O	O:0.999998
some	O	O:0.999952
of	O	O:0.999996
the	O	O:0.999992
first	O	O:0.999894
few	O	O:0.999997
rows	O	O:0.999990
show	O	O:0.996968
examples	O	O:0.999985
of	O	O:0.999927
`	O	O:0.999962
--	O	O:0.999858
`	O	O:0.999959
in	O	O:0.999955
there	O	O:0.999976
.	O	O:0.999793
	
So	O	O:0.999916
I	O	O:0.999779
drop	O	O:0.997107
the	O	O:0.999975
last	O	O:0.992749
field	O	O:0.988205
(	O	O:0.999839
`	O	O:0.999996
refGage	O	O:0.995905
`)	O	O:0.999962
and	O	O:0.999991
it	O	O:0.999959
works	O	O:0.999859
,	O	O:0.999997
so	O	O:0.999977
I	O	O:0.999814
think	O	O:0.999985
it's	O	O:0.999953
masked	O	O:0.994915
values	O	O:0.993696
which	O	O:0.999992
only	O	O:0.999999
appear	O	O:0.999989
in	O	O:0.999999
that	O	O:0.999990
field	O	O:0.992995
.	O	O:0.999883
	
I	O	O:0.999572
used	O	O:0.999988
df.ix()	B-API	B-API:0.966813
to	O	O:0.999960
replace	O	O:0.998000
the	O	O:0.999997
filled-in	O	O:0.999859
tokens	O	O:0.999708
for	O	O:0.999994
what	O	O:0.999922
was	O	O:0.999953
masked	O	O:0.987060
out	O	O:0.999900
.	O	O:0.999749
	
Next	O	O:0.999702
,	O	O:0.999984
you	O	O:0.999993
can	O	O:0.999992
use	O	O:0.999962
a	O	O:0.999993
dictionary	O	O:0.999952
comprehension	O	O:0.999988
together	O	O:0.999932
with	O	O:0.999961
`	O	O:0.999960
loc	B-API	B-API:0.891449
`	O	O:0.999996
to	O	O:0.999938
select	O	O:0.999430
the	O	O:0.999995
relevant	O	O:0.999856
`	O	O:0.999995
group_no	O	O:0.909350
`	O	O:0.999985
dataframe	O	O:0.961792
.	O	O:0.999903
	
To	O	O:0.999938
get	O	O:0.999820
the	O	O:0.999998
last	O	O:0.998705
group	O	O:0.997007
number	O	O:0.999988
,	O	O:0.999995
I	O	O:0.999977
get	O	O:0.999321
the	O	O:0.999994
last	O	O:0.998630
value	O	O:0.999998
using	O	O:0.999963
`	O	O:0.999904
iat	B-API	B-API:0.997575
`	O	O:0.999989
for	O	O:0.999965
location	O	O:0.999996
based	O	O:0.999763
indexing	O	O:0.999936
.	O	O:0.999613
	
Then	O	O:0.999898
apply	O	O:0.900946
your	O	O:0.999437
method	O	O:0.999541
:	O	O:0.999961
#CODE	O	O:0.999710
	
Notice	O	O:0.999897
that	O	O:0.999991
if	O	O:0.999998
you	O	O:0.999991
unstack	B-API	B-API:0.824714
the	O	O:0.999973
`	O	O:0.999947
id	O	O:0.992899
`	O	O:0.999995
index	O	O:0.999354
level	O	O:0.999999
of	O	O:0.999989
`	O	O:0.999988
df	O	O:0.999091
`	O	O:0.999995
then	O	O:0.999963
you	O	O:0.999998
get	O	O:0.992483
:	O	O:0.999983
#CODE	O	O:0.999869
	
I'm	O	O:0.999435
not	O	O:0.999984
used	O	O:0.999991
to	O	O:0.999990
working	O	O:0.999993
with	O	O:0.999992
`	O	O:0.999989
lists	O	O:0.997900
`	O	O:0.999995
in	O	O:0.999993
columns	O	O:0.999994
of	O	O:0.999988
Pandas	O	O:0.999837
and	O	O:0.999996
don't	O	O:0.999980
know	O	O:0.999982
how	O	O:0.999997
to	O	O:0.999983
get	O	O:0.999965
the	O	O:0.999998
intersection	O	O:0.996942
of	O	O:0.999991
`	O	O:0.999981
lists	O	O:0.998069
`	O	O:0.999991
from	O	O:0.999989
two	O	O:0.999998
columns	O	O:0.999959
in	O	O:0.999998
a	O	O:0.999958
`	O	O:0.999947
dataframe	O	O:0.943712
`	O	O:0.999996
,	O	O:0.999991
then	O	O:0.999998
get	O	O:0.999754
the	O	O:0.999999
index	O	O:0.999907
of	O	O:0.999998
where	O	O:0.999727
the	O	O:0.999999
words	O	O:0.999988
appear	O	O:0.999988
,	O	O:0.999999
then	O	O:0.999999
apply	O	O:0.981741
plus	O	O:0.999996
signs	O	O:0.999904
to	O	O:0.999995
the	O	O:1.000000
front	O	O:0.999991
of	O	O:0.999997
each	O	O:0.999741
found	O	O:0.999948
index	O	O:0.997159
.	O	O:0.999820
	
Or	O	O:0.999970
maybe	O	O:0.999977
easier	O	O:0.999922
would	O	O:0.999991
be	O	O:0.999999
a	O	O:0.999997
string	O	O:0.999412
replacement	O	O:0.999998
on	O	O:0.999973
`	O	O:0.999991
df	O	O:0.998919
[	O	O:0.999926
'	O	O:0.999900
Keyword	O	O:0.999961
']`	O	O:0.999961
using	O	O:0.999991
the	O	O:0.999953
words	O	O:0.999908
from	O	O:0.999959
`	O	O:0.999984
StemmedAG	O	O:0.993150
`	O	O:0.999966
?	O	O:0.999382
	
You	O	O:0.999925
can	O	O:0.999987
use	O	O:0.999244
`	O	O:0.999926
pivot	B-API	B-API:0.990802
`	O	O:0.999981
#CODE	O	O:0.995341
	
Cool	O	O:0.998888
I	O	O:0.999732
didn't	O	O:0.999975
know	O	O:0.999962
about	O	O:0.999943
pivot	B-API	B-API:0.928237
either	O	O:0.999938
...	O	O:0.998989
	
Instead	O	O:0.999984
of	O	O:0.999991
creating	O	O:0.999965
it	O	O:0.999986
,	O	O:0.999995
we	O	O:0.999998
can	O	O:0.999997
append	O	O:0.987498
it	O	O:0.999992
to	O	O:0.999996
initial	O	O:0.999967
StartDate	O	O:0.998791
.	O	O:0.999461
	
However	O	O:0.999707
,	O	O:0.999988
the	O	O:0.999995
DptCityDptCountry	O	O:0.996386
might	O	O:0.999991
be	O	O:0.999989
different	O	O:0.999993
but	O	O:0.999977
if	O	O:0.999996
another	O	O:0.999959
ID	O	O:0.999794
matches	O	O:0.999854
with	O	O:0.999992
the	O	O:0.999871
StartDate	O	O:0.998291
and	O	O:0.999997
DptCityDptCountry	O	O:0.999305
,	O	O:0.999987
it	O	O:0.999979
will	O	O:0.999994
be	O	O:0.999999
added	O	O:0.999990
up	O	O:0.999726
i.e.	O	O:0.999881
#CODE	O	O:0.998414
	
Then	O	O:0.999935
use	O	O:0.997617
apply	B-API	B-API:0.948372
and	O	O:0.999944
return	O	O:0.999933
a	O	O:0.999823
series	O	O:0.999992
indexed	O	O:0.999982
on	O	O:0.999996
the	O	O:0.999997
expanded	O	O:0.999996
set	O	O:0.999763
of	O	O:0.999997
dates	O	O:0.978085
for	O	O:0.999999
each	O	O:0.999827
row	O	O:0.999656
(	O	O:0.999982
Series	O	O:0.997116
of	O	O:0.999964
Series	O	O:0.993128
=	O	O:0.999980
DataFrame	O	O:0.993531
)	O	O:0.999945
.	O	O:0.999526
	
So	O	O:0.999952
for	O	O:0.999997
each	O	O:0.999966
of	O	O:0.999990
the	O	O:0.999997
7	O	O:0.999996
rows	O	O:0.999958
in	O	O:0.999989
the	O	O:0.999996
DataFrame	O	O:0.998496
,	O	O:0.999994
I	O	O:0.999958
get	O	O:0.999683
a	O	O:0.999979
series	O	O:0.999998
indexed	O	O:0.999987
on	O	O:0.999997
the	O	O:0.999998
expanded	O	O:0.999944
date	O	O:0.977832
range	O	O:0.999971
.	O	O:0.999783
	
Then	O	O:0.999969
its	O	O:0.999999
just	O	O:0.999990
clever	O	O:0.999985
stacking	O	O:0.999890
,	O	O:0.999984
naming	O	O:0.999757
,	O	O:0.999934
and	O	O:0.999968
reset_index	B-API	B-API:0.992570
.	O	O:0.998849
	
Also	O	O:0.999843
,	O	O:0.999998
if	O	O:0.999993
you	O	O:0.999998
want	O	O:0.999998
to	O	O:0.999998
have	O	O:1.000000
the	O	O:0.999998
ticklabels	O	O:0.999977
/	O	O:0.999997
tickmarks	O	O:0.999973
of	O	O:0.999986
the	O	O:0.999982
x-axis	O	O:0.999996
connected	O	O:0.999970
to	O	O:0.999997
the	O	O:0.999998
"	O	O:0.999978
middle	O	O:0.999858
axis	O	O:0.983223
"	O	O:0.999752
(	O	O:0.999945
also	O	O:0.999974
while	O	O:0.999986
panning	O	O:0.999343
/	O	O:0.999966
zooming	O	O:0.999754
)	O	O:0.999970
,	O	O:0.999989
then	O	O:0.999984
it's	O	O:0.999993
easiest	O	O:0.999978
to	O	O:0.999996
insert	O	O:0.999251
an	O	O:0.999998
extra	O	O:0.999776
spine	O	O:0.999978
;	O	O:0.999969
take	O	O:0.997539
a	O	O:0.999995
look	O	O:0.999943
at	O	O:0.995572
[	O	O:0.999629
`	O	O:0.999981
mpl_toolkits.axisartist	B-API	B-API:0.791848
`]	O	O:0.989755
(	O	O:0.999974
#URL	O	O:0.999731
)	O	O:0.999979
for	O	O:0.999998
some	O	O:0.999972
examples	O	O:0.999876
of	O	O:0.999989
this	O	O:0.999961
.	O	O:0.999948
	
print	O	O:0.996715
(	O	O:0.999799
'	O	O:0.999741
Stock	O	O:0.998891
:	O	O:0.999755
'	O	O:0.999956
,	O	O:0.999994
col	O	O:0.999795
,	O	O:0.999964
'	O	O:0.999961
max	O	O:0.897369
diff	B-API	B-API:0.936335
:	O	O:0.999799
'	O	O:0.999915
,	O	O:0.999987
sl.max()	O	O:0.986975
-	O	O:0.999988
sl.min()	O	O:0.994023
)`	O	O:0.999803
	
Then	O	O:0.999992
merge	O	O:0.986218
back	O	O:0.995636
to	O	O:0.999998
the	O	O:1.000000
original	O	O:0.999983
dataframe	O	O:0.999736
to	O	O:0.999994
have	O	O:1.000000
your	O	O:0.999997
aggregates	O	O:0.999937
displayed	O	O:0.999975
against	O	O:0.999987
each	O	O:0.998947
row	O	O:0.999804
:	O	O:0.999965
#CODE	O	O:0.999575
	
Unfortunately	O	O:0.999493
im	O	O:0.999968
getting	O	O:0.999981
an	O	O:0.999956
issue	O	O:0.999974
when	O	O:0.999990
trying	O	O:0.999974
to	O	O:0.999997
do	O	O:0.999999
the	O	O:0.999990
rename	O	O:0.929319
.	O	O:0.999927
	
The	O	O:0.999894
true	O	O:0.999600
/	O	O:0.999982
false	O	O:0.999937
column	O	O:0.999962
does	O	O:0.999989
not	O	O:0.999991
have	O	O:0.999999
a	O	O:0.999998
column	O	O:0.999984
name	O	O:0.997792
,	O	O:0.999995
so	O	O:0.999991
how	O	O:0.999976
would	O	O:0.999991
I	O	O:0.999988
rename	O	O:0.997825
it	O	O:0.999936
and	O	O:1.000000
then	O	O:0.999997
merge	O	O:0.981716
it	O	O:0.999997
back	O	O:0.997115
into	O	O:0.999989
the	O	O:0.999985
original	O	O:0.999852
dataframe	O	O:0.997439
?	O	O:0.999895
	
I	O	O:0.999774
am	O	O:0.999983
using	O	O:0.999981
the	O	O:0.999975
below	O	O:0.999735
code	O	O:0.999982
which	O	O:0.999981
gives	O	O:0.999978
me	O	O:0.999973
the	O	O:0.999996
summary	O	O:0.992795
of	O	O:0.999998
count	O	O:0.982254
in	O	O:1.000000
the	O	O:0.999984
pivot	O	O:0.960304
table	O	O:0.997805
,	O	O:0.999983
#CODE	O	O:0.999721
	
but	O	O:0.999970
what	O	O:0.999973
i	O	O:0.999975
want	O	O:0.999968
is	O	O:0.999958
the	O	O:0.999980
%	O	O:0.999989
of	O	O:0.999991
row	O	O:0.999976
calculation	O	O:0.999999
as	O	O:0.999983
in	O	O:0.999995
excel	O	O:0.999899
pivot	O	O:0.928816
when	O	O:0.999988
you	O	O:0.999992
right	O	O:0.999990
click	O	O:0.999985
the	O	O:0.999991
pivot	O	O:0.892361
and	O	O:0.999999
select	O	O:0.973670
"	O	O:0.999987
show	O	O:0.987837
value	O	O:0.999983
as	O	O:0.999926
->	O	O:0.999860
%	O	O:0.999981
of	O	O:0.999926
Row	O	O:0.999902
Total	O	O:0.999842
"	O	O:0.999830
.	O	O:0.998924
	
Since	O	O:0.999787
my	O	O:0.999824
Document	O	O:0.999939
is	O	O:0.999994
a	O	O:0.999987
non-numeric	O	O:0.999279
value	O	O:0.999974
i	O	O:0.999567
was	O	O:0.999987
not	O	O:0.999976
able	O	O:0.999997
to	O	O:0.999996
get	O	O:0.999887
it	O	O:0.999991
.	O	O:0.999934
	
i	O	O:0.999705
am	O	O:0.999995
trying	O	O:0.999971
to	O	O:0.999996
manipulate	O	O:0.999998
the	O	O:0.999997
pivot	O	O:0.977443
data	O	O:0.999662
which	O	O:0.999994
will	O	O:0.999998
give	O	O:0.999993
me	O	O:0.999987
the	O	O:0.999989
row	O	O:0.999988
total	O	O:0.999931
,	O	O:0.999981
not	O	O:0.999998
the	O	O:0.999999
data	O	O:0.998690
from	O	O:0.999998
the	O	O:0.999994
dataframe	O	O:0.993021
and	O	O:0.999999
what	O	O:0.999991
i	O	O:0.999871
wanted	O	O:0.999960
is	O	O:0.999733
"	O	O:0.999952
%	O	O:0.999963
of	O	O:0.999964
row	O	O:0.999963
total	O	O:0.999909
"	O	O:0.999866
.	O	O:0.998974
	
you	O	O:0.999914
can	O	O:0.999991
actually	O	O:1.000000
just	O	O:0.999999
pass	O	O:0.999945
`	O	O:0.999964
aggfunc=len	O	O:0.993034
`	O	O:0.999971
,	O	O:0.999933
since	O	O:0.999982
`	O	O:0.999951
len	B-API	B-API:0.915325
`	O	O:0.999881
is	O	O:0.999631
already	O	O:0.999992
a	O	O:0.999880
function	O	O:0.975596
:)	O	O:0.999758
	
Hi	O	O:0.999852
maxymoo	O	O:0.999520
in	O	O:0.999991
the	O	O:0.999983
link	O	O:0.999989
you	O	O:0.999998
have	O	O:0.999998
given	O	O:0.999989
they	O	O:0.999993
are	O	O:0.999998
manipulating	O	O:0.999990
one	O	O:0.999984
of	O	O:0.999998
the	O	O:0.999996
column	O	O:0.999998
from	O	O:0.999996
the	O	O:0.999994
dataframe	O	O:0.993583
,	O	O:0.999994
but	O	O:0.999995
my	O	O:0.999965
question	O	O:0.999805
is	O	O:0.999995
different	O	O:0.999909
i	O	O:0.999806
am	O	O:0.999994
trying	O	O:0.999960
to	O	O:0.999996
manipulate	O	O:0.999998
the	O	O:0.999997
pivot	O	O:0.977443
data	O	O:0.999662
which	O	O:0.999994
will	O	O:0.999998
give	O	O:0.999993
me	O	O:0.999982
the	O	O:0.999988
row	O	O:0.999972
total	O	O:0.999846
and	O	O:0.999997
what	O	O:0.999988
i	O	O:0.999816
wanted	O	O:0.999961
is	O	O:0.999733
"	O	O:0.999952
%	O	O:0.999963
of	O	O:0.999964
row	O	O:0.999963
total	O	O:0.999909
"	O	O:0.999866
.	O	O:0.998974
	
Then	O	O:0.999955
you	O	O:0.999999
can	O	O:1.000000
basically	O	O:0.999999
use	O	O:0.999889
the	O	O:0.999956
solution	O	O:0.999902
@USER	O	O:0.999900
linked	O	O:0.999887
to	O	O:0.999951
,	O	O:0.999999
but	O	O:0.999997
you	O	O:0.999994
need	O	O:0.999999
to	O	O:0.999997
use	O	O:0.999311
`	O	O:0.999954
iloc	B-API	B-API:0.995434
`	O	O:0.999985
or	O	O:0.999935
similar	O	O:0.999991
b	O	O:0.999954
/	O	O:0.999961
c	O	O:0.999822
the	O	O:0.999996
table	O	O:0.998401
columns	O	O:0.999983
are	O	O:0.999999
a	O	O:0.999997
little	O	O:0.999779
complicated	O	O:0.999945
now	O	O:0.999749
(	O	O:0.999991
being	O	O:0.999974
a	O	O:0.999996
multi-indexed	O	O:0.999818
result	O	O:0.999994
of	O	O:0.999997
the	O	O:0.999974
pivot	O	O:0.992235
table	O	O:0.997923
)	O	O:0.999975
.	O	O:0.999807
	
Unfortunately	O	O:0.999531
,	O	O:0.999997
if	O	O:0.999990
I	O	O:0.999891
try	O	O:0.999994
to	O	O:0.999973
resample	O	O:0.947401
,	O	O:0.999987
I	O	O:0.999953
get	O	O:0.999696
an	O	O:0.999935
error	O	O:0.999967
#CODE	O	O:0.999380
	
Are	O	O:0.999927
you	O	O:0.999989
ask	O	O:0.999940
for	O	O:0.999999
a	O	O:0.999990
process	O	O:0.980787
to	O	O:0.999995
interpolate	O	O:0.991647
,	O	O:0.999979
or	O	O:0.999999
a	O	O:0.999996
process	O	O:0.987030
to	O	O:0.999998
aggregate	O	O:0.948066
,	O	O:0.999981
or	O	O:0.999986
both	O	O:0.999960
?	O	O:0.999906
	
Firstly	O	O:0.999770
,	O	O:0.999988
prepare	O	O:0.999983
a	O	O:0.999954
function	O	O:0.999340
to	O	O:0.999981
map	O	O:0.967975
the	O	O:0.999992
day	O	O:0.998719
to	O	O:0.999989
week	O	O:0.999632
#CODE	O	O:0.999763
	
Assume	O	O:0.999893
now	O	O:0.999990
your	O	O:0.999994
initialized	O	O:0.999942
new	O	O:0.999973
dataframe	O	O:0.985200
is	O	O:0.999979
`	O	O:0.999976
result	O	O:0.999572
`	O	O:0.999988
,	O	O:0.999956
you	O	O:0.999998
can	O	O:0.999998
now	O	O:0.999999
do	O	O:1.000000
a	O	O:0.999991
join	B-API	B-API:0.922105
#CODE	O	O:0.999184
	
The	O	O:0.999689
`	O	O:0.999892
Nan	O	O:0.966939
`	O	O:0.999916
is	O	O:0.999956
what	O	O:0.999991
you	O	O:0.999994
need	O	O:0.999999
to	O	O:0.999993
interpolate	O	O:0.976339
.	O	O:0.999779
	
Turns	O	O:0.999740
out	O	O:0.999965
the	O	O:0.999989
key	O	O:0.999914
is	O	O:0.999995
to	O	O:0.999990
resample	O	O:0.990453
a	O	O:0.999913
groupby	B-API	B-API:0.998193
object	O	O:0.999978
like	O	O:0.999862
so	O	O:0.999831
:	O	O:0.999931
#CODE	O	O:0.999759
	
Then	O	O:0.999921
,	O	O:0.999998
I	O	O:0.999982
append	O	O:0.969371
a	O	O:0.999960
row	O	O:0.999991
of	O	O:0.999999
missing	O	O:0.999816
values	O	O:0.996108
.	O	O:0.999740
	
Finally	O	O:0.999562
,	O	O:0.999978
I	O	O:0.999961
can	O	O:0.999999
insert	O	O:0.998205
values	O	O:0.997909
into	O	O:0.999969
this	O	O:0.999983
DataFrame	O	O:0.999166
one	O	O:0.999995
cell	O	O:0.999991
at	O	O:0.999743
a	O	O:0.999965
time	O	O:0.982460
.	O	O:0.999824
	
This	O	O:0.999700
approach	O	O:0.999696
works	O	O:0.999971
perfectly	O	O:0.999961
fine	O	O:0.999962
,	O	O:0.999988
with	O	O:0.999999
the	O	O:0.999988
exception	O	O:0.999986
that	O	O:0.999998
the	O	O:0.999993
append	B-API	B-API:0.941163
statement	O	O:0.999980
inserts	O	O:0.999960
an	O	O:0.999997
additional	O	O:0.999968
column	O	O:0.999991
to	O	O:0.999983
my	O	O:0.999989
DataFrame	O	O:0.994209
.	O	O:0.999887
	
The	O	O:0.999928
append	B-API	B-API:0.983479
is	O	O:0.999975
trying	O	O:0.999988
to	O	O:0.999995
append	O	O:0.991167
a	O	O:0.999990
column	O	O:0.999980
to	O	O:0.999998
your	O	O:0.999996
dataframe	O	O:0.990781
.	O	O:0.999893
	
The	O	O:0.999870
column	O	O:0.999993
it	O	O:0.999974
is	O	O:0.999993
trying	O	O:0.999991
to	O	O:0.999994
append	B-API	B-API:0.857271
is	O	O:0.999934
not	O	O:0.999976
named	O	O:0.999868
and	O	O:0.999979
has	O	O:0.999938
two	O	O:0.999868
None	O	O:0.999847
/	O	O:0.999966
Nan	O	O:0.998630
elements	O	O:0.999844
in	O	O:0.999995
it	O	O:0.999985
which	O	O:0.999994
pandas	O	O:0.999953
will	O	O:0.999977
name	O	O:0.989119
(	O	O:0.999996
by	O	O:0.999979
default	O	O:0.999928
)	O	O:0.999991
as	O	O:0.999983
column	O	O:0.999992
named	O	O:0.999858
0	O	O:0.999659
.	O	O:0.999365
	
In	O	O:0.999963
order	O	O:0.994384
to	O	O:0.999985
do	O	O:0.999999
this	O	O:0.999994
successfully	O	O:0.999885
,	O	O:0.999997
the	O	O:0.999997
column	O	O:0.999995
names	O	O:0.999699
coming	O	O:0.999977
into	O	O:0.999994
the	O	O:0.999992
append	B-API	B-API:0.869796
for	O	O:0.999996
the	O	O:0.999998
data	O	O:0.999162
frame	O	O:0.999999
must	O	O:0.999998
be	O	O:0.999998
consistent	O	O:0.999981
with	O	O:0.999979
the	O	O:0.999993
current	O	O:0.999991
data	O	O:0.999859
frame	O	O:1.000000
column	O	O:0.999999
names	O	O:0.999063
or	O	O:0.999996
else	O	O:0.999996
new	O	O:0.999994
columns	O	O:0.999969
will	O	O:0.999993
be	O	O:0.999998
created	O	O:0.999856
(	O	O:0.999973
by	O	O:0.999961
default	O	O:0.999693
)	O	O:0.999968
#CODE	O	O:0.997933
	
have	O	O:0.999983
merged	O	O:0.999965
2	O	O:0.999986
dataframes	O	O:0.999831
with	O	O:0.999997
left	O	O:0.999776
join	B-API	B-API:0.943156
.	O	O:0.999666
works	O	O:0.999991
as	O	O:0.999983
I	O	O:0.999628
expected	O	O:0.999993
until	O	O:0.999735
I	O	O:0.999958
attempt	O	O:0.999995
to	O	O:0.999957
use	O	O:0.999874
the	O	O:0.999993
generated	O	O:0.999945
value	O	O:0.999986
in	O	O:0.999996
a	O	O:0.999992
simple	O	O:0.999153
string	O	O:0.999935
concatenation	O	O:0.999872
.	O	O:0.999808
	
I	O	O:0.999618
am	O	O:0.999990
ultimately	O	O:0.999980
trying	O	O:0.999999
to	O	O:0.999995
merge	O	O:0.986509
two	O	O:0.999995
dataframes	O	O:0.999984
together	O	O:0.999708
,	O	O:0.999991
but	O	O:0.999968
I	O	O:0.999739
am	O	O:0.999992
running	O	O:0.999867
into	O	O:0.999972
an	O	O:0.999948
issue	O	O:0.999975
when	O	O:0.999966
I	O	O:0.999838
try	O	O:0.999999
to	O	O:0.999968
specify	O	O:0.999999
the	O	O:0.999997
column	O	O:0.999997
on	O	O:0.999997
which	O	O:0.999989
they	O	O:0.999992
should	O	O:0.999996
be	O	O:0.999994
merged	O	O:0.999913
.	O	O:0.999590
	
Conform	O	O:0.998743
the	O	O:0.999975
index	O	O:0.999421
to	O	O:0.999999
another	O	O:0.999995
frequency	O	O:0.999980
.	O	O:0.999668
	
Then	O	O:0.999983
its	O	O:0.999997
straightforward	O	O:0.999992
to	O	O:0.999997
resample	O	O:0.976518
to	O	O:0.999998
another	O	O:0.999987
frequency	O	O:0.999976
.	O	O:0.999656
	
In	O	O:0.999957
the	O	O:0.999994
second	O	O:0.995026
chunk	O	O:0.999983
you	O	O:0.999975
are	O	O:0.999997
resampling	O	O:0.999502
and	O	O:0.999999
the	O	O:0.999990
result	O	O:0.999361
is	O	O:0.999997
a	O	O:0.999979
Series	O	O:0.998511
of	O	O:0.999995
monthly	O	O:0.999052
frequency	O	O:0.999990
so	O	O:0.999980
it	O	O:0.999991
would	O	O:0.999998
appear	O	O:0.999997
that	O	O:0.999999
the	O	O:0.999998
daily	O	O:0.999709
information	O	O:0.999947
is	O	O:0.999961
lost	O	O:0.999730
.	O	O:0.999745
	
Then	O	O:0.999961
you	O	O:0.999998
resample	O	O:0.886115
and	O	O:0.999997
somehow	O	O:0.999999
the	O	O:0.999990
days	O	O:0.994212
are	O	O:0.999992
there	O	O:0.999971
?	O	O:0.999914
	
I	O	O:0.999839
want	O	O:0.999993
to	O	O:0.999857
use	O	O:0.999958
a	O	O:0.999969
combination	O	O:0.999988
of	O	O:0.999968
map	B-API	B-API:0.964331
&	O	O:0.999997
lambda	O	O:0.999858
functions	O	O:0.999950
to	O	O:0.999945
do	O	O:0.999998
this	O	O:0.999961
	
the	O	O:0.999825
map	B-API	B-API:0.985697
function	O	O:0.997156
does	O	O:0.999989
not	O	O:0.999998
append	O	O:0.945573
to	O	O:0.999912
NN	O	O:0.999951
.	O	O:0.999765
	
Have	O	O:0.999926
you	O	O:0.999987
tried	O	O:0.999990
using	O	O:0.999979
`	O	O:0.999747
concat	B-API	B-API:0.998989
`	O	O:0.999799
and	O	O:0.999990
a	O	O:0.999995
generator	O	O:0.999648
expression	O	O:0.999820
instead	O	O:0.999906
:	O	O:0.999944
#CODE	O	O:0.999696
	
Can	O	O:0.999945
Pandas	O	O:0.999995
find	O	O:0.997822
all	O	O:0.999517
the	O	O:0.999995
lines	O	O:0.996588
that	O	O:0.999996
join	O	O:0.964217
any	O	O:0.998863
pair	O	O:0.999991
of	O	O:0.999985
dots	O	O:0.999608
and	O	O:0.999997
don't	O	O:0.999986
intersect	O	O:0.999974
any	O	O:0.998672
of	O	O:0.999990
the	O	O:0.999997
given	O	O:0.999989
lines	O	O:0.998476
without	O	O:0.999966
iteration	O	O:0.999941
?	O	O:0.999673
	
I'm	O	O:0.999676
a	O	O:0.999973
Stata	O	O:0.999035
user	O	O:0.999900
and	O	O:0.999970
in	O	O:0.999991
Stata	O	O:0.999068
,	O	O:0.999971
I'd	O	O:0.999978
be	O	O:0.999994
using	O	O:0.999991
replace	B-API	B-API:0.897684
command	O	O:0.999938
conditional	O	O:0.999369
on	O	O:0.999945
regexm	O	O:0.997919
.	O	O:0.999881
	
I'm	O	O:0.999750
trying	O	O:0.999958
to	O	O:0.999980
learn	O	O:0.999945
Python	O	O:0.999481
and	O	O:0.999981
it's	O	O:0.999846
been	O	O:0.999956
a	O	O:0.999990
difficult	O	O:0.999384
journey	O	O:0.999961
!	O	O:0.999753
	
We	O	O:0.999976
then	O	O:0.999996
apply	O	O:0.992054
another	O	O:0.999860
function	O	O:0.997097
to	O	O:0.999997
this	O	O:0.999999
that	O	O:0.999987
converts	O	O:0.999982
the	O	O:0.999998
str	O	O:0.984950
numbers	O	O:0.999949
to	O	O:0.999990
ints	O	O:0.999977
,	O	O:0.999982
puts	O	O:0.999974
these	O	O:0.999930
in	O	O:0.999987
a	O	O:0.999978
list	O	O:0.974753
and	O	O:0.999990
returns	O	O:0.999951
the	O	O:0.999974
smallest	O	O:0.999626
value	O	O:0.999903
:	O	O:0.999951
#CODE	O	O:0.999740
	
this	O	O:0.999614
is	O	O:0.999992
an	O	O:0.999970
approach	O	O:0.999990
that	O	O:0.999949
I	O	O:0.999679
hadn't	O	O:0.999979
thought	O	O:0.999594
about	O	O:0.999932
and	O	O:0.999994
one	O	O:0.999995
that	O	O:0.999900
I'm	O	O:0.999962
likely	O	O:0.999975
to	O	O:0.999997
employ	O	O:0.999965
down	O	O:0.999942
the	O	O:0.999906
road	O	O:0.999976
.	O	O:0.999984
for	O	O:0.999991
age	O	O:0.999915
,	O	O:0.999976
I	O	O:0.999861
wanted	O	O:0.999984
the	O	O:0.999928
series	O	O:0.999978
[	O	O:0.999981
62	O	O:0.999903
,	O	O:0.999954
55	O	O:0.999784
,	O	O:0.999983
67	O	O:0.999915
]	O	O:0.999937
at	O	O:0.995725
the	O	O:0.999997
end	O	O:0.999918
,	O	O:0.999969
and	O	O:0.999999
the	O	O:0.999987
problem	O	O:0.999442
I'm	O	O:0.999984
having	O	O:0.999962
now	O	O:0.999826
is	O	O:0.999992
that	O	O:0.999956
I	O	O:0.999906
can't	O	O:0.999993
target	O	O:0.999899
just	O	O:0.999985
row2	O	O:0.999966
when	O	O:0.999963
I	O	O:0.999935
apply	O	O:0.978369
split	B-API	B-API:0.917038
(	O	O:0.999736
'	O	O:0.999891
')	O	O:0.999802
.	O	O:0.999357
	
return	O	O:0.999261
min	B-API	B-API:0.949634
(	O	O:0.999818
list	O	O:0.986459
(	O	O:0.999723
map	B-API	B-API:0.973071
(	O	O:0.999950
int	O	O:0.999193
,	O	O:0.999979
x	O	O:0.999923
)))`	O	O:0.999806
to	O	O:0.999950
`	O	O:0.999999
def	O	O:0.999565
highest	O	O:0.999746
(	O	O:0.999892
x	O	O:0.998083
):	O	O:0.999710
	
return	O	O:0.999262
max	B-API	B-API:0.956404
(	O	O:0.999800
list	O	O:0.986321
(	O	O:0.999716
map	B-API	B-API:0.973669
(	O	O:0.999950
int	O	O:0.999132
,	O	O:0.999979
x	O	O:0.999830
)))`	O	O:0.999471
	
I	O	O:0.999846
want	O	O:0.999993
to	O	O:0.999956
apply	O	O:0.979934
df	O	O:0.999228
[	O	O:0.999889
'	O	O:0.999931
age	O	O:0.999747
']	O	O:0.999939
=d	O	O:0.999524
f	O	O:0.960244
[	O	O:0.999833
'	O	O:0.999958
e0	O	O:0.999597
']	O	O:0.999696
[(	O	O:0.999611
df	O	O:0.998081
[	O	O:0.999819
'	O	O:0.999931
e0	O	O:0.999576
']	O	O:0.999401
.str	B-API	B-API:0.991280
.match	B-API	B-API:0.989516
(	O	O:0.999693
pattern7	O	O:0.998032
)=	O	O:0.999678
=1	O	O:0.999836
)]	O	O:0.998854
.apply	B-API	B-API:0.999240
(	O	O:0.999954
lambda	O	O:0.999386
x	O	O:0.998962
:	O	O:0.999810
str	O	O:0.963885
(	O	O:0.999985
x	O	O:0.999899
)	O	O:0.999871
.split	B-API	B-API:0.993343
(	O	O:0.999835
'	O	O:0.999915
')	O	O:0.999825
[	O	O:0.999871
1	O	O:0.999855
])	O	O:0.999920
to	O	O:0.999995
only	O	O:1.000000
rows	O	O:0.999997
for	O	O:0.999997
which	O	O:0.999988
df	O	O:0.999035
[	O	O:0.999950
'	O	O:0.999922
e0	O	O:0.999581
']	O	O:0.999401
.str	B-API	B-API:0.991280
.match	B-API	B-API:0.989516
(	O	O:0.999726
pattern7	O	O:0.998219
)=	O	O:0.999718
=1	O	O:0.999706
)	O	O:0.999990
so	O	O:0.999976
as	O	O:0.999978
to	O	O:0.999985
not	O	O:0.999998
overwrite	O	O:0.999979
what	O	O:0.999912
was	O	O:0.999928
already	O	O:0.999941
in	O	O:0.999996
the	O	O:0.999991
age	O	O:0.999576
column	O	O:0.999990
...	O	O:0.999665
	
Suppose	O	O:0.999836
I	O	O:0.999934
have	O	O:0.999998
two	O	O:0.999955
DataFrames	O	O:0.999966
a	O	O:0.999986
b	O	O:0.999651
where	O	O:0.999544
a	O	O:0.999906
is	O	O:0.999940
larger	O	O:0.999833
than	O	O:0.999934
b	O	O:0.998380
and	O	O:0.999989
has	O	O:0.999992
all	O	O:0.984951
NaNs	O	O:0.999838
.	O	O:0.999618
	
I	O	O:0.999895
wish	O	O:0.999997
to	O	O:0.999974
merge	O	O:0.994696
the	O	O:0.999997
values	O	O:0.997825
from	O	O:0.999997
b	O	O:0.999969
into	O	O:0.999978
a	O	O:0.999865
.	O	O:0.997921
	
the	O	O:0.999943
w	O	O:0.999810
variable	O	O:0.999969
will	O	O:0.999986
not	O	O:0.999998
surpass	O	O:0.999914
len	B-API	B-API:0.976413
(	O	O:0.999971
seq	O	O:0.999212
)	O	O:0.999947
.	O	O:0.999225
	
For	O	O:0.999920
example	O	O:0.999944
instead	O	O:0.999997
of	O	O:0.999997
looping	O	O:0.999889
trough	O	O:0.999986
every	O	O:0.999913
element	O	O:0.999949
in	O	O:0.999998
a	O	O:0.999984
numpy	O	O:0.999877
array	O	O:0.996120
to	O	O:0.999989
do	O	O:0.999999
some	O	O:0.999988
processing	O	O:0.999946
you	O	O:0.999992
can	O	O:0.999995
apply	O	O:0.991092
a	O	O:0.999992
numpy	O	O:0.999589
function	O	O:0.999183
directly	O	O:0.999937
on	O	O:0.999991
the	O	O:0.999982
array	O	O:0.998537
and	O	O:0.999998
get	O	O:0.999947
the	O	O:0.999989
results	O	O:0.999995
in	O	O:0.999998
seconds	O	O:0.993422
rather	O	O:0.999996
than	O	O:0.999974
hours	O	O:0.991386
.	O	O:0.999975
as	O	O:0.999996
an	O	O:0.999819
example	O	O:0.998816
:	O	O:0.999937
#CODE	O	O:0.999602
	
Computing	O	O:0.998919
`	O	O:0.999681
len	B-API	B-API:0.992948
(	O	O:0.999984
seq	O	O:0.999926
)`	O	O:0.999929
inside	O	O:0.999866
the	O	O:0.999974
loop	O	O:0.999392
is	O	O:0.999992
not	O	O:0.999988
necessary	O	O:0.999993
,	O	O:0.999995
since	O	O:0.999998
its	O	O:0.999977
value	O	O:0.999982
is	O	O:0.999991
not	O	O:0.999973
changing	O	O:0.999882
.	O	O:0.998973
	
You	O	O:0.999795
don't	O	O:0.999989
really	O	O:0.999976
need	O	O:0.999996
the	O	O:0.999968
`	O	O:0.999994
if	O	O:0.999241
`	O	O:0.999980
statement	O	O:0.999975
,	O	O:0.999998
since	O	O:0.999972
in	O	O:0.999997
your	O	O:0.999994
code	O	O:0.999969
it	O	O:0.999997
always	O	O:0.999989
evaluate	O	O:0.995283
to	O	O:0.999962
true	O	O:0.999939
(	O	O:0.999967
`	O	O:0.999998
w	O	O:0.999369
in	O	O:0.999984
range	O	O:0.999848
(	O	O:0.999878
len	B-API	B-API:0.981047
(	O	O:0.999934
seq	O	O:0.999879
))`	O	O:0.999514
means	O	O:0.999798
`	O	O:0.999985
w	O	O:0.995431
`	O	O:0.999997
maximium	O	O:0.999492
value	O	O:0.999991
will	O	O:0.999990
be	O	O:0.999992
`	O	O:0.999983
len	B-API	B-API:0.997395
(	O	O:0.999980
seq	O	O:0.999817
)	O	O:0.999975
-1	O	O:0.997724
`)	O	O:0.999950
.	O	O:0.999125
	
I	O	O:0.999773
tried	O	O:0.999669
pivot	B-API	B-API:0.950635
but	O	O:0.999980
it	O	O:0.999946
returns	O	O:0.999987
an	O	O:0.999974
error	O	O:0.999787
	
Hmm	O	O:0.998729
My	O	O:0.999858
dataframe	O	O:0.993931
had	O	O:0.999992
12	O	O:0.999888
rows	O	O:0.999930
but	O	O:0.999997
when	O	O:0.999987
i	O	O:0.999920
tried	O	O:0.999997
the	O	O:0.999985
unstack	B-API	B-API:0.956904
operation	O	O:0.999964
the	O	O:0.999990
resulting	O	O:0.999965
dataframe	O	O:0.999219
has	O	O:0.999992
only	O	O:0.999997
6	O	O:0.999971
rows	O	O:0.999973
not	O	O:0.999985
exactly	O	O:0.999998
what	O	O:0.999977
i	O	O:0.999974
want.My	O	O:0.999692
resulting	O	O:0.999864
dataframe	O	O:0.997940
should	O	O:0.999994
also	O	O:0.999999
have	O	O:0.999999
12	O	O:0.999961
rows	O	O:0.999910
	
For	O	O:0.999904
example	O	O:0.999781
,	O	O:0.999994
say	O	O:0.999932
`	O	O:0.999990
Jul-03	O	O:0.997710
`	O	O:0.999995
data	O	O:0.994552
,	O	O:0.999997
row	O	O:0.999992
`	O	O:0.999980
0	O	O:0.999513
,	O	O:0.999989
6	O	O:0.999743
,	O	O:0.999974
9	O	O:0.999384
`	O	O:0.999969
are	O	O:0.999994
all	O	O:0.999833
records	O	O:0.999965
about	O	O:0.999985
the	O	O:0.999990
same	O	O:0.999825
`	O	O:0.999995
snapDate	O	O:0.995358
`	O	O:0.999995
with	O	O:0.999941
instance	O	O:0.999921
`	O	O:0.999987
XX	O	O:0.987228
`	O	O:0.999961
.	O	O:0.998686
	
So	O	O:0.999868
doing	O	O:0.999992
a	O	O:0.999941
pivot	B-API	B-API:0.941220
would	O	O:0.999988
reshape	O	O:0.954910
these	O	O:0.999996
3	O	O:0.999972
rows	O	O:0.999970
to	O	O:0.999996
only	O	O:1.000000
one	O	O:0.999998
row	O	O:0.999995
because	O	O:0.999997
those	O	O:0.999996
data	O	O:0.999749
have	O	O:0.999991
been	O	O:0.999983
moved	O	O:0.999990
to	O	O:0.999986
columns	O	O:0.999996
.	O	O:0.999888
	
Hi	O	O:0.999006
I	O	O:0.999854
went	O	O:0.999975
ahead	O	O:0.999641
and	O	O:0.999996
changed	O	O:0.993304
the	O	O:0.999972
datatype	O	O:0.999613
of	O	O:0.999996
AvgWaitInMs	O	O:0.999207
to	O	O:0.999995
int	O	O:0.999641
and	O	O:0.999997
the	O	O:0.999965
pivot	B-API	B-API:0.939988
worked	O	O:0.999767
	
What	O	O:0.999745
I	O	O:0.999664
would	O	O:0.999998
like	O	O:0.999994
to	O	O:0.999999
do	O	O:0.999989
is	O	O:0.999996
slice	O	O:0.995046
each	O	O:0.999994
group	O	O:0.991772
down	O	O:0.999986
to	O	O:0.999992
3	O	O:0.999982
hours	O	O:0.996592
max	O	O:0.962036
and	O	O:0.999998
append	O	O:0.938484
something	O	O:0.999798
to	O	O:0.999990
the	O	O:0.999997
6	O	O:0.999704
and	O	O:0.999997
9	O	O:0.999983
length	O	O:0.999976
groups	O	O:0.987694
to	O	O:0.999992
denote	O	O:0.999994
that	O	O:0.999998
it	O	O:0.999968
is	O	O:0.999998
the	O	O:0.999992
same	O	O:0.999964
page	O	O:0.999982
like	O	O:0.999991
the	O	O:0.999972
following	O	O:0.998390
:	O	O:0.999969
#CODE	O	O:0.999697
	
So	O	O:0.999889
,	O	O:0.999952
I	O	O:0.999946
truncated	O	O:0.999992
my	O	O:0.999965
data	O	O:0.999859
set	O	O:0.998689
in	O	O:0.999999
the	O	O:0.999993
question	O	O:0.999965
to	O	O:0.999991
make	O	O:1.000000
it	O	O:0.999996
easier	O	O:0.999896
to	O	O:0.999995
read	O	O:0.999980
and	O	O:0.999997
thinking	O	O:0.999989
that	O	O:0.999976
whatever	O	O:0.999989
solution	O	O:0.999974
came	O	O:0.999881
would	O	O:0.999995
also	O	O:0.999989
apply	O	O:0.940617
..	O	O:0.998615
	
If	O	O:0.999837
'	O	O:0.999983
data	O	O:0.996172
'	O	O:0.999733
is	O	O:0.999992
a	O	O:0.999930
pd.DataFrame	B-API	B-API:0.947032
and	O	O:0.999995
you	O	O:0.999995
iterate	O	O:0.999928
over	O	O:0.994160
range	O	O:0.999902
(	O	O:0.999971
0	O	O:0.999855
,	O	O:0.999879
len	B-API	B-API:0.980984
(	O	O:0.999979
data	O	O:0.997814
))	O	O:0.999844
and	O	O:0.999998
then	O	O:0.999999
add	O	O:0.999762
data	O	O:0.999304
to	O	O:0.999998
your	O	O:0.999998
list	O	O:0.983329
'	O	O:0.999977
all_info	O	O:0.998300
'	O	O:0.999884
,	O	O:0.999994
you	O	O:0.999998
simply	O	O:0.999998
add	O	O:0.999762
the	O	O:0.999997
whole	O	O:0.999946
DataFrame	O	O:0.999690
'	O	O:0.999985
data	O	O:0.998229
'	O	O:0.999993
i	O	O:0.999988
times	O	O:0.999979
to	O	O:0.999930
the	O	O:0.999996
list	O	O:0.992829
.	O	O:0.999902
	
Python	O	O:0.998763
pandas	O	O:0.999673
:	O	O:0.999962
retrieve	O	O:0.999948
the	O	O:0.999997
field	O	O:0.999267
associated	O	O:0.999972
to	O	O:0.999996
the	O	O:1.000000
min	O	O:0.973389
of	O	O:0.999994
another	O	O:0.999776
(	O	O:0.999998
cross	O	O:0.998069
apply	O	O:0.972501
equivalent	O	O:0.999729
)	O	O:0.999905
	
In	O	O:0.999926
SQL	O	O:0.999110
I	O	O:0.999767
was	O	O:0.999980
used	O	O:0.999908
to	O	O:0.999975
doing	O	O:0.999999
this	O	O:0.999948
with	O	O:0.999994
a	O	O:0.999994
cross	O	O:0.950408
apply	O	O:0.900872
.	O	O:0.999460
	
PS	O	O:0.999760
other	O	O:0.999943
than	O	O:0.999972
calculating	O	O:0.999712
the	O	O:0.999987
min	O	O:0.944518
first	O	O:0.998475
,	O	O:0.999997
then	O	O:0.999990
doing	O	O:1.000000
a	O	O:0.999988
join	B-API	B-API:0.963587
on	O	O:0.999980
primary	O	O:0.999869
key	O	O:0.999994
and	O	O:0.999977
date	O	O:0.950898
	
I	O	O:0.999630
can	O	O:0.999988
do	O	O:0.999998
this	O	O:0.999987
in	O	O:0.999996
two	O	O:0.999976
steps	O	O:0.999899
:	O	O:0.999962
1	O	O:0.999970
)	O	O:0.999996
group	O	O:0.989829
by	O	O:0.999985
primary	O	O:0.999774
key	O	O:0.999977
and	O	O:0.999994
calculate	O	O:0.999936
min	O	O:0.875671
(	O	O:0.999982
date	O	O:0.981947
)	O	O:0.999970
2	O	O:0.999700
)	O	O:0.999989
do	O	O:0.999975
an	O	O:0.999997
inner	O	O:0.991258
join	B-API	B-API:0.934014
between	O	O:0.977816
the	O	O:0.999990
starting	O	O:0.999994
table	O	O:0.998437
and	O	O:0.999999
the	O	O:0.999999
table	O	O:0.997828
calculated	O	O:0.999940
in	O	O:0.999993
the	O	O:0.999995
previous	O	O:0.999945
step	O	O:0.999317
,	O	O:0.999994
on	O	O:0.999996
primary	O	O:0.999812
key	O	O:0.999995
and	O	O:0.999991
date	O	O:0.991076
,	O	O:0.999987
to	O	O:0.999993
retrieve	O	O:0.999996
the	O	O:0.999990
amount	O	O:0.999894
	
Call	O	O:0.996249
`	O	O:0.999923
resample	B-API	B-API:0.994702
`	O	O:0.999960
and	O	O:0.999977
pass	O	O:0.999988
the	O	O:0.999954
rule	O	O:0.999981
as	O	O:0.999964
'	O	O:0.999621
10Min	O	O:0.989074
'	O	O:0.999005
:	O	O:0.999894
#CODE	O	O:0.999598
	
The	O	O:0.999928
quickest	O	O:0.999821
way	O	O:0.999973
I	O	O:0.999946
know	O	O:0.999992
how	O	O:0.999948
to	O	O:0.999970
wrangle	O	O:0.999997
this	O	O:0.999988
thing	O	O:0.999994
into	O	O:0.999978
a	O	O:0.999989
long	O	O:0.999585
form	O	O:0.999995
dataframe	O	O:0.984585
is	O	O:0.999994
using	O	O:0.999920
`	O	O:0.999914
stack	B-API	B-API:0.978260
`	O	O:0.999969
and	O	O:0.999982
then	O	O:0.999990
`	O	O:0.999982
reset_index	B-API	B-API:0.999900
`	O	O:0.999787
:	O	O:0.999693
#CODE	O	O:0.999809
	
Maybe	O	O:0.999872
my	O	O:0.999986
real	O	O:0.975381
question	O	O:0.999736
is	O	O:0.999832
"	O	O:0.999924
why	O	O:0.999809
isn't	O	O:0.999852
`	O	O:0.999959
melt	B-API	B-API:0.996713
`	O	O:0.999990
a	O	O:0.999610
DataFrame	O	O:0.985912
method	O	O:0.999987
?	O	O:0.999903
	
This	O	O:0.999546
works	O	O:0.999960
pretty	O	O:0.999714
well	O	O:0.999935
:	O	O:0.999936
`	O	O:0.999926
pd.melt	B-API	B-API:0.999312
(	O	O:0.999988
wide_df.reset_index()	O	O:0.989359
,	O	O:0.999957
"	O	O:0.999943
subject	O	O:0.999859
")`	O	O:0.999666
,	O	O:0.999915
but	O	O:0.999988
it	O	O:0.999968
feels	O	O:0.999974
like	O	O:0.999998
it	O	O:0.999991
would	O	O:0.999998
be	O	O:0.999999
easier	O	O:0.999979
to	O	O:0.999991
read	O	O:0.999988
as	O	O:0.999981
chained	O	O:0.984387
method	O	O:0.999946
calls	O	O:0.999894
that	O	O:0.999980
can	O	O:0.999979
be	O	O:1.000000
read	O	O:0.999949
in	O	O:0.999985
linear	O	O:0.999635
order	O	O:0.982525
.	O	O:0.999517
	
not	O	O:0.999941
sure	O	O:0.999978
why	O	O:0.999989
their	O	O:0.999443
isn't	O	O:0.999993
a	O	O:0.999969
``	O	O:0.998492
melt	B-API	B-API:0.984753
``	O	O:0.999679
on	O	O:0.999661
DataFrame	O	O:0.998758
,	O	O:0.999991
could	O	O:0.999947
/	O	O:0.999987
should	O	O:0.999977
be	O	O:0.999984
.	O	O:0.999938
	
bool	O	O:0.910283
operator	O	O:0.999964
in	O	O:0.999991
for	O	O:0.999990
Timestamp	O	O:0.998649
in	O	O:0.999864
Series	O	O:0.990780
does	O	O:0.999972
not	O	O:0.999991
work	O	O:0.999986
	
Is	O	O:0.999860
there	O	O:0.999991
a	O	O:0.999991
way	O	O:0.999955
to	O	O:0.999997
drop	O	O:0.999777
columns	O	O:0.999973
in	O	O:0.999998
a	O	O:0.999992
Dataframe	O	O:0.988795
with	O	O:0.999997
column	O	O:0.999988
names	O	O:0.998867
having	O	O:0.999982
a	O	O:0.999991
particular	O	O:0.999828
letter	O	O:0.999991
as	O	O:0.999954
I	O	O:0.999074
wasn't	O	O:0.999976
able	O	O:0.999937
to	O	O:0.999996
find	O	O:0.999806
any	O	O:0.998520
information	O	O:0.999974
on	O	O:0.999995
this	O	O:0.999968
?	O	O:0.999957
	
I	O	O:0.999850
want	O	O:0.999993
to	O	O:0.999952
drop	O	O:0.999711
all	O	O:0.999513
column	O	O:0.999997
headers	O	O:0.999987
having	O	O:0.999964
the	O	O:0.999973
letter	O	O:0.999774
`	O	O:0.999990
F	O	O:0.998403
`	O	O:0.999986
in	O	O:0.999978
them	O	O:0.999954
.	O	O:0.999828
	
I	O	O:0.999332
was	O	O:0.999977
planning	O	O:0.999808
on	O	O:0.999985
doing	O	O:0.999995
it	O	O:0.999993
using	O	O:0.999929
`	O	O:0.999698
df.drop	B-API	B-API:0.999241
([	O	O:0.999661
df.columns	B-API	B-API:0.874018
[[	O	O:0.999768
column_names	O	O:0.983904
]]]	O	O:0.999842
,	O	O:0.999885
axis=1	O	O:0.999839
)`	O	O:0.999344
,	O	O:0.999961
but	O	O:0.999986
there	O	O:0.999942
are	O	O:0.999995
so	O	O:0.999988
many	O	O:0.999984
that	O	O:0.999963
I	O	O:0.999853
was	O	O:0.999992
wondering	O	O:0.999898
if	O	O:0.999991
there	O	O:0.999858
is	O	O:0.999992
an	O	O:0.999992
easier	O	O:0.999952
way	O	O:0.999979
to	O	O:0.999976
do	O	O:0.999997
this	O	O:0.999972
.	O	O:0.999794
	
Rolling	B-API	B-API:0.945218
argmax	B-API	B-API:0.984632
in	O	O:0.999960
pandas	O	O:0.999687
	
I	O	O:0.999645
have	O	O:0.999993
a	O	O:0.999956
pandas	O	O:0.999752
TimeSeries	O	O:0.999905
and	O	O:0.999984
would	O	O:0.999998
like	O	O:0.999998
to	O	O:0.999998
apply	O	O:0.978447
the	O	O:0.999867
argmax	B-API	B-API:0.977351
function	O	O:0.997802
to	O	O:0.999992
a	O	O:0.999999
rolling	B-API	B-API:0.825194
window	O	O:0.999843
.	O	O:0.999733
	
However	O	O:0.999871
,	O	O:0.999994
due	O	O:0.999976
to	O	O:0.999990
casting	O	O:0.999931
to	O	O:0.999988
float	O	O:0.999983
from	O	O:0.999966
rolling_apply	B-API	B-API:0.998826
,	O	O:0.999995
if	O	O:0.999957
I	O	O:0.999953
apply	O	O:0.929177
`	O	O:0.998272
numpy.argmax()	B-API	B-API:0.999938
`	O	O:0.999976
,	O	O:0.999922
I	O	O:0.999992
only	O	O:0.999996
obtain	O	O:0.999923
the	O	O:0.999998
index	O	O:0.999666
of	O	O:0.999999
the	O	O:0.999998
slice	O	O:0.998278
of	O	O:0.999997
the	O	O:0.999947
ndarray	O	O:0.769750
.	O	O:0.999818
	
Is	O	O:0.999860
there	O	O:0.999990
a	O	O:0.999989
way	O	O:0.999945
to	O	O:0.999986
apply	O	O:0.978082
a	O	O:0.999986
rolling	B-API	B-API:0.860166
argmax	B-API	B-API:0.947221
to	O	O:0.999980
a	O	O:0.999994
Series	O	O:0.968961
/	O	O:0.999941
DataFrame	O	O:0.995218
?	O	O:0.999809
	
Here	O	O:0.997261
is	O	O:0.999994
a	O	O:0.999975
work-around	O	O:0.999749
,	O	O:0.999993
essentially	O	O:0.999981
doing	O	O:0.999996
the	O	O:0.999970
apply	B-API	B-API:0.934265
'	O	O:0.999938
manually	O	O:0.999803
'	O	O:0.999946
,	O	O:0.999973
should	O	O:0.999992
be	O	O:0.999996
pretty	O	O:0.999979
efficient	O	O:0.999857
actually	O	O:0.999940
.	O	O:0.999872
	
You	O	O:0.999828
could	O	O:0.999980
do	O	O:0.999999
a	O	O:0.999994
`	O	O:0.999927
shift	B-API	B-API:0.976462
`	O	O:0.999899
first	O	O:0.957493
:	O	O:0.999969
#CODE	O	O:0.999459
	
Merge	O	O:0.994387
csv's	O	O:0.999690
with	O	O:0.999994
some	O	O:0.999984
common	O	O:0.999961
columns	O	O:0.999920
and	O	O:0.999997
fill	O	O:0.994637
in	O	O:0.999922
Nans	O	O:0.999745
	
pandas	O	O:0.999663
-	O	O:0.999914
resample	B-API	B-API:0.953986
-	O	O:0.999970
upsampling	O	O:0.998317
before	O	O:0.999863
downsampling	O	O:0.999026
	
My	O	O:0.999805
objective	O	O:0.999171
is	O	O:0.999992
to	O	O:0.999956
resample	O	O:0.978521
this	O	O:0.999989
data	O	O:0.999364
frame	O	O:0.999999
with	O	O:0.999999
a	O	O:0.999988
fixed	O	O:0.999850
time	O	O:0.987184
window	O	O:0.999741
(	O	O:0.999820
e.g.	O	O:0.999606
:	O	O:0.999903
1	O	O:0.999964
second	O	O:0.994949
)	O	O:0.999995
using	O	O:0.999989
last	O	O:0.980812
for	O	O:0.999924
regularization	O	O:0.999845
when	O	O:0.999954
upsampling	O	O:0.998904
and	O	O:0.999995
the	O	O:0.999995
mean	O	O:0.971082
for	O	O:0.999987
downsampling	O	O:0.999348
.	O	O:0.999463
	
Is	O	O:0.999966
this	O	O:0.999986
possible	O	O:0.999981
at	O	O:0.999485
all	O	O:0.998669
using	O	O:0.999998
pandas	O	O:0.999848
resample	B-API	B-API:0.965046
function	O	O:0.979366
?	O	O:0.999710
	
You	O	O:0.999748
can't	O	O:0.999969
mix	O	O:0.999986
upsample	O	O:0.999852
/	O	O:0.999962
downsample	O	O:0.998915
in	O	O:0.999994
a	O	O:0.999998
single	O	O:0.999173
`	O	O:0.999989
resample	B-API	B-API:0.972637
`	O	O:0.999929
operation	O	O:0.998831
.	O	O:0.999847
	
I'm	O	O:0.999730
not	O	O:0.999984
sure	O	O:0.999986
why	O	O:0.999991
the	O	O:0.999997
order	O	O:0.999670
of	O	O:0.999994
operations	O	O:0.999820
would	O	O:0.999998
matter	O	O:0.999995
to	O	O:0.999999
you	O	O:0.999999
as	O	O:0.999999
long	O	O:0.999995
as	O	O:0.999997
you	O	O:0.999986
get	O	O:0.999543
the	O	O:0.999999
desired	O	O:0.999764
results	O	O:0.999985
.	O	O:0.999807
	
Thanks	O	O:0.999429
for	O	O:0.999997
your	O	O:0.999943
answer	O	O:0.999589
,	O	O:0.999992
it	O	O:0.999857
was	O	O:0.999948
not	O	O:0.999996
clear	O	O:0.997881
to	O	O:0.999991
me	O	O:0.999997
that	O	O:0.999996
you	O	O:0.999992
had	O	O:0.999994
to	O	O:0.999994
make	O	O:1.000000
multiple	O	O:0.999960
calls	O	O:0.999953
to	O	O:0.999932
resample	B-API	B-API:0.840817
.	O	O:0.999433
	
You	O	O:0.999926
can	O	O:0.999999
then	O	O:0.999999
concat	O	O:0.981006
this	O	O:0.999997
back	O	O:0.998530
to	O	O:0.999995
get	O	O:0.999907
the	O	O:0.999989
'	O	O:0.999961
I	O	O:0.999932
'	O	O:0.999996
column	O	O:0.999931
back	O	O:0.970347
:	O	O:0.999964
#CODE	O	O:0.999605
	
Actually	O	O:0.999885
setting	O	O:0.999715
index_col=	O	O:0.997663
'	O	O:0.999896
I	O	O:0.999236
'	O	O:0.999986
when	O	O:0.999929
reading	O	O:0.999937
allows	O	O:0.999972
to	O	O:0.999983
avoid	O	O:0.999997
the	O	O:0.999981
concat	B-API	B-API:0.977586
!	O	O:0.999756
	
As	O	O:0.999973
a	O	O:0.999977
follow	O	O:0.999864
up	O	O:0.999938
to	O	O:0.999998
this	O	O:0.999998
post	O	O:0.999945
,	O	O:0.999990
I	O	O:0.999949
would	O	O:0.999997
like	O	O:0.999997
to	O	O:0.999999
concatenate	O	O:0.997520
a	O	O:0.999995
number	O	O:0.999984
of	O	O:0.999998
columns	O	O:0.999996
based	O	O:0.999990
on	O	O:0.999991
their	O	O:0.999729
index	O	O:0.999511
but	O	O:0.999978
I	O	O:0.999894
am	O	O:0.999993
encountering	O	O:0.999948
some	O	O:0.999872
problems	O	O:0.999791
.	O	O:0.999815
	
In	O	O:0.999976
this	O	O:0.999971
example	O	O:0.999965
I	O	O:0.999964
get	O	O:0.999157
an	O	O:0.999952
Attribute	O	O:0.999993
error	O	O:0.999982
related	O	O:0.999851
to	O	O:0.999993
the	O	O:0.999995
map	B-API	B-API:0.975209
function	O	O:0.998259
.	O	O:0.999777
	
Help	O	O:0.999020
around	O	O:0.996140
this	O	O:0.999948
error	O	O:0.999869
would	O	O:0.999991
be	O	O:0.999997
appreciated	O	O:0.999991
as	O	O:0.999975
would	O	O:0.999956
code	O	O:0.999994
that	O	O:0.999992
does	O	O:0.999995
the	O	O:0.999998
equivalent	O	O:0.999966
concatenation	O	O:0.999997
of	O	O:0.999992
columns	O	O:0.999963
.	O	O:0.999950
	
note	O	O:0.999917
that	O	O:0.999987
support	O	O:0.999895
for	O	O:0.999989
`	O	O:0.999889
filter	B-API	B-API:0.956944
(	O	O:0.999959
None	O	O:0.999958
,	O	O:0.999987
iterable	O	O:0.983080
)`	O	O:0.999981
ceased	O	O:0.997086
in	O	O:0.999989
Python	O	O:0.999772
3	O	O:0.999871
,	O	O:0.999990
need	O	O:0.999995
to	O	O:0.999995
do	O	O:0.999997
`	O	O:0.999981
filter	B-API	B-API:0.916921
(	O	O:0.999986
bool	O	O:0.950299
,	O	O:0.999984
iterable	O	O:0.985769
)`	O	O:0.999804
there	O	O:0.999656
	
I	O	O:0.999755
have	O	O:0.999994
found	O	O:0.999858
workaround	O	O:0.999974
which	O	O:0.999915
is	O	O:0.999989
extremely	O	O:0.999981
slow	O	O:0.997117
due	O	O:0.999927
to	O	O:0.999987
the	O	O:0.999998
"	O	O:0.999959
in	O	O:0.999983
python	O	O:0.999811
"	O	O:0.999890
apply	B-API	B-API:0.984645
:	O	O:0.999607
#CODE	O	O:0.998889
	
How	O	O:0.999917
to	O	O:0.999985
drop	O	O:0.999866
extra	O	O:0.999988
copy	O	O:0.984674
of	O	O:0.999960
duplicate	O	O:0.999909
index	O	O:0.999646
of	O	O:0.999985
Pandas	O	O:0.999918
Series	O	O:0.998185
?	O	O:0.999778
	
So	O	O:0.999944
how	O	O:0.999985
to	O	O:0.999996
drop	O	O:0.999825
extra	O	O:0.999990
duplicate	O	O:0.999999
rows	O	O:0.999983
of	O	O:0.999991
series	O	O:0.999996
,	O	O:0.999999
keep	O	O:0.999988
the	O	O:0.999999
unique	O	O:0.986371
rows	O	O:0.999957
and	O	O:0.999998
only	O	O:1.000000
one	O	O:0.999999
copy	O	O:0.983222
of	O	O:0.999995
the	O	O:0.999978
duplicate	O	O:0.999999
rows	O	O:0.999976
in	O	O:0.999998
an	O	O:0.999997
efficient	O	O:0.999940
way	O	O:0.999941
?	O	O:0.999880
	
One	O	O:0.999911
way	O	O:0.999896
would	O	O:0.999994
be	O	O:0.999999
using	O	O:0.999994
`	O	O:0.999530
drop	B-API	B-API:0.916413
`	O	O:0.999908
and	O	O:0.999458
`	O	O:0.999985
index.get_duplicates	B-API	B-API:0.728927
`	O	O:0.999773
:	O	O:0.999675
#CODE	O	O:0.999809
	
Not	O	O:0.999947
totally	O	O:0.999922
drop	O	O:0.993095
the	O	O:0.999996
duplicated	O	O:0.967587
ones	O	O:0.985513
.	O	O:0.999840
	
You	O	O:0.999920
can	O	O:0.999920
groupby	B-API	B-API:0.948741
the	O	O:0.999977
index	O	O:0.993799
and	O	O:0.999998
apply	O	O:0.957427
a	O	O:0.999615
function	O	O:0.994594
that	O	O:0.999981
returns	O	O:0.999985
one	O	O:0.999995
value	O	O:0.999978
per	O	O:0.999980
index	O	O:0.997531
group	O	O:0.987034
.	O	O:0.999902
	
@USER	O	O:0.999591
sorry	O	O:0.999863
,	O	O:0.999979
"	O	O:0.999990
arbitrary	O	O:0.999442
"	O	O:0.999973
of	O	O:0.999941
length	O	O:0.999483
len	B-API	B-API:0.951077
(	O	O:0.999961
s	O	O:0.999478
)	O	O:0.999871
:)	O	O:0.999453
.	O	O:0.999149
	
Below	O	O:0.997404
is	O	O:0.999979
my	O	O:0.999376
snippet	O	O:0.999888
:	O	O:0.999972
import	O	O:0.999960
pandas	O	O:0.999962
as	O	O:0.999975
pd	O	O:0.996760
;	O	O:0.999972
idx_tp	O	O:0.986027
=	O	O:0.999775
[(	O	O:0.999772
'	O	O:0.999844
600809	O	O:0.999235
'	O	O:0.999906
,	O	O:0.999854
'	O	O:0.999977
20061231	O	O:0.999867
')	O	O:0.999868
,	O	O:0.999603
(	O	O:0.999885
'	O	O:0.999959
600809	O	O:0.999646
'	O	O:0.999937
,	O	O:0.999874
'	O	O:0.999977
20070331	O	O:0.999868
')	O	O:0.999856
,	O	O:0.999565
(	O	O:0.999874
'	O	O:0.999955
600809	O	O:0.999645
'	O	O:0.999937
,	O	O:0.999873
'	O	O:0.999977
20070630	O	O:0.999867
')	O	O:0.999868
,	O	O:0.999603
(	O	O:0.999885
'	O	O:0.999959
600809	O	O:0.999646
'	O	O:0.999933
,	O	O:0.999879
'	O	O:0.999979
20070331	O	O:0.999783
')]	O	O:0.999941
;	O	O:0.999761
dt	B-API	B-API:0.906956
=	O	O:0.999733
[	O	O:0.999557
'	O	O:0.999780
demo	O	O:0.999877
'	O	O:0.999946
,	O	O:0.999952
'	O	O:0.999901
demo	O	O:0.999955
'	O	O:0.999958
,	O	O:0.999961
'	O	O:0.999901
demo	O	O:0.999955
'	O	O:0.999963
,	O	O:0.999970
'	O	O:0.999941
demo	O	O:0.999982
']	O	O:0.999966
;	O	O:0.999899
idx	O	O:0.997754
=	O	O:0.999943
pd.MultiIndex.from_tuples	B-API	B-API:0.964821
(	O	O:0.999944
idx_tp	O	O:0.997822
,	O	O:0.999972
names	O	O:0.989677
=	O	O:0.999787
[	O	O:0.999735
'	O	O:0.999958
STK_ID	O	O:0.995009
'	O	O:0.999906
,	O	O:0.999890
'	O	O:0.999980
RPT_Date	O	O:0.998601
'])	O	O:0.999898
;	O	O:0.999781
s	O	O:0.997736
=	O	O:0.999562
pd.Series	B-API	B-API:0.998704
(	O	O:0.999800
dt	B-API	B-API:0.892370
,	O	O:0.999955
index=idx	O	O:0.999542
);	O	O:0.999564
#	O	O:0.999519
s.groupby	O	O:0.980672
(	O	O:0.999929
s.index	O	O:0.998361
)	O	O:0.999922
.first()	B-API	B-API:0.995486
will	O	O:0.999977
crash	O	O:0.999958
on	O	O:0.999997
my	O	O:0.999933
machine	O	O:0.999959
	
Edit	O	O:0.998557
:	O	O:0.999988
another	O	O:0.999975
solution	O	O:0.999973
which	O	O:0.999957
is	O	O:0.999987
faster	O	O:0.999646
is	O	O:0.999992
to	O	O:0.999966
use	O	O:0.998626
`	O	O:0.999704
value_counts	B-API	B-API:0.999979
`	O	O:0.999660
(	O	O:0.998897
and	O	O:0.999991
normalize	B-API	B-API:0.905263
):	O	O:0.999748
#CODE	O	O:0.999613
	
I	O	O:0.999640
had	O	O:0.999908
thought	O	O:0.999598
this	O	O:0.999937
was	O	O:0.999984
more	O	O:0.999966
concisely	O	O:0.999976
written	O	O:0.999926
as	O	O:0.999995
a	O	O:0.999913
`	O	O:0.999921
resample	B-API	B-API:0.985034
`	O	O:0.999953
,	O	O:0.999977
if	O	O:0.999998
you	O	O:0.999980
use	O	O:0.999050
a	O	O:0.999679
DatetimeIndex	B-API	B-API:0.984657
:	O	O:0.999777
	
len	B-API	B-API:0.994136
(	O	O:0.999931
Series.unique()	B-API	B-API:0.967459
)	O	O:0.999877
might	O	O:0.999981
be	O	O:0.999997
even	O	O:0.999994
faster	O	O:0.999761
.	O	O:0.999807
	
Interestingly	O	O:0.999705
,	O	O:0.999944
len	B-API	B-API:0.989858
(	O	O:0.999959
Series.unique()	B-API	B-API:0.941458
)	O	O:0.999790
is	O	O:0.999962
usually	O	O:0.999971
much	O	O:0.999965
faster	O	O:0.999750
than	O	O:0.999912
Series.nunique()	B-API	B-API:0.980893
.	O	O:0.999541
	
Next	O	O:0.999473
,	O	O:0.999986
these	O	O:0.999975
3	O	O:0.999908
columns	O	O:0.999972
should	O	O:0.999996
be	O	O:0.999999
combined	O	O:0.999989
into	O	O:0.999969
one	O	O:0.999972
column	O	O:0.999973
-	O	O:0.999995
the	O	O:0.999997
mean	O	O:0.996927
of	O	O:0.999995
the	O	O:0.999998
order	O	O:0.997617
numbers	O	O:0.999618
-	O	O:0.999981
but	O	O:0.999978
I	O	O:0.999943
do	O	O:0.999994
know	O	O:0.999953
how	O	O:0.999987
to	O	O:0.999984
do	O	O:0.999999
that	O	O:0.999985
part	O	O:0.999872
(	O	O:0.999995
with	O	O:0.999990
apply	B-API	B-API:0.915277
and	O	O:0.999988
axis=1	O	O:0.999055
)	O	O:0.999835
.	O	O:0.999096
	
I	O	O:0.999555
would	O	O:0.999996
like	O	O:0.999996
to	O	O:0.999999
normalize	O	O:0.997258
my	O	O:0.999993
data	O	O:0.999871
by	O	O:0.999997
dividing	O	O:0.999996
every	O	O:0.999978
row	O	O:0.999998
by	O	O:0.999989
the	O	O:0.999995
first	O	O:0.998792
value	O	O:0.999997
of	O	O:0.999995
that	O	O:0.999993
very	O	O:0.999972
row	O	O:0.999986
.	O	O:0.999740
	
I	O	O:0.999380
am	O	O:0.999986
just	O	O:0.999967
getting	O	O:0.999985
stuck	O	O:0.999940
on	O	O:0.999973
"	O	O:0.999989
setting	O	O:0.999682
with	O	O:0.999941
chained	O	O:0.988179
indexing	O	O:0.999919
"	O	O:0.999808
and	O	O:0.999986
setting	O	O:0.999887
with	O	O:0.999716
iloc	B-API	B-API:0.985824
/	O	O:0.999913
loc	B-API	B-API:0.956621
/	O	O:0.999448
ix	B-API	B-API:0.986839
.	O	O:0.999255
	
I	O	O:0.999527
can't	O	O:0.999982
figure	O	O:0.988445
out	O	O:0.999997
how	O	O:0.999995
to	O	O:0.999989
represent	O	O:0.999999
this	O	O:0.999993
using	O	O:0.999992
iloc	B-API	B-API:0.992284
,	O	O:0.999795
loc	B-API	B-API:0.968256
and	O	O:0.999905
ix	B-API	B-API:0.971135
.	O	O:0.998907
	
Python	O	O:0.998303
2.7	O	O:0.995987
&	O	O:0.999395
Pandas	O	O:0.998735
:	O	O:0.999919
How	O	O:0.999974
to	O	O:0.999998
replace	O	O:0.999611
values	O	O:0.997994
at	O	O:0.997933
12:00	O	O:0.999994
with	O	O:0.999992
values	O	O:0.989089
from	O	O:0.999985
11:55	O	O:0.999567
?	O	O:0.999866
	
How	O	O:0.999922
do	O	O:0.999970
I	O	O:0.999981
explicitly	O	O:0.999992
say	O	O:0.999908
'	O	O:0.999959
replace	O	O:0.997315
the	O	O:0.999996
values	O	O:0.990599
at	O	O:0.997233
19:40	O	O:0.998961
:	O	O:0.999942
00	O	O:0.999943
with	O	O:0.999997
the	O	O:0.999991
values	O	O:0.994786
at	O	O:0.997160
19:35	O	O:0.998524
:	O	O:0.999830
00	O	O:0.999873
?	O	O:0.999826
	
Python	O	O:0.999815
merge	O	O:0.952270
excel	O	O:0.999949
documents	O	O:0.999977
with	O	O:0.999996
dynamic	O	O:0.999793
columns	O	O:0.999922
	
However	O	O:0.999758
,	O	O:0.999991
since	O	O:0.999988
they	O	O:0.999915
are	O	O:0.999998
not	O	O:0.999994
100%	O	O:0.999972
identical	O	O:0.994853
,	O	O:0.999972
I	O	O:0.999922
cannot	O	O:0.999997
simply	O	O:0.999987
merge	O	O:0.997026
them	O	O:0.999978
together	O	O:0.999926
and	O	O:0.999996
upload	O	O:0.999962
it	O	O:0.999938
into	O	O:0.999985
a	O	O:0.999989
database	O	O:0.999975
without	O	O:0.999995
messing	O	O:0.999859
up	O	O:0.999977
the	O	O:0.999989
data	O	O:0.995159
.	O	O:0.999935
	
If	O	O:0.999970
a	O	O:0.999991
large	O	O:0.999768
proportion	O	O:0.999988
of	O	O:0.999995
them	O	O:0.999936
are	O	O:0.999997
similar	O	O:0.999966
,	O	O:0.999951
and	O	O:0.999998
this	O	O:0.999872
is	O	O:0.999984
a	O	O:0.999995
one-off	O	O:0.997266
operation	O	O:0.999955
it	O	O:0.999963
may	O	O:0.999997
be	O	O:0.999995
worth	O	O:0.999998
your	O	O:0.999967
while	O	O:0.999965
coding	O	O:0.999950
the	O	O:0.999992
solution	O	O:0.999844
for	O	O:0.999997
the	O	O:0.999975
majority	O	O:0.999910
and	O	O:0.999995
handling	O	O:0.999974
the	O	O:0.999985
other	O	O:0.999884
documents	O	O:0.999858
(	O	O:0.999992
or	O	O:0.999999
groups	O	O:0.994958
of	O	O:0.999999
them	O	O:0.999984
if	O	O:0.999997
they	O	O:0.999989
are	O	O:0.999993
similar	O	O:0.999995
)	O	O:0.999993
separately	O	O:0.999843
.	O	O:0.999880
	
Any	O	O:0.999798
recommendations	O	O:0.999744
to	O	O:0.999996
a	O	O:0.999998
db	O	O:0.999973
that	O	O:0.999994
would	O	O:0.999998
allow	O	O:0.999996
me	O	O:0.999969
to	O	O:0.999988
dump	O	O:0.999425
a	O	O:0.999994
few	O	O:0.999820
thousand	O	O:0.999987
excel	O	O:0.999849
documents	O	O:0.999927
and	O	O:0.999998
then	O	O:1.000000
create	O	O:0.999997
join	U	O:0.972601
queries	O	O:0.999957
to	O	O:0.999994
the	O	O:1.000000
VIN	O	O:0.999789
column	O	O:0.999986
?	O	O:0.999936
	
I	O	O:0.999497
am	O	O:0.999974
doing	O	O:0.999969
a	O	O:0.999974
transformation	O	O:0.999547
on	O	O:0.999998
a	O	O:0.999991
variable	O	O:0.999962
from	O	O:0.999996
a	O	O:0.999984
pandas	O	O:0.999873
dataframe	O	O:0.996140
and	O	O:0.999997
then	O	O:0.999988
I	O	O:0.999961
would	O	O:0.999999
like	O	O:0.999997
to	O	O:0.999999
replace	O	O:0.999519
the	O	O:0.999997
column	O	O:0.999995
with	O	O:0.999999
my	O	O:0.999997
new	O	O:0.999980
values	O	O:0.986623
.	O	O:0.999664
	
The	O	O:0.999783
problem	O	O:0.999588
seems	O	O:0.999985
to	O	O:0.999992
be	O	O:1.000000
that	O	O:0.999975
after	O	O:0.999988
the	O	O:0.999991
transformation	O	O:0.999843
,	O	O:0.999999
the	O	O:0.999998
length	O	O:0.999984
of	O	O:0.999994
the	O	O:0.999993
array	O	O:0.992153
is	O	O:0.999986
not	O	O:0.999996
the	O	O:0.999999
same	O	O:0.999980
as	O	O:0.999996
the	O	O:0.999993
length	O	O:0.999981
of	O	O:0.999980
my	O	O:0.999921
dataframe's	O	O:0.999942
index	O	O:0.995798
.	O	O:0.999786
	
When	O	O:0.999807
I	O	O:0.999857
check	O	O:0.999998
the	O	O:0.999966
length	O	O:0.999907
,	O	O:0.999997
these	O	O:0.999993
lengths	O	O:0.999931
seem	O	O:0.999968
to	O	O:0.999987
disagree	O	O:0.999981
.	O	O:0.999868
	
The	O	O:0.999522
len	B-API	B-API:0.994849
(	O	O:0.999964
array	O	O:0.992303
)	O	O:0.999918
says	O	O:0.999989
it	O	O:0.999968
is	O	O:0.999882
2	O	O:0.999784
but	O	O:0.999995
when	O	O:0.999972
I	O	O:0.999842
call	O	O:0.999936
the	O	O:0.999904
stats.boxcox	U	O:0.997829
it	O	O:0.999949
says	O	O:0.999990
it	O	O:0.999971
is	O	O:0.999901
50000	O	O:0.999039
.	O	O:0.999557
	
Print	O	O:0.999783
out	O	O:0.999885
`	O	O:0.999929
len	B-API	B-API:0.995524
(	O	O:0.999978
df	O	O:0.999713
)`	O	O:0.999459
and	O	O:0.999948
`	O	O:0.999945
len	B-API	B-API:0.999172
(	O	O:0.999973
stats.boxcox	U	O:0.984057
(	O	O:0.999957
df.variable	O	O:0.998055
))`	O	O:0.998810
.	O	O:0.999320
	
How	O	O:0.999955
to	O	O:0.999980
calculate	O	O:0.999999
the	O	O:0.999999
count	O	O:0.998822
of	O	O:1.000000
column	O	O:0.999998
values	O	O:0.999371
less	O	O:0.992960
than	O	O:0.999985
95	O	O:0.999887
on	O	O:0.999997
each	O	O:0.999944
row	O	O:0.999995
on	O	O:0.999998
pandas	O	O:0.999974
pivot	O	O:0.976278
table	O	O:0.993439
	
I	O	O:0.999658
am	O	O:0.999991
new	O	O:0.999661
to	O	O:0.999996
pandas	O	O:0.999998
pivot	O	O:0.974955
tables	O	O:0.999885
,	O	O:0.999996
how	O	O:0.999998
to	O	O:0.999992
get	O	O:0.999987
the	O	O:1.000000
count	O	O:0.998807
of	O	O:1.000000
column	O	O:0.999998
values	O	O:0.999475
less	O	O:0.993293
than	O	O:0.999986
95	O	O:0.999682
for	O	O:0.999999
a	O	O:0.999976
row	O	O:0.999945
on	O	O:0.999996
pandas	O	O:0.999955
pivot	O	O:0.971690
table	O	O:0.997466
#CODE	O	O:0.999427
	
My	O	O:0.999858
decorated	O	O:0.999875
DataFrames	O	O:0.999893
return	O	O:0.999910
new	O	O:0.999876
and	O	O:0.999997
similarly	O	O:0.999992
decorated	O	O:0.999933
DataFrames	O	O:0.999908
when	O	O:0.999967
I	O	O:0.999963
use	O	O:0.999668
methods	O	O:0.999251
such	O	O:0.999978
as	O	O:0.999986
copy	B-API	B-API:0.879829
and	O	O:0.999947
groupby.agg	B-API	B-API:0.840793
.	O	O:0.996212
	
I.e.	O	O:0.999469
,	O	O:0.999988
how	O	O:0.999991
can	O	O:0.999991
I	O	O:0.999998
have	O	O:0.999999
my	O	O:0.999968
decorated	O	O:0.999992
DataFrames	O	O:0.999909
replace	O	O:0.988930
the	O	O:0.999997
stock	O	O:0.999891
DataFrames	O	O:0.999681
?	O	O:0.999876
	
Still	O	O:0.999875
not	O	O:0.999983
getting	O	O:0.999979
the	O	O:0.999988
hang	O	O:0.999900
of	O	O:0.999997
pandas	O	O:0.999954
,	O	O:0.999995
I	O	O:0.999843
am	O	O:0.999994
attempting	O	O:0.999911
to	O	O:0.999995
join	O	O:0.973581
two	O	O:0.999996
data	O	O:0.999734
frames	O	O:0.999938
in	O	O:0.999998
Pandas	O	O:0.999995
using	O	O:0.999969
merge	B-API	B-API:0.970691
.	O	O:0.998129
	
I	O	O:0.999773
have	O	O:0.999998
read	O	O:0.999666
in	O	O:0.999998
the	O	O:0.999996
CSVs	O	O:0.999797
into	O	O:0.999988
two	O	O:0.999994
data	O	O:0.997132
frames	O	O:0.999189
(	O	O:0.999988
named	O	O:0.999981
dropData	O	O:0.999243
and	O	O:0.999999
deosData	O	O:0.999458
in	O	O:0.999984
the	O	O:0.999988
code	O	O:0.999952
below	O	O:0.999927
)	O	O:0.999985
.	O	O:0.999729
	
The	O	O:0.999934
deosData	O	O:0.999368
file	O	O:0.999911
is	O	O:0.999992
an	O	O:0.999998
entire	O	O:0.999931
year	O	O:0.983767
s	O	O:0.999912
worth	O	O:0.999986
of	O	O:0.999991
observations	O	O:0.999938
that	O	O:0.999991
I	O	O:0.999965
am	O	O:0.999997
trying	O	O:0.999935
to	O	O:0.999999
match	O	O:0.999691
up	O	O:0.999987
with	O	O:0.999999
corresponding	O	O:0.999986
entries	O	O:0.999944
in	O	O:0.999987
dropData	O	O:0.999535
.	O	O:0.999749
	
I	O	O:0.999853
have	O	O:0.999996
gone	O	O:0.999885
through	O	O:0.999982
the	O	O:0.999970
documentation	O	O:0.999966
for	O	O:0.999998
the	O	O:0.999989
merge	B-API	B-API:0.946478
function	O	O:0.997972
and	O	O:0.999999
have	O	O:0.999989
tried	O	O:0.999931
the	O	O:0.999991
following	O	O:0.999885
code	O	O:0.999951
in	O	O:0.999997
various	O	O:0.999941
iterations	O	O:0.999855
,	O	O:0.999993
so	O	O:0.999992
far	O	O:0.999939
I	O	O:0.999986
have	O	O:0.999994
only	O	O:0.999970
been	O	O:0.999994
able	O	O:0.999994
to	O	O:0.999996
have	O	O:1.000000
a	O	O:0.999999
blank	O	O:0.999958
data	O	O:0.999592
frame	O	O:0.999999
with	O	O:0.999997
correct	O	O:0.999987
header	O	O:0.999994
row	O	O:0.999998
,	O	O:0.999996
or	O	O:0.999995
have	O	O:0.999993
the	O	O:0.999999
two	O	O:0.999998
data	O	O:0.999726
frames	O	O:0.999990
merged	O	O:0.999976
on	O	O:0.999998
the	O	O:0.999969
0	O	O:0.999611
--	O	O:0.999905
(	O	O:0.999937
N-1	O	O:0.999923
)	O	O:0.999945
indexing	O	O:0.999973
that	O	O:0.999944
is	O	O:0.999994
assigned	O	O:0.999987
by	O	O:0.999806
default	O	O:0.997491
:	O	O:0.999646
	
After	O	O:0.999801
searching	O	O:0.999719
on	O	O:0.999894
SE	O	O:0.999946
and	O	O:0.999997
the	O	O:0.999952
Doc	O	O:0.999844
s	O	O:0.999907
I	O	O:0.999957
have	O	O:0.999993
tried	O	O:0.999761
resetting	O	O:0.999726
the	O	O:0.999953
index	O	O:0.998471
,	O	O:0.999995
ignoring	O	O:0.999963
the	O	O:0.999990
index	O	O:0.999905
columns	O	O:0.999996
,	O	O:0.999998
copying	O	O:0.999986
the	O	O:0.999959
Date_Time	O	O:0.998938
column	O	O:0.999992
as	O	O:0.999996
a	O	O:0.999973
separate	O	O:0.998663
index	O	O:0.995553
and	O	O:0.999996
trying	O	O:0.999998
to	O	O:0.999991
merge	O	O:0.957687
on	O	O:0.999996
the	O	O:0.999999
new	O	O:0.999988
column	O	O:0.999995
,	O	O:0.999992
I	O	O:0.999978
have	O	O:0.999994
tried	O	O:0.999899
using	O	O:0.999992
on=None	O	O:0.994369
,	O	O:0.999881
left_on	O	O:0.961593
and	O	O:0.999983
right_on	O	O:0.999880
as	O	O:0.999989
permutations	O	O:0.999979
of	O	O:0.999973
Date_Time	O	O:0.997860
to	O	O:0.999996
no	O	O:0.999990
avail	O	O:0.999818
.	O	O:0.999817
	
I	O	O:0.999886
have	O	O:0.999982
checked	O	O:0.999908
the	O	O:0.999998
column	O	O:0.999999
data	O	O:0.999809
types	O	O:0.999952
,	O	O:0.999996
Date_Time	O	O:0.997137
in	O	O:0.999977
both	O	O:0.999952
are	O	O:0.999990
dtype	B-API	B-API:0.966757
Objects	O	O:0.999732
,	O	O:0.999909
I	O	O:0.999859
do	O	O:0.999985
not	O	O:0.999971
know	O	O:0.999991
if	O	O:0.999996
this	O	O:0.999812
is	O	O:0.999994
the	O	O:0.999994
source	O	O:0.985335
of	O	O:0.999996
the	O	O:0.999982
error	O	O:0.999986
,	O	O:0.999993
since	O	O:0.999991
the	O	O:0.999997
only	O	O:0.999998
issues	O	O:0.999987
I	O	O:0.999952
could	O	O:0.999995
find	O	O:0.997976
searching	O	O:0.999975
revolved	O	O:0.999970
around	O	O:0.992090
matching	O	O:0.999953
different	O	O:0.999949
dtypes	B-API	B-API:0.956654
to	O	O:0.999975
each	O	O:0.999987
other	O	O:0.999929
.	O	O:0.999870
	
What	O	O:0.999691
I	O	O:0.999739
am	O	O:0.999994
looking	O	O:0.999922
to	O	O:0.999997
do	O	O:0.999993
is	O	O:0.999992
have	O	O:0.999986
the	O	O:0.999999
two	O	O:0.999998
data	O	O:0.999857
frames	O	O:0.999992
merge	O	O:0.947138
where	O	O:0.998075
the	O	O:0.999993
two	O	O:0.999936
'	O	O:0.999946
Date_Time	O	O:0.998259
'	O	O:0.999990
columns	O	O:0.999942
intersect	O	O:0.999910
.	O	O:0.999892
	
and	O	O:0.999991
then	O	O:0.999990
do	O	O:0.999999
your	O	O:0.999979
merge	U	B-API:0.838872
.	O	O:0.999658
	
You	O	O:0.999927
can	O	O:0.999987
use	O	O:0.999580
`	O	O:0.999975
join	B-API	B-API:0.993653
`	O	O:0.999929
,	O	O:0.999962
but	O	O:0.999996
you	O	O:0.999992
first	O	O:0.999857
need	O	O:0.999998
to	O	O:0.999996
set	O	O:0.999586
the	O	O:0.999964
index	O	O:0.983887
:	O	O:0.999986
#CODE	O	O:0.999858
	
You	O	O:0.999844
can	O	O:0.999995
also	O	O:0.999999
do	O	O:0.999991
`	O	O:0.999899
groupby	B-API	B-API:0.999344
(	O	O:0.999914
...,	O	O:0.999643
as_index=False	O	O:0.998920
)`	O	O:0.999692
,	O	O:0.999985
though	O	O:0.999979
buggy	O	O:0.999980
with	O	O:0.999996
apply	B-API	B-API:0.942666
in	O	O:0.999968
0.12	O	O:0.998132
,	O	O:0.999989
fixed	O	O:0.999714
in	O	O:0.999951
0.13	O	O:0.997137
.	O	O:0.999660
	
I've	O	O:0.999654
converted	O	O:0.999925
the	O	O:0.999993
last	O	O:0.996965
step	O	O:0.999547
to	O	O:0.999992
no	O	O:0.999999
longer	O	O:0.999992
be	O	O:0.999999
a	O	O:0.999992
loop	O	O:0.999586
and	O	O:0.999995
instead	O	O:0.999999
save	O	O:0.986178
directly	O	O:0.999956
to	O	O:0.999991
a	O	O:0.999992
list	O	O:0.970420
.	O	O:0.999872
	
AFAIK	O	O:0.999683
,	O	O:0.999991
you	O	O:0.999986
would	O	O:0.999999
have	O	O:1.000000
to	O	O:0.999999
separate	O	O:0.999994
the	O	O:0.999995
two	O	O:0.999970
parts	O	O:0.999968
and	O	O:0.999999
append	O	O:0.976734
as	O	O:0.999950
lists	O	O:0.999856
since	O	O:0.999992
the	O	O:0.999998
columns	O	O:1.000000
of	O	O:0.999997
interest	O	O:0.999962
are	O	O:0.999999
different	O	O:0.999955
and	O	O:0.999996
converting	O	O:0.999852
to	O	O:0.999957
a	O	O:0.999998
dictionary	O	O:0.999920
would	O	O:0.999992
include	O	O:0.999986
the	O	O:0.999987
`	O	O:0.999953
NaN	O	O:0.972312
`	O	O:0.999996
s	O	O:0.999349
otherwise	O	O:0.999985
.	O	O:0.999916
	
When	O	O:0.999887
using	O	O:0.999986
the	O	O:0.999973
pure	O	O:0.999660
XlsxWriter	O	O:0.999702
I	O	O:0.999831
can	O	O:0.999998
apply	O	O:0.962950
formats	O	O:0.999990
to	O	O:0.999976
cells	O	O:0.999997
what	O	O:0.999979
also	O	O:0.999983
works	O	O:0.999990
nice	O	O:0.999739
.	O	O:0.999830
	
Basically	O	O:0.999923
how	O	O:0.999983
would	O	O:0.999988
I	O	O:0.999993
apply	O	O:0.957560
`	O	O:0.999872
df	O	O:0.995473
[	O	O:0.999953
'	O	O:0.999920
col1	O	O:0.999658
']	O	O:0.999556
.str	B-API	B-API:0.989275
.contains	B-API	B-API:0.986318
(	O	O:0.998842
'	O	O:0.999673
^	O	O:0.999864
')`	O	O:0.999924
to	O	O:0.999980
an	O	O:0.999999
entire	O	O:0.999974
dataframe	O	O:0.999794
at	O	O:0.999294
once	O	O:0.999965
and	O	O:0.999999
filter	O	O:0.988147
down	O	O:0.999876
to	O	O:0.999999
any	O	O:0.999839
rows	O	O:0.999990
that	O	O:0.999999
have	O	O:0.999998
records	O	O:0.999982
containing	O	O:0.999980
the	O	O:0.999993
match	O	O:0.983391
?	O	O:0.999957
	
Pandas	O	O:0.999053
:	O	O:0.999941
apply	O	O:0.943299
different	O	O:0.999964
functions	O	O:0.999869
to	O	O:0.999995
different	O	O:0.999998
columns	O	O:0.999912
	
i	O	O:0.999682
am	O	O:0.999991
looking	O	O:0.999957
to	O	O:0.999996
apply	O	O:0.993355
multiply	O	O:0.985993
masks	O	O:0.999966
on	O	O:0.999997
each	O	O:0.999982
column	O	O:0.999997
of	O	O:0.999998
a	O	O:0.999993
pandas	O	O:0.999931
dataset	O	O:0.999940
(	O	O:0.999980
respectively	O	O:0.999965
to	O	O:0.999994
it's	O	O:0.999996
properties	O	O:0.996341
)	O	O:0.999986
in	O	O:0.999968
python	O	O:0.999772
.	O	O:0.999783
	
how	O	O:0.999954
can	O	O:0.999994
i	O	O:0.999996
apply	O	O:0.937447
the	O	O:0.999966
concat_mask	O	O:0.995222
on	O	O:0.999995
df	O	O:0.999661
,	O	O:0.999998
so	O	O:0.999996
that	O	O:0.999995
i	O	O:0.999999
select	O	O:0.999533
rows	O	O:0.999944
,	O	O:0.999993
in	O	O:0.999995
which	O	O:0.999991
all	O	O:0.999559
Boolean	O	O:0.999929
criteria	O	O:0.999943
are	O	O:0.999978
matched	O	O:0.999533
(	O	O:0.999973
are	O	O:0.999989
True	O	O:0.999752
)	O	O:0.999956
?	O	O:0.999869
	
.	O	O:0.999416
Can	O	O:0.999985
You	O	O:0.999999
insert	O	O:0.997221
that	O	O:0.999994
into	O	O:0.999994
your	O	O:0.999962
answer	O	O:0.999453
?	O	O:0.999877
	
In	O	O:0.999939
the	O	O:0.999996
proper	O	O:0.999922
code	O	O:0.999971
i	O	O:0.999972
actually	O	O:0.999998
iterate	O	O:0.999633
throw	O	O:0.999986
all	O	O:0.998750
columns	O	O:0.999988
and	O	O:0.999996
apply	O	O:0.954232
various	O	O:0.999687
of	O	O:0.999991
diffenrent	O	O:0.999677
conditions	O	O:0.999960
to	O	O:0.999983
mask	O	O:0.999928
each	O	O:0.999952
column	O	O:0.999978
.	O	O:0.999916
	
If	O	O:0.999888
you	O	O:0.999976
return	O	O:0.999984
a	O	O:0.999989
Series	O	O:0.997282
of	O	O:0.999993
the	O	O:0.999915
(	O	O:0.999997
split	O	O:0.984565
)	O	O:0.999995
location	O	O:0.999987
,	O	O:0.999995
you	O	O:0.999996
can	O	O:0.999996
merge	O	O:0.919006
(	O	O:0.999991
`	O	O:0.999997
join	B-API	B-API:0.986886
`	O	O:0.999994
to	O	O:0.999987
merge	O	O:0.975658
on	O	O:0.999992
index	O	O:0.999506
)	O	O:0.999999
the	O	O:0.999998
resulting	O	O:0.999992
DF	O	O:0.999943
directly	O	O:0.999938
with	O	O:0.999998
your	O	O:0.999984
value	O	O:0.999990
column	O	O:0.999983
.	O	O:0.999856
	
If	O	O:0.999318
I'm	O	O:0.999765
not	O	O:0.999984
mistaken	O	O:0.999905
,	O	O:0.999995
it	O	O:0.999983
only	O	O:0.999955
works	O	O:0.999998
if	O	O:0.999976
`	O	O:0.999991
df	O	O:0.987475
`	O	O:0.999950
has	O	O:0.999688
index	O	O:0.999705
that	O	O:0.999967
is	O	O:0.999983
`	O	O:0.999972
range	O	O:0.999660
(	O	O:0.999922
len	B-API	B-API:0.982839
(	O	O:0.999964
df	O	O:0.999857
))`	O	O:0.999300
,	O	O:0.999926
right	O	O:0.999936
?	O	O:0.999927
	
`	O	O:0.999941
join	B-API	B-API:0.989640
`	O	O:0.999935
is	O	O:0.999973
shorthand	O	O:0.999869
for	O	O:0.999996
merging	O	O:0.999348
on	O	O:0.999962
index	O	O:0.999053
with	O	O:0.999998
both	O	O:0.999994
frames	O	O:0.999938
,	O	O:0.999994
so	O	O:0.999999
the	O	O:0.999993
indices	O	O:0.997283
need	O	O:0.999997
only	O	O:0.999998
be	O	O:0.999995
consistent	O	O:0.999720
(	O	O:0.999842
which	O	O:0.999982
it	O	O:0.999962
will	O	O:0.999999
be	O	O:0.999999
here	O	O:0.999983
as	O	O:0.999987
the	O	O:0.999946
apply	B-API	B-API:0.951088
and	O	O:0.999987
col	O	O:0.999763
selection	O	O:0.999934
don't	O	O:0.999886
affect	O	O:0.999956
it	O	O:0.999977
)	O	O:0.999942
.	O	O:0.999712
	
How	O	O:0.999907
to	O	O:0.999979
resample	O	O:0.986112
a	O	O:0.999987
dataframe	O	O:0.992988
with	O	O:1.000000
different	O	O:0.999955
functions	O	O:0.999994
applied	O	O:0.999932
to	O	O:0.999995
each	O	O:0.999991
column	O	O:0.999980
?	O	O:0.999959
	
You	O	O:0.999867
can	O	O:0.999998
also	O	O:1.000000
downsample	O	O:0.999965
using	O	O:0.999983
the	O	O:0.999908
`	O	O:0.999749
asof	B-API	B-API:0.998622
`	O	O:0.999970
method	O	O:0.999963
of	O	O:0.999942
`	O	O:0.999986
pandas.DateRange	U	O:0.995455
`	O	O:0.999973
objects	O	O:0.998521
.	O	O:0.999871
	
@	O	O:0.999066
Wes	O	O:0.999596
McKinney	O	O:0.999506
this	O	O:0.999963
should	O	O:0.999983
be	O	O:0.999991
`	O	O:0.999996
resample	B-API	B-API:0.991185
`	O	O:0.999947
in	O	O:0.999889
0.8	O	O:0.998454
,	O	O:0.999928
isn't	O	O:0.999983
it	O	O:0.999964
?	O	O:0.999943
	
Therefore	O	O:0.999942
,	O	O:0.999998
I	O	O:0.999949
join	B-API	B-API:0.852719
the	O	O:0.999936
index	O	O:0.999795
of	O	O:0.999982
`	O	O:0.999991
count_df	O	O:0.982905
`	O	O:0.999921
(	O	O:0.998498
`	O	O:0.999998
left_index=True	O	O:0.989579
`)	O	O:0.999990
with	O	O:0.999988
the	O	O:0.999937
`	O	O:0.999990
CompanyName	O	O:0.997213
`	O	O:0.999998
column	O	O:0.999980
of	O	O:0.999988
`	O	O:0.999985
df	O	O:0.995951
`	O	O:0.999931
(	O	O:0.998650
`	O	O:0.999987
right_on=	O	O:0.991213
"	O	O:0.999991
CompanyName	O	O:0.995232
"`)	O	O:0.999656
.	O	O:0.998652
	
You	O	O:0.999944
can	O	O:0.999989
drop	O	O:0.999335
the	O	O:0.999998
extraneous	O	O:0.999932
column	O	O:0.999995
using	O	O:0.999974
`	O	O:0.999711
df.drop	B-API	B-API:0.999882
`	O	O:0.999562
:	O	O:0.998890
#CODE	O	O:0.999795
	
(	O	O:0.999892
3	O	O:0.999734
)	O	O:0.999982
save	O	O:0.980122
the	O	O:0.999995
header	O	O:0.999994
columns	O	O:0.999994
for	O	O:0.999999
concat	B-API	B-API:0.928122
later	O	O:0.999910
#CODE	O	O:0.999640
	
(	O	O:0.999844
5	O	O:0.999832
)	O	O:0.999796
output	O	O:0.999560
:	O	O:0.999949
concat	B-API	B-API:0.952365
[	O	O:0.999973
header	O	O:0.999995
data	O	O:0.994226
]	O	O:0.999980
.	O	O:0.999943
write	O	O:0.999789
output	O	O:0.999940
#CODE	O	O:0.999685
	
groupby	B-API	B-API:0.987168
after	O	O:0.999937
concat	B-API	B-API:0.977449
,	O	O:0.999984
column	O	O:0.999999
missing	O	O:0.999920
in	O	O:0.999997
the	O	O:0.999993
group	O	O:0.981535
mean	O	O:0.990243
	
concat	B-API	B-API:0.946186
two	O	O:0.999945
dataframe	O	O:0.997066
,	O	O:0.999997
then	O	O:0.999975
groupby	B-API	B-API:0.976762
'	O	O:0.999939
type	O	O:0.998894
'	O	O:0.999967
and	O	O:0.999993
calculate	O	O:0.999945
the	O	O:0.999990
mean	O	O:0.997218
,	O	O:0.999999
columns	O	O:0.999997
of	O	O:0.999996
second	O	O:0.996521
df	O	O:0.999931
,	O	O:0.999951
i.e.	O	O:0.999911
d1~d10	O	O:0.999747
,	O	O:0.999995
showing	O	O:0.999871
in	O	O:0.999988
the	O	O:0.999982
concat'ed	O	O:0.999150
dataframe	O	O:0.995298
but	O	O:0.999995
not	O	O:0.999962
in	O	O:0.999998
the	O	O:0.999991
grouped	O	O:0.999750
mean	O	O:0.992603
.	O	O:0.999676
	
I	O	O:0.999831
want	O	O:0.999992
to	O	O:0.999977
create	O	O:0.999999
a	O	O:0.999994
new	O	O:0.999947
DataFrame	O	O:0.999659
such	O	O:0.999996
that	O	O:0.999998
each	O	O:0.999905
row	O	O:0.999973
is	O	O:0.999995
created	O	O:0.999841
from	O	O:0.999993
the	O	O:0.999997
original	O	O:0.999943
df	O	O:0.999981
but	O	O:0.999995
rows	O	O:0.999937
with	O	O:0.999998
loc	O	O:0.946876
counts	O	O:0.999991
greater	O	O:0.994041
than	O	O:0.999974
2	O	O:0.999580
are	O	O:0.999967
excluded	O	O:0.999879
.	O	O:0.999748
	
That	O	O:0.999702
is	O	O:0.999970
,	O	O:0.999996
the	O	O:0.999997
new	O	O:0.999939
df	O	O:0.999374
is	O	O:0.999994
created	O	O:0.999962
by	O	O:0.999991
looping	O	O:0.999811
through	O	O:0.999844
the	O	O:0.999953
old	O	O:0.999958
df	O	O:0.999857
,	O	O:0.999988
counting	O	O:0.999988
the	O	O:0.999994
number	O	O:0.999992
of	O	O:0.999999
loc	O	O:0.928553
rows	O	O:0.999998
that	O	O:0.999990
have	O	O:0.999996
come	O	O:0.999948
before	O	O:0.999916
,	O	O:0.999924
and	O	O:0.999999
including	O	O:0.999916
/	O	O:0.999826
excluding	O	O:0.999971
the	O	O:0.999965
row	O	O:0.999994
based	O	O:0.999962
on	O	O:0.999998
this	O	O:0.999986
count	O	O:0.982552
.	O	O:0.999900
	
The	O	O:0.999806
output	O	O:0.999305
excludes	O	O:0.999968
the	O	O:0.999993
4th	O	O:0.999973
row	O	O:0.999986
in	O	O:0.999994
the	O	O:0.999998
original	O	O:0.999956
df	O	O:0.999929
because	O	O:0.999990
its	O	O:0.999983
loc	O	O:0.966648
count	O	O:0.991688
is	O	O:0.999990
greater	O	O:0.994677
than	O	O:0.999943
2	O	O:0.997236
(	O	O:0.999975
i.e.	O	O:0.999906
3	O	O:0.999340
)	O	O:0.999949
.	O	O:0.999680
	
Also	O	O:0.999873
,	O	O:0.999998
be	O	O:0.999985
careful	O	O:0.999946
with	O	O:0.999996
your	O	O:0.999989
column	O	O:0.999993
names	O	O:0.997429
,	O	O:0.999994
since	O	O:0.999941
`	O	O:0.999986
loc	O	O:0.790579
`	O	O:0.999997
clashes	O	O:0.998669
with	O	O:0.999997
the	O	O:0.999871
`	O	O:0.999967
.loc	B-API	B-API:0.998736
`	O	O:0.999873
method	O	O:0.999835
.	O	O:0.999907
	
So	O	O:0.999951
you	O	O:0.999982
get	O	O:0.999854
a	O	O:0.999999
string	O	O:0.999962
back	O	O:0.990563
:)	O	O:0.999858
.	O	O:0.999096
	
You	O	O:0.999930
can	O	O:0.999993
use	O	O:0.997780
eval	B-API	B-API:0.964833
(	O	O:0.999585
""	O	O:0.999809
[	O	O:0.999881
1.5	O	O:0.999147
,	O	O:0.999930
2.5	O	O:0.998062
,	O	O:0.999935
3.5	O	O:0.999361
]"")	O	O:0.998566
,	O	O:0.999986
but	O	O:0.999981
I	O	O:0.999843
hear	O	O:0.999963
it's	O	O:0.999822
bad	O	O:0.999901
practice	O	O:0.999950
.	O	O:0.999704
	
You	O	O:0.999943
can	O	O:0.999967
map	O	O:0.987647
your	O	O:0.999996
lists	O	O:0.999966
to	O	O:0.999996
strings	O	O:0.999998
by	O	O:0.999994
using	O	O:0.999983
`"	O	O:0.999722
,	O	O:0.999772
"	O	O:0.999562
.join	B-API	B-API:0.998751
(	O	O:0.999916
your_list	O	O:0.999241
)`	O	O:0.999905
given	O	O:0.999932
that	O	O:0.999993
you	O	O:0.999998
only	O	O:0.999999
use	O	O:0.998606
floats	O	O:0.998642
.	O	O:0.999584
	
merge	B-API	B-API:0.901188
the	O	O:0.999959
dataframe	O	O:0.998706
on	O	O:0.999974
ID	O	O:0.999640
#CODE	O	O:0.999706
	
The	O	O:0.999864
`	O	O:0.999966
merge	B-API	B-API:0.975460
`	O	O:0.999954
did	O	O:0.999884
the	O	O:0.999993
trick	O	O:0.999934
,	O	O:0.999995
but	O	O:0.999984
I	O	O:0.999805
thought	O	O:0.999979
it	O	O:0.999846
was	O	O:0.999972
more	O	O:0.999983
usefull	O	O:0.999867
to	O	O:0.999993
just	O	O:0.999998
do	O	O:0.999999
a	O	O:0.999957
`	O	O:0.999955
dfMerged.dropna()	O	O:0.959426
`	O	O:0.999949
after	O	O:0.999952
the	O	O:0.999984
merge	B-API	B-API:0.938800
and	O	O:0.999998
that	O	O:0.999996
will	O	O:0.999991
be	O	O:1.000000
the	O	O:1.000000
set	O	O:0.986548
with	O	O:0.999998
the	O	O:0.999970
difference	O	O:0.996097
.	O	O:0.999883
	
yes	O	O:0.999828
,	O	O:0.999993
essentially	O	O:0.999963
,	O	O:0.999998
the	O	O:0.999985
answer	O	O:0.999720
was	O	O:0.999993
really	O	O:0.999977
about	O	O:0.999988
the	O	O:0.999977
`	O	O:0.999966
merge	B-API	B-API:0.988976
`	O	O:0.999957
method	O	O:0.999984
,	O	O:0.999993
which	O	O:0.999989
allows	O	O:0.999924
you	O	O:0.999990
to	O	O:0.999999
sql-like	O	O:0.999987
joins	O	O:0.999723
.	O	O:0.999842
	
Instead	O	O:0.999967
,	O	O:0.999988
I	O	O:0.999969
get	O	O:0.999669
an	O	O:0.999975
error	O	O:0.999994
telling	O	O:0.999980
me	O	O:0.999961
that	O	O:0.999988
equiv	O	O:0.998233
is	O	O:0.999990
not	O	O:0.999993
a	O	O:0.999994
callable	O	O:0.994210
function	O	O:0.997644
.	O	O:0.999600
	
Fair	O	O:0.999752
enough	O	O:0.999698
,	O	O:0.999951
it's	O	O:0.999962
a	O	O:0.999982
dictionary	O	O:0.999802
,	O	O:0.999995
but	O	O:0.999995
even	O	O:0.999994
if	O	O:0.999997
I	O	O:0.999932
wrap	O	O:0.998021
it	O	O:0.999803
in	O	O:0.999998
a	O	O:0.999961
function	O	O:0.991097
I	O	O:0.999982
still	O	O:0.999995
get	O	O:0.988526
frustration	O	O:0.999969
.	O	O:0.999885
	
So	O	O:0.999806
I	O	O:0.999785
tried	O	O:0.999984
to	O	O:0.999766
use	O	O:0.999924
a	O	O:0.999899
map	B-API	B-API:0.993346
function	O	O:0.999322
that	O	O:0.999965
seems	O	O:0.999995
to	O	O:0.999997
work	O	O:0.999999
with	O	O:1.000000
other	O	O:0.999981
operations	O	O:0.999894
,	O	O:0.999948
but	O	O:0.999996
it	O	O:0.999989
also	O	O:0.999974
is	O	O:0.999999
defeated	O	O:0.999984
by	O	O:0.999987
use	O	O:0.996437
of	O	O:0.999960
a	O	O:0.999580
dictionary	O	O:0.999130
:	O	O:0.999957
#CODE	O	O:0.999716
	
ok	O	O:0.999740
,	O	O:0.999982
revised	O	O:0.999977
the	O	O:0.999981
answer	O	O:0.999813
;	O	O:0.999990
you	O	O:0.999954
can	O	O:0.999999
do	O	O:0.999999
almost	O	O:0.999998
anything	O	O:0.999993
inside	O	O:0.999964
the	O	O:0.999972
apply	U	B-API:0.958446
FYI	O	O:0.998900
	
In	O	O:0.999962
order	O	O:0.996204
to	O	O:0.999998
normalize	O	O:0.998634
data	O	O:0.998340
in	O	O:1.000000
a	O	O:0.999993
pandas	O	O:0.999930
DataFrame	O	O:0.999447
I	O	O:0.999812
wrote	O	O:0.999968
the	O	O:0.999983
following	O	O:0.999449
functions	O	O:0.999883
:	O	O:0.999943
#CODE	O	O:0.999735
	
If	O	O:0.999953
you	O	O:0.999989
want	O	O:0.999999
the	O	O:0.999999
values	O	O:0.998176
themselves	O	O:0.999981
,	O	O:0.999998
you	O	O:0.999994
can	O	O:0.999991
`	O	O:0.999998
groupby	B-API	B-API:0.997093
`	O	O:0.999965
'	O	O:0.999014
Column1	O	O:0.999695
'	O	O:0.999902
and	O	O:0.999997
then	O	O:0.999987
call	O	O:0.999682
`	O	O:0.999968
apply	B-API	B-API:0.989177
`	O	O:0.999948
and	O	O:0.999952
pass	O	O:0.999973
the	O	O:0.999262
`	O	O:0.999936
list	U	B-API:0.804819
`	O	O:0.999971
method	O	O:0.999982
to	O	O:0.999998
apply	O	O:0.971602
to	O	O:0.999994
each	O	O:0.999979
group	O	O:0.983385
.	O	O:0.999898
	
You	O	O:0.999822
could	O	O:0.999957
`	O	O:0.999992
groupby	B-API	B-API:0.998189
`	O	O:0.999987
on	O	O:0.998290
`	O	O:0.999986
Column1	O	O:0.995713
`	O	O:0.999981
and	O	O:0.999991
then	O	O:0.999999
take	O	O:0.997842
`	O	O:0.999990
Column3	O	O:0.996225
`	O	O:0.999987
to	O	O:0.999463
`	O	O:0.999998
apply	B-API	B-API:0.989323
(	O	O:0.999945
list	O	O:0.994462
)`	O	O:0.999649
and	O	O:0.999975
call	O	O:0.999514
`	O	O:0.999641
to_dict	B-API	B-API:0.999921
`	O	O:0.999937
?	O	O:0.999028
	
Pandas	O	O:0.999034
-	O	O:0.999952
How	O	O:0.999926
can	O	O:0.999992
I	O	O:1.000000
set	O	O:0.999512
rules	O	O:0.999929
for	O	O:0.999997
selecting	O	O:0.999922
which	O	O:0.999969
duplicates	O	O:0.999970
to	O	O:0.999990
drop	O	O:0.995289
	
What	O	O:0.999789
I	O	O:0.999888
want	O	O:0.999993
to	O	O:0.999965
do	O	O:0.999995
is	O	O:0.999991
drop	O	O:0.996485
the	O	O:0.999997
values	O	O:0.997485
that	O	O:0.999993
have	O	O:0.999999
the	O	O:0.999996
same	O	O:0.999960
index	O	O:0.998138
(	O	O:0.999990
date	O	O:0.991807
time	O	O:0.995482
)	O	O:0.999958
,	O	O:0.999990
but	O	O:0.999980
I	O	O:0.999916
want	O	O:0.999996
to	O	O:0.999936
make	O	O:1.000000
a	O	O:0.999991
rule	O	O:0.999792
like	O	O:0.999931
:	O	O:0.999865
	
I	O	O:0.999792
have	O	O:0.999988
tried	O	O:0.999905
using	O	O:0.999924
groupby	B-API	B-API:0.999338
and	O	O:0.999981
apply	B-API	B-API:0.952973
in	O	O:0.999679
several	O	O:0.999954
different	O	O:0.999826
ways	O	O:0.999840
but	O	O:0.999940
I	O	O:0.999939
cant	O	O:0.999983
get	O	O:0.998675
it	O	O:0.999998
to	O	O:0.999995
work	O	O:0.999998
.	O	O:0.999941
	
You	O	O:0.999910
could	O	O:0.999985
use	O	O:0.999069
`	O	O:0.999977
del	O	O:0.999149
df	O	O:0.999442
[	O	O:0.999903
'	O	O:0.999931
dist	O	O:0.983380
']`	O	O:0.999979
to	O	O:0.999940
drop	O	O:0.999468
the	O	O:0.999996
dist	O	O:0.992363
column	O	O:0.999998
when	O	O:0.999984
you	O	O:0.999993
no	O	O:0.999998
longer	O	O:0.999997
need	O	O:0.999997
it	O	O:0.999993
.	O	O:0.999889
	
Though	O	O:0.999683
I	O	O:0.999849
was	O	O:0.999985
wondering	O	O:0.999912
if	O	O:0.999990
you	O	O:0.999991
could	O	O:0.999993
do	O	O:1.000000
it	O	O:0.999997
immediately	O	O:0.999960
using	O	O:0.999994
lambda	O	O:0.998778
,	O	O:0.999858
apply	B-API	B-API:0.942473
and	O	O:0.999715
groupby	B-API	B-API:0.996589
.	O	O:0.998821
	
I	O	O:0.999631
am	O	O:0.999986
sorry	O	O:0.999665
I	O	O:0.999960
am	O	O:0.999993
trying	O	O:0.999964
to	O	O:0.999999
insert	O	O:0.998162
code	O	O:0.999995
into	O	O:0.999979
comments	O	O:0.999898
I	O	O:0.999837
cant	O	O:0.999957
do	O	O:0.999949
it	O	O:0.999972
	
All	O	O:0.999781
I	O	O:0.999786
am	O	O:0.999995
doing	O	O:0.999918
at	O	O:0.998033
the	O	O:0.999978
moment	O	O:0.999899
is	O	O:0.999994
loading	O	O:0.999839
the	O	O:0.999993
.csv	O	O:0.997844
as	O	O:0.999992
a	O	O:0.999961
dataframe	O	O:0.990347
and	O	O:0.999999
then	O	O:0.999991
writing	O	O:0.999993
it	O	O:0.999956
to	O	O:0.999992
the	O	O:1.000000
db	O	O:0.999992
using	O	O:0.999991
`	O	O:0.999579
df.to_sql	B-API	B-API:0.998815
(	O	O:0.999937
table_name	O	O:0.994331
,	O	O:0.999971
engine	O	O:0.999923
,	O	O:0.999995
index=False	O	O:0.999673
,	O	O:0.999955
if_exists=	O	O:0.999367
'	O	O:0.999962
append	B-API	B-API:0.923487
'	O	O:0.999866
,	O	O:0.999984
chunksize=1000	O	O:0.999787
)`	O	O:0.999612
	
I	O	O:0.999831
want	O	O:0.999995
to	O	O:0.999934
transform	O	O:0.993711
it	O	O:0.999982
into	O	O:0.999994
a	O	O:0.999997
single	O	O:0.999887
column	O	O:0.999999
data	O	O:0.998077
with	O	O:0.999993
index	O	O:0.999872
being	O	O:0.999942
year-month	O	O:0.999598
.	O	O:0.999559
	
I	O	O:0.999704
try	O	O:0.999985
to	O	O:0.999970
stack	O	O:0.997462
my	O	O:0.999997
original	O	O:0.999972
data	O	O:0.998885
but	O	O:0.999996
it	O	O:0.999985
becomes	O	O:0.999991
a	O	O:0.999991
time	O	O:0.991414
series	O	O:0.999996
,	O	O:0.999991
which	O	O:0.999966
has	O	O:0.999992
the	O	O:0.999994
year	O	O:0.982307
mix	O	O:0.999968
with	O	O:0.999999
my	O	O:0.999920
values	O	O:0.982283
.	O	O:0.999858
	
`	O	O:0.999654
set_index	B-API	B-API:0.999845
`	O	O:0.999983
to	O	O:0.999490
`	O	O:0.999998
Year	O	O:0.993299
`	O	O:0.999992
first	O	O:0.981279
,	O	O:0.999988
and	O	O:0.999998
then	O	O:0.999981
`	O	O:0.999997
stack	B-API	B-API:0.882267
`	O	O:0.999974
.	O	O:0.999085
	
OLS	O	O:0.979066
solution	O	O:0.999981
using	O	O:0.999813
pinv	B-API	B-API:0.975783
/	O	O:0.998347
svd	B-API	B-API:0.801645
#CODE	O	O:0.997523
	
The	O	O:0.999964
bad	O	O:0.999771
days	O	O:0.994273
are	O	O:0.999993
eliminated	O	O:0.999916
,	O	O:0.999936
and	O	O:0.999998
the	O	O:0.999997
good	O	O:0.999867
ones	O	O:0.996980
are	O	O:0.999991
kept	O	O:0.999950
.	O	O:0.999762
	
shape	O	O:0.914701
mismatch	O	O:0.999915
:	O	O:0.999975
value	O	O:0.999996
array	O	O:0.999471
of	O	O:0.999969
shape	B-API	O:0.951861
(	O	O:0.999990
1000	O	O:0.999734
,	O	O:0.999965
)	O	O:0.999974
could	O	O:0.999975
not	O	O:0.999999
be	O	O:0.999999
broadcast	O	O:0.996286
to	O	O:0.999993
indexing	O	O:0.999999
result	O	O:0.999997
of	O	O:0.999974
shape	B-API	O:0.876868
(	O	O:0.999996
1000,3,255,255	O	O:0.999353
)	O	O:0.999884
	
@USER	O	O:0.999481
Well	O	O:0.999821
in	O	O:0.999996
this	O	O:0.999981
case	O	O:0.999987
,	O	O:0.999979
`	O	O:0.999933
searchsorted	B-API	B-API:0.981808
`	O	O:0.999957
is	O	O:0.999964
basically	O	O:0.999996
looking	O	O:0.999997
for	O	O:0.999998
places	O	O:0.999992
or	O	O:0.999995
indices	O	O:0.998997
where	O	O:0.998976
elements	O	O:0.999980
from	O	O:0.999990
`	O	O:0.999989
message	O	O:0.999165
`	O	O:0.999998
exists	O	O:0.968837
in	O	O:0.999999
the	O	O:0.999997
keys	O	O:0.995444
of	O	O:0.999993
`	O	O:0.999985
codes	O	O:0.835046
`	O	O:0.999970
.	O	O:0.999414
	
@USER	O	O:0.998468
--	O	O:0.999890
I	O	O:0.999202
had	O	O:0.999996
a	O	O:0.999951
hard	O	O:0.999620
time	O	O:0.999230
remembering	O	O:0.999988
how	O	O:0.999931
`	O	O:0.999985
translate	O	O:0.819451
`	O	O:0.999974
and	O	O:0.999870
`	O	O:0.999996
maketrans	O	O:0.987226
`	O	O:0.999996
work	O	O:0.999908
for	O	O:0.999998
quite	O	O:0.999990
a	O	O:0.999975
while	O	O:0.999915
too	O	O:0.999672
,	O	O:0.999985
but	O	O:0.999951
I've	O	O:0.999834
gotten	O	O:0.999948
used	O	O:0.999929
to	O	O:0.999972
it	O	O:0.999996
.	O	O:0.999869
	
Edit	O	O:0.997403
:	O	O:0.999959
if	O	O:0.999976
you're	O	O:0.999987
using	O	O:0.999997
a	O	O:0.999967
version	O	O:0.999804
of	O	O:0.999973
numpy	O	O:0.999410
>	O	O:0.999949
=	O	O:0.999852
1.8.0	O	O:0.999307
,	O	O:0.999983
then	O	O:0.999977
`	O	O:0.999992
np.linalg.eigvals	B-API	B-API:0.983645
`	O	O:0.999996
operates	O	O:0.999816
over	O	O:0.998068
the	O	O:0.999966
last	O	O:0.998250
two	O	O:0.999997
dimensions	O	O:0.999971
of	O	O:0.999992
whatever	O	O:0.999984
array	O	O:0.999674
you	O	O:0.999989
hand	O	O:0.999998
it	O	O:0.999996
,	O	O:0.999997
so	O	O:0.999998
if	O	O:0.999992
you	O	O:0.999995
reshape	O	O:0.975003
your	O	O:0.999994
input	O	O:0.999989
to	O	O:0.999998
an	O	O:0.999988
`	O	O:0.999856
(	O	O:0.999954
n_subarrays	O	O:0.999246
,	O	O:0.999981
nrows	O	O:0.999851
,	O	O:0.999989
ncols	O	O:0.999911
)`	O	O:0.999936
array	O	O:0.986357
you'll	O	O:0.999980
only	O	O:0.999996
have	O	O:0.999999
to	O	O:0.999993
call	O	O:0.999951
`	O	O:0.999975
eigvals	B-API	B-API:0.831635
`	O	O:0.999971
once	O	O:0.998119
:	O	O:0.999981
#CODE	O	O:0.999738
	
`	O	O:0.999903
reshape	B-API	B-API:0.976070
`	O	O:0.999932
returns	O	O:0.999923
a	O	O:0.999998
view	O	O:0.890538
of	O	O:0.999997
the	O	O:0.999989
original	O	O:0.999983
array	O	O:0.996801
,	O	O:0.999978
not	O	O:0.999999
a	O	O:0.999998
copy	O	O:0.778249
,	O	O:0.999997
so	O	O:0.999972
the	O	O:0.999970
conversion	O	O:0.999951
to	O	O:0.999995
3D	O	O:0.999987
only	O	O:0.999979
requires	O	O:0.999974
altering	O	O:0.999968
the	O	O:0.999841
`	O	O:0.999932
shape	O	O:0.819076
`	O	O:0.999975
and	O	O:0.999825
`	O	O:0.999992
strides	O	B-API:0.939201
`	O	O:0.999995
attributes	O	O:0.999063
of	O	O:0.999996
the	O	O:0.999986
array	O	O:0.999232
,	O	O:0.999996
without	O	O:0.999989
having	O	O:0.999917
to	O	O:0.999982
copy	O	O:0.997602
any	O	O:0.998001
of	O	O:0.999956
the	O	O:0.999997
actual	O	O:0.999989
data	O	O:0.998483
.	O	O:0.999901
	
sum	O	O:0.985198
this	O	O:0.999993
new	O	O:0.999945
array	O	O:0.998388
along	O	O:0.999916
particular	O	O:0.999865
axes	O	O:0.977623
;	O	O:0.999948
and	O	O:0.999994
then	O	O:0.999998
maybe	O	O:0.999969
	
Calling	O	O:0.998924
`	O	O:0.999869
reshape	B-API	B-API:0.973311
`	O	O:0.999924
returns	O	O:0.999880
a	O	O:0.999994
view	O	O:0.669652
,	O	O:0.999995
so	O	O:0.999979
it	O	O:0.999958
doesn't	O	O:0.999980
incur	O	O:0.999978
any	O	O:0.997352
big	O	O:0.999980
copying	O	O:0.999880
costs	O	O:0.999792
or	O	O:0.999996
anything	O	O:0.999987
like	O	O:0.999992
that	O	O:0.999993
.	O	O:0.999909
	
so	O	O:0.999947
at	O	O:0.999345
some	O	O:0.999984
point	O	O:0.999965
in	O	O:0.999995
the	O	O:0.999976
execution	O	O:0.999995
it	O	O:0.999991
will	O	O:0.999994
max	O	O:0.972752
my	O	O:0.999903
memory	O	O:0.999922
.	O	O:0.999840
	
Note	O	O:0.999864
that	O	O:0.999967
extension	O	O:0.999992
to	O	O:0.999998
even	O	O:1.000000
higher	O	O:0.999954
combinatorics	O	O:0.999920
should	O	O:0.999980
be	O	O:0.999997
trivial	O	O:0.999968
,	O	O:0.999973
along	O	O:0.999972
the	O	O:0.999983
lines	O	O:0.953778
presented	O	O:0.999899
;	O	O:0.999994
but	O	O:0.999980
keep	O	O:0.999976
an	O	O:0.999990
eye	O	O:0.998219
on	O	O:0.999996
the	O	O:0.999993
n	O	O:0.999961
used	O	O:0.999973
in	O	O:0.999992
that	O	O:0.999972
case	O	O:0.999984
.	O	O:0.999881
	
These	O	O:0.999793
functions	O	O:0.999932
return	O	O:0.999883
a	O	O:0.999935
list	O	O:0.980031
,	O	O:0.999994
which	O	O:0.999972
I	O	O:0.999973
convert	O	O:0.976180
to	O	O:0.999983
a	O	O:0.999998
numpy	O	O:0.999764
array	O	O:0.994053
and	O	O:0.999999
then	O	O:0.999998
sum	O	O:0.987001
over	O	O:0.989810
.	O	O:0.999608
	
Can	O	O:0.999964
it	O	O:0.999998
be	O	O:0.999998
because	O	O:0.999995
of	O	O:0.999969
the	O	O:0.999998
many	O	O:0.999996
zeros	O	O:0.982591
in	O	O:0.999994
the	O	O:0.999996
initial	O	O:0.999939
table	O	O:0.995848
?	O	O:0.999876
	
I	O	O:0.999778
also	O	O:0.999991
understand	O	O:0.999988
that	O	O:0.999972
sum	B-API	O:0.709476
(	O	O:0.999996
A	O	O:0.999984
,	O	O:0.999889
axis=1	O	O:0.999849
)	O	O:0.999987
will	O	O:0.999990
sum	O	O:0.998819
each	O	O:0.999972
row	O	O:0.999973
.	O	O:0.999857
	
But	O	O:0.999927
what	O	O:0.999908
I	O	O:0.999971
really	O	O:0.999989
want	O	O:0.999957
to	O	O:0.999991
do	O	O:0.999998
,	O	O:0.999977
is	O	O:0.999992
to	O	O:0.999989
bin	O	O:0.999983
`	O	O:0.999988
array	O	O:0.932473
[:	O	O:0.999973
,	O	O:0.999978
1	O	O:0.999861
]`	O	O:0.999989
by	O	O:0.999899
day	O	O:0.985378
(	O	O:0.999989
as	O	O:0.999998
derived	O	O:0.999933
by	O	O:0.999985
the	O	O:0.999994
unix	O	O:0.999708
timestamps	O	O:0.999595
in	O	O:0.999978
array	O	O:0.990079
[:	O	O:0.999964
,	O	O:0.999959
0	O	O:0.999665
])	O	O:0.999823
,	O	O:0.999897
and	O	O:0.999993
plot	O	O:0.992633
these	O	O:0.999951
as	O	O:0.999997
a	O	O:0.999976
stacked	O	O:0.999242
histogram	O	O:0.997782
,	O	O:0.999988
with	O	O:0.999995
each	O	O:0.999343
(	O	O:0.999992
colored	O	O:0.999927
)	O	O:0.999990
stack	O	O:0.893580
representing	O	O:0.999994
a	O	O:0.999866
day	O	O:0.977434
.	O	O:0.999838
	
It's	O	O:0.999893
interesting	O	O:0.999952
to	O	O:0.999993
see	O	O:0.999999
that	O	O:0.999997
when	O	O:0.999995
I	O	O:0.999990
go	O	O:0.999999
back	O	O:0.988189
to	O	O:0.999967
`	O	O:0.999998
nloop=1000	O	O:0.993943
`	O	O:0.999986
,	O	O:0.999365
`	O	O:0.999995
nreps=3	O	O:0.994093
`	O	O:0.999978
I	O	O:0.999720
actually	O	O:0.999995
see	O	O:0.999989
a	O	O:0.999988
slightly	O	O:0.999648
*	O	O:0.999995
greater	O	O:0.970326
*	O	O:0.999991
rate	O	O:0.996043
of	O	O:0.999979
cache	O	O:0.999961
misses	O	O:0.999948
for	O	O:0.999996
the	O	O:0.999970
row	O	O:0.999974
sum	O	O:0.938412
(	O	O:0.999993
17%	O	O:0.999841
vs	O	O:0.999858
13%	O	O:0.999865
)	O	O:0.999977
,	O	O:0.999994
even	O	O:0.999989
though	O	O:0.999989
it's	O	O:0.999992
faster	O	O:0.999955
than	O	O:0.999993
the	O	O:0.999992
column	O	O:0.999990
sum	O	O:0.991148
.	O	O:0.999924
	
You	O	O:0.999935
can	O	O:0.999997
concatenate	O	O:0.986478
arrays	O	O:0.999959
in	O	O:0.999963
`	O	O:0.999986
numpy	O	O:0.997135
`	O	O:0.999931
.	O	O:0.998926
	
If	O	O:0.999881
you	O	O:0.999982
are	O	O:0.999997
100%	O	O:0.999974
sure	O	O:0.999979
that	O	O:0.999976
l2	O	O:0.999775
would	O	O:0.999995
only	O	O:0.999998
be	O	O:1.000000
one	O	O:0.999999
column	O	O:0.999997
then	O	O:0.999997
you	O	O:0.999999
can	O	O:0.999998
reshape	O	O:0.995750
that	O	O:0.999993
array	O	O:0.999463
to	O	O:0.999993
make	O	O:1.000000
it	O	O:0.999997
one	O	O:0.999997
dimensional	O	O:0.999930
before	O	O:0.999891
doing	O	O:0.999943
the	O	O:0.999921
subtraction	O	O:0.999160
.	O	O:0.999868
	
You	O	O:0.999758
won't	O	O:0.999988
be	O	O:0.999999
able	O	O:0.999999
to	O	O:0.999995
create	O	O:0.999998
a	O	O:0.999992
2D	O	O:0.999673
array	O	O:0.998624
that	O	O:0.999974
way	O	O:0.999965
,	O	O:0.999964
and	O	O:0.999991
@USER	O	O:0.999491
method	O	O:0.999977
of	O	O:0.999989
returning	O	O:0.999976
a	O	O:0.999989
1D	O	O:0.999161
array	O	O:0.998099
that	O	O:0.999988
you	O	O:0.999998
reshape	O	O:0.972958
afterwards	O	O:0.999807
is	O	O:0.999997
a	O	O:0.999990
sure	O	O:0.999682
go	O	O:0.999948
.	O	O:0.999856
	
I	O	O:0.999656
have	O	O:0.999997
a	O	O:0.999968
square	O	O:0.754720
matrix	O	O:0.995539
A	O	O:0.999820
(	O	O:0.999814
could	O	O:0.999993
be	O	O:0.999998
any	O	O:0.998663
size	O	O:0.970405
)	O	O:0.999965
and	O	O:0.999984
I	O	O:0.999982
want	O	O:0.999987
to	O	O:0.999961
take	O	O:0.999945
the	O	O:0.999996
upper	O	O:0.976897
triangular	O	O:0.977316
part	O	O:0.999961
and	O	O:0.999998
place	O	O:0.999823
those	O	O:0.999994
values	O	O:0.987062
in	O	O:0.999995
an	O	O:0.999995
array	O	O:0.998902
without	O	O:0.999994
the	O	O:0.999996
values	O	O:0.962113
below	O	O:0.999985
the	O	O:0.999999
center	O	O:0.961806
diagonal	O	O:0.985568
(	O	O:0.999959
k=0	O	O:0.999411
)	O	O:0.999925
.	O	O:0.999490
	
You	O	O:0.999919
can	O	O:0.999984
mimic	O	O:0.999999
this	O	O:0.999978
behavior	O	O:0.999926
with	O	O:0.999997
a	O	O:0.999963
simple	O	O:0.998212
function	O	O:0.999022
to	O	O:0.999980
flatten	O	O:0.985742
a	O	O:0.999783
list	O	O:0.722015
:	O	O:0.999966
#CODE	O	O:0.999455
	
So	O	O:0.999584
`	O	O:0.999960
popt	O	O:0.995031
`	O	O:0.999990
,	O	O:0.999981
according	O	O:0.999970
to	O	O:0.999987
the	O	O:0.999998
documentation	O	O:0.999981
,	O	O:0.999990
returns	O	O:0.999846
*	O	O:0.999977
"	O	O:0.999994
Optimal	O	O:0.999912
values	O	O:0.977957
for	O	O:0.999999
the	O	O:0.999992
parameters	O	O:0.999817
so	O	O:0.999996
that	O	O:0.999998
the	O	O:1.000000
sum	O	O:0.992224
of	O	O:0.999998
the	O	O:0.999998
squared	O	O:0.999972
error	O	O:0.999994
of	O	O:0.999968
f	O	O:0.832320
(	O	O:0.999993
xdata	O	O:0.999738
,	O	O:0.999985
popt	O	O:0.999517
)	O	O:0.999985
-	O	O:0.999962
ydata	O	O:0.999270
is	O	O:0.999984
minimized	O	O:0.998979
"	O	O:0.999936
.	O	O:0.998517
	
And	O	O:0.999922
I'd	O	O:0.999993
like	O	O:0.999982
indices	O	O:0.991784
`	O	O:0.999988
i	O	O:0.998641
`	O	O:0.999997
such	O	O:0.999930
that	O	O:0.999993
,	O	O:0.999971
#CODE	O	O:0.999621
	
But	O	O:0.999738
,	O	O:0.999947
`	O	O:0.999981
resize	B-API	B-API:0.979966
`	O	O:0.999964
looks	O	O:0.999901
like	O	O:0.999998
it	O	O:0.999998
just	O	O:0.999983
might	O	O:0.999996
be	O	O:0.999994
the	O	O:0.999995
thing	O	O:0.999912
I'm	O	O:0.999958
looking	O	O:0.999874
for	O	O:0.999992
...	O	O:0.999071
	
`	O	O:0.999728
rfft	B-API	B-API:0.996683
`	O	O:0.999986
,	O	O:0.999976
apart	O	O:0.999995
from	O	O:0.999997
repeated	O	O:0.999870
terms	O	O:0.999973
excluded	O	O:0.999764
,	O	O:0.999849
and	O	O:0.999997
an	O	O:0.999988
almost	O	O:0.999922
2x	O	O:0.999941
speed-up	O	O:0.999781
,	O	O:0.999958
returns	O	O:0.999946
the	O	O:0.999992
exact	O	O:0.999979
same	O	O:0.999994
you	O	O:0.999987
would	O	O:0.999999
get	O	O:0.999896
from	O	O:0.999996
`	O	O:0.999991
fft	B-API	B-API:0.964524
`	O	O:0.999887
.	O	O:0.998859
	
Plus	O	O:0.999839
,	O	O:0.999993
if	O	O:0.999989
I	O	O:0.999971
have	O	O:0.999996
4	O	O:0.999847
dimensions	O	O:0.999967
,	O	O:0.999979
I	O	O:0.999961
thought	O	O:0.999843
I	O	O:0.999722
should	O	O:0.999994
have	O	O:0.999984
4	O	O:0.999951
eigenvalues	O	O:0.999724
and	O	O:0.999996
not	O	O:0.999992
150	O	O:0.999804
like	O	O:0.999994
the	O	O:0.999968
eig	B-API	B-API:0.558741
gives	O	O:0.999960
me	O	O:0.999707
.	O	O:0.999851
	
If	O	O:0.999850
I	O	O:0.999805
run	O	O:0.999995
your	O	O:0.999915
code	O	O:0.999971
to	O	O:0.999996
generate	O	O:0.999974
`	O	O:0.999990
d	O	O:0.996972
`	O	O:0.999978
and	O	O:0.999823
`	O	O:0.999995
dx	O	O:0.974118
`	O	O:0.999988
with	O	O:0.999639
`	O	O:0.999959
eig	B-API	B-API:0.835730
`	O	O:0.999992
I	O	O:0.999457
get	O	O:0.999404
the	O	O:0.999786
following	O	O:0.999049
:	O	O:0.999971
#CODE	O	O:0.999706
	
In	O	O:0.999892
other	O	O:0.999915
words-	O	O:0.999860
it	O	O:0.999575
is	O	O:0.999969
not	O	O:0.999990
just	O	O:0.999992
taking	O	O:0.999991
a	O	O:0.999971
min	O	O:0.513981
or	O	O:0.999975
max	O	O:0.800343
.	O	O:0.999693
	
D	O	O:0.998917
[	O	O:0.999907
I+1	O	O:0.999720
,	O	O:0.999959
J+1	O	O:0.999593
]	O	O:0.999956
=	O	O:0.996680
map	B-API	B-API:0.967241
(	O	O:0.999915
norm	O	O:0.558017
,	O	O:0.999958
x	O	O:0.999801
[	O	O:0.999961
I	O	O:0.999925
]	O	O:0.999938
-y	O	O:0.995927
[	O	O:0.999895
J	O	O:0.999685
])	O	O:0.999641
+	O	O:0.996171
np.minimum	B-API	B-API:0.991656
(	O	O:0.998750
np.minimum	B-API	B-API:0.986944
(	O	O:0.999813
D	O	O:0.999784
[	O	O:0.999918
I	O	O:0.999872
,	O	O:0.999983
J	O	O:0.999484
]	O	O:0.999948
,	O	O:0.999821
D	O	O:0.999731
[	O	O:0.999926
I	O	O:0.999852
,	O	O:0.999982
J+1	O	O:0.999341
])	O	O:0.999951
,	O	O:0.999864
D	O	O:0.999735
[	O	O:0.999936
I+1	O	O:0.999806
,	O	O:0.999968
J	O	O:0.999327
])	O	O:0.999876
?	O	O:0.999261
	
`	O	O:0.999898
dot	B-API	B-API:0.945635
`	O	O:0.999979
just	O	O:0.999834
has	O	O:0.999998
tighter	O	O:0.999892
code	O	O:0.999911
for	O	O:0.999998
a	O	O:0.999986
specific	O	O:0.999868
combination	O	O:0.999999
of	O	O:0.999972
dimensions	O	O:0.999847
.	O	O:0.999920
	
numpy	O	O:0.999821
sum	B-API	O:0.802102
does	O	O:0.999982
not	O	O:0.999989
agree	O	O:0.999906
	
Since	O	O:0.999794
you	O	O:0.999952
are	O	O:0.999999
only	O	O:0.999997
adding	O	O:0.999951
many	O	O:0.999843
`	O	O:0.999933
1	O	O:0.994072
`	O	O:0.999985
s	O	O:0.999607
you	O	O:0.999994
can	O	O:0.999998
convert	O	O:0.986811
`	O	O:0.999996
diff	O	B-API:0.953134
`	O	O:0.999981
to	O	O:0.998471
`	O	O:0.999997
bool	O	B-API:0.924682
`	O	O:0.999839
:	O	O:0.999769
#CODE	O	O:0.999811
	
It	O	O:0.999749
isn't	O	O:0.999969
mathematically	O	O:0.999982
possible	O	O:0.999983
to	O	O:0.999994
represent	O	O:0.999983
0	O	O:0.999884
on	O	O:0.999997
a	O	O:0.999985
log	O	O:0.996125
scale	O	O:0.999947
,	O	O:0.999995
so	O	O:0.999995
the	O	O:0.999995
first	O	O:0.998783
value	O	O:0.999996
will	O	O:0.999994
have	O	O:0.999998
to	O	O:0.999998
either	O	O:1.000000
be	O	O:0.999997
masked	O	O:0.994675
or	O	O:0.999979
clipped	O	O:0.999783
to	O	O:0.999997
a	O	O:0.999998
very	O	O:0.999812
small	O	O:0.999985
positive	O	O:0.999223
number	O	O:0.999853
.	O	O:0.999610
	
possible	O	O:0.999917
duplicate	O	O:0.999990
of	O	O:0.999982
[	O	O:0.999962
Efficiently	O	O:0.999984
count	O	O:0.994115
the	O	O:0.999997
number	O	O:0.999996
of	O	O:0.999999
occurrences	O	O:0.999995
of	O	O:1.000000
unique	O	O:0.990056
subarrays	O	O:0.999980
in	O	O:0.999956
NumPy	O	O:0.999947
?	O	O:0.999852
]	O	O:0.997736
(	O	O:0.999959
#URL	O	O:0.998864
)	O	O:0.999871
	
Or	O	O:0.999969
you	O	O:0.999985
could	O	O:0.999992
mask	O	O:0.999835
the	O	O:0.999998
x	O	O:0.999963
value	O	O:0.999998
as	O	O:0.999998
well	O	O:0.999980
,	O	O:0.999998
so	O	O:0.999997
the	O	O:0.999977
indices	O	O:0.961156
were	O	O:0.999984
consistent	O	O:0.999938
between	O	O:0.980303
x	O	O:0.998694
and	O	O:0.999986
y	O	O:0.999857
#CODE	O	O:0.997940
	
Here	O	O:0.999696
the	O	O:0.999951
`	O	O:0.999981
outer	B-API	O:0.516022
`	O	O:0.999975
method	O	O:0.999977
of	O	O:0.999996
the	O	O:0.999974
`	O	O:0.999997
multiply	B-API	O:0.577429
`	O	O:0.999995
ufunc	O	O:0.982618
is	O	O:0.999993
used	O	O:0.999977
to	O	O:0.999994
create	O	O:0.999996
the	O	O:0.999996
new	O	O:0.999967
20x20	O	O:0.999746
array	O	O:0.978504
.	O	O:0.999636
	
I	O	O:0.999658
have	O	O:0.999996
a	O	O:0.999962
3D	O	O:0.999483
numpy	O	O:0.999948
array	O	O:0.996818
consisting	O	O:0.999991
of	O	O:0.999986
1's	O	O:0.999922
and	O	O:0.999998
zeros	O	O:0.998435
defining	O	O:0.999830
open	O	O:0.904907
versus	O	O:0.999981
filled	O	O:0.990073
space	O	O:0.969397
in	O	O:0.999993
a	O	O:0.999994
porous	O	O:0.998334
solid	O	O:0.998687
(	O	O:0.999873
it's	O	O:0.999882
currently	O	O:0.999995
a	O	O:0.999992
numpy	O	O:0.999641
Int64	O	O:0.999360
array	O	O:0.980988
)	O	O:0.999940
.	O	O:0.999666
	
You	O	O:0.999853
are	O	O:0.999994
attempting	O	O:0.999968
to	O	O:0.999981
broadcast	O	O:0.999659
a	O	O:0.999993
4-D	O	O:0.999722
array	O	O:0.998962
together	O	O:0.999787
with	O	O:0.999997
a	O	O:0.999972
3-D	O	O:0.999036
array	O	O:0.987975
.	O	O:0.999638
	
Scipy	O	O:0.999415
NDimage	O	O:0.930060
correlate	O	B-API:0.700312
:	O	O:0.999884
unbearably	O	O:0.999967
slow	O	O:0.977199
	
I	O	O:0.999757
know	O	O:0.999991
that	O	O:0.999933
I	O	O:0.999955
can	O	O:0.999997
reshape	O	O:0.902272
the	O	O:0.999992
array	O	O:0.995933
to	O	O:0.999999
a	O	O:0.999999
100	O	O:0.999824
x	O	O:0.999933
2	O	O:0.999944
array	O	O:0.998476
of	O	O:0.999981
grid	O	O:0.978766
points	O	O:0.999737
:	O	O:0.999934
#CODE	O	O:0.999660
	
You	O	O:0.999905
probably	O	O:0.999967
could	O	O:0.999998
get	O	O:0.999550
`	O	O:0.999998
append	B-API	B-API:0.955765
`	O	O:0.999975
to	O	O:0.999977
work	O	O:0.999998
,	O	O:0.999995
but	O	O:0.999998
it	O	O:0.999986
just	O	O:0.999983
does	O	O:0.999999
a	O	O:0.999996
step	O	O:0.999865
by	O	O:0.999998
step	O	O:0.999602
concatenate	O	O:0.822635
,	O	O:0.999987
which	O	O:0.999945
is	O	O:0.999962
slower	O	O:0.999690
.	O	O:0.999830
	
This	O	O:0.999494
produces	O	O:0.999972
a	O	O:0.999994
random	O	O:0.839885
permutation	O	O:0.998349
of	O	O:0.999990
each	O	O:0.999960
column's	O	O:0.999996
indices	O	O:0.987308
.	O	O:0.999811
	
As	O	O:0.999961
it	O	O:0.999925
happens	O	O:0.999952
,	O	O:0.999995
the	O	O:0.999967
histogram	O	O:0.962745
is	O	O:0.999997
enough	O	O:0.999906
for	O	O:0.999995
the	O	O:0.999800
former	O	O:0.999764
.	O	O:0.999844
	
I	O	O:0.999845
see	O	O:0.999987
how	O	O:0.999980
the	O	O:0.999997
symmetry	O	O:0.999989
of	O	O:0.999996
the	O	O:0.999986
trace	O	O:0.995634
lets	O	O:0.999995
you	O	O:0.999991
replace	O	O:0.994310
the	O	O:0.999998
final	O	O:0.999847
`	O	O:0.999994
dot	B-API	B-API:0.947534
`	O	O:0.999949
.	O	O:0.998845
	
In	O	O:0.999976
that	O	O:0.999976
question	O	O:0.999979
,	O	O:0.999994
I	O	O:0.999969
sought	O	O:0.999984
to	O	O:0.999994
sum	O	O:0.999573
values	O	O:0.993701
in	O	O:0.999999
a	O	O:0.999994
numpy	O	O:0.999878
structured	O	O:0.999911
array	O	O:0.997911
based	O	O:0.999900
on	O	O:0.999999
multiple	O	O:0.999958
criteria	O	O:0.999968
,	O	O:0.999992
including	O	O:0.999977
matches	O	O:0.999744
in	O	O:0.999994
a	O	O:0.999899
list	O	O:0.962347
.	O	O:0.999820
	
to	O	O:0.999955
delete	O	O:0.999285
the	O	O:0.999995
lines	O	O:0.993415
that	O	O:0.999997
had	O	O:0.999995
zeros	O	O:0.996385
in	O	O:0.999996
them	O	O:0.999871
!	O	O:0.999770
	
Fill	O	O:0.882829
scipy	O	O:0.999693
/	O	O:0.999918
numpy	O	O:0.999896
matrix	O	O:0.995069
based	O	O:0.999975
on	O	O:0.999987
indices	O	O:0.993680
and	O	O:0.999997
values	O	O:0.971083
	
It	O	O:0.999811
looks	O	O:0.999970
like	O	O:0.999998
a	O	O:0.999994
vector	O	O:0.999918
product	O	O:0.997800
followed	O	O:0.999978
by	O	O:0.999994
a	O	O:0.999980
sum	O	O:0.911024
along	O	O:0.999984
the	O	O:0.999995
resulting	O	O:0.999830
array	O	O:0.997818
.	O	O:0.999773
	
The	O	O:0.999905
trick	O	O:0.999587
is	O	O:0.999980
that	O	O:0.999996
this	O	O:0.999993
convolve	B-API	O:0.519360
function	O	O:0.994989
can	O	O:0.999994
be	O	O:0.999999
used	O	O:0.999979
in-place	O	O:0.999861
so	O	O:0.999992
the	O	O:0.999952
double	O	O:0.994572
for	O	O:0.999959
loop	O	O:0.998859
:	O	O:0.999929
#CODE	O	O:0.999551
	
But	O	O:0.999949
this	O	O:0.999934
reshape	B-API	O:0.796491
should	O	O:0.999955
produce	O	O:0.999998
a	O	O:0.999967
`	O	O:0.999677
(	O	O:0.999933
n	O	O:0.999905
,	O	O:0.999969
1	O	O:0.999846
,	O	O:0.999975
1	O	O:0.999927
)`	O	O:0.999941
array	O	O:0.980526
,	O	O:0.999981
not	O	O:0.999998
your	O	O:0.999950
`	O	O:0.999838
(	O	O:0.999914
1	O	O:0.999907
,	O	O:0.999962
1	O	O:0.999883
,	O	O:0.999972
1	O	O:0.999733
,...	O	O:0.999881
)`	O	O:0.999756
array	O	O:0.969587
.	O	O:0.999667
	
For	O	O:0.999959
an	O	O:0.999971
extreme	O	O:0.999710
example	O	O:0.999899
,	O	O:0.999986
consider	O	O:0.999993
a	O	O:0.999978
sequence	O	O:0.999994
that	O	O:0.999998
consists	O	O:0.999994
of	O	O:0.999996
9	O	O:0.999869
zeros	O	O:0.998756
followed	O	O:0.999984
by	O	O:0.999996
the	O	O:0.999992
result	O	O:0.999992
of	O	O:0.999999
a	O	O:0.999991
coin	O	O:0.999907
toss	O	O:0.999844
,	O	O:0.999988
9	O	O:0.999837
zeros	O	O:0.980559
and	O	O:0.999999
another	O	O:0.999992
coin	O	O:0.999761
toss	O	O:0.999874
,	O	O:0.999969
etc	O	O:0.999979
.	O	O:0.999923
	
If	O	O:0.999969
so	O	O:0.999993
then	O	O:0.999971
`	O	O:0.999992
np.array	B-API	B-API:0.999235
(	O	O:0.999990
a	O	O:0.999990
)`	O	O:0.986671
is	O	O:0.999988
a	O	O:0.999965
2d	O	O:0.998994
array	O	O:0.989622
,	O	O:0.999926
and	O	O:0.999999
you	O	O:0.999995
can	O	O:0.999996
sum	O	O:0.999619
over	O	O:0.994388
`	O	O:0.999979
axis=1	O	O:0.979145
`	O	O:0.999960
.	O	O:0.998747
	
I	O	O:0.999619
am	O	O:0.999988
trying	O	O:0.999945
to	O	O:0.999997
create	O	O:0.999999
a	O	O:0.999992
lat	O	O:0.999204
/	O	O:0.999980
lon	O	O:0.999377
grid	O	O:0.994524
that	O	O:0.999969
contains	O	O:0.995478
an	O	O:0.999995
array	O	O:0.999150
of	O	O:0.999996
found	O	O:0.999947
indices	O	O:0.998231
where	O	O:0.998954
two	O	O:0.999985
conditions	O	O:0.999863
are	O	O:0.999991
met	O	O:0.999966
for	O	O:0.999999
a	O	O:0.999956
lat	O	O:0.995918
/	O	O:0.999966
lon	O	O:0.999128
combination	O	O:0.999956
.	O	O:0.999653
	
This	O	O:0.999943
NAMBE	O	O:0.995037
is	O	O:0.999985
the	O	O:0.999979
absolute	O	O:0.955957
difference	O	O:0.991664
between	O	O:0.996199
a	O	O:0.999975
base	O	O:0.970386
vector	O	O:0.999983
and	O	O:0.999998
another	O	O:0.999955
vector	O	O:0.999968
,	O	O:0.999997
divided	O	O:0.999946
by	O	O:0.999985
the	O	O:0.999994
base	O	O:0.992284
vector	O	O:0.999983
and	O	O:0.999998
multiplied	O	O:0.999985
by	O	O:0.999983
a	O	O:0.999980
hundred	O	O:0.999195
,	O	O:0.999982
in	O	O:0.999942
pseudo-code	O	O:0.999251
notation	O	O:0.999881
:	O	O:0.999958
#CODE	O	O:0.999617
	
this	O	O:0.999949
my	O	O:0.999928
code	O	O:0.999929
to	O	O:0.999986
and	O	O:1.000000
i	O	O:0.999989
want	O	O:0.999992
to	O	O:0.999952
use	O	O:0.999734
histogram	O	O:0.996491
data	O	O:0.998735
to	O	O:0.999997
plot	O	O:0.999335
scatter	O	O:0.997341
where	O	O:0.997020
y	O	O:0.999876
axis	O	O:0.996213
is	O	O:0.999995
counts	O	O:0.999946
center	O	O:0.980727
from	O	O:0.999990
the	O	O:0.999953
histogram	O	O:0.994860
,	O	O:0.999974
is	O	O:0.999993
there	O	O:0.999984
any	O	O:0.996754
direct	O	O:0.999565
command	O	O:0.999970
or	O	O:0.999991
way	O	O:0.999982
to	O	O:0.999986
do	O	O:0.999998
this	O	O:0.999975
?	O	O:0.999897
	
Please	O	O:0.999663
compile	O	O:0.999548
with	O	O:0.999916
`	O	O:0.999970
cython	O	O:0.999378
-a	O	O:0.999838
`	O	O:0.999971
,	O	O:0.999991
then	O	O:0.999999
show	O	O:0.998436
us	O	O:0.999987
the	O	O:0.999997
C	O	O:0.999785
code	O	O:0.999981
that	O	O:0.999986
the	O	O:0.999979
`	O	O:0.999997
a	O	O:0.999942
[	O	O:0.999905
0	O	O:0.999910
]	O	O:0.999705
+=	O	O:0.999884
sum	O	O:0.958954
`	O	O:0.999949
line	O	O:0.999900
turns	O	O:0.999949
into	O	O:0.999763
.	O	O:0.999483
	
The	O	O:0.999949
revised	O	O:0.999654
question	O	O:0.999806
is	O	O:0.999970
still	O	O:0.999984
a	O	O:0.999991
duplicate	O	O:0.999906
,	O	O:0.999993
see	O	O:0.999878
[	O	O:0.999991
this	O	O:0.999991
question	O	O:0.999823
]	O	O:0.999483
(	O	O:0.999910
#URL	O	O:0.999246
)	O	O:0.999942
,	O	O:0.999920
and	O	O:0.999968
[	O	O:0.999992
this	O	O:0.999947
question	O	O:0.999790
]	O	O:0.999434
(	O	O:0.999941
#URL	O	O:0.999704
)	O	O:0.999981
for	O	O:0.999976
finding	O	O:0.999974
the	O	O:0.999909
indices	O	O:0.952319
.	O	O:0.999851
	
ValueError	O	O:0.999781
:	O	O:0.999922
operands	O	O:0.999855
could	O	O:0.999989
not	O	O:0.999999
be	O	O:0.999999
broadcast	O	O:0.998883
together	O	O:0.999885
with	O	O:0.999998
different	O	O:0.999974
shapes	O	O:0.999717
in	O	O:0.999969
numpy	O	O:0.999936
?	O	O:0.999775
	
There	O	O:0.999659
are	O	O:0.999983
thousands	O	O:0.999998
of	O	O:0.999995
numbers	O	O:0.999582
below	O	O:0.999996
the	O	O:0.999998
ones	O	O:0.993856
shown	O	O:0.999949
here	O	O:0.999961
.	O	O:0.999880
	
Assuming	O	O:0.999947
you	O	O:0.999997
want	O	O:0.999998
to	O	O:0.999997
align	O	O:0.999465
all	O	O:0.999750
the	O	O:0.999996
arrays	O	O:0.999949
to	O	O:0.999994
the	O	O:0.999999
left	O	O:0.999871
,	O	O:0.999988
and	O	O:0.999999
pad	O	O:0.946338
to	O	O:0.999965
the	O	O:0.999999
right	O	O:0.999994
with	O	O:0.999998
zeros	O	O:0.997778
,	O	O:0.999999
then	O	O:0.999998
you	O	O:0.999999
could	O	O:0.999999
first	O	O:0.999908
find	O	O:0.999495
the	O	O:0.999996
maximum	O	O:0.981592
length	O	O:0.999968
with	O	O:0.999980
#CODE	O	O:0.999288
	
How	O	O:0.999909
to	O	O:0.999977
do	O	O:0.999999
the	O	O:0.999990
same	O	O:0.999989
If	O	O:0.999981
I	O	O:0.999971
want	O	O:0.999997
to	O	O:0.999948
apply	O	O:0.961789
norm	O	O:0.785955
column-wise	O	O:0.998404
to	O	O:0.999996
a	O	O:0.999994
matrix	O	O:0.954759
?	O	O:0.999937
	
The	O	O:0.999945
easiest	O	O:0.999643
approach	O	O:0.999895
is	O	O:0.999983
to	O	O:0.999988
reshape	O	O:0.994257
to	O	O:0.999993
data	O	O:0.999879
to	O	O:0.999999
a	O	O:1.000000
long	O	O:0.999940
format	O	O:0.997819
using	O	O:0.999970
`	O	O:0.999619
.stack	B-API	B-API:0.999411
`	O	O:0.999953
,	O	O:0.999831
which	O	O:0.999993
can	O	O:0.999994
be	O	O:1.000000
be	O	O:0.999998
passed	O	O:0.999887
straight	O	O:0.999927
into	O	O:0.999785
rolling	O	O:0.988869
mean	O	O:0.917513
.	O	O:0.999534
	
It's	O	O:0.999596
pretty	O	O:0.999828
low-level	O	O:0.999128
,	O	O:0.999846
and	O	O:0.999994
mostly	O	O:0.999950
focused	O	O:0.999879
on	O	O:0.999993
how	O	O:0.999993
to	O	O:0.999997
address	O	O:0.999997
the	O	O:0.999997
more	O	O:0.999972
difficult	O	O:0.999991
problem	O	O:0.999986
of	O	O:0.999994
how	O	O:0.999985
to	O	O:0.999997
pass	O	O:0.999997
C++	O	O:0.999926
data	O	O:0.998347
to	O	O:0.999988
and	O	O:1.000000
from	O	O:0.999994
NumPy	O	O:0.999919
without	O	O:0.999964
copying	O	O:0.998731
,	O	O:0.999891
but	O	O:0.999928
here's	O	O:0.999834
how	O	O:0.999987
you'd	O	O:0.999980
do	O	O:0.999996
a	O	O:0.999996
copied	O	O:0.999205
std	O	O:0.678687
::	O	O:0.999897
vector	O	O:0.999982
return	O	O:0.999615
with	O	O:0.999910
that	O	O:0.999643
:	O	O:0.999977
#CODE	O	O:0.999827
	
`	O	O:0.999886
std	O	B-API:0.717768
=	O	O:0.999621
RMS	O	O:0.999779
(	O	O:0.999919
data	O	O:0.994909
-	O	O:0.999993
mean	O	O:0.987962
)`	O	O:0.999445
.	O	O:0.999247
	
This	O	O:0.999912
generalized	O	O:0.999868
diagonal	O	O:0.994418
would	O	O:0.999993
be	O	O:0.999999
defined	O	O:0.999988
as	O	O:0.999994
those	O	O:0.999988
elements	O	O:0.999973
of	O	O:0.999990
the	O	O:0.999974
array	O	O:0.999117
whose	O	O:0.999965
0th	O	O:0.999732
and	O	O:0.999984
2nd	O	O:0.999929
index	O	O:0.995097
coincide	O	O:0.999832
,	O	O:0.999982
and	O	O:0.999997
would	O	O:0.999998
have	O	O:0.999979
shape	O	O:0.995397
(	O	O:0.999976
3	O	O:0.999888
,	O	O:0.999969
3	O	O:0.999897
,	O	O:0.999983
7	O	O:0.999702
)	O	O:0.999959
.	O	O:0.999606
	
I	O	O:0.999655
have	O	O:0.999998
a	O	O:0.999985
given	O	O:0.999815
array	O	O:0.994987
`	O	O:0.999971
[	O	O:0.999834
0	O	O:0.999956
,	O	O:0.999938
0	O	O:0.999877
,	O	O:0.999972
0	O	O:0.999891
,	O	O:0.999977
0	O	O:0.999891
,	O	O:0.999977
0	O	O:0.999887
,	O	O:0.999977
0	O	O:0.999812
,	O	O:0.999974
1	O	O:0.999849
,	O	O:0.999979
1	O	O:0.999928
,	O	O:0.999980
2	O	O:0.999882
,	O	O:0.999975
1	O	O:0.999938
,	O	O:0.999982
0	O	O:0.999921
,	O	O:0.999979
0	O	O:0.999899
,	O	O:0.999977
0	O	O:0.999887
,	O	O:0.999977
0	O	O:0.999818
,	O	O:0.999975
1	O	O:0.999893
,	O	O:0.999982
0	O	O:0.999889
,	O	O:0.999980
1	O	O:0.999906
,	O	O:0.999979
2	O	O:0.999872
,	O	O:0.999975
1	O	O:0.999946
,	O	O:0.999985
0	O	O:0.999922
,	O	O:0.999977
2	O	O:0.999880
,	O	O:0.999978
3	O	O:0.996747
`]	O	O:0.994077
(	O	O:0.999994
arbitrary	O	O:0.999983
elements	O	O:0.999923
from	O	O:0.999959
0-5	O	O:0.999801
)	O	O:0.999973
and	O	O:0.999981
I	O	O:0.999974
want	O	O:0.999978
to	O	O:0.999948
have	O	O:1.000000
a	O	O:0.999998
counter	O	O:0.999957
for	O	O:0.999999
the	O	O:0.999994
occurence	O	O:0.999996
of	O	O:0.999997
zeros	O	O:0.981160
in	O	O:1.000000
a	O	O:0.999979
row	O	O:0.999890
.	O	O:0.999848
	
To	O	O:0.999922
see	O	O:0.999999
the	O	O:0.999997
benefits	O	O:0.999947
of	O	O:0.999998
this	O	O:0.999983
,	O	O:0.999999
you	O	O:0.999997
need	O	O:0.999998
to	O	O:0.999997
use	O	O:0.999699
`	O	O:0.999970
z	O	O:0.999400
,	O	O:0.999994
p	O	O:0.999819
,	O	O:0.999985
k	O	O:0.999849
=	O	O:0.999924
butter	O	O:0.997251
(	O	O:0.999986
output=	O	O:0.998845
'	O	O:0.999962
zpk	O	O:0.999639
')`	O	O:0.999951
and	O	O:0.999994
then	O	O:0.999995
work	O	O:0.999999
with	O	O:0.999997
poles	O	O:0.999965
and	O	O:0.999998
zeros	O	O:0.997889
instead	O	O:0.999992
of	O	O:0.999994
numerator	O	O:0.999418
and	O	O:0.999989
denominator	O	O:0.999879
.	O	O:0.999229
	
In	O	O:0.999960
that	O	O:0.999978
case	O	O:0.999997
you	O	O:0.999991
would	O	O:0.999986
"	O	O:0.999998
extrapolate	O	O:0.999933
"	O	O:0.999987
zeros	O	O:0.927484
to	O	O:0.999983
the	O	O:0.999999
left	O	O:0.999631
and	O	O:0.999996
the	O	O:0.999987
right	O	O:0.999843
.	O	O:0.999901
	
can	O	O:0.999969
numpy	O	O:0.999997
interpret	O	O:0.999995
column	O	O:0.999998
of	O	O:0.999998
indices	O	O:0.994909
like	O	O:0.999996
matlab	O	O:0.999796
does	O	O:0.999890
	
To	O	O:0.999936
get	O	O:0.999863
the	O	O:0.999999
diagonal	O	O:0.999064
elements	O	O:0.999987
you	O	O:0.999994
can	O	O:0.999999
get	O	O:0.999994
their	O	O:0.999994
indices	O	O:0.996890
with	O	O:0.999973
`	O	O:0.999870
np.triu_indices	B-API	B-API:0.995993
`	O	O:0.999920
(	O	O:0.999923
or	O	O:0.999996
,	O	O:0.999987
for	O	O:0.999999
the	O	O:0.999984
lower	O	O:0.910228
triangle	O	O:0.999980
,	O	O:0.999965
`	O	O:0.999923
np.tril_indices	B-API	B-API:0.989502
`)	O	O:0.999979
and	O	O:0.999994
then	O	O:0.999996
index	O	O:0.999958
by	O	O:0.999997
them	O	O:0.999950
.	O	O:0.999824
	
The	O	O:0.999933
question	O	O:0.999530
states	O	O:0.999954
that	O	O:0.999989
the	O	O:0.999997
input	O	O:0.999988
array	O	O:0.996220
is	O	O:0.999994
of	O	O:0.999989
shape	O	O:0.939845
`	O	O:0.999947
(	O	O:0.999811
128	O	O:0.999856
,	O	O:0.999954
36	O	O:0.999633
,	O	O:0.999942
8)	O	O:0.999014
`	O	O:0.999928
and	O	O:0.999961
we	O	O:0.999996
are	O	O:0.999989
interested	O	O:0.999911
in	O	O:0.999990
finding	O	O:0.999977
unique	O	O:0.979025
subarrays	O	O:0.999984
of	O	O:0.999976
length	O	O:0.999823
`	O	O:0.999991
8	O	O:0.998168
`	O	O:0.999967
in	O	O:0.999969
the	O	O:0.999998
last	O	O:0.981890
dimension	O	O:0.999982
.	O	O:0.999699
	
What	O	O:0.999793
does	O	O:0.999961
work	O	O:0.999988
,	O	O:0.999998
however	O	O:0.999913
is	O	O:0.999997
nesting	O	O:0.999946
append	B-API	B-API:0.625104
and	O	O:0.999953
concatenate	B-API	O:0.556731
#CODE	O	O:0.996124
	
(	O	O:0.999723
`	O	O:0.999983
b	O	O:0.994678
`	O	O:0.999987
will	O	O:0.999962
be	O	O:0.999998
broadcast	O	O:0.997643
along	O	O:0.999100
(	O	O:0.999950
?	O	O:0.999919
)	O	O:0.999977
the	O	O:0.999988
first	O	O:0.994379
axis	O	O:0.992578
)	O	O:0.999977
#CODE	O	O:0.999000
	
As	O	O:0.999952
he	O	O:0.999882
points	O	O:0.999977
out	O	O:0.999940
,	O	O:0.999996
the	O	O:0.999974
`	O	O:0.999948
[	O	O:0.999925
0	O	O:0.999943
]	O	O:0.999725
[	O	O:0.999802
1	O	O:0.999797
]`	O	O:0.999868
element	O	O:0.999358
is	O	O:0.999987
what	O	O:0.999945
you'd	O	O:0.999982
want	O	O:0.999987
for	O	O:0.999983
`	O	O:0.999925
cov	B-API	B-API:0.644378
(	O	O:0.999993
a	O	O:0.999970
,	O	O:0.999938
b	O	O:0.999924
)`	O	O:0.999746
.	O	O:0.999141
	
returns	O	O:0.998856
`	O	O:0.999940
1	O	O:0.996008
`	O	O:0.999986
,	O	O:0.999966
making	O	O:0.999978
the	O	O:0.999958
sum	O	O:0.957463
not	O	O:0.999994
commutative	O	O:0.999932
!	O	O:0.999850
	
But	O	O:0.999908
as	O	O:0.999958
I	O	O:0.999910
have	O	O:0.999998
a	O	O:0.999974
log	O	O:0.998825
of	O	O:0.999991
values	O	O:0.737687
(	O	O:0.999993
10000+	O	O:0.999920
)	O	O:0.999824
,	O	O:0.999990
this	O	O:0.999984
will	O	O:0.999990
be	O	O:0.999998
quite	O	O:0.999975
slow	O	O:0.940604
.	O	O:0.999633
	
@USER	O	O:0.998448
-	O	O:0.999969
good	O	O:0.999489
point	O	O:0.999987
.	O	O:0.999974
anyway	O	O:0.999970
,	O	O:0.999983
`	O	O:0.999989
diff	B-API	B-API:0.989495
`	O	O:0.999954
works	O	O:0.999849
on	O	O:0.999998
python	O	O:0.999936
lists	O	O:0.999967
too	O	O:0.999815
.	O	O:0.999843
	
It	O	O:0.999855
will	O	O:0.999993
also	O	O:0.999999
work	O	O:1.000000
if	O	O:0.999993
they	O	O:0.999991
are	O	O:0.999997
both	O	O:0.999983
arrays	O	O:0.999961
that	O	O:0.999971
can	O	O:0.999998
be	O	O:0.999998
broadcast	O	O:0.995026
.	O	O:0.999631
	
It's	O	O:0.999881
column	O	O:0.999993
stack	O	O:0.987234
that	O	O:0.999993
requires	O	O:0.999987
equal	O	O:0.998892
length	O	O:0.999961
strings	O	O:0.999512
.	O	O:0.999818
	
In	O	O:0.999959
the	O	O:0.999992
end	O	O:0.999983
it	O	O:0.999942
is	O	O:0.999973
usually	O	O:0.999971
not	O	O:0.999994
too	O	O:0.999973
complicated	O	O:0.999947
,	O	O:0.999990
especially	O	O:0.999986
if	O	O:0.999996
you	O	O:0.999976
use	O	O:0.991754
[	O	O:0.999808
`	O	O:0.999920
mgrid	B-API	B-API:0.998897
`]	O	O:0.991087
(	O	O:0.999964
#URL	O	O:0.999783
)	O	O:0.999979
or	O	O:0.999992
similar	O	O:0.999995
to	O	O:0.999996
get	O	O:0.999974
the	O	O:0.999995
indices	O	O:0.989412
.	O	O:0.999905
	
The	O	O:0.999952
absolute	O	O:0.889022
error	O	O:0.999927
will	O	O:0.999992
be	O	O:0.999997
at	O	O:0.999786
most	O	O:0.999706
1	O	O:0.999803
/	O	O:0.999731
2	O	O:0.999845
ULP	O	O:0.999590
,	O	O:0.999977
2	O	O:0.999341
-150	O	O:0.999196
.	O	O:0.999655
	
AttributeError	O	O:0.993365
:	O	O:0.999738
'	O	O:0.999981
Add	O	O:0.999783
'	O	O:0.999846
object	O	O:0.999940
has	O	O:0.999975
no	O	O:0.999937
attribute	O	O:0.999901
'	O	O:0.999958
log	O	O:0.974579
'	O	O:0.999902
Python	O	O:0.999432
	
Or	O	O:0.999910
,	O	O:0.999990
you	O	O:0.999993
could	O	O:0.999999
initialize	O	O:0.999998
an	O	O:0.999998
array	O	O:0.999599
of	O	O:0.999997
all	O	O:0.998028
zeros	O	O:0.999404
if	O	O:0.999994
you	O	O:0.999995
know	O	O:0.999995
the	O	O:0.999998
size	O	O:0.996298
of	O	O:0.999996
the	O	O:0.999992
array	O	O:0.999764
ahead	O	O:0.999991
of	O	O:0.999987
time	O	O:0.994216
.	O	O:0.999936
	
Are	O	O:0.999884
you	O	O:0.999994
checking	O	O:0.999982
shape	O	O:0.997620
or	O	O:0.999995
number	O	O:0.999994
of	O	O:0.999998
nonzero	O	O:0.974314
values	O	O:0.991560
?	O	O:0.999839
	
Something	O	O:0.999911
like	O	O:0.999930
`	O	O:0.999994
eigvals	O	O:0.579631
,	O	O:0.999988
eigvecs	O	O:0.999115
=	O	O:0.999915
la.eigh	O	O:0.992205
(	O	O:0.999954
mat	B-API	O:0.976576
)`	O	O:0.999560
`	O	O:0.999917
principal	O	O:0.999505
=	O	O:0.999932
eigvecs	O	O:0.997613
[:	O	O:0.999753
,	O	O:0.999982
eigvals.argmax()	O	O:0.991591
]`	O	O:0.999730
`	O	O:0.999954
if	O	O:0.999357
(	O	O:0.999988
principal	O	O:0.999751
>	O	O:0.999864
=	O	O:0.999811
0	O	O:0.999682
)	O	O:0.999949
.all()	O	B-API:0.998179
or	O	O:0.999785
(	O	O:0.999982
pricipal	O	O:0.999881
<=	O	O:0.999899
0	O	O:0.999802
)	O	O:0.999609
.all()	O	B-API:0.999552
:	O	O:0.999941
print	O	O:0.999863
'	O	O:0.999961
all	O	O:0.998573
the	O	O:0.999991
same	O	O:0.999874
'`	O	O:0.999915
?	O	O:0.999786
	
I	O	O:0.999818
also	O	O:0.999998
want	O	O:0.999992
bins	O	O:0.999947
to	O	O:0.999994
have	O	O:1.000000
a	O	O:0.999997
width	O	O:0.999986
of	O	O:0.999985
.5	O	O:0.998819
so	O	O:0.999998
that	O	O:0.999968
I	O	O:0.999981
can	O	O:0.999998
have	O	O:0.999999
a	O	O:0.999998
bin	O	O:0.999953
from	O	O:0.999995
10.5	O	O:0.999575
to	O	O:0.999988
11	O	O:0.999975
or	O	O:0.999987
24	O	O:0.999801
to	O	O:0.999996
24.5	O	O:0.999486
etc	O	O:0.999986
...	O	O:0.999983
because	O	O:0.999986
otherwise	O	O:0.999990
,	O	O:0.999999
python	O	O:0.999828
outputs	O	O:0.999959
the	O	O:0.999982
histogram	O	O:0.995851
with	O	O:0.999998
the	O	O:0.999996
bins	O	O:0.999959
random	O	O:0.959811
and	O	O:0.999992
undetermined	O	O:0.999894
.	O	O:0.999158
	
Maximum	O	O:0.996432
is	O	O:0.999979
always	O	O:0.999985
bigger	O	O:0.999870
than	O	O:0.999951
the	O	O:0.999942
minimum	O	O:0.873559
(	O	O:0.999994
more	O	O:0.999930
to	O	O:0.999986
the	O	O:0.999999
right	O	O:0.999984
on	O	O:0.999999
a	O	O:0.999995
1d	O	O:0.999729
axis	O	O:0.986121
,	O	O:0.999992
not	O	O:0.999998
by	O	O:0.999996
absolute	O	O:0.988826
value	O	O:0.999972
)	O	O:0.999975
.	O	O:0.999563
	
should	O	O:0.999894
give	O	O:0.999993
the	O	O:0.999999
sum	O	O:0.979055
of	O	O:0.999999
the	O	O:0.999995
columns	O	O:0.999994
.	O	O:0.999920
	
Suppose	O	O:0.999692
,	O	O:0.999986
You	O	O:0.999987
wanna	O	O:0.999997
check	O	O:0.999996
how	O	O:0.999998
many	O	O:0.999977
times	O	O:0.999970
you	O	O:0.999989
will	O	O:0.999999
get	O	O:0.999597
six	O	O:0.999997
if	O	O:0.999998
you	O	O:0.999986
roll	O	O:0.932011
dice	O	O:0.999990
10	O	O:0.999835
times	O	O:0.999861
.	O	O:0.999691
	
With	O	O:0.999984
this	O	O:0.999957
option	O	O:0.999975
,	O	O:0.999998
the	O	O:0.999989
result	O	O:0.999985
will	O	O:0.999999
broadcast	O	O:0.996826
correctly	O	O:0.999988
	
Do	O	O:0.999763
you	O	O:0.999989
mean	O	O:0.995579
`	O	O:0.999994
indices	O	O:0.930343
=	O	O:0.999758
np.where	B-API	B-API:0.996250
(	O	O:0.999960
a	O	O:0.999937
==	O	O:0.998967
a.max()	O	O:0.998409
)`	O	O:0.999806
in	O	O:0.999973
line	O	O:0.999895
3	O	O:0.999725
?	O	O:0.999843
	
The	O	O:0.999893
problem	O	O:0.999745
I	O	O:0.999952
have	O	O:0.999997
much	O	O:0.999844
later	O	O:0.999998
on	O	O:0.999989
in	O	O:0.999998
the	O	O:0.999996
code	O	O:0.999645
is	O	O:0.999996
that	O	O:0.999992
if	O	O:0.999999
one	O	O:0.999998
of	O	O:0.999996
these	O	O:0.999976
parameters	O	O:0.999867
isn't	O	O:0.999944
in	O	O:0.999994
the	O	O:0.999988
ASCII	O	O:0.999788
file	O	O:0.999995
it	O	O:0.999985
throws	O	O:0.999984
errors	O	O:0.999964
up	O	O:0.999981
so	O	O:0.999989
I	O	O:0.999954
have	O	O:0.999998
to	O	O:0.999996
keep	O	O:1.000000
adding	O	O:0.999979
in	O	O:0.999991
ones	O	O:0.977914
I	O	O:0.999902
don't	O	O:0.999984
need	O	O:0.999886
.	O	O:0.999922
	
`	O	O:0.999952
append	B-API	B-API:0.992995
`	O	O:0.999971
adds	O	O:0.999984
them	O	O:0.999978
to	O	O:0.999998
the	O	O:1.000000
end	O	O:0.999980
of	O	O:0.999992
the	O	O:0.999984
list	O	O:0.998996
,	O	O:0.999994
which	O	O:0.999950
is	O	O:0.999990
exactly	O	O:0.999992
what	O	O:0.999993
you	O	O:0.999979
want	O	O:0.999984
.	O	O:0.999879
	
I	O	O:0.999721
have	O	O:0.999989
two	O	O:0.999937
3dim	O	O:0.999921
numpy	O	O:0.999890
matrices	O	O:0.999680
and	O	O:0.999988
I	O	O:0.999974
want	O	O:0.999972
to	O	O:0.999896
do	O	O:0.999999
a	O	O:0.999994
dot	O	B-API:0.502011
product	O	O:0.998132
according	O	O:0.999943
to	O	O:0.999990
one	O	O:0.999999
axis	O	O:0.999449
without	O	O:0.999982
using	O	O:0.999995
a	O	O:0.999881
loop	O	O:0.999662
in	O	O:0.999957
theano	O	O:0.999517
.	O	O:0.999670
	
you	O	O:0.999973
have	O	O:0.999996
at	O	O:0.999846
most	O	O:0.999981
4	O	O:0.999840
in	O	O:0.999992
that	O	O:0.999965
dimension	O	O:0.999934
(	O	O:0.999988
see	O	O:0.999996
your	O	O:0.999988
reshape	O	O:0.761400
line	O	O:0.999977
)	O	O:0.999980
,	O	O:0.999987
so	O	O:0.999977
the	O	O:0.999966
index	O	O:0.999834
it	O	O:0.999998
will	O	O:0.999997
count	O	O:0.998972
are	O	O:0.999994
0	O	O:0.999873
and	O	O:0.999962
2	O	O:0.997824
(	O	O:0.999600
1	O	O:0.999735
and	O	O:0.999963
3	O	O:0.999810
are	O	O:0.999957
skipped	O	O:0.999884
,	O	O:0.999986
and	O	O:0.999993
3	O	O:0.998969
is	O	O:0.999968
the	O	O:0.999993
last	O	O:0.991167
element	O	O:0.999957
)	O	O:0.999959
.	O	O:0.999623
	
Once	O	O:0.999956
we	O	O:0.999996
have	O	O:0.999999
the	O	O:0.999998
indices	O	O:0.996414
to	O	O:0.999997
sort	O	O:0.998785
`	O	O:0.999998
data	O	O:0.966764
`	O	O:0.999997
,	O	O:0.999988
to	O	O:0.999997
get	O	O:0.999978
a	O	O:0.999999
sorted	O	O:0.999988
copy	O	O:0.989989
of	O	O:0.999991
the	O	O:0.999837
array	O	O:0.999696
it	O	O:0.999973
is	O	O:0.999997
faster	O	O:0.999981
to	O	O:0.999985
use	O	O:0.999917
the	O	O:0.999981
indices	O	O:0.983997
than	O	O:0.999997
to	O	O:0.999992
re-sort	O	O:0.999971
the	O	O:0.999921
array	O	O:0.943142
:	O	O:0.999976
#CODE	O	O:0.999806
	
I	O	O:0.999493
hope	O	O:0.999975
this	O	O:0.999906
will	O	O:0.999990
help	O	O:0.999993
you	O	O:0.999993
perform	O	O:0.999983
your	O	O:0.999986
transpose	O	O:0.972198
and	O	O:1.000000
column-wise	O	O:0.999048
operations	O	O:0.999593
	
It	O	O:0.999679
is	O	O:0.999986
better	O	O:0.999953
to	O	O:0.999995
specify	O	O:0.999996
that	O	O:0.999985
I'm	O	O:0.999974
looking	O	O:0.999988
for	O	O:0.999998
something	O	O:0.999987
that	O	O:0.999918
performs	O	O:0.999978
the	O	O:0.999996
log-sum-exp	O	O:0.999703
trick	O	O:0.999984
,	O	O:0.999991
doing	O	O:0.999998
a	O	O:0.999981
simply	O	O:0.999887
succession	O	O:0.999997
of	O	O:0.999972
exp	O	O:0.671104
elem-wise	O	O:0.999933
,	O	O:0.999982
summing	O	O:0.999985
the	O	O:0.999989
rows	O	O:0.999918
and	O	O:0.999998
doing	O	O:0.999999
a	O	O:0.999927
log	O	O:0.900274
elem-wise	O	O:0.999431
is	O	O:0.999987
trivial	O	O:0.999767
in	O	O:0.999979
`	O	O:0.999832
scipy.sparse	O	B-API:0.816346
`	O	O:0.999940
.	O	O:0.998224
	
Scipy	O	O:0.999215
uses	O	O:0.998836
`	O	O:0.999957
int32	O	O:0.982958
`	O	O:0.999980
to	O	O:0.999960
store	O	O:0.999971
`	O	O:0.999984
indptr	O	O:0.926401
`	O	O:0.999977
and	O	O:0.999910
`	O	O:0.999996
indices	O	O:0.573891
`	O	O:0.999979
for	O	O:0.999978
the	O	O:0.999995
sparse	O	O:0.999574
formats	O	O:0.999847
.	O	O:0.999696
	
But	O	O:0.999870
not	O	O:0.999979
able	O	O:0.999997
to	O	O:0.999991
plot	O	O:0.999757
it	O	O:0.999993
as	O	O:0.999999
a	O	O:0.999930
graph	O	O:0.998326
(	O	O:0.999996
something	O	O:0.999986
like	O	O:0.999996
a	O	O:0.999994
histogram	O	O:0.946325
)	O	O:0.999994
...	O	O:0.999965
that	O	O:0.999799
is	O	O:0.999998
the	O	O:0.999967
problem	O	O:0.999824
.	O	O:0.999830
	
It	O	O:0.999864
gave	O	O:0.999824
error	O	O:0.999978
testing	O	O:0.999938
doesnot	O	O:0.999862
have	O	O:0.999992
attribute	O	O:0.999999
append	O	O:0.893151
as	O	O:0.999995
its	O	O:0.999961
of	O	O:0.999954
None	O	O:0.999610
Type	O	O:0.999712
.	O	O:0.999656
	
In	O	O:0.999960
both	O	O:0.999971
cases	O	O:0.999923
,	O	O:0.999986
you	O	O:0.999992
can	O	O:0.999999
access	O	O:1.000000
individual	O	O:0.999997
elements	O	O:0.999998
by	O	O:0.999983
indices	O	O:0.994072
,	O	O:0.999995
like	O	O:0.999988
`	O	O:0.999987
R	O	O:0.999716
[	O	O:0.999975
0	O	O:0.999314
]`	O	O:0.998800
(	O	O:0.999911
which	O	O:0.999963
would	O	O:0.999982
give	O	O:0.999993
you	O	O:0.999999
a	O	O:0.999993
specific	O	O:0.999829
object	O	O:0.999946
,	O	O:0.999996
a	O	O:0.999946
`	O	O:0.999886
np.void	O	O:0.976935
`	O	O:0.999979
,	O	O:0.999940
that	O	O:0.999997
still	O	O:0.999978
gives	O	O:0.999994
you	O	O:0.999996
the	O	O:0.999997
possibility	O	O:0.999993
to	O	O:0.999996
access	O	O:0.999999
the	O	O:0.999999
fields	O	O:0.999992
separately	O	O:0.999989
)	O	O:0.999998
,	O	O:0.999994
or	O	O:0.999999
by	O	O:0.999986
slices	O	O:0.999921
`	O	O:0.999972
R	O	O:0.999388
[	O	O:0.999760
1	O	O:0.999379
:	O	O:0.999862
-1	O	O:0.999238
]`	O	O:0.999920
...	O	O:0.998268
	
I	O	O:0.999788
think	O	O:0.999983
you	O	O:0.999955
can	O	O:0.999997
have	O	O:1.000000
a	O	O:0.999999
sum	O	O:0.962051
over	O	O:0.999151
a	O	O:0.999982
sliding	O	O:0.967147
window	O	O:0.999883
(	O	O:0.999927
or	O	O:0.999998
a	O	O:0.999984
rolling	O	O:0.528751
window	O	O:0.999969
)	O	O:0.999974
or	O	O:0.999996
a	O	O:0.999995
mean	O	O:0.970410
over	O	O:0.995998
a	O	O:0.999966
sliding	O	O:0.957739
window	O	O:0.999926
.	O	O:0.999659
	
I	O	O:0.998981
got	O	O:0.999985
your	O	O:0.999744
point	O	O:0.999914
and	O	O:0.999994
I	O	O:0.999942
find	O	O:0.997441
it	O	O:0.999934
more	O	O:0.999968
logical	O	O:0.998449
,	O	O:0.999973
but	O	O:0.999992
when	O	O:0.999969
trying	O	O:0.999994
the	O	O:0.999995
code	O	O:0.999953
you've	O	O:0.999985
suggested	O	O:0.999979
to	O	O:0.999997
get	O	O:0.999928
rid	O	O:0.999997
of	O	O:0.999996
the	O	O:0.999995
second	O	O:0.998062
error	O	O:0.999980
I	O	O:0.999917
got	O	O:0.999996
another	O	O:0.998822
error	O	O:0.999341
:	O	O:0.999802
`	O	O:0.999947
AttributeError	O	O:0.997439
:	O	O:0.999978
flatten	B-API	B-API:0.633537
`	O	O:0.999880
	
`	O	O:0.999897
dot	B-API	B-API:0.961711
`	O	O:0.999945
does	O	O:0.999959
many	O	O:0.999995
things	O	O:0.999868
under	O	O:0.999995
the	O	O:0.999989
hood	O	O:0.999882
,	O	O:0.999998
it	O	O:0.999945
is	O	O:0.999988
apparent	O	O:0.999966
that	O	O:0.999968
`	O	O:0.999811
np.dot	B-API	B-API:0.997137
(	O	O:0.999985
A	O	O:0.999969
,	O	O:0.999911
x	O	O:0.999962
)`	O	O:0.998714
is	O	O:0.999956
not	O	O:0.999982
calling	O	O:0.999923
BLAS	O	O:0.995755
and	O	O:0.999977
is	O	O:0.999990
somehow	O	O:0.999946
defaulting	O	O:0.999989
over	O	O:0.993253
to	O	O:0.999901
numpy's	O	O:0.999979
internal	O	O:0.999827
GEMM	O	O:0.974568
routine	O	O:0.999844
.	O	O:0.999636
	
Below	O	O:0.998291
is	O	O:0.999993
some	O	O:0.999932
code	O	O:0.999874
which	O	O:0.999956
uses	O	O:0.999963
a	O	O:0.999980
callback	O	O:0.999951
to	O	O:0.999996
print	O	O:0.999996
out	O	O:0.999979
the	O	O:0.999993
current	O	O:0.999929
azimuthal	O	O:0.999884
and	O	O:0.999994
elevation	O	O:0.999874
angles	O	O:0.999267
,	O	O:0.999991
as	O	O:0.999998
well	O	O:0.999997
as	O	O:0.999999
append	O	O:0.912005
them	O	O:0.999868
to	O	O:0.999996
a	O	O:0.999998
list	O	O:0.995326
for	O	O:0.999999
further	O	O:0.999945
use	O	O:0.988470
later	O	O:0.999799
.	O	O:0.999678
	
It's	O	O:0.999877
super	O	O:0.999961
alex	O	O:0.999973
,	O	O:0.999993
here	O	O:0.999980
to	O	O:0.999985
answer	O	O:0.999997
NumPy	O	O:0.999990
questions	O	O:0.999583
in	O	O:0.999991
the	O	O:0.999991
blink	O	O:0.999991
of	O	O:0.999994
an	O	O:0.999932
eye	O	O:0.997969
:)	O	O:0.999766
	
Your	O	O:0.999940
solution	O	O:0.999943
of	O	O:0.999987
searching	O	O:0.999984
the	O	O:0.999998
eigenvalues	O	O:0.999887
for	O	O:0.999999
the	O	O:0.999997
ones	O	O:0.994686
you	O	O:0.999997
want	O	O:0.999996
seems	O	O:0.999992
plausible	O	O:0.999967
enough	O	O:0.999886
.	O	O:0.999757
	
If	O	O:0.999907
d	O	O:0.998994
is	O	O:0.999987
larger	O	O:0.999547
than	O	O:0.999957
8	O	O:0.999415
or	O	O:0.999976
9	O	O:0.999893
,	O	O:0.999998
then	O	O:0.999995
bases	O	O:0.999990
will	O	O:0.999995
be	O	O:0.999998
sufficiently	O	O:0.999985
long	O	O:0.999961
that	O	O:0.999956
you	O	O:0.999990
probably	O	O:0.999984
would	O	O:0.999999
be	O	O:0.999999
better	O	O:0.999994
off	O	O:0.999985
going	O	O:0.999932
with	O	O:0.999985
the	O	O:0.999993
other	O	O:0.999987
version	O	O:0.999989
using	O	O:0.999982
the	O	O:0.999960
dot	O	B-API:0.741618
product	O	O:0.973483
.	O	O:0.999548
	
I'm	O	O:0.999596
not	O	O:0.999982
sure	O	O:0.999995
which	O	O:0.999994
indices	O	O:0.994009
i	O	O:0.999987
need	O	O:0.999998
to	O	O:0.999997
change	O	O:0.999999
to	O	O:0.999987
achieve	O	O:0.999997
the	O	O:0.999994
minimum	O	O:0.919487
and	O	O:0.999995
not	O	O:0.999997
the	O	O:0.999998
maximum	O	O:0.965869
values	O	O:0.984769
.	O	O:0.999850
	
The	O	O:0.999934
dimension	O	O:0.999978
of	O	O:0.999993
`	O	O:0.999978
result	O	O:0.999776
`	O	O:0.999977
has	O	O:0.999908
been	O	O:0.999996
set	O	O:0.998302
earlier	O	O:0.999952
to	O	O:0.999994
the	O	O:1.000000
correct	O	O:0.999980
dimension	O	O:0.999990
,	O	O:0.999999
so	O	O:0.999992
can	O	O:0.999990
check	O	O:1.000000
it	O	O:0.999989
,	O	O:0.999983
but	O	O:0.999998
it	O	O:0.999956
would	O	O:0.999998
be	O	O:0.999999
nice	O	O:0.999994
to	O	O:0.999995
only	O	O:0.999998
use	O	O:0.999652
the	O	O:0.999987
length	O	O:0.999971
of	O	O:0.999988
`	O	O:0.999989
indices	O	O:0.930289
`	O	O:0.999994
to	O	O:0.999972
determine	O	O:0.999997
it	O	O:0.999970
.	O	O:0.999830
	
Alternatively	O	O:0.999640
,	O	O:0.999996
what	O	O:0.999993
about	O	O:0.999980
applying	O	O:0.999960
the	O	O:0.999968
same	O	O:0.999771
function	O	O:0.999839
without	O	O:0.999982
indices	O	O:0.984152
along	O	O:0.999954
the	O	O:0.999979
depth	O	O:0.999845
axes	O	O:0.994001
?	O	O:0.999935
	
Here's	O	O:0.999784
an	O	O:0.999906
O	O	O:0.999593
(	O	O:0.999967
n	O	O:0.999914
log	O	O:0.997482
n	O	O:0.999926
)	O	O:0.999989
algorithm	O	O:0.999831
for	O	O:0.999999
your	O	O:0.999809
problem	O	O:0.999581
.	O	O:0.999749
	
You	O	O:0.999948
need	O	O:0.999995
to	O	O:0.999999
add	O	O:0.999590
axes	O	O:0.998095
to	O	O:0.999970
`	O	O:0.999999
coeffs	O	O:0.989569
`	O	O:0.999992
so	O	O:0.999976
it	O	O:0.999996
will	O	O:0.999998
broadcast	O	O:0.997167
in	O	O:0.999999
the	O	O:0.999981
dimension	O	O:0.999797
(	O	O:0.999989
s	O	O:0.999886
)	O	O:0.999991
you	O	O:0.999972
want	O	O:0.999983
.	O	O:0.999840
	
If	O	O:0.999936
you	O	O:0.999994
want	O	O:0.999996
to	O	O:0.999995
search	O	O:0.999998
for	O	O:0.999999
a	O	O:0.999994
certain	O	O:0.999328
rank	O	O:0.991880
on	O	O:0.999997
B	O	O:0.999938
randomly	O	O:0.999971
,	O	O:0.999994
you	O	O:0.999998
need	O	O:0.999999
to	O	O:0.999999
start	O	O:0.999999
off	O	O:0.999990
with	O	O:0.999998
a	O	O:0.999988
valid	O	O:0.942673
B	O	O:0.999862
with	O	O:0.999984
max	O	O:0.684006
rank	O	O:0.972932
,	O	O:0.999992
and	O	O:0.999994
rotate	O	O:0.999986
a	O	O:0.999984
random	O	O:0.914996
column	O	O:0.999994
j	O	O:0.999952
of	O	O:0.999998
a	O	O:0.999976
random	O	O:0.908949
B	O	O:0.999939
i	O	O:0.999948
by	O	O:0.999996
a	O	O:0.999957
random	O	B-API:0.521450
amount	O	O:0.999884
.	O	O:0.999691
	
I	O	O:0.999858
want	O	O:0.999986
to	O	O:0.999962
save	O	O:0.999685
some	O	O:0.999977
histogram	O	O:0.999580
data	O	O:0.998543
in	O	O:0.999999
a	O	O:0.999996
csv	O	O:0.999435
file	O	O:0.999961
.	O	O:0.999741
	
I	O	O:0.999819
want	O	O:0.999976
to	O	O:0.999935
read	O	O:0.999998
a	O	O:0.999989
mat	O	O:0.975654
file	O	O:0.999998
back	O	O:0.975871
in	O	O:0.999985
python	O	O:0.999904
but	O	O:0.999986
I	O	O:0.999937
have	O	O:0.999997
trouble	O	O:0.999958
going	O	O:0.999992
back	O	O:0.991260
to	O	O:0.999998
a	O	O:0.999997
graph	O	O:0.999886
,	O	O:0.999994
because	O	O:0.999993
the	O	O:0.999986
mat	O	O:0.985221
file	O	O:0.999969
gives	O	O:0.999974
a	O	O:0.999968
numpy.ndarray	B-API	B-API:0.970748
type	O	O:0.999757
file	O	O:0.999927
and	O	O:0.999991
I	O	O:0.999966
need	O	O:0.999994
a	O	O:0.999960
sparse	O	O:0.999471
matrix	O	O:0.998184
to	O	O:0.999983
reconstruct	O	O:0.999980
my	O	O:0.999882
graph	O	O:0.999954
.	O	O:0.999874
	
numpy	O	O:0.999411
makes	O	O:0.999925
it	O	O:0.999989
easy	O	O:0.999971
to	O	O:0.999995
translate	O	O:0.999856
python	O	O:0.999976
objects	O	O:0.999986
into	O	O:0.999951
numpy	O	O:0.999937
ndarrays	O	O:0.999570
,	O	O:0.999940
and	O	O:0.999996
will	O	O:0.999998
even	O	O:0.999998
pick	O	O:0.999615
an	O	O:0.999995
appropriate	O	O:0.999999
resulting	O	O:0.999997
data	O	O:0.999518
type	O	O:0.999955
if	O	O:0.999996
one	O	O:0.999826
is	O	O:0.999975
not	O	O:0.999945
specified	O	O:0.999615
:	O	O:0.999934
#CODE	O	O:0.999309
	
This	O	O:0.999552
`	O	O:0.999905
T	O	B-API:0.623906
`	O	O:0.999931
and	O	O:0.999721
`	O	O:0.999990
X	O	O:0.988181
`	O	O:0.999993
broadcast	O	O:0.985378
together	O	O:0.999980
just	O	O:0.999991
fine	O	O:0.999987
,	O	O:0.999994
for	O	O:0.999993
example	O	O:0.999310
`	O	O:0.999987
T*X	O	O:0.986553
`	O	O:0.999871
works	O	O:0.999544
.	O	O:0.999907
	
I	O	O:0.999658
have	O	O:0.999997
a	O	O:0.999943
numpy	O	O:0.999704
matrix	O	O:0.994624
A	O	O:0.999945
and	O	O:0.999958
I	O	O:0.999967
need	O	O:0.999995
a	O	O:0.999634
function	O	O:0.998916
that	O	O:0.999994
will	O	O:0.999995
count	O	O:0.970051
(	O	O:0.999996
A	O	O:0.999970
[	O	O:0.999706
i	O	O:0.999969
,	O	O:0.999992
j	O	O:0.999603
]	O	O:0.999955
/	O	O:0.999938
sum	O	O:0.989389
of	O	O:0.999997
all	O	O:0.999523
elements	O	O:0.999990
in	O	O:0.999990
i-th	O	O:0.999974
column	O	O:0.999963
)	O	O:0.999958
-	O	O:0.999984
A	O	O:0.999913
[	O	O:0.999822
i	O	O:0.999955
,	O	O:0.999991
j	O	O:0.999603
]	O	O:0.999955
/	O	O:0.999938
sum	O	O:0.989389
of	O	O:0.999997
all	O	O:0.999500
elements	O	O:0.999988
in	O	O:0.999992
j-th	O	O:0.999907
row	O	O:0.999957
	
This	O	O:0.999820
also	O	O:0.999869
works	O	O:0.999998
if	O	O:0.999974
,	O	O:0.999997
instead	O	O:0.999998
of	O	O:0.999999
a	O	O:0.999995
single	O	O:0.999925
index	O	O:0.999548
,	O	O:0.999995
you	O	O:0.999995
provide	O	O:0.999974
an	O	O:0.999996
array	O	O:0.999762
of	O	O:0.999948
indices	O	O:0.769699
:	O	O:0.999982
#CODE	O	O:0.999702
	
How	O	O:0.999883
to	O	O:0.999975
solve	O	O:0.999129
nonlinear	O	O:0.999838
equation	O	O:0.999986
without	O	O:0.999881
sympy	O	O:0.998492
(	O	O:0.999910
max	O	O:0.614850
and	O	O:0.999988
min	O	O:0.823133
)	O	O:0.999816
?	O	O:0.999775
	
Bivariate	O	O:0.994143
Legendre	O	B-API:0.805389
Polynomial	O	O:0.964061
Fitting	O	O:0.999776
to	O	O:0.999991
find	O	O:0.999688
orthogonal	O	O:0.999933
coefficents	O	O:0.999961
	
I	O	O:0.999656
have	O	O:0.999997
a	O	O:0.999961
big	O	O:0.999870
n-square	O	O:0.999737
diagonal	O	O:0.995801
matrix	O	O:0.997171
,	O	O:0.999972
in	O	O:0.999995
the	O	O:0.999982
scipy's	O	O:0.999874
sparse	O	O:0.999842
DIA	O	O:0.999401
format	O	O:0.965635
	
To	O	O:0.999932
find	O	O:0.999543
the	O	O:0.999997
most	O	O:0.999979
frequent	O	O:0.999978
value	O	O:0.999988
of	O	O:0.999997
a	O	O:0.999989
flat	O	O:0.999480
array	O	O:0.997927
,	O	O:0.999978
use	O	O:0.992620
`	O	O:0.999948
unique	B-API	B-API:0.758796
`	O	O:0.999972
,	O	O:0.999499
`	O	O:0.999939
bincount	B-API	B-API:0.996999
`	O	O:0.999957
and	O	O:0.999833
`	O	O:0.999801
argmax	B-API	B-API:0.999644
`	O	O:0.999778
:	O	O:0.999371
#CODE	O	O:0.999780
	
The	O	O:0.999912
funny	O	O:0.999692
thing	O	O:0.999983
is	O	O:0.999946
in	O	O:0.999993
the	O	O:0.999992
above	O	O:0.998749
function	O	O:0.999777
If	O	O:0.999987
i	O	O:0.999976
pass	O	O:0.999980
an	O	O:0.999944
extra	O	O:0.999695
argument	O	O:0.999921
and	O	O:0.999997
just	O	O:0.999997
divide	O	O:0.974163
sum	O	O:0.992608
by	O	O:0.999998
it	O	O:0.999996
,	O	O:0.999997
then	O	O:0.999999
the	O	O:0.999999
times	O	O:0.999946
are	O	O:0.999997
the	O	O:0.999996
same	O	O:0.999912
again	O	O:0.999943
.	O	O:0.999896
	
are	O	O:0.999976
the	O	O:0.999995
same	O	O:0.999981
as	O	O:0.999997
the	O	O:0.999997
ones	O	O:0.996571
posted	O	O:0.999935
in	O	O:0.999998
the	O	O:0.999997
examples	O	O:0.999927
of	O	O:0.999998
this	O	O:0.999989
web	O	O:0.999940
page	O	O:0.999932
.	O	O:0.999595
	
How	O	O:0.999920
to	O	O:0.999996
remove	O	O:0.999404
rings	O	O:0.999966
from	O	O:0.999994
convolve	O	O:0.929320
healpix	O	O:0.999086
map	O	B-API:0.823632
?	O	O:0.999711
	
With	O	O:0.999974
the	O	O:0.999991
information	O	O:0.999993
of	O	O:0.999996
the	O	O:0.999993
full	O	O:0.999321
stack	O	O:0.996733
trace	O	O:0.996206
report	O	O:0.996254
the	O	O:0.999995
bug	O	O:0.999973
to	O	O:0.999995
the	O	O:0.999999
ubuntu	O	O:0.999720
team	O	O:0.999972
.	O	O:0.999792
	
fastest	O	O:0.999805
way	O	O:0.999972
to	O	O:0.999996
get	O	O:0.999629
lookup	O	O:0.969816
table	O	O:0.999594
indices	O	O:0.993956
with	O	O:0.999988
numpy	O	O:0.999844
	
Well	O	O:0.999761
,	O	O:0.999998
a	O	O:0.999991
few	O	O:0.999742
more	O	O:0.999934
,	O	O:0.999929
anyway	O	O:0.999793
:	O	O:0.999955
`	O	O:0.999985
cos	B-API	B-API:0.797228
`	O	O:0.999980
,	O	O:0.999743
`	O	O:0.999993
pi	B-API	O:0.991748
`	O	O:0.999988
,	O	O:0.999645
`	O	O:0.999981
diag	B-API	B-API:0.976928
`	O	O:0.999947
	
I	O	O:0.999595
implemented	O	O:0.999990
a	O	O:0.999824
LOWESS	O	O:0.917068
smoother	O	O:0.999594
(	O	O:0.999967
which	O	O:0.999919
is	O	O:0.999983
the	O	O:0.999983
curve	O	O:0.999989
you	O	O:0.999996
see	O	O:0.999994
)	O	O:0.999996
with	O	O:0.999999
a	O	O:0.999983
tight	O	O:0.999675
fit	O	O:0.999958
to	O	O:0.999997
eliminate	O	O:0.999997
noise	O	O:0.999846
,	O	O:0.999986
since	O	O:0.999994
the	O	O:0.999996
real	O	O:0.993698
waveforms	O	O:0.999894
have	O	O:0.999985
a	O	O:0.999998
non-trivial	O	O:0.999834
noise	O	O:0.999882
component	O	O:0.999907
,	O	O:0.999980
and	O	O:0.999998
then	O	O:0.999990
tried	O	O:0.999966
doing	O	O:0.999993
a	O	O:0.999951
rolling	O	O:0.840959
max	O	O:0.665441
with	O	O:0.999991
a	O	O:0.999882
window	O	O:0.999954
over	O	O:0.998346
the	O	O:0.999991
data	O	O:0.991942
,	O	O:0.999998
but	O	O:0.999986
I	O	O:0.999894
can't	O	O:0.999991
get	O	O:0.998456
anything	O	O:0.999989
solid	O	O:0.999707
.	O	O:0.999640
	
But	O	O:0.999922
sum	B-API	O:0.776688
function	O	O:0.999515
from	O	O:0.999984
numpy	O	O:0.999842
doesn't	O	O:0.999979
suport	O	O:0.999786
"	O	O:0.999978
1:3	O	O:0.994185
"	O	O:0.999657
	
(	O	O:0.999898
the	O	O:0.999962
`	O	O:0.999662
np.nonzero	B-API	B-API:0.996104
`	O	O:0.999979
should	O	O:0.999934
return	O	O:0.999990
a	O	O:0.999980
tuple	O	O:0.999926
with	O	O:0.999996
one	O	O:0.999979
element	O	O:0.999985
,	O	O:0.999997
an	O	O:0.999992
array	O	O:0.999763
of	O	O:0.999994
indices	O	O:0.976075
)	O	O:0.999991
.	O	O:0.999657
	
Can	O	O:0.999945
the	O	O:0.999993
"	O	O:0.999996
small	O	O:0.999962
values	O	O:0.994152
of	O	O:0.999985
derivative	O	O:0.999913
"	O	O:0.999995
be	O	O:0.999963
small	O	O:0.999958
with	O	O:0.999976
respect	O	O:0.999743
to	O	O:0.999998
the	O	O:0.999999
sin	O	O:0.569935
curve	O	O:0.999978
?	O	O:0.999925
	
6	O	O:0.999872
columns	O	O:0.999909
,	O	O:0.999999
92370574	O	O:0.999985
rows	O	O:0.999901
,	O	O:0.999998
2496502	O	O:0.999977
locations	O	O:0.999956
,	O	O:0.999993
37	O	O:0.999968
months	O	O:0.999978
each	O	O:0.999957
,	O	O:0.999996
unique	O	O:0.984877
amounts	O	O:0.999974
for	O	O:0.999996
each	O	O:0.999788
value	O	O:0.999947
.	O	O:0.999815
	
Note	O	O:0.999850
that	O	O:0.999990
where	O	O:0.998147
possible	O	O:0.999968
,	O	O:0.999987
`	O	O:0.999984
reshape	B-API	B-API:0.946509
`	O	O:0.999975
will	O	O:0.999965
give	O	O:0.999993
you	O	O:0.999999
a	O	O:0.999999
view	O	O:0.957087
of	O	O:0.999997
the	O	O:0.999885
array	O	O:0.998038
.	O	O:0.999875
	
Here	O	O:0.999892
you	O	O:0.999991
append	O	O:0.792901
only	O	O:0.999996
a	O	O:0.999997
REFERENCE	O	O:0.999924
to	O	O:0.999997
your	O	O:0.999999
only	O	O:0.999997
one	O	O:0.999999
existing	O	O:0.999911
`	O	O:0.999976
energy	O	O:0.997476
`	O	O:0.999957
array	O	O:0.964041
.	O	O:0.999863
	
And	O	O:0.999972
you	O	O:0.999995
can	O	O:0.999993
combine	O	O:0.997234
the	O	O:0.999995
summation	O	O:0.999974
and	O	O:0.999997
multiplication	O	O:0.999992
into	O	O:0.999942
a	O	O:0.999949
dot	O	B-API:0.951030
product	O	O:0.913947
:	O	O:0.999902
#CODE	O	O:0.999579
	
For	O	O:0.999897
example	O	O:0.999751
,	O	O:0.999933
`	O	O:0.999997
a	O	O:0.999571
`	O	O:0.999776
is	O	O:0.999985
generated	O	O:0.999965
from	O	O:0.999949
`	O	O:0.999992
a	O	O:0.999927
=	O	O:0.999487
z	O	O:0.999831
[	O	O:0.999886
z	O	O:0.999795
!	O	O:0.999776
=0	O	O:0.998537
]`	O	O:0.999842
;	O	O:0.999554
`	O	O:0.999972
a	O	O:0.999886
`	O	O:0.999997
then	O	O:0.999996
changes	O	O:0.999999
through	O	O:0.999983
some	O	O:0.999957
processing	O	O:0.999767
,	O	O:0.999976
and	O	O:0.999999
now	O	O:0.999983
I	O	O:0.999956
need	O	O:0.999997
to	O	O:0.999991
insert	O	O:0.996329
`	O	O:0.999992
nan	O	O:0.984431
`	O	O:0.999992
s	O	O:0.999668
where	O	O:0.997451
there	O	O:0.999812
were	O	O:0.999972
originally	O	O:0.999896
zeros	O	O:0.981238
.	O	O:0.999756
	
I	O	O:0.999902
frequently	O	O:0.999942
use	O	O:0.993981
the	O	O:0.999256
numpy.where	B-API	B-API:0.998990
function	O	O:0.998432
to	O	O:0.999981
gather	O	O:0.999996
a	O	O:0.999994
tuple	O	O:0.999989
of	O	O:0.999998
indices	O	O:0.987592
of	O	O:0.999999
a	O	O:0.999973
matrix	O	O:0.995882
having	O	O:0.999962
some	O	O:0.999601
property	O	O:0.999919
.	O	O:0.999830
	
I	O	O:0.999559
suspect	O	O:0.999961
the	O	O:0.999981
original	O	O:0.999662
formula	O	O:0.999969
was	O	O:0.999937
right	O	O:0.999985
but	O	O:0.999974
you	O	O:0.999973
didn't	O	O:0.999960
encode	O	O:0.996739
it	O	O:0.999997
right	O	O:0.999975
in	O	O:0.999976
Python	O	O:0.999844
.	O	O:0.999802
	
This	O	O:0.999891
gets	O	O:0.999884
me	O	O:0.999976
the	O	O:0.999997
sum	O	O:0.987070
of	O	O:0.999998
all	O	O:0.998875
red	O	O:0.999998
combined	O	O:0.999815
in	O	O:0.999986
original	O	O:0.999917
-	O	O:0.999994
all	O	O:0.995464
red	O	O:0.999991
combined	O	O:0.999792
in	O	O:0.999962
mutated	O	O:0.999676
.	O	O:0.999793
	
`	O	O:0.999875
p2	O	O:0.998419
=	O	O:0.999738
einsum	B-API	B-API:0.984207
(	O	O:0.999870
'	O	O:0.999968
nk	O	O:0.999857
,	O	O:0.999981
nk	O	O:0.999313
->	O	O:0.999971
n	O	O:0.999443
'	O	O:0.999905
,	O	O:0.999978
p1	O	O:0.999710
,	O	O:0.999992
delta	O	O:0.998499
)`	O	O:0.999150
is	O	O:0.999970
the	O	O:0.999983
pairwise	O	O:0.999879
dot	O	O:0.958415
product	O	O:0.995181
of	O	O:0.999998
the	O	O:0.999998
rows	O	O:0.999997
of	O	O:0.999978
`	O	O:0.999979
p1	O	O:0.996498
`	O	O:0.999953
and	O	O:0.999708
`	O	O:0.999995
delta	O	B-API:0.665358
`	O	O:0.999934
.	O	O:0.998896
	
I	O	O:0.999227
did	O	O:0.999975
the	O	O:0.999963
reshape	B-API	O:0.583753
,	O	O:0.999993
just	O	O:0.999997
so	O	O:0.999998
that	O	O:0.999996
both	O	O:0.999994
arrays	O	O:0.999964
are	O	O:0.999983
same	O	O:0.999977
shape	O	O:0.954003
,	O	O:0.999985
but	O	O:0.999974
I	O	O:0.999768
do	O	O:0.999992
not	O	O:0.999970
think	O	O:0.999992
you	O	O:0.999997
really	O	O:0.999981
need	O	O:0.999996
the	O	O:0.999997
reshaping	O	O:0.999962
,	O	O:0.999985
with	O	O:0.999994
the	O	O:0.999994
list	O	O:0.997863
comprehension	O	O:0.999990
the	O	O:0.999995
shape	O	O:0.998156
of	O	O:0.999991
array	O	O:0.998700
you	O	O:0.999999
get	O	O:0.996357
is	O	O:0.999977
`	O	O:0.999951
(	O	O:0.999959
length	O	O:0.999988
of	O	O:0.999959
string	O	O:0.999947
,	O	O:0.999996
)`	O	O:0.999618
	
Also	O	O:0.999927
,	O	O:0.999992
I	O	O:0.999894
expect	O	O:0.999998
the	O	O:0.999995
positions	O	O:0.999985
of	O	O:0.999998
the	O	O:0.999996
zeros	O	O:0.998530
to	O	O:0.999996
be	O	O:0.999999
relatively	O	O:0.999970
sparse	O	O:0.997703
(	O	O:0.999951
~1%	O	O:0.999970
of	O	O:0.999987
all	O	O:0.999331
bit	O	O:0.999994
positions	O	O:0.999884
)	O	O:0.999956
.	O	O:0.999762
	
Slicing	O	O:0.999903
arrays	O	O:0.999964
with	O	O:0.999927
meshgrid	B-API	B-API:0.894317
/	O	O:0.999987
array	O	O:0.997313
indices	O	O:0.973059
in	O	O:0.999975
Numpy	O	O:0.999793
	
(	O	O:0.999909
An	O	O:0.999978
nonzero	O	O:0.931079
exit	O	O:0.999850
status	O	O:0.999969
usually	O	O:0.999907
indicates	O	O:0.999994
an	O	O:0.999976
error	O	O:0.999964
on	O	O:0.999979
Unix	O	O:0.998914
style	O	O:0.994022
systems	O	O:0.999874
.	O	O:0.999970
A	O	O:0.999995
couple	O	O:0.999521
programs	O	O:0.999914
are	O	O:0.999988
different	O	O:0.999967
,	O	O:0.999945
e.g.	O	O:0.999817
,	O	O:0.999922
`	O	O:0.999986
diff	B-API	B-API:0.986738
`	O	O:0.999977
.	O	O:0.999836
)	O	O:0.999983
Try	O	O:0.999958
examining	O	O:0.999895
the	O	O:0.999924
`	O	O:0.999957
stderr	O	O:0.967139
`	O	O:0.999998
produced	O	O:0.999918
by	O	O:0.999991
the	O	O:0.999980
subprocess	O	O:0.999984
to	O	O:0.999993
see	O	O:1.000000
what	O	O:0.999996
error	O	O:0.999974
messages	O	O:0.999959
are	O	O:0.999987
printed	O	O:0.999835
there	O	O:0.999928
.	O	O:0.999674
	
To	O	O:0.999940
achieve	O	O:0.999985
exactly	O	O:0.999992
what	O	O:0.999982
you	O	O:0.999987
are	O	O:0.999997
asking	O	O:0.999972
for	O	O:0.999986
I	O	O:0.999749
would	O	O:0.999984
apply	O	O:0.750914
a	O	O:0.999945
`	O	O:0.998854
[	O	O:0.999907
3x3	O	O:0.999766
]`	O	O:0.999908
box-filter	O	O:0.997889
on	O	O:0.999977
the	O	O:0.999970
image	O	O:0.988620
and	O	O:0.999998
than	O	O:0.999989
I	O	O:0.999754
would	O	O:0.999990
resize	O	O:0.730141
the	O	O:0.999994
matrix	O	O:0.997993
using	O	O:0.999997
nearest	O	O:0.999217
neighbor	O	O:0.999763
interpolation	O	O:0.999842
.	O	O:0.999502
	
Is	O	O:0.999849
there	O	O:0.999987
a	O	O:0.999993
quick	O	O:0.999692
way	O	O:0.999975
to	O	O:0.999974
reshape	O	O:0.971618
my	O	O:0.999891
`	O	O:0.999955
csr_matrix	O	O:0.697540
`	O	O:0.999990
without	O	O:0.999836
copying	O	O:0.999984
everything	O	O:0.999804
in	O	O:0.999993
it	O	O:0.999975
?	O	O:0.999913
	
The	O	O:0.999919
catch	O	O:0.996450
is	O	O:0.999994
that	O	O:0.999979
I	O	O:0.999988
need	O	O:0.999999
to	O	O:0.999990
keep	O	O:1.000000
the	O	O:0.999998
colors	O	O:0.947991
exactly	O	O:0.999997
the	O	O:0.999997
way	O	O:0.999968
they	O	O:0.999963
are	O	O:0.999912
(	O	O:0.999819
background	O	O:0.999768
:	O	O:0.999831
I'm	O	O:0.999875
resizing	O	O:0.999994
a	O	O:0.999923
map	O	B-API:0.657266
where	O	O:0.997906
provinces	O	O:0.999830
are	O	O:0.999988
color-coded	O	O:0.999868
)	O	O:0.999965
,	O	O:0.999913
and	O	O:0.999999
so	O	O:0.999970
I	O	O:0.999279
cannot	O	O:0.999997
just	O	O:0.999965
perform	O	O:0.999998
a	O	O:0.999976
resize	O	B-API:0.528048
with	O	O:0.999990
bicubic	O	O:0.999437
interpolation	O	O:0.999963
,	O	O:0.999979
because	O	O:0.999993
that	O	O:0.999985
will	O	O:1.000000
also	O	O:0.999999
interpolate	O	O:0.987757
the	O	O:0.999989
pixel	O	O:0.999970
colors	O	O:0.983071
while	O	O:0.999958
smoothing	O	O:0.999932
.	O	O:0.999842
	
You	O	O:0.999863
should	O	O:0.999973
"	O	O:0.999996
flatten	O	B-API:0.677075
"	O	O:0.999921
the	O	O:0.999974
array	O	O:0.998621
of	O	O:0.999993
arrays	O	O:0.999886
first	O	O:0.999258
.	O	O:0.999979
unfortunately	O	O:0.999868
,	O	O:0.999991
there's	O	O:0.999938
no	O	O:0.999934
builtin	O	O:0.998393
method	O	O:0.999985
,	O	O:0.999976
see	O	O:0.999982
#URL	O	O:0.999378
	
then	O	O:0.999955
concatenate	O	O:0.956072
the	O	O:0.999998
saved	O	O:0.999962
objects	O	O:0.999842
whit	O	O:0.999993
this	O	O:0.999883
code	O	O:0.999353
:	O	O:0.999951
#CODE	O	O:0.999609
	
For	O	O:0.999980
something	O	O:0.999971
like	O	O:0.999995
a	O	O:0.999996
dot	O	O:0.503327
product	O	O:0.986375
,	O	O:0.999988
pandas	O	O:0.999909
`	O	O:0.999987
DataFrames	O	O:0.980630
`	O	O:0.999987
are	O	O:0.999968
generally	O	O:0.999986
going	O	O:0.999966
to	O	O:0.999983
be	O	O:0.999998
slower	O	O:0.999939
than	O	O:0.999990
a	O	O:0.999974
numpy	O	O:0.999755
array	O	O:0.995571
since	O	O:0.999985
pandas	O	O:0.999617
is	O	O:0.999997
doing	O	O:0.999687
**	O	O:0.999991
a	O	O:0.999942
lot	O	O:0.999967
more	O	O:0.999927
stuff	O	O:0.999634
**	O	O:0.999995
aligning	O	O:0.999958
labels	O	O:0.999696
,	O	O:0.999988
potentially	O	O:0.999954
dealing	O	O:0.999913
with	O	O:0.999993
heterogenous	O	O:0.999877
types	O	O:0.999625
,	O	O:0.999938
and	O	O:0.999999
so	O	O:0.999985
on	O	O:0.999915
.	O	O:0.999881
	
I	O	O:0.999821
want	O	O:0.999990
to	O	O:0.999958
pass	O	O:0.999998
an	O	O:0.999983
array	O	O:0.999738
of	O	O:0.999987
indices	O	O:0.973792
and	O	O:0.999999
column	O	O:0.999993
names	O	O:0.988019
and	O	O:0.999995
get	O	O:0.999333
a	O	O:0.999987
list	O	O:0.999196
of	O	O:0.999990
objects	O	O:0.999889
that	O	O:0.999995
are	O	O:0.999998
found	O	O:0.999932
in	O	O:0.999987
the	O	O:0.999984
corresponding	O	O:0.999750
index	O	O:0.997952
and	O	O:0.999999
column	O	O:0.999994
name	O	O:0.981243
.	O	O:0.999743
	
From	O	O:0.999970
this	O	O:0.999985
you	O	O:0.999989
would	O	O:0.999995
expect	O	O:0.999999
the	O	O:0.999999
total	O	O:0.999980
sum	O	O:0.992392
to	O	O:0.999996
be	O	O:0.999997
`	O	O:0.999994
100,679,697	O	O:0.997912
=	O	O:0.999936
200*	O	O:0.998267
(	O	O:0.999775
1,000,000	O	O:0.998988
-	O	O:0.999975
499,097	O	O:0.999153
)	O	O:0.999915
+	O	O:0.999842
499,097	O	O:0.998590
`	O	O:0.999759
	
The	O	O:0.999798
histogram	O	O:0.987394
way	O	O:0.999818
is	O	O:0.999975
not	O	O:0.999974
the	O	O:0.999994
fastest	O	O:0.999585
,	O	O:0.999967
and	O	O:0.999996
can't	O	O:0.999969
tell	O	O:0.999931
the	O	O:0.999994
difference	O	O:0.980757
between	O	O:0.996453
an	O	O:0.999971
arbitrarily	O	O:0.999960
small	O	O:0.999920
separation	O	O:0.999986
of	O	O:0.999978
points	O	O:0.999771
and	O	O:0.999998
`	O	O:0.999976
2	O	O:0.996883
*	O	O:0.999956
sqrt	B-API	B-API:0.696317
(	O	O:0.999935
2	O	O:0.999671
)	O	O:0.999949
*	O	O:0.999982
b	O	O:0.999258
`	O	O:0.999749
(	O	O:0.999882
where	O	O:0.997111
`	O	O:0.999981
b	O	O:0.998288
`	O	O:0.999976
is	O	O:0.999943
bin	O	O:0.999968
width	O	O:0.999959
)	O	O:0.999954
.	O	O:0.999444
	
}	O	O:0.999886
for	O	O:0.999967
n=1	O	O:0.999275
,	O	O:0.999958
2	O	O:0.999862
,	O	O:0.999965
3	O	O:0.999884
,	O	O:0.999980
4	O	O:0.999902
,	O	O:0.999982
5	O	O:0.999903
,	O	O:0.999960
6	O	O:0.999048
(	O	O:0.999987
using	O	O:0.999986
Sum	B-API	O:0.988221
(	O	O:0.999968
c_n	O	O:0.998358
exp	B-API	B-API:0.684796
(	O	O:0.999982
i	O	O:0.999952
2	O	O:0.999974
pi	O	O:0.999694
n	O	O:0.999946
x	O	O:0.999843
)	O	O:0.999984
)	O	O:0.999990
as	O	O:0.999972
Fourier	O	O:0.999402
series	O	O:0.999854
)	O	O:0.999938
.	O	O:0.999640
	
I	O	O:0.999820
think	O	O:0.999963
I	O	O:0.999636
can	O	O:0.999993
t	O	O:0.990806
just	O	O:0.999998
simple	O	O:0.999963
sum	O	O:0.991690
the	O	O:0.999988
"	O	O:0.999970
seq	O	O:0.999391
*	O	O:0.999969
"	O	O:0.999940
array	O	O:0.955732
,	O	O:0.999984
because	O	O:0.999994
instead	O	O:0.999995
of	O	O:1.000000
a	O	O:0.999982
chord	O	O:0.999956
I	O	O:0.999959
will	O	O:0.999999
get	O	O:0.994911
noise	O	O:0.999856
.	O	O:0.999863
	
I	O	O:0.999825
presume	O	O:0.999983
you	O	O:0.999982
want	O	O:0.999996
to	O	O:0.999993
transpose	O	O:0.996726
first	O	O:0.990837
:	O	O:0.999945
#CODE	O	O:0.999549
	
Oh	O	O:0.998370
,	O	O:0.999945
that's	O	O:0.999980
interesting	O	O:0.999928
you	O	O:0.999995
can	O	O:0.999996
do	O	O:1.000000
it	O	O:0.999997
with	O	O:0.999994
stack	B-API	O:0.924274
.	O	O:0.999932
	
In	O	O:0.999969
this	O	O:0.999972
case	O	O:0.999992
,	O	O:0.999996
using	O	O:0.999986
numpy	O	O:0.999981
outer	B-API	O:0.938973
operations	O	O:0.999913
allow	O	O:0.999925
you	O	O:0.999994
to	O	O:0.999987
compute	O	O:0.999999
the	O	O:0.999993
multiplications	O	O:0.999986
and	O	O:0.999999
sums	O	O:0.999938
at	O	O:0.995797
the	O	O:0.999979
`	O	O:0.999963
C	O	O:0.996923
`	O	O:0.999989
loop	O	O:0.999842
speed	O	O:0.999901
.	O	O:0.999793
	
The	O	O:0.999946
most	O	O:0.999885
efficient	O	O:0.999967
way	O	O:0.999804
is	O	O:0.999988
likely	O	O:0.999919
to	O	O:0.999988
use	O	O:0.994713
'	O	O:0.999703
np.empty()	B-API	B-API:0.991965
'	O	O:0.999958
to	O	O:0.999977
allocate	O	O:0.999997
the	O	O:0.999988
space	O	O:0.989877
/	O	O:0.999988
memory	O	O:0.999965
for	O	O:0.999997
your	O	O:0.999990
end	O	O:0.999863
dataset	O	O:0.999962
and	O	O:0.999995
then	O	O:0.999999
load	O	O:0.997978
data	O	O:0.998304
&	O	O:0.999983
broadcast	O	O:0.996403
within	O	O:0.999982
that	O	O:0.999995
using	O	O:0.999993
slice	O	O:0.804693
indexing	O	O:0.999848
.	O	O:0.999393
	
Ok	O	O:0.999432
,	O	O:0.999974
with	O	O:0.999999
your	O	O:0.999961
histogram	O	O:0.997795
I	O	O:0.999988
get	O	O:0.999687
at	O	O:0.998014
least	O	O:0.999998
the	O	O:0.999998
total	O	O:0.999952
number	O	O:0.999994
of	O	O:0.999997
each	O	O:0.999915
pair	O	O:0.999983
.	O	O:0.999843
	
This	O	O:0.999139
is	O	O:0.999968
because	O	O:0.999973
python's	O	O:0.999944
sum	O	O:0.964424
is	O	O:0.999979
basically	O	O:0.999989
summing	O	O:0.999992
a	O	O:0.999979
for	O	O:0.999965
loop	O	O:0.999983
over	O	O:0.983403
the	O	O:0.999800
object	O	O:0.999862
.	O	O:0.999864
	
Then	O	O:0.999967
the	O	O:1.000000
entire	O	O:0.999987
shape	O	O:0.999809
changes	O	O:0.999967
from	O	O:0.999960
(	O	O:0.999977
x	O	O:0.999939
,	O	O:0.999986
y	O	O:0.999948
)	O	O:0.999985
to	O	O:0.999962
merely	O	O:0.999980
(	O	O:0.999987
x	O	O:0.999771
,	O	O:0.999972
)	O	O:0.999989
and	O	O:0.999992
I	O	O:0.999969
get	O	O:0.985516
'	O	O:0.999873
too	O	O:0.999993
many	O	O:0.999981
indices	O	O:0.967713
'	O	O:0.999960
errors	O	O:0.999985
when	O	O:0.999970
I	O	O:0.999901
try	O	O:0.999998
to	O	O:0.999976
use	O	O:0.999247
masks	O	O:0.999498
.	O	O:0.999494
	
If	O	O:0.999789
reps	O	O:0.995434
has	O	O:0.999980
length	O	O:0.999974
d	O	O:0.999687
,	O	O:0.999999
the	O	O:0.999986
result	O	O:0.999987
will	O	O:0.999999
have	O	O:0.999999
dimension	O	O:0.999999
of	O	O:0.999987
max	B-API	B-API:0.714414
(	O	O:0.999988
d	O	O:0.999875
,	O	O:0.999978
A.ndim	O	O:0.995869
)	O	O:0.999954
.	O	O:0.999492
	
I	O	O:0.999843
want	O	O:0.999989
to	O	O:0.999890
do	O	O:1.000000
this	O	O:0.999997
by	O	O:0.999991
dividing	O	O:0.999975
each	O	O:0.999891
histogram	O	O:0.999418
by	O	O:0.999997
its	O	O:0.999993
maximum	O	O:0.991415
value	O	O:0.999996
so	O	O:0.999989
all	O	O:0.999743
the	O	O:0.999998
distributions	O	O:0.999947
have	O	O:0.999997
the	O	O:0.999998
same	O	O:0.999975
scale	O	O:0.999790
.	O	O:0.999881
	
An	O	O:0.999891
obvious	O	O:0.999593
path	O	O:0.993776
would	O	O:0.999994
be	O	O:0.999998
to	O	O:0.999998
transpose	O	O:0.998939
the	O	O:0.999994
array	O	O:0.998504
so	O	O:0.999996
that	O	O:0.999999
the	O	O:0.999998
indices	O	O:0.997879
that	O	O:0.999985
I	O	O:0.999953
am	O	O:0.999998
selecting	O	O:0.999513
would	O	O:0.999992
come	O	O:0.999984
up	O	O:0.999983
first	O	O:0.994205
.	O	O:0.999711
	
Now	O	O:0.999785
,	O	O:0.999989
for	O	O:0.999999
mean	O	O:0.977986
calculations	O	O:0.999855
,	O	O:0.999987
those	O	O:0.999992
numeric	O	O:0.998890
IDs	O	O:0.999674
could	O	O:0.999984
be	O	O:0.999999
used	O	O:0.999997
as	O	O:0.999980
`"	O	O:0.999899
weights	O	O:0.999782
"`	O	O:0.999908
for	O	O:0.999983
binning	O	O:0.999717
with	O	O:0.999903
`	O	O:0.999811
np.bincount	B-API	B-API:0.992874
`	O	O:0.999980
,	O	O:0.999978
giving	O	O:0.999985
us	O	O:0.999976
the	O	O:0.999998
sum	O	O:0.995817
of	O	O:0.999999
data	O	O:0.999775
elements	O	O:0.999999
corresponding	O	O:0.999970
to	O	O:0.999992
each	O	O:0.999976
`	O	O:0.999963
ID	O	O:0.986223
`	O	O:0.999963
.	O	O:0.998808
	
However	O	O:0.999628
,	O	O:0.999996
what	O	O:0.999990
I	O	O:0.999930
need	O	O:0.999968
is	O	O:0.999992
a	O	O:0.999984
string	O	O:0.999894
containing	O	O:0.999958
all	O	O:0.999610
the	O	O:0.999998
elements	O	O:0.999928
in	O	O:0.999991
the	O	O:0.999995
list	O	O:0.998112
linked	O	O:0.999986
by	O	O:0.999870
'	O	O:0.999898
;	O	O:0.999916
'	O	O:0.999536
,	O	O:0.999993
not	O	O:0.999981
the	O	O:0.999997
list	O	O:0.999561
itself	O	O:0.999980
,	O	O:0.999998
so	O	O:0.999997
it	O	O:0.999976
seems	O	O:0.999998
like	O	O:0.999996
I	O	O:0.999993
have	O	O:0.999998
to	O	O:0.999991
sum	O	O:0.999242
all	O	O:0.999835
the	O	O:0.999999
elements	O	O:0.999967
in	O	O:0.999998
asString	O	O:0.999946
with	O	O:0.999999
another	O	O:0.999857
iteration	O	O:0.999972
?	O	O:0.999888
	
the	O	O:0.999935
output	O	O:0.999829
I	O	O:0.999881
need	O	O:0.999957
:	O	O:0.999685
`	O	O:0.999988
S	O	O:0.998734
=	O	O:0.999852
[	O	O:0.999895
2	O	O:0.999764
,	O	O:0.999938
5	O	O:0.999820
,	O	O:0.999969
8	O	O:0.999808
,	O	O:0.999974
11	O	O:0.999787
,	O	O:0.999980
14	O	O:0.999856
]`	O	O:0.999921
I	O	O:0.999795
thought	O	O:0.999981
something	O	O:0.999713
like	O	O:0.999910
:	O	O:0.999976
`	O	O:0.999989
S1	O	O:0.999167
=	O	O:0.999566
np.array	B-API	B-API:0.997297
(	O	O:0.999841
L	O	O:0.999279
[:	O	O:0.999880
]	O	O:0.999346
[	O	O:0.999752
1	O	O:0.999882
,	O	O:0.999949
0	O	O:0.999705
])`	O	O:0.999915
should	O	O:0.999892
work	O	O:0.999993
but	O	O:0.999998
whatever	O	O:0.999989
I	O	O:0.999945
try	O	O:0.999993
I	O	O:0.999546
have	O	O:0.999999
the	O	O:0.999981
error	O	O:0.999927
like	O	O:0.999969
:	O	O:0.999857
`	O	O:0.999899
TypeError	O	O:0.999078
:	O	O:0.999988
list	O	O:0.998068
indices	O	O:0.988840
must	O	O:0.999993
be	O	O:0.999996
integers	O	O:0.999802
,	O	O:0.999936
not	O	O:0.999982
tuple	O	O:0.999523
`	O	O:0.999957
.	O	O:0.999037
	
I	O	O:0.999613
need	O	O:0.999996
it	O	O:0.999988
because	O	O:0.999985
in	O	O:0.999995
the	O	O:0.999997
next	O	O:0.992018
part	O	O:0.999988
I	O	O:0.999935
will	O	O:0.999999
sum	O	O:0.951779
up	O	O:0.999997
this	O	O:0.999996
large	O	O:0.999728
np.array	B-API	B-API:0.967342
with	O	O:0.999971
some	O	O:0.999946
delta_array	O	O:0.999372
that	O	O:0.999967
has	O	O:0.999994
the	O	O:0.999997
same	O	O:0.999882
shape	O	O:0.986453
.	O	O:0.999774
	
Used	O	O:0.999897
reshape	B-API	O:0.727742
to	O	O:0.999997
make	O	O:1.000000
rows	O	O:0.999997
into	O	O:0.999963
columns	O	O:0.999946
.	O	O:0.999649
	
I	O	O:0.999734
understand	O	O:0.999984
that	O	O:0.999921
you	O	O:0.999992
could	O	O:0.999999
create	O	O:0.999997
an	O	O:0.999997
array	O	O:0.999843
of	O	O:0.999985
zeros	O	O:0.995057
and	O	O:1.000000
iteratively	O	O:0.999973
change	O	O:0.999982
the	O	O:0.999997
values	O	O:0.984038
in	O	O:0.999997
each	O	O:0.999984
column	O	O:0.999963
,	O	O:0.999996
but	O	O:0.999978
I	O	O:0.999903
also	O	O:0.999994
understand	O	O:0.999981
this	O	O:0.999468
is	O	O:0.999958
not	O	O:0.999989
an	O	O:0.999986
efficient	O	O:0.999504
method	O	O:0.999978
.	O	O:0.999866
	
I'm	O	O:0.999819
trying	O	O:0.999975
to	O	O:0.999988
implement	O	O:0.999996
the	O	O:0.999996
univariate	O	O:0.999436
gradient	O	O:0.999019
descent	O	O:0.999915
algorithm	O	O:0.999917
in	O	O:0.999961
python	O	O:0.999711
.	O	O:0.999811
	
numpy	O	O:0.999789
glossary	O	O:0.999717
says	O	O:0.999982
the	O	O:0.999989
sum	O	O:0.963992
along	O	O:0.999980
axis	O	O:0.995759
argument	O	O:0.999964
`	O	O:0.999975
axis=1	O	O:0.997698
`	O	O:0.999996
sums	O	O:0.999919
over	O	O:0.995181
rows	O	O:0.999835
:	O	O:0.999955
"	O	O:0.999993
we	O	O:0.999976
can	O	O:0.999997
sum	O	O:0.999583
each	O	O:0.999994
row	O	O:0.999996
of	O	O:0.999997
an	O	O:0.999963
array	O	O:0.999518
,	O	O:0.999985
in	O	O:0.999993
which	O	O:0.999987
case	O	O:0.999995
we	O	O:0.999990
operate	O	O:0.999968
along	O	O:0.999990
columns	O	O:0.999955
,	O	O:0.999990
or	O	O:0.999995
axis	O	O:0.995650
1	O	O:0.999777
"	O	O:0.999939
.	O	O:0.999141
	
It	O	O:0.999954
also	O	O:0.999988
prints	O	O:0.999991
out	O	O:0.999983
the	O	O:0.999999
new	O	O:0.999970
indices	O	O:0.981632
signature	O	O:0.999948
.	O	O:0.999827
	
At	O	O:0.999952
first	O	O:0.991582
,	O	O:0.999997
your	O	O:0.999983
`	O	O:0.999973
result	O	O:0.999433
`	O	O:0.999978
does	O	O:0.999838
not	O	O:0.999994
look	O	O:0.999995
like	O	O:0.999998
a	O	O:0.999995
complex	O	O:0.999267
FFT	O	O:0.994638
output	O	O:0.999156
	
debug	O	O:0.999601
performance	O	O:0.999991
diff	O	O:0.682708
of	O	O:0.999975
Same	O	O:0.999907
code	O	O:0.999977
on	O	O:0.999990
nearly	O	O:0.999905
same	O	O:0.999986
cpu	O	O:0.988145
/	O	O:0.999925
ram	O	O:0.999878
	
The	O	O:0.999828
HTML	O	O:0.999606
file	O	O:0.999993
generated	O	O:0.999968
by	O	O:0.999983
Cython	O	O:0.998949
indicates	O	O:0.999974
that	O	O:0.999992
the	O	O:0.999994
bottleneck	O	O:0.999852
is	O	O:0.999991
the	O	O:0.999991
dot	O	O:0.699331
products	O	O:0.999853
(	O	O:0.999968
which	O	O:0.999948
is	O	O:0.999985
expected	O	O:0.999993
of	O	O:0.999996
course	O	O:0.999936
)	O	O:0.999996
.	O	O:0.999507
	
`	O	O:0.999786
numpy.unique	B-API	B-API:0.998942
`	O	O:0.999981
with	O	O:0.998972
`	O	O:0.999991
return_index=True	O	O:0.982382
`	O	O:0.999987
will	O	O:0.999945
give	O	O:0.999993
you	O	O:0.999996
a	O	O:0.999995
list	O	O:0.999315
of	O	O:0.999997
indices	O	O:0.994247
to	O	O:0.999999
take	O	O:0.999782
from	O	O:0.999993
.	O	O:0.999884
	
I	O	O:0.999748
forgot	O	O:0.999946
exactly	O	O:0.999922
why	O	O:0.999951
,	O	O:0.999988
but	O	O:0.999994
there	O	O:0.999725
is	O	O:0.999997
a	O	O:0.999992
good	O	O:0.999461
reason	O	O:0.999991
why	O	O:0.999993
you	O	O:0.999990
calculate	O	O:0.999996
it	O	O:0.999996
as	O	O:0.999999
the	O	O:0.999989
ratio	O	O:0.999890
between	O	O:0.986311
these	O	O:0.999988
two	O	O:0.999992
averages	O	O:0.999462
,	O	O:0.999992
instead	O	O:1.000000
of	O	O:0.999996
directly	O	O:0.999983
averaging	O	O:0.999956
`	O	O:0.999909
fft	B-API	B-API:0.868517
(	O	O:0.999969
y	O	O:0.999778
)	O	O:0.999930
/	O	O:0.999741
fft	B-API	B-API:0.791388
(	O	O:0.999871
x	O	O:0.999812
)`	O	O:0.999490
.	O	O:0.999532
	
Do	O	O:0.999817
you	O	O:0.999993
really	O	O:0.999965
want	O	O:0.999998
this	O	O:0.999968
'	O	O:0.999975
roll	B-API	O:0.568951
'	O	O:0.999696
?	O	O:0.999912
	
By	O	O:0.999868
adding	O	O:0.999955
a	O	O:0.999982
nonzero	O	O:0.884721
number	O	O:0.999974
at	O	O:0.999091
the	O	O:0.999999
end	O	O:0.999975
of	O	O:0.999996
the	O	O:0.999981
array	O	O:0.999215
,	O	O:0.999996
you	O	O:0.999995
can	O	O:0.999999
still	O	O:0.999999
use	O	O:0.997724
np.nonzero	B-API	B-API:0.942551
to	O	O:0.999957
get	O	O:0.999948
your	O	O:0.999996
desired	O	O:0.999867
outcome	O	O:0.999924
.	O	O:0.999692
	
which	O	O:0.999977
simply	O	O:0.999980
sorts	O	O:0.999988
the	O	O:0.999984
terms	O	O:0.999949
and	O	O:0.999998
then	O	O:0.999930
takes	O	O:0.999996
the	O	O:0.999996
ones	O	O:0.980183
which	O	O:0.999989
aren't	O	O:0.999997
equal	O	O:0.996390
to	O	O:0.999996
the	O	O:0.999999
previous	O	O:0.999931
one	O	O:0.999987
.	O	O:0.999851
	
4	O	O:0.997103
:	O	O:0.999783
I	O	O:0.999745
am	O	O:0.999995
not	O	O:0.999985
sure	O	O:0.999995
about	O	O:0.999991
the	O	O:0.999991
indices	O	O:0.985476
,	O	O:0.999998
by	O	O:0.999988
writing	O	O:0.999970
couple	O	O:0.999914
of	O	O:0.999988
code	O	O:0.999944
lines	O	O:0.994565
I	O	O:0.999974
just	O	O:0.999998
able	O	O:0.999994
to	O	O:0.999999
get	O	O:0.999953
cluster	O	O:0.999982
indices	O	O:0.999166
based	O	O:0.999986
on	O	O:0.999970
fclusterdata	O	O:0.994039
.	O	O:0.999905
	
Matlab	O	O:0.998360
gives	O	O:0.999919
me	O	O:0.999969
a	O	O:0.999981
norm	O	B-API:0.641546
=	O	O:0.999901
2	O	O:0.999617
for	O	O:0.999994
your	O	O:0.999848
matrix	O	O:0.972623
.	O	O:0.999754
	
I	O	O:0.999718
first	O	O:0.997652
generated	O	O:0.999923
a	O	O:0.999983
labelled	O	O:0.999573
array	O	O:0.999449
of	O	O:0.999996
unique	O	O:0.967018
IDs	O	O:0.999953
for	O	O:0.999993
each	O	O:0.999949
discrete	O	O:0.999654
region	O	O:0.999941
,	O	O:0.999995
calculated	O	O:0.999933
sizes	O	O:0.999958
for	O	O:0.999997
each	O	O:0.999857
ID	O	O:0.999582
,	O	O:0.999982
masked	O	O:0.987911
the	O	O:0.999982
size	O	O:0.992898
array	O	O:0.999221
to	O	O:0.999992
focus	O	O:0.999998
only	O	O:0.999996
on	O	O:0.999996
size	O	O:0.990272
==	O	O:0.999977
1	O	O:0.999891
blobs	O	O:0.999911
,	O	O:0.999990
then	O	O:0.999992
index	O	O:0.999955
the	O	O:0.999998
original	O	O:0.999952
array	O	O:0.998817
and	O	O:0.999999
set	O	O:0.998253
IDs	O	O:0.999568
with	O	O:0.999997
a	O	O:0.999977
size	O	O:0.961428
==	O	O:0.999933
1	O	O:0.999872
to	O	O:0.999721
0	O	O:0.999598
:	O	O:0.999944
#CODE	O	O:0.999551
	
absolute	B-API	O:0.523373
(	O	O:0.999950
a	O	O:0.999983
-	O	O:0.999911
b	O	O:0.999869
)	O	O:0.999960
=	O	O:0.990145
(	O	O:0.999944
atol	O	O:0.999585
+	O	O:0.999884
rtol	O	O:0.999279
*	O	O:0.999957
absolute	B-API	O:0.761512
(	O	O:0.999962
b	O	O:0.999891
))	O	O:0.999200
	
Then	O	O:0.999904
I	O	O:0.999966
reshape	O	O:0.976948
this	O	O:0.999922
to	O	O:0.999985
form	O	O:1.000000
a	O	O:0.999991
2D	O	O:0.999584
numpy	O	O:0.999883
array	O	O:0.968465
.	O	O:0.999664
	
n=5	O	O:0.989776
(	O	O:0.999980
min	O	O:0.925698
length	O	O:0.999951
of	O	O:0.999985
sequence	O	O:0.999989
)	O	O:0.999985
	
I	O	O:0.999806
have	O	O:0.999983
written	O	O:0.999964
a	O	O:0.999966
function	O	O:0.983196
which	O	O:0.999972
contains	O	O:0.996387
nested	O	O:0.999583
loops	O	O:0.999463
and	O	O:0.999993
a	O	O:0.999988
conditional	O	O:0.956285
statement	O	O:0.999974
;	O	O:0.999984
the	O	O:0.999985
purpose	O	O:0.999982
of	O	O:0.999995
the	O	O:0.999953
loop	O	O:0.999971
is	O	O:0.999988
to	O	O:0.999986
return	O	O:0.999996
a	O	O:0.999978
list	O	O:0.998819
of	O	O:0.999998
indices	O	O:0.976301
for	O	O:0.999999
the	O	O:0.999996
nearest	O	O:0.999895
elements	O	O:0.999954
in	O	O:0.999985
array	O	O:0.998734
x	O	O:0.999976
when	O	O:0.999989
compared	O	O:0.999954
to	O	O:0.999997
array	O	O:0.999048
y	O	O:0.999828
.	O	O:0.999828
	
I	O	O:0.999819
also	O	O:0.999997
want	O	O:0.999994
to	O	O:0.999966
color	O	O:0.999999
the	O	O:0.999989
1D	O	O:0.999863
histogram	O	O:0.999201
bars	O	O:0.999984
according	O	O:0.999968
to	O	O:0.999992
the	O	O:0.999999
same	O	O:0.999945
normalization	O	O:0.999905
.	O	O:0.999885
	
If	O	O:0.999872
you	O	O:0.999981
are	O	O:0.999995
calling	O	O:0.999990
it	O	O:0.999964
with	O	O:0.999997
an	O	O:0.999994
empty	O	O:0.991669
matrix	O	O:0.992641
for	O	O:0.999959
[	O	O:0.999942
low	O	O:0.999828
,	O	O:0.999958
high	O	O:0.999599
]	O	O:0.999974
it	O	O:0.999928
will	O	O:0.999999
just	O	O:0.999998
use	O	O:0.999040
whatever	O	O:0.999945
the	O	O:0.999975
max	O	O:0.695325
and	O	O:0.999999
min	O	O:0.983730
values	O	O:0.948502
in	O	O:0.999993
the	O	O:0.999988
array	O	O:0.987144
are	O	O:0.999979
.	O	O:0.999901
	
Creating	O	O:0.999830
a	O	O:0.999882
class	O	O:0.999963
deriving	O	O:0.999973
from	O	O:0.999786
`	O	O:0.999941
ndarray	B-API	B-API:0.994386
`	O	O:0.999915
and	O	O:0.999969
overriding	O	O:0.999984
indexing	O	O:0.999933
such	O	O:0.999993
that	O	O:0.999994
the	O	O:0.999996
absolute	O	O:0.974408
indices	O	O:0.985864
are	O	O:0.999982
used	O	O:0.999969
.	O	O:0.999709
	
One	O	O:0.999913
solution	O	O:0.999666
is	O	O:0.999989
to	O	O:0.999985
sort	O	O:0.999484
both	O	O:0.999978
arrays	O	O:0.999037
(	O	O:0.999979
adding	O	O:0.999839
an	O	O:0.999935
index	O	O:0.999721
column	O	O:0.999998
so	O	O:0.999997
that	O	O:0.999996
the	O	O:0.999999
sorted	O	O:0.999968
arrays	O	O:0.999987
still	O	O:0.999956
contains	O	O:0.997455
the	O	O:0.999999
original	O	O:0.999974
indices	O	O:0.991103
)	O	O:0.999963
.	O	O:0.999757
	
Use	O	O:0.999319
`	O	O:0.999859
reshape	B-API	B-API:0.996661
`	O	O:0.999706
:	O	O:0.999783
#CODE	O	O:0.999809
	
What's	O	O:0.999778
wrong	O	O:0.999895
with	O	O:0.999992
the	O	O:0.999997
normal	O	O:0.973216
div	O	B-API:0.554033
/	O	O:0.999987
mod	O	O:0.964329
operations	O	O:0.999759
?	O	O:0.999688
	
You	O	O:0.999924
can	O	O:0.999986
use	O	O:0.999597
`	O	O:0.999726
argmin	B-API	B-API:0.987372
`	O	O:0.999991
to	O	O:0.999930
find	O	O:0.999935
the	O	O:0.999998
False	O	O:0.999957
values	O	O:0.994392
,	O	O:0.999947
and	O	O:0.999999
this	O	O:0.999977
will	O	O:0.999980
be	O	O:0.999995
faster	O	O:0.999964
and	O	O:0.999996
take	O	O:0.998157
less	O	O:0.965541
memory	O	O:0.999986
than	O	O:0.999978
using	O	O:0.999973
nonzero	B-API	O:0.549636
,	O	O:0.999794
but	O	O:0.999989
this	O	O:0.999827
is	O	O:0.999997
linear	O	O:0.998373
in	O	O:0.999993
the	O	O:0.999986
length	O	O:0.999979
of	O	O:0.999941
`	O	O:0.999997
a	O	O:0.999696
`	O	O:0.999902
.	O	O:0.999481
	
I'd	O	O:0.999809
like	O	O:0.999996
it	O	O:0.999998
to	O	O:0.999998
be	O	O:1.000000
like	O	O:0.999998
8x10^8	O	O:0.999428
or	O	O:0.999993
.8x10	O	O:0.998825
^9	O	O:0.999677
to	O	O:0.999989
save	O	O:0.997605
space	O	O:0.999016
instead	O	O:0.999998
of	O	O:0.999999
putting	O	O:0.999888
all	O	O:0.999287
those	O	O:0.999957
zeros	O	O:0.971874
.	O	O:0.999744
	
The	O	O:0.999960
one	O	O:0.999945
I	O	O:0.999965
pointed	O	O:0.999992
out	O	O:0.999806
in	O	O:0.999999
a	O	O:0.999990
comment	O	O:0.999743
to	O	O:0.999996
other	O	O:0.999997
answer	O	O:0.999985
as	O	O:0.999991
to	O	O:0.999970
encode	O	O:0.998377
the	O	O:0.999998
binary	O	O:0.999947
representation	O	O:0.999987
of	O	O:0.999993
the	O	O:0.999989
array	O	O:0.999258
as	O	O:0.999998
a	O	O:0.999987
Base64	O	O:0.999791
text	O	O:0.981480
block	O	O:0.999927
.	O	O:0.999731
	
due	O	O:0.999846
to	O	O:0.999969
broadcasting	O	O:0.999994
,	O	O:0.999992
you	O	O:0.999989
don't	O	O:0.999997
need	O	O:0.999999
to	O	O:1.000000
repeat	O	O:0.997691
duplicate	O	O:0.999993
indices	O	O:0.995460
,	O	O:0.999977
thus	O	O:0.999634
:	O	O:0.999983
#CODE	O	O:0.999799
	
Maybe	O	O:0.999759
`	O	O:0.999954
flatten()	B-API	B-API:0.997404
`	O	O:0.999990
the	O	O:0.999986
original	O	O:0.999972
array	O	O:0.999469
,	O	O:0.999998
then	O	O:0.999994
use	O	O:0.999873
your	O	O:0.999970
1D	O	O:0.999679
solution	O	O:0.999951
,	O	O:0.999991
finally	O	O:0.999929
calculate	O	O:0.999967
the	O	O:0.999996
real	O	O:0.994370
nD	O	O:0.999980
indices	O	O:0.975887
using	O	O:0.999994
the	O	O:0.999993
original	O	O:0.999609
shape	O	O:0.990547
?	O	O:0.999760
	
Note	O	O:0.999798
that	O	O:0.999987
the	O	O:0.999987
diagonal	O	O:0.961965
is	O	O:0.999996
always	O	O:0.999977
zero	O	O:0.999980
since	O	O:0.999914
`	O	O:0.999935
mahalanobis	O	O:0.999447
(	O	O:0.999986
x	O	O:0.999849
,	O	O:0.999984
x	O	O:0.999965
)`	O	O:0.999953
equals	O	O:0.991409
zero	O	O:0.999922
for	O	O:0.999945
	
possible	O	O:0.999917
duplicate	O	O:0.999990
of	O	O:0.999932
[	O	O:0.999857
NumPy	O	O:0.999979
min	B-API	B-API:0.750872
/	O	O:0.999897
max	B-API	O:0.643089
in-place	O	O:0.999864
assignment	O	O:0.999914
]	O	O:0.999074
(	O	O:0.999887
#URL	O	O:0.998919
)	O	O:0.999871
	
Once	O	O:0.999905
the	O	O:0.999994
tree	O	O:0.999978
structure	O	O:0.999979
has	O	O:0.999987
been	O	O:0.999975
built	O	O:0.999934
,	O	O:0.999996
go	O	O:0.999986
back	O	O:0.996869
and	O	O:0.999999
collect	O	O:0.999880
all	O	O:0.997761
the	O	O:0.999990
branches	O	O:0.999764
and	O	O:0.999997
leaves	O	O:0.999967
into	O	O:0.999859
the	O	O:0.999955
array	O	O:0.989314
structure	O	O:0.999982
and	O	O:0.999999
by	O	O:0.999976
definition	O	O:0.999913
,	O	O:0.999987
they	O	O:0.999979
will	O	O:0.999995
be	O	O:0.999996
unique	O	O:0.983387
.	O	O:0.999170
	
I	O	O:0.999467
wrote	O	O:0.999947
the	O	O:0.999973
following	O	O:0.999828
code	O	O:0.999971
but	O	O:0.999996
the	O	O:0.999989
output	O	O:0.999958
only	O	O:0.999987
contains	O	O:0.998479
the	O	O:0.999991
ids	O	O:0.821933
(	O	O:0.999997
single	O	O:0.999989
column	O	O:0.999986
)	O	O:0.999975
.	O	O:0.999687
	
Maximum	O	O:0.996432
is	O	O:0.999979
always	O	O:0.999985
bigger	O	O:0.999870
than	O	O:0.999951
the	O	O:0.999942
minimum	O	O:0.873559
(	O	O:0.999994
more	O	O:0.999930
to	O	O:0.999986
the	O	O:0.999999
right	O	O:0.999984
on	O	O:0.999999
a	O	O:0.999995
1d	O	O:0.999729
axis	O	O:0.986121
,	O	O:0.999992
not	O	O:0.999998
by	O	O:0.999996
absolute	O	O:0.988826
value	O	O:0.999972
)	O	O:0.999975
.	O	O:0.999563
	
Note	O	O:0.999850
that	O	O:0.999851
`	O	O:0.999987
unq_count	O	O:0.962040
`	O	O:0.999987
doesn't	O	O:0.999886
count	O	O:0.999598
the	O	O:1.000000
occurrences	O	O:0.999975
of	O	O:0.999997
the	O	O:0.999996
last	O	O:0.999483
unique	O	O:0.986400
item	O	O:0.991872
,	O	O:0.999991
because	O	O:0.999992
that	O	O:0.999793
is	O	O:0.999998
not	O	O:0.999998
needed	O	O:0.999997
to	O	O:0.999996
split	O	O:0.991616
the	O	O:0.999991
index	O	O:0.997873
array	O	O:0.998400
.	O	O:0.999899
	
If	O	O:0.999921
yes	O	O:0.999919
,	O	O:0.999997
you	O	O:0.999997
can	O	O:0.999993
use	O	O:0.999892
the	O	O:0.999989
Linux	O	O:0.999520
terminal	O	O:0.999983
to	O	O:0.999997
strip	O	O:0.999185
quotes	O	O:0.999965
from	O	O:0.999997
the	O	O:0.999998
ends	O	O:0.999973
of	O	O:0.999999
the	O	O:0.999999
rows	O	O:0.999980
quickly	O	O:0.999930
.	O	O:0.999930
	
The	O	O:0.999777
append	B-API	B-API:0.959857
method	O	O:0.999969
for	O	O:0.999998
a	O	O:0.999980
numpy	O	O:0.999627
array	O	O:0.992693
returns	O	O:0.999981
a	O	O:0.999997
copy	O	O:0.858810
of	O	O:0.999996
the	O	O:0.999916
array	O	O:0.999485
with	O	O:0.999999
new	O	O:0.999995
items	O	O:0.999995
added	O	O:0.999921
to	O	O:0.999997
the	O	O:0.999999
end	O	O:0.999921
.	O	O:0.999883
	
I	O	O:0.999897
want	O	O:0.999995
to	O	O:0.999964
get	O	O:0.999955
the	O	O:0.999998
norm	B-API	O:0.902142
of	O	O:0.999998
this	O	O:0.999976
array	O	O:0.999721
using	O	O:0.999973
numpy	O	O:0.999694
.	O	O:0.998427
	
The	O	O:0.999965
only	O	O:0.999967
problem	O	O:0.999985
here	O	O:0.999710
is	O	O:0.999992
that	O	O:0.999968
I	O	O:0.999890
think	O	O:0.999997
it	O	O:0.999958
will	O	O:0.999999
append	O	O:0.956015
directly	O	O:0.999971
to	O	O:0.999995
the	O	O:0.999999
column	O	O:0.999989
,	O	O:0.999999
when	O	O:0.999987
I	O	O:0.999897
would	O	O:0.999998
prefer	O	O:0.999991
it	O	O:0.999999
to	O	O:0.999999
append	O	O:0.967201
to	O	O:0.999997
a	O	O:1.000000
new	O	O:0.999813
column	O	O:0.999985
.	O	O:0.999796
	
You	O	O:0.999833
don't	O	O:0.999987
need	O	O:0.999997
to	O	O:0.999994
import	O	O:0.999979
string	O	O:0.999927
,	O	O:0.999970
and	O	O:0.999997
you	O	O:0.999987
don't	O	O:0.999988
need	O	O:0.999997
to	O	O:0.999998
loop	O	O:1.000000
through	O	O:0.999930
all	O	O:0.998798
the	O	O:0.999990
lines	O	O:0.981505
and	O	O:0.999999
append	O	O:0.954678
text	O	O:0.976825
or	O	O:0.999991
count	O	O:0.996873
the	O	O:0.999994
characters	O	O:0.999835
.	O	O:0.999891
	
The	O	O:0.999969
transpose	O	O:0.977304
of	O	O:0.999996
the	O	O:0.999992
transpose	O	O:0.997482
of	O	O:0.999999
a	O	O:0.999973
matrix	O	O:0.975385
==	O	O:0.999966
that	O	O:0.999957
matrix	O	O:0.997627
,	O	O:0.999994
or	O	O:0.999987
,	O	O:0.999944
[	O	O:0.999989
A^T	O	O:0.999828
]	O	O:0.999581
^T	O	O:0.998486
==	O	O:0.999759
A	O	O:0.999731
.	O	O:0.997605
	
Currently	O	O:0.999665
I	O	O:0.999891
am	O	O:0.999992
looping	O	O:0.999595
through	O	O:0.999941
the	O	O:0.999944
arrays	O	O:0.999881
and	O	O:0.999999
using	O	O:0.999980
numpy.dstack	B-API	B-API:0.983651
to	O	O:0.999902
stack	O	O:0.995979
the	O	O:0.999996
1000	O	O:0.999829
arrays	O	O:0.999973
into	O	O:0.999992
a	O	O:0.999987
rather	O	O:0.999819
large	O	O:0.999950
3d	O	O:0.996763
array	O	O:0.985404
...	O	O:0.999599
and	O	O:0.999998
then	O	O:0.999998
will	O	O:0.999996
calculate	O	O:0.999989
the	O	O:0.999999
mean	O	O:0.994915
across	O	O:0.999954
the	O	O:0.999973
3rd	O	O:0.999249
(	O	O:0.999978
?	O	O:0.999971
)	O	O:0.999931
dimension	O	O:0.999953
.	O	O:0.999752
	
If	O	O:0.999912
you	O	O:0.999986
strip	O	O:0.989571
all	O	O:0.999077
these	O	O:0.999990
out	O	O:0.999898
and	O	O:0.999999
just	O	O:0.999992
call	O	O:0.999879
lapack	O	O:0.998275
in	O	O:0.999995
your	O	O:0.999988
for	O	O:0.999973
loop	O	O:0.999589
(	O	O:0.999966
since	O	O:0.999975
you	O	O:0.999957
already	O	O:0.999998
know	O	O:0.999998
the	O	O:0.999998
dimensions	O	O:0.999944
of	O	O:0.999997
your	O	O:0.999962
matrix	O	O:0.998336
and	O	O:0.999998
maybe	O	O:0.999992
know	O	O:0.999961
that	O	O:0.999958
it's	O	O:0.999940
real	O	O:0.931679
,	O	O:0.999980
not	O	O:0.999972
complex	O	O:0.999806
)	O	O:0.999993
,	O	O:0.999981
things	O	O:0.999927
run	O	O:0.999934
MUCH	O	O:0.999924
faster	O	O:0.999247
(	O	O:0.999954
Note	O	O:0.999932
that	O	O:0.999956
I've	O	O:0.999794
made	O	O:0.999971
my	O	O:0.999920
array	O	O:0.997446
larger	O	O:0.999024
)	O	O:0.999790
:	O	O:0.999785
#CODE	O	O:0.999595
	
First	O	O:0.999827
,	O	O:0.999987
you	O	O:0.999990
have	O	O:0.999998
a	O	O:0.999999
binomial	O	B-API:0.511058
response	O	O:0.999727
:	O	O:0.999959
having	O	O:0.999705
or	O	O:0.999982
not	O	O:0.999970
having	O	O:0.999992
a	O	O:0.999994
particular	O	O:0.999417
behavior	O	O:0.999932
.	O	O:0.999625
	
The	O	O:0.999896
call	O	O:0.999338
to	O	O:0.999940
`	O	O:0.999990
np.sqrt	B-API	B-API:0.996071
`	O	O:0.999978
,	O	O:0.999949
which	O	O:0.999936
is	O	O:0.999990
a	O	O:0.999987
Python	O	O:0.998064
function	O	O:0.998836
call	O	O:0.999588
,	O	O:0.999944
is	O	O:0.999969
killing	O	O:0.999951
your	O	O:0.999974
performance	O	O:0.999943
You	O	O:0.999971
are	O	O:0.999989
computing	O	O:0.999974
the	O	O:0.999986
square	O	O:0.958185
root	O	O:0.999990
of	O	O:0.999983
scalar	O	O:0.999987
floating	O	O:0.999989
point	O	O:0.999988
value	O	O:0.999976
,	O	O:0.999996
so	O	O:0.999993
you	O	O:0.999993
should	O	O:0.999993
use	O	O:0.999664
the	O	O:0.999969
`	O	O:0.999895
sqrt	B-API	B-API:0.759879
`	O	O:0.999964
function	O	O:0.993120
from	O	O:0.999997
the	O	O:0.999988
C	O	O:0.999844
math	O	O:0.991519
library	O	O:0.983837
.	O	O:0.999774
	
This	O	O:0.999887
would	O	O:0.999947
call	O	O:0.999970
the	O	O:0.999965
function	O	O:0.992183
`	O	O:0.999967
np.loadtxt	B-API	B-API:0.994795
`	O	O:0.999988
which	O	O:0.999822
would	O	O:0.999996
load	O	O:0.997239
the	O	O:0.999997
file	O	O:0.999752
`	O	O:0.999994
GPBUSD1d.txt	O	O:0.994263
'`	O	O:0.999938
and	O	O:0.999970
transpose	O	O:0.890381
(	O	O:0.999953
"	O	O:0.999983
unpack	O	O:0.963782
")	O	O:0.999891
it	O	O:0.999859
.	O	O:0.999655
	
You	O	O:0.999888
can't	O	O:0.999984
change	O	O:0.999982
the	O	O:0.999997
typing	O	O:0.999882
of	O	O:0.999992
the	O	O:0.999979
array	O	O:0.995965
in-place	O	O:0.999821
(	O	O:0.999978
unless	O	O:0.999955
I'm	O	O:0.999892
grossly	O	O:0.999952
mistaken	O	O:0.999946
)	O	O:0.999910
,	O	O:0.999967
but	O	O:0.999992
you	O	O:0.999972
can	O	O:0.999995
floor	B-API	O:0.967732
.	O	O:0.999875
	
Finally	O	O:0.999474
I	O	O:0.999961
just	O	O:0.999990
transpose	O	O:0.986078
the	O	O:0.999995
dataframe	O	O:0.998720
to	O	O:0.999999
get	O	O:0.999928
ids	O	O:0.999371
as	O	O:0.999998
rows	O	O:0.999972
and	O	O:0.999998
categories	O	O:0.998927
as	O	O:0.999949
columns	O	O:0.999930
.	O	O:0.999789
	
The	O	O:0.999920
following	O	O:0.999928
way	O	O:0.999993
of	O	O:0.999985
obtaining	O	O:0.999971
the	O	O:0.999998
unique	O	O:0.986747
elements	O	O:0.999974
in	O	O:0.999996
all	O	O:0.998979
sub-arrays	O	O:0.999341
is	O	O:0.999976
very	O	O:0.999609
fast	O	O:0.999485
:	O	O:0.999918
#CODE	O	O:0.999465
	
You	O	O:0.999911
can't	O	O:0.999913
use	O	O:0.998661
the	O	O:0.999982
numpy	O	O:0.999898
reshape	B-API	B-API:0.502428
for	O	O:0.999993
a	O	O:0.999990
simple	O	O:0.991759
reason	O	O:0.999870
:	O	O:0.999973
you	O	O:0.999998
have	O	O:0.999999
data	O	O:0.999934
duplicity	O	O:0.999961
in	O	O:0.999999
your	O	O:0.999995
original	O	O:0.999848
array	O	O:0.984216
(	O	O:0.999935
time	O	O:0.998391
and	O	O:0.999995
positions	O	O:0.999953
)	O	O:0.999821
and	O	O:0.999997
not	O	O:0.999980
in	O	O:0.999998
the	O	O:0.999991
result	O	O:0.999992
you	O	O:0.999995
want	O	O:0.999985
.	O	O:0.999916
	
So	O	O:0.999915
it	O	O:0.999851
does	O	O:0.999981
not	O	O:0.999994
make	O	O:0.999997
much	O	O:0.999970
sense	O	O:0.999977
to	O	O:0.999988
me	O	O:0.999994
to	O	O:0.999990
reshape	O	O:0.994177
it	O	O:0.999982
to	O	O:0.999999
a	O	O:0.999998
"	O	O:0.999915
1d-matrix	O	O:0.997136
"	O	O:0.999858
.	O	O:0.998835
	
Now	O	O:0.999899
create	O	O:0.999990
5-bit	O	O:0.999933
bitstrings	O	O:0.999979
from	O	O:0.999990
each	O	O:0.999914
integer	O	O:0.999516
and	O	O:0.999997
join	O	O:0.966335
them	O	O:0.999731
together	O	O:0.998890
:	O	O:0.999947
#CODE	O	O:0.999537
	
It	O	O:0.999709
would	O	O:0.999980
probably	O	O:0.999994
be	O	O:0.999999
just	O	O:0.999997
as	O	O:0.999993
much	O	O:0.999946
work	O	O:0.999993
to	O	O:0.999994
translate	O	O:0.999852
the	O	O:0.999993
top	O	O:0.999946
Matlab	O	O:0.999654
routine	O	O:0.999973
from	O	O:0.999983
Maurits	O	O:0.998734
.	O	O:0.999756
	
In	O	O:0.999945
the	O	O:0.999994
particular	O	O:0.999985
case	O	O:0.999997
of	O	O:0.999998
your	O	O:0.999966
example	O	O:0.999973
,	O	O:0.999995
where	O	O:0.999665
your	O	O:0.999997
unique	O	O:0.981133
values	O	O:0.994845
are	O	O:0.999997
sequential	O	O:0.999958
integers	O	O:0.999736
,	O	O:0.999988
you	O	O:0.999996
can	O	O:0.999995
use	O	O:0.999590
`	O	O:0.999974
find_objects	O	O:0.769213
`	O	O:0.999971
directly	O	O:0.999255
.	O	O:0.999899
	
axis=1	O	O:0.999648
refers	O	O:0.999830
to	O	O:0.999987
working	O	O:0.999999
on	O	O:0.999999
rows	O	O:0.999958
in	O	O:0.999999
this	O	O:0.999991
2d	O	O:0.999770
case	O	O:0.999783
(	O	O:0.999951
axis=0	O	O:0.999695
,	O	O:0.999955
in	O	O:0.999987
contrast	O	O:0.999951
,	O	O:0.999981
would	O	O:0.999990
be	O	O:0.999998
getting	O	O:0.999987
you	O	O:0.999974
the	O	O:0.999998
max	B-API	O:0.926455
in	O	O:0.999997
each	O	O:0.999988
column	O	O:0.999985
)	O	O:0.999973
	
There	O	O:0.999528
are	O	O:0.999956
many	O	O:0.999986
other	O	O:0.999756
`	O	O:0.999969
ufunc	O	O:0.836672
`	O	O:0.999960
,	O	O:0.999723
and	O	O:0.999999
other	O	O:0.999991
iteration	O	O:0.999851
modes	O	O:0.999889
-	O	O:0.999961
`	O	O:0.999976
accumulate	B-API	B-API:0.905236
`	O	O:0.999957
,	O	O:0.999746
`	O	O:0.999971
reduceat	B-API	B-API:0.996151
`	O	O:0.999968
.	O	O:0.998985
	
All	O	O:0.999954
diagonal	O	O:0.997037
elements	O	O:0.999954
will	O	O:0.999996
be	O	O:0.999999
of	O	O:0.999999
the	O	O:0.999965
form	O	O:0.999996
`	O	O:0.999992
s_i	O	O:0.996635
**	O	O:0.999987
2	O	O:0.999726
/	O	O:0.999929
s_i	O	O:0.996827
**	O	O:0.999922
2	O	O:0.999121
==	O	O:0.999715
1	O	O:0.997982
`	O	O:0.999898
.	O	O:0.998931
	
@USER	O	O:0.995641
In	O	O:0.999978
the	O	O:0.999987
example	O	O:0.999942
above	O	O:0.999986
,	O	O:0.999997
I	O	O:0.999973
get	O	O:0.998946
the	O	O:0.999988
following	O	O:0.999822
error	O	O:0.999897
:	O	O:0.999967
Non-broadcastable	O	O:0.999957
operand	O	O:0.999927
with	O	O:0.999947
shape	O	O:0.929542
(	O	O:0.999983
100	O	O:0.999580
)	O	O:0.999948
doesn't	O	O:0.999941
match	O	O:0.998532
the	O	O:0.999998
broadcast	B-API	O:0.971920
shape	O	O:0.990977
(	O	O:0.999981
100,100	O	O:0.999755
)	O	O:0.999869
	
is	O	O:0.999964
calculated	O	O:0.999774
such	O	O:0.999995
that	O	O:0.999992
all	O	O:0.991611
but	O	O:0.999996
the	O	O:0.999952
diagonal	O	O:0.991950
#CODE	O	O:0.999637
	
To	O	O:0.999896
compute	O	O:0.999988
the	O	O:0.999997
number	O	O:0.999992
of	O	O:0.999999
unique	O	O:0.995199
elements	O	O:0.999981
in	O	O:0.999995
a	O	O:0.999991
numpy	O	O:0.999848
array	O	O:0.993996
,	O	O:0.999989
you	O	O:0.999997
can	O	O:0.999996
use	O	O:0.999666
`	O	O:0.999980
unique	B-API	B-API:0.651616
(	O	O:0.999976
x	O	O:0.999721
)	O	O:0.999957
.size	O	B-API:0.987219
`	O	O:0.999966
or	O	O:0.999605
`	O	O:0.999965
len	B-API	B-API:0.989675
(	O	O:0.999973
unique	B-API	O:0.721349
(	O	O:0.999951
x	O	O:0.999861
))`	O	O:0.995645
(	O	O:0.999967
see	O	O:0.999943
`	O	O:0.999930
numpy.unique	B-API	B-API:0.996377
`	O	O:0.999945
)	O	O:0.999801
.	O	O:0.999780
	
Or	O	O:0.999839
would	O	O:0.999995
that	O	O:0.999999
basically	O	O:0.999999
require	O	O:0.996057
implementing	O	O:0.999959
the	O	O:0.999966
outer	O	O:0.974793
loop	O	O:0.999960
in	O	O:0.999966
Cython	O	O:0.999333
?	O	O:0.999837
	
For	O	O:0.999969
a	O	O:0.999873
tensor	O	O:0.999965
it	O	O:0.999869
is	O	O:0.999987
not	O	O:0.999990
clear	O	O:0.996388
how	O	O:0.999987
to	O	O:0.999992
define	O	O:0.999999
an	O	O:0.999994
inverse	O	O:0.979065
or	O	O:0.999997
a	O	O:0.999963
transpose	O	O:0.907576
.	O	O:0.999909
	
Second	O	O:0.999721
,	O	O:0.999978
you	O	O:0.999989
are	O	O:0.999997
doing	O	O:0.999994
transpose	B-API	O:0.990042
the	O	O:0.999990
hard	O	O:0.999703
way	O	O:0.999967
.	O	O:0.999801
	
Where	O	O:0.999791
does	O	O:0.999834
log	B-API	O:0.988945
(	O	O:0.999992
b	O	O:0.999904
,	O	O:0.999981
2	O	O:0.999866
)	O	O:0.999992
come	O	O:0.999878
from	O	O:0.999976
?	O	O:0.999792
	
(	O	O:0.999968
The	O	O:0.999995
values	O	O:0.949503
in	O	O:0.999998
the	O	O:0.999998
corners	O	O:0.999955
correspond	O	O:0.999969
to	O	O:0.999997
the	O	O:1.000000
diagonal	O	O:0.996305
elements	O	O:0.999979
.	O	O:0.999935
)	O	O:0.999968
	
I	O	O:0.999851
tried	O	O:0.999956
using	O	O:0.999855
the	O	O:0.999901
scipy.stat	O	O:0.990226
module	O	O:0.999990
by	O	O:0.999976
creating	O	O:0.999975
my	O	O:0.999927
numbers	O	O:0.999711
with	O	O:0.999978
`	O	O:0.999952
np.random.normal	B-API	B-API:0.997181
`	O	O:0.999950
,	O	O:0.999925
since	O	O:0.999998
it	O	O:0.999974
only	O	O:0.999998
takes	O	O:0.999996
data	O	O:0.994231
and	O	O:0.999998
not	O	O:0.999998
stat	O	O:0.999836
values	O	O:0.992586
like	O	O:0.999987
mean	O	O:0.997144
and	O	O:0.999994
std	O	O:0.643639
dev	O	O:0.997498
(	O	O:0.999500
is	O	O:0.999976
there	O	O:0.999982
any	O	O:0.996997
way	O	O:0.999975
to	O	O:0.999974
use	O	O:0.999895
these	O	O:0.999992
values	O	O:0.983030
directly	O	O:0.999895
)	O	O:0.999979
.	O	O:0.999421
	
The	O	O:0.999931
asymptotic	O	O:0.999798
complexity	O	O:0.999992
of	O	O:0.999993
both	O	O:0.999981
of	O	O:0.999996
the	O	O:0.999914
`	O	O:0.999955
matrix_rank	B-API	B-API:0.995472
`	O	O:0.999958
and	O	O:0.999914
`	O	O:0.999978
det	B-API	B-API:0.925557
`	O	O:0.999925
calls	O	O:0.999653
are	O	O:0.999996
therefore	O	O:0.999865
O	O	O:0.999863
(	O	O:0.999979
n^3	O	O:0.999677
)	O	O:0.999950
,	O	O:0.999992
the	O	O:0.999995
complexity	O	O:0.999980
of	O	O:0.999998
LU	O	O:0.994920
decomposition	O	O:0.999935
.	O	O:0.999593
	
I	O	O:0.999659
think	O	O:0.999988
the	O	O:0.999694
np.std()	B-API	B-API:0.999225
is	O	O:0.999988
just	O	O:0.999979
universal	O	O:0.999780
std	B-API	B-API:0.608772
.	O	O:0.998537
	
Golub	O	O:0.994197
and	O	O:0.999985
Van	O	O:0.999696
Loan	O	O:0.999440
also	O	O:0.999955
provide	O	O:0.999988
a	O	O:0.999987
way	O	O:0.999935
of	O	O:0.999990
storing	O	O:0.999951
a	O	O:0.999990
matrix	O	O:0.983490
in	O	O:0.999992
diagonal	O	O:0.998449
dominant	O	O:0.999589
form	O	O:0.999969
.	O	O:0.999672
	
I	O	O:0.999681
see	O	O:0.999990
no	O	O:0.999826
reason	O	O:0.999983
why	O	O:0.999958
`	O	O:0.999980
numpy	O	O:0.999285
`	O	O:0.999969
would	O	O:0.999971
need	O	O:0.999999
to	O	O:0.999998
make	O	O:1.000000
a	O	O:0.999997
copy	O	O:0.769049
for	O	O:0.999999
an	O	O:0.999858
operation	O	O:0.999917
like	O	O:0.999994
this	O	O:0.999995
,	O	O:0.999995
as	O	O:0.999996
long	O	O:0.999966
as	O	O:0.999993
it	O	O:0.999916
does	O	O:0.999989
the	O	O:0.999993
necessary	O	O:0.999989
checks	O	O:0.999987
for	O	O:0.999990
overlaps	O	O:0.998660
(	O	O:0.999984
though	O	O:0.999991
of	O	O:0.999997
course	O	O:0.999997
as	O	O:0.999999
others	O	O:0.999980
have	O	O:0.999990
noted	O	O:0.999960
,	O	O:0.999989
`	O	O:0.999974
resize	B-API	B-API:0.958019
`	O	O:0.999989
may	O	O:0.999995
itself	O	O:0.999998
have	O	O:0.999999
to	O	O:0.999995
allocate	O	O:0.999999
a	O	O:0.999997
new	O	O:0.999985
block	O	O:0.999997
of	O	O:0.999984
memory	O	O:0.999859
)	O	O:0.999989
.	O	O:0.999573
	
I	O	O:0.999854
found	O	O:0.999986
another	O	O:0.999952
stack	O	O:0.977307
question	O	O:0.999985
about	O	O:0.999989
this	O	O:0.999953
here	O	O:0.999569
,	O	O:0.999992
but	O	O:0.999967
I	O	O:0.999488
am	O	O:0.999994
not	O	O:0.999979
entirely	O	O:0.999986
sure	O	O:0.999972
how	O	O:0.999989
it	O	O:0.999963
was	O	O:0.999979
resolved	O	O:0.999913
,	O	O:0.999961
I'm	O	O:0.999765
still	O	O:0.999993
a	O	O:0.999997
little	O	O:0.999276
confused	O	O:0.999861
.	O	O:0.999674
	
Maybe	O	O:0.999581
`	O	O:0.999963
floor	B-API	B-API:0.892203
(	O	O:0.999785
arange	B-API	B-API:0.904465
(	O	O:0.999918
0	O	O:0.999788
,	O	O:0.999967
10	O	O:0.999707
,	O	O:0.999976
0.1	O	O:0.998224
))`	O	O:0.999255
?	O	O:0.999621
	
In	O	O:0.999915
python	O	O:0.999830
,	O	O:0.999986
I	O	O:0.999883
would	O	O:0.999998
like	O	O:0.999998
to	O	O:0.999999
convolve	O	O:0.985643
the	O	O:0.999996
two	O	O:0.999980
matrices	O	O:0.999984
along	O	O:0.999966
the	O	O:0.999988
second	O	O:0.979365
axis	O	O:0.996855
only	O	O:0.999963
.	O	O:0.999941
	
`	O	O:0.999948
view	B-API	B-API:0.603357
`	O	O:0.999969
is	O	O:0.999900
basically	O	O:0.999992
taking	O	O:0.999988
your	O	O:0.999978
two	O	O:0.999983
coordinates	O	O:0.999909
as	O	O:0.999997
a	O	O:0.999997
single	O	O:0.999679
variable	O	O:0.999996
that	O	O:0.999976
can	O	O:0.999998
be	O	O:1.000000
used	O	O:0.999997
to	O	O:0.999972
find	O	O:0.999838
the	O	O:0.999999
unique	O	O:0.943020
coordinates	O	O:0.999903
.	O	O:0.999753
	
Keep	O	O:0.999685
in	O	O:0.999983
mind	O	O:0.999989
that	O	O:0.999986
machine	O	O:0.999980
precision	O	O:0.999988
for	O	O:0.999997
a	O	O:0.999983
32-bit	O	O:0.997704
double	O	O:0.966257
is	O	O:0.999780
~	O	O:0.998007
10^-16	O	O:0.999427
,	O	O:0.999970
which	O	O:0.999965
will	O	O:0.999990
be	O	O:0.999999
an	O	O:0.999997
absolute	O	O:0.970434
limiting	O	O:0.999868
factor	O	O:0.999320
.	O	O:0.999762
	
Also	O	O:0.999838
,	O	O:0.999998
if	O	O:0.999988
there	O	O:0.999929
is	O	O:0.999994
then	O	O:0.999987
I	O	O:0.999984
could	O	O:0.999999
just	O	O:0.999998
append	O	O:0.909845
to	O	O:0.999986
the	O	O:0.999999
b	O	O:0.999864
and	O	O:0.999999
c	O	O:0.999964
arrays	O	O:0.999969
each	O	O:0.999906
time	O	O:0.998676
instead	O	O:0.999998
of	O	O:0.999997
overwriting	O	O:0.999808
and	O	O:0.999998
starting	O	O:0.999998
from	O	O:0.999989
scratch	O	O:0.999974
each	O	O:0.999903
loop	O	O:0.999943
.	O	O:0.999798
	
Use	O	O:0.998735
`	O	O:0.999899
multiprocessing.Process	O	O:0.969456
(	O	O:0.999990
target	O	O:0.999888
=	O	O:0.999835
somefunc	O	O:0.997934
,	O	O:0.999967
args	O	O:0.999485
=	O	O:0.998391
(	O	O:0.999951
sa	O	O:0.999430
,	O	O:0.999943
)`	O	O:0.994639
(	O	O:0.999810
and	O	O:0.999992
`	O	O:0.999984
start	O	O:0.997554
`	O	O:0.999994
,	O	O:0.999979
maybe	O	O:0.999993
`	O	O:0.999996
join	B-API	B-API:0.851403
`)	O	O:0.999996
to	O	O:0.999978
call	O	O:0.999946
`	O	O:0.999973
somefunc	O	O:0.961072
`	O	O:0.999976
in	O	O:0.999985
a	O	O:0.999998
separate	O	O:0.999790
process	O	O:0.982285
,	O	O:0.999987
passing	O	O:0.999973
the	O	O:0.999979
shared	O	O:0.999369
array	O	O:0.997264
.	O	O:0.999671
	
Take	O	O:0.999976
a	O	O:0.999965
look	O	O:0.999978
a	O	O:0.999997
the	O	O:0.999958
concatenate	B-API	B-API:0.953321
function	O	O:0.996053
.	O	O:0.999847
	
Unlike	O	O:0.999192
Joe	O	O:0.999817
Kington's	O	O:0.999923
answer	O	O:0.999815
,	O	O:0.999992
the	O	O:0.999992
benefit	O	O:0.999968
of	O	O:0.999998
this	O	O:0.999881
is	O	O:0.999998
that	O	O:0.999977
you	O	O:0.999991
don't	O	O:0.999998
need	O	O:0.999998
to	O	O:0.999998
know	O	O:1.000000
the	O	O:0.999999
original	O	O:0.999971
shape	O	O:0.999197
of	O	O:0.999997
the	O	O:0.999999
data	O	O:0.999383
in	O	O:0.999999
the	O	O:0.999984
`	O	O:0.999982
.mat	O	B-API:0.962735
`	O	O:0.999986
file	O	O:0.999853
,	O	O:0.999991
i.e.	O	O:0.999973
no	O	O:0.999989
need	O	O:0.999988
to	O	O:0.999996
reshape	O	O:0.990890
upon	O	O:0.999987
reading	O	O:0.999571
in	O	O:0.999960
.	O	O:0.999757
	
but	O	O:0.999852
I	O	O:0.999889
think	O	O:0.999988
,	O	O:0.999935
finding	O	O:0.999957
the	O	O:0.999953
local	O	O:0.999951
max	O	O:0.937017
can	O	O:0.999984
be	O	O:0.999999
simplified	O	O:0.999844
to	O	O:0.999563
:	O	O:0.999988
#CODE	O	O:0.999694
	
@USER	O	O:0.998359
`	O	O:0.999920
swapaxes	B-API	B-API:0.992049
`	O	O:0.999967
seemed	O	O:0.999353
to	O	O:0.999996
be	O	O:0.999998
indistinguishable	O	O:0.999978
from	O	O:0.999943
`	O	O:0.999960
transpose	B-API	O:0.826165
(	O	O:0.999989
0	O	O:0.999885
,	O	O:0.999965
2	O	O:0.999808
,	O	O:0.999971
1	O	O:0.999836
)`	O	O:0.999716
.	O	O:0.999372
	
Do	O	O:0.999664
gradient	B-API	O:0.996192
actually	O	O:0.999977
compute	O	O:0.999911
really	O	O:0.999993
a	O	O:0.999981
gradient	O	O:0.906894
?	O	O:0.999903
	
I	O	O:0.999264
would	O	O:0.999993
suggest	O	O:0.999952
to	O	O:0.999997
first	O	O:0.998902
program	O	O:0.999993
it	O	O:0.999985
with	O	O:0.999976
`	O	O:0.999841
np.nditer	B-API	B-API:0.996491
`	O	O:0.999964
and	O	O:0.999993
then	O	O:0.999997
translate	O	O:0.999409
it	O	O:0.999997
into	O	O:0.999858
C	O	O:0.999611
.	O	O:0.999362
	
As	O	O:0.999937
you	O	O:0.999973
can	O	O:0.999998
see	O	O:1.000000
,	O	O:0.999998
using	O	O:0.999999
the	O	O:0.999976
join	B-API	B-API:0.957081
function	O	O:0.998146
on	O	O:0.999984
the	O	O:0.999983
list	O	O:0.975486
(	O	O:0.999942
`	O	O:0.999995
binary_list	O	O:0.974981
`)	O	O:0.999987
works	O	O:0.999953
properly	O	O:0.999963
,	O	O:0.999998
but	O	O:0.999994
on	O	O:0.999993
the	O	O:0.999997
equivalent	O	O:0.999957
numpy	O	O:0.999970
array	O	O:0.969604
(	O	O:0.999882
`	O	O:0.999995
binary_split_array	O	O:0.967655
`)	O	O:0.999992
it	O	O:0.999501
doesn't	O	O:0.999741
:	O	O:0.999992
we	O	O:0.999997
can	O	O:0.999997
see	O	O:0.999999
the	O	O:0.999996
string	O	O:0.999987
returned	O	O:0.999913
is	O	O:0.999991
only	O	O:0.999989
72	O	O:0.999961
characters	O	O:0.999964
long	O	O:0.999977
instead	O	O:0.999998
of	O	O:0.999969
80	O	O:0.999424
.	O	O:0.999877
	
@USER	O	O:0.999261
.B	O	O:0.990569
.	O	O:0.999958
the	O	O:0.999990
above	O	O:0.999951
question	O	O:0.999959
is	O	O:0.999989
significantly	O	O:0.999933
different	O	O:0.999986
from	O	O:0.999942
mine	O	O:0.999482
;	O	O:0.999994
it	O	O:0.999906
asks	O	O:0.999950
for	O	O:0.999993
both	O	O:0.999800
min	B-API	B-API:0.629819
and	O	O:0.999973
max	B-API	O:0.702764
,	O	O:0.999528
and	O	O:0.999999
it	O	O:0.999952
is	O	O:0.999968
for	O	O:0.999989
2D	O	O:0.999329
matrix	O	O:0.947534
	
This	O	O:0.999958
will	O	O:0.999981
join	O	O:0.940842
the	O	O:0.999997
rows	O	O:0.999965
and	O	O:0.999998
write	O	O:0.999999
them	O	O:0.999768
to	O	O:0.999999
a	O	O:0.999999
new	O	O:0.999468
csv	O	O:0.999470
:	O	O:0.999918
#CODE	O	O:0.999503
	
The	O	O:0.999899
reason	O	O:0.999882
I	O	O:0.999960
have	O	O:0.999981
`	O	O:0.999933
-det	O	O:0.998183
(	O	O:0.999992
mat	O	O:0.993944
)`	O	O:0.999655
in	O	O:0.999977
the	O	O:0.999990
energy	O	O:0.999756
function	O	O:0.996110
is	O	O:0.999985
because	O	O:0.999989
the	O	O:0.999992
simulated	O	O:0.999975
annealing	O	O:0.999903
algorithm	O	O:0.999963
does	O	O:0.999907
minimization	O	O:0.999889
.	O	O:0.999878
	
Also	O	O:0.999506
is	O	O:0.999967
`	O	O:0.999968
x	O	O:0.997318
`	O	O:0.999984
unique	O	O:0.651683
?	O	O:0.999894
	
Pandas	O	O:0.999936
append	B-API	O:0.825117
filtered	O	O:0.999947
row	O	O:0.999997
to	O	O:0.999992
another	O	O:0.999990
DataFrame	O	O:0.998721
	
Again	O	O:0.999631
,	O	O:0.999995
the	O	O:0.999995
code	O	O:0.999874
notes	O	O:0.999997
that	O	O:0.999998
set	O	O:0.999802
of	O	O:0.999998
combinations	O	O:0.998618
is	O	O:0.999995
not	O	O:0.999987
unique	O	O:0.905319
;	O	O:0.999911
but	O	O:0.999923
it	O	O:0.999991
does	O	O:0.999988
have	O	O:0.999999
a	O	O:0.999998
unique	O	O:0.970549
subset	O	O:0.999956
,	O	O:0.999987
namely	O	O:0.999957
[[	O	O:0.999963
2	O	O:0.999846
3	O	O:0.999770
]	O	O:0.999885
,	O	O:0.999919
[	O	O:0.999934
0	O	O:0.999843
1	O	O:0.999607
]]	O	O:0.999918
,	O	O:0.999972
which	O	O:0.999992
as	O	O:0.999989
you	O	O:0.999997
just	O	O:0.999996
revealed	O	O:0.999983
,	O	O:0.999991
you	O	O:0.999996
do	O	O:0.999980
consider	O	O:0.999997
a	O	O:0.999990
valid	O	O:0.843878
combination	O	O:0.999970
.	O	O:0.999655
	
That	O	O:0.999987
concatenate	B-API	O:0.705608
action	O	O:0.999941
should	O	O:0.999988
be	O	O:0.999997
pretty	O	O:0.999943
fast	O	O:0.999678
.	O	O:0.999655
	
If	O	O:0.999935
you	O	O:0.999994
want	O	O:0.999998
to	O	O:0.999999
pass	O	O:0.999993
in	O	O:0.999992
the	O	O:0.999994
transpose	O	O:0.983017
,	O	O:0.999994
you'll	O	O:0.999989
need	O	O:0.999995
to	O	O:0.999999
set	O	O:0.998877
`	O	O:0.999995
rowvar	O	O:0.951220
`	O	O:0.999994
to	O	O:0.999890
zero	O	O:0.999987
.	O	O:0.999892
	
You	O	O:0.999923
can	O	O:0.999977
override	O	O:0.999999
this	O	O:0.999997
behavior	O	O:0.999997
by	O	O:0.999979
using	O	O:0.999990
the	O	O:0.999933
arguments	O	O:0.997745
`	O	O:0.999974
vmin	O	O:0.894694
`	O	O:0.999979
and	O	O:0.999809
`	O	O:0.999991
vmax	O	O:0.576386
`	O	O:0.999940
(	O	O:0.999795
or	O	O:0.999988
`	O	O:0.999979
norm	O	O:0.644554
`)	O	O:0.999996
of	O	O:0.999958
`	O	O:0.999907
imshow	B-API	B-API:0.995811
`	O	O:0.999956
.	O	O:0.998562
	
@USER	O	O:0.998540
,	O	O:0.999903
`	O	O:0.999982
cs	O	O:0.989883
`	O	O:0.999954
is	O	O:0.999891
sorted	O	O:0.999834
and	O	O:0.999987
`	O	O:0.999917
searchsorted()	B-API	B-API:0.999434
`	O	O:0.999937
exploits	O	O:0.999813
that	O	O:0.999993
to	O	O:0.999989
do	O	O:1.000000
a	O	O:0.999996
binary	O	O:0.998262
search	O	O:0.999949
-	O	O:0.999990
only	O	O:0.999967
`	O	O:0.999981
O	O	O:0.997506
(	O	O:0.999954
log	B-API	O:0.963716
(	O	O:0.999826
len	B-API	B-API:0.940476
(	O	O:0.999970
weights	O	O:0.999982
)))`	O	O:0.999766
comparisons	O	O:0.999890
are	O	O:0.999977
needed	O	O:0.999973
.	O	O:0.999873
	
Think	O	O:0.999486
`	O	O:0.999974
flatten	B-API	B-API:0.925785
`	O	O:0.999974
without	O	O:0.999880
the	O	O:0.999978
copy	O	O:0.721375
.	O	O:0.999887
	
In	O	O:0.999974
your	O	O:0.999932
case	O	O:0.999993
it	O	O:0.999985
looks	O	O:0.999978
like	O	O:0.999998
the	O	O:0.999998
weight	O	O:0.999973
arrays	O	O:0.999980
will	O	O:0.999993
have	O	O:0.999999
the	O	O:0.999999
same	O	O:0.999989
dimension	O	O:0.999991
as	O	O:0.999938
'	O	O:0.999974
A	O	O:0.999925
'	O	O:0.999488
,	O	O:0.999995
so	O	O:0.999995
you	O	O:0.999986
reshape	O	O:0.997288
them	O	O:0.999990
accordingly	O	O:0.999970
and	O	O:0.999999
multiply	O	O:0.959863
dx	O	O:0.999240
and	O	O:0.999997
dy	O	O:0.999967
by	O	O:0.999970
their	O	O:0.999987
individual	O	O:0.999953
weight	O	O:0.999904
vectors	O	O:0.999236
.	O	O:0.999750
	
Does	O	O:0.999925
this	O	O:0.999980
mean	O	O:0.997396
the	O	O:0.999998
standard	O	O:0.999929
error	O	O:0.999981
of	O	O:0.999994
the	O	O:0.999990
gradient	O	O:0.997270
or	O	O:0.999984
intercept	O	O:0.999964
?	O	O:0.999959
	
Also	O	O:0.999802
,	O	O:0.999998
the	O	O:0.999975
algo	O	O:0.999694
has	O	O:0.999997
a	O	O:0.999995
lot	O	O:0.999958
of	O	O:0.999988
matrices	O	O:0.999747
manipulation	O	O:0.999944
(	O	O:0.999980
fft	B-API	O:0.781608
,	O	O:0.999970
filters	O	O:0.999846
,	O	O:0.999977
etc	O	O:0.999994
.	O	O:0.999988
)	O	O:0.999986
,	O	O:0.999997
so	O	O:0.999995
using	O	O:0.999977
numpy	O	O:0.999733
/	O	O:0.999573
scipy	O	O:0.999913
should	O	O:0.999959
result	O	O:0.999994
in	O	O:0.999998
faster	O	O:0.999911
run	O	O:0.999893
time	O	O:0.992684
.	O	O:0.999768
	
You	O	O:0.999927
can	O	O:0.999991
broadcast	O	O:0.999757
that	O	O:0.999997
into	O	O:0.999985
an	O	O:0.999989
array	O	O:0.999423
using	O	O:0.999990
expressions	O	O:0.999677
,	O	O:0.999964
for	O	O:0.999972
example	O	O:0.999590
#CODE	O	O:0.999415
	
If	O	O:0.999924
I	O	O:0.999733
use	O	O:0.998774
the	O	O:0.999859
above	O	O:0.999918
test	O	O:0.995569
on	O	O:0.999998
the	O	O:0.999999
absolute	O	O:0.997456
values	O	O:0.997772
of	O	O:0.999998
the	O	O:0.999996
angles	O	O:0.999938
to	O	O:0.999997
be	O	O:0.999999
tested	O	O:0.999948
,	O	O:0.999984
everything	O	O:0.999932
	
The	O	O:0.999958
returned	O	O:0.999720
gradient	O	O:0.993161
hence	O	O:0.999865
has	O	O:0.999698
	
"	O	O:0.999618
In	O	O:0.999945
the	O	O:0.999988
first	O	O:0.994025
case	O	O:0.999997
the	O	O:0.999988
gradient	O	O:0.946494
is	O	O:0.999987
1	O	O:0.999840
mV	O	O:0.999900
/	O	O:0.999964
ms	O	O:0.999903
,	O	O:0.999959
in	O	O:0.999996
the	O	O:0.999993
second	O	O:0.983309
case	O	O:0.999998
it	O	O:0.999926
is	O	O:0.999983
50	O	O:0.999826
mV	O	O:0.999787
/	O	O:0.999844
ms	O	O:0.999417
.	O	O:0.999564
	
If	O	O:0.999901
True	O	O:0.999716
,	O	O:0.999956
uses	O	O:0.999971
the	O	O:0.999995
old	O	O:0.999915
behavior	O	O:0.999978
from	O	O:0.999976
Numeric	O	O:0.982027
,	O	O:0.999943
(	O	O:0.999924
correlate	B-API	B-API:0.812100
(	O	O:0.999980
a	O	O:0.999994
,	O	O:0.999949
v	O	O:0.999928
)	O	O:0.999978
==	O	O:0.999536
correlate	B-API	B-API:0.679801
(	O	O:0.999911
v	O	O:0.999786
,	O	O:0.999994
a	O	O:0.999982
)	O	O:0.999934
,	O	O:0.999967
and	O	O:0.999998
the	O	O:0.999985
conjugate	O	B-API:0.616042
is	O	O:0.999978
not	O	O:0.999991
taken	O	O:0.999979
for	O	O:0.999997
complex	O	O:0.999448
arrays	O	O:0.999665
)	O	O:0.999911
.	O	O:0.999546
	
Why	O	O:0.999698
don't	O	O:0.999951
you	O	O:0.999998
just	O	O:0.999999
compress	O	O:0.999408
the	O	O:0.999997
files	O	O:0.999956
with	O	O:0.999996
the	O	O:0.999991
built-in	O	O:0.999402
`	O	O:0.999970
gzip	O	O:0.812873
`	O	O:0.999979
module	O	O:0.999485
?	O	O:0.999934
	
So	O	O:0.999949
you	O	O:0.999992
need	O	O:0.999999
to	O	O:0.999996
write	O	O:1.000000
some	O	O:0.999833
function	O	O:0.999813
that	O	O:0.999993
convert	O	O:0.989207
a	O	O:0.999998
poly	O	O:0.532905
parameters	O	O:0.999851
array	O	O:0.995883
to	O	O:0.999996
a	O	O:0.999999
latex	O	O:0.999380
string	O	O:0.999982
,	O	O:0.999986
here	O	O:0.999664
is	O	O:0.999991
an	O	O:0.999857
example	O	O:0.998990
:	O	O:0.999932
#CODE	O	O:0.999590
	
In	O	O:0.999988
your	O	O:0.999973
example	O	O:0.999876
,	O	O:0.999996
the	O	O:0.999996
square	O	O:0.896041
root	O	O:0.999943
is	O	O:0.999996
calculated	O	O:0.999983
by	O	O:0.999976
evaluating	O	O:0.999934
the	O	O:0.999980
the	O	O:0.999961
module	O	O:0.999937
and	O	O:0.999999
the	O	O:0.999997
argument	O	O:0.999970
of	O	O:0.999998
your	O	O:0.999990
complex	O	O:0.999888
number	O	O:0.999870
(	O	O:0.999977
essentially	O	O:0.999992
via	O	O:0.999985
the	O	O:0.999973
log	B-API	O:0.963508
function	O	O:0.999193
,	O	O:0.999988
which	O	O:0.999987
returns	O	O:0.999769
log	B-API	O:0.985766
(	O	O:0.999969
module	O	O:0.999940
)	O	O:0.999951
+	O	O:0.999926
i	O	O:0.999935
phase	O	O:0.999932
)	O	O:0.999666
.	O	O:0.999543
	
I	O	O:0.999617
am	O	O:0.999989
trying	O	O:0.999933
to	O	O:0.999996
run	O	O:0.999987
hstack	B-API	O:0.673904
to	O	O:0.999993
join	O	O:0.988433
a	O	O:0.999996
column	O	O:0.999995
of	O	O:0.999999
integer	O	O:0.999691
values	O	O:0.995242
to	O	O:0.999989
a	O	O:0.999999
list	O	O:0.998396
of	O	O:0.999997
columns	O	O:0.999994
created	O	O:0.999993
by	O	O:0.999994
a	O	O:0.999934
TF-IDF	O	O:0.960673
(	O	O:0.999988
so	O	O:0.999971
I	O	O:0.999910
can	O	O:0.999999
eventually	O	O:0.999983
use	O	O:0.999854
all	O	O:0.990980
of	O	O:0.999992
these	O	O:0.999986
columns	O	O:0.999993
/	O	O:0.999989
features	O	O:0.999557
in	O	O:0.999994
a	O	O:0.999991
classifier	O	O:0.999467
)	O	O:0.999979
.	O	O:0.999569
	
How	O	O:0.999884
to	O	O:0.999981
pass	O	O:0.999994
these	O	O:0.999859
`	O	O:0.999956
norm	O	B-API:0.966689
`	O	O:0.999921
and	O	O:0.999687
`	O	O:0.999994
cmap	O	O:0.869436
`	O	O:0.999994
parameters	O	O:0.997663
in	O	O:0.999996
matplotlib	O	O:0.999959
to	O	O:0.999951
`	O	O:0.999984
plt.show	B-API	B-API:0.992313
`	O	O:0.999979
or	O	O:0.999803
`	O	O:0.999968
imshow()	B-API	B-API:0.999095
`	O	O:0.999955
?	O	O:0.999349
	
Forget	O	O:0.999633
about	O	O:0.999960
the	O	O:0.999961
C	O	O:0.999896
stack	O	O:0.974814
,	O	O:0.999997
numpy	O	O:0.999976
objects	O	O:0.999768
can't	O	O:0.999926
use	O	O:0.997806
it	O	O:0.999905
.	O	O:0.999568
	
You	O	O:0.999951
can	O	O:0.999981
use	O	O:0.999929
the	O	O:0.999993
append	B-API	B-API:0.954441
function	O	O:0.998344
as	O	O:0.999977
he	O	O:0.999570
has	O	O:0.999944
defined	O	O:0.999416
.	O	O:0.999657
	
This	O	O:0.999843
can	O	O:0.999990
be	O	O:0.999999
particularly	O	O:0.999987
tricky	O	O:0.999958
when	O	O:0.999986
trying	O	O:0.999990
to	O	O:0.999999
append	O	O:0.939227
to	O	O:0.999996
a	O	O:0.999999
numpy	O	O:0.999967
array	O	O:0.993839
quickly	O	O:0.999799
.	O	O:0.999862
	
I	O	O:0.999662
have	O	O:0.999998
a	O	O:0.999986
question	O	O:0.999950
regarding	O	O:0.999964
to	O	O:0.999984
the	O	O:0.999994
`	O	O:0.999967
fft	B-API	B-API:0.929716
`	O	O:0.999935
and	O	O:0.999910
`	O	O:0.999978
ifft	B-API	B-API:0.994481
`	O	O:0.999942
functions	O	O:0.999406
.	O	O:0.999848
	
So	O	O:0.999937
for	O	O:0.999990
now	O	O:0.999969
,	O	O:0.999983
I	O	O:0.999982
just	O	O:0.999991
changed	O	O:0.988419
the	O	O:0.999985
max	B-API	B-API:0.640397
(	O	O:0.999979
z	O	O:0.999942
)	O	O:0.999981
to	O	O:0.999998
a	O	O:0.999999
number	O	O:0.999963
that	O	O:0.999992
I	O	O:0.999991
know	O	O:0.999955
is	O	O:0.999949
the	O	O:0.999951
max	B-API	B-API:0.840023
(	O	O:0.999979
1567	O	O:0.999321
)	O	O:0.999951
.	O	O:0.999439
	
The	O	O:0.999764
`	O	O:0.999982
add	B-API	O:0.942108
`	O	O:0.999978
operation	O	O:0.999276
does	O	O:0.999988
not	O	O:0.999989
do	O	O:0.999996
the	O	O:0.999992
same	O	O:0.999967
thing	O	O:0.999993
as	O	O:0.999988
`	O	O:0.999981
join	B-API	B-API:0.994904
`	O	O:0.999941
.	O	O:0.999311
	
You	O	O:0.999815
don't	O	O:0.999989
specify	O	O:0.999916
`	O	O:0.999992
x	O	O:0.997722
`	O	O:0.999988
or	O	O:0.999805
`	O	O:0.999991
y	O	O:0.997847
`	O	O:0.999978
,	O	O:0.999789
and	O	O:1.000000
your	O	O:0.999953
`	O	O:0.999913
mat	O	O:0.603812
[:	O	O:0.999958
,	O	O:0.999940
i+1	O	O:0.999538
]`	O	O:0.999926
indexing	O	O:0.999725
will	O	O:0.999988
not	O	O:0.999997
work	O	O:0.999996
with	O	O:0.999999
a	O	O:0.999994
structured	O	O:0.999378
array	O	O:0.992942
.	O	O:0.999648
	
This	O	O:0.999227
is	O	O:0.999985
because	O	O:0.999956
in	O	O:0.999997
some	O	O:0.999979
cases	O	O:0.999695
it's	O	O:0.999906
not	O	O:0.999990
just	O	O:0.999993
NaNs	O	O:0.999980
and	O	O:0.999994
1s	O	O:0.999910
,	O	O:0.999933
but	O	O:0.999996
other	O	O:0.999959
integers	O	O:0.999849
,	O	O:0.999967
which	O	O:0.999936
gives	O	O:0.999986
a	O	O:0.999986
std	O	B-API:0.799153
>	O	O:0.999664
0	O	O:0.999399
.	O	O:0.999332
	
I	O	O:0.999647
tried	O	O:0.999976
adding	O	O:0.995803
`	O	O:0.999538
/	O	O:0.998892
Library	O	O:0.999849
/	O	O:0.999880
TeX	O	O:0.999106
/	O	O:0.999717
Root	O	O:0.999710
/	O	O:0.999911
bin	O	O:0.999467
/	O	O:0.999981
universal-darwin	O	O:0.999271
`	O	O:0.999947
to	O	O:0.999952
the	O	O:0.999999
Global	O	O:0.999028
Python	O	O:0.999866
Path	O	O:0.994069
of	O	O:0.999985
the	O	O:0.999967
Project	O	O:0.999983
Properties	O	O:0.999721
,	O	O:0.999992
but	O	O:0.999990
I	O	O:0.999961
still	O	O:0.999995
get	O	O:0.998274
the	O	O:0.999998
same	O	O:0.999960
errors	O	O:0.999815
.	O	O:0.999786
	
My	O	O:0.999480
Python	O	O:0.999189
Path	O	O:0.979103
is	O	O:0.999984
correct	O	O:0.999945
C	O	O:0.999669
:\	O	O:0.999963
Python27_32bit\	O	O:0.951789
and	O	O:0.999972
I	O	O:0.999964
also	O	O:0.999985
have	O	O:0.999932
\lib\	O	O:0.999719
site-packages	O	O:0.999669
\	O	O:0.999393
and	O	O:0.999988
\DLL	O	O:0.999871
included	O	O:0.999462
correctly	O	O:0.999938
.	O	O:0.999868
	
Adding	O	O:0.998801
Python	O	O:0.997936
Path	O	O:0.987354
on	O	O:0.999969
Windows	O	O:0.999634
7	O	O:0.999589
	
Append	O	O:0.911092
`	O	O:0.999906
;	O	O:0.999857
C	O	O:0.999405
:\	O	O:0.999991
python27\Scripts	O	O:0.997201
`	O	O:0.999947
to	O	O:0.999971
the	O	O:1.000000
end	O	O:0.999987
of	O	O:0.999976
`	O	O:0.999920
Path	O	O:0.953317
`	O	O:0.999981
variable	O	O:0.999761
	
I	O	O:0.999403
use	O	O:0.998718
a	O	O:0.999623
palette	O	O:0.999688
file	O	O:0.999987
that	O	O:0.999972
I'm	O	O:0.999983
able	O	O:0.999996
to	O	O:0.999999
create	O	O:0.999996
using	O	O:0.999990
GIMP	O	O:0.998555
+	O	O:0.999519
Sample	O	O:0.999862
a	O	O:0.999610
Gradient	O	O:0.999549
Along	O	O:0.999963
a	O	O:0.999500
Path	O	O:0.903362
.	O	O:0.999785
	
Spine	O	O:0.982994
position	O	O:0.999812
is	O	O:0.999990
specified	O	O:0.999976
by	O	O:0.999995
a	O	O:0.999882
2	O	O:0.999503
tuple	O	O:0.999979
of	O	O:0.999929
(	O	O:0.999922
position	O	O:0.999992
type	O	O:0.999602
,	O	O:0.999994
amount	O	O:0.999886
)	O	O:0.999960
.	O	O:0.999694
	
Annotation	O	O:0.971514
along	O	O:0.999960
a	O	O:0.999964
curve	O	O:0.999874
in	O	O:0.999987
matplotlib	O	O:0.999626
	
Heat	O	O:0.997413
Map	O	O:0.955918
Annotation	O	O:0.989934
with	O	O:0.999969
text	O	O:0.927106
	
Annotation	O	O:0.985757
on	O	O:0.999993
top	O	O:0.999975
of	O	O:0.999998
the	O	O:0.999993
bars	O	O:0.999986
show	O	O:0.996534
the	O	O:0.999998
actual	O	O:0.999974
percentage	O	O:0.999983
of	O	O:0.999995
that	O	O:0.999956
category	O	O:0.999910
.	O	O:0.999849
	
Text	O	O:0.785473
File	O	O:0.999743
.	O	O:0.999602
	
I'm	O	O:0.999483
using	O	O:0.999947
Ubuntu	O	O:0.995428
and	O	O:0.999881
Sublime	O	O:0.997857
Text	O	O:0.659278
.	O	O:0.999188
	
Check	O	O:0.999932
this	O	O:0.999701
page	O	O:0.999828
:	O	O:0.999946
Text	O	O:0.983693
Rendering	O	O:0.999818
with	O	O:0.999870
LaTeX	O	O:0.998888
.	O	O:0.999810
	
When	O	O:0.999901
using	O	O:0.999939
Matplotlib	O	O:0.996201
(	O	O:0.999807
Pylab	O	O:0.999579
)	O	O:0.999946
for	O	O:0.999985
rendering	O	O:0.999928
Text	O	O:0.918733
with	O	O:0.999984
the	O	O:0.999994
same	O	O:0.999992
metrics	O	O:0.999922
as	O	O:0.999987
AriaL	O	O:0.997548
(	O	O:0.999941
e.g.	O	O:0.999435
,	O	O:0.999991
Arial	O	O:0.999968
itself	O	O:0.999952
or	O	O:0.999997
Liberation	O	O:0.999805
Sans	O	O:0.999964
)	O	O:0.999883
output	O	O:0.999410
looks	O	O:0.999923
ok	O	O:0.999751
-	O	O:0.999971
e.g.	O	O:0.999610
,	O	O:0.999996
the	O	O:0.999994
width	O	O:0.999980
of	O	O:0.999996
the	O	O:0.999980
legend	O	O:0.997789
box	O	O:0.995217
is	O	O:0.999979
right	O	O:0.999894
.	O	O:0.999838
	
Text	O	O:0.862148
box	O	O:0.996471
with	O	O:0.999977
line	O	O:0.999987
wrapping	O	O:0.999959
in	O	O:0.999960
matplotlib	O	O:0.999584
?	O	O:0.999829
	
Python	O	O:0.997957
/	O	O:0.999716
Matplotlib	O	O:0.999694
-	O	O:0.999831
Quickly	O	O:0.999672
Updating	O	O:0.999949
Text	O	O:0.913709
on	O	O:0.999893
Axes	O	O:0.964380
	
Text	O	O:0.976670
display	O	O:0.999792
problem	O	O:0.999946
with	O	O:0.999979
matplotlib	O	O:0.999423
?	O	O:0.999903
	
Network	O	O:0.999830
from	O	O:0.999969
Table	O	O:0.999730
(	O	O:0.999978
Text	O	O:0.984462
/	O	O:0.999871
MS	O	O:0.999933
Excel	O	O:0.998721
)	O	O:0.999978
..	O	O:0.998669
	
Text	O	O:0.947966
alignment	O	O:0.999904
in	O	O:0.999992
a	O	O:0.999967
Matplotlib	O	O:0.997337
legend	O	O:0.982207
	
Underlining	O	O:0.999545
Text	O	O:0.882756
in	O	O:0.999950
Python	O	O:0.999376
/	O	O:0.999890
Matplotlib	O	O:0.998537
	
(	O	O:0.999926
Text	O	O:0.975024
colour	O	O:0.999971
comes	O	O:0.999981
out	O	O:0.999989
as	O	O:0.999992
black	O	O:0.999478
)	O	O:0.999961
#CODE	O	O:0.997323
	
However	O	O:0.999781
,	O	O:0.999996
when	O	O:0.999985
I	O	O:0.999899
paste	O	O:0.999998
this	O	O:0.999944
code	O	O:0.999982
into	O	O:0.999916
my	O	O:0.999952
Wordpress	O	O:0.999112
page	O	O:0.999940
(	O	O:0.999972
using	O	O:0.999987
the	O	O:0.999889
Text	O	O:0.867932
editor	O	O:0.999923
,	O	O:0.999973
not	O	O:0.999996
the	O	O:0.999997
visual	O	O:0.999237
editor	O	O:0.999965
)	O	O:0.999988
nothing	O	O:0.999227
happens	O	O:0.999818
.	O	O:0.999777
	
This	O	O:0.999498
generates	O	O:0.999951
the	O	O:0.999980
plot	O	O:0.962546
but	O	O:0.999993
the	O	O:0.999973
Legend	O	O:0.995057
B	O	O:0.999779
is	O	O:0.999994
placed	O	O:0.999767
at	O	O:0.998661
the	O	O:0.999984
upper	O	O:0.980975
right	O	O:0.999982
hand	O	O:0.999983
side	O	O:0.999991
corner	O	O:0.999862
and	O	O:0.999959
Legend	O	O:0.998388
A	O	O:0.999775
is	O	O:0.999982
by	O	O:0.999962
default	O	O:0.999973
placed	O	O:0.999815
at	O	O:0.996649
the	O	O:0.999991
left	O	O:0.999952
hand	O	O:0.999980
upper	O	O:0.960198
corner	O	O:0.999884
.	O	O:0.999621
	
Multiple	O	O:0.999862
Pie	O	O:0.999647
Charts	O	O:0.999751
with	O	O:0.999992
a	O	O:0.999982
Shared	O	O:0.997921
Legend	O	O:0.990218
	
You	O	O:0.999908
can	O	O:0.999996
add	O	O:0.999868
a	O	O:0.999993
legend	O	O:0.991494
to	O	O:0.999994
only	O	O:1.000000
the	O	O:0.999998
first	O	O:0.997552
axes	O	O:0.995727
after	O	O:0.999983
plotting	O	O:0.993920
all	O	O:0.995284
of	O	O:0.999997
your	O	O:0.999987
pie	O	O:0.976732
charts	O	O:0.999353
:	O	O:0.999904
#CODE	O	O:0.999635
	
Matplotlib	O	O:0.995000
:	O	O:0.999021
Legend	O	O:0.993914
not	O	O:0.999995
displayed	O	O:0.999972
properly	O	O:0.999957
	
Legend	O	O:0.993184
colors	O	O:0.866605
in	O	O:0.999980
Matplotlib	O	O:0.999981
table	O	O:0.979028
function	O	O:0.996148
?	O	O:0.999904
	
Legend	O	O:0.984708
transparency	O	O:0.999946
,	O	O:0.999997
when	O	O:0.999993
using	O	O:0.999989
secondary	O	O:0.999793
axis	O	O:0.959553
	
Legend	O	O:0.902719
is	O	O:0.999949
outside	O	O:0.999905
the	O	O:0.999962
frame	O	O:0.999973
.	O	O:0.999899
	
Button	O	O:0.888324
1	O	O:0.997821
:	O	O:0.999798
Shows	O	O:0.999963
the	O	O:0.999997
pointscores	O	O:0.999718
of	O	O:0.999982
John	O	O:0.996641
and	O	O:0.999999
Daniel	O	O:0.999712
in	O	O:0.999976
level	O	O:0.999921
1	O	O:0.999852
.	O	O:0.999710
	
How	O	O:0.999922
to	O	O:0.999982
get	O	O:0.999962
multiple	O	O:0.999845
Button	O	O:0.996838
Click	O	O:0.999930
Events	O	O:0.999535
in	O	O:0.999973
Python	O	O:0.999597
	
Button	O	O:0.968382
click	O	O:0.998803
->	O	O:0.999994
ser.write	O	O:0.997778
,	O	O:0.999933
ser.read	O	O:0.953573
,	O	O:0.999978
draw	O	O:0.925764
	
Another	O	O:0.999783
solution	O	O:0.999593
is	O	O:0.999969
print	O	O:0.999951
a	O	O:0.999902
'	O	O:0.996640
Cursor	O	O:0.993026
'	O	O:0.999931
or	O	O:0.999995
marker	O	O:0.999981
line	O	O:0.999984
on	O	O:0.999993
the	O	O:0.999991
plot	O	O:0.981416
,	O	O:0.999993
and	O	O:1.000000
change	O	O:0.999999
its	O	O:0.999984
coordinates	O	O:0.999934
with	O	O:0.999993
the	O	O:0.999992
mouse	O	O:0.999882
events	O	O:0.999589
.	O	O:0.999799
	
An	O	O:0.999754
Arrow	O	O:0.988506
would	O	O:0.999991
appear	O	O:0.999998
with	O	O:1.000000
data	O	O:0.999603
about	O	O:0.999998
the	O	O:0.999996
invisible	O	O:0.999829
line	O	O:0.999994
one	O	O:0.999980
,	O	O:0.999992
but	O	O:0.999989
he	O	O:0.999899
wanted	O	O:0.999980
info	O	O:0.998493
about	O	O:0.999968
line	O	O:0.999942
two	O	O:0.999915
.	O	O:0.999639
	
Arrow	O	O:0.964429
on	O	O:0.999996
a	O	O:0.999989
line	O	O:0.999963
plot	O	O:0.994880
with	O	O:0.999988
matplotlib	O	O:0.999596
	
Drawing	O	O:0.999425
Arrow	O	O:0.936261
in	O	O:0.999848
(	O	O:0.999979
x	O	O:0.999919
,	O	O:0.999984
y	O	O:0.999955
)	O	O:0.999993
coordinate	O	O:0.999890
in	O	O:0.999965
Python	O	O:0.999296
	
To	O	O:0.999940
be	O	O:0.999997
more	O	O:0.999977
specific	O	O:0.999861
,	O	O:0.999991
if	O	O:0.999993
you	O	O:0.999989
look	O	O:0.999990
at	O	O:0.999804
the	O	O:0.999992
answer	O	O:0.999936
to	O	O:0.999997
that	O	O:0.999997
question	O	O:0.999991
it	O	O:0.999985
shows	O	O:0.999983
how	O	O:0.999992
to	O	O:0.999983
make	O	O:1.000000
a	O	O:0.999982
3D	O	O:0.997434
Arrow	O	O:0.990958
and	O	O:0.999985
use	O	O:0.999199
that	O	O:0.999892
to	O	O:0.999994
annotate	O	O:0.994892
points	O	O:0.999697
in	O	O:0.999997
a	O	O:0.999990
3D	O	O:0.998755
plot	O	O:0.979363
--	O	O:0.999966
I	O	O:0.999843
have	O	O:0.999993
used	O	O:0.999960
this	O	O:0.999985
recipe	O	O:0.999969
extensively	O	O:0.999732
and	O	O:0.999998
it	O	O:0.999977
makes	O	O:0.999922
me	O	O:0.999976
wonder	O	O:0.999890
how	O	O:0.999992
it	O	O:0.999971
isn't	O	O:0.999991
built	O	O:0.999986
into	O	O:0.999979
matplotlib	O	O:0.999697
yet	O	O:0.999664
.	O	O:0.999671
	
Node	O	O:0.981652
positions	O	O:0.999893
are	O	O:0.999988
generated	O	O:0.999948
,	O	O:0.999988
stored	O	O:0.999608
and	O	O:0.999997
assigned	O	O:0.999948
like	O	O:0.999974
this	O	O:0.999978
#CODE	O	O:0.999444
	
Node	O	O:0.900109
and	O	O:0.999979
edge	O	O:0.999976
attribute	O	O:0.999972
files	O	O:0.999931
are	O	O:0.999986
simply	O	O:0.999954
formatted	O	O:0.999533
:	O	O:0.999992
a	O	O:0.999983
node	O	O:0.999794
attribute	O	O:0.999996
file	O	O:0.999985
begins	O	O:0.999895
with	O	O:0.999998
the	O	O:0.999990
name	O	O:0.998190
of	O	O:0.999997
the	O	O:0.999984
attribute	O	O:0.999997
on	O	O:0.999996
the	O	O:0.999996
first	O	O:0.996422
line	O	O:0.999874
(	O	O:0.999977
note	O	O:0.999979
that	O	O:0.999989
it	O	O:0.999977
cannot	O	O:0.999997
contain	O	O:0.999987
spaces	O	O:0.999769
)	O	O:0.999967
.	O	O:0.999692
	
Normalize	O	O:0.846135
the	O	O:0.999994
input	O	O:0.999997
data	O	O:0.999026
and	O	O:0.999997
scale	O	O:0.999983
it	O	O:0.999845
	
Normalize	O	O:0.971669
your	O	O:0.999955
data	O	O:0.997272
.	O	O:0.999898
	
Normalize	O	O:0.680020
again	O	O:0.999782
	
Normalize	O	O:0.967692
your	O	O:0.999987
data	O	O:0.999491
,	O	O:0.999993
apply	O	O:0.662554
the	O	O:0.999978
colormap	O	O:0.999925
,	O	O:0.999996
save	O	O:0.992617
the	O	O:0.999969
image	O	O:0.992609
.	O	O:0.999982
matplotlib	O	O:0.999895
provides	O	O:0.999959
all	O	O:0.997843
the	O	O:0.999998
necessary	O	O:0.999860
functionality	O	O:0.999726
:	O	O:0.999951
#CODE	O	O:0.999703
	
Normalize	O	O:0.641224
histogram2d	B-API	B-API:0.775013
by	O	O:0.999982
bin	O	O:0.999706
area	O	O:0.999957
	
Python	O	O:0.997957
/	O	O:0.999716
Matplotlib	O	O:0.999233
-	O	O:0.999954
Figure	O	O:0.975615
Borders	O	O:0.999924
in	O	O:0.999973
wxPython	O	O:0.999649
	
gcf()	B-API	B-API:0.984300
means	O	O:0.999923
Get	O	O:0.999981
Current	O	O:0.999846
Figure	O	O:0.968441
	
Figure	O	O:0.885233
title	O	O:0.990743
with	O	O:0.999996
several	O	O:0.999975
colors	O	O:0.912878
in	O	O:0.999974
matplotlib	O	O:0.999755
	
However	O	O:0.999727
,	O	O:0.999995
the	O	O:0.999996
sample	O	O:0.989530
consists	O	O:0.999997
of	O	O:0.999998
distinct	O	O:0.999820
solutions	O	O:0.999985
which	O	O:0.999994
form	O	O:0.999999
lines	O	O:0.985082
in	O	O:0.999993
the	O	O:0.999992
parameter	O	O:0.999989
space	O	O:0.998865
such	O	O:0.999997
that	O	O:0.999998
putting	O	O:0.999947
everything	O	O:0.999950
into	O	O:0.999963
a	O	O:0.999961
matrix	O	O:0.949585
and	O	O:0.999998
using	O	O:0.999983
`	O	O:0.998757
imshow	B-API	B-API:0.999281
`	O	O:0.999585
is	O	O:0.999818
not	O	O:0.999991
desirable	O	O:0.999993
because	O	O:0.999983
of	O	O:0.999972
the	O	O:0.999999
pixelation	O	O:0.999902
artefacts	O	O:0.999817
(	O	O:0.999969
Figure	O	O:0.987680
1	O	O:0.999532
)	O	O:0.999968
.	O	O:0.999560
	
See	O	O:0.999850
Figure	O	O:0.900927
2	O	O:0.999769
.	O	O:0.999657
	
Labeling	O	O:0.999534
Figure	O	O:0.939403
from	O	O:0.999909
String	O	O:0.999832
List	O	O:0.984451
	
I	O	O:0.999352
was	O	O:0.999982
able	O	O:0.999957
to	O	O:0.999995
maximize	O	O:0.999984
Figure	O	O:0.995403
windows	O	O:0.999903
for	O	O:0.999980
TkAgg	O	O:0.996121
,	O	O:0.999933
QT4Agg	O	O:0.997977
,	O	O:0.999966
and	O	O:0.999997
wxAgg	O	O:0.999838
using	O	O:0.999968
the	O	O:0.999941
following	O	O:0.998331
lines	O	O:0.894953
:	O	O:0.999919
#CODE	O	O:0.999844
	
I	O	O:0.999830
want	O	O:0.999989
to	O	O:0.999905
draw	O	O:0.999623
a	O	O:0.999990
quadratic	O	O:0.992753
Figure	O	O:0.962036
.	O	O:0.999482
	
So	O	O:0.999783
I	O	O:0.999880
guess	O	O:0.999989
I	O	O:0.999805
have	O	O:0.999995
to	O	O:0.999983
built	O	O:0.999999
each	O	O:0.999961
button	O	O:0.999988
separately	O	O:0.999965
,	O	O:0.999988
and	O	O:0.999994
don't	O	O:0.999989
know	O	O:0.999980
how	O	O:0.999995
to	O	O:0.999963
"	O	O:1.000000
order	O	O:0.976390
"	O	O:0.999999
them	O	O:0.999462
in	O	O:0.999990
the	O	O:0.999995
buttons_frame	O	O:0.997323
2	O	O:0.999935
)	O	O:0.999967
I	O	O:0.999786
am	O	O:0.999984
working	O	O:0.999733
within	O	O:0.999994
a	O	O:0.999988
for	O	O:0.999938
loop	O	O:0.999956
,	O	O:0.999993
so	O	O:0.999956
I	O	O:0.999857
can't	O	O:0.999986
use	O	O:0.997836
a	O	O:0.999939
"	O	O:0.999798
main	O	O:0.914232
"	O	O:0.999957
specifically	O	O:0.999524
for	O	O:0.999985
this	O	O:0.999926
.	O	O:0.999921
and	O	O:0.999993
3	O	O:0.999876
)	O	O:0.999970
the	O	O:0.999978
Figure	O	O:0.981872
to	O	O:0.999995
plot	O	O:0.984294
is	O	O:0.999986
already	O	O:0.999988
created	O	O:0.999937
before	O	O:0.999935
entering	O	O:0.999825
the	O	O:0.999575
GUI	O	O:0.999881
.	O	O:0.999829
	
But	O	O:0.999818
I	O	O:0.999862
wonder	O	O:0.999983
if	O	O:0.999956
there	O	O:0.999752
is	O	O:0.999996
a	O	O:0.999991
way	O	O:0.999930
to	O	O:0.999988
do	O	O:0.999999
the	O	O:0.999994
same	O	O:0.999902
link	O	O:0.999866
(	O	O:0.999989
when	O	O:0.999991
zooming	O	O:0.999907
on	O	O:0.999994
figure	O	O:0.976991
1	O	O:0.999976
,	O	O:0.999993
I	O	O:0.999955
get	O	O:0.999161
the	O	O:0.999986
same	O	O:0.999985
zoom	O	O:0.991181
on	O	O:0.999997
figure	O	O:0.991384
2	O	O:0.999975
on	O	O:0.999995
one	O	O:0.999998
particular	O	O:0.999991
axis	O	O:0.997431
)	O	O:0.999996
when	O	O:0.999992
defining	O	O:0.999905
2	O	O:0.999961
different	O	O:0.999839
Figures	O	O:0.998544
(	O	O:0.999923
I	O	O:0.999931
want	O	O:0.999989
those	O	O:0.999836
graph	O	O:0.999995
to	O	O:0.999995
appear	O	O:0.999998
far	O	O:0.999996
from	O	O:0.999997
each	O	O:0.999917
other	O	O:0.999992
so	O	O:0.999982
I	O	O:0.999817
guess	O	O:0.999997
that	O	O:0.999860
I	O	O:0.999935
can't	O	O:0.999997
put	O	O:0.999260
them	O	O:0.999980
in	O	O:0.999998
the	O	O:0.999991
same	O	O:0.999766
Figure	O	O:0.987639
...	O	O:0.999813
)	O	O:0.999939
	
I	O	O:0.999733
removed	O	O:0.999945
the	O	O:0.999959
reference	O	O:0.999968
to	O	O:0.999994
Figure	O	O:0.996491
0	O	O:0.999840
and	O	O:0.999981
had	O	O:0.999988
it	O	O:0.999963
generate	O	O:0.999991
a	O	O:0.999997
new	O	O:0.999898
figure	O	O:0.997451
each	O	O:0.999870
time	O	O:0.993130
.	O	O:0.999833
	
Right	O	O:0.999929
now	O	O:0.999937
,	O	O:0.999997
that	O	O:0.999997
it	O	O:0.999996
the	O	O:0.999998
best	O	O:0.999914
I	O	O:0.999951
can	O	O:0.999997
do	O	O:0.999991
,	O	O:0.999998
see	O	O:0.999937
Figure	O	O:0.943291
.	O	O:0.999869
	
Sounds	O	O:0.999853
like	O	O:0.999985
you	O	O:0.999999
just	O	O:0.999998
want	O	O:0.999999
an	O	O:0.999991
image	O	O:0.996094
in	O	O:0.999993
the	O	O:0.999987
Figure	O	O:0.970868
,	O	O:0.999993
right	O	O:0.999963
?	O	O:0.999946
	
You	O	O:0.999903
should	O	O:0.999988
perhaps	O	O:0.999992
try	O	O:0.999998
some	O	O:0.999960
converter	O	O:0.999026
that	O	O:0.999995
can	O	O:0.999996
produce	O	O:0.999999
DXF	O	O:0.999882
from	O	O:0.999989
EPS	O	O:0.999736
,	O	O:0.999982
PDF	O	O:0.999727
,	O	O:0.999880
SVG	O	O:0.999742
...	O	O:0.999243
	
For	O	O:0.999918
example	O	O:0.999703
see	O	O:0.999991
this	O	O:0.999993
converter	O	O:0.994397
in	O	O:0.999952
java	O	O:0.996456
:	O	O:0.999842
	
You	O	O:0.999843
already	O	O:0.999981
have	O	O:0.999998
one	O	O:0.999999
such	O	O:0.999998
converter	O	O:0.996707
in	O	O:0.999994
your	O	O:0.999920
`	O	O:0.999870
np.loadtxt	B-API	B-API:0.998753
`	O	O:0.999954
method	O	O:0.999831
call	O	O:0.999651
.	O	O:0.999728
	
You	O	O:0.999871
can	O	O:0.999973
achieve	O	O:0.999999
this	O	O:0.999998
by	O	O:0.999983
defining	O	O:0.999990
a	O	O:0.999948
converter	O	O:0.983727
that	O	O:0.999986
converts	O	O:0.999983
sting	O	O:0.999996
representations	O	O:0.999985
of	O	O:0.999991
dates	O	O:0.939418
to	O	O:0.999988
`	O	O:0.999998
datenums	O	O:0.998004
`	O	O:0.999978
.	O	O:0.999370
	
Matplotlib	O	O:0.999729
Plot	O	O:0.999841
Lines	O	O:0.999829
Above	O	O:0.999929
Each	O	O:0.999928
Bar	O	O:0.890428
	
Matplotlib.pyplot	B-API	B-API:0.742963
Bar	O	O:0.848864
Plot	O	O:0.999898
Grouping	O	O:0.999812
Subplots	O	O:0.999603
	
How	O	O:0.999942
to	O	O:0.999988
properly	O	O:1.000000
give	O	O:0.999990
Annotations	O	O:0.999773
to	O	O:0.999981
Pandas	O	O:0.999998
Bar	O	O:0.967619
Charts	O	O:0.999485
?	O	O:0.999788
	
Pandas	O	O:0.999419
,	O	O:0.999950
Bar	O	O:0.941579
Chart	O	O:0.999940
Settings	O	O:0.999783
Customization	O	O:0.999879
	
Two	O	O:0.999620
Bar	O	O:0.929691
Plots-	O	O:0.999722
Non	O	O:0.999902
side	O	O:0.999989
by	O	O:0.999916
side	O	O:0.999869
	
I	O	O:0.999677
have	O	O:0.999996
a	O	O:0.999991
couple	O	O:0.999971
of	O	O:0.999993
problems	O	O:0.999885
with	O	O:0.999997
the	O	O:0.999976
Bar	O	O:0.927194
Chart	O	O:0.999982
that	O	O:0.999973
I'm	O	O:0.999970
trying	O	O:0.999992
to	O	O:0.999999
create	O	O:0.999987
in	O	O:0.999988
python	O	O:0.999923
.	O	O:0.999868
	
I	O	O:0.999656
have	O	O:0.999997
a	O	O:0.999979
simple	O	O:0.999163
graph	O	O:0.999978
with	O	O:0.999996
a	O	O:0.999972
Navigation	O	O:0.998918
Tool	O	O:0.999928
Bar	O	O:0.903739
.	O	O:0.999477
	
Matplotlib	O	O:0.999002
Subplot	O	O:0.999762
Animation	O	O:0.987029
with	O	O:0.999958
Basemap	O	O:0.999036
	
Basic	O	O:0.998150
Animation	O	O:0.946477
with	O	O:0.999959
matplotlib's	O	O:0.999640
pyplot	B-API	O:0.565843
	
How	O	O:0.999774
Can	O	O:0.999898
I	O	O:0.999989
Save	O	O:0.999981
Animation.Artist	O	O:0.983778
animation	O	O:0.990944
?	O	O:0.999829
	
Animation	O	O:0.990400
with	O	O:0.999986
contours	O	O:0.999655
matplotlib	O	O:0.999873
	
I	O	O:0.999640
found	O	O:0.999970
the	O	O:0.999873
solution	O	O:0.999608
(	O	O:0.999998
set	O	O:0.996415
2	O	O:0.999950
)	O	O:0.999993
that	O	O:0.999951
uses	O	O:0.999959
the	O	O:0.999986
mpl	O	O:0.999367
Toolkit	O	O:0.999951
and	O	O:0.999991
AA	O	O:0.999964
to	O	O:0.999972
allow	O	O:0.999994
sharing	O	O:0.999937
of	O	O:0.999963
the	O	O:0.999948
X	O	O:0.999833
Axis	O	O:0.990614
and	O	O:0.999998
present	O	O:0.999977
more	O	O:0.999908
than	O	O:0.999975
2	O	O:0.999498
scales	O	O:0.999963
.	O	O:0.999981
by	O	O:0.999980
changing	O	O:0.999987
the	O	O:0.999968
code	O	O:0.999965
to	O	O:0.999998
allow	O	O:0.999998
for	O	O:0.999999
set	O	O:0.984659
2	O	O:0.999519
is	O	O:0.999991
where	O	O:0.990299
I	O	O:0.999927
noticed	O	O:0.999920
problems	O	O:0.999098
.	O	O:0.999653
	
The	O	O:0.999944
side	O	O:0.999888
scales	O	O:0.999968
almost	O	O:0.999965
look	O	O:0.999971
good	O	O:0.999680
(	O	O:0.999976
exception	O	O:0.999962
is	O	O:0.999987
repeats	O	O:0.999925
on	O	O:0.999991
the	O	O:0.999991
right	O	O:0.999967
)	O	O:0.999992
and	O	O:0.999991
I	O	O:0.999899
CANNOT	O	O:0.999947
CHANGE	O	O:0.999772
FONT	O	O:0.999996
size	O	O:0.995662
of	O	O:0.999974
the	O	O:0.999978
X-Axis	O	O:0.999987
labels	O	O:0.999927
and	O	O:0.999991
Y	O	O:0.999947
Axis	O	O:0.962938
labels	O	O:0.999683
.	O	O:0.999695
	
Reverse	O	O:0.999152
Z	O	O:0.999772
Axis	O	O:0.993480
on	O	O:0.999978
matplotlib	O	O:0.999910
3D	O	O:0.999834
Plot	O	O:0.999161
	
You	O	O:0.999925
have	O	O:0.999997
an	O	O:0.999998
example	O	O:0.999988
of	O	O:0.999995
the	O	O:0.999991
broken	O	O:0.999985
axis	O	O:0.996305
in	O	O:0.999991
the	O	O:0.999997
matplotlib	O	O:0.999563
examples	O	O:0.999753
:	O	O:0.999918
Broken	O	O:0.999908
Axis	O	O:0.984171
	
Axis	O	O:0.987111
scale	O	O:0.999959
with	O	O:0.999992
bins	O	O:0.999611
	
Converting	O	O:0.998873
Integer	O	O:0.988495
(	O	O:0.999930
Day	O	O:0.999987
Count	O	O:0.999862
)	O	O:0.999984
X	O	O:0.999684
Axis	O	O:0.995968
to	O	O:0.999958
Months	O	O:0.999980
	
3d	O	O:0.997486
Polygon	O	O:0.990335
Plot	O	O:0.999748
in	O	O:0.999989
matplotlib	O	O:0.999880
baselines	O	O:0.999942
slanted	O	O:0.999863
	
I	O	O:0.999619
am	O	O:0.999990
trying	O	O:0.999952
to	O	O:0.999997
create	O	O:0.999987
my	O	O:0.999984
own	O	O:0.999997
version	O	O:0.999976
of	O	O:0.999978
the	O	O:0.999970
3D	O	O:0.999829
Polygon	O	O:0.997518
plot	O	O:0.993919
as	O	O:0.999996
shown	O	O:0.999904
on	O	O:0.999991
the	O	O:0.999985
Matplotlib	O	O:0.999909
web	O	O:0.999564
site	O	O:0.999771
:	O	O:0.999806
	
I'm	O	O:0.999723
trying	O	O:0.999963
to	O	O:0.999986
make	O	O:1.000000
a	O	O:0.999995
polar	O	O:0.821720
chart	O	O:0.999984
with	O	O:0.999971
matplotlib	O	O:0.999626
and	O	O:0.999994
python	O	O:0.999712
2.7	O	O:0.994669
,	O	O:0.999903
but	O	O:0.999926
I'm	O	O:0.999897
struggling	O	O:0.999972
on	O	O:0.999997
how	O	O:0.999994
to	O	O:0.999994
increase	O	O:0.999999
the	O	O:0.999995
space	O	O:0.968705
between	O	O:0.993729
the	O	O:0.999957
X-Axis	O	O:0.999880
and	O	O:0.999997
the	O	O:0.999997
Tick	O	O:0.946089
Labels	O	O:0.999910
for	O	O:0.999995
that	O	O:0.999983
same	O	O:0.999929
axis	O	O:0.988170
.	O	O:0.999703
	
Tick	O	O:0.955507
labels	O	O:0.999776
on	O	O:0.999929
x-axis	O	O:0.999871
aren't	O	O:0.999974
symmetric	O	O:0.998493
(	O	O:0.999974
Matplotlib	O	O:0.999410
)	O	O:0.999840
	
Tick	O	O:0.929089
label	O	O:0.999955
displayed	O	O:0.999947
when	O	O:0.999972
clicking	O	O:0.999929
on	O	O:0.999964
graph	O	O:0.999931
?	O	O:0.999949
	
Axes	O	O:0.985026
missing	O	O:0.999938
when	O	O:0.999994
plotting	O	O:0.979337
in	O	O:0.999995
matplotlib	O	O:0.999952
using	O	O:0.999990
vispy	O	O:0.999518
as	O	O:0.999759
backend	O	O:0.999338
	
In	O	O:0.999916
theory	O	O:0.999714
,	O	O:0.999997
this	O	O:0.999829
code	O	O:0.999907
doesn't	O	O:0.999984
change	O	O:0.999989
any	O	O:0.997622
coordinates	O	O:0.999364
;	O	O:0.999990
it	O	O:0.999973
just	O	O:0.999992
gets	O	O:0.999997
the	O	O:0.999996
coordinates	O	O:0.999967
of	O	O:0.999998
each	O	O:0.999918
label	O	O:0.999992
,	O	O:0.999966
maps	O	O:0.999971
it	O	O:0.999982
to	O	O:0.999990
Axes	O	O:0.999899
coordinates	O	O:0.999963
using	O	O:0.999990
the	O	O:0.999940
Text	O	O:0.779281
object's	O	O:0.999920
internally-stored	O	O:0.999398
transform	O	O:0.589774
,	O	O:0.999961
and	O	O:1.000000
then	O	O:0.999996
sets	O	O:0.999996
the	O	O:0.999979
position	O	O:0.999921
.	O	O:0.999809
	
@USER	O	O:0.999008
I	O	O:0.999875
think	O	O:0.999963
he	O	O:0.999205
wants	O	O:0.999983
to	O	O:0.999985
get	O	O:0.999819
the	O	O:0.999999
tick	O	O:0.999989
positions	O	O:0.999963
in	O	O:0.999989
Axes	O	O:0.995715
coordinates	O	O:0.999803
.	O	O:0.999738
	
Axes	O	O:0.987435
fonts	O	O:0.999936
with	O	O:0.999982
text.usetex	O	O:0.994701
'	O	O:0.999974
true	O	O:0.999453
'	O	O:0.999868
does	O	O:0.999991
not	O	O:0.999993
use	O	O:0.999604
set	O	O:0.966405
font	O	O:0.985727
	
Also	O	O:0.999855
,	O	O:0.999997
when	O	O:0.999990
specifying	O	O:0.999976
where	O	O:0.998820
you	O	O:0.999990
want	O	O:0.999998
the	O	O:0.999994
subplot	O	O:0.996735
to	O	O:0.999998
be	O	O:0.999999
placed	O	O:0.999609
(	O	O:0.999970
the	O	O:0.999996
third	O	O:0.999975
input	O	O:0.999995
to	O	O:0.999976
`	O	O:0.999998
Figure.add_subplot()	B-API	O:0.838672
`)	O	O:0.999992
,	O	O:0.999986
you	O	O:0.999986
do	O	O:0.999988
not	O	O:0.999998
want	O	O:0.999998
to	O	O:0.999987
use	O	O:0.999286
`	O	O:0.999948
y+1	O	O:0.974440
`	O	O:0.999987
because	O	O:0.999936
that	O	O:0.999993
would	O	O:0.999998
start	O	O:0.999999
at	O	O:0.998490
`	O	O:0.999958
1	O	O:0.992496
`	O	O:0.999970
and	O	O:0.999993
end	O	O:0.999992
at	O	O:0.981956
`	O	O:0.999950
6	O	O:0.993956
`	O	O:0.999982
which	O	O:0.999903
would	O	O:0.999998
go	O	O:1.000000
out	O	O:0.999998
of	O	O:0.999997
the	O	O:0.999991
available	O	O:0.998015
range	O	O:0.999998
of	O	O:0.999928
0-5	O	O:0.999612
.	O	O:0.999885
	
While	O	O:0.999926
it	O	O:0.999881
might	O	O:0.999996
be	O	O:0.999998
possible	O	O:0.999993
to	O	O:0.999969
hack	O	O:0.999987
`	O	O:0.999994
JointGrid	O	O:0.995935
`	O	O:0.999996
to	O	O:0.999931
get	O	O:0.999974
this	O	O:0.999997
to	O	O:0.999998
work	O	O:0.999999
,	O	O:0.999996
I	O	O:0.999938
suspect	O	O:0.999989
it	O	O:0.999889
will	O	O:0.999981
very	O	O:0.999987
likely	O	O:0.999982
be	O	O:0.999993
easier	O	O:0.999904
to	O	O:0.999994
just	O	O:0.999998
use	O	O:0.997567
`	O	O:0.999876
kdeplot	O	O:0.753550
`	O	O:0.999990
on	O	O:0.999930
one	O	O:0.999993
Axes	O	O:0.998116
,	O	O:0.999996
using	O	O:0.999984
`	O	O:0.999509
twinx	B-API	B-API:0.998951
`	O	O:0.999941
and	O	O:0.999727
`	O	O:0.999976
twiny	B-API	B-API:0.977826
to	O	O:0.999993
place	O	O:0.999663
and	O	O:0.999999
scale	O	O:0.999982
the	O	O:0.999994
marginal	O	O:0.999730
plots	O	O:0.999912
properly	O	O:0.999958
.	O	O:0.999942
	
I	O	O:0.999843
want	O	O:0.999994
to	O	O:0.999948
transform	O	O:0.993551
those	O	O:0.999994
intensity	O	O:0.999994
values	O	O:0.995775
to	O	O:0.999991
pixel	O	O:0.999999
intensity	O	O:0.999998
values	O	O:0.998059
as	O	O:0.999981
in	O	O:0.999995
the	O	O:0.999982
following	O	O:0.999285
image	O	O:0.971170
:	O	O:0.999864
	
The	O	O:0.999848
longer	O	O:0.999993
the	O	O:0.999997
time	O	O:0.998082
period	O	O:0.999993
becomes	O	O:0.999947
,	O	O:0.999998
the	O	O:0.999989
sharper	O	O:0.999889
the	O	O:0.999993
peaks	O	O:0.999865
will	O	O:0.999996
become	O	O:0.999905
(	O	O:0.999998
the	O	O:0.999999
Fourier	O	O:0.999855
transform	O	O:0.786743
of	O	O:0.999991
the	O	O:0.999970
cosines	O	O:0.998065
):	O	O:0.999960
#CODE	O	O:0.999647
	
How	O	O:0.999944
to	O	O:0.999984
transform	O	O:0.998839
your	O	O:0.999992
data	O	O:0.999036
into	O	O:0.999992
this	O	O:0.999981
format	O	O:0.914193
is	O	O:0.999994
a	O	O:0.999990
simple	O	O:0.999289
question	O	O:0.999951
,	O	O:0.999985
maybe	O	O:0.999995
a	O	O:0.999991
bit	O	O:0.999669
googling	O	O:0.999887
and	O	O:0.999955
trial	O	O:0.999783
and	O	O:0.999916
error	O	O:0.999837
.	O	O:0.998813
	
Perhaps	O	O:0.999957
it	O	O:0.999945
is	O	O:0.999994
best	O	O:0.999972
to	O	O:0.999992
transform	O	O:0.956882
to	O	O:0.999992
linear	O	O:0.999963
coordinates	O	O:0.999941
and	O	O:0.999994
calculate	O	O:0.999973
how	O	O:0.999989
to	O	O:0.999994
produce	O	O:0.999999
the	O	O:0.999997
curved	O	O:0.999843
grid	O	O:0.995644
for	O	O:0.999996
the	O	O:0.999979
declination	O	O:0.998661
and	O	O:0.999998
the	O	O:0.999997
radial	O	O:0.999866
lines	O	O:0.982957
for	O	O:0.999993
the	O	O:0.999996
right	O	O:0.999888
ascension	O	O:0.999889
.	O	O:0.999909
	
Since	O	O:0.999946
my	O	O:0.999966
data	O	O:0.998471
is	O	O:0.999992
roughly	O	O:0.999976
spherical	O	O:0.999794
I	O	O:0.999710
triangulate	O	O:0.999894
the	O	O:0.999850
azimuth	O	O:0.999062
and	O	O:0.999999
zenith	O	O:0.999881
angles	O	O:0.999303
from	O	O:0.999982
the	O	O:0.999995
spherical	O	O:0.999862
coordinate	O	O:0.999995
transform	O	O:0.771811
of	O	O:0.999992
my	O	O:0.999996
data	O	O:0.999370
points	O	O:0.999943
.	O	O:0.999875
	
A	O	O:0.999844
workaround	O	O:0.998577
might	O	O:0.999991
be	O	O:0.999990
to	O	O:0.999999
log10	B-API	O:0.992296
transform	O	O:0.922708
the	O	O:0.999988
data	O	O:0.996558
before	O	O:0.999988
plotting	O	O:0.966626
,	O	O:0.999969
but	O	O:0.999996
the	O	O:0.999991
approaches	O	O:0.999953
I	O	O:0.999970
have	O	O:0.999993
tried	O	O:0.999644
,	O	O:0.999981
#CODE	O	O:0.998813
	
Without	O	O:0.999887
having	O	O:0.999875
to	O	O:0.999962
transform	O	O:0.986341
everything	O	O:0.999982
to	O	O:0.999997
string	O	O:0.999999
or	O	O:0.999997
another	O	O:0.999980
kind	O	O:0.999996
of	O	O:0.999952
object	O	O:0.999676
?	O	O:0.999963
	
However	O	O:0.999727
,	O	O:0.999998
the	O	O:0.999995
dates	O	O:0.976459
mysteriously	O	O:0.999995
transform	O	O:0.979428
themselves	O	O:0.999875
to	O	O:0.999997
an	O	O:0.999998
ugly	O	O:0.999945
and	O	O:0.999998
unreadable	O	O:0.999978
format	O	O:0.995930
when	O	O:0.999974
plotting	O	O:0.990060
the	O	O:0.999997
same	O	O:0.999995
data	O	O:0.998670
as	O	O:0.999999
a	O	O:0.999993
bar	O	O:0.892553
plot	O	O:0.962776
.	O	O:0.999657
	
I	O	O:0.999846
want	O	O:0.999990
to	O	O:0.999983
find	O	O:0.999924
out	O	O:0.999994
how	O	O:0.999998
to	O	O:0.999998
transform	O	O:0.992487
magnitude	O	O:0.999994
value	O	O:0.999997
of	O	O:0.999994
accelerometer	O	O:0.999909
to	O	O:0.999993
frequency	O	O:0.999988
domain	O	O:0.999866
.	O	O:0.999683
	
Then	O	O:0.999913
,	O	O:0.999999
you	O	O:0.999999
need	O	O:0.999999
to	O	O:0.999999
set	O	O:0.999978
the	O	O:0.999999
transform	O	O:0.563377
for	O	O:0.999996
the	O	O:0.999999
new	O	O:0.999944
lines	O	O:0.993144
on	O	O:0.999963
`	O	O:0.999991
a_all	O	O:0.900997
`	O	O:0.999997
to	O	O:0.999993
move	O	O:1.000000
them	O	O:0.999988
to	O	O:0.999998
the	O	O:1.000000
new	O	O:0.999810
axis	O	O:0.995376
.	O	O:0.999792
	
What	O	O:0.999918
about	O	O:0.999952
applying	O	O:0.999970
a	O	O:0.999862
rectangular	O	O:0.989578
(	O	O:0.999977
ok	O	O:0.999865
,	O	O:0.999975
in	O	O:0.999999
three	O	O:0.999971
dimensions	O	O:0.999897
,	O	O:0.999991
cubic	O	O:0.999738
)	O	O:0.999869
window	O	O:0.999897
to	O	O:0.999998
your	O	O:0.999999
field	O	O:0.992013
before	O	O:0.999990
fourier	O	O:0.999605
transform	O	B-API:0.692510
?	O	O:0.999531
	
The	O	O:0.999631
canvas	O	O:0.999793
seems	O	O:0.999989
to	O	O:0.999994
get	O	O:0.999772
locked	O	O:0.991535
and	O	O:0.999994
after	O	O:0.999996
the	O	O:0.999961
call	O	O:0.999618
of	O	O:0.999994
the	O	O:0.999995
pick	O	O:0.996585
event	O	O:0.999988
I	O	O:0.999923
can	O	O:0.999999
not	O	O:0.999986
use	O	O:0.999266
the	O	O:0.999991
other	O	O:0.999963
functionalities	O	O:0.999983
as	O	O:0.999971
well	O	O:0.999962
.	O	O:0.999899
	
When	O	O:0.999943
it	O	O:0.999878
is	O	O:0.999989
triggered	O	O:0.999967
it	O	O:0.999975
seems	O	O:0.999982
that	O	O:0.999994
the	O	O:0.999972
canvas	O	O:0.999967
gets	O	O:0.999960
locked	O	O:0.970141
and	O	O:0.999992
I	O	O:0.999812
can	O	O:0.999991
not	O	O:0.999986
use	O	O:0.999152
any	O	O:0.997510
other	O	O:0.999774
functionality	O	O:0.999816
.	O	O:0.999293
	
I	O	O:0.999617
am	O	O:0.999988
trying	O	O:0.999924
to	O	O:0.999993
draw	O	O:0.999121
an	O	O:0.999989
arrow	O	O:0.998329
on	O	O:0.999994
the	O	O:0.999955
scatterplot	O	O:0.999971
.	O	O:0.999898
	
Are	O	O:0.999826
these	O	O:0.999990
parametric	O	O:0.999707
orbits	O	O:0.999323
,	O	O:0.999988
so	O	O:0.999997
that	O	O:0.999991
you	O	O:0.999998
could	O	O:0.999999
draw	O	O:0.999554
vertical	O	O:0.999993
lines	O	O:0.991629
for	O	O:0.999995
each	O	O:0.999842
time	O	O:0.982698
(	O	O:0.999983
or	O	O:0.999995
whatever	O	O:0.999985
)	O	O:0.999991
_t_	O	O:0.989464
?	O	O:0.999834
	
I've	O	O:0.998835
follow	O	O:0.999927
this	O	O:0.999780
subject	O	O:0.999842
:	O	O:0.999968
How	O	O:0.999985
to	O	O:0.999997
draw	O	O:0.999317
planes	O	O:0.999881
from	O	O:0.999999
a	O	O:0.999999
set	O	O:0.993637
of	O	O:0.999999
linear	O	O:0.999716
equations	O	O:0.999851
in	O	O:0.999948
Python	O	O:0.999760
?	O	O:0.999893
	
I	O	O:0.999627
am	O	O:0.999992
able	O	O:0.999973
to	O	O:0.999997
draw	O	O:0.998821
with	O	O:0.999999
all	O	O:0.999500
variables	O	O:0.999960
at	O	O:0.994455
x-axis	O	O:0.999992
if	O	O:0.999985
convert	O	O:0.980110
it	O	O:0.999986
to	O	O:0.999993
bar	O	O:0.995166
graph	O	O:0.999948
.	O	O:0.999727
	
But	O	O:0.999623
in	O	O:0.999961
my	O	O:0.999986
particular	O	O:0.999983
case	O	O:0.999991
I	O	O:0.999954
have	O	O:0.999992
to	O	O:0.999969
draw	O	O:0.999299
Line2D	B-API	O:0.952854
instances	O	O:0.999985
using	O	O:0.999994
Points	O	O:0.999757
coordinates	O	O:0.999846
on	O	O:0.999994
top	O	O:0.999957
of	O	O:0.999991
the	O	O:0.999995
regular	O	O:0.999950
plots	O	O:0.999967
that	O	O:0.999966
are	O	O:0.999999
all	O	O:0.999790
using	O	O:0.999999
Data	O	O:0.999906
coordinates	O	O:0.999679
.	O	O:0.999763
	
I'm	O	O:0.999851
using	O	O:0.999903
imshow()	B-API	B-API:0.991449
to	O	O:0.999876
draw	O	O:0.998214
a	O	O:0.999975
2D	O	O:0.999591
numpy	O	O:0.999961
array	O	O:0.978242
,	O	O:0.999994
so	O	O:0.999993
for	O	O:0.999918
example	O	O:0.998697
:	O	O:0.999941
#CODE	O	O:0.999621
	
I	O	O:0.999848
need	O	O:0.999992
to	O	O:0.999976
draw	O	O:0.999674
all	O	O:0.997332
function	O	O:0.998579
in	O	O:0.999995
the	O	O:0.999990
same	O	O:0.999082
window	O	O:0.999923
	
I	O	O:0.999830
want	O	O:0.999989
to	O	O:0.999905
draw	O	O:0.999699
a	O	O:0.999992
small	O	O:0.999712
red	O	O:0.999902
box	O	O:0.996994
around	O	O:0.996094
one	O	O:0.999986
of	O	O:0.999998
the	O	O:0.999992
ticklabels	O	O:0.999983
,	O	O:0.999995
as	O	O:0.999989
so	O	O:0.999499
:	O	O:0.999823
	
I	O	O:0.999721
draw	O	O:0.989172
4D	O	O:0.999053
plot	O	O:0.940130
.	O	O:0.999681
	
I'd	O	O:0.999920
like	O	O:0.999990
to	O	O:0.999996
draw	O	O:0.995828
/	O	O:0.999971
plot	O	O:0.991310
an	O	O:0.999988
horizontal	O	O:0.999912
line	O	O:0.999976
on	O	O:0.999994
top	O	O:0.999971
of	O	O:0.999992
the	O	O:0.999965
heatmap	O	O:0.999999
like	O	O:0.999985
in	O	O:0.999999
this	O	O:0.999982
figure	O	O:0.953240
	
How	O	O:0.999922
do	O	O:0.999924
I	O	O:0.999975
draw	O	O:0.995663
edge	O	O:0.999970
labels	O	O:0.999925
for	O	O:0.999998
MultiGraph	O	O:0.998748
in	O	O:0.999931
NetworkX	O	O:0.999179
?	O	O:0.999762
	
How	O	O:0.999880
to	O	O:0.999971
draw	O	O:0.999784
a	O	O:0.999994
contour	O	O:0.967393
plot	O	O:0.992835
using	O	O:0.999966
Python	O	O:0.998241
?	O	O:0.999561
	
I	O	O:0.999743
tried	O	O:0.999952
to	O	O:0.999845
draw	O	O:0.999123
a	O	O:0.999993
contour	O	O:0.958268
plot	O	O:0.991951
using	O	O:0.999950
Python	O	O:0.998668
.	O	O:0.999105
	
The	O	O:0.999939
second	O	O:0.949213
option	O	O:0.999868
is	O	O:0.999988
a	O	O:0.999971
touch	O	O:0.999891
more	O	O:0.999969
verbose	O	O:0.999537
,	O	O:0.999985
but	O	O:0.999962
has	O	O:0.999980
the	O	O:0.999994
advantage	O	O:0.999983
that	O	O:0.999989
the	O	O:0.999996
y-axis	O	O:0.999993
limits	O	O:0.999962
on	O	O:0.999996
the	O	O:0.999998
second	O	O:0.996310
plot	O	O:0.996727
will	O	O:0.999996
autoscale	O	O:0.978817
as	O	O:0.999983
you'd	O	O:0.999884
expect	O	O:0.999938
.	O	O:0.999826
	
I	O	O:0.999677
included	O	O:0.999981
the	O	O:0.999973
code	O	O:0.999986
to	O	O:0.999994
autoscale	O	O:0.990924
the	O	O:0.999983
viewport	O	O:0.999876
,	O	O:0.999989
but	O	O:0.999963
that's	O	O:0.999963
not	O	O:0.999993
strictly	O	O:0.999959
necessary	O	O:0.999962
.	O	O:0.999591
	
possible	O	O:0.999917
duplicate	O	O:0.999990
of	O	O:0.999937
[	O	O:0.999923
How	O	O:0.999995
to	O	O:0.999985
autoscale	O	O:0.993038
y	O	O:0.999955
axis	O	O:0.996495
in	O	O:0.999984
matplotlib	O	O:0.999845
?	O	O:0.999901
]	O	O:0.997454
(	O	O:0.999961
#URL	O	O:0.998899
)	O	O:0.999871
	
if	O	O:0.999937
the	O	O:0.999977
image	O	O:0.887753
is	O	O:0.999995
a	O	O:0.999979
NxM	O	O:0.999388
array	O	O:0.997657
of	O	O:0.999986
any	O	O:0.990366
type	O	O:0.999715
,	O	O:0.999997
it	O	O:0.999950
is	O	O:0.999994
interpreted	O	O:0.999960
through	O	O:0.999962
the	O	O:0.999926
colormap	O	O:0.999711
(	O	O:0.999991
autoscale	O	O:0.767459
,	O	O:0.999974
if	O	O:0.999989
not	O	O:0.999995
indicated	O	O:0.999989
otherwise	O	O:0.999974
)	O	O:0.999992
.	O	O:0.999743
	
Now	O	O:0.999732
I	O	O:0.999928
changed	O	O:0.995257
my	O	O:0.999750
mind	O	O:0.999894
and	O	O:0.999998
decide	O	O:0.999993
to	O	O:0.999963
autoscale	O	O:0.991539
the	O	O:0.999986
data	O	O:0.980112
(	O	O:0.999987
and	O	O:0.999999
the	O	O:0.999997
view	O	O:0.814545
)	O	O:0.999995
,	O	O:0.999944
expecting	O	O:0.999997
these	O	O:0.999931
limits	O	O:0.998967
:	O	O:0.999842
	
I	O	O:0.999506
would	O	O:0.999995
like	O	O:0.999994
to	O	O:1.000000
be	O	O:1.000000
able	O	O:0.999998
to	O	O:0.999986
autoscale	O	O:0.997853
a	O	O:0.999987
matplotlib	O	O:0.999751
figure	O	O:0.992995
to	O	O:0.999992
make	O	O:0.999999
arbitrarily	O	O:0.999971
placed	O	O:0.999986
text	O	O:0.993008
annotations	O	O:0.999566
visible	O	O:0.999666
.	O	O:0.999840
	
I	O	O:0.999893
have	O	O:0.999994
to	O	O:0.999925
refresh	O	O:0.999375
the	O	O:0.999992
page	O	O:0.999995
to	O	O:0.999996
get	O	O:0.999977
the	O	O:0.999999
tooltips	O	O:0.999928
back	O	O:0.993498
.	O	O:0.999931
	
will	O	O:0.999882
refresh	O	O:0.996265
your	O	O:0.999991
system's	O	O:0.999935
reference	O	O:0.999974
to	O	O:0.999989
the	O	O:0.999997
bash_profile	O	O:0.998886
and	O	O:0.999996
you	O	O:0.999994
should	O	O:0.999994
be	O	O:0.999998
good	O	O:0.999993
to	O	O:0.999991
go	O	O:0.999997
in	O	O:0.999994
importing	O	O:0.999929
and	O	O:0.999996
using	O	O:0.999981
matplotlib	O	O:0.992097
	
Id	O	O:0.999169
like	O	O:0.999985
the	O	O:0.999996
user	O	O:0.999921
to	O	O:0.999994
be	O	O:0.999999
able	O	O:0.999998
to	O	O:0.999988
update	O	O:0.999423
an	O	O:0.999990
existing	O	O:0.999899
and	O	O:0.999994
open	O	O:0.979005
axis	O	O:0.993845
i.e.	O	O:0.999954
to	O	O:0.999948
refresh	O	O:0.997873
the	O	O:0.999969
axis	O	O:0.990412
.	O	O:0.999910
	
Placing	O	O:0.999796
Custom	O	O:0.998734
Images	O	O:0.994785
in	O	O:0.999989
a	O	O:0.999982
Plot	O	O:0.982988
Window	O	O:0.999981
--	O	O:0.999979
as	O	O:0.999994
custom	O	O:0.999970
data	O	O:0.999127
markers	O	O:0.968694
or	O	O:0.999997
to	O	O:0.999994
annotate	O	O:0.997159
those	O	O:0.999973
markers	O	O:0.885626
	
How	O	O:0.999929
to	O	O:0.999978
annotate	O	O:0.985897
/	O	O:0.999947
highlight	O	O:0.999960
a	O	O:0.999988
3d	O	O:0.999644
plot	O	O:0.971330
in	O	O:0.999958
MatPlotLib	O	O:0.999498
	
Well	O	O:0.999725
,	O	O:0.999995
it	O	O:0.999945
takes	O	O:0.999987
a	O	O:0.999991
loop	O	O:0.999979
to	O	O:0.999993
annotate	O	O:0.996659
all	O	O:0.999525
data	O	O:0.999438
points	O	O:0.999979
,	O	O:0.999992
I	O	O:0.999916
thought	O	O:0.999959
that	O	O:0.999932
there	O	O:0.999982
should	O	O:0.999991
be	O	O:0.999999
a	O	O:0.999973
function	O	O:0.993840
that	O	O:0.999984
does	O	O:0.999991
just	O	O:0.999993
that	O	O:0.999994
.	O	O:0.999875
	
You	O	O:0.999929
can	O	O:0.999987
annotate	O	O:0.996012
a	O	O:0.999996
specific	O	O:0.999951
point	O	O:0.999971
in	O	O:0.999990
the	O	O:0.999989
image	O	O:0.995713
using	O	O:0.999983
`	O	O:0.999453
plt.text	B-API	B-API:0.997895
(	O	O:0.999950
x	O	O:0.999770
,	O	O:0.999984
y	O	O:0.999901
,	O	O:0.999986
str	O	O:0.975852
)`	O	O:0.999655
.	O	O:0.999438
	
To	O	O:0.999794
state	O	O:0.999999
it	O	O:0.999951
in	O	O:0.999998
a	O	O:0.999995
general	O	O:0.999304
form	O	O:0.999984
,	O	O:0.999954
I'm	O	O:0.999944
looking	O	O:0.999952
for	O	O:0.999999
a	O	O:0.999987
way	O	O:0.999941
to	O	O:0.999989
join	O	O:0.971585
several	O	O:0.999975
points	O	O:0.999788
with	O	O:0.999998
a	O	O:0.999989
gradient	O	O:0.992423
color	O	O:0.999989
line	O	O:0.999979
using	O	O:0.999982
matplotlib	O	O:0.998587
,	O	O:0.999580
and	O	O:0.999930
I'm	O	O:0.999694
not	O	O:0.999925
finding	O	O:0.999989
it	O	O:0.999945
anywhere	O	O:0.999955
.	O	O:0.999922
	
Now	O	O:0.999904
instead	O	O:0.999998
of	O	O:0.999998
straight	O	O:0.999959
arrows	O	O:0.999866
,	O	O:0.999976
I	O	O:0.999983
want	O	O:0.999996
to	O	O:0.999991
join	O	O:0.991636
points	O	O:0.999978
by	O	O:0.999989
curve	O	O:0.999973
arrows	O	O:0.999524
.	O	O:0.999743
	
If	O	O:0.999948
you	O	O:0.999994
like	O	O:0.999999
,	O	O:0.999999
join	O	O:0.901023
circos's	O	O:0.999925
google	O	O:0.999969
group	O	O:0.994526
to	O	O:0.999960
discuss	O	O:0.999624
:	O	O:0.999966
#URL	O	O:0.999689
	
Then	O	O:0.999975
join	O	O:0.963925
me	O	O:0.999948
in	O	O:0.999991
upvoting	O	O:0.999975
that	O	O:0.999963
answer	O	O:0.999843
and	O	O:0.999999
that	O	O:0.999969
comment	O	O:0.999548
:-)	O	O:0.999796
	
Because	O	O:0.999941
there	O	O:0.999962
have	O	O:0.999995
been	O	O:0.999992
closest	O	O:0.992672
points	O	O:0.999893
but	O	O:0.999995
when	O	O:0.999993
we	O	O:0.999996
join	O	O:0.991587
them	O	O:0.999976
they	O	O:0.999990
lead	O	O:0.999924
to	O	O:0.999996
an	O	O:0.999999
intersections	O	O:0.999983
or	O	O:0.999995
points	O	O:0.999919
which	O	O:0.999962
are	O	O:0.999981
not	O	O:0.999997
so	O	O:0.999978
close	O	O:0.986691
but	O	O:0.999989
should	O	O:0.999987
be	O	O:0.999999
joined	O	O:0.995400
together	O	O:0.999527
	
@USER	O	O:0.997724
Because	O	O:0.999973
Python	O	O:0.999954
automatically	O	O:0.999991
join	O	O:0.642254
two	O	O:0.999993
adjacent	O	O:0.999869
strings	O	O:0.999913
into	O	O:0.999969
one	O	O:0.999965
string	O	O:0.999860
.	O	O:0.999832
	
This	O	O:0.999475
produces	O	O:0.999978
a	O	O:0.999994
figure	O	O:0.964078
like	O	O:0.999997
the	O	O:0.999998
first	O	O:0.997526
figure	O	O:0.990322
at	O	O:0.998608
How	O	O:0.999994
to	O	O:0.999995
join	O	O:0.992732
overlapping	O	O:0.999787
circles	O	O:0.999604
?	O	O:0.999845
	
Matplotlib	O	O:0.998484
has	O	O:0.999957
lots	O	O:0.999978
of	O	O:0.999996
pre-defined	O	O:0.999804
colormaps	O	O:0.993611
for	O	O:0.999995
you	O	O:0.999994
to	O	O:0.999975
use	O	O:0.999446
.	O	O:0.999472
	
Here	O	O:0.999682
are	O	O:0.999996
all	O	O:0.999240
of	O	O:0.999995
the	O	O:0.999998
predefined	O	O:0.999826
colormaps	O	O:0.981844
.	O	O:0.999649
	
For	O	O:0.999912
me	O	O:0.999898
the	O	O:0.999993
simplest	O	O:0.999900
way	O	O:0.999937
is	O	O:0.999997
plotting	O	O:0.990894
directly	O	O:0.999986
the	O	O:0.999986
masks	O	O:0.999952
with	O	O:0.999982
imshow	B-API	B-API:0.863392
,	O	O:0.999995
passing	O	O:0.999976
different	O	O:0.999797
colormaps	O	O:0.925810
.	O	O:0.999665
	
There	O	O:0.998592
is	O	O:0.999972
a	O	O:0.999987
list	O	O:0.998196
of	O	O:0.999994
colormaps	O	O:0.984492
to	O	O:0.999998
choose	O	O:0.999881
from	O	O:0.999984
here	O	O:0.999903
.	O	O:0.999899
	
There	O	O:0.999089
is	O	O:0.999960
also	O	O:0.999997
a	O	O:0.999997
way	O	O:0.999876
to	O	O:0.999993
define	O	O:0.999999
custom	O	O:0.999652
colormaps	O	O:0.933386
.	O	O:0.999486
	
The	O	O:0.999913
list	O	O:0.995576
of	O	O:0.999997
available	O	O:0.990173
colormaps	O	O:0.999389
by	O	O:0.999945
default	O	O:0.999714
is	O	O:0.999903
here	O	O:0.999266
.	O	O:0.999810
	
You	O	O:0.999925
can	O	O:0.999996
add	O	O:0.999890
your	O	O:0.999997
own	O	O:0.999985
colormaps	O	O:0.983133
to	O	O:0.999895
`	O	O:0.999999
_cm.py	O	O:0.985239
`	O	O:0.999979
in	O	O:0.999987
your	O	O:0.999988
mpl	O	O:0.999789
directory	O	O:0.999978
and	O	O:0.999998
then	O	O:0.999998
change	O	O:0.999997
your	O	O:0.999945
rc	O	B-API:0.781437
file	O	O:0.999930
.	O	O:0.999583
	
How	O	O:0.999864
can	O	O:0.999978
I	O	O:0.999994
tell	O	O:0.999984
append_axes	O	O:0.998858
that	O	O:0.999964
I	O	O:0.999984
want	O	O:0.999999
to	O	O:0.999966
append	O	O:0.987613
the	O	O:0.999994
y	O	O:0.999946
subplot	O	O:0.997251
to	O	O:0.999995
the	O	O:1.000000
right	O	O:0.999991
of	O	O:0.999998
the	O	O:0.999987
"	O	O:0.999996
main	O	O:0.989014
axes	O	O:0.991269
"	O	O:0.999956
containing	O	O:0.999728
the	O	O:0.999988
scatter	O	O:0.950498
plot	O	O:0.973657
?	O	O:0.999905
	
I	O	O:0.999144
got	O	O:0.999984
a	O	O:0.999785
boxplot	O	O:0.955550
graph	O	O:0.999986
like	O	O:0.999982
this	O	O:0.999883
:	O	O:0.999890
	
add	O	O:0.967413
boxplot	O	O:0.993617
to	O	O:0.999990
other	O	O:0.999997
graph	O	O:0.999969
in	O	O:0.999974
python	O	O:0.999696
	
but	O	O:0.999970
when	O	O:0.999912
I	O	O:0.999932
do	O	O:0.999999
it	O	O:0.999941
on	O	O:0.999995
the	O	O:0.999970
'	O	O:0.999949
link	O	O:0.999978
'	O	O:0.999985
series	O	O:0.999996
I	O	O:0.999959
can	O	O:0.999996
draw	O	O:0.993001
the	O	O:0.999996
boxplot	O	O:0.986435
correctly	O	O:0.999983
.	O	O:0.999927
	
and	O	O:0.999940
I	O	O:0.999850
am	O	O:0.999986
able	O	O:0.999973
to	O	O:0.999994
draw	O	O:0.999011
the	O	O:0.999952
boxplot	O	O:0.990979
.	O	O:0.999906
	
Or	O	O:0.999902
,	O	O:0.999980
more	O	O:0.999962
generally	O	O:0.999927
,	O	O:0.999994
modify	O	O:0.999874
/	O	O:0.999982
transform	O	O:0.703696
to	O	O:0.999973
you	O	O:0.999998
heart's	O	O:0.999985
content	O	O:0.999968
,	O	O:0.999988
and	O	O:0.999999
then	O	O:0.999956
boxplot	O	O:0.996414
.	O	O:0.999854
	
If	O	O:0.999968
the	O	O:0.999982
ticklabels	O	O:0.999802
are	O	O:0.999992
already	O	O:0.999996
set	O	O:0.993905
to	O	O:0.999998
a	O	O:0.999999
string	O	O:0.999962
as	O	O:0.999992
in	O	O:0.999943
e.g.	O	O:0.999979
a	O	O:0.999950
boxplot	O	O:0.889576
,	O	O:0.999997
this	O	O:0.999906
is	O	O:0.999989
still	O	O:0.999952
working	O	O:0.999880
.	O	O:0.999833
	
How	O	O:0.999923
do	O	O:0.999939
I	O	O:0.999980
add	O	O:0.994834
inset	O	O:0.999874
axes	O	O:0.991641
and	O	O:0.999998
zoom	O	O:0.991916
in	O	O:0.999971
on	O	O:0.999997
the	O	O:0.999995
first	O	O:0.998556
boxplot	O	O:0.998485
of	O	O:0.999990
the	O	O:0.999987
two	O	O:0.999980
?	O	O:0.999921
	
I'm	O	O:0.999625
not	O	O:0.999975
setting	O	O:0.999984
the	O	O:0.999983
position	O	O:0.999986
of	O	O:0.999995
each	O	O:0.999831
boxplot	O	O:0.997599
,	O	O:0.999997
so	O	O:0.999969
I	O	O:0.999725
don't	O	O:0.999996
know	O	O:0.999974
where	O	O:0.998628
they	O	O:0.999972
will	O	O:0.999997
appear	O	O:0.999983
exactly	O	O:0.999991
.	O	O:0.999921
	
I	O	O:0.999793
wanted	O	O:0.999983
to	O	O:0.999959
add	O	O:0.999925
a	O	O:0.999988
box	O	O:0.996219
for	O	O:0.999998
each	O	O:0.999707
boxplot	O	O:0.990478
with	O	O:0.999997
a	O	O:0.999980
zoomed-in	O	O:0.999849
view	O	O:0.966713
on	O	O:0.999998
a	O	O:0.999973
specific	O	O:0.999892
y-axis	O	O:0.999942
range	O	O:0.999957
.	O	O:0.999763
	
UserWarning	O	O:0.992542
:	O	O:0.999950
2D	O	O:0.999795
hist	O	B-API:0.504480
input	O	O:0.999961
should	O	O:0.999992
be	O	O:0.999995
nsamples	O	O:0.999959
x	O	O:0.999883
nvariables	O	O:0.999188
;	O	O:0.999855
	
I'm	O	O:0.999466
doing	O	O:0.999991
a	O	O:0.999881
hist	O	B-API:0.952313
plot	O	O:0.974257
and	O	O:0.999988
I	O	O:0.999976
want	O	O:0.999994
some	O	O:0.999872
numbers	O	O:0.999944
shown	O	O:0.999914
in	O	O:0.999996
the	O	O:0.999993
plot	O	O:0.964890
,	O	O:0.999998
so	O	O:0.999990
I	O	O:0.999991
put	O	O:0.995499
in	O	O:0.999993
a	O	O:0.999993
text	O	O:0.905072
box	O	O:0.999368
using	O	O:0.999989
mathtext	B-API	O:0.638285
for	O	O:0.999950
the	O	O:0.999953
text	O	O:0.773815
,	O	O:0.999992
but	O	O:0.999900
I	O	O:0.999541
doesn't	O	O:0.999987
work	O	O:0.999926
and	O	O:0.999997
I	O	O:0.999924
can't	O	O:0.999954
see	O	O:0.999900
why	O	O:0.999973
.	O	O:0.999824
	
This	O	O:0.999908
lead	O	O:0.999809
to	O	O:0.999985
my	O	O:0.999981
colorbar	O	O:0.998789
having	O	O:0.999964
sqrt	O	O:0.796414
ticks	O	O:0.999807
and	O	O:0.999990
I	O	O:0.999981
want	O	O:0.999982
to	O	O:0.999956
translate	O	O:0.999993
them	O	O:0.999997
back	O	O:0.998464
to	O	O:0.999998
the	O	O:1.000000
original	O	O:0.999964
values	O	O:0.995115
.	O	O:0.999816
	
avoiding	O	O:0.999834
the	O	O:0.999929
local	O	O:0.999847
cache	O	O:0.999994
when	O	O:0.999985
fetching	O	O:0.999974
yahoo	O	O:0.999868
finance	O	O:0.998103
data	O	O:0.998959
from	O	O:0.999995
matplotlib.finance	B-API	O:0.604416
in	O	O:0.999964
python	O	O:0.999186
	
I	O	O:0.999475
am	O	O:0.999991
fetching	O	O:0.999881
yahoo	O	O:0.999712
finance	O	O:0.998932
data	O	O:0.996710
in	O	O:0.999993
Python	O	O:0.999912
through	O	O:0.999964
this	O	O:0.999556
interface	O	O:0.999776
:	O	O:0.999859
	
It	O	O:0.999775
would	O	O:0.999991
also	O	O:0.999999
be	O	O:0.999999
worth	O	O:0.999972
looking	O	O:0.999951
at	O	O:0.998723
the	O	O:0.999991
scatter	O	O:0.976939
plot	O	O:0.981608
documentation	O	O:0.999976
at	O	O:0.997778
#URL	O	O:0.999201
#CODE	O	O:0.999238
	
I	O	O:0.999774
am	O	O:0.999983
using	O	O:0.999974
the	O	O:0.999966
following	O	O:0.999755
code	O	O:0.999976
to	O	O:0.999989
stitch	O	O:0.999993
a	O	O:0.999991
.png	O	O:0.997617
into	O	O:0.999987
a	O	O:0.999972
scatter	O	O:0.891052
plot	O	O:0.990760
from	O	O:0.999947
MATPLOTLIB	O	O:0.999707
.	O	O:0.999620
	
Now	O	O:0.999764
I	O	O:0.999968
want	O	O:0.999996
to	O	O:0.999975
create	O	O:0.999999
a	O	O:0.999998
scatter	O	O:0.978940
plot	O	O:0.990087
with	O	O:0.999997
the	O	O:0.999999
data	O	O:0.996963
above	O	O:0.999984
..	O	O:0.999903
	
matplotlib	O	O:0.996923
:	O	O:0.999800
Understanding	O	O:0.999612
and	O	O:0.999996
changing	O	O:0.999963
axis	O	O:0.986839
labels	O	O:0.999852
for	O	O:0.999997
a	O	O:0.999984
scatter	O	O:0.914013
plot	O	O:0.997485
updated	O	O:0.999916
incrementally	O	O:0.999807
	
I	O	O:0.999703
have	O	O:0.999997
a	O	O:0.999863
script	O	O:0.999969
that	O	O:0.999985
generates	O	O:0.999993
scatter	O	O:0.995643
plots	O	O:0.999975
for	O	O:0.999993
data	O	O:0.998948
being	O	O:0.999989
generated	O	O:0.999983
by	O	O:0.999988
a	O	O:0.999956
hardware	O	O:0.999791
device	O	O:0.999961
.	O	O:0.999775
	
I	O	O:0.999632
build	O	O:0.999980
a	O	O:0.999960
scatter	O	O:0.928105
plot	O	O:0.992994
using	O	O:0.999977
matplotlib	O	O:0.998332
and	O	O:0.999865
python2.7	O	O:0.995307
	
Build	O	O:0.999819
a	O	O:0.999982
scatter	O	O:0.940063
plot	O	O:0.993031
for	O	O:0.999995
baz	O	O:0.999969
based	O	O:0.999897
on	O	O:0.999978
the	O	O:0.999937
x-axis	O	O:0.999727
(	O	O:0.999988
foo	O	O:0.999864
)	O	O:0.999949
and	O	O:0.999898
y-axis	O	O:0.999778
(	O	O:0.999934
bar	O	O:0.962928
)	O	O:0.999847
	
It	O	O:0.999217
is	O	O:0.999994
a	O	O:0.999991
normal	O	O:0.940694
scatter	O	O:0.962618
plot	O	O:0.938030
.	O	O:0.999711
	
Value	O	O:0.999896
Error	O	O:0.988825
with	O	O:0.999983
color	O	O:0.999930
array	O	O:0.999287
when	O	O:0.999991
slicing	O	O:0.999994
values	O	O:0.998263
for	O	O:0.999994
scatter	O	O:0.971088
plot	O	O:0.922731
	
I	O	O:0.999889
want	O	O:0.999994
to	O	O:0.999977
specify	O	O:0.999999
the	O	O:0.999997
frequency	O	O:0.999996
of	O	O:0.999989
markers	O	O:0.969325
that	O	O:0.999997
are	O	O:0.999998
printed	O	O:0.999943
in	O	O:0.999991
my	O	O:0.999966
scatter	O	O:0.969443
plot	O	O:0.966093
.	O	O:0.999713
	
Regression	O	O:0.999498
line	O	O:0.999903
and	O	O:0.999994
fitted	O	O:0.999855
curve	O	O:0.999967
for	O	O:0.999996
scatter	O	O:0.980901
plots	O	O:0.999866
in	O	O:0.999960
matplotlib	O	O:0.999578
	
but	O	O:0.999784
`	O	O:0.999978
from	O	O:0.999904
matplotlib.path	B-API	B-API:0.966600
import	O	O:0.998810
Path	B-API	O:0.960427
`	O	O:0.999885
throws	O	O:0.999369
#CODE	O	O:0.999666
	
The	O	O:0.999170
Path	B-API	O:0.854303
object	O	O:0.999936
does	O	O:0.999978
not	O	O:0.999992
store	O	O:0.999991
the	O	O:0.999986
points	O	O:0.999910
along	O	O:0.999988
a	O	O:0.999975
Bezier	O	O:0.996843
curve	O	O:0.999972
,	O	O:0.999988
just	O	O:0.999996
the	O	O:0.999999
minimum	O	O:0.970654
parameters	O	O:0.999969
it	O	O:0.999966
needs	O	O:0.999984
.	O	O:0.999887
	
Users	O	O:0.999696
of	O	O:0.999961
Path	B-API	O:0.989190
objects	O	O:0.999948
should	O	O:0.999993
not	O	O:0.999997
access	O	O:0.999994
the	O	O:0.999990
vertices	O	O:0.999961
and	O	O:0.999999
codes	O	O:0.994746
arrays	O	O:0.999608
	
The	O	O:0.999901
trick	O	O:0.999752
is	O	O:0.999992
to	O	O:0.999958
use	O	O:0.995996
Path	B-API	O:0.838222
and	O	O:0.999958
PathPatch	B-API	O:0.509266
.	O	O:0.998069
	
This	O	O:0.999819
allows	O	O:0.999888
you	O	O:0.999995
to	O	O:0.999997
get	O	O:0.999960
the	O	O:0.999992
Matplotlib	O	O:0.999883
Path	B-API	O:0.997054
vertices	O	O:0.999963
and	O	O:0.999999
codes	O	O:0.990891
in	O	O:0.999970
the	O	O:0.999996
projection	O	O:0.999979
coordinates	O	O:0.999973
which	O	O:0.999992
you	O	O:0.999997
can	O	O:1.000000
then	O	O:1.000000
convert	O	O:0.998132
into	O	O:0.999995
a	O	O:0.999987
new	O	O:0.995013
Path	B-API	O:0.986772
.	O	O:0.999438
	
I	O	O:0.999479
was	O	O:0.999978
playing	O	O:0.999512
with	O	O:0.999981
PathCollection	B-API	B-API:0.744517
(	O	O:0.999978
my	O	O:0.999986
dyslexia	O	O:0.998825
is	O	O:0.999992
killing	O	O:0.999892
me	O	O:0.999963
switching	O	O:0.999754
between	O	O:0.767391
Path	B-API	O:0.932871
and	O	O:0.999980
Patch	O	O:0.993192
)	O	O:0.999877
,	O	O:0.999930
and	O	O:0.999999
if	O	O:0.999977
I	O	O:0.999874
can	O	O:0.999996
get	O	O:0.999878
a	O	O:0.999997
unit	O	O:0.999449
circle	O	O:0.999981
drawn	O	O:0.999914
and	O	O:0.999989
I	O	O:0.999942
can	O	O:0.999984
apply	O	O:0.793531
an	O	O:0.999984
affine	O	O:0.999652
transformation	O	O:0.999936
to	O	O:0.999993
it	O	O:0.999999
,	O	O:0.999999
then	O	O:0.999993
I	O	O:0.999986
think	O	O:0.999996
it	O	O:0.999922
should	O	O:0.999994
work	O	O:0.999998
,	O	O:0.999999
as	O	O:0.999997
it	O	O:0.999850
doesn't	O	O:0.999975
seem	O	O:0.999991
to	O	O:0.999995
inherently	O	O:0.999993
fill	O	O:0.993523
the	O	O:0.999914
space	O	O:0.986601
.	O	O:0.999869
	
Thus	O	O:0.999864
the	O	O:0.999983
`	O	O:0.999934
Spine	B-API	O:0.964334
`	O	O:0.999992
objects	O	O:0.999818
are	O	O:0.999994
in	O	O:0.999985
question	O	O:0.999802
	
You	O	O:0.999946
can	O	O:0.999980
use	O	O:0.999759
the	O	O:0.999952
`	O	O:0.999684
set_position()	B-API	B-API:0.999794
`	O	O:0.999980
method	O	O:0.999971
of	O	O:0.999996
the	O	O:0.999948
`	O	O:0.999976
Spine	B-API	O:0.853661
`	O	O:0.999936
class	O	O:0.999553
:	O	O:0.999971
#CODE	O	O:0.999664
	
You	O	O:0.999854
mentioned	O	O:0.999974
the	O	O:0.999996
use	O	O:0.997675
of	O	O:0.999935
`	O	O:0.999919
Locator	B-API	O:0.719012
`	O	O:0.999944
and	O	O:0.999758
`	O	O:0.999980
Formatter	B-API	O:0.815795
`	O	O:0.999995
objects	O	O:0.998899
in	O	O:0.999999
your	O	O:0.999944
comment	O	O:0.999758
.	O	O:0.999748
	
You	O	O:0.999948
need	O	O:0.999993
to	O	O:0.999996
call	O	O:0.999995
remove	O	O:0.981263
on	O	O:0.999995
the	O	O:0.999997
instance	O	O:0.999986
of	O	O:0.999995
the	O	O:0.999933
`	O	O:0.999989
Annotation	B-API	O:0.826893
`	O	O:0.999950
object	O	O:0.999749
.	O	O:0.999860
	
Using	O	O:0.999718
Annotation	B-API	O:0.973227
Instead	O	O:0.999996
of	O	O:0.999987
Ticklabels	O	O:0.999492
	
What	O	O:0.998959
is	O	O:0.999965
the	O	O:0.999983
difference	O	O:0.978575
between	O	O:0.992991
a	O	O:0.999950
Text	B-API	O:0.867277
instance	O	O:0.999862
and	O	O:0.999994
string	O	O:0.999943
in	O	O:0.999942
python	O	O:0.999660
?	O	O:0.999891
	
I	O	O:0.999668
believe	O	O:0.999973
the	O	O:0.999952
anti-aliasing	O	O:0.999949
of	O	O:0.999997
Text	B-API	O:0.984839
objects	O	O:0.999975
is	O	O:0.999990
up	O	O:0.999900
to	O	O:0.999993
the	O	O:0.999997
font	O	O:0.994004
engine	O	O:0.999996
being	O	O:0.999955
used	O	O:0.999937
.	O	O:0.999626
	
What	O	O:0.999824
you	O	O:0.999954
should	O	O:0.999994
do	O	O:0.999957
is	O	O:0.999996
save	O	O:0.993951
a	O	O:0.999992
reference	O	O:0.999925
to	O	O:0.999992
the	O	O:0.999999
first	O	O:0.985007
`	O	O:0.999987
Text	B-API	B-API:0.665256
`	O	O:0.999941
object	O	O:0.999453
and	O	O:0.999998
update	O	O:0.998774
its	O	O:0.999981
contents	O	O:0.999996
by	O	O:0.999989
calling	O	O:0.999989
its	O	O:0.999490
`	O	O:0.999963
set_text()	B-API	B-API:0.996873
`	O	O:0.999830
method	O	O:0.999891
.	O	O:0.999904
	
There	O	O:0.998717
is	O	O:0.999997
a	O	O:0.999996
references	O	O:0.999574
to	O	O:0.999986
the	O	O:0.999998
Text	B-API	O:0.940990
object	O	O:0.999997
returned	O	O:0.999980
by	O	O:0.999987
the	O	O:0.999994
original	O	O:0.999988
setting	O	O:0.999994
of	O	O:0.999925
suptitle	B-API	B-API:0.906935
in	O	O:0.999991
figure.texts	O	O:0.985573
.	O	O:0.999677
	
I'm	O	O:0.999553
having	O	O:0.999985
a	O	O:0.999978
problem	O	O:0.999561
with	O	O:0.999993
the	O	O:0.999974
Text	B-API	O:0.935321
object	O	O:0.999992
that	O	O:0.999994
matplotlib	O	O:0.999970
use	O	O:0.998346
to	O	O:0.999933
represent	O	O:0.999995
the	O	O:0.999980
ticklabels	O	O:0.999903
.	O	O:0.999905
	
I	O	O:0.999788
think	O	O:0.999989
you	O	O:0.999982
need	O	O:0.999998
to	O	O:0.999996
displace	O	O:0.999998
the	O	O:0.999977
`	O	O:0.999974
Text	B-API	O:0.591945
`	O	O:0.999982
object	O	O:0.999901
,	O	O:0.999995
using	O	O:0.999994
the	O	O:0.999887
`	O	O:0.999502
set_position	B-API	B-API:0.996314
((	O	O:0.999870
x	O	O:0.999760
,	O	O:0.999974
y	O	O:0.999855
))`	O	O:0.997629
method	O	O:0.999939
.	O	O:0.999769
	
This	O	O:0.999780
includes	O	O:0.999127
`	O	O:0.999979
Text	B-API	O:0.693198
`	O	O:0.999987
objects	O	O:0.999302
,	O	O:0.999967
`	O	O:0.999965
Line2D	B-API	B-API:0.790911
`	O	O:0.999985
objects	O	O:0.999562
,	O	O:0.999975
`	O	O:0.999992
collection	O	O:0.999679
`	O	O:0.999995
objects	O	O:0.999579
,	O	O:0.999971
`	O	O:0.999970
Patch	O	O:0.934507
`	O	O:0.999966
objects	O	O:0.999519
...	O	O:0.999729
	
Text	B-API	O:0.906030
object	O	O:0.999901
in	O	O:0.999977
matplotlib	O	O:0.999864
doesnt	O	O:0.999970
respond	O	O:0.999903
to	O	O:0.999998
zooming	O	O:0.999989
properly	O	O:0.999932
	
After	O	O:0.999715
drawing	O	O:0.999835
a	O	O:0.999913
matplotlib	O	O:0.999434
Text	B-API	O:0.971331
instance	O	O:0.999862
and	O	O:0.999998
then	O	O:0.999985
interactively	O	O:0.999971
panning	O	O:0.999897
,	O	O:0.999985
the	O	O:0.999998
resulting	O	O:0.999954
drawn	O	O:0.999992
text	O	O:0.981710
is	O	O:0.999991
clipped	O	O:0.999656
to	O	O:0.999995
the	O	O:1.000000
data	O	O:0.945727
window	O	O:0.999991
but	O	O:0.999993
not	O	O:0.999992
the	O	O:0.999998
surrounding	O	O:0.999906
bounding	O	O:0.999874
box	O	O:0.990230
.	O	O:0.999752
	
Something	O	O:0.999916
like	O	O:0.999919
`	O	O:0.999989
Text	B-API	O:0.714852
(	O	O:0.999966
2	O	O:0.999834
,	O	O:0.999968
0	O	O:0.999814
,	O	O:0.999982
u'Text	O	O:0.999141
(	O	O:0.999963
2	O	O:0.999885
,	O	O:0.999975
0	O	O:0.999918
,	O	O:0.999986
u	O	O:0.999611
"	O	O:0.999926
Text	B-API	B-API:0.547637
(	O	O:0.999899
0.4	O	O:0.992986
,	O	O:0.999977
u\	O	O:0.999096
'	O	O:0.999920
0.4	O	O:0.995435
\	O	O:0.999894
')")')`	O	O:0.998363
.	O	O:0.999201
	
`	O	O:0.999692
plt.legend	B-API	B-API:0.997032
`	O	O:0.999931
returns	O	O:0.999769
a	O	O:0.999944
`	O	O:0.999647
Legend	B-API	O:0.843631
`	O	O:0.999977
object	O	O:0.999956
with	O	O:0.999995
methods	O	O:0.999977
that	O	O:0.999995
allow	O	O:0.999980
you	O	O:0.999997
to	O	O:0.999994
modify	O	O:0.999999
the	O	O:0.999998
appearance	O	O:0.999982
of	O	O:0.999996
the	O	O:0.999930
legend	B-API	O:0.997550
.	O	O:0.999884
	
So	O	O:0.999936
first	O	O:0.980604
we'll	O	O:0.999968
save	O	O:0.962204
the	O	O:0.999953
`	O	O:0.999898
Legend	B-API	O:0.800759
`	O	O:0.999859
object	O	O:0.999054
:	O	O:0.999968
#CODE	O	O:0.999540
	
In	O	O:0.999924
practice	O	O:0.999864
I	O	O:0.999957
seem	O	O:0.999968
to	O	O:0.999994
end	O	O:0.999998
up	O	O:0.999976
mixing	O	O:0.999988
them	O	O:0.999956
both	O	O:0.999989
myself	O	O:0.999805
in	O	O:0.999946
SW	O	O:0.999711
;	O	O:0.999845
it's	O	O:0.999168
largely	O	O:0.999990
a	O	O:0.999996
matter	O	O:0.999967
of	O	O:0.999995
taste	O	O:0.999960
whether	O	O:0.999996
you	O	O:0.999995
go	O	O:0.999992
through	O	O:0.999990
the	O	O:0.999984
pyplot	B-API	O:0.873735
API	O	O:0.999993
or	O	O:0.999991
access	O	O:0.999990
the	O	O:0.999988
objects	O	O:0.999911
.	O	O:0.999970
pyplot	B-API	B-API:0.565622
is	O	O:0.999985
certainly	O	O:0.999927
very	O	O:0.999935
convenient	O	O:0.999926
although	O	O:0.999986
as	O	O:0.999991
you	O	O:0.999995
want	O	O:0.999996
to	O	O:0.999995
do	O	O:0.999999
more	O	O:0.999976
complex	O	O:0.999375
/	O	O:0.999983
exotic	O	O:0.999825
things	O	O:0.999861
you'll	O	O:0.999966
find	O	O:0.998065
what	O	O:0.999995
you	O	O:0.999992
can	O	O:0.999998
do	O	O:0.999999
with	O	O:0.999999
pyplot	B-API	O:0.964533
alone	O	O:0.999991
limited	O	O:0.999924
and	O	O:0.999995
you'll	O	O:0.999986
need	O	O:0.999980
to	O	O:0.999998
get	O	O:0.999943
to	O	O:0.999999
know	O	O:1.000000
at	O	O:0.999202
least	O	O:0.999992
the	O	O:0.999994
full	O	O:0.955782
API's	O	O:0.999807
Axes	B-API	O:0.991320
,	O	O:0.999973
Figure	B-API	O:0.955965
,	O	O:0.999924
Legend	B-API	O:0.985479
and	O	O:0.999993
Path	B-API	O:0.998292
objects	O	O:0.999695
better	O	O:0.999721
.	O	O:0.999770
	
There	O	O:0.999154
was	O	O:0.999983
a	O	O:0.999996
refactor	O	O:0.999744
of	O	O:0.999992
the	O	O:0.999909
`	O	O:0.999978
Legend	B-API	O:0.895826
`	O	O:0.999991
class	O	O:0.999990
awhile	O	O:0.999955
back	O	O:0.986169
.	O	O:0.999792
	
call	O	O:0.994493
`	O	O:0.999970
Legend.get_texts()	B-API	O:0.823086
`	O	O:0.999986
will	O	O:0.999937
get	O	O:0.999863
a	O	O:0.999998
list	O	O:0.996005
of	O	O:0.999990
Text	B-API	O:0.933586
object	O	O:0.999972
in	O	O:0.999984
the	O	O:0.999932
legend	B-API	O:0.866097
object	O	O:0.999832
:	O	O:0.999956
#CODE	O	O:0.999668
	
Some	O	O:0.999793
parameters	O	O:0.999324
could	O	O:0.999989
easily	O	O:0.999998
be	O	O:0.999999
read	O	O:0.999891
from	O	O:0.999983
the	O	O:0.999946
`	O	O:0.999907
Legend	B-API	O:0.848239
`	O	O:0.999982
object	O	O:0.999943
,	O	O:0.999988
others	O	O:0.999790
(	O	O:0.999987
like	O	O:0.999985
`	O	O:0.999981
title	O	O:0.915426
`	O	O:0.999989
,	O	O:0.999516
`	O	O:0.999998
fancybox	O	O:0.999503
`)	O	O:0.999998
required	O	O:0.999978
some	O	O:0.999854
'	O	O:0.999986
artistics	O	O:0.999507
'	O	O:0.999885
.	O	O:0.999713
	
42	O	O:0.999131
from	O	O:0.999984
matplotlib.legend	B-API	B-API:0.717601
import	O	O:0.998438
Legend	B-API	O:0.964366
	
How	O	O:0.999945
do	O	O:0.999947
I	O	O:0.999954
choose	O	O:0.997923
the	O	O:0.999972
optimum	O	O:0.999850
width	O	O:0.999980
for	O	O:0.999997
a	O	O:0.999977
matplotlib	O	O:0.987537
Button	B-API	O:0.984782
?	O	O:0.999739
	
I	O	O:0.999792
removed	O	O:0.999799
`	O	O:0.999971
color=axcolor	O	O:0.992589
`	O	O:0.999987
from	O	O:0.999959
the	O	O:0.999972
`	O	O:0.999834
Button	B-API	O:0.913558
`	O	O:0.999979
call	O	O:0.997974
;	O	O:0.999941
and	O	O:0.999946
I	O	O:0.999953
added	O	O:0.999967
a	O	O:0.999812
`	O	O:0.999752
plt.show()	B-API	B-API:0.998810
`	O	O:0.999960
before	O	O:0.999558
the	O	O:0.999984
event	O	O:0.999965
connect	O	O:0.990511
,	O	O:0.999992
otherwise	O	O:0.999999
a	O	O:0.999992
figure	O	B-API:0.568642
window	O	O:0.999987
didn't	O	O:0.999966
appear	O	O:0.999984
for	O	O:0.999995
me	O	O:0.998776
(	O	O:0.999976
neither	O	O:0.999984
through	O	O:0.999135
`	O	O:0.999978
ipython	O	O:0.996132
`	O	O:0.999984
,	O	O:0.999928
nor	O	O:0.999997
with	O	O:0.999946
`	O	O:0.999992
python	O	O:0.999346
`)	O	O:0.999982
.	O	O:0.999428
	
button	O	O:0.999717
=	O	O:0.998609
Button	B-API	O:0.909502
(	O	O:0.999970
ax=reset_axis	O	O:0.997150
,	O	O:0.999917
label=	O	O:0.999850
'	O	O:0.999954
Reset	O	O:0.999250
'	O	O:0.999910
,	O	O:0.999951
color=	O	O:0.999922
'	O	O:0.999916
lightblue	O	O:0.999087
'	O	O:0.999908
,	O	O:0.999991
hovercolor=	O	O:0.998813
'	O	O:0.999975
0.975	O	O:0.998530
')	O	O:0.999805
	
`	O	O:0.999892
tbar.add_button	O	O:0.942362
(	O	O:0.999991
a	O	O:0.999825
Button	B-API	O:0.807211
object	O	O:0.999974
);	O	O:0.999123
`	O	O:0.999638
	
For	O	O:0.999992
your	O	O:0.999950
buttons	O	O:0.999721
to	O	O:0.999996
work	O	O:0.999999
,	O	O:0.999999
you	O	O:0.999999
need	O	O:0.999999
to	O	O:0.999999
keep	O	O:1.000000
a	O	O:0.999996
reference	O	O:0.999944
to	O	O:0.999995
the	O	O:0.999995
`	O	O:0.999810
Button	B-API	O:0.868506
`	O	O:0.999984
object	O	O:0.999812
around	O	O:0.975788
.	O	O:0.999250
	
I	O	O:0.999825
know	O	O:0.999984
how	O	O:0.999945
to	O	O:0.999991
add	O	O:0.999500
and	O	O:0.999999
work	O	O:0.999997
with	O	O:0.999998
single	O	O:0.999795
cursor	O	O:0.999935
`	O	O:0.999987
self.cursor	O	O:0.993495
=	O	O:0.999383
Cursor	B-API	O:0.844011
(	O	O:0.999968
self.static_canvas.Dataplot	O	O:0.995735
,	O	O:0.999987
useblit=True	O	O:0.999539
,	O	O:0.999951
color=	O	O:0.999889
'	O	O:0.999963
red	O	O:0.999638
'	O	O:0.999934
,	O	O:0.999968
linewidth=2	O	O:0.999934
)`	O	O:0.999240
,	O	O:0.999937
but	O	O:0.999994
what	O	O:0.999932
I	O	O:0.999912
should	O	O:0.999997
do	O	O:0.999980
to	O	O:0.999999
create	O	O:0.999998
to	O	O:0.999993
cursors	O	O:0.999990
?	O	O:0.999937
	
I	O	O:0.999874
think	O	O:0.999983
tillsten	O	O:0.998277
is	O	O:0.999980
right	O	O:0.999969
--	O	O:0.999992
study	O	O:0.999781
how	O	O:0.999989
the	O	O:0.999965
[	O	O:0.999815
`	O	O:0.999950
Cursor	B-API	O:0.703069
`	O	O:0.999991
class	O	O:0.999891
]	O	O:0.999760
(	O	O:0.999956
#URL	O	O:0.998840
)	O	O:0.999927
does	O	O:0.999942
it	O	O:0.999969
.	O	O:0.999882
	
I've	O	O:0.999177
checked	O	O:0.999547
briefly	O	O:0.998828
,	O	O:0.999988
but	O	O:0.999965
I	O	O:0.999732
don't	O	O:0.999996
know	O	O:0.999978
how	O	O:0.999997
to	O	O:0.999989
modify	O	O:0.999999
the	O	O:0.999997
properties	O	O:0.990361
of	O	O:0.999997
an	O	O:0.999935
`	O	O:0.999993
Arc	B-API	O:0.824796
`	O	O:0.999989
instance	O	O:0.999532
,	O	O:0.999988
although	O	O:0.999965
I'm	O	O:0.999793
sure	O	O:0.999969
it's	O	O:0.999932
possible	O	O:0.999901
.	O	O:0.999878
	
You	O	O:0.999830
could	O	O:0.999995
also	O	O:0.999997
try	O	O:0.999997
passing	O	O:0.999940
a	O	O:0.999881
`	O	O:0.999733
Arrow	B-API	O:0.877654
`	O	O:0.999992
instance	O	O:0.999856
as	O	O:0.999989
marker	O	O:0.999688
,	O	O:0.999974
but	O	O:0.999918
I'm	O	O:0.999819
not	O	O:0.999991
sure	O	O:0.999993
whether	O	O:0.999919
that	O	O:0.999816
works	O	O:0.999936
.	O	O:0.999907
	
Currently	O	O:0.999831
,	O	O:0.999961
I	O	O:0.999760
don't	O	O:0.999977
think	O	O:0.999988
it	O	O:0.999999
possible	O	O:0.999976
as	O	O:0.999996
the	O	O:0.999878
`	O	O:0.999923
Arrow	B-API	O:0.838745
`	O	O:0.999989
class	O	O:0.999965
only	O	O:0.999971
supports	O	O:0.999966
`'	O	O:0.999954
solid	O	O:0.998281
'	O	O:0.999575
|	O	O:0.999842
'	O	O:0.999958
dashed	O	O:0.999291
'	O	O:0.999700
|	O	O:0.999903
'	O	O:0.999952
dashdot	O	O:0.999360
'	O	O:0.999807
|	O	O:0.999822
'	O	O:0.999966
dotted	O	O:0.999704
'`	O	O:0.999938
four	O	O:0.999959
different	O	O:0.999835
linestyles	O	O:0.999518
.	O	O:0.999627
	
The	O	O:0.999845
Node	B-API	O:0.956339
class	O	O:0.999963
has	O	O:0.999992
the	O	O:0.999994
coordinates	O	O:0.999968
stored	O	O:0.999990
as	O	O:0.999990
members	O	O:0.998036
(	O	O:0.999964
x	O	O:0.999854
and	O	O:0.999990
y	O	O:0.999943
)	O	O:0.999967
,	O	O:0.999989
as	O	O:0.999997
well	O	O:0.999967
as	O	O:0.999984
index	O	O:0.996076
.	O	O:0.999798
	
You	O	O:0.999911
can	O	O:0.999988
scale	O	O:0.999999
your	O	O:0.999998
z	O	O:0.999965
values	O	O:0.996311
to	O	O:0.999981
fit	O	O:0.999998
this	O	O:0.999989
range	O	O:0.999991
with	O	O:0.999975
Normalize	B-API	O:0.700242
.	O	O:0.999825
	
You	O	O:0.999858
should	O	O:0.999949
mention	O	O:0.999990
the	O	O:0.999982
`	O	O:0.999960
Normalize	B-API	O:0.535695
`	O	O:0.999996
methods	O	O:0.999934
here	O	O:0.999984
as	O	O:0.999985
well	O	O:0.999943
.	O	O:0.999876
	
Matplotlib	O	O:0.998315
provides	O	O:0.999844
the	O	O:0.999973
class	O	O:0.999919
`	O	O:0.999992
Normalize	B-API	B-API:0.665538
`	O	O:0.999983
for	O	O:0.999954
that	O	O:0.999714
:	O	O:0.999938
#CODE	O	O:0.999803
	
Create	O	O:0.999929
a	O	O:0.999992
new	O	O:0.999909
instance	O	O:0.999988
of	O	O:0.999939
`	O	O:0.999966
Normalize	B-API	B-API:0.504597
`	O	O:0.999992
for	O	O:0.999993
each	O	O:0.999909
image	O	O:0.994322
you	O	O:0.999996
want	O	O:0.999997
to	O	O:0.999991
process	O	O:0.998041
.	O	O:0.999909
	
And	O	O:0.999978
then	O	O:0.999995
you	O	O:0.999998
can	O	O:0.999999
also	O	O:0.999999
replicate	O	O:0.999999
the	O	O:0.999995
functionality	O	O:0.999981
of	O	O:0.999982
`	O	O:0.999977
Normalize	B-API	B-API:0.621242
`	O	O:0.999873
(	O	O:0.999966
since	O	O:0.999989
you	O	O:0.999981
seem	O	O:0.999996
to	O	O:0.999997
not	O	O:0.999999
like	O	O:0.999996
it	O	O:0.999814
):	O	O:0.999965
#CODE	O	O:0.999511
	
Use	O	O:0.999776
these	O	O:0.999892
to	O	O:0.999988
create	O	O:0.999998
a	O	O:0.999983
`	O	O:0.999966
Normalize	B-API	B-API:0.628852
`	O	O:0.999970
instance	O	O:0.998953
(	O	O:0.999991
other	O	O:0.999991
normalisation	O	O:0.999946
classes	O	O:0.999696
are	O	O:0.999990
available	O	O:0.993120
,	O	O:0.999977
e.g.	O	O:0.999831
log	O	O:0.996715
scale	O	O:0.999737
)	O	O:0.999975
.	O	O:0.999618
	
The	O	O:0.999850
documentation	O	O:0.999974
of	O	O:0.999977
Normalize	B-API	B-API:0.507301
might	O	O:0.999988
be	O	O:0.999999
a	O	O:0.999998
bit	O	O:0.999600
deceiving	O	O:0.999759
here	O	O:0.999643
:	O	O:0.999786
`	O	O:0.999994
process_value	O	O:0.968482
`	O	O:0.999906
is	O	O:0.999982
a	O	O:0.999943
function	O	O:0.992241
which	O	O:0.999946
is	O	O:0.999984
only	O	O:0.999992
used	O	O:0.999991
for	O	O:0.999979
preprocessing	O	O:0.998105
(	O	O:0.999870
and	O	O:0.999997
static	O	O:0.997780
)	O	O:0.999784
.	O	O:0.999042
	
I	O	O:0.999559
have	O	O:0.999997
several	O	O:0.999958
questions	O	O:0.999963
regarding	O	O:0.999971
the	O	O:0.999988
Normalize	B-API	O:0.850551
class	O	O:0.999986
in	O	O:0.999984
Matplotlib	O	O:0.999776
.	O	O:0.999575
	
with	O	O:0.999983
your	O	O:0.999942
own	O	O:0.999961
`	O	O:0.999980
Normalize	B-API	B-API:0.827668
`	O	O:0.999795
function	O	O:0.992300
.	O	O:0.999871
	
This	O	O:0.999630
might	O	O:0.999972
be	O	O:0.999990
why	O	O:0.999992
they've	O	O:0.999689
avoided	O	O:0.999876
implementing	O	O:0.999967
it	O	O:0.999949
as	O	O:0.999991
part	O	O:0.999992
of	O	O:0.999966
Normalize	B-API	O:0.647373
.	O	O:0.999864
	
matplotlib	O	O:0.998066
:	O	O:0.999914
can	O	O:0.999991
I	O	O:0.999998
create	O	O:0.999999
AxesSubplot	O	O:0.999667
objects	O	O:0.999977
,	O	O:0.999996
then	O	O:0.999999
add	O	O:0.999966
them	O	O:0.999983
to	O	O:0.999999
a	O	O:0.999998
Figure	B-API	O:0.887705
instance	O	O:0.999954
?	O	O:0.999896
	
Also	O	O:0.999939
do	O	O:0.999995
you	O	O:0.999989
use	O	O:0.997924
Figure	B-API	O:0.948363
from	O	O:0.999989
the	O	O:0.999984
local	O	O:0.999936
matplotlib	O	O:0.999971
installation	O	O:0.999899
or	O	O:0.999982
not	O	O:0.999962
?	O	O:0.999968
	
Additionally	O	O:0.999735
,	O	O:0.999995
there	O	O:0.999997
are	O	O:0.999992
functions	O	O:0.999987
from	O	O:0.999991
the	O	O:0.999983
pyplot	B-API	O:0.777282
interface	O	O:0.999966
and	O	O:0.999993
there	O	O:0.999996
are	O	O:0.999976
methods	O	O:0.999944
on	O	O:0.999984
the	O	O:0.999962
`	O	O:0.999973
Figure	B-API	O:0.700361
`	O	O:0.999982
class	O	O:0.999894
.	O	O:0.999875
	
I'll	O	O:0.999896
assume	O	O:0.999850
in	O	O:0.999996
the	O	O:0.999976
following	O	O:0.999968
that	O	O:0.999984
`	O	O:0.999992
fig	O	O:0.999189
`	O	O:0.999945
is	O	O:0.999957
an	O	O:0.999992
instance	O	O:0.999979
of	O	O:0.999995
a	O	O:0.999882
`	O	O:0.999938
Figure	B-API	B-API:0.763108
`	O	O:0.999876
:	O	O:0.999404
	
Both	O	O:0.999880
the	O	O:0.999938
Figure	B-API	O:0.870644
and	O	O:0.999997
the	O	O:0.999986
Axes	B-API	O:0.979702
class	O	O:0.999992
have	O	O:0.999997
a	O	O:0.999986
`	O	O:0.999817
clear()	O	B-API:0.998303
`	O	O:0.999870
method	O	O:0.999886
.	O	O:0.999904
	
I	O	O:0.999152
had	O	O:0.999987
this	O	O:0.999933
same	O	O:0.999961
problem	O	O:0.999763
,	O	O:0.999916
and	O	O:0.999998
it	O	O:0.999960
was	O	O:0.999937
caused	O	O:0.999982
by	O	O:0.999982
calling	O	O:0.999547
`	O	O:0.999749
show()	O	B-API:0.998716
`	O	O:0.999976
on	O	O:0.999947
the	O	O:0.999988
Figure	B-API	O:0.977485
object	O	O:0.999997
instead	O	O:0.999998
of	O	O:0.999998
the	O	O:0.999977
pyplot	B-API	O:0.759365
object	O	O:0.999932
.	O	O:0.999730
	
It	O	O:0.999881
got	O	O:0.999963
wrapped	O	O:0.999979
up	O	O:0.999870
in	O	O:0.999997
a	O	O:0.999991
subclass	O	O:0.999885
of	O	O:0.999991
Figure	B-API	O:0.931321
,	O	O:0.999996
which	O	O:0.999995
also	O	O:0.999936
got	O	O:0.999999
level-of-detail	O	O:0.999647
functionality	O	O:0.999808
and	O	O:0.999987
context	O	O:0.961280
menus	O	O:0.999809
.	O	O:0.999659
	
I	O	O:0.999757
have	O	O:0.999994
an	O	O:0.999985
external	O	O:0.999672
function	O	O:0.997364
which	O	O:0.999915
returns	O	O:0.999961
a	O	O:0.999956
Figure	B-API	O:0.677054
object	O	O:0.999950
,	O	O:0.999979
and	O	O:0.999986
in	O	O:0.999998
this	O	O:0.999956
situation	O	O:0.999969
,	O	O:0.999992
each	O	O:0.999666
Figure	B-API	O:0.961935
object	O	O:0.999923
is	O	O:0.999993
composed	O	O:0.999980
of	O	O:0.999994
exactly	O	O:0.999979
one	O	O:0.999993
Axes	B-API	O:0.968774
object	O	O:0.999934
.	O	O:0.999752
	
While	O	O:0.999962
a	O	O:0.999942
search	O	O:0.999754
did	O	O:0.999990
lead	O	O:0.999986
me	O	O:0.999950
to	O	O:0.999988
see	O	O:1.000000
that	O	O:0.999967
pyplot.figure()	B-API	B-API:0.997701
is	O	O:0.999989
the	O	O:0.999973
development	O	O:0.999868
team's	O	O:0.999835
recommended	O	O:0.999729
instantiation	O	O:0.999980
technique	O	O:0.999983
,	O	O:0.999991
it	O	O:0.999980
doesn't	O	O:0.999984
change	O	O:0.999989
the	O	O:0.999981
question	O	O:0.998768
:	O	O:0.999892
is	O	O:0.999990
there	O	O:0.999994
any	O	O:0.997121
way	O	O:0.999958
to	O	O:0.999981
do	O	O:0.999990
Axes	B-API	O:0.990356
/	O	O:0.999932
Figure	B-API	O:0.988408
copy	O	O:0.946596
construction	O	O:0.999941
and	O	O:0.999961
Figure	B-API	O:0.967046
construction	O	O:0.999935
via	O	O:0.999985
composition	O	O:0.999966
of	O	O:0.999988
copied	O	O:0.999222
Axes	B-API	O:0.995383
?	O	O:0.999822
	
A	O	O:0.999915
reference	O	O:0.999824
to	O	O:0.999994
it	O	O:0.999997
isn't	O	O:0.999997
stored	O	O:0.999869
in	O	O:0.999994
the	O	O:0.999956
`	O	O:0.999941
Figure	B-API	O:0.555708
`	O	O:0.999979
object	O	O:0.999592
,	O	O:0.999993
but	O	O:0.999933
is	O	O:0.999996
stored	O	O:0.999782
in	O	O:0.999990
the	O	O:0.999920
`	O	O:0.999888
Canvas	O	O:0.999080
`	O	O:0.999976
object	O	O:0.999956
so	O	O:0.999993
you	O	O:0.999986
can	O	O:0.999994
destroy	O	O:0.999504
a	O	O:0.999956
window	O	O:0.999901
via	O	O:0.999986
#CODE	O	O:0.998697
	
Removing	O	O:0.999540
the	O	O:0.999719
`	O	O:0.999978
frameon=False	O	O:0.996810
`	O	O:0.999991
option	O	O:0.999952
from	O	O:0.999989
`	O	O:0.999971
f	O	O:0.922570
=	O	O:0.999852
Figure	B-API	O:0.715371
(	O	O:0.999952
figsize	O	O:0.995799
=(	O	O:0.999798
12	O	O:0.999409
,	O	O:0.999960
5	O	O:0.999810
)	O	O:0.999980
,	O	O:0.999973
dpi=100	O	O:0.999735
,	O	O:0.999991
frameon=False	O	O:0.999937
)`	O	O:0.999904
solved	O	O:0.999925
the	O	O:0.999950
issue	O	O:0.999775
.	O	O:0.999852
	
I	O	O:0.999586
used	O	O:0.999977
the	O	O:0.999924
Bar	B-API	O:0.958663
class	O	O:0.999993
to	O	O:0.999994
plot	O	O:0.999649
length	O	O:0.999998
of	O	O:0.999988
videos	O	O:0.999898
vs	O	O:0.999995
views	O	O:0.999897
which	O	O:0.999916
are	O	O:0.999990
the	O	O:0.999991
x	O	O:0.999800
and	O	O:0.999999
y	O	O:0.999994
values	O	O:0.988715
of	O	O:0.999995
the	O	O:0.999979
tuples	O	O:0.999954
.	O	O:0.999874
	
Animation	B-API	O:0.892712
will	O	O:0.999971
not	O	O:0.999998
work	O	O:0.999998
on	O	O:0.999992
inplace	O	O:0.982506
(	O	O:0.999992
or	O	O:0.999952
inline	O	O:0.991385
?	O	O:0.999983
)	O	O:0.999969
on	O	O:0.999917
notebook	O	O:0.999957
.	O	O:0.999877
	
By	O	O:0.999893
artifacts	O	O:0.999905
,	O	O:0.999989
I	O	O:0.999972
now	O	O:0.999994
understand	O	O:0.999922
to	O	O:0.999994
mean	O	O:0.998395
you	O	O:0.999980
are	O	O:0.999996
creating	O	O:0.999994
a	O	O:0.999973
second	O	O:0.789980
`	O	O:0.999916
Animation	B-API	O:0.526399
`	O	O:0.999947
object	O	O:0.999343
and	O	O:0.999998
what	O	O:0.999995
you	O	O:0.999981
get	O	O:0.993094
is	O	O:0.999998
both	O	O:0.999995
of	O	O:0.999998
them	O	O:0.999933
running	O	O:0.999966
in	O	O:0.999952
parallel	O	O:0.998165
(	O	O:0.999975
which	O	O:0.999945
I	O	O:0.999478
am	O	O:0.999994
not	O	O:0.999941
sure	O	O:0.999996
what	O	O:0.999972
I	O	O:0.999934
expect	O	O:0.999993
to	O	O:0.999941
happen	O	O:0.999999
there	O	O:0.999967
)	O	O:0.999981
.	O	O:0.999753
	
by	O	O:0.999757
`	O	O:0.999962
ax	O	O:0.998273
`	O	O:0.999983
I	O	O:0.999336
mean	O	O:0.998811
the	O	O:0.999973
current	O	O:0.999343
`	O	O:0.999981
Axis	B-API	O:0.735527
`	O	O:0.999981
object	O	O:0.999834
,	O	O:0.999993
which	O	O:0.999981
you	O	O:0.999938
were	O	O:0.999994
getting	O	O:0.999966
at	O	O:0.996999
via	O	O:0.999900
`	O	O:0.999948
gca	B-API	B-API:0.974221
`	O	O:0.999948
.	O	O:0.998811
	
Your	O	O:0.999622
legend	B-API	O:0.959297
command	O	O:0.999960
is	O	O:0.999986
using	O	O:0.999994
the	O	O:0.999953
markers	O	O:0.602321
,	O	O:0.999978
not	O	O:0.999998
the	O	O:0.999999
lines	O	O:0.997373
as	O	O:0.999997
inputs	O	O:0.999994
by	O	O:0.999987
using	O	O:0.999980
`	O	O:0.999853
plot	O	O:0.738772
[	O	O:0.999970
0	O	O:0.999363
]`	O	O:0.999500
.	O	O:0.999032
	
`	O	O:0.999819
Axes	B-API	O:0.887777
`	O	O:0.999992
objects	O	O:0.999858
know	O	O:0.999997
about	O	O:0.999986
things	O	O:0.999887
like	O	O:0.999990
tick	O	O:0.999974
location	O	O:0.999987
and	O	O:0.999992
labels	O	O:0.999801
and	O	O:0.999990
the	O	O:0.999994
display	O	O:0.997936
range	O	O:0.999953
(	O	O:0.999961
which	O	O:0.999993
it	O	O:0.999979
does	O	O:0.999997
by	O	O:0.999994
knowing	O	O:0.999975
about	O	O:0.999692
`	O	O:0.999869
Axis	B-API	O:0.582730
`	O	O:0.999965
object	O	O:0.999411
,	O	O:0.999992
but	O	O:0.999994
that	O	O:0.999897
is	O	O:0.999997
getting	O	O:0.999974
even	O	O:0.999990
more	O	O:0.999969
into	O	O:0.999934
the	O	O:0.999990
weeds	O	O:0.997598
)	O	O:0.999980
.	O	O:0.999558
	
Use	O	O:0.998314
Axis	B-API	O:0.886142
method	O	O:0.999949
`	O	O:0.999961
set_xscale	B-API	B-API:0.995249
`	O	O:0.999979
or	O	O:0.999639
`	O	O:0.999969
set_yscale	B-API	B-API:0.995394
`	O	O:0.999948
.	O	O:0.999213
	
`	O	O:0.999792
ax.set_xticks()	B-API	B-API:0.999666
`	O	O:0.999842
is	O	O:0.999950
a	O	O:0.999986
method	O	O:0.999982
of	O	O:0.999994
the	O	O:0.999928
`	O	O:0.999985
Axes	B-API	O:0.829099
`	O	O:0.999981
object	O	O:0.999890
,	O	O:0.999995
whilst	O	O:0.999470
`	O	O:0.999956
matplotlib.ticker.FixedLocator	B-API	B-API:0.965627
`	O	O:0.999891
is	O	O:0.999896
an	O	O:0.999970
object	O	O:0.999971
which	O	O:0.999923
is	O	O:0.999981
used	O	O:0.999966
with	O	O:0.999986
the	O	O:0.999903
`	O	O:0.999956
Axis	B-API	O:0.830233
`	O	O:0.999963
object	O	O:0.999137
(	O	O:0.999935
`	O	O:0.999967
Axes	B-API	O:0.811736
`	O	O:0.999970
is	O	O:0.999953
basically	O	O:0.999997
the	O	O:0.999999
whole	O	O:0.999855
graph	O	O:0.999991
,	O	O:0.999992
whilst	O	O:0.999776
`	O	O:0.999896
Axis	B-API	O:0.886275
`	O	O:0.999950
is	O	O:0.999981
just	O	O:0.999998
one	O	O:0.999999
of	O	O:0.999993
the	O	O:0.999836
(	O	O:0.999996
two	O	O:0.999989
)	O	O:0.999955
axis	O	O:0.947701
(	O	O:0.999990
x	O	O:0.999935
or	O	O:0.999985
y	O	O:0.999851
)	O	O:0.999979
.	O	O:0.999571
	
This	O	O:0.998386
is	O	O:0.999961
not	O	O:0.999984
particularly	O	O:0.999980
well	O	O:0.999980
documented	O	O:0.999763
,	O	O:0.999987
but	O	O:0.999908
`	O	O:0.999911
Polygon	B-API	O:0.953608
`	O	O:0.999995
objects	O	O:0.999651
have	O	O:0.999999
a	O	O:0.999997
pair	O	O:0.999992
of	O	O:0.999994
methods	O	O:0.999351
`	O	O:0.999991
get_xy	B-API	B-API:0.990696
`	O	O:0.999928
and	O	O:0.999753
`	O	O:0.999982
set_xy	B-API	B-API:0.999799
`	O	O:0.999940
.	O	O:0.998784
	
In	O	O:0.999958
particular	O	O:0.999945
,	O	O:0.999996
if	O	O:0.999957
/	O	O:0.999974
when	O	O:0.999965
there	O	O:0.999934
are	O	O:0.999996
so	O	O:0.999997
many	O	O:0.999986
circles	O	O:0.999557
for	O	O:0.999995
the	O	O:0.999989
figure	O	O:0.986570
to	O	O:0.999999
become	O	O:0.999998
connected	O	O:0.999977
,	O	O:0.999997
the	O	O:0.999985
`	O	O:0.999982
for	O	O:0.999982
polygon	O	O:0.999992
in	O	O:0.999948
polygons	O	O:0.997665
:	O	O:0.999883
`	O	O:0.999985
fails	O	O:0.999544
with	O	O:0.999999
a	O	O:0.999830
`	O	O:0.999187
TypeError	O	O:0.999617
:	O	O:0.999875
'	O	O:0.999875
Polygon	B-API	O:0.979431
'	O	O:0.999894
object	O	O:0.999667
is	O	O:0.999977
not	O	O:0.999972
iterable	O	O:0.842168
`	O	O:0.999878
.	O	O:0.998341
	
Just	O	O:0.999838
use	O	O:0.998162
the	O	O:0.999761
`	O	O:0.999743
Polygon	B-API	O:0.892663
`	O	O:0.999988
or	O	O:0.999669
`	O	O:0.999973
Rectangle	B-API	O:0.940324
`	O	O:0.999948
classes	O	O:0.993330
:	O	O:0.999970
#CODE	O	O:0.999745
	
As	O	O:0.999937
you	O	O:0.999979
can	O	O:0.999998
see	O	O:0.999999
,	O	O:0.999998
the	O	O:0.999995
edge	O	O:0.999779
is	O	O:0.999995
center-positioned	O	O:0.999876
along	O	O:0.999971
the	O	O:0.999971
border	O	O:0.999970
of	O	O:0.999997
the	O	O:0.999995
domain	O	O:0.999996
of	O	O:0.999988
the	O	O:0.999905
Rectangle	B-API	O:0.994273
object	O	O:0.999962
,	O	O:0.999971
and	O	O:0.999999
so	O	O:0.999994
bleeds	O	O:0.999297
into	O	O:0.999982
this	O	O:0.999824
domain	O	O:0.999800
.	O	O:0.999664
	
You	O	O:0.999882
can	O	O:0.999983
do	O	O:1.000000
this	O	O:0.999998
by	O	O:0.999968
overplotting	O	O:0.999975
a	O	O:0.999898
Rectangle	B-API	O:0.980436
patch	O	O:0.999988
on	O	O:0.999997
the	O	O:0.999995
cell	O	O:0.999997
that	O	O:0.999997
you	O	O:0.999996
would	O	O:0.999999
want	O	O:0.999999
to	O	O:0.999993
highlight	O	O:0.999990
.	O	O:0.999870
	
Currently	O	O:0.999895
I	O	O:0.999816
use	O	O:0.997042
the	O	O:0.999477
`	O	O:0.999679
add_patch	B-API	B-API:0.998127
(	O	O:0.999838
Rectangle	B-API	O:0.844249
(	O	O:0.999954
...	O	O:0.999928
))`	O	O:0.992714
,	O	O:0.999954
but	O	O:0.999989
it	O	O:0.999911
does	O	O:0.999985
not	O	O:0.999996
fit	O	O:0.999992
really	O	O:0.999951
well	O	O:0.999968
.	O	O:0.999902
	
Unfortunately	O	O:0.999914
it	O	O:0.999979
seems	O	O:0.999993
that	O	O:0.999995
the	O	O:0.999969
'	O	O:0.999863
Rectangle	B-API	O:0.989047
'	O	O:0.999886
object	O	O:0.999954
has	O	O:0.999975
no	O	O:0.999937
attribute	O	O:0.999857
'	O	O:0.999979
set_bottom	O	O:0.987728
'	O	O:0.999827
.	O	O:0.999699
	
You	O	O:0.999941
can	O	O:0.999996
acces	O	O:0.999992
ALL	O	O:0.999998
the	O	O:0.999996
properties	O	O:0.986142
of	O	O:0.999998
a	O	O:0.999950
`	O	O:0.999972
Tick	B-API	O:0.519871
`	O	O:0.999966
object	O	O:0.999678
using	O	O:0.999998
this	O	O:0.999091
approach	O	O:0.998169
:	O	O:0.999904
#CODE	O	O:0.999322
	
Fortunately	O	O:0.999711
you	O	O:0.999986
can	O	O:0.999999
update	O	O:0.999189
figures	O	O:0.999984
you've	O	O:0.999970
moved	O	O:0.999948
to	O	O:0.999995
where	O	O:0.999836
you	O	O:0.999996
want	O	O:1.000000
them	O	O:0.999987
pretty	O	O:0.999963
easily	O	O:0.999990
,	O	O:0.999998
by	O	O:0.999973
using	O	O:0.999991
the	O	O:0.999856
object	O	O:0.999636
interface	O	O:0.999988
specifically	O	O:0.999934
,	O	O:0.999989
and	O	O:0.999997
updating	O	O:0.999950
the	O	O:0.999741
Axes	B-API	O:0.972583
object	O	O:0.999989
without	O	O:0.999979
creating	O	O:0.999968
a	O	O:0.999965
new	O	O:0.998875
figure	O	O:0.964191
.	O	O:0.999677
	
(	O	O:0.999848
You	O	O:0.999956
can	O	O:0.999990
also	O	O:1.000000
always	O	O:0.999998
find	O	O:0.999727
this	O	O:0.999997
data	O	O:0.999681
inside	O	O:0.999993
the	O	O:0.999962
`	O	O:0.999938
Axes	B-API	O:0.845303
`	O	O:0.999977
object	O	O:0.999959
if	O	O:0.999995
you	O	O:0.999993
know	O	O:0.999994
where	O	O:0.998960
to	O	O:0.999935
look	O	O:0.999998
.	O	O:0.999930
)	O	O:0.999945
	
By	O	O:0.999906
deferring	O	O:0.999934
the	O	O:0.999987
expense	O	O:0.999984
of	O	O:0.999994
drawing	O	O:0.999905
you	O	O:0.999997
can	O	O:0.999998
greatly	O	O:0.999995
improve	O	O:0.999983
the	O	O:0.999994
performance	O	O:0.999998
of	O	O:0.999991
functions	O	O:0.999994
that	O	O:0.999997
make	O	O:0.999989
many	O	O:0.999971
calls	O	O:0.999820
to	O	O:0.999847
`	O	O:0.999954
Figure	B-API	B-API:0.576367
`	O	O:0.999964
and	O	O:0.999779
`	O	O:0.999982
Axes	B-API	O:0.732654
`	O	O:0.999972
methods	O	O:0.999077
.	O	O:0.999830
	
`	O	O:0.999868
Figure.add_subplot()	B-API	B-API:0.701478
`	O	O:0.999972
returns	O	O:0.999600
an	O	O:0.999939
`	O	O:0.999958
Axes	B-API	O:0.773478
`	O	O:0.999982
instance	O	O:0.999608
,	O	O:0.999978
and	O	O:0.999986
`	O	O:0.999965
pyplot.subplots()	B-API	B-API:0.999857
`	O	O:0.999964
returns	O	O:0.999518
an	O	O:0.999934
`	O	O:0.999956
Axis	B-API	O:0.730906
`	O	O:0.999982
object	O	O:0.999921
as	O	O:0.999998
second	O	O:0.967511
output	O	O:0.999791
parameter	O	O:0.999931
.	O	O:0.999410
	
As	O	O:0.999973
a	O	O:0.999916
side	O	O:0.999860
note	O	O:0.999920
,	O	O:0.999995
it	O	O:0.999925
is	O	O:0.999991
better	O	O:0.999951
to	O	O:0.999995
pass	O	O:0.999938
`	O	O:0.999959
Axes	B-API	O:0.959930
`	O	O:0.999994
objects	O	O:0.999763
into	O	O:0.999993
your	O	O:0.999855
function	O	O:0.998023
than	O	O:0.999993
create	O	O:0.999979
them	O	O:0.999955
(	O	O:0.999995
implicitly	O	O:0.999961
)	O	O:0.999967
internally	O	O:0.999649
.	O	O:0.999815
	
Here	O	O:0.999229
,	O	O:0.999992
what	O	O:0.999995
you	O	O:0.999991
have	O	O:0.999998
done	O	O:0.999991
is	O	O:0.999997
capture	O	O:0.999936
the	O	O:0.999970
`	O	O:0.999945
Axes	B-API	O:0.896238
`	O	O:0.999990
instance	O	O:0.999953
that	O	O:0.999958
is	O	O:0.999995
returned	O	O:0.999962
from	O	O:0.999968
`	O	O:0.999901
add_subplot()	B-API	B-API:0.999755
`	O	O:0.999946
.	O	O:0.998991
	
If	O	O:0.999854
I	O	O:0.999967
create	O	O:0.999980
an	O	O:0.999759
`	O	O:0.999981
Axes	B-API	O:0.723671
`	O	O:0.999985
object	O	O:0.999782
in	O	O:0.999972
`	O	O:0.999975
matplotlib	O	O:0.993589
`	O	O:0.999968
and	O	O:0.999976
mutate	O	O:0.999953
it	O	O:0.999619
(	O	O:0.999986
i.e.	O	O:0.999983
by	O	O:0.999967
plotting	O	O:0.997163
some	O	O:0.999973
data	O	O:0.997201
)	O	O:0.999996
and	O	O:0.999999
then	O	O:0.999993
I	O	O:0.999905
call	O	O:0.999977
a	O	O:0.999511
function	O	O:0.997095
without	O	O:0.999981
passing	O	O:0.999844
my	O	O:0.998586
`	O	O:0.999942
Axes	B-API	O:0.808319
`	O	O:0.999982
object	O	O:0.999852
to	O	O:0.999998
that	O	O:0.999995
function	O	O:0.999786
then	O	O:0.999999
that	O	O:0.999994
function	O	O:0.999371
can	O	O:0.999998
still	O	O:0.999999
mutate	O	O:0.999958
my	O	O:0.999855
`	O	O:0.999964
Axes	B-API	O:0.666429
`	O	O:0.999962
.	O	O:0.999270
	
Pass	O	O:0.999830
multiple	O	O:0.999903
matplotlib	O	O:0.999940
Axes	B-API	O:0.993516
objects	O	O:0.999843
from	O	O:0.999980
generator	O	O:0.999756
function	O	O:0.997732
and	O	O:0.999995
display	O	O:0.999990
them	O	O:0.999616
	
The	O	O:0.999849
`	O	O:0.999942
transform	B-API	B-API:0.898591
`	O	O:0.999903
in	O	O:0.999987
this	O	O:0.999990
case	O	O:0.999916
is	O	O:0.999995
a	O	O:0.999771
`	O	O:0.999908
BboxTransformTo	O	O:0.987922
`	O	O:0.999959
object	O	O:0.999749
,	O	O:0.999961
which	O	O:0.999726
:	O	O:0.999830
	
You	O	O:0.999946
can	O	O:0.999980
use	O	O:0.999759
the	O	O:0.999972
`	O	O:0.999945
transform	B-API	B-API:0.950887
`	O	O:0.999788
keyword	O	O:0.999278
:	O	O:0.999971
#CODE	O	O:0.999640
	
But	O	O:0.999960
when	O	O:0.999943
I	O	O:0.999893
checked	O	O:0.999988
the	O	O:0.999960
source	O	O:0.980303
code	O	O:0.999987
of	O	O:0.999977
draw_networkx_nodes	O	O:0.968512
draw_networkx	O	O:0.995003
,	O	O:0.999971
I	O	O:0.999840
realized	O	O:0.999961
that	O	O:0.999975
it	O	O:0.999857
is	O	O:0.999985
not	O	O:0.999994
a	O	O:0.999996
straight	O	O:0.999944
forward	O	O:0.995750
task	O	O:0.999946
as	O	O:0.999993
the	O	O:0.999985
draw	B-API	O:0.774049
function	O	O:0.998342
stores	O	O:0.999989
the	O	O:0.999989
positions	O	O:0.999608
(	O	O:0.999989
nodes	O	O:0.999978
and	O	O:0.999996
edges	O	O:0.999983
)	O	O:0.999909
in	O	O:0.999995
a	O	O:0.999982
numpy	O	O:0.999785
array	O	O:0.991729
,	O	O:0.999990
send	O	O:0.999989
it	O	O:0.999983
to	O	O:0.999998
the	O	O:0.999998
ax.scatter	B-API	B-API:0.900925
function	O	O:0.999441
of	O	O:0.999984
matplotlib	O	O:0.999047
(	O	O:0.999989
sourcecode	O	O:0.999959
)	O	O:0.999985
which	O	O:0.999805
is	O	O:0.999996
a	O	O:0.999992
bit	O	O:0.999787
hard	O	O:0.999966
to	O	O:0.999994
manipulate	O	O:0.999998
without	O	O:0.999982
messing	O	O:0.999981
something	O	O:0.999951
up	O	O:0.999763
.	O	O:0.999845
	
This	O	O:0.999953
simply	O	O:0.999820
calls	O	O:0.999990
the	O	O:0.999972
draw	B-API	O:0.765446
method	O	O:0.999996
of	O	O:0.999997
the	O	O:0.999997
figure	O	O:0.981090
periodically	O	O:0.999937
.	O	O:0.999886
	
Then	O	O:0.999816
I	O	O:0.999993
just	O	O:0.999994
added	O	O:0.999988
a	O	O:0.999993
signal	O	O:0.999858
to	O	O:0.999985
the	O	O:0.999999
custom	O	O:0.999444
version	O	O:0.999955
and	O	O:0.999991
overrode	O	O:0.999968
the	O	O:0.999939
draw	B-API	O:0.753821
method	O	O:0.999981
.	O	O:0.999897
	
EDIT	O	O:0.996419
:	O	O:0.999861
I'm	O	O:0.999955
super	O	O:0.999971
blind	O	O:0.999967
,	O	O:0.999995
sorry	O	O:0.999945
for	O	O:0.999997
that	O	O:0.999978
,	O	O:0.999982
you're	O	O:0.999982
calling	O	O:0.999925
the	O	O:0.999959
draw	B-API	O:0.857069
method	O	O:0.999993
,	O	O:0.999993
however	O	O:0.999998
it	O	O:0.999947
is	O	O:0.999999
a	O	O:0.999994
good	O	O:0.999782
idea	O	O:0.999985
to	O	O:0.999986
add	O	O:0.997552
*	O	O:0.999984
args	O	O:0.999612
and	O	O:0.999984
**	O	O:0.999985
kwargs	O	O:0.999071
to	O	O:0.999988
any	O	O:0.999707
overriden	O	O:0.999896
methods	O	O:0.999980
..	O	O:0.999680
try	O	O:0.999956
that	O	O:0.999964
,	O	O:0.999995
and	O	O:0.999999
perhaps	O	O:0.999969
call	O	O:0.999904
FancyBboxPatch.draw	O	O:0.997940
at	O	O:0.998011
the	O	O:0.999997
end	O	O:0.999984
of	O	O:0.999977
overriden	O	O:0.999462
method	O	O:0.999994
	
I'm	O	O:0.999444
also	O	O:0.999959
panning	O	O:0.999916
and	O	O:0.999985
zooming	O	O:0.999895
into	O	O:0.999826
this	O	O:0.999930
figure	O	O:0.920068
,	O	O:0.999984
and	O	O:0.999998
have	O	O:0.999994
been	O	O:0.999918
using	O	O:0.999997
the	O	O:0.999863
draw	B-API	O:0.819527
method	O	O:0.999997
to	O	O:0.999993
show	O	O:0.999801
the	O	O:0.999996
new	O	O:0.999974
perspectives	O	O:0.999896
from	O	O:0.999992
zooming	O	O:0.999743
in	O	O:0.999853
(	O	O:0.999985
using	O	O:0.999967
set_xlim	B-API	B-API:0.997738
and	O	O:0.999893
set_ylim	B-API	B-API:0.976540
)	O	O:0.999657
and	O	O:0.999991
from	O	O:0.999950
panning	O	O:0.988747
(	O	O:0.999935
drag_pan	B-API	B-API:0.935673
and	O	O:0.999985
start_pan	B-API	B-API:0.837204
)	O	O:0.999797
.	O	O:0.999359
	
I	O	O:0.999583
would	O	O:0.999990
use	O	O:0.986262
`	O	O:0.999854
ax.autoscale	B-API	B-API:0.998557
(	O	O:0.999982
enable=False	O	O:0.999888
)`	O	O:0.999762
before	O	O:0.999965
your	O	O:0.999956
call	O	O:0.999684
to	O	O:0.999945
`	O	O:0.999997
scatter	B-API	B-API:0.638725
`	O	O:0.999954
.	O	O:0.999102
	
You	O	O:0.999926
can	O	O:0.999994
perhaps	O	O:0.999998
loop	O	O:0.999998
into	O	O:0.999985
your	O	O:0.999815
`	O	O:0.999952
AxesSubplot	O	O:0.997092
`	O	O:0.999981
objects	O	O:0.998901
and	O	O:0.999996
call	O	O:0.999667
`	O	O:0.999934
autoscale	B-API	B-API:0.934752
`	O	O:0.999970
passing	O	O:0.999561
the	O	O:0.999936
`	O	O:0.999941
axis	O	O:0.896367
`	O	O:0.999920
parameter	O	O:0.999572
:	O	O:0.999968
#CODE	O	O:0.999667
	
@USER	O	O:0.996142
-	O	O:0.999966
If	O	O:0.999934
you'd	O	O:0.999996
like	O	O:0.999996
to	O	O:0.999996
rescale	O	O:0.999992
the	O	O:0.999988
axes	B-API	O:0.995368
,	O	O:0.999995
call	O	O:0.999604
`	O	O:0.999950
ax.autoscale()	B-API	B-API:0.999487
`	O	O:0.999996
every	O	O:0.999804
time	O	O:0.999597
you	O	O:0.999989
remove	O	O:0.998668
a	O	O:0.999983
point	O	O:0.999799
.	O	O:0.999899
	
Python	O	O:0.997438
:	O	O:0.999962
Add	O	O:0.999979
x-y	O	O:0.999988
margins	B-API	O:0.990246
automatically	O	O:0.999981
with	O	O:0.999987
autoscale	B-API	B-API:0.769049
(	O	O:0.999976
pyplot	B-API	O:0.809024
)	O	O:0.999872
	
Ahh	O	O:0.999124
,	O	O:0.999888
it's	O	O:0.999975
the	O	O:0.999990
call	O	O:0.999873
to	O	O:0.999987
`	O	O:0.999999
autoscale	B-API	B-API:0.863979
`	O	O:0.999982
that	O	O:0.999933
I'm	O	O:0.999938
missing	O	O:0.999903
.	O	O:0.999817
	
The	O	O:0.999922
trick	O	O:0.999797
is	O	O:0.999986
at	O	O:0.998647
the	O	O:0.999998
end	O	O:0.999969
,	O	O:0.999983
in	O	O:0.999994
the	O	O:0.999996
custom	O	O:0.997591
refresh	B-API	O:0.864714
method	O	O:0.999928
!	O	O:0.999808
	
For	O	O:0.999935
what	O	O:0.999836
you're	O	O:0.999965
wanting	O	O:0.999983
to	O	O:0.999996
do	O	O:0.999997
,	O	O:0.999988
you'd	O	O:0.999991
be	O	O:0.999994
far	O	O:0.999994
better	O	O:0.999953
off	O	O:0.999995
using	O	O:0.999976
annotate	B-API	B-API:0.837198
.	O	O:0.997586
	
It's	O	O:0.999834
quite	O	O:0.999960
simple	O	O:0.999937
to	O	O:0.999995
do	O	O:0.999997
manually	O	O:0.999976
with	O	O:0.999990
`	O	O:0.999975
annotate	B-API	B-API:0.946318
`	O	O:0.999932
.	O	O:0.999279
	
If	O	O:0.999768
you're	O	O:0.999963
wanting	O	O:0.999983
to	O	O:0.999996
adjust	O	O:0.999991
vertical	O	O:0.999957
alignment	O	O:0.999967
,	O	O:0.999988
horizontal	O	O:0.999879
alignment	O	O:0.999974
,	O	O:0.999990
etc	O	O:0.999982
,	O	O:0.999999
just	O	O:0.999998
add	O	O:0.999313
those	O	O:0.999997
as	O	O:0.999992
arguments	O	O:0.999851
to	O	O:0.999973
`	O	O:0.999998
annotate	B-API	B-API:0.958650
`	O	O:0.999827
(	O	O:0.999843
e.g.	O	O:0.999847
`	O	O:0.999891
horizontalalignment=	O	O:0.999190
'	O	O:0.999984
right	O	O:0.999941
'`	O	O:0.999949
or	O	O:0.999980
equivalently	O	O:0.999675
`	O	O:0.999937
ha=	O	O:0.999239
'	O	O:0.999984
right	O	O:0.999836
'`)	O	O:0.999854
	
It's	O	O:0.999834
quite	O	O:0.999960
simple	O	O:0.999937
to	O	O:0.999995
do	O	O:0.999997
manually	O	O:0.999976
with	O	O:0.999990
`	O	O:0.999975
annotate	B-API	B-API:0.946318
`	O	O:0.999932
.	O	O:0.999279
	
You	O	O:0.999950
can	O	O:0.999979
use	O	O:0.999904
the	O	O:0.999979
annotate	B-API	B-API:0.832236
command	O	O:0.999984
to	O	O:0.999995
place	O	O:0.999967
text	O	O:0.997880
annotations	O	O:0.999891
at	O	O:0.998210
any	O	O:0.991808
x	O	O:0.999729
and	O	O:0.999998
y	O	O:0.999970
values	O	O:0.984061
you	O	O:0.999978
want	O	O:0.999990
.	O	O:0.999876
	
+1	O	O:0.999813
Just	O	O:0.999947
as	O	O:0.999999
a	O	O:0.999942
side	O	O:0.999846
note	O	O:0.999976
,	O	O:0.999982
annotate	B-API	O:0.616480
has	O	O:0.999909
"	O	O:0.999989
offseting	O	O:0.999772
the	O	O:0.999970
annotations	O	O:0.999908
a	O	O:0.999993
little	O	O:0.998920
"	O	O:0.999951
built-in	O	O:0.990041
.	O	O:0.998749
	
While	O	O:0.999763
there's	O	O:0.999927
nothing	O	O:0.999965
wrong	O	O:0.999964
with	O	O:0.999997
Ofri's	O	O:0.999638
answer	O	O:0.999948
,	O	O:0.999973
`	O	O:0.999983
annotate	B-API	B-API:0.921847
`	O	O:0.999915
is	O	O:0.999971
intended	O	O:0.999981
especially	O	O:0.999890
for	O	O:0.999997
this	O	O:0.999403
purpose	O	O:0.998827
:	O	O:0.999928
#CODE	O	O:0.998715
	
Just	O	O:0.999891
use	O	O:0.992069
`	O	O:0.999896
annotate	B-API	B-API:0.984489
`	O	O:0.999934
and	O	O:0.999991
specify	O	O:0.999989
axis	O	O:0.987415
coordinates	O	O:0.999808
.	O	O:0.999693
	
It	O	O:0.999552
is	O	O:0.999991
also	O	O:0.999994
possible	O	O:0.999993
to	O	O:0.999989
make	O	O:0.999999
an	O	O:0.999989
arrow	O	O:0.997838
with	O	O:0.999996
text	O	O:0.988941
,	O	O:0.999994
using	O	O:0.999997
the	O	O:0.999825
annotate	B-API	B-API:0.943171
method	O	O:0.999955
.	O	O:0.999781
	
The	O	O:0.999911
closest	O	O:0.941511
thing	O	O:0.999985
I	O	O:0.999928
have	O	O:0.999991
been	O	O:0.999929
able	O	O:0.999995
to	O	O:0.999998
find	O	O:0.999487
while	O	O:0.999998
searching	O	O:0.999967
here	O	O:0.999653
is	O	O:0.999993
the	O	O:0.999978
annotate	B-API	B-API:0.766710
command	O	O:0.999854
,	O	O:0.999988
but	O	O:0.999996
that	O	O:0.999952
appears	O	O:0.999994
to	O	O:0.999998
create	O	O:0.999996
a	O	O:0.999996
fixed	O	O:0.999915
label	O	O:0.999988
on	O	O:0.999988
the	O	O:0.999978
plot	O	O:0.982557
.	O	O:0.999919
	
`	O	O:0.999410
plt.annotate	B-API	B-API:0.997140
(	O	O:0.999805
'	O	O:0.999969
Something	O	O:0.999815
'	O	O:0.999830
,	O	O:0.999960
(	O	O:0.999972
0	O	O:0.999890
,	O	O:0.999974
0	O	O:0.999860
)	O	O:0.999955
,	O	O:0.999825
(	O	O:0.999976
0	O	O:0.999824
,	O	O:0.999966
-20	O	O:0.999657
)	O	O:0.999972
,	O	O:0.999910
xycoords=	O	O:0.999847
'	O	O:0.999952
axes	B-API	O:0.991765
fraction	O	O:0.999951
'	O	O:0.999938
,	O	O:0.999974
textcoords=	O	O:0.999763
'	O	O:0.999970
offset	O	O:0.993564
points	O	O:0.999814
'	O	O:0.999960
,	O	O:0.999962
va=	O	O:0.999796
'	O	O:0.999958
top	O	O:0.999444
')`	O	O:0.999794
	
@USER	O	O:0.996720
I'm	O	O:0.999810
not	O	O:0.999980
sure	O	O:0.999992
why	O	O:0.999992
we	O	O:0.999994
have	O	O:0.999999
to	O	O:0.999998
explicitly	O	O:0.999997
call	O	O:0.999774
`	O	O:0.999970
draw	B-API	B-API:0.718115
`	O	O:0.999954
.	O	O:0.999348
	
The	O	O:0.999637
`	O	O:0.999819
boxplot	B-API	O:0.894378
`	O	O:0.999957
function	O	O:0.998127
only	O	O:0.999994
plots	O	O:0.999957
quartiles	O	O:0.999934
(	O	O:0.999966
0	O	O:0.999876
,	O	O:0.999958
25	O	O:0.999701
,	O	O:0.999971
50	O	O:0.999796
,	O	O:0.999977
75	O	O:0.999811
,	O	O:0.999978
100	O	O:0.999516
)	O	O:0.999952
.	O	O:0.999564
	
Is	O	O:0.999880
there	O	O:0.999979
any	O	O:0.997300
way	O	O:0.999941
I	O	O:0.999959
can	O	O:0.999996
extract	O	O:0.997242
these	O	O:0.999998
values	O	O:0.995707
for	O	O:0.999996
use	O	O:0.994849
in	O	O:0.999954
my	O	O:0.999981
downstream	O	O:0.999935
code	O	O:0.999972
from	O	O:0.999992
the	O	O:0.999959
boxplot	B-API	O:0.970212
object	O	O:0.999962
?	O	O:0.999911
	
I	O	O:0.999365
am	O	O:0.999969
plotting	O	O:0.981409
a	O	O:0.999980
non-normal	O	O:0.998460
distribution	O	O:0.999977
using	O	O:0.999937
boxplot	B-API	O:0.933062
and	O	O:0.999990
interested	O	O:0.999866
in	O	O:0.999957
finding	O	O:0.999960
out	O	O:0.999994
about	O	O:0.999990
outliers	O	O:0.999943
using	O	O:0.999963
boxplot	B-API	O:0.954601
function	O	O:0.997321
of	O	O:0.999946
matplotlib	O	O:0.999406
.	O	O:0.999885
	
You	O	O:0.999934
should	O	O:0.999956
use	O	O:0.999228
the	O	O:0.999963
`	O	O:0.999774
hist	B-API	B-API:0.946547
`	O	O:0.999834
function	O	O:0.981013
.	O	O:0.999870
	
An	O	O:0.999943
similar	O	O:0.999972
example	O	O:0.999989
of	O	O:0.999997
such	O	O:0.999990
plot	O	O:0.989450
is	O	O:0.999963
"	O	O:0.999681
hist	B-API	B-API:0.971303
(	O	O:0.999922
x	O	O:0.999508
,	O	O:0.999922
orientation=	O	O:0.999912
'	O	O:0.999967
horizontal	O	O:0.999319
')"	O	O:0.999776
.	O	O:0.998956
	
I	O	O:0.999895
need	O	O:0.999996
to	O	O:0.999939
use	O	O:0.999870
the	O	O:0.999949
`	O	O:0.999833
hist	B-API	B-API:0.936679
`	O	O:0.999941
function	O	O:0.991822
,	O	O:0.999993
I	O	O:0.999945
have	O	O:0.999992
looked	O	O:0.999845
elsewhere	O	O:0.999964
on	O	O:0.999996
this	O	O:0.999884
site	O	O:0.999993
but	O	O:0.999952
I	O	O:0.999722
haven't	O	O:0.999963
found	O	O:0.999625
anything	O	O:0.999923
.	O	O:0.999691
	
I	O	O:0.999698
tried	O	O:0.999983
doing	O	O:0.998492
hist	B-API	B-API:0.971034
(	O	O:0.999835
x	O	O:0.999597
/	O	O:0.999927
x.sum()	O	O:0.988051
)	O	O:0.999975
but	O	O:0.999992
that	O	O:0.999979
reduce	O	O:0.998957
the	O	O:0.999998
values	O	O:0.992137
of	O	O:0.999999
the	O	O:0.999998
numbers	O	O:0.999917
in	O	O:0.999996
the	O	O:0.999993
x	O	O:0.999762
axis	O	O:0.987593
and	O	O:0.999988
does	O	O:0.999987
not	O	O:0.999986
change	O	O:0.999997
their	O	O:0.999973
frequency	O	O:0.999949
,	O	O:0.999974
so	O	O:0.999989
the	O	O:0.999968
y-axis	O	O:0.999887
is	O	O:0.999992
unchanged	O	O:0.999846
	
How	O	O:0.999904
can	O	O:0.999984
I	O	O:0.999997
prevent	O	O:0.999994
the	O	O:0.999982
labels	O	O:0.999958
of	O	O:0.999979
`	O	O:0.999980
xticks	B-API	B-API:0.738054
`	O	O:0.999992
from	O	O:0.999974
overlapping	O	O:0.999854
with	O	O:0.999997
the	O	O:0.999993
labels	O	O:0.999981
of	O	O:0.999982
`	O	O:0.999984
yticks	B-API	B-API:0.806213
`	O	O:0.999994
when	O	O:0.999939
using	O	O:0.999991
`	O	O:0.999888
hist	B-API	B-API:0.996218
`	O	O:0.999878
(	O	O:0.999459
or	O	O:0.999996
other	O	O:0.999993
plotting	O	O:0.993229
commands	O	O:0.999935
)	O	O:0.999981
in	O	O:0.999967
matplotlib	O	O:0.999656
?	O	O:0.999803
	
An	O	O:0.999941
easy	O	O:0.999926
way	O	O:0.999982
to	O	O:0.999982
do	O	O:0.999999
this	O	O:0.999965
is	O	O:0.999991
to	O	O:0.999996
add	O	O:0.997826
`	O	O:0.999990
0j	O	O:0.994225
`	O	O:0.999986
to	O	O:0.999965
the	O	O:1.000000
argument	O	O:0.999992
of	O	O:0.999996
the	O	O:0.999982
`	O	O:0.999989
sqrt	B-API	B-API:0.822031
`	O	O:0.999991
,	O	O:0.999958
like	O	O:0.999999
this	O	O:0.999994
,	O	O:0.999990
`	O	O:0.999946
sqrt	B-API	B-API:0.943356
(	O	O:0.999980
1+0j-	O	O:0.999187
(	O	O:0.999916
1	O	O:0.999820
/	O	O:0.999955
x	O	O:0.999754
)	O	O:0.999942
**2	O	O:0.999669
)`	O	O:0.999425
.	O	O:0.998453
	
You	O	O:0.999963
need	O	O:0.999996
to	O	O:0.999998
set	O	O:0.999904
the	O	O:0.999999
new	O	O:0.999987
coordinates	O	O:0.999983
of	O	O:0.999998
the	O	O:0.999998
datapoints	O	O:0.999954
in	O	O:0.999996
the	O	O:0.999995
internal	O	O:0.999133
`	O	O:0.999989
_ofsets3d	O	O:0.953706
`	O	O:0.999997
variable	O	O:0.999920
of	O	O:0.999995
the	O	O:0.999906
`	O	O:0.999995
Line3DCollection	O	O:0.993711
`	O	O:0.999985
object	O	O:0.999981
returned	O	O:0.999986
by	O	O:0.999969
the	O	O:0.999944
`	O	O:0.999976
scatter	B-API	O:0.721480
`	O	O:0.999862
function	O	O:0.984719
.	O	O:0.999871
	
You	O	O:0.999924
can	O	O:0.999986
use	O	O:0.999076
`	O	O:0.999973
scatter	B-API	B-API:0.606721
`	O	O:0.999942
for	O	O:0.999979
this	O	O:0.999948
,	O	O:0.999981
but	O	O:0.999991
that	O	O:0.999964
requires	O	O:0.999985
having	O	O:0.999995
numerical	O	O:0.999887
values	O	O:0.968212
for	O	O:0.999996
your	O	O:0.999947
`	O	O:0.999929
key1	O	O:0.992415
`	O	O:0.999961
,	O	O:0.999735
and	O	O:0.999998
you	O	O:0.999991
won't	O	O:0.999980
have	O	O:1.000000
a	O	O:0.999995
legend	B-API	O:0.993211
,	O	O:0.999996
as	O	O:0.999996
you	O	O:0.999858
noticed	O	O:0.999880
.	O	O:0.999878
	
The	O	O:0.999548
`	O	O:0.999884
scatter	B-API	B-API:0.599302
`	O	O:0.999934
and	O	O:0.999851
`	O	O:0.999978
hist	B-API	B-API:0.975000
`	O	O:0.999977
commands	O	O:0.999818
really	O	O:0.999980
expect	O	O:0.999935
`	O	O:0.999981
x	O	O:0.995267
`	O	O:0.999966
and	O	O:0.999898
`	O	O:0.999994
y	O	O:0.989294
`	O	O:0.999988
to	O	O:0.999943
be	O	O:1.000000
1D	O	O:0.999908
arrays	O	O:0.999437
.	O	O:0.999580
	
I'm	O	O:0.999611
wondering	O	O:0.999933
if	O	O:0.999996
it	O	O:0.999956
is	O	O:0.999995
possible	O	O:0.999979
to	O	O:0.999997
have	O	O:1.000000
individual	O	O:0.999993
alpha	O	O:0.999732
values	O	O:0.994109
for	O	O:0.999995
each	O	O:0.999930
point	O	O:0.999975
to	O	O:0.999997
be	O	O:0.999999
plotted	O	O:0.999974
using	O	O:0.999988
the	O	O:0.999954
scatter	B-API	O:0.659102
function	O	O:0.998572
of	O	O:0.999912
Matplotlib	O	O:0.999630
.	O	O:0.999860
	
The	O	O:0.999781
problem	O	O:0.999301
happens	O	O:0.999990
when	O	O:0.999981
I	O	O:0.999708
call	O	O:0.999972
the	O	O:0.999927
scatter	B-API	O:0.541612
function	O	O:0.997118
.	O	O:0.999744
	
If	O	O:0.999889
you	O	O:0.999984
are	O	O:0.999997
trying	O	O:0.999996
to	O	O:0.999997
create	O	O:0.999997
an	O	O:0.999983
animation	O	O:0.998741
,	O	O:0.999996
look	O	O:0.999988
in	O	O:0.999987
to	O	O:0.999995
the	O	O:0.999997
`	O	O:0.999939
animation	B-API	O:0.944478
`	O	O:0.999996
module	O	O:0.999967
of	O	O:0.999993
matplotlib	O	O:0.999635
,	O	O:0.999997
it	O	O:0.999936
takes	O	O:0.999961
care	O	O:0.999989
of	O	O:0.999998
a	O	O:0.999987
lot	O	O:0.999952
of	O	O:0.999992
the	O	O:0.999971
details	O	O:0.999994
for	O	O:0.999993
you	O	O:0.999977
.	O	O:0.999896
	
Apparently	O	O:0.999320
,	O	O:0.999994
the	O	O:0.999972
"	O	O:0.999820
Animation	B-API	O:0.975319
"	O	O:0.999982
class	O	O:0.999982
of	O	O:0.999956
Matplotlib	O	O:0.998869
runs	O	O:0.999965
the	O	O:0.999978
animation	O	O:0.986981
in	O	O:0.999998
a	O	O:0.999996
separate	O	O:0.996415
thread	O	O:0.999890
.	O	O:0.999586
	
It	O	O:0.999940
simply	O	O:0.999978
don't	O	O:0.999985
use	O	O:0.995247
the	O	O:0.999848
Animation	B-API	O:0.948515
class	O	O:0.999962
and	O	O:0.999991
builds	O	O:0.999992
its	O	O:0.999881
own	O	O:0.999939
animation	O	O:0.995545
from	O	O:0.999953
crash	O	O:0.999824
.	O	O:0.999863
	
I	O	O:0.999757
think	O	O:0.999946
`	O	O:0.999839
axis	O	O:0.915677
([	O	O:0.999990
xo	O	O:0.999016
,	O	O:0.999966
x1	O	O:0.999651
,	O	O:0.999972
y0	O	O:0.999802
,	O	O:0.999982
y1	O	O:0.999774
])`	O	O:0.999869
is	O	O:0.999914
in	O	O:0.999988
terms	O	O:0.999995
of	O	O:0.999993
proportion	O	O:0.999919
of	O	O:0.999997
the	O	O:0.999987
Figure	B-API	O:0.985055
,	O	O:0.999992
not	O	O:0.999998
the	O	O:1.000000
data	O	O:0.998035
transform	O	O:0.850506
.	O	O:0.999838
	
I	O	O:0.999583
used	O	O:0.999975
the	O	O:0.999940
scatter	B-API	O:0.740829
function	O	O:0.997757
and	O	O:0.999992
plotted	O	O:0.999988
the	O	O:0.999979
points	O	O:0.999412
,	O	O:0.999989
but	O	O:0.999996
the	O	O:0.999992
surface	O	O:0.999093
function	O	O:0.992532
is	O	O:0.999988
not	O	O:0.999979
working	O	O:0.999331
(	O	O:0.999984
the	O	O:0.999935
window	O	O:0.999674
is	O	O:0.999996
empty	O	O:0.930542
)	O	O:0.999953
.	O	O:0.999132
	
The	O	O:0.999904
solution	O	O:0.999678
I	O	O:0.999967
found	O	O:0.999897
for	O	O:0.999971
this	O	O:0.999923
involves	O	O:0.999957
using	O	O:0.999985
Normalize	B-API	O:0.614480
to	O	O:0.999925
make	O	O:1.000000
a	O	O:0.999995
normalised	O	O:0.998587
colour	O	O:0.999990
list	O	O:0.998736
based	O	O:0.999932
on	O	O:0.999991
the	O	O:0.999995
relevant	O	O:0.999993
data	O	O:0.999599
,	O	O:0.999998
mapping	O	O:0.999998
it	O	O:0.999980
to	O	O:0.999997
a	O	O:0.999999
ScalarMappable	B-API	B-API:0.707038
,	O	O:0.999982
and	O	O:0.999998
using	O	O:0.999998
that	O	O:0.999949
to	O	O:0.999993
set	O	O:0.999782
the	O	O:0.999996
face	O	O:0.999821
colour	O	O:0.999980
and	O	O:0.999999
c	O	O:0.999967
limits	O	O:0.999886
on	O	O:0.999989
each	O	O:0.999990
frame	O	O:0.999998
of	O	O:0.999996
the	O	O:0.999914
animation	O	O:0.997423
.	O	O:0.999885
	
But	O	O:0.999920
because	O	O:0.999984
all	O	O:0.998991
of	O	O:1.000000
the	O	O:0.999989
functionality	O	O:0.999989
relies	O	O:0.999951
on	O	O:0.999996
the	O	O:0.999994
hook	O	O:0.999936
,	O	O:0.999998
when	O	O:0.999992
the	O	O:0.999984
canvas	O	O:0.999958
is	O	O:0.999993
finally	O	O:0.999944
shown	O	O:0.999975
I	O	O:0.999941
presume	O	O:0.999972
Python's	O	O:0.999413
garbage	O	O:0.999781
collection	O	O:0.999948
has	O	O:0.999966
removed	O	O:0.999844
the	O	O:0.999966
Animation	B-API	O:0.965023
instance	O	O:0.999961
---	O	O:0.999951
since	O	O:0.999964
it	O	O:0.999925
was	O	O:0.999989
never	O	O:0.999987
assigned	O	O:0.999936
to	O	O:0.999987
a	O	O:0.999996
variable	O	O:0.999915
---	O	O:0.999970
and	O	O:0.999992
therefore	O	O:0.999998
the	O	O:0.999981
animation	O	O:0.992613
can	O	O:0.999992
never	O	O:0.999998
be	O	O:0.999993
started	O	O:0.999801
.	O	O:0.999507
	
Notice	O	O:0.999380
`	O	O:0.999969
xytext	O	O:0.959460
=	O	O:0.999145
(	O	O:0.999881
0	O	O:0.999804
,	O	O:0.999962
0	O	O:0.999878
)`	O	O:0.999627
means	O	O:0.999890
no	O	O:0.999949
offset	O	O:0.965677
,	O	O:0.999965
and	O	O:0.999999
omitting	O	O:0.999642
`	O	O:0.999904
arrowprops	O	O:0.990325
`	O	O:0.999979
causes	O	O:0.991746
`	O	O:0.999964
plt.annotate	B-API	B-API:0.995042
`	O	O:0.999944
to	O	O:0.999942
not	O	O:0.999999
draw	O	O:0.995531
an	O	O:0.999949
arrow	O	O:0.995042
.	O	O:0.999771
	
