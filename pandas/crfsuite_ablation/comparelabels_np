`	O	O:0.999895
fromiter	B-API	B-API:0.995054
`	O	O:0.999991
wants	O	O:0.999792
a	O	O:0.999993
1d	O	O:0.999602
input	O	O:0.999770
,	O	O:0.999992
e.g.	O	O:0.999271
`	O	O:0.999969
[	O	O:0.999922
1	O	O:0.999993
,	O	O:0.999955
2	O	O:0.999939
,	O	O:0.999978
3	O	O:0.999892
]`	O	O:0.999852
(	O	O:0.999978
or	O	O:0.999997
the	O	O:0.999976
generator	O	O:0.999959
equivalent	O	O:0.999392
)	O	O:0.999980
.	O	O:0.999832
	
read	O	O:0.995362
more	O	O:0.999368
:	O	O:0.999968
take()	B-API	O:0.938495
	
For	O	O:0.999964
this	O	O:0.999837
I'm	O	O:0.999996
using	O	O:0.999964
an	O	O:0.999976
instance	O	O:0.999754
of	O	O:0.999982
the	O	O:0.999905
`	O	O:0.999996
numpy	O	O:0.996154
`	O	O:0.999997
class	O	O:0.997543
`	O	O:0.999986
RandomState	B-API	B-API:0.989070
`	O	O:0.999967
.	O	O:0.999504
	
You	O	O:0.999903
can	O	O:0.999965
write	O	O:0.999996
a	O	O:0.999999
thinly	O	O:0.998784
wrapped	O	O:0.999934
subclass	O	O:0.999374
to	O	O:0.999952
`	O	O:0.999998
np.ndarray	B-API	B-API:0.993711
`	O	O:0.999979
.	O	O:0.999594
	
Using	O	O:0.997824
`	O	O:0.999777
ndarray.reshape	B-API	O:0.543285
`	O	O:0.999977
#CODE	O	O:0.998045
	
E.g.	O	O:0.999719
this	O	O:0.999914
works	O	O:0.999912
in	O	O:0.999987
the	O	O:0.999664
interpreter	O	O:0.999198
:	O	O:0.999897
`	O	O:0.999991
>>>	O	O:0.999871
a	O	O:0.999992
=	O	O:0.995520
np.arange	B-API	B-API:0.994249
(	O	O:0.999886
10	O	O:0.999891
,	O	O:0.999987
dtype=float	O	O:0.961744
)	O	O:0.999920
.resize	B-API	B-API:0.999530
(	O	O:0.999947
1	O	O:0.999909
,	O	O:0.999983
5	O	O:0.999967
)`	O	O:0.999870
,	O	O:0.999987
because	O	O:0.999964
the	O	O:0.999875
interpreter	O	O:0.999913
doesn't	O	O:0.999799
"	O	O:0.999996
see	O	O:0.999886
"	O	O:0.999985
the	O	O:0.999959
intermediate	O	O:0.999447
value	O	O:0.999594
.	O	O:0.999775
	
I	O	O:0.999940
attempted	O	O:0.999992
your	O	O:0.996931
suggestion	O	O:0.998457
but	O	O:0.999973
got	O	O:0.999882
stuck	O	O:0.999846
trying	O	O:0.999941
to	O	O:0.999996
iterate	O	O:0.999978
through	O	O:0.999865
the	O	O:0.999990
existing	O	O:0.998891
dtype	B-API	B-API:0.996576
.	O	O:0.999693
	
`	O	O:0.999447
numpy.setdiff1d	B-API	B-API:0.997219
(	O	O:0.999998
a	O	O:0.999993
,	O	O:0.999990
a	O	O:0.999985
[	O	O:0.999821
sel_id	O	O:0.998621
])`	O	O:0.999910
should	O	O:0.999712
do	O	O:0.999991
the	O	O:0.999992
trick	O	O:0.999185
.	O	O:0.999892
	
Instead	O	O:0.999901
of	O	O:0.999989
disabling	O	O:0.999815
the	O	O:0.999976
behavior	O	O:0.999772
you	O	O:0.999937
could	O	O:0.999934
try	O	O:0.999999
using	O	O:0.999606
np.select	B-API	B-API:0.998392
:	O	O:0.999429
	
+1	O	O:0.999800
I	O	O:0.999979
liked	O	O:0.999897
you	O	O:0.999765
approach	O	O:0.999862
,	O	O:0.999981
but	O	O:0.999974
how	O	O:0.999976
to	O	O:0.999998
make	O	O:0.999992
`	O	O:0.999995
np.copyto()	B-API	B-API:0.978336
`	O	O:0.999997
work	O	O:0.999833
with	O	O:0.999997
a	O	O:0.999995
memoryvew	O	O:0.996115
?	O	O:0.999956
	
Just	O	O:0.999152
import	O	O:0.998293
Decimal	O	O:0.984714
and	O	O:0.999962
for	O	O:0.999984
the	O	O:0.999884
printing	O	O:0.999260
just	O	O:0.999333
write	O	O:0.999940
print	O	O:0.998641
Decimal	O	O:0.892769
(	O	O:0.999962
ndarray	B-API	B-API:0.776503
[	O	O:0.999954
i	O	O:0.999855
])	O	O:0.999891
.	O	O:0.999438
	
Or	O	O:0.999966
,	O	O:0.999980
for	O	O:0.999996
that	O	O:0.999673
matter	O	O:0.999948
,	O	O:0.999985
numpy.genfromtxt	B-API	B-API:0.992668
.	O	O:0.999659
	
glad	O	O:0.998530
to	O	O:0.999986
hear	O	O:0.999934
it	O	O:0.999990
-	O	O:0.999996
I	O	O:0.999999
only	O	O:0.999970
recently	O	O:0.999740
found	O	O:0.999889
out	O	O:0.999972
about	O	O:0.999793
`	O	O:0.999913
np.einsum	B-API	B-API:0.998030
`	O	O:0.999985
myself	O	O:0.995731
,	O	O:0.999980
and	O	O:0.999974
it	O	O:0.999952
has	O	O:0.999935
rocked	O	O:0.999744
my	O	O:0.999908
world	O	O:0.999954
ever	O	O:0.999897
since	O	O:0.999887
	
The	O	O:0.999796
`	O	O:0.999984
dtype	B-API	B-API:0.996133
`	O	O:0.999992
could	O	O:0.999015
be	O	O:0.999999
deduced	O	O:0.999962
from	O	O:0.999646
one	O	O:0.999897
(	O	O:0.999986
or	O	O:0.999999
more	O	O:0.999942
)	O	O:0.999997
of	O	O:0.999980
the	O	O:0.999988
dictionary	O	O:0.999954
items	O	O:0.997036
:	O	O:0.999964
#CODE	O	O:0.999921
	
I	O	O:0.999928
didn't	O	O:0.999851
realize	O	O:0.997036
`	O	O:0.999951
array_split	B-API	B-API:0.998268
`	O	O:0.999962
existed	O	O:0.995620
!	O	O:0.999946
	
However	O	O:0.999858
,	O	O:0.999975
in	O	O:0.999997
that	O	O:0.999963
case	O	O:0.999994
,	O	O:0.999999
you	O	O:0.999961
could	O	O:0.999991
just	O	O:0.999984
do	O	O:0.999969
:	O	O:0.999902
(	O	O:0.999960
`	O	O:0.999991
searchsorted	B-API	B-API:0.986724
`	O	O:0.999994
uses	O	O:0.998034
bisection	O	O:0.999796
)	O	O:0.999956
#CODE	O	O:0.998999
	
Btw	O	O:0.999871
.	O	O:0.999986
you	O	O:0.999983
can	O	O:0.999998
also	O	O:1.000000
implicitly	O	O:0.999996
force	O	O:0.999613
the	O	O:0.999938
`	O	O:0.999974
dtype	B-API	B-API:0.996584
`	O	O:0.999996
to	O	O:0.999887
be	O	O:0.999999
`	O	O:0.999995
float	O	O:0.966094
`	O	O:0.999999
when	O	O:0.999602
using	O	O:0.999982
dots	O	O:0.989503
:	O	O:0.999711
#CODE	O	O:0.999815
	
dtypes	B-API	B-API:0.993596
.	O	O:0.999694
	
I	O	O:0.999959
would	O	O:0.999992
prefer	O	O:0.999902
using	O	O:0.999990
the	O	O:0.999739
xor	O	O:0.999251
ufunc	O	O:0.997129
I	O	O:0.999986
think	O	O:0.999942
,	O	O:0.999950
which	O	O:0.999629
is	O	O:0.999918
`	O	O:0.999966
bitwise_xor	B-API	B-API:0.990382
`	O	O:0.999928
(	O	O:0.999837
or	O	O:0.999992
`	O	O:0.999983
logical_xor	B-API	B-API:0.976680
`)	O	O:0.999885
:	O	O:0.999860
#CODE	O	O:0.999831
	
This	O	O:0.998873
is	O	O:0.999990
the	O	O:0.999993
root	O	O:0.999878
of	O	O:0.999985
why	O	O:0.999997
your	O	O:0.999932
`	O	O:0.999987
fromarrays	B-API	B-API:0.986500
`	O	O:0.999977
works	O	O:0.998283
,	O	O:0.999976
but	O	O:0.999925
not	O	O:0.999972
the	O	O:0.999993
`	O	O:0.999952
append_fields	O	O:0.701167
`	O	O:0.999979
.	O	O:0.999456
	
The	O	O:0.999882
dtype	B-API	B-API:0.989917
should	O	O:0.999781
be	O	O:0.999974
big	O	O:0.999912
endian	O	O:0.995571
.	O	O:0.999778
	
parameterArray	O	O:0.996361
+=	O	O:0.999924
line.split()	O	O:0.978598
\nline	O	O:0.999075
=	O	O:0.999943
self.inputBuffer.next()	O	O:0.968430
\	O	O:0.999978
nnp.parameterArray	O	O:0.998826
=	O	O:0.999489
np.array	B-API	B-API:0.996420
(	O	O:0.999989
parameterArray	O	O:0.998787
)	O	O:0.999950
	
As	O	O:0.999938
JoshAdel	O	O:0.999849
points	O	O:0.999853
out	O	O:0.999929
,	O	O:0.999995
`	O	O:0.999989
vectorize	B-API	B-API:0.962464
`	O	O:0.999982
wraps	O	O:0.994104
`	O	O:0.999983
frompyfunc	B-API	B-API:0.994925
`	O	O:0.999971
.	O	O:0.999450
	
Sorry	O	O:0.999188
,	O	O:0.999985
the	O	O:0.999973
line	O	O:0.998490
was	O	O:0.999875
output	O	O:0.999721
[	O	O:0.999983
i	O	O:0.999975
,	O	O:0.999995
j	O	O:0.999894
]	O	O:0.999946
=	O	O:0.999000
np.sum	B-API	B-API:0.984692
(	O	O:0.999911
ssd_difference	O	O:0.993903
[	O	O:0.999871
#URL	O	O:0.998978
(	O	O:0.999978
)	O	O:0.999974
)	O	O:0.999913
	
(	O	O:0.999937
or	O	O:0.999974
`	O	O:0.999962
np.array	B-API	B-API:0.984447
([[	O	O:0.999960
1	O	O:0.999810
]	O	O:0.999921
,	O	O:0.999934
[	O	O:0.999974
2	O	O:0.999947
]	O	O:0.999931
,	O	O:0.999950
[	O	O:0.999976
3	O	O:0.999936
]	O	O:0.999944
,	O	O:0.999957
[	O	O:0.999979
4	O	O:0.999908
]])	O	O:0.999917
.shape	B-API	B-API:0.985528
`)	O	O:0.999856
	
Thank	O	O:0.999750
you	O	O:0.999924
for	O	O:0.999996
the	O	O:0.999980
great	O	O:0.999698
tipp	O	O:0.999566
with	O	O:0.999868
`	O	O:0.999932
plt.hist	B-API	B-API:0.996354
(	O	O:0.999986
img.ravel()	O	O:0.977994
)`	O	O:0.999486
!	O	O:0.999710
	
The	O	O:0.999730
`	O	O:0.999982
recarray	B-API	B-API:0.969292
`	O	O:0.999980
class	O	O:0.999448
accepts	O	O:0.999971
an	O	O:0.999979
aligned	O	O:0.999559
parameter	O	O:0.999330
,	O	O:0.999857
but	O	O:0.999974
looks	O	O:0.999868
to	O	O:0.999997
lose	O	O:0.999976
it	O	O:0.999986
in	O	O:0.999982
`	O	O:0.999991
format_parser	B-API	B-API:0.945764
`	O	O:0.999965
.	O	O:0.999397
	
In	O	O:0.999966
case	O	O:0.999940
someone	O	O:0.999941
comes	O	O:0.999551
past	O	O:0.999960
this	O	O:0.999909
,	O	O:0.999996
numpy	O	O:0.999438
(	O	O:0.999996
as	O	O:0.999997
of	O	O:0.999980
1.8	O	O:0.999503
I	O	O:0.999998
think	O	O:0.999963
)	O	O:0.999959
support	O	O:0.997494
higher	O	O:0.999843
that	O	O:0.999625
2D	O	O:0.999986
generation	O	O:0.999957
of	O	O:0.999984
position	O	O:0.999851
grids	O	O:0.999843
with	O	O:0.999689
meshgrid	B-API	B-API:0.924508
.	O	O:0.999869
	
`	O	O:0.999798
numpy.random.choice	B-API	B-API:0.998621
`	O	O:0.999839
is	O	O:0.999928
not	O	O:0.999971
implemented	O	O:0.999620
in	O	O:0.999885
Python	O	O:0.998854
but	O	O:0.999981
in	O	O:0.999996
a	O	O:0.999986
`	O	O:0.999853
.pyx	O	B-API:0.818320
`	O	O:0.999997
file	O	O:0.998912
which	O	O:0.999984
needs	O	O:0.999978
to	O	O:0.999996
be	O	O:0.999999
compiled	O	O:0.999931
to	O	O:0.999981
C	O	O:0.999992
using	O	O:0.999715
Cython	O	O:0.990036
.	O	O:0.999520
	
A	O	O:0.999981
plain	O	O:0.998762
`	O	O:0.999968
.copy	B-API	B-API:0.999038
`	O	O:0.999977
did	O	O:0.999482
work	O	O:0.999951
for	O	O:0.999990
me	O	O:0.999758
.	O	O:0.999634
	
`	O	O:0.999819
A	O	O:0.999816
[	O	O:0.999905
np.ix_	B-API	B-API:0.996395
(	O	O:0.999943
x	O	O:0.999912
,	O	O:0.999992
y	O	O:0.999964
)]`	O	O:0.999397
	
einsum	B-API	B-API:0.971899
:	O	O:0.999957
5.2	O	O:0.999323
s	O	O:0.999720
	
10**423	O	O:0.998552
exceeds	O	O:0.999807
the	O	O:0.999941
largest	O	O:0.998549
int	O	O:0.999746
representable	O	O:0.999886
as	O	O:0.999987
an	O	O:0.999895
integer	O	O:0.997250
(	O	O:0.999929
or	O	O:0.999993
float	O	O:0.997551
)	O	O:0.999993
NumPy	O	O:0.999729
dtype	B-API	B-API:0.986311
,	O	O:0.999970
so	O	O:0.999963
there	O	O:0.999684
is	O	O:0.999996
no	O	O:0.999986
point	O	O:0.999865
in	O	O:0.999991
using	O	O:0.999935
NumPy	O	O:0.997924
here	O	O:0.984668
:	O	O:0.999909
`	O	O:0.999949
np.iinfo	B-API	B-API:0.994046
(	O	O:0.999877
'	O	O:0.999951
int64	O	O:0.997272
')	O	O:0.999766
.max	B-API	B-API:0.997694
<	O	O:0.999933
10**423	O	O:0.997834
`	O	O:0.999945
.	O	O:0.999539
	
Probably	O	O:0.999757
,	O	O:0.999979
better	O	O:0.999842
performance	O	O:0.999734
is	O	O:0.999994
by	O	O:0.999985
using	O	O:0.999857
`	O	O:0.998358
numpy.fromiter	B-API	B-API:0.999763
`	O	O:0.999840
:	O	O:0.999718
#CODE	O	O:0.999908
	
Why	O	O:0.999872
are	O	O:0.999993
the	O	O:0.999985
polyfit	B-API	B-API:0.791418
constants	O	O:0.999817
from	O	O:0.999969
the	O	O:0.999996
third	O	O:0.999820
case	O	O:0.999948
listed	O	O:0.999946
as	O	O:0.999978
NAN	O	O:0.984987
?	O	O:0.999913
	
Try	O	O:0.999766
`	O	O:0.999913
numpy.array_split	B-API	B-API:0.998951
`	O	O:0.999977
.	O	O:0.999644
	
Using	O	O:0.998588
np.repeat	B-API	B-API:0.982680
on	O	O:0.999952
sub-arrays	O	O:0.999241
	
shows	O	O:0.999814
that	O	O:0.999756
'	O	O:0.999992
region	O	O:0.999530
'	O	O:0.999979
has	O	O:0.999984
an	O	O:0.999949
`	O	O:0.999960
object	O	O:0.996139
`	O	O:0.999984
dtype	B-API	B-API:0.998374
:	O	O:0.999957
#CODE	O	O:0.998556
	
What	O	O:0.999718
I	O	O:0.999986
am	O	O:0.999998
looking	O	O:0.999028
for	O	O:0.999922
is	O	O:0.999988
something	O	O:0.999738
along	O	O:0.999695
the	O	O:0.999994
original	O	O:0.999690
functionality	O	O:0.999951
of	O	O:0.999943
`	O	O:0.999918
np.unique	B-API	B-API:0.995504
`	O	O:0.999972
#CODE	O	O:0.998225
	
In	O	O:0.999973
my	O	O:0.999962
opinion	O	O:0.999724
,	O	O:0.999961
np.matrix	B-API	B-API:0.953461
should	O	O:0.999843
override	O	O:0.999687
for	O	O:0.999986
addition	O	O:0.999656
and	O	O:0.999983
subtraction	O	O:0.999724
as	O	O:0.999972
well	O	O:0.998770
.	O	O:0.999928
	
or	O	O:0.999919
`	O	O:0.999922
np.vstack	B-API	B-API:0.994939
`	O	O:0.999992
,	O	O:0.999885
`	O	O:0.999981
np.dstack	B-API	B-API:0.997859
`	O	O:0.999973
`	O	O:0.999925
np.r_	B-API	B-API:0.956246
`	O	O:0.999989
,	O	O:0.999666
`	O	O:0.999987
np.c_	B-API	B-API:0.984799
`	O	O:0.999992
,	O	O:0.999871
`	O	O:0.999980
np.concatenate	B-API	B-API:0.991406
`	O	O:0.999999
depending	O	O:0.999727
on	O	O:0.999994
the	O	O:0.999984
desired	O	O:0.999655
shapes	O	O:0.997036
.	O	O:0.999897
	
TypeError	O	O:0.999874
when	O	O:0.999695
using	O	O:0.999949
SymPy	O	O:0.999863
matrices	O	O:0.996362
for	O	O:0.999635
numpy.linalg.eig	B-API	B-API:0.994517
	
Doing	O	O:0.999004
`	O	O:0.999877
a.astype	O	B-API:0.550218
(	O	O:0.999988
float	O	O:0.997883
)`	O	O:0.999913
actually	O	O:0.999889
creates	O	O:0.999851
a	O	O:0.999988
*	O	O:0.999982
new	O	O:0.999284
*	O	O:0.999992
ndarray	B-API	B-API:0.595214
which	O	O:0.999780
is	O	O:0.999971
of	O	O:0.999989
type	O	O:0.996594
`	O	O:0.999995
float	O	O:0.933515
`	O	O:0.999980
.	O	O:0.999280
	
Trying	O	O:0.999756
to	O	O:0.999979
vectorize	B-API	O:0.988253
the	O	O:0.999982
code	O	O:0.999955
also	O	O:0.999955
resulted	O	O:0.999961
in	O	O:0.999987
very	O	O:0.999809
poor	O	O:0.999844
performance	O	O:0.999704
,	O	O:0.999942
	
Also	O	O:0.999825
look	O	O:0.999830
into	O	O:0.999729
the	O	O:0.999961
genfromtxt	B-API	B-API:0.987551
and	O	O:0.999968
loadtxt	B-API	B-API:0.543785
family	O	O:0.999643
of	O	O:0.999986
Numpy	O	O:0.998652
functions	O	O:0.999708
.	O	O:0.999599
	
`	O	O:0.999967
coll	O	O:0.996541
[	O	O:0.999996
1	O	O:0.999929
]	O	O:0.999719
.set_color	B-API	B-API:0.994906
(	O	O:0.999949
"	O	O:0.999988
r	O	O:0.999808
")	O	O:0.999702
#	O	O:0.999970
this	O	O:0.999842
does	O	O:0.999843
not	O	O:0.999993
work	O	O:0.999962
,	O	O:0.999996
coll	O	O:0.999097
not	O	O:0.999969
indexable	O	O:0.999957
this	O	O:0.999941
way	O	O:0.999910
`	O	O:0.999945
	
The	O	O:0.999598
`	O	O:0.999986
testing.assert_equal	B-API	O:0.968144
`	O	O:0.999995
approach	O	O:0.998208
is	O	O:0.999985
almost	O	O:0.999781
good	O	O:0.999515
,	O	O:0.999970
except	O	O:0.999952
that	O	O:0.999916
it	O	O:0.999999
presumably	O	O:0.999983
fails	O	O:0.999889
if	O	O:0.999916
`	O	O:0.999989
__debug__	O	O:0.957039
`	O	O:0.999943
is	O	O:0.999883
False	O	O:0.998888
!	O	O:0.999792
	
I've	O	O:0.999807
just	O	O:0.999147
checked	O	O:0.999456
and	O	O:0.999988
found	O	O:0.999655
out	O	O:0.999933
that	O	O:0.999951
my	O	O:0.999986
implementation	O	O:0.999661
is	O	O:0.999985
about	O	O:0.999413
2.x	O	O:0.999548
times	O	O:0.998691
*	O	O:0.999987
faster	O	O:0.999325
*	O	O:0.999997
than	O	O:0.999930
using	O	O:0.999863
`	O	O:0.999781
numpy.convolve	B-API	B-API:0.999774
`	O	O:0.999957
.	O	O:0.999417
	
Not	O	O:0.999975
as	O	O:0.999996
concise	O	O:0.999816
as	O	O:0.999992
I	O	O:0.999909
wanted	O	O:0.999693
(	O	O:0.999770
I	O	O:0.999981
was	O	O:0.999984
experimenting	O	O:0.999141
with	O	O:0.999728
`	O	O:0.999986
mask_indices	B-API	B-API:0.902524
`	O	O:0.999991
)	O	O:0.999891
,	O	O:0.999960
but	O	O:0.999991
this	O	O:0.999922
will	O	O:0.999991
also	O	O:0.999988
do	O	O:0.999997
the	O	O:0.999959
work	O	O:0.993321
:	O	O:0.999980
#CODE	O	O:0.999921
	
The	O	O:0.999943
documentation	O	O:0.999896
of	O	O:0.999973
`	O	O:0.999888
numpy.nonzero()	B-API	B-API:0.989976
`	O	O:0.999982
describes	O	O:0.999035
how	O	O:0.999998
its	O	O:0.999898
result	O	O:0.999977
must	O	O:0.999858
be	O	O:0.999990
interpreted	O	O:0.999771
.	O	O:0.999599
	
scikits-learn	O	O:0.998610
pca	B-API	O:0.788585
dimension	O	O:0.999889
reduction	O	O:0.999778
issue	O	O:0.999697
	
`	O	O:0.999891
np.mean	B-API	B-API:0.994253
`	O	O:0.999994
can	O	O:0.999972
also	O	O:1.000000
preserve	O	O:0.999970
dimensions	O	O:0.999721
if	O	O:0.999977
needed	O	O:0.999910
.	O	O:0.999913
	
Are	O	O:0.999980
there	O	O:0.999978
alternatives	O	O:0.999955
to	O	O:0.999990
do	O	O:0.999999
the	O	O:0.999999
sorts	O	O:0.999420
of	O	O:0.999995
things	O	O:0.999553
`	O	O:0.999994
einsum	B-API	B-API:0.955877
`	O	O:0.999996
can	O	O:0.999871
do	O	O:0.999999
with	O	O:0.999989
sparse	O	O:0.999237
matrices	O	O:0.999628
?	O	O:0.999923
	
Your	O	O:0.999832
immediate	O	O:0.999842
problem	O	O:0.999300
is	O	O:0.999936
`	O	O:0.999915
numpy.putmask	B-API	B-API:0.998120
`	O	O:0.999968
.	O	O:0.999599
	
why	O	O:0.999878
not	O	O:0.999906
`	O	O:0.999993
np.array	B-API	B-API:0.997994
([	O	O:0.999987
o.value1	O	O:0.989945
for	O	O:0.999969
o	O	O:0.999619
in	O	O:0.999969
objects	O	O:0.999542
])`	O	O:0.999870
?	O	O:0.999895
	
In	O	O:0.999991
a	O	O:0.999992
comment	O	O:0.999510
to	O	O:0.999962
`	O	O:0.999999
@USER	O	O:0.996757
`	O	O:0.999997
s	O	O:0.999743
answer	O	O:0.999958
I	O	O:0.999977
suggested	O	O:0.999725
`	O	O:0.999764
np.delete	B-API	B-API:0.997296
`	O	O:0.999971
.	O	O:0.999549
	
I	O	O:0.999993
have	O	O:0.999994
a	O	O:0.999900
`	O	O:0.999931
numpy.ndarray	B-API	B-API:0.988468
`	O	O:0.999964
.	O	O:0.999302
	
I	O	O:0.999949
believe	O	O:0.999933
it	O	O:0.999983
comes	O	O:0.999888
down	O	O:0.999880
to	O	O:0.999995
the	O	O:0.999999
fact	O	O:0.999858
that	O	O:0.999920
Python	O	O:0.999959
calls	O	O:0.999986
a	O	O:0.999970
`	O	O:0.998920
__getitem__	B-API	B-API:0.985298
`	O	O:0.999990
on	O	O:0.999972
your	O	O:0.999974
objects	O	O:0.998968
and	O	O:0.999991
treats	O	O:0.999910
the	O	O:0.999976
entire	O	O:0.999935
block	O	O:0.999948
of	O	O:0.999998
code	O	O:0.999901
of	O	O:0.999995
`	O	O:0.999974
for	O	O:0.999628
`	O	O:0.999993
loop	O	O:0.999398
as	O	O:0.999996
an	O	O:0.999006
inline	O	O:0.946725
statement	O	O:0.999654
.	O	O:0.999779
	
In	O	O:0.999920
the	O	O:0.999965
Notes	O	O:0.999305
section	O	O:0.999828
to	O	O:0.999973
column_stack	B-API	B-API:0.523196
,	O	O:0.999994
it	O	O:0.999996
points	O	O:0.999624
out	O	O:0.999981
this	O	O:0.999823
:	O	O:0.999964
	
`	O	O:0.999545
logical_or	B-API	B-API:0.997341
(	O	O:0.999996
a	O	O:0.999985
,	O	O:0.999423
logical_or	B-API	B-API:0.992386
(	O	O:0.999950
b	O	O:0.999903
,	O	O:0.999992
c	O	O:0.999867
))`	O	O:0.999182
	
How	O	O:0.999868
about	O	O:0.999895
reading	O	O:0.999966
them	O	O:0.999395
in	O	O:0.999997
correctly	O	O:0.999946
as	O	O:0.999990
numpy.datetime64	O	O:0.987543
objects	O	O:0.999866
using	O	O:0.998832
numpy.loadtxt	B-API	B-API:0.999652
(	O	O:0.999939
they	O	O:0.999907
are	O	O:0.999993
coming	O	O:0.999851
from	O	O:0.999978
a	O	O:0.999985
csv	O	O:0.999916
file	O	O:0.999852
)	O	O:0.999977
?	O	O:0.999945
	
Also	O	O:0.999810
-	O	O:0.999996
I	O	O:0.999991
see	O	O:0.999995
that	O	O:0.999644
np.getfromtxt()	O	O:0.996853
has	O	O:0.999994
a	O	O:0.999980
'	O	O:0.999912
dtype	B-API	B-API:0.980482
'	O	O:0.999968
option	O	O:0.999182
which	O	O:0.999939
allows	O	O:0.999860
the	O	O:0.999995
user	O	O:0.999625
to	O	O:0.999983
specify	O	O:0.999977
the	O	O:0.999997
datatype	O	O:0.999680
of	O	O:0.999994
each	O	O:0.999635
column	O	O:0.999908
.	O	O:0.999936
	
No	O	O:0.999964
worries	O	O:0.999598
,	O	O:0.999992
the	O	O:0.999992
dtype	B-API	B-API:0.998690
is	O	O:0.999983
inferred	O	O:0.997690
as	O	O:0.999930
`	O	O:0.999903
int64	O	O:0.940827
`	O	O:0.999989
unless	O	O:0.999036
you	O	O:0.999995
pass	O	O:0.999730
it	O	O:0.999992
explicitly	O	O:0.999757
	
whats	O	O:0.999889
the	O	O:0.999990
result	O	O:0.999963
of	O	O:0.999978
`	O	O:0.999991
print	O	O:0.999954
a	O	O:0.999996
`	O	O:0.999806
after	O	O:0.998996
`	O	O:0.999997
a	O	O:0.999867
=	O	O:0.999362
np.loadtxt	B-API	B-API:0.980459
`	O	O:0.999837
	
Keep	O	O:0.998820
in	O	O:0.999970
mind	O	O:0.999965
that	O	O:0.999892
`	O	O:0.999994
np.cov	B-API	B-API:0.988644
`	O	O:0.999969
is	O	O:0.999977
basically	O	O:0.999979
doing	O	O:0.999822
`	O	O:0.999925
data.dot	O	O:0.901429
(	O	O:0.999990
data.T	O	O:0.998786
)`	O	O:0.999353
.	O	O:0.999664
	
If	O	O:0.999965
you	O	O:0.999989
want	O	O:0.999983
to	O	O:0.999998
vectorize	B-API	O:0.994857
operations	O	O:0.999857
,	O	O:0.999994
you	O	O:0.999997
need	O	O:0.999977
to	O	O:0.999999
think	O	O:0.999996
in	O	O:0.999998
terms	O	O:0.999902
of	O	O:0.999995
these	O	O:0.999294
higher	O	O:0.999917
dimensional	O	O:0.998308
arrays	O	O:0.998707
.	O	O:0.999690
	
Does	O	O:0.999089
`	O	O:0.999977
s2	O	O:0.999526
=	O	O:0.999859
pd.Series	B-API	B-API:0.996123
(	O	O:0.999958
s	O	O:0.999787
,	O	O:0.999993
dtype	B-API	B-API:0.991043
=o	O	O:0.999824
bject	O	O:0.997185
)`	O	O:0.999855
work	O	O:0.998550
?	O	O:0.999982
	
`	O	O:0.999851
PyArray_DATA	B-API	B-API:0.993151
`	O	O:0.999966
is	O	O:0.999948
defined	O	O:0.998465
in	O	O:0.999882
	
`	O	O:0.999988
a	O	O:0.999623
[:	O	O:0.999691
,	O	O:0.999938
:	O	O:0.999982
,	O	O:0.999995
5	O	O:0.999971
]	O	O:0.999966
.shape	B-API	B-API:0.992586
=	O	O:0.997564
(	O	O:0.999958
10	O	O:0.999854
,	O	O:0.999970
10	O	O:0.999923
,	O	O:0.999976
1	O	O:0.999937
)`	O	O:0.999774
	
Can	O	O:0.999767
you	O	O:0.999974
print	O	O:0.999947
`	O	O:0.999997
datas	O	O:0.999034
[	O	O:0.999995
0	O	O:0.999951
]	O	O:0.999941
.shape	B-API	B-API:0.996165
`	O	O:0.999948
?	O	O:0.999773
	
actually	O	O:0.999861
used	O	O:0.997856
is	O	O:0.999988
this	O	O:0.999843
line	O	O:0.999904
within	O	O:0.999761
the	O	O:0.999981
definition	O	O:0.999738
for	O	O:0.999914
`	O	O:0.999978
np.array_repr	B-API	B-API:0.984015
`	O	O:0.999956
	
That's	O	O:0.999746
why	O	O:0.999960
`	O	O:0.999979
dstack	B-API	B-API:0.991549
`	O	O:0.999977
behaves	O	O:0.999417
the	O	O:0.999980
way	O	O:0.999419
it	O	O:0.999967
does	O	O:0.999610
.	O	O:0.999964
	
>>>	O	O:0.999425
x	O	O:0.999778
=	O	O:0.999573
np.asanyarray	B-API	B-API:0.988427
(	O	O:0.999857
[	O	O:0.999970
]	O	O:0.999975
,	O	O:0.999921
dtype=	O	O:0.987526
'	O	O:0.999968
float64	O	O:0.994050
')	O	O:0.999789
	
This	O	O:0.999470
doesn't	O	O:0.999943
work	O	O:0.999885
for	O	O:0.999998
floating	O	O:0.999656
point	O	O:0.998816
types	O	O:0.986037
(	O	O:0.999982
it	O	O:0.999967
will	O	O:0.999904
not	O	O:0.999991
consider	O	O:0.999884
+	O	O:0.999945
0.0	O	O:0.998866
and	O	O:0.999985
-	O	O:0.999970
0.0	O	O:0.998126
the	O	O:0.999993
same	O	O:0.999905
value	O	O:0.999917
)	O	O:0.999988
,	O	O:0.999978
and	O	O:0.999981
`	O	O:0.999934
np.intersect1d	B-API	B-API:0.999370
`	O	O:0.999991
uses	O	O:0.997685
sorting	O	O:0.999592
,	O	O:0.999960
so	O	O:0.999984
it	O	O:0.999836
is	O	O:0.999978
has	O	O:0.999962
linearithmic	O	O:0.998701
,	O	O:0.999972
not	O	O:0.999957
linear	O	O:0.998397
,	O	O:0.999980
performance	O	O:0.999459
.	O	O:0.999815
	
But	O	O:0.999938
off	O	O:0.999965
course	O	O:0.999864
,	O	O:0.999990
isreal	B-API	B-API:0.919227
would	O	O:0.999886
be	O	O:0.999998
more	O	O:0.999979
readable	O	O:0.998115
:-)	O	O:0.999553
	
mshgrd	O	O:0.998034
=	O	O:0.999499
ax.pcolormesh	B-API	B-API:0.971910
(	O	O:0.999901
X	O	O:0.999878
,	O	O:0.999984
Y	O	O:0.999946
,	O	O:0.999990
Z	O	O:0.999855
)	O	O:0.999947
	
Otherwise	O	O:0.999771
,	O	O:0.999990
the	O	O:0.999994
performance	O	O:0.999946
advantages	O	O:0.999940
of	O	O:0.999997
using	O	O:0.999942
numpy	O	O:0.999814
are	O	O:0.999857
quickly	O	O:0.999847
nullified	O	O:0.999578
,	O	O:0.999998
regardless	O	O:0.999990
of	O	O:0.999993
how	O	O:0.999982
you	O	O:0.999991
implement	O	O:0.999986
your	O	O:0.999929
ringbuffer	B-API	B-API:0.606206
.	O	O:0.999918
	
The	O	O:0.999868
answer	O	O:0.998746
is	O	O:0.999752
numpy.clip	B-API	B-API:0.994743
#CODE	O	O:0.999301
	
Can	O	O:0.999730
you	O	O:0.999979
please	O	O:0.999922
go	O	O:0.999986
into	O	O:0.999962
more	O	O:0.999948
depth	O	O:0.999827
about	O	O:0.999927
nesting	O	O:0.999844
a	O	O:0.999977
recarray	B-API	B-API:0.652727
in	O	O:0.999995
another	O	O:0.999976
by	O	O:0.999990
using	O	O:0.999848
the	O	O:0.994586
np.object	O	O:0.921084
method	O	O:0.999756
?	O	O:0.999934
	
Why	O	O:0.999952
do	O	O:0.999970
you	O	O:0.999992
need	O	O:0.999939
`	O	O:0.999997
vectorize	B-API	B-API:0.731556
`	O	O:0.999980
for	O	O:0.999943
that	O	O:0.999805
?	O	O:0.999965
	
I	O	O:0.999900
did	O	O:0.999940
try	O	O:0.999891
gc.colletc()	O	O:0.992515
without	O	O:0.999612
success	O	O:0.998017
but	O	O:0.999962
adding	O	O:0.999972
a	O	O:0.999929
clf()	B-API	B-API:0.990681
inside	O	O:0.999859
the	O	O:0.999969
loop	O	O:0.999635
does	O	O:0.999855
the	O	O:0.999993
trick	O	O:0.999780
!	O	O:0.999900
	
not	O	O:0.999972
a	O	O:0.999996
bad	O	O:0.999705
solution	O	O:0.999834
;	O	O:0.999995
though	O	O:0.999863
I	O	O:0.999998
am	O	O:0.999997
somewhat	O	O:0.999889
wary	O	O:0.999943
of	O	O:0.999990
the	O	O:0.999987
performance	O	O:0.999958
of	O	O:0.999889
random.shuffle	B-API	O:0.838247
.	O	O:0.999928
	
date2num	B-API	B-API:0.969447
,	O	O:0.999848
ValueError	O	O:0.998323
:	O	O:0.999963
ordinal	O	O:0.999632
must	O	O:0.999957
be	O	O:0.999979
>	O	O:0.999993
=	O	O:0.999323
1	O	O:0.999742
	
And	O	O:0.999943
you	O	O:0.999977
could	O	O:0.999984
override	O	O:0.999919
`	O	O:0.999992
__mul__	B-API	B-API:0.986517
`	O	O:0.999992
,	O	O:0.999767
`	O	O:0.999992
__add__	B-API	B-API:0.993877
`	O	O:0.999992
,	O	O:0.999821
`	O	O:0.999991
__sub__	B-API	B-API:0.989383
`	O	O:0.999996
accordingly	O	O:0.997374
,	O	O:0.999992
but	O	O:0.999926
I	O	O:0.999983
don't	O	O:0.999992
know	O	O:0.999790
exactly	O	O:0.999943
how	O	O:0.999974
numpy-like	O	O:0.999674
you	O	O:0.999982
actually	O	O:0.999970
*	O	O:0.999999
need	O	O:0.999560
*	O	O:0.999999
this	O	O:0.999980
to	O	O:0.999995
be	O	O:1.000000
,	O	O:0.999999
so	O	O:0.999978
I	O	O:0.999990
can't	O	O:0.999986
say	O	O:0.999928
for	O	O:0.999994
sure	O	O:0.997540
.	O	O:0.999755
	
`	O	O:0.999900
np.array	B-API	B-API:0.997574
=	O	O:0.999864
partial	O	O:0.986231
(	O	O:0.999901
np.array	B-API	B-API:0.979672
,	O	O:0.999939
dtype=	O	O:0.998387
np.float32	O	O:0.998867
)`	O	O:0.999695
with	O	O:0.999283
`	O	O:0.999993
partial	O	O:0.995906
`	O	O:0.999998
from	O	O:0.999800
the	O	O:0.999994
`	O	O:0.999962
functools	O	O:0.629085
`	O	O:0.999986
module	O	O:0.998834
.	O	O:0.999915
	
A	O	O:0.999918
solution	O	O:0.999792
that	O	O:0.997935
worked	O	O:0.999976
uses	O	O:0.999157
griddata	B-API	B-API:0.969161
.	O	O:0.999548
	
Numpy	O	O:0.998909
1.7.0	O	O:0.997943
assert_array_almost_equal	B-API	B-API:0.812068
documentation	O	O:0.999097
	
You	O	O:0.999711
can	O	O:0.999961
read	O	O:0.999814
matlab	O	O:0.998568
(	O	O:0.999992
.mat	B-API	O:0.519846
)	O	O:0.999995
files	O	O:0.998989
in	O	O:0.999979
Python	O	O:0.999756
,	O	O:0.999988
try	O	O:0.999958
this	O	O:0.999143
:	O	O:0.999989
#CODE	O	O:0.999885
	
Thanks	O	O:0.999033
for	O	O:0.999970
the	O	O:0.999986
idea	O	O:0.999510
of	O	O:0.999933
genfromtxt()	B-API	B-API:0.995642
.	O	O:0.999908
	
If	O	O:0.999957
you	O	O:0.999973
are	O	O:0.999998
using	O	O:0.999985
numpy	O	O:0.999396
,	O	O:0.999870
for	O	O:0.999988
multidimensional	O	O:0.998814
lists	O	O:0.994181
`	O	O:0.999936
numpy.repeat	B-API	B-API:0.995271
`	O	O:0.999966
is	O	O:0.999988
your	O	O:0.999919
best	O	O:0.998886
bet	O	O:0.999742
.	O	O:0.999754
	
If	O	O:0.999958
the	O	O:0.999979
following	O	O:0.999501
equation	O	O:0.998509
is	O	O:0.999973
element-wise	O	O:0.999618
True	O	O:0.999669
,	O	O:0.999998
then	O	O:0.999677
allclose	B-API	O:0.882752
returns	O	O:0.998949
`	O	O:0.999974
True	O	O:0.985828
`	O	O:0.999938
:	O	O:0.999805
#CODE	O	O:0.999908
	
`	O	O:0.999838
np.vstack	B-API	B-API:0.998524
`	O	O:0.999999
just	O	O:0.999545
vertically	O	O:0.999964
stacks	O	O:0.999518
the	O	O:0.999976
arrays	O	O:0.999439
you	O	O:0.999986
pass	O	O:0.999355
to	O	O:0.999995
it	O	O:0.999999
,	O	O:0.999993
and	O	O:0.999997
so	O	O:0.999998
something	O	O:0.999962
else	O	O:0.999802
in	O	O:0.999999
your	O	O:0.999950
code	O	O:0.999836
may	O	O:0.999998
be	O	O:0.999999
cutting	O	O:0.999527
off	O	O:0.999961
the	O	O:0.999998
rest	O	O:0.999833
of	O	O:0.999999
the	O	O:0.999950
results	O	O:0.999874
inadvertently	O	O:0.998998
.	O	O:0.999921
	
If	O	O:0.999980
you	O	O:0.999993
move	O	O:0.999832
the	O	O:0.999995
line	O	O:0.999078
`	O	O:0.999991
np_verticies=	O	O:0.989113
np.array	B-API	B-API:0.973344
(	O	O:0.999980
verticies	O	O:0.999833
)`	O	O:0.999987
outside	O	O:0.999922
of	O	O:0.999922
`	O	O:0.999978
Fnumpy	O	O:0.976668
`	O	O:0.999982
and	O	O:0.999962
the	O	O:0.999994
timed	O	O:0.994403
section	O	O:0.999995
your	O	O:0.999853
results	O	O:0.999966
will	O	O:0.999954
be	O	O:0.999999
very	O	O:0.999890
different	O	O:0.997799
:	O	O:0.999889
#CODE	O	O:0.999739
	
`	O	O:0.999880
fromiter	B-API	B-API:0.897462
`'	O	O:0.999967
s	O	O:0.999761
example	O	O:0.999156
is	O	O:0.999982
essentially	O	O:0.999877
this	O	O:0.999770
:	O	O:0.999979
`	O	O:0.999951
np.fromiter	B-API	B-API:0.985014
((	O	O:0.999870
x*x	O	O:0.998279
for	O	O:0.999958
x	O	O:0.999647
in	O	O:0.999872
range	O	O:0.999630
(	O	O:0.999977
5	O	O:0.999926
))	O	O:0.997326
,	O	O:0.999941
int	O	O:0.998815
)`	O	O:0.999436
.	O	O:0.999458
	
In	O	O:0.999910
Python	O	O:0.999816
,	O	O:0.999996
I	O	O:0.999998
have	O	O:0.999994
a	O	O:0.999993
numpy.array	B-API	B-API:0.736984
of	O	O:0.999979
integers	O	O:0.998155
`	O	O:0.999988
[	O	O:0.999886
2	O	O:0.999987
,	O	O:0.999969
4	O	O:0.999915
,	O	O:0.999979
7	O	O:0.999931
,	O	O:0.999984
8	O	O:0.999935
,	O	O:0.999982
9	O	O:0.999929
,	O	O:0.999981
10	O	O:0.999907
,	O	O:0.999975
15	O	O:0.999906
,	O	O:0.999974
10	O	O:0.999797
8]	O	O:0.999749
`	O	O:0.999936
.	O	O:0.999540
	
I	O	O:0.999984
will	O	O:0.999969
go	O	O:0.999952
with	O	O:0.999969
newaxis	B-API	O:0.921286
then	O	O:0.999657
.	O	O:0.999992
	
pcolormesh	B-API	B-API:0.931878
returns	O	O:0.999601
a	O	O:0.999917
QuadMesh	B-API	O:0.547161
.	O	O:0.999760
	
And	O	O:0.999983
when	O	O:0.999842
I	O	O:0.999998
call	O	O:0.999993
each	O	O:0.999590
of	O	O:0.999928
the	O	O:0.999938
instructions	O	O:0.999947
inside	O	O:0.999677
f()	B-API	O:0.990883
individually	O	O:0.999271
it	O	O:0.999985
gives	O	O:0.999922
me	O	O:0.999987
an	O	O:0.999998
other	O	O:0.999856
result	O	O:0.999338
(	O	O:0.999964
which	O	O:0.999880
is	O	O:0.999972
correct	O	O:0.997165
):	O	O:0.999976
#CODE	O	O:0.999682
	
Here's	O	O:0.999397
one	O	O:0.999979
vectorized	O	O:0.999817
approach	O	O:0.999976
based	O	O:0.999617
on	O	O:0.999944
`	O	O:0.999927
np.einsum	B-API	B-API:0.992658
`	O	O:0.999963
-	O	O:0.999892
#CODE	O	O:0.999801
	
What's	O	O:0.999740
the	O	O:0.999913
`	O	O:0.999981
dtype	B-API	B-API:0.992243
`	O	O:0.999995
of	O	O:0.999833
these	O	O:0.999907
arrays	O	O:0.999817
?	O	O:0.999909
	
try	O	O:0.999926
adding	O	O:0.999906
a	O	O:0.999979
`	O	O:0.999778
show()	B-API	O:0.599683
`	O	O:0.999986
in	O	O:0.999960
the	O	O:0.999992
end	O	O:0.999563
	
`	O	O:0.999922
pandas.DataFrame	B-API	B-API:0.997307
`	O	O:0.999970
	
You	O	O:0.999895
can	O	O:0.999972
define	O	O:0.999996
your	O	O:0.999958
own	O	O:0.999977
types	O	O:0.999919
by	O	O:0.999992
creating	O	O:0.999900
a	O	O:0.999937
class	O	O:0.999074
and	O	O:0.999995
writing	O	O:0.999952
a	O	O:0.999716
`	O	O:0.999865
__add__	B-API	B-API:0.983142
`	O	O:0.999992
or	O	O:0.999720
`	O	O:0.999984
__sub__	B-API	B-API:0.999039
`	O	O:0.999943
method	O	O:0.999321
.	O	O:0.999937
	
On	O	O:0.999935
the	O	O:0.999986
other	O	O:0.999931
hand	O	O:0.999875
,	O	O:0.999999
if	O	O:0.999991
I	O	O:0.999987
did	O	O:0.999984
with	O	O:0.999623
`	O	O:0.999990
genfromtxt	B-API	B-API:0.977575
`	O	O:0.999993
,	O	O:0.999977
the	O	O:0.999997
third	O	O:0.999817
column	O	O:0.999703
is	O	O:0.999986
problem	O	O:0.999463
because	O	O:0.999801
it	O	O:0.999976
includes	O	O:0.999798
comma	O	O:0.999912
inside	O	O:0.999873
double-quota	O	O:0.995497
.	O	O:0.999703
	
Apparently	O	O:0.999751
,	O	O:0.999992
if	O	O:0.999994
there	O	O:0.999676
is	O	O:0.999992
no	O	O:0.999864
'	O	O:0.999974
missing_value	O	O:0.998213
'	O	O:0.999907
attribute	O	O:0.999934
Netcdf4	O	O:0.999933
defaults	O	O:0.999828
to	O	O:0.999998
a	O	O:1.000000
missing	O	O:0.999582
value	O	O:0.999986
appropriate	O	O:0.999938
for	O	O:0.999989
the	O	O:0.999950
dtype	B-API	B-API:0.998130
.	O	O:0.999647
	
do	O	O:0.999930
be	O	O:0.999991
aware	O	O:0.999960
that	O	O:0.999864
if	O	O:0.999995
you	O	O:0.999997
have	O	O:0.999966
NaNs	O	O:0.999931
,	O	O:0.999998
there	O	O:0.999950
is	O	O:0.999995
an	O	O:0.999982
equivalent	O	O:0.999917
np.nanstd	B-API	B-API:0.554405
with	O	O:0.999955
the	O	O:0.999986
similar	O	O:0.999956
ddof	O	O:0.995312
options	O	O:0.999628
	
[	O	O:0.999911
True	O	O:0.999246
,	O	O:0.999987
True	O	O:0.999763
]]	O	O:0.999939
,	O	O:0.999981
dtype	B-API	B-API:0.987049
=b	O	O:0.999909
ool	O	O:0.998598
)`	O	O:0.999772
	
@USER	O	O:0.999749
true	O	O:0.999187
,	O	O:0.999991
although	O	O:0.999918
`	O	O:0.999951
np.array	B-API	B-API:0.997103
([	O	O:0.999984
x	O	O:0.999294
for	O	O:0.999970
bb	O	O:0.999469
in	O	O:0.999961
b	O	O:0.999793
for	O	O:0.999989
x	O	O:0.999384
in	O	O:0.999929
bb	O	O:0.999893
])`	O	O:0.999973
will	O	O:0.999353
do	O	O:0.999994
the	O	O:0.999982
job	O	O:0.999062
.	O	O:0.999828
	
return	O	O:0.979974
matrix_power	B-API	B-API:0.995024
(	O	O:0.999972
self	O	O:0.999138
,	O	O:0.999997
other	O	O:0.999826
)	O	O:0.999948
	
vector	O	O:0.999373
=	O	O:0.999333
numpy.array	B-API	B-API:0.988869
(	O	O:0.999902
vector	O	O:0.999692
);	O	O:0.999431
	
If	O	O:0.999981
so	O	O:0.999997
then	O	O:0.999899
you	O	O:0.999998
should	O	O:0.999997
have	O	O:0.999997
no	O	O:0.999998
problem	O	O:0.999952
fitting	O	O:0.999815
the	O	O:0.999888
`	O	O:0.999953
numpy.fft.rfftfreq	B-API	B-API:0.999589
`	O	O:0.999986
method	O	O:0.999935
into	O	O:0.999957
your	O	O:0.999911
own	O	O:0.999749
code	O	O:0.999650
.	O	O:0.999923
	
This	O	O:0.998857
fails	O	O:0.998907
:	O	O:0.999974
`	O	O:0.999938
einsum	B-API	B-API:0.983540
(	O	O:0.999960
'	O	O:0.999955
i	O	O:0.999913
...,	O	O:0.998219
i	O	O:0.999903
...	O	O:0.999283
	
Python	O	O:0.995906
&	O	O:0.999972
Numpy	O	O:0.999780
-	O	O:0.999978
create	O	O:0.999476
dynamic	O	O:0.999695
,	O	O:0.999998
arbitrary	O	O:0.999955
subsets	O	O:0.999144
of	O	O:0.999949
ndarray	B-API	O:0.518603
	
For	O	O:0.999921
example	O	O:0.999824
,	O	O:0.999995
I	O	O:0.999999
have	O	O:0.999995
a	O	O:0.999966
`	O	O:0.999981
ndarray	B-API	B-API:0.957371
`	O	O:0.999996
that	O	O:0.991236
is	O	O:0.999978
:	O	O:0.999940
#CODE	O	O:0.999766
	
I	O	O:0.999980
went	O	O:0.999839
with	O	O:0.999883
the	O	O:0.999977
np.memmap	B-API	B-API:0.968493
because	O	O:0.999895
the	O	O:0.999991
performance	O	O:0.999729
is	O	O:0.999986
similar	O	O:0.999722
to	O	O:0.999991
hdf5	O	O:0.999938
and	O	O:0.999977
I	O	O:0.999991
already	O	O:0.999975
have	O	O:0.999828
numpy	O	O:0.999690
in	O	O:0.999979
production	O	O:0.998857
.	O	O:0.999922
	
its	O	O:0.997837
np.log	B-API	B-API:0.981429
not	O	O:0.999895
m.log	O	O:0.996844
	
what	O	O:0.999474
happens	O	O:0.999931
if	O	O:0.999992
you	O	O:0.999893
[	O	O:0.999977
`	O	O:0.999973
Py_INCREF	O	O:0.646841
(	O	O:0.999994
self	O	O:0.997182
)`]	O	O:0.989888
(	O	O:0.999921
#URL	O	O:0.999834
)	O	O:0.999968
after	O	O:0.999686
`	O	O:0.999964
.base	B-API	B-API:0.998861
`	O	O:0.999975
assignment	O	O:0.996242
?	O	O:0.999958
	
File	O	O:0.999045
"	O	O:0.999930
/	O	O:0.999751
usr	O	O:0.999055
/	O	O:0.999830
lib64	O	O:0.990877
/	O	O:0.999903
python2.6	O	O:0.990033
/	O	O:0.999924
site-packages	O	O:0.997435
/	O	O:0.999974
numpy	O	O:0.998930
/	O	O:0.999971
core	O	O:0.997888
/	O	O:0.999977
fromnumeric.py	O	O:0.995740
"	O	O:0.999936
,	O	O:0.999955
line	O	O:0.999872
806	O	O:0.999860
,	O	O:0.999991
in	O	O:0.999931
searchsorted	B-API	B-API:0.882385
	
why	O	O:0.999667
isn't	O	O:0.999893
the	O	O:0.999960
`	O	O:0.999978
ndarray	B-API	B-API:0.974026
`	O	O:0.999988
constructor	O	O:0.999297
mentioned	O	O:0.999932
here	O	O:0.999403
?	O	O:0.999955
	
>>>	O	O:0.999502
z	O	O:0.999857
=	O	O:0.999744
numpy.array	B-API	B-API:0.926241
([	O	O:0.999833
1	O	O:0.999838
,	O	O:0.999979
2	O	O:0.999887
]	O	O:0.999866
	
Is	O	O:0.999986
there	O	O:0.999952
an	O	O:0.999997
equivelent	O	O:0.999892
to	O	O:0.999979
`	O	O:1.000000
fseek	O	O:0.996903
`	O	O:0.999999
when	O	O:0.999759
using	O	O:0.999982
`	O	O:0.999976
fromfile	B-API	B-API:0.992068
`	O	O:0.999996
to	O	O:0.999980
skip	O	O:0.999959
the	O	O:0.999999
beginning	O	O:0.999774
of	O	O:0.999985
the	O	O:0.999957
file	O	O:0.999832
?	O	O:0.999944
	
The	O	O:0.999928
linear	O	O:0.999255
algebra	O	O:0.999822
functions	O	O:0.999498
are	O	O:0.999973
generally	O	O:0.999947
grouped	O	O:0.999510
in	O	O:0.999894
`	O	O:0.999933
numpy.linalg	B-API	B-API:0.616273
`	O	O:0.999968
.	O	O:0.999511
	
np.mean	B-API	B-API:0.997513
:	O	O:0.999918
#CODE	O	O:0.999817
	
As	O	O:0.999966
others	O	O:0.999965
have	O	O:0.999979
said	O	O:0.999965
,	O	O:0.999997
32-bit	O	O:0.999934
versions	O	O:0.999881
of	O	O:0.999990
numpy	O	O:0.999920
still	O	O:0.999802
support	O	O:0.999665
64-bit	O	O:0.998843
dtypes	B-API	B-API:0.991408
.	O	O:0.999714
	
`	O	O:0.999898
vstack	B-API	B-API:0.989766
`	O	O:0.999965
is	O	O:0.999948
coercing	O	O:0.998758
the	O	O:0.999993
type	O	O:0.999154
of	O	O:0.999975
`	O	O:0.999989
d	O	O:0.999756
`	O	O:0.999996
to	O	O:0.999924
the	O	O:1.000000
type	O	O:0.999530
of	O	O:0.999982
`	O	O:0.999989
e	O	O:0.999371
`	O	O:0.999984
.	O	O:0.999364
	
`	O	O:0.999876
df.plot	B-API	B-API:0.977232
`	O	O:0.999993
returns	O	O:0.995439
an	O	O:0.999981
AxesSubplot	O	O:0.999436
,	O	O:0.999949
which	O	O:0.999899
has	O	O:0.999991
a	O	O:0.999995
`	O	O:0.999842
axvspan	B-API	B-API:0.999247
`	O	O:0.999959
method	O	O:0.999190
.	O	O:0.999937
	
With	O	O:0.999920
the	O	O:0.999989
variables	O	O:0.999720
defined	O	O:0.999852
above	O	O:0.999937
,	O	O:0.999963
`	O	O:0.999837
np.searchsorted	B-API	B-API:0.998145
(	O	O:0.999984
lat	O	O:0.998369
,	O	O:0.999987
x	O	O:0.999926
)`	O	O:0.999122
is	O	O:0.999986
16x	O	O:0.999636
faster	O	O:0.999891
than	O	O:0.999880
the	O	O:0.999983
equivalent	O	O:0.999793
call	O	O:0.995322
`	O	O:0.999988
np.nanargmin	B-API	B-API:0.990861
((	O	O:0.999948
lat-x	O	O:0.997778
)	O	O:0.999914
**2	O	O:0.999915
)`	O	O:0.999891
on	O	O:0.999974
my	O	O:0.999942
computer	O	O:0.999777
.	O	O:0.999919
	
Pypy	O	O:0.999583
with	O	O:0.999787
iterators	O	O:0.997239
is	O	O:0.999994
still	O	O:0.999533
solving	O	O:0.999967
this	O	O:0.999829
about	O	O:0.999949
3x	O	O:0.999736
faster	O	O:0.999396
than	O	O:0.999739
CPython	O	O:0.998730
+	O	O:0.999988
Numpy	O	O:0.999795
,	O	O:0.999996
even	O	O:0.999947
when	O	O:0.999985
using	O	O:0.999951
`	O	O:0.999914
np.searchsorted	B-API	B-API:0.999612
`	O	O:0.999890
(	O	O:0.999914
see	O	O:0.999994
my	O	O:0.999978
solution	O	O:0.999575
)	O	O:0.999980
.	O	O:0.999779
	
and	O	O:0.999919
`	O	O:0.999940
hstack	B-API	B-API:0.994803
((	O	O:0.999957
a	O	O:0.999979
,	O	O:0.999924
z	O	O:0.999937
))`	O	O:0.998595
?	O	O:0.999901
	
Have	O	O:0.999712
you	O	O:0.999951
tried	O	O:0.999974
passing	O	O:0.998792
`	O	O:0.999797
interpolation=	O	O:0.997509
'	O	O:0.999993
nearest	O	O:0.999236
'`	O	O:0.999968
to	O	O:0.999954
`	O	O:0.999997
imshow	B-API	B-API:0.994399
`	O	O:0.999987
?	O	O:0.999760
	
`	O	O:0.999796
cumsum	B-API	B-API:0.999242
`	O	O:0.999971
might	O	O:0.999665
not	O	O:0.999995
be	O	O:0.999997
the	O	O:0.999992
best	O	O:0.998007
example	O	O:0.999610
.	O	O:0.999846
	
I	O	O:0.999970
think	O	O:0.999953
you're	O	O:0.999314
after	O	O:0.999829
`	O	O:0.999963
plt.axis	B-API	B-API:0.997626
([	O	O:0.999980
xmin	O	O:0.995467
,	O	O:0.999991
xmax	O	O:0.999256
,	O	O:0.999993
ymin	O	O:0.999275
,	O	O:0.999994
ymax	O	O:0.998478
])`	O	O:0.999353
:	O	O:0.999919
#CODE	O	O:0.999838
	
Is	O	O:0.999673
`	O	O:0.999862
(	O	O:0.999966
dry	O	O:0.999856
,	O	O:0.999993
unrch	O	O:0.998903
)	O	O:0.999962
=	O	O:0.998905
((	O	O:0.999812
G	O	O:0.999663
==	O	O:0.999894
3	O	O:0.999907
)	O	O:0.999976
.sum()	B-API	B-API:0.998011
,	O	O:0.999915
(	O	O:0.999969
G	O	O:0.999878
==	O	O:0.999957
1	O	O:0.999946
)	O	O:0.999981
.sum()	B-API	B-API:0.995096
)`	O	O:0.999940
more	O	O:0.999301
vectorized	O	O:0.999469
?	O	O:0.999913
	
Then	O	O:0.999438
,	O	O:0.999996
`	O	O:0.999979
np.array	B-API	B-API:0.999703
(	O	O:0.999919
np.matrix	B-API	B-API:0.996619
(	O	O:0.999857
s.strip	O	O:0.927514
(	O	O:0.999902
'	O	O:0.999908
[	O	O:0.999990
]')))`	O	O:0.999860
will	O	O:0.999800
do	O	O:0.999992
the	O	O:0.999996
same	O	O:0.999535
magic	O	O:0.999666
.	O	O:0.999918
	
I'm	O	O:0.999944
trying	O	O:0.999902
to	O	O:0.999992
vectorize	B-API	O:0.954785
Z	O	O:0.999601
,	O	O:0.999944
but	O	O:0.999928
I'm	O	O:0.999947
finding	O	O:0.999913
it	O	O:0.999974
rather	O	O:0.999971
difficult	O	O:0.999855
for	O	O:0.999992
a	O	O:0.999983
triple	O	O:0.997783
for	O	O:0.999942
loop	O	O:0.998491
.	O	O:0.999622
	
How	O	O:0.999463
would	O	O:0.999971
that	O	O:0.999987
be	O	O:1.000000
done	O	O:0.999982
using	O	O:0.999105
np.dot	B-API	B-API:0.993858
?	O	O:0.999376
	
I	O	O:0.999869
was	O	O:0.999964
surprised	O	O:0.999113
how	O	O:0.999970
descending	O	O:0.999754
sorting	O	O:0.999752
of	O	O:0.999884
np.array	B-API	B-API:0.962567
seem	O	O:0.999892
so	O	O:0.999962
un-pythonic	O	O:0.999159
.	O	O:0.999862
	
`	O	O:0.999869
numpy.genfromtxt	B-API	B-API:0.999513
`	O	O:0.999989
accepts	O	O:0.999576
generators	O	O:0.999918
,	O	O:0.999995
so	O	O:0.999998
you	O	O:0.999987
can	O	O:0.999995
chain	O	O:0.999975
`	O	O:0.999996
genfromtext	O	B-API:0.564731
`	O	O:0.999984
and	O	O:0.999850
`	O	O:0.999974
ifilter	O	B-API:0.864373
`	O	O:0.999858
:	O	O:0.999711
#CODE	O	O:0.999908
	
I	O	O:0.999982
also	O	O:0.999964
tried	O	O:0.999733
`	O	O:0.999951
df.query()	B-API	B-API:0.999903
`	O	O:0.999957
,	O	O:0.999876
but	O	O:0.999981
no	O	O:0.999975
much	O	O:0.999312
improvement	O	O:0.999735
.	O	O:0.999660
	
According	O	O:0.999485
to	O	O:0.999980
the	O	O:0.999993
documentation	O	O:0.997401
(	O	O:0.999985
e.g.	O	O:0.999852
,	O	O:0.999997
here	O	O:0.999740
)	O	O:0.999992
,	O	O:0.999986
`	O	O:0.999977
PyArray_SimpleNew	B-API	B-API:0.996818
`	O	O:0.999991
has	O	O:0.999919
a	O	O:0.999999
return	O	O:0.994506
of	O	O:0.999978
type	O	O:0.994780
`	O	O:0.999991
PyObject	O	O:0.986488
*	O	O:0.999980
`	O	O:0.999972
and	O	O:0.999993
thus	O	O:0.999978
the	O	O:0.999976
above	O	O:0.999490
should	O	O:0.999892
be	O	O:0.999995
perfectly	O	O:0.999945
fine	O	O:0.998596
.	O	O:0.999879
	
Edit	O	O:0.997581
:	O	O:0.999932
`	O	O:0.999981
np.where	B-API	B-API:0.989282
`	O	O:0.999926
is	O	O:0.999955
optional	O	O:0.999065
,	O	O:0.999972
thanks	O	O:0.998486
@USER	O	O:0.998844
.	O	O:0.999779
	
or	O	O:0.999976
with	O	O:0.999887
`	O	O:0.999968
numpy.concatenate	B-API	B-API:0.995946
`	O	O:0.999985
?	O	O:0.999881
	
@USER	O	O:0.999578
you	O	O:0.999935
can	O	O:0.999975
do	O	O:0.999999
it	O	O:0.999996
,	O	O:0.999989
it's	O	O:0.999977
easy	O	O:0.999816
with	O	O:0.999919
`	O	O:0.999924
np.histogram	B-API	B-API:0.996609
`	O	O:0.999975
.	O	O:0.999518
	
`	O	O:0.999954
numpy.base_repr	B-API	B-API:0.975931
`	O	O:0.999981
uses	O	O:0.999504
this	O	O:0.999764
,	O	O:0.999979
but	O	O:0.999994
only	O	O:0.999974
operates	O	O:0.999938
on	O	O:0.999985
scalars	O	O:0.999031
.	O	O:0.999939
	
Python	O	O:0.999447
apply_along_axis	B-API	B-API:0.814946
of	O	O:0.999978
multiple	O	O:0.999434
arrays	O	O:0.999709
	
`	O	O:0.999946
numpy.average()	B-API	B-API:0.994722
`	O	O:0.999990
has	O	O:0.999985
a	O	O:0.999996
weights	O	O:0.996492
option	O	O:0.999467
,	O	O:0.999991
but	O	O:0.999976
`	O	O:0.999949
numpy.std()	B-API	B-API:0.999734
`	O	O:0.999980
does	O	O:0.998621
not	O	O:0.999974
.	O	O:0.999981
	
I	O	O:0.999963
wanted	O	O:0.999974
to	O	O:0.999906
write	O	O:0.999979
`	O	O:0.999994
M.det()	O	O:0.938432
`	O	O:0.999998
instead	O	O:0.999948
of	O	O:0.999993
`	O	O:0.999853
numpy.linalg.det	B-API	B-API:0.992383
(	O	O:0.999982
M	O	O:0.999959
)`	O	O:0.999693
,	O	O:0.999880
	
I	O	O:0.999882
was	O	O:0.999967
working	O	O:0.998700
with	O	O:0.999983
something	O	O:0.999956
like	O	O:0.999788
```	O	O:0.999989
s	O	O:0.999559
=	O	O:0.999856
pd.DataFrame	B-API	B-API:0.973819
([	O	O:0.999778
'	O	O:0.999810
1	O	O:0.999822
'	O	O:0.999964
,	O	O:0.999951
'	O	O:0.999984
na	O	O:0.999192
'	O	O:0.999977
,	O	O:0.999991
'	O	O:0.999967
3	O	O:0.999818
'	O	O:0.999978
,	O	O:0.999988
'	O	O:0.999974
4	O	O:0.999908
'])	O	O:0.999680
.	O	O:0.999442
	
tested	O	O:0.999334
it	O	O:0.999994
a	O	O:0.999996
bit	O	O:0.998918
myself	O	O:0.999005
:	O	O:0.999943
sympy.sin	O	O:0.863473
is	O	O:0.999996
much	O	O:0.999134
slower	O	O:0.999927
than	O	O:0.998249
numpy.sin	B-API	B-API:0.972357
	
I	O	O:0.999823
was	O	O:0.999993
thinking	O	O:0.999402
of	O	O:0.999997
something	O	O:0.999928
like	O	O:0.999916
`	O	O:0.999992
frombuffer	B-API	B-API:0.982743
`	O	O:0.999969
.	O	O:0.999295
	
OLS	O	O:0.999821
solution	O	O:0.999933
using	O	O:0.999856
pinv	B-API	B-API:0.982988
/	O	O:0.998538
svd	B-API	B-API:0.899733
#CODE	O	O:0.999033
	
The	O	O:0.999919
bad	O	O:0.999929
days	O	O:0.999670
are	O	O:0.999987
eliminated	O	O:0.999713
,	O	O:0.999958
and	O	O:0.999992
the	O	O:0.999992
good	O	O:0.999245
ones	O	O:0.999751
are	O	O:0.999992
kept	O	O:0.999749
.	O	O:0.999879
	
@USER	O	O:0.999332
Well	O	O:0.999136
in	O	O:0.999994
this	O	O:0.999951
case	O	O:0.999977
,	O	O:0.999996
`	O	O:0.999972
searchsorted	B-API	B-API:0.979742
`	O	O:0.999978
is	O	O:0.999976
basically	O	O:0.999973
looking	O	O:0.999926
for	O	O:0.999985
places	O	O:0.999707
or	O	O:0.999990
indices	O	O:0.999921
where	O	O:0.999988
elements	O	O:0.999962
from	O	O:0.999932
`	O	O:0.999995
message	O	O:0.998617
`	O	O:0.999999
exists	O	O:0.999358
in	O	O:0.999998
the	O	O:0.999998
keys	O	O:0.999797
of	O	O:0.999985
`	O	O:0.999993
codes	O	O:0.995706
`	O	O:0.999990
.	O	O:0.999637
	
@USER	O	O:0.999283
--	O	O:0.999959
I	O	O:0.999956
had	O	O:0.999995
a	O	O:0.999962
hard	O	O:0.998931
time	O	O:0.999980
remembering	O	O:0.999921
how	O	O:0.999909
`	O	O:0.999995
translate	O	B-API:0.568955
`	O	O:0.999991
and	O	O:0.999836
`	O	O:0.999998
maketrans	O	O:0.962219
`	O	O:0.999998
work	O	O:0.999375
for	O	O:0.999999
quite	O	O:0.999960
a	O	O:0.999974
while	O	O:0.999539
too	O	O:0.999498
,	O	O:0.999984
but	O	O:0.999922
I've	O	O:0.999665
gotten	O	O:0.999593
used	O	O:0.999752
to	O	O:0.999931
it	O	O:0.999996
.	O	O:0.999940
	
Edit	O	O:0.998136
:	O	O:0.999976
if	O	O:0.999990
you're	O	O:0.999993
using	O	O:0.999984
a	O	O:0.999990
version	O	O:0.998331
of	O	O:0.999990
numpy	O	O:0.998778
>	O	O:0.999973
=	O	O:0.999907
1.8.0	O	O:0.999566
,	O	O:0.999996
then	O	O:0.999792
`	O	O:0.999998
np.linalg.eigvals	B-API	B-API:0.963494
`	O	O:0.999999
operates	O	O:0.999444
over	O	O:0.999920
the	O	O:0.999964
last	O	O:0.999619
two	O	O:0.999995
dimensions	O	O:0.999956
of	O	O:0.999988
whatever	O	O:0.999953
array	O	O:0.999976
you	O	O:0.999966
hand	O	O:0.999940
it	O	O:0.999998
,	O	O:0.999998
so	O	O:0.999997
if	O	O:0.999993
you	O	O:0.999991
reshape	O	O:0.975249
your	O	O:0.999966
input	O	O:0.999958
to	O	O:0.999999
an	O	O:0.999996
`	O	O:0.999850
(	O	O:0.999965
n_subarrays	O	O:0.999533
,	O	O:0.999992
nrows	O	O:0.999331
,	O	O:0.999994
ncols	O	O:0.999784
)`	O	O:0.999950
array	O	O:0.999907
you'll	O	O:0.999960
only	O	O:0.999987
have	O	O:0.999989
to	O	O:0.999997
call	O	O:0.999908
`	O	O:0.999992
eigvals	B-API	B-API:0.962928
`	O	O:0.999996
once	O	O:0.987694
:	O	O:0.999986
#CODE	O	O:0.999841
	
`	O	O:0.999943
reshape	B-API	B-API:0.968335
`	O	O:0.999987
returns	O	O:0.999723
a	O	O:0.999999
view	O	O:0.991562
of	O	O:0.999994
the	O	O:0.999975
original	O	O:0.999833
array	O	O:0.999802
,	O	O:0.999991
not	O	O:0.999996
a	O	O:0.999999
copy	O	O:0.989361
,	O	O:0.999998
so	O	O:0.999921
the	O	O:0.999974
conversion	O	O:0.999794
to	O	O:0.999993
3D	O	O:0.999999
only	O	O:0.999907
requires	O	O:0.999946
altering	O	O:0.999899
the	O	O:0.999726
`	O	O:0.999959
shape	O	O:0.993147
`	O	O:0.999987
and	O	O:0.999839
`	O	O:0.999995
strides	O	B-API:0.993605
`	O	O:0.999999
attributes	O	O:0.998475
of	O	O:0.999994
the	O	O:0.999975
array	O	O:0.999958
,	O	O:0.999968
without	O	O:0.999864
having	O	O:0.999462
to	O	O:0.999988
copy	O	O:0.999952
any	O	O:0.999994
of	O	O:0.999885
the	O	O:0.999984
actual	O	O:0.999955
data	O	O:0.999776
.	O	O:0.999908
	
sum	O	O:0.999892
this	O	O:0.999942
new	O	O:0.999952
array	O	O:0.999969
along	O	O:0.999783
particular	O	O:0.999545
axes	O	O:0.682221
;	O	O:0.999968
and	O	O:0.999997
then	O	O:0.999964
maybe	O	O:0.999922
	
Calling	O	O:0.996044
`	O	O:0.999942
reshape	B-API	B-API:0.970010
`	O	O:0.999986
returns	O	O:0.999607
a	O	O:0.999997
view	O	O:0.980452
,	O	O:0.999994
so	O	O:0.999962
it	O	O:0.999979
doesn't	O	O:0.999943
incur	O	O:0.999820
any	O	O:0.999968
big	O	O:0.999892
copying	O	O:0.999066
costs	O	O:0.998880
or	O	O:0.999996
anything	O	O:0.999950
like	O	O:0.999934
that	O	O:0.999876
.	O	O:0.999975
	
so	O	O:0.999962
at	O	O:0.999999
some	O	O:0.999958
point	O	O:0.999758
in	O	O:0.999985
the	O	O:0.999970
execution	O	O:0.999774
it	O	O:0.999983
will	O	O:0.999946
max	O	O:0.959288
my	O	O:0.999946
memory	O	O:0.999428
.	O	O:0.999872
	
Note	O	O:0.999936
that	O	O:0.999919
extension	O	O:0.999992
to	O	O:0.999999
even	O	O:0.999996
higher	O	O:0.999938
combinatorics	O	O:0.999644
should	O	O:0.999932
be	O	O:0.999998
trivial	O	O:0.999886
,	O	O:0.999989
along	O	O:0.999806
the	O	O:0.999946
lines	O	O:0.998660
presented	O	O:0.998931
;	O	O:0.999993
but	O	O:0.999993
keep	O	O:0.999755
an	O	O:0.999994
eye	O	O:0.992987
on	O	O:0.999994
the	O	O:0.999991
n	O	O:0.999976
used	O	O:0.999665
in	O	O:0.999989
that	O	O:0.999936
case	O	O:0.999955
.	O	O:0.999974
	
These	O	O:0.999495
functions	O	O:0.999933
return	O	O:0.999295
a	O	O:0.999984
list	O	O:0.996662
,	O	O:0.999994
which	O	O:0.999956
I	O	O:0.999996
convert	O	O:0.999750
to	O	O:0.999991
a	O	O:1.000000
numpy	O	O:0.999199
array	O	O:0.999901
and	O	O:0.999998
then	O	O:0.999929
sum	O	O:0.999954
over	O	O:0.999750
.	O	O:0.999763
	
Can	O	O:0.999722
it	O	O:0.999988
be	O	O:0.999998
because	O	O:0.999988
of	O	O:0.999955
the	O	O:0.999998
many	O	O:0.999971
zeros	O	O:0.791622
in	O	O:0.999985
the	O	O:0.999983
initial	O	O:0.999831
table	O	O:0.999848
?	O	O:0.999933
	
I	O	O:0.999980
also	O	O:0.999933
understand	O	O:0.999947
that	O	O:0.999688
sum	B-API	O:0.998907
(	O	O:0.999987
A	O	O:0.999985
,	O	O:0.999993
axis=1	O	O:0.999031
)	O	O:0.999989
will	O	O:0.999808
sum	O	O:0.999990
each	O	O:0.999836
row	O	O:0.999818
.	O	O:0.999884
	
But	O	O:0.999971
what	O	O:0.999903
I	O	O:0.999996
really	O	O:0.999988
want	O	O:0.999715
to	O	O:0.999980
do	O	O:0.999999
,	O	O:0.999988
is	O	O:0.999986
to	O	O:0.999972
bin	O	O:0.999970
`	O	O:0.999995
array	O	O:0.998650
[:	O	O:0.999992
,	O	O:0.999975
1	O	O:0.999955
]`	O	O:0.999989
by	O	O:0.999895
day	O	O:0.999886
(	O	O:0.999983
as	O	O:0.999998
derived	O	O:0.999757
by	O	O:0.999960
the	O	O:0.999983
unix	O	O:0.994563
timestamps	O	O:0.996389
in	O	O:0.999980
array	O	O:0.999820
[:	O	O:0.999985
,	O	O:0.999975
0	O	O:0.999902
])	O	O:0.999840
,	O	O:0.999868
and	O	O:0.999994
plot	O	O:0.999893
these	O	O:0.999963
as	O	O:0.999999
a	O	O:0.999977
stacked	O	O:0.997437
histogram	O	O:0.999937
,	O	O:0.999992
with	O	O:0.999967
each	O	O:0.996226
(	O	O:0.999994
colored	O	O:0.999823
)	O	O:0.999993
stack	O	B-API:0.541527
representing	O	O:0.999967
a	O	O:0.999943
day	O	O:0.999472
.	O	O:0.999831
	
It's	O	O:0.999843
interesting	O	O:0.999830
to	O	O:0.999983
see	O	O:0.999999
that	O	O:0.999992
when	O	O:0.999985
I	O	O:1.000000
go	O	O:1.000000
back	O	O:0.999026
to	O	O:0.999970
`	O	O:0.999999
nloop=1000	O	O:0.991903
`	O	O:0.999996
,	O	O:0.999839
`	O	O:0.999997
nreps=3	O	O:0.991670
`	O	O:0.999996
I	O	O:0.999992
actually	O	O:0.999995
see	O	O:0.999964
a	O	O:0.999993
slightly	O	O:0.999123
*	O	O:0.999992
greater	O	O:0.999246
*	O	O:0.999998
rate	O	O:0.951782
of	O	O:0.999979
cache	O	O:0.999904
misses	O	O:0.999806
for	O	O:0.999992
the	O	O:0.999926
row	O	O:0.999585
sum	O	O:0.996538
(	O	O:0.999994
17%	O	O:0.999829
vs	O	O:0.999939
13%	O	O:0.999850
)	O	O:0.999989
,	O	O:0.999997
even	O	O:0.999840
though	O	O:0.999975
it's	O	O:0.999940
faster	O	O:0.999913
than	O	O:0.999900
the	O	O:0.999990
column	O	O:0.999882
sum	O	O:0.999671
.	O	O:0.999952
	
You	O	O:0.999914
can	O	O:0.999963
concatenate	O	O:0.981148
arrays	O	O:0.999925
in	O	O:0.999930
`	O	O:0.999994
numpy	O	O:0.996685
`	O	O:0.999980
.	O	O:0.999411
	
If	O	O:0.999955
you	O	O:0.999955
are	O	O:0.999996
100%	O	O:0.999955
sure	O	O:0.999913
that	O	O:0.999879
l2	O	O:0.999915
would	O	O:0.999992
only	O	O:0.999985
be	O	O:1.000000
one	O	O:0.999998
column	O	O:0.999981
then	O	O:0.999976
you	O	O:0.999999
can	O	O:0.999994
reshape	O	O:0.994889
that	O	O:0.999961
array	O	O:0.999988
to	O	O:0.999995
make	O	O:0.999984
it	O	O:0.999991
one	O	O:0.999997
dimensional	O	O:0.999605
before	O	O:0.999893
doing	O	O:0.999679
the	O	O:0.999822
subtraction	O	O:0.993586
.	O	O:0.999862
	
You	O	O:0.999794
won't	O	O:0.999917
be	O	O:0.999999
able	O	O:0.999996
to	O	O:0.999996
create	O	O:0.999993
a	O	O:0.999996
2D	O	O:0.999877
array	O	O:0.999974
that	O	O:0.999768
way	O	O:0.999967
,	O	O:0.999968
and	O	O:0.999814
@USER	O	O:0.999810
method	O	O:0.999834
of	O	O:0.999995
returning	O	O:0.999903
a	O	O:0.999982
1D	O	O:0.999648
array	O	O:0.999974
that	O	O:0.999915
you	O	O:0.999996
reshape	O	O:0.960844
afterwards	O	O:0.999507
is	O	O:0.999994
a	O	O:0.999993
sure	O	O:0.998950
go	O	O:0.999892
.	O	O:0.999918
	
I	O	O:0.999992
have	O	O:0.999993
a	O	O:0.999970
square	O	O:0.998429
matrix	O	O:0.998511
A	O	O:0.999849
(	O	O:0.999988
could	O	O:0.999918
be	O	O:0.999999
any	O	O:0.999996
size	O	O:0.999007
)	O	O:0.999952
and	O	O:0.999989
I	O	O:0.999999
want	O	O:0.999935
to	O	O:0.999977
take	O	O:0.999998
the	O	O:0.999990
upper	O	O:0.999723
triangular	O	O:0.999570
part	O	O:0.999536
and	O	O:0.999997
place	O	O:0.999988
those	O	O:0.999963
values	O	O:0.999774
in	O	O:0.999989
an	O	O:0.999997
array	O	O:0.999975
without	O	O:0.999928
the	O	O:0.999980
values	O	O:0.998750
below	O	O:0.999839
the	O	O:0.999992
center	O	O:0.998721
diagonal	O	B-API:0.535912
(	O	O:0.999958
k=0	O	O:0.999628
)	O	O:0.999946
.	O	O:0.999733
	
You	O	O:0.999898
can	O	O:0.999944
mimic	O	O:0.999996
this	O	O:0.999948
behavior	O	O:0.999947
with	O	O:0.999979
a	O	O:0.999981
simple	O	O:0.997858
function	O	O:0.999951
to	O	O:0.999989
flatten	O	O:0.975359
a	O	O:0.999966
list	O	O:0.944663
:	O	O:0.999974
#CODE	O	O:0.999786
	
So	O	O:0.999792
`	O	O:0.999995
popt	O	O:0.979255
`	O	O:0.999997
,	O	O:0.999991
according	O	O:0.999881
to	O	O:0.999971
the	O	O:0.999996
documentation	O	O:0.999818
,	O	O:0.999992
returns	O	O:0.999654
*	O	O:0.999926
"	O	O:0.999994
Optimal	O	O:0.999771
values	O	O:0.999503
for	O	O:0.999983
the	O	O:0.999994
parameters	O	O:0.997555
so	O	O:0.999996
that	O	O:0.999995
the	O	O:1.000000
sum	O	O:0.999904
of	O	O:0.999993
the	O	O:0.999984
squared	O	O:0.999946
error	O	O:0.999952
of	O	O:0.999959
f	O	O:0.998148
(	O	O:0.999993
xdata	O	O:0.998817
,	O	O:0.999996
popt	O	O:0.998561
)	O	O:0.999988
-	O	O:0.999990
ydata	O	O:0.997952
is	O	O:0.999979
minimized	O	O:0.997759
"	O	O:0.999960
.	O	O:0.999587
	
And	O	O:0.999897
I'd	O	O:0.999996
like	O	O:0.999951
indices	O	O:0.999479
`	O	O:0.999984
i	O	O:0.999660
`	O	O:0.999999
such	O	O:0.999836
that	O	O:0.999953
,	O	O:0.999971
#CODE	O	O:0.999778
	
But	O	O:0.999892
,	O	O:0.999989
`	O	O:0.999978
resize	B-API	B-API:0.990164
`	O	O:0.999982
looks	O	O:0.999721
like	O	O:0.999941
it	O	O:0.999997
just	O	O:0.999878
might	O	O:0.999990
be	O	O:0.999990
the	O	O:0.999996
thing	O	O:0.999178
I'm	O	O:0.999974
looking	O	O:0.999164
for	O	O:0.999970
...	O	O:0.998333
	
`	O	O:0.999938
rfft	B-API	B-API:0.996840
`	O	O:0.999997
,	O	O:0.999991
apart	O	O:0.999987
from	O	O:0.999940
repeated	O	O:0.999492
terms	O	O:0.999881
excluded	O	O:0.999272
,	O	O:0.999966
and	O	O:0.999994
an	O	O:0.999980
almost	O	O:0.999668
2x	O	O:0.999927
speed-up	O	O:0.997409
,	O	O:0.999986
returns	O	O:0.999833
the	O	O:0.999981
exact	O	O:0.999970
same	O	O:0.999978
you	O	O:0.999981
would	O	O:0.999996
get	O	O:0.999998
from	O	O:0.999981
`	O	O:0.999990
fft	B-API	B-API:0.946612
`	O	O:0.999959
.	O	O:0.999054
	
Plus	O	O:0.999775
,	O	O:0.999997
if	O	O:0.999995
I	O	O:0.999999
have	O	O:0.999982
4	O	O:0.999954
dimensions	O	O:0.999929
,	O	O:0.999989
I	O	O:0.999997
thought	O	O:0.999588
I	O	O:0.999956
should	O	O:0.999990
have	O	O:0.999822
4	O	O:0.999982
eigenvalues	O	O:0.997944
and	O	O:0.999989
not	O	O:0.999985
150	O	O:0.999903
like	O	O:0.999933
the	O	O:0.999911
eig	B-API	B-API:0.760563
gives	O	O:0.999434
me	O	O:0.999880
.	O	O:0.999889
	
If	O	O:0.999966
I	O	O:0.999982
run	O	O:0.999987
your	O	O:0.999847
code	O	O:0.999889
to	O	O:0.999999
generate	O	O:0.999955
`	O	O:0.999992
d	O	O:0.999081
`	O	O:0.999991
and	O	O:0.999786
`	O	O:0.999996
dx	O	O:0.981736
`	O	O:0.999994
with	O	O:0.998345
`	O	O:0.999981
eig	B-API	B-API:0.925168
`	O	O:0.999997
I	O	O:0.999964
get	O	O:0.999991
the	O	O:0.999849
following	O	O:0.995154
:	O	O:0.999907
#CODE	O	O:0.999809
	
In	O	O:0.999909
other	O	O:0.999820
words-	O	O:0.999192
it	O	O:0.999556
is	O	O:0.999983
not	O	O:0.999972
just	O	O:0.999979
taking	O	O:0.999972
a	O	O:0.999975
min	O	B-API:0.608280
or	O	O:0.999965
max	O	O:0.523864
.	O	O:0.999832
	
D	O	O:0.998892
[	O	O:0.999975
I+1	O	O:0.999698
,	O	O:0.999991
J+1	O	O:0.999796
]	O	O:0.999964
=	O	O:0.998875
map	B-API	B-API:0.974257
(	O	O:0.999970
norm	O	B-API:0.781461
,	O	O:0.999984
x	O	O:0.999876
[	O	O:0.999987
I	O	O:0.999996
]	O	O:0.999987
-y	O	O:0.998476
[	O	O:0.999963
J	O	O:0.999914
])	O	O:0.999778
+	O	O:0.998829
np.minimum	B-API	B-API:0.991172
(	O	O:0.999674
np.minimum	B-API	B-API:0.982725
(	O	O:0.999928
D	O	O:0.999925
[	O	O:0.999978
I	O	O:0.999993
,	O	O:0.999997
J	O	O:0.999795
]	O	O:0.999981
,	O	O:0.999915
D	O	O:0.999924
[	O	O:0.999973
I	O	O:0.999983
,	O	O:0.999998
J+1	O	O:0.999330
])	O	O:0.999962
,	O	O:0.999952
D	O	O:0.999825
[	O	O:0.999977
I+1	O	O:0.999904
,	O	O:0.999988
J	O	O:0.999881
])	O	O:0.999872
?	O	O:0.999760
	
`	O	O:0.999958
dot	B-API	O:0.971423
`	O	O:0.999995
just	O	O:0.997439
has	O	O:0.999995
tighter	O	O:0.999875
code	O	O:0.999747
for	O	O:0.999997
a	O	O:0.999990
specific	O	O:0.999100
combination	O	O:0.999968
of	O	O:0.999991
dimensions	O	O:0.998856
.	O	O:0.999928
	
numpy	O	O:0.999449
sum	B-API	O:0.999139
does	O	O:0.999845
not	O	O:0.999983
agree	O	O:0.999899
	
Since	O	O:0.999804
you	O	O:0.999960
are	O	O:0.999999
only	O	O:0.999976
adding	O	O:0.999957
many	O	O:0.999597
`	O	O:0.999965
1	O	O:0.999207
`	O	O:0.999996
s	O	O:0.999840
you	O	O:0.999989
can	O	O:0.999989
convert	O	O:0.999884
`	O	O:0.999999
diff	O	B-API:0.983729
`	O	O:0.999995
to	O	O:0.994736
`	O	O:1.000000
bool	O	O:0.571431
`	O	O:0.999956
:	O	O:0.999757
#CODE	O	O:0.999910
	
It	O	O:0.999775
isn't	O	O:0.999921
mathematically	O	O:0.999947
possible	O	O:0.999903
to	O	O:0.999996
represent	O	O:0.999975
0	O	O:0.999975
on	O	O:0.999997
a	O	O:0.999989
log	O	O:0.979310
scale	O	O:0.999709
,	O	O:0.999995
so	O	O:0.999993
the	O	O:0.999995
first	O	O:0.999904
value	O	O:0.999960
will	O	O:0.999963
have	O	O:0.999992
to	O	O:0.999997
either	O	O:0.999998
be	O	O:0.999996
masked	O	O:0.999901
or	O	O:0.999978
clipped	O	O:0.999720
to	O	O:0.999998
a	O	O:1.000000
very	O	O:0.999121
small	O	O:0.999911
positive	O	O:0.998617
number	O	O:0.999166
.	O	O:0.999750
	
possible	O	O:0.999872
duplicate	O	O:0.999967
of	O	O:0.999924
[	O	O:0.999985
Efficiently	O	O:0.999984
count	O	O:0.999511
the	O	O:0.999994
number	O	O:0.999945
of	O	O:0.999997
occurrences	O	O:0.999955
of	O	O:0.999998
unique	O	O:0.967953
subarrays	O	O:0.999674
in	O	O:0.999950
NumPy	O	O:0.999890
?	O	O:0.999893
]	O	O:0.999067
(	O	O:0.999945
#URL	O	O:0.999444
)	O	O:0.999917
	
Or	O	O:0.999979
you	O	O:0.999951
could	O	O:0.999983
mask	O	O:0.993029
the	O	O:0.999995
x	O	O:0.999986
value	O	O:0.999973
as	O	O:0.999999
well	O	O:0.999923
,	O	O:0.999998
so	O	O:0.999991
the	O	O:0.999955
indices	O	O:0.999215
were	O	O:0.999846
consistent	O	O:0.999561
between	O	O:0.999622
x	O	O:0.999555
and	O	O:0.999972
y	O	O:0.999886
#CODE	O	O:0.998276
	
Here	O	O:0.999676
the	O	O:0.999946
`	O	O:0.999979
outer	B-API	B-API:0.969913
`	O	O:0.999993
method	O	O:0.999907
of	O	O:0.999996
the	O	O:0.999966
`	O	O:0.999995
multiply	B-API	O:0.968293
`	O	O:0.999997
ufunc	O	O:0.950882
is	O	O:0.999995
used	O	O:0.999702
to	O	O:0.999987
create	O	O:0.999982
the	O	O:0.999989
new	O	O:0.999898
20x20	O	O:0.999300
array	O	O:0.999679
.	O	O:0.999762
	
I	O	O:0.999992
have	O	O:0.999993
a	O	O:0.999976
3D	O	O:0.999875
numpy	O	O:0.999629
array	O	O:0.999985
consisting	O	O:0.999853
of	O	O:0.999963
1's	O	O:0.999747
and	O	O:0.999994
zeros	O	O:0.969399
defining	O	O:0.998679
open	O	O:0.994045
versus	O	O:0.999925
filled	O	O:0.999847
space	O	O:0.999793
in	O	O:0.999991
a	O	O:0.999997
porous	O	O:0.996436
solid	O	O:0.995746
(	O	O:0.999963
it's	O	O:0.999937
currently	O	O:0.999983
a	O	O:0.999999
numpy	O	O:0.998566
Int64	O	O:0.992331
array	O	O:0.999836
)	O	O:0.999903
.	O	O:0.999699
	
You	O	O:0.999789
are	O	O:0.999995
attempting	O	O:0.999665
to	O	O:0.999981
broadcast	O	O:0.999988
a	O	O:0.999994
4-D	O	O:0.999818
array	O	O:0.999978
together	O	O:0.999655
with	O	O:0.999971
a	O	O:0.999975
3-D	O	O:0.999316
array	O	O:0.999720
.	O	O:0.999720
	
Scipy	O	O:0.999767
NDimage	O	O:0.997210
correlate	O	B-API:0.811407
:	O	O:0.999987
unbearably	O	O:0.999868
slow	O	O:0.999180
	
I	O	O:0.999979
know	O	O:0.999979
that	O	O:0.999900
I	O	O:0.999998
can	O	O:0.999993
reshape	O	O:0.882725
the	O	O:0.999988
array	O	O:0.999941
to	O	O:0.999997
a	O	O:0.999999
100	O	O:0.999772
x	O	O:0.999862
2	O	O:0.999987
array	O	O:0.999960
of	O	O:0.999964
grid	O	O:0.999256
points	O	O:0.998770
:	O	O:0.999958
#CODE	O	O:0.999870
	
You	O	O:0.999942
probably	O	O:0.999876
could	O	O:0.999958
get	O	O:0.999992
`	O	O:0.999997
append	B-API	B-API:0.939136
`	O	O:0.999982
to	O	O:0.999940
work	O	O:0.999983
,	O	O:0.999987
but	O	O:0.999985
it	O	O:0.999995
just	O	O:0.999979
does	O	O:0.999997
a	O	O:0.999999
step	O	O:0.999989
by	O	O:0.999997
step	O	O:0.999966
concatenate	O	O:0.669832
,	O	O:0.999990
which	O	O:0.999765
is	O	O:0.999965
slower	O	O:0.997630
.	O	O:0.999872
	
This	O	O:0.999776
produces	O	O:0.999928
a	O	O:0.999995
random	O	O:0.999307
permutation	O	O:0.954969
of	O	O:0.999990
each	O	O:0.999784
column's	O	O:0.999968
indices	O	O:0.999275
.	O	O:0.999883
	
As	O	O:0.999929
it	O	O:0.999980
happens	O	O:0.999929
,	O	O:0.999995
the	O	O:0.999958
histogram	O	O:0.998728
is	O	O:0.999992
enough	O	O:0.999457
for	O	O:0.999988
the	O	O:0.999651
former	O	O:0.997634
.	O	O:0.999734
	
I	O	O:0.999978
see	O	O:0.999976
how	O	O:0.999943
the	O	O:0.999998
symmetry	O	O:0.999924
of	O	O:0.999987
the	O	O:0.999977
trace	O	O:0.999920
lets	O	O:0.999905
you	O	O:0.999986
replace	O	O:0.999022
the	O	O:0.999998
final	O	O:0.998602
`	O	O:0.999990
dot	B-API	O:0.967211
`	O	O:0.999985
.	O	O:0.998920
	
In	O	O:0.999982
that	O	O:0.999909
question	O	O:0.999980
,	O	O:0.999998
I	O	O:0.999996
sought	O	O:0.999922
to	O	O:0.999987
sum	O	O:0.999997
values	O	O:0.999879
in	O	O:0.999997
a	O	O:0.999998
numpy	O	O:0.999569
structured	O	O:0.999714
array	O	O:0.999974
based	O	O:0.999476
on	O	O:0.999998
multiple	O	O:0.999882
criteria	O	O:0.999840
,	O	O:0.999995
including	O	O:0.999908
matches	O	O:0.998937
in	O	O:0.999980
a	O	O:0.999985
list	O	O:0.989794
.	O	O:0.999884
	
to	O	O:0.999965
delete	O	O:0.999952
the	O	O:0.999990
lines	O	O:0.999566
that	O	O:0.999898
had	O	O:0.999997
zeros	O	O:0.948588
in	O	O:0.999997
them	O	O:0.999474
!	O	O:0.999956
	
Fill	O	O:0.999270
scipy	O	O:0.998750
/	O	O:0.999906
numpy	O	O:0.999131
matrix	O	O:0.999915
based	O	O:0.999735
on	O	O:0.999977
indices	O	O:0.999295
and	O	O:0.999993
values	O	O:0.999229
	
It	O	O:0.999936
looks	O	O:0.999967
like	O	O:0.999978
a	O	O:0.999993
vector	O	O:0.999537
product	O	O:0.999874
followed	O	O:0.999964
by	O	O:0.999997
a	O	O:0.999991
sum	O	O:0.998695
along	O	O:0.999930
the	O	O:0.999975
resulting	O	O:0.998636
array	O	O:0.999681
.	O	O:0.999815
	
The	O	O:0.999944
trick	O	O:0.999109
is	O	O:0.999990
that	O	O:0.999975
this	O	O:0.999989
convolve	B-API	O:0.562957
function	O	O:0.999899
can	O	O:0.999946
be	O	O:0.999999
used	O	O:0.999936
in-place	O	O:0.998851
so	O	O:0.999988
the	O	O:0.999981
double	O	O:0.981586
for	O	O:0.999903
loop	O	O:0.992132
:	O	O:0.999909
#CODE	O	O:0.999795
	
But	O	O:0.999980
this	O	O:0.999858
reshape	B-API	O:0.678759
should	O	O:0.999931
produce	O	O:0.999983
a	O	O:0.999989
`	O	O:0.999793
(	O	O:0.999941
n	O	O:0.999981
,	O	O:0.999985
1	O	O:0.999960
,	O	O:0.999979
1	O	O:0.999957
)`	O	O:0.999954
array	O	O:0.999684
,	O	O:0.999990
not	O	O:0.999998
your	O	O:0.999850
`	O	O:0.999948
(	O	O:0.999965
1	O	O:0.999985
,	O	O:0.999971
1	O	O:0.999946
,	O	O:0.999951
1	O	O:0.999890
,...	O	O:0.999528
)`	O	O:0.999881
array	O	O:0.999606
.	O	O:0.999815
	
For	O	O:0.999939
an	O	O:0.999981
extreme	O	O:0.999876
example	O	O:0.999825
,	O	O:0.999996
consider	O	O:0.999955
a	O	O:0.999991
sequence	O	O:0.999933
that	O	O:0.999989
consists	O	O:0.999990
of	O	O:0.999996
9	O	O:0.999950
zeros	O	O:0.977371
followed	O	O:0.999941
by	O	O:0.999996
the	O	O:0.999992
result	O	O:0.999926
of	O	O:0.999998
a	O	O:0.999995
coin	O	O:0.999546
toss	O	O:0.999701
,	O	O:0.999994
9	O	O:0.999930
zeros	O	O:0.871814
and	O	O:0.999996
another	O	O:0.999980
coin	O	O:0.998176
toss	O	O:0.999481
,	O	O:0.999992
etc	O	O:0.999889
.	O	O:0.999923
	
If	O	O:0.999980
so	O	O:0.999996
then	O	O:0.999854
`	O	O:0.999997
np.array	B-API	B-API:0.997928
(	O	O:0.999998
a	O	O:0.999993
)`	O	O:0.995584
is	O	O:0.999990
a	O	O:0.999968
2d	O	O:0.999698
array	O	O:0.999827
,	O	O:0.999963
and	O	O:0.999996
you	O	O:0.999983
can	O	O:0.999986
sum	O	O:0.999999
over	O	O:0.999817
`	O	O:0.999981
axis=1	O	O:0.988369
`	O	O:0.999976
.	O	O:0.999237
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999805
to	O	O:0.999997
create	O	O:0.999991
a	O	O:0.999996
lat	O	O:0.997832
/	O	O:0.999956
lon	O	O:0.998916
grid	O	O:0.999931
that	O	O:0.999926
contains	O	O:0.999926
an	O	O:0.999999
array	O	O:0.999973
of	O	O:0.999977
found	O	O:0.999539
indices	O	O:0.999896
where	O	O:0.999947
two	O	O:0.999973
conditions	O	O:0.999786
are	O	O:0.999991
met	O	O:0.999948
for	O	O:0.999995
a	O	O:0.999962
lat	O	O:0.980140
/	O	O:0.999938
lon	O	O:0.998080
combination	O	O:0.999809
.	O	O:0.999897
	
This	O	O:0.999841
NAMBE	O	O:0.996899
is	O	O:0.999991
the	O	O:0.999958
absolute	O	O:0.927998
difference	O	O:0.999770
between	O	O:0.999770
a	O	O:0.999997
base	O	O:0.999119
vector	O	O:0.999936
and	O	O:0.999990
another	O	O:0.999836
vector	O	O:0.999701
,	O	O:0.999992
divided	O	O:0.999876
by	O	O:0.999966
the	O	O:0.999991
base	O	O:0.999250
vector	O	O:0.999715
and	O	O:0.999995
multiplied	O	O:0.999971
by	O	O:0.999972
a	O	O:0.999987
hundred	O	O:0.996555
,	O	O:0.999975
in	O	O:0.999891
pseudo-code	O	O:0.998833
notation	O	O:0.999414
:	O	O:0.999984
#CODE	O	O:0.999865
	
this	O	O:0.999827
my	O	O:0.999992
code	O	O:0.999735
to	O	O:0.999979
and	O	O:0.999999
i	O	O:0.999991
want	O	O:0.999928
to	O	O:0.999962
use	O	O:0.999999
histogram	O	O:0.999954
data	O	O:0.999928
to	O	O:0.999999
plot	O	O:0.999993
scatter	O	O:0.983823
where	O	O:0.999947
y	O	O:0.999974
axis	O	O:0.999853
is	O	O:0.999995
counts	O	O:0.999705
center	O	O:0.999935
from	O	O:0.999932
the	O	O:0.999942
histogram	O	O:0.999898
,	O	O:0.999945
is	O	O:0.999997
there	O	O:0.999945
any	O	O:0.999980
direct	O	O:0.998524
command	O	O:0.999592
or	O	O:0.999992
way	O	O:0.999970
to	O	O:0.999986
do	O	O:0.999999
this	O	O:0.999918
?	O	O:0.999968
	
Please	O	O:0.999680
compile	O	O:0.999189
with	O	O:0.999789
`	O	O:0.999980
cython	O	O:0.998965
-a	O	O:0.999971
`	O	O:0.999968
,	O	O:0.999997
then	O	O:0.999992
show	O	O:0.999957
us	O	O:0.999994
the	O	O:0.999982
C	O	O:0.999811
code	O	O:0.999916
that	O	O:0.999969
the	O	O:0.999998
`	O	O:0.999997
a	O	O:0.999948
[	O	O:0.999973
0	O	O:0.999942
]	O	O:0.999901
+=	O	O:0.999882
sum	O	O:0.999324
`	O	O:0.999981
line	O	O:0.999278
turns	O	O:0.999916
into	O	O:0.998820
.	O	O:0.999819
	
The	O	O:0.999923
revised	O	O:0.999364
question	O	O:0.999067
is	O	O:0.999994
still	O	O:0.999892
a	O	O:0.999997
duplicate	O	O:0.999698
,	O	O:0.999990
see	O	O:0.999840
[	O	O:0.999995
this	O	O:0.999962
question	O	O:0.999758
]	O	O:0.999812
(	O	O:0.999886
#URL	O	O:0.999626
)	O	O:0.999963
,	O	O:0.999932
and	O	O:0.999945
[	O	O:0.999994
this	O	O:0.999807
question	O	O:0.999701
]	O	O:0.999744
(	O	O:0.999907
#URL	O	O:0.999866
)	O	O:0.999982
for	O	O:0.999955
finding	O	O:0.999553
the	O	O:0.999653
indices	O	O:0.995848
.	O	O:0.999799
	
ValueError	O	O:0.996655
:	O	O:0.999970
operands	O	O:0.999341
could	O	O:0.999961
not	O	O:0.999999
be	O	O:0.999999
broadcast	O	O:0.999942
together	O	O:0.999633
with	O	O:0.999983
different	O	O:0.999887
shapes	O	O:0.998403
in	O	O:0.999981
numpy	O	O:0.999863
?	O	O:0.999951
	
There	O	O:0.999391
are	O	O:0.999996
thousands	O	O:0.999989
of	O	O:0.999994
numbers	O	O:0.999382
below	O	O:0.999962
the	O	O:0.999998
ones	O	O:0.999441
shown	O	O:0.999693
here	O	O:0.999905
.	O	O:0.999932
	
Assuming	O	O:0.999734
you	O	O:0.999982
want	O	O:0.999984
to	O	O:0.999997
align	O	O:0.996200
all	O	O:0.999991
the	O	O:0.999989
arrays	O	O:0.999735
to	O	O:0.999982
the	O	O:1.000000
left	O	O:0.998221
,	O	O:0.999975
and	O	O:0.999996
pad	O	O:0.999612
to	O	O:0.999977
the	O	O:0.999999
right	O	O:0.999902
with	O	O:0.999980
zeros	O	O:0.962375
,	O	O:1.000000
then	O	O:0.999969
you	O	O:0.999998
could	O	O:0.999998
first	O	O:0.999997
find	O	O:0.999965
the	O	O:0.999995
maximum	O	O:0.999621
length	O	O:0.998522
with	O	O:0.999590
#CODE	O	O:0.999638
	
How	O	O:0.999931
to	O	O:0.999983
do	O	O:0.999999
the	O	O:0.999997
same	O	O:0.999861
If	O	O:0.999991
I	O	O:0.999999
want	O	O:0.999988
to	O	O:0.999896
apply	O	O:0.987212
norm	O	B-API:0.800844
column-wise	O	O:0.998904
to	O	O:0.999995
a	O	O:0.999998
matrix	O	O:0.998475
?	O	O:0.999954
	
The	O	O:0.999953
easiest	O	O:0.999491
approach	O	O:0.999813
is	O	O:0.999976
to	O	O:0.999974
reshape	O	O:0.995221
to	O	O:0.999996
data	O	O:0.999999
to	O	O:0.999999
a	O	O:1.000000
long	O	O:0.999551
format	O	O:0.999954
using	O	O:0.999815
`	O	O:0.999788
.stack	B-API	B-API:0.999758
`	O	O:0.999990
,	O	O:0.999946
which	O	O:0.999974
can	O	O:0.999973
be	O	O:1.000000
be	O	O:0.999998
passed	O	O:0.999365
straight	O	O:0.999565
into	O	O:0.999153
rolling	O	O:0.995779
mean	O	O:0.994598
.	O	O:0.999894
	
It's	O	O:0.999389
pretty	O	O:0.999596
low-level	O	O:0.998069
,	O	O:0.999858
and	O	O:0.999988
mostly	O	O:0.999808
focused	O	O:0.999494
on	O	O:0.999979
how	O	O:0.999980
to	O	O:0.999998
address	O	O:0.999984
the	O	O:0.999996
more	O	O:0.999842
difficult	O	O:0.999962
problem	O	O:0.999946
of	O	O:0.999990
how	O	O:0.999961
to	O	O:0.999999
pass	O	O:0.999980
C++	O	O:0.999987
data	O	O:0.999944
to	O	O:0.999986
and	O	O:1.000000
from	O	O:0.999964
NumPy	O	O:0.999416
without	O	O:0.999768
copying	O	O:0.984337
,	O	O:0.999818
but	O	O:0.999860
here's	O	O:0.999498
how	O	O:0.999980
you'd	O	O:0.999986
do	O	O:0.999997
a	O	O:0.999997
copied	O	O:0.994754
std	O	O:0.996932
::	O	O:0.999889
vector	O	O:0.999882
return	O	O:0.997969
with	O	O:0.999772
that	O	O:0.998565
:	O	O:0.999993
#CODE	O	O:0.999913
	
`	O	O:0.999931
std	O	O:0.989942
=	O	O:0.999890
RMS	O	O:0.999256
(	O	O:0.999983
data	O	O:0.999694
-	O	O:0.999998
mean	O	O:0.999850
)`	O	O:0.999731
.	O	O:0.999780
	
This	O	O:0.999550
generalized	O	O:0.999725
diagonal	O	O:0.893213
would	O	O:0.999967
be	O	O:0.999999
defined	O	O:0.999956
as	O	O:0.999991
those	O	O:0.999980
elements	O	O:0.999905
of	O	O:0.999989
the	O	O:0.999975
array	O	O:0.999959
whose	O	O:0.999432
0th	O	O:0.998599
and	O	O:0.999901
2nd	O	O:0.999830
index	O	O:0.999446
coincide	O	O:0.999132
,	O	O:0.999989
and	O	O:0.999982
would	O	O:0.999984
have	O	O:0.999875
shape	O	O:0.999920
(	O	O:0.999974
3	O	O:0.999963
,	O	O:0.999977
3	O	O:0.999944
,	O	O:0.999988
7	O	O:0.999889
)	O	O:0.999962
.	O	O:0.999804
	
I	O	O:0.999992
have	O	O:0.999996
a	O	O:0.999991
given	O	O:0.998878
array	O	O:0.999914
`	O	O:0.999977
[	O	O:0.999868
0	O	O:0.999993
,	O	O:0.999972
0	O	O:0.999934
,	O	O:0.999981
0	O	O:0.999955
,	O	O:0.999985
0	O	O:0.999955
,	O	O:0.999985
0	O	O:0.999955
,	O	O:0.999985
0	O	O:0.999934
,	O	O:0.999983
1	O	O:0.999944
,	O	O:0.999981
1	O	O:0.999965
,	O	O:0.999978
2	O	O:0.999963
,	O	O:0.999979
1	O	O:0.999976
,	O	O:0.999986
0	O	O:0.999971
,	O	O:0.999986
0	O	O:0.999957
,	O	O:0.999985
0	O	O:0.999955
,	O	O:0.999985
0	O	O:0.999934
,	O	O:0.999983
1	O	O:0.999957
,	O	O:0.999986
0	O	O:0.999962
,	O	O:0.999985
1	O	O:0.999947
,	O	O:0.999976
2	O	O:0.999961
,	O	O:0.999979
1	O	O:0.999979
,	O	O:0.999987
0	O	O:0.999961
,	O	O:0.999979
2	O	O:0.999931
,	O	O:0.999984
3	O	O:0.997524
`]	O	O:0.991531
(	O	O:0.999991
arbitrary	O	O:0.999975
elements	O	O:0.999812
from	O	O:0.999728
0-5	O	O:0.999793
)	O	O:0.999985
and	O	O:0.999980
I	O	O:0.999998
want	O	O:0.999912
to	O	O:0.999977
have	O	O:1.000000
a	O	O:0.999999
counter	O	O:0.999693
for	O	O:0.999994
the	O	O:0.999993
occurence	O	O:0.999918
of	O	O:0.999992
zeros	O	O:0.894385
in	O	O:0.999999
a	O	O:0.999990
row	O	O:0.999243
.	O	O:0.999838
	
To	O	O:0.999954
see	O	O:0.999976
the	O	O:0.999997
benefits	O	O:0.999704
of	O	O:0.999997
this	O	O:0.999938
,	O	O:0.999999
you	O	O:0.999995
need	O	O:0.999988
to	O	O:0.999998
use	O	O:0.999998
`	O	O:0.999961
z	O	O:0.999713
,	O	O:0.999998
p	O	O:0.999835
,	O	O:0.999986
k	O	O:0.999929
=	O	O:0.999830
butter	O	O:0.995302
(	O	O:0.999988
output=	O	O:0.996899
'	O	O:0.999969
zpk	O	O:0.999602
')`	O	O:0.999929
and	O	O:0.999996
then	O	O:0.999909
work	O	O:0.999987
with	O	O:0.999991
poles	O	O:0.999549
and	O	O:0.999996
zeros	O	O:0.971808
instead	O	O:0.999930
of	O	O:0.999990
numerator	O	O:0.998394
and	O	O:0.999979
denominator	O	O:0.999304
.	O	O:0.999095
	
In	O	O:0.999975
that	O	O:0.999975
case	O	O:0.999991
you	O	O:0.999989
would	O	O:0.999951
"	O	O:0.999999
extrapolate	O	O:0.999780
"	O	O:0.999996
zeros	O	O:0.769691
to	O	O:0.999987
the	O	O:1.000000
left	O	O:0.995268
and	O	O:0.999989
the	O	O:0.999981
right	O	O:0.997560
.	O	O:0.999878
	
can	O	O:0.999891
numpy	O	O:0.999992
interpret	O	O:0.999987
column	O	O:0.999965
of	O	O:0.999995
indices	O	O:0.999768
like	O	O:0.999917
matlab	O	O:0.999891
does	O	O:0.998791
	
To	O	O:0.999957
get	O	O:0.999950
the	O	O:0.999995
diagonal	O	O:0.977903
elements	O	O:0.999913
you	O	O:0.999987
can	O	O:0.999997
get	O	O:1.000000
their	O	O:0.999980
indices	O	O:0.999897
with	O	O:0.999816
`	O	O:0.999956
np.triu_indices	B-API	B-API:0.996991
`	O	O:0.999965
(	O	O:0.999951
or	O	O:0.999997
,	O	O:0.999985
for	O	O:0.999995
the	O	O:0.999940
lower	O	O:0.998712
triangle	O	O:0.999870
,	O	O:0.999978
`	O	O:0.999981
np.tril_indices	B-API	B-API:0.992718
`)	O	O:0.999982
and	O	O:0.999985
then	O	O:0.999921
index	O	O:0.999992
by	O	O:0.999999
them	O	O:0.999564
.	O	O:0.999853
	
The	O	O:0.999852
question	O	O:0.999302
states	O	O:0.999737
that	O	O:0.999938
the	O	O:0.999996
input	O	O:0.999934
array	O	O:0.999908
is	O	O:0.999987
of	O	O:0.999978
shape	O	O:0.999020
`	O	O:0.999911
(	O	O:0.999864
128	O	O:0.999908
,	O	O:0.999966
36	O	O:0.999764
,	O	O:0.999956
8)	O	O:0.999388
`	O	O:0.999963
and	O	O:0.999967
we	O	O:0.999994
are	O	O:0.999955
interested	O	O:0.999639
in	O	O:0.999970
finding	O	O:0.999836
unique	O	O:0.961035
subarrays	O	O:0.999872
of	O	O:0.999970
length	O	O:0.999113
`	O	O:0.999983
8	O	O:0.999153
`	O	O:0.999988
in	O	O:0.999925
the	O	O:0.999998
last	O	O:0.998626
dimension	O	O:0.999660
.	O	O:0.999878
	
What	O	O:0.999826
does	O	O:0.999877
work	O	O:0.999955
,	O	O:0.999999
however	O	O:0.999652
is	O	O:0.999994
nesting	O	O:0.999104
append	B-API	B-API:0.753400
and	O	O:0.999805
concatenate	B-API	B-API:0.789004
#CODE	O	O:0.997819
	
(	O	O:0.999790
`	O	O:0.999989
b	O	O:0.998087
`	O	O:0.999997
will	O	O:0.999457
be	O	O:0.999998
broadcast	O	O:0.999813
along	O	O:0.994261
(	O	O:0.999956
?	O	O:0.999966
)	O	O:0.999990
the	O	O:0.999987
first	O	O:0.999878
axis	O	O:0.999627
)	O	O:0.999957
#CODE	O	O:0.999541
	
As	O	O:0.999931
he	O	O:0.999987
points	O	O:0.999882
out	O	O:0.999940
,	O	O:0.999998
the	O	O:0.999961
`	O	O:0.999958
[	O	O:0.999940
0	O	O:0.999986
]	O	O:0.999929
[	O	O:0.999851
1	O	O:0.999937
]`	O	O:0.999930
element	O	O:0.996919
is	O	O:0.999990
what	O	O:0.999712
you'd	O	O:0.999984
want	O	O:0.999939
for	O	O:0.999973
`	O	O:0.999916
cov	B-API	B-API:0.907345
(	O	O:0.999998
a	O	O:0.999965
,	O	O:0.999951
b	O	O:0.999943
)`	O	O:0.999666
.	O	O:0.999614
	
returns	O	O:0.998412
`	O	O:0.999960
1	O	O:0.998802
`	O	O:0.999991
,	O	O:0.999975
making	O	O:0.999894
the	O	O:0.999759
sum	O	O:0.999115
not	O	O:0.999979
commutative	O	O:0.999726
!	O	O:0.999957
	
But	O	O:0.999972
as	O	O:0.999993
I	O	O:0.999996
have	O	O:0.999991
a	O	O:0.999989
log	O	O:0.981413
of	O	O:0.999970
values	O	O:0.984182
(	O	O:0.999993
10000+	O	O:0.999826
)	O	O:0.999933
,	O	O:0.999996
this	O	O:0.999962
will	O	O:0.999930
be	O	O:0.999998
quite	O	O:0.999953
slow	O	O:0.997127
.	O	O:0.999834
	
@USER	O	O:0.998101
-	O	O:0.999982
good	O	O:0.999190
point	O	O:0.999924
.	O	O:0.999986
anyway	O	O:0.999972
,	O	O:0.999991
`	O	O:0.999994
diff	B-API	B-API:0.996964
`	O	O:0.999993
works	O	O:0.999487
on	O	O:0.999995
python	O	O:0.999737
lists	O	O:0.999661
too	O	O:0.999567
.	O	O:0.999947
	
It	O	O:0.999944
will	O	O:0.999952
also	O	O:0.999993
work	O	O:0.999987
if	O	O:0.999997
they	O	O:0.999941
are	O	O:0.999997
both	O	O:0.999881
arrays	O	O:0.999966
that	O	O:0.999874
can	O	O:0.999991
be	O	O:0.999999
broadcast	O	O:0.999623
.	O	O:0.999778
	
It's	O	O:0.999877
column	O	O:0.999949
stack	O	O:0.807027
that	O	O:0.999959
requires	O	O:0.999971
equal	O	O:0.999850
length	O	O:0.999541
strings	O	O:0.996162
.	O	O:0.999847
	
In	O	O:0.999932
the	O	O:0.999979
end	O	O:0.999830
it	O	O:0.999898
is	O	O:0.999974
usually	O	O:0.999747
not	O	O:0.999969
too	O	O:0.999927
complicated	O	O:0.999896
,	O	O:0.999997
especially	O	O:0.999926
if	O	O:0.999995
you	O	O:0.999950
use	O	O:0.999897
[	O	O:0.999844
`	O	O:0.999974
mgrid	B-API	B-API:0.998727
`]	O	O:0.995504
(	O	O:0.999919
#URL	O	O:0.999835
)	O	O:0.999990
or	O	O:0.999993
similar	O	O:0.999968
to	O	O:0.999995
get	O	O:0.999998
the	O	O:0.999988
indices	O	O:0.998940
.	O	O:0.999876
	
The	O	O:0.999964
absolute	O	O:0.899879
error	O	O:0.999823
will	O	O:0.999940
be	O	O:0.999994
at	O	O:0.999999
most	O	O:0.998947
1	O	O:0.999941
/	O	O:0.999939
2	O	O:0.999875
ULP	O	O:0.999900
,	O	O:0.999964
2	O	O:0.999894
-150	O	O:0.997372
.	O	O:0.999818
	
AttributeError	O	O:0.997486
:	O	O:0.999748
'	O	O:0.999945
Add	O	O:0.999825
'	O	O:0.999818
object	O	O:0.999817
has	O	O:0.999961
no	O	O:0.999979
attribute	O	O:0.999780
'	O	O:0.999963
log	O	O:0.883083
'	O	O:0.999939
Python	O	O:0.999255
	
Or	O	O:0.999959
,	O	O:0.999992
you	O	O:0.999968
could	O	O:0.999992
initialize	O	O:0.999982
an	O	O:0.999999
array	O	O:0.999987
of	O	O:0.999992
all	O	O:0.999967
zeros	O	O:0.980410
if	O	O:0.999988
you	O	O:0.999993
know	O	O:0.999957
the	O	O:0.999999
size	O	O:0.999840
of	O	O:0.999990
the	O	O:0.999990
array	O	O:0.999991
ahead	O	O:0.999799
of	O	O:0.999984
time	O	O:0.999552
.	O	O:0.999961
	
Are	O	O:0.999924
you	O	O:0.999985
checking	O	O:0.999967
shape	O	O:0.999942
or	O	O:0.999995
number	O	O:0.999948
of	O	O:0.999995
nonzero	O	O:0.900118
values	O	O:0.999760
?	O	O:0.999906
	
Something	O	O:0.999888
like	O	O:0.999517
`	O	O:0.999994
eigvals	O	B-API:0.577365
,	O	O:0.999995
eigvecs	O	O:0.997623
=	O	O:0.999834
la.eigh	O	O:0.987578
(	O	O:0.999968
mat	B-API	O:0.924228
)`	O	O:0.999557
`	O	O:0.999978
principal	O	O:0.998084
=	O	O:0.999975
eigvecs	O	O:0.994106
[:	O	O:0.999923
,	O	O:0.999992
eigvals.argmax()	O	O:0.989344
]`	O	O:0.999885
`	O	O:0.999966
if	O	O:0.999185
(	O	O:0.999997
principal	O	O:0.998567
>	O	O:0.999974
=	O	O:0.999921
0	O	O:0.999962
)	O	O:0.999983
.all()	O	B-API:0.999016
or	O	O:0.999661
(	O	O:0.999990
pricipal	O	O:0.999620
<=	O	O:0.999970
0	O	O:0.999954
)	O	O:0.999909
.all()	O	B-API:0.999528
:	O	O:0.999984
print	O	O:0.999648
'	O	O:0.999991
all	O	O:0.999980
the	O	O:0.999995
same	O	O:0.999595
'`	O	O:0.999942
?	O	O:0.999946
	
I	O	O:0.999988
also	O	O:0.999991
want	O	O:0.999977
bins	O	O:0.999582
to	O	O:0.999999
have	O	O:1.000000
a	O	O:0.999999
width	O	O:0.999946
of	O	O:0.999982
.5	O	O:0.998822
so	O	O:0.999998
that	O	O:0.999971
I	O	O:0.999999
can	O	O:0.999999
have	O	O:0.999997
a	O	O:0.999999
bin	O	O:0.999729
from	O	O:0.999959
10.5	O	O:0.999146
to	O	O:0.999992
11	O	O:0.999994
or	O	O:0.999985
24	O	O:0.999868
to	O	O:0.999996
24.5	O	O:0.999709
etc	O	O:0.999961
...	O	O:0.999977
because	O	O:0.999974
otherwise	O	O:0.999957
,	O	O:0.999999
python	O	O:0.999852
outputs	O	O:0.999896
the	O	O:0.999979
histogram	O	O:0.999918
with	O	O:0.999952
the	O	O:0.999996
bins	O	O:0.999667
random	O	O:0.998561
and	O	O:0.999981
undetermined	O	O:0.999078
.	O	O:0.999266
	
Maximum	O	O:0.995001
is	O	O:0.999985
always	O	O:0.999767
bigger	O	O:0.999886
than	O	O:0.999520
the	O	O:0.999957
minimum	O	O:0.997519
(	O	O:0.999995
more	O	O:0.999896
to	O	O:0.999995
the	O	O:1.000000
right	O	O:0.999934
on	O	O:0.999997
a	O	O:0.999996
1d	O	O:0.999928
axis	O	O:0.999478
,	O	O:0.999995
not	O	O:0.999994
by	O	O:0.999995
absolute	O	O:0.986392
value	O	O:0.999707
)	O	O:0.999958
.	O	O:0.999827
	
should	O	O:0.999829
give	O	O:0.999960
the	O	O:0.999999
sum	O	O:0.999758
of	O	O:0.999995
the	O	O:0.999988
columns	O	O:0.999867
.	O	O:0.999891
	
Suppose	O	O:0.999174
,	O	O:0.999981
You	O	O:0.999983
wanna	O	O:0.999969
check	O	O:0.999742
how	O	O:0.999998
many	O	O:0.999955
times	O	O:0.999879
you	O	O:0.999992
will	O	O:0.999981
get	O	O:0.999990
six	O	O:0.999980
if	O	O:0.999996
you	O	O:0.999982
roll	O	O:0.775866
dice	O	O:0.999895
10	O	O:0.999945
times	O	O:0.999391
.	O	O:0.999874
	
With	O	O:0.999949
this	O	O:0.999833
option	O	O:0.999950
,	O	O:0.999999
the	O	O:0.999978
result	O	O:0.999834
will	O	O:0.999978
broadcast	O	O:0.999916
correctly	O	O:0.999923
	
Do	O	O:0.999935
you	O	O:0.999993
mean	O	O:0.999932
`	O	O:0.999997
indices	O	O:0.998501
=	O	O:0.999890
np.where	B-API	B-API:0.979488
(	O	O:0.999986
a	O	O:0.999979
==	O	O:0.999712
a.max()	O	O:0.996694
)`	O	O:0.999604
in	O	O:0.999980
line	O	O:0.999575
3	O	O:0.999913
?	O	O:0.999956
	
The	O	O:0.999955
problem	O	O:0.999675
I	O	O:0.999995
have	O	O:0.999996
much	O	O:0.999617
later	O	O:0.999986
on	O	O:0.999969
in	O	O:0.999993
the	O	O:0.999997
code	O	O:0.998137
is	O	O:0.999998
that	O	O:0.999913
if	O	O:1.000000
one	O	O:0.999995
of	O	O:0.999993
these	O	O:0.999935
parameters	O	O:0.999574
isn't	O	O:0.999868
in	O	O:0.999987
the	O	O:0.999967
ASCII	O	O:0.999721
file	O	O:0.999715
it	O	O:0.999978
throws	O	O:0.999980
errors	O	O:0.999938
up	O	O:0.999980
so	O	O:0.999991
I	O	O:0.999998
have	O	O:0.999992
to	O	O:0.999995
keep	O	O:0.999994
adding	O	O:0.999847
in	O	O:0.999993
ones	O	O:0.999612
I	O	O:0.999993
don't	O	O:0.999991
need	O	O:0.999153
.	O	O:0.999953
	
`	O	O:0.999936
append	B-API	B-API:0.991799
`	O	O:0.999988
adds	O	O:0.999953
them	O	O:0.999924
to	O	O:0.999996
the	O	O:1.000000
end	O	O:0.999950
of	O	O:0.999979
the	O	O:0.999973
list	O	O:0.999613
,	O	O:0.999987
which	O	O:0.999860
is	O	O:0.999991
exactly	O	O:0.999960
what	O	O:0.999946
you	O	O:0.999980
want	O	O:0.999921
.	O	O:0.999924
	
I	O	O:0.999982
have	O	O:0.999959
two	O	O:0.999907
3dim	O	O:0.999917
numpy	O	O:0.999688
matrices	O	O:0.999432
and	O	O:0.999988
I	O	O:0.999998
want	O	O:0.999929
to	O	O:0.999944
do	O	O:1.000000
a	O	O:0.999996
dot	O	O:0.995022
product	O	O:0.999956
according	O	O:0.999525
to	O	O:0.999984
one	O	O:0.999999
axis	O	O:0.999970
without	O	O:0.999973
using	O	O:0.999961
a	O	O:0.999916
loop	O	O:0.989686
in	O	O:0.999943
theano	O	O:0.998827
.	O	O:0.999908
	
you	O	O:0.999985
have	O	O:0.999966
at	O	O:1.000000
most	O	O:0.999906
4	O	O:0.999916
in	O	O:0.999992
that	O	O:0.999833
dimension	O	O:0.999865
(	O	O:0.999994
see	O	O:0.999997
your	O	O:0.999884
reshape	O	O:0.794434
line	O	O:0.999881
)	O	O:0.999992
,	O	O:0.999991
so	O	O:0.999943
the	O	O:0.999961
index	O	O:0.999842
it	O	O:0.999995
will	O	O:0.999989
count	O	O:0.999937
are	O	O:0.999989
0	O	O:0.999908
and	O	O:0.999895
2	O	O:0.999178
(	O	O:0.999627
1	O	O:0.999870
and	O	O:0.999941
3	O	O:0.999890
are	O	O:0.999910
skipped	O	O:0.999393
,	O	O:0.999984
and	O	O:0.999985
3	O	O:0.999471
is	O	O:0.999957
the	O	O:0.999986
last	O	O:0.999050
element	O	O:0.999707
)	O	O:0.999949
.	O	O:0.999862
	
Once	O	O:0.999903
we	O	O:0.999997
have	O	O:0.999988
the	O	O:0.999997
indices	O	O:0.999780
to	O	O:0.999995
sort	O	O:0.999987
`	O	O:0.999999
data	O	O:0.999227
`	O	O:0.999999
,	O	O:0.999994
to	O	O:0.999998
get	O	O:0.999999
a	O	O:0.999998
sorted	O	O:0.999983
copy	O	O:0.997896
of	O	O:0.999992
the	O	O:0.999572
array	O	O:0.999941
it	O	O:0.999923
is	O	O:0.999994
faster	O	O:0.999873
to	O	O:0.999979
use	O	O:0.999997
the	O	O:0.999877
indices	O	O:0.999619
than	O	O:0.999967
to	O	O:0.999997
re-sort	O	O:0.999968
the	O	O:0.999911
array	O	O:0.998753
:	O	O:0.999949
#CODE	O	O:0.999815
	
I	O	O:0.999960
hope	O	O:0.999894
this	O	O:0.999718
will	O	O:0.999970
help	O	O:0.999929
you	O	O:0.999987
perform	O	O:0.999953
your	O	O:0.999935
transpose	O	O:0.721426
and	O	O:0.999998
column-wise	O	O:0.999091
operations	O	O:0.998559
	
It	O	O:0.999769
is	O	O:0.999983
better	O	O:0.999787
to	O	O:0.999992
specify	O	O:0.999954
that	O	O:0.999869
I'm	O	O:0.999996
looking	O	O:0.999937
for	O	O:0.999994
something	O	O:0.999817
that	O	O:0.999627
performs	O	O:0.999931
the	O	O:0.999992
log-sum-exp	O	O:0.999219
trick	O	O:0.999879
,	O	O:0.999999
doing	O	O:0.999992
a	O	O:0.999987
simply	O	O:0.999711
succession	O	O:0.999969
of	O	O:0.999937
exp	O	B-API:0.588183
elem-wise	O	O:0.999894
,	O	O:0.999986
summing	O	O:0.999953
the	O	O:0.999988
rows	O	O:0.998720
and	O	O:0.999998
doing	O	O:0.999993
a	O	O:0.999842
log	O	O:0.609779
elem-wise	O	O:0.996890
is	O	O:0.999987
trivial	O	O:0.998828
in	O	O:0.999971
`	O	O:0.999921
scipy.sparse	O	B-API:0.563243
`	O	O:0.999969
.	O	O:0.999461
	
Scipy	O	O:0.999496
uses	O	O:0.987689
`	O	O:0.999941
int32	O	O:0.973938
`	O	O:0.999995
to	O	O:0.999961
store	O	O:0.999914
`	O	O:0.999975
indptr	O	O:0.852978
`	O	O:0.999987
and	O	O:0.999646
`	O	O:0.999996
indices	O	O:0.977928
`	O	O:0.999988
for	O	O:0.999937
the	O	O:0.999980
sparse	O	O:0.997851
formats	O	O:0.998671
.	O	O:0.999812
	
But	O	O:0.999850
not	O	O:0.999993
able	O	O:0.999974
to	O	O:0.999995
plot	O	O:0.999990
it	O	O:0.999998
as	O	O:0.999999
a	O	O:0.999962
graph	O	O:0.993205
(	O	O:0.999996
something	O	O:0.999983
like	O	O:0.999962
a	O	O:0.999998
histogram	O	O:0.998726
)	O	O:0.999992
...	O	O:0.999970
that	O	O:0.999437
is	O	O:0.999998
the	O	O:0.999953
problem	O	O:0.998647
.	O	O:0.999793
	
It	O	O:0.999948
gave	O	O:0.999634
error	O	O:0.999921
testing	O	O:0.999677
doesnot	O	O:0.999824
have	O	O:0.999954
attribute	O	O:0.999996
append	O	O:0.840459
as	O	O:0.999994
its	O	O:0.999069
of	O	O:0.999952
None	O	O:0.997919
Type	O	O:0.999676
.	O	O:0.999758
	
In	O	O:0.999978
both	O	O:0.999932
cases	O	O:0.999843
,	O	O:0.999998
you	O	O:0.999984
can	O	O:0.999985
access	O	O:0.999998
individual	O	O:0.999982
elements	O	O:0.999964
by	O	O:0.999971
indices	O	O:0.999814
,	O	O:0.999995
like	O	O:0.999944
`	O	O:0.999984
R	O	O:0.999389
[	O	O:0.999991
0	O	O:0.999667
]`	O	O:0.999403
(	O	O:0.999887
which	O	O:0.999828
would	O	O:0.999981
give	O	O:0.999977
you	O	O:0.999999
a	O	O:0.999998
specific	O	O:0.999184
object	O	O:0.999930
,	O	O:0.999998
a	O	O:0.999978
`	O	O:0.999916
np.void	O	O:0.983960
`	O	O:0.999993
,	O	O:0.999988
that	O	O:0.999984
still	O	O:0.999959
gives	O	O:0.999973
you	O	O:0.999984
the	O	O:0.999998
possibility	O	O:0.999960
to	O	O:0.999992
access	O	O:0.999989
the	O	O:0.999998
fields	O	O:0.999956
separately	O	O:0.999845
)	O	O:0.999999
,	O	O:0.999995
or	O	O:0.999999
by	O	O:0.999980
slices	O	O:0.999788
`	O	O:0.999951
R	O	O:0.999318
[	O	O:0.999945
1	O	O:0.999858
:	O	O:0.999954
-1	O	O:0.999676
]`	O	O:0.999960
...	O	O:0.998252
	
I	O	O:0.999987
think	O	O:0.999974
you	O	O:0.999903
can	O	O:0.999996
have	O	O:1.000000
a	O	O:1.000000
sum	O	O:0.999916
over	O	O:0.999964
a	O	O:0.999987
sliding	O	O:0.843395
window	O	O:0.998964
(	O	O:0.999976
or	O	O:0.999999
a	O	O:0.999992
rolling	O	B-API:0.525304
window	O	O:0.999834
)	O	O:0.999989
or	O	O:0.999996
a	O	O:0.999999
mean	O	O:0.999866
over	O	O:0.999936
a	O	O:0.999988
sliding	O	O:0.857696
window	O	O:0.999244
.	O	O:0.999717
	
I	O	O:0.999841
got	O	O:0.999993
your	O	O:0.999108
point	O	O:0.999337
and	O	O:0.999994
I	O	O:0.999995
find	O	O:0.999478
it	O	O:0.999952
more	O	O:0.999886
logical	O	O:0.994033
,	O	O:0.999980
but	O	O:0.999973
when	O	O:0.999838
trying	O	O:0.999976
the	O	O:0.999997
code	O	O:0.999458
you've	O	O:0.999950
suggested	O	O:0.999943
to	O	O:0.999994
get	O	O:0.999999
rid	O	O:0.999987
of	O	O:0.999995
the	O	O:0.999985
second	O	O:0.999934
error	O	O:0.999838
I	O	O:0.999985
got	O	O:0.999994
another	O	O:0.998856
error	O	O:0.998343
:	O	O:0.999842
`	O	O:0.999950
AttributeError	O	O:0.999259
:	O	O:0.999986
flatten	B-API	B-API:0.885534
`	O	O:0.999948
	
`	O	O:0.999958
dot	B-API	O:0.966144
`	O	O:0.999993
does	O	O:0.999609
many	O	O:0.999992
things	O	O:0.999919
under	O	O:0.999939
the	O	O:0.999978
hood	O	O:0.999061
,	O	O:0.999991
it	O	O:0.999975
is	O	O:0.999991
apparent	O	O:0.999909
that	O	O:0.999701
`	O	O:0.999951
np.dot	B-API	B-API:0.993469
(	O	O:0.999966
A	O	O:0.999964
,	O	O:0.999989
x	O	O:0.999916
)`	O	O:0.998029
is	O	O:0.999969
not	O	O:0.999935
calling	O	O:0.999646
BLAS	O	O:0.998487
and	O	O:0.999963
is	O	O:0.999983
somehow	O	O:0.999720
defaulting	O	O:0.999947
over	O	O:0.999654
to	O	O:0.999866
numpy's	O	O:0.999962
internal	O	O:0.997088
GEMM	O	O:0.999726
routine	O	O:0.999067
.	O	O:0.999782
	
Below	O	O:0.997285
is	O	O:0.999993
some	O	O:0.999906
code	O	O:0.999523
which	O	O:0.999974
uses	O	O:0.999887
a	O	O:0.999987
callback	O	O:0.999420
to	O	O:0.999997
print	O	O:0.999982
out	O	O:0.999971
the	O	O:0.999982
current	O	O:0.999513
azimuthal	O	O:0.999322
and	O	O:0.999986
elevation	O	O:0.999160
angles	O	O:0.999331
,	O	O:0.999991
as	O	O:0.999999
well	O	O:0.999941
as	O	O:0.999997
append	O	O:0.947957
them	O	O:0.999532
to	O	O:0.999994
a	O	O:1.000000
list	O	O:0.998540
for	O	O:0.999992
further	O	O:0.999705
use	O	O:0.999591
later	O	O:0.996814
.	O	O:0.999627
	
It's	O	O:0.999724
super	O	O:0.999904
alex	O	O:0.999815
,	O	O:0.999996
here	O	O:0.999891
to	O	O:0.999977
answer	O	O:0.999999
NumPy	O	O:0.999954
questions	O	O:0.998817
in	O	O:0.999972
the	O	O:0.999994
blink	O	O:0.999950
of	O	O:0.999984
an	O	O:0.999957
eye	O	O:0.981865
:)	O	O:0.999770
	
Your	O	O:0.999931
solution	O	O:0.999847
of	O	O:0.999993
searching	O	O:0.999855
the	O	O:0.999994
eigenvalues	O	O:0.999046
for	O	O:0.999991
the	O	O:0.999997
ones	O	O:0.999360
you	O	O:0.999988
want	O	O:0.999989
seems	O	O:0.999969
plausible	O	O:0.999895
enough	O	O:0.999508
.	O	O:0.999882
	
If	O	O:0.999946
d	O	O:0.999652
is	O	O:0.999979
larger	O	O:0.999404
than	O	O:0.999743
8	O	O:0.999913
or	O	O:0.999984
9	O	O:0.999923
,	O	O:0.999999
then	O	O:0.999909
bases	O	O:0.999978
will	O	O:0.999973
be	O	O:0.999998
sufficiently	O	O:0.999962
long	O	O:0.999856
that	O	O:0.999740
you	O	O:0.999993
probably	O	O:0.999952
would	O	O:0.999989
be	O	O:0.999998
better	O	O:0.999980
off	O	O:0.999951
going	O	O:0.999438
with	O	O:0.999906
the	O	O:0.999987
other	O	O:0.999934
version	O	O:0.999936
using	O	O:0.999908
the	O	O:0.999918
dot	O	O:0.987329
product	O	O:0.999014
.	O	O:0.999660
	
I'm	O	O:0.999825
not	O	O:0.999992
sure	O	O:0.999936
which	O	O:0.999946
indices	O	O:0.999702
i	O	O:0.999993
need	O	O:0.999985
to	O	O:0.999998
change	O	O:0.999990
to	O	O:0.999986
achieve	O	O:0.999985
the	O	O:0.999986
minimum	O	O:0.997461
and	O	O:0.999983
not	O	O:0.999990
the	O	O:0.999993
maximum	O	O:0.999567
values	O	O:0.998589
.	O	O:0.999911
	
The	O	O:0.999978
dimension	O	O:0.999915
of	O	O:0.999995
`	O	O:0.999980
result	O	O:0.998418
`	O	O:0.999982
has	O	O:0.999882
been	O	O:0.999956
set	O	O:0.999966
earlier	O	O:0.999860
to	O	O:0.999995
the	O	O:0.999999
correct	O	O:0.999855
dimension	O	O:0.999972
,	O	O:0.999999
so	O	O:0.999992
can	O	O:0.999962
check	O	O:0.999992
it	O	O:0.999990
,	O	O:0.999973
but	O	O:0.999982
it	O	O:0.999969
would	O	O:0.999983
be	O	O:0.999999
nice	O	O:0.999981
to	O	O:0.999998
only	O	O:0.999995
use	O	O:0.999990
the	O	O:0.999972
length	O	O:0.999350
of	O	O:0.999906
`	O	O:0.999980
indices	O	O:0.996516
`	O	O:0.999995
to	O	O:0.999969
determine	O	O:0.999977
it	O	O:0.999941
.	O	O:0.999914
	
Alternatively	O	O:0.999376
,	O	O:0.999997
what	O	O:0.999966
about	O	O:0.999972
applying	O	O:0.999878
the	O	O:0.999935
same	O	O:0.999275
function	O	O:0.999967
without	O	O:0.999925
indices	O	O:0.999644
along	O	O:0.999769
the	O	O:0.999956
depth	O	O:0.999313
axes	O	O:0.829636
?	O	O:0.999966
	
Here's	O	O:0.999820
an	O	O:0.999843
O	O	O:0.996374
(	O	O:0.999965
n	O	O:0.999902
log	O	O:0.989625
n	O	O:0.999949
)	O	O:0.999995
algorithm	O	O:0.999659
for	O	O:0.999998
your	O	O:0.999291
problem	O	O:0.997104
.	O	O:0.999927
	
You	O	O:0.999964
need	O	O:0.999949
to	O	O:0.999995
add	O	O:0.999999
axes	O	O:0.965804
to	O	O:0.999952
`	O	O:1.000000
coeffs	O	O:0.984759
`	O	O:0.999998
so	O	O:0.999926
it	O	O:0.999997
will	O	O:0.999979
broadcast	O	O:0.999801
in	O	O:0.999997
the	O	O:0.999958
dimension	O	O:0.998720
(	O	O:0.999992
s	O	O:0.999939
)	O	O:0.999993
you	O	O:0.999952
want	O	O:0.999886
.	O	O:0.999905
	
If	O	O:0.999965
you	O	O:0.999988
want	O	O:0.999978
to	O	O:0.999994
search	O	O:0.999993
for	O	O:0.999998
a	O	O:0.999993
certain	O	O:0.999125
rank	O	O:0.999789
on	O	O:0.999996
B	O	O:0.999982
randomly	O	O:0.999934
,	O	O:0.999990
you	O	O:0.999994
need	O	O:0.999988
to	O	O:0.999999
start	O	O:0.999997
off	O	O:0.999989
with	O	O:0.999985
a	O	O:0.999998
valid	O	O:0.999262
B	O	O:0.999891
with	O	O:0.999849
max	O	O:0.759940
rank	O	O:0.998384
,	O	O:0.999994
and	O	O:0.999995
rotate	O	O:0.999814
a	O	O:0.999985
random	O	O:0.999503
column	O	O:0.999952
j	O	O:0.999986
of	O	O:0.999998
a	O	O:0.999992
random	O	O:0.997804
B	O	O:0.999946
i	O	O:0.999987
by	O	O:0.999994
a	O	O:0.999989
random	O	O:0.984098
amount	O	O:0.999511
.	O	O:0.999729
	
I	O	O:0.999989
want	O	O:0.999951
to	O	O:0.999971
save	O	O:0.999993
some	O	O:0.999960
histogram	O	O:0.999996
data	O	O:0.999970
in	O	O:0.999998
a	O	O:0.999996
csv	O	O:0.999673
file	O	O:0.999752
.	O	O:0.999852
	
I	O	O:0.999988
want	O	O:0.999927
to	O	O:0.999972
read	O	O:0.999989
a	O	O:0.999987
mat	O	O:0.951557
file	O	O:0.999985
back	O	O:0.998603
in	O	O:0.999977
python	O	O:0.999621
but	O	O:0.999986
I	O	O:0.999996
have	O	O:0.999984
trouble	O	O:0.999933
going	O	O:0.999961
back	O	O:0.999678
to	O	O:0.999996
a	O	O:0.999999
graph	O	O:0.999537
,	O	O:0.999993
because	O	O:0.999962
the	O	O:0.999957
mat	O	O:0.946439
file	O	O:0.999934
gives	O	O:0.999912
a	O	O:0.999985
numpy.ndarray	B-API	B-API:0.911018
type	O	O:0.999269
file	O	O:0.999814
and	O	O:0.999994
I	O	O:0.999999
need	O	O:0.999977
a	O	O:0.999955
sparse	O	O:0.998933
matrix	O	O:0.999888
to	O	O:0.999982
reconstruct	O	O:0.999902
my	O	O:0.999936
graph	O	O:0.999689
.	O	O:0.999905
	
numpy	O	O:0.999009
makes	O	O:0.999481
it	O	O:0.999995
easy	O	O:0.999901
to	O	O:0.999996
translate	O	O:0.990880
python	O	O:0.999954
objects	O	O:0.999971
into	O	O:0.999632
numpy	O	O:0.999931
ndarrays	O	O:0.999098
,	O	O:0.999956
and	O	O:0.999996
will	O	O:0.999970
even	O	O:0.999980
pick	O	O:0.999973
an	O	O:0.999998
appropriate	O	O:0.999999
resulting	O	O:0.999941
data	O	O:0.999984
type	O	O:0.999660
if	O	O:0.999997
one	O	O:0.999720
is	O	O:0.999975
not	O	O:0.999908
specified	O	O:0.998802
:	O	O:0.999948
#CODE	O	O:0.999718
	
This	O	O:0.999569
`	O	O:0.999975
T	O	B-API:0.514958
`	O	O:0.999982
and	O	O:0.999540
`	O	O:0.999993
X	O	O:0.992220
`	O	O:0.999997
broadcast	O	O:0.998815
together	O	O:0.999953
just	O	O:0.999896
fine	O	O:0.999952
,	O	O:0.999991
for	O	O:0.999991
example	O	O:0.998961
`	O	O:0.999977
T*X	O	O:0.993539
`	O	O:0.999972
works	O	O:0.998658
.	O	O:0.999948
	
I	O	O:0.999992
have	O	O:0.999993
a	O	O:0.999972
numpy	O	O:0.999331
matrix	O	O:0.998856
A	O	O:0.999970
and	O	O:0.999994
I	O	O:0.999997
need	O	O:0.999986
a	O	O:0.999829
function	O	O:0.999921
that	O	O:0.999960
will	O	O:0.999987
count	O	O:0.998983
(	O	O:0.999983
A	O	O:0.999947
[	O	O:0.999974
i	O	O:0.999967
,	O	O:0.999995
j	O	O:0.999903
]	O	O:0.999959
/	O	O:0.999984
sum	O	O:0.999907
of	O	O:0.999994
all	O	O:0.999988
elements	O	O:0.999846
in	O	O:0.999947
i-th	O	O:0.999965
column	O	O:0.999879
)	O	O:0.999988
-	O	O:0.999930
A	O	O:0.999934
[	O	O:0.999978
i	O	O:0.999957
,	O	O:0.999995
j	O	O:0.999903
]	O	O:0.999959
/	O	O:0.999984
sum	O	O:0.999907
of	O	O:0.999994
all	O	O:0.999987
elements	O	O:0.999855
in	O	O:0.999978
j-th	O	O:0.999721
row	O	O:0.999807
	
This	O	O:0.999804
also	O	O:0.999857
works	O	O:0.999990
if	O	O:0.999969
,	O	O:0.999996
instead	O	O:0.999990
of	O	O:0.999998
a	O	O:0.999994
single	O	O:0.999695
index	O	O:0.999937
,	O	O:0.999993
you	O	O:0.999995
provide	O	O:0.999874
an	O	O:0.999998
array	O	O:0.999990
of	O	O:0.999933
indices	O	O:0.983686
:	O	O:0.999978
#CODE	O	O:0.999851
	
How	O	O:0.999892
to	O	O:0.999978
solve	O	O:0.999983
nonlinear	O	O:0.999577
equation	O	O:0.999854
without	O	O:0.999796
sympy	O	O:0.990026
(	O	O:0.999833
max	O	B-API:0.634948
and	O	O:0.999980
min	O	O:0.811436
)	O	O:0.999907
?	O	O:0.999876
	
Bivariate	O	O:0.999502
Legendre	O	B-API:0.767488
Polynomial	O	B-API:0.907262
Fitting	O	O:0.999242
to	O	O:0.999968
find	O	O:0.999981
orthogonal	O	O:0.999694
coefficents	O	O:0.999743
	
I	O	O:0.999992
have	O	O:0.999989
a	O	O:0.999975
big	O	O:0.999675
n-square	O	O:0.998543
diagonal	O	O:0.842521
matrix	O	O:0.999924
,	O	O:0.999984
in	O	O:0.999992
the	O	O:0.999972
scipy's	O	O:0.999732
sparse	O	O:0.999110
DIA	O	O:0.999517
format	O	O:0.999205
	
To	O	O:0.999971
find	O	O:0.999817
the	O	O:0.999997
most	O	O:0.999847
frequent	O	O:0.999961
value	O	O:0.999971
of	O	O:0.999996
a	O	O:0.999996
flat	O	O:0.998724
array	O	O:0.999970
,	O	O:0.999980
use	O	O:0.999840
`	O	O:0.999951
unique	B-API	B-API:0.890662
`	O	O:0.999988
,	O	O:0.999659
`	O	O:0.999978
bincount	B-API	B-API:0.997180
`	O	O:0.999977
and	O	O:0.999796
`	O	O:0.999794
argmax	B-API	B-API:0.999857
`	O	O:0.999803
:	O	O:0.999626
#CODE	O	O:0.999897
	
The	O	O:0.999914
funny	O	O:0.999815
thing	O	O:0.999853
is	O	O:0.999927
in	O	O:0.999981
the	O	O:0.999992
above	O	O:0.998978
function	O	O:0.999786
If	O	O:0.999981
i	O	O:0.999997
pass	O	O:0.999582
an	O	O:0.999991
extra	O	O:0.999268
argument	O	O:0.999566
and	O	O:0.999993
just	O	O:0.999929
divide	O	O:0.999622
sum	O	O:0.999814
by	O	O:0.999989
it	O	O:0.999993
,	O	O:0.999998
then	O	O:0.999975
the	O	O:0.999999
times	O	O:0.999811
are	O	O:0.999992
the	O	O:0.999998
same	O	O:0.999831
again	O	O:0.999685
.	O	O:0.999963
	
are	O	O:0.999967
the	O	O:0.999998
same	O	O:0.999952
as	O	O:0.999997
the	O	O:0.999997
ones	O	O:0.999752
posted	O	O:0.999518
in	O	O:0.999998
the	O	O:0.999998
examples	O	O:0.999673
of	O	O:0.999996
this	O	O:0.999902
web	O	O:0.999974
page	O	O:0.999420
.	O	O:0.999808
	
How	O	O:0.999915
to	O	O:0.999993
remove	O	O:0.999972
rings	O	O:0.999890
from	O	O:0.999878
convolve	O	O:0.799253
healpix	O	O:0.998243
map	O	B-API:0.901422
?	O	O:0.999887
	
With	O	O:0.999805
the	O	O:0.999987
information	O	O:0.999924
of	O	O:0.999991
the	O	O:0.999991
full	O	O:0.999934
stack	O	O:0.842266
trace	O	O:0.999778
report	O	O:0.999798
the	O	O:0.999981
bug	O	O:0.999910
to	O	O:0.999982
the	O	O:0.999998
ubuntu	O	O:0.999532
team	O	O:0.999541
.	O	O:0.999913
	
fastest	O	O:0.999289
way	O	O:0.999966
to	O	O:0.999989
get	O	O:0.999988
lookup	O	O:0.999476
table	O	O:0.999985
indices	O	O:0.999764
with	O	O:0.999948
numpy	O	O:0.999561
	
Well	O	O:0.999641
,	O	O:0.999998
a	O	O:0.999984
few	O	O:0.999819
more	O	O:0.999831
,	O	O:0.999980
anyway	O	O:0.999816
:	O	O:0.999983
`	O	O:0.999983
cos	B-API	B-API:0.901300
`	O	O:0.999996
,	O	O:0.999801
`	O	O:0.999996
pi	B-API	O:0.995041
`	O	O:0.999995
,	O	O:0.999865
`	O	O:0.999995
diag	B-API	B-API:0.992977
`	O	O:0.999972
	
I	O	O:0.999966
implemented	O	O:0.999959
a	O	O:0.999938
LOWESS	O	O:0.997113
smoother	O	O:0.996924
(	O	O:0.999976
which	O	O:0.999748
is	O	O:0.999990
the	O	O:0.999973
curve	O	O:0.999924
you	O	O:0.999989
see	O	O:0.999992
)	O	O:0.999999
with	O	O:0.999986
a	O	O:0.999994
tight	O	O:0.998081
fit	O	O:0.999860
to	O	O:0.999992
eliminate	O	O:0.999979
noise	O	O:0.999815
,	O	O:0.999996
since	O	O:0.999971
the	O	O:0.999995
real	O	O:0.999668
waveforms	O	O:0.999916
have	O	O:0.999933
a	O	O:0.999999
non-trivial	O	O:0.999354
noise	O	O:0.999573
component	O	O:0.999484
,	O	O:0.999991
and	O	O:0.999998
then	O	O:0.999817
tried	O	O:0.999984
doing	O	O:0.999988
a	O	O:0.999972
rolling	O	O:0.735541
max	O	O:0.668250
with	O	O:0.999956
a	O	O:0.999908
window	O	O:0.999916
over	O	O:0.999931
the	O	O:0.999994
data	O	O:0.999620
,	O	O:0.999991
but	O	O:0.999990
I	O	O:0.999993
can't	O	O:0.999952
get	O	O:0.999969
anything	O	O:0.999965
solid	O	O:0.998532
.	O	O:0.999734
	
But	O	O:0.999937
sum	B-API	O:0.999051
function	O	O:0.999980
from	O	O:0.999936
numpy	O	O:0.999753
doesn't	O	O:0.999949
suport	O	O:0.999367
"	O	O:0.999988
1:3	O	O:0.995951
"	O	O:0.999882
	
(	O	O:0.999955
the	O	O:0.999948
`	O	O:0.999843
np.nonzero	B-API	B-API:0.998009
`	O	O:0.999988
should	O	O:0.999839
return	O	O:0.999932
a	O	O:0.999993
tuple	O	O:0.999023
with	O	O:0.999959
one	O	O:0.999968
element	O	O:0.999951
,	O	O:0.999996
an	O	O:0.999998
array	O	O:0.999980
of	O	O:0.999987
indices	O	O:0.998346
)	O	O:0.999983
.	O	O:0.999825
	
Can	O	O:0.999826
the	O	O:0.999930
"	O	O:0.999992
small	O	O:0.999819
values	O	O:0.999826
of	O	O:0.999981
derivative	O	O:0.999743
"	O	O:0.999994
be	O	O:0.999988
small	O	O:0.999904
with	O	O:0.999815
respect	O	O:0.999156
to	O	O:0.999997
the	O	O:0.999998
sin	O	B-API:0.799113
curve	O	O:0.999876
?	O	O:0.999969
	
6	O	O:0.999937
columns	O	O:0.999691
,	O	O:0.999999
92370574	O	O:0.999985
rows	O	O:0.999304
,	O	O:0.999998
2496502	O	O:0.999964
locations	O	O:0.999864
,	O	O:0.999988
37	O	O:0.999976
months	O	O:0.999867
each	O	O:0.999792
,	O	O:0.999996
unique	O	O:0.943230
amounts	O	O:0.999711
for	O	O:0.999982
each	O	O:0.999500
value	O	O:0.999525
.	O	O:0.999861
	
Note	O	O:0.999953
that	O	O:0.999971
where	O	O:0.999996
possible	O	O:0.999927
,	O	O:0.999996
`	O	O:0.999988
reshape	B-API	B-API:0.962695
`	O	O:0.999984
will	O	O:0.999820
give	O	O:0.999982
you	O	O:0.999998
a	O	O:1.000000
view	O	O:0.996898
of	O	O:0.999994
the	O	O:0.999894
array	O	O:0.999866
.	O	O:0.999752
	
Here	O	O:0.999848
you	O	O:0.999961
append	O	O:0.952847
only	O	O:0.999976
a	O	O:0.999998
REFERENCE	O	O:0.998354
to	O	O:0.999999
your	O	O:0.999999
only	O	O:0.999968
one	O	O:1.000000
existing	O	O:0.999551
`	O	O:0.999975
energy	O	O:0.990565
`	O	O:0.999987
array	O	O:0.999354
.	O	O:0.999905
	
And	O	O:0.999973
you	O	O:0.999989
can	O	O:0.999990
combine	O	O:0.999970
the	O	O:0.999992
summation	O	O:0.999522
and	O	O:0.999986
multiplication	O	O:0.999980
into	O	O:0.999722
a	O	O:0.999992
dot	O	O:0.963533
product	O	O:0.997932
:	O	O:0.999891
#CODE	O	O:0.999862
	
For	O	O:0.999922
example	O	O:0.999702
,	O	O:0.999988
`	O	O:0.999999
a	O	O:0.999804
`	O	O:0.999878
is	O	O:0.999982
generated	O	O:0.999870
from	O	O:0.999866
`	O	O:0.999996
a	O	O:0.999975
=	O	O:0.999762
z	O	O:0.999813
[	O	O:0.999958
z	O	O:0.999927
!	O	O:0.999955
=0	O	O:0.999868
]`	O	O:0.999938
;	O	O:0.999953
`	O	O:0.999996
a	O	O:0.999959
`	O	O:0.999999
then	O	O:0.999888
changes	O	O:0.999997
through	O	O:0.999955
some	O	O:0.999918
processing	O	O:0.999213
,	O	O:0.999973
and	O	O:0.999996
now	O	O:0.999950
I	O	O:0.999996
need	O	O:0.999988
to	O	O:0.999980
insert	O	O:0.999962
`	O	O:0.999991
nan	O	O:0.973891
`	O	O:0.999999
s	O	O:0.999806
where	O	O:0.999968
there	O	O:0.999716
were	O	O:0.999933
originally	O	O:0.999876
zeros	O	O:0.823908
.	O	O:0.999849
	
I	O	O:0.999989
frequently	O	O:0.999859
use	O	O:0.999791
the	O	O:0.998884
numpy.where	B-API	B-API:0.996712
function	O	O:0.999908
to	O	O:0.999995
gather	O	O:0.999984
a	O	O:0.999998
tuple	O	O:0.999685
of	O	O:0.999997
indices	O	O:0.999759
of	O	O:0.999997
a	O	O:0.999964
matrix	O	O:0.999615
having	O	O:0.999555
some	O	O:0.999496
property	O	O:0.999640
.	O	O:0.999858
	
I	O	O:0.999956
suspect	O	O:0.999907
the	O	O:0.999963
original	O	O:0.995993
formula	O	O:0.999685
was	O	O:0.999831
right	O	O:0.999832
but	O	O:0.999962
you	O	O:0.999943
didn't	O	O:0.999900
encode	O	O:0.930755
it	O	O:0.999995
right	O	O:0.999822
in	O	O:0.999977
Python	O	O:0.999387
.	O	O:0.999932
	
This	O	O:0.999899
gets	O	O:0.999710
me	O	O:0.999991
the	O	O:0.999995
sum	O	O:0.999832
of	O	O:0.999992
all	O	O:0.999957
red	O	O:0.999991
combined	O	O:0.998009
in	O	O:0.999993
original	O	O:0.999431
-	O	O:0.999996
all	O	O:0.999956
red	O	O:0.999972
combined	O	O:0.997160
in	O	O:0.999962
mutated	O	O:0.998324
.	O	O:0.999888
	
`	O	O:0.999927
p2	O	O:0.999180
=	O	O:0.999853
einsum	B-API	B-API:0.965258
(	O	O:0.999912
'	O	O:0.999980
nk	O	O:0.999951
,	O	O:0.999986
nk	O	O:0.999786
->	O	O:0.999977
n	O	O:0.999815
'	O	O:0.999980
,	O	O:0.999993
p1	O	O:0.999797
,	O	O:0.999996
delta	O	O:0.999053
)`	O	O:0.999347
is	O	O:0.999964
the	O	O:0.999976
pairwise	O	O:0.999575
dot	O	O:0.999797
product	O	O:0.999930
of	O	O:0.999997
the	O	O:0.999999
rows	O	O:0.999930
of	O	O:0.999938
`	O	O:0.999990
p1	O	O:0.997542
`	O	O:0.999979
and	O	O:0.999742
`	O	O:0.999997
delta	O	B-API:0.559851
`	O	O:0.999955
.	O	O:0.998913
	
I	O	O:0.999905
did	O	O:0.999977
the	O	O:0.999916
reshape	B-API	B-API:0.628542
,	O	O:0.999995
just	O	O:0.999929
so	O	O:0.999997
that	O	O:0.999976
both	O	O:0.999984
arrays	O	O:0.999919
are	O	O:0.999988
same	O	O:0.999962
shape	O	O:0.999445
,	O	O:0.999989
but	O	O:0.999985
I	O	O:0.999972
do	O	O:0.999988
not	O	O:0.999971
think	O	O:0.999946
you	O	O:0.999993
really	O	O:0.999961
need	O	O:0.999976
the	O	O:0.999995
reshaping	O	O:0.999870
,	O	O:0.999980
with	O	O:0.999938
the	O	O:0.999993
list	O	O:0.999241
comprehension	O	O:0.999876
the	O	O:0.999998
shape	O	O:0.999887
of	O	O:0.999986
array	O	O:0.999964
you	O	O:0.999991
get	O	O:0.999832
is	O	O:0.999986
`	O	O:0.999901
(	O	O:0.999977
length	O	O:0.999860
of	O	O:0.999908
string	O	O:0.999480
,	O	O:0.999989
)`	O	O:0.999634
	
Also	O	O:0.999889
,	O	O:0.999997
I	O	O:0.999994
expect	O	O:0.999991
the	O	O:0.999996
positions	O	O:0.999900
of	O	O:0.999994
the	O	O:0.999995
zeros	O	O:0.962224
to	O	O:0.999989
be	O	O:1.000000
relatively	O	O:0.999864
sparse	O	O:0.990546
(	O	O:0.999979
~1%	O	O:0.999962
of	O	O:0.999977
all	O	O:0.999971
bit	O	O:0.999987
positions	O	O:0.999373
)	O	O:0.999944
.	O	O:0.999907
	
Slicing	O	O:0.999032
arrays	O	O:0.999592
with	O	O:0.999528
meshgrid	B-API	B-API:0.908229
/	O	O:0.999987
array	O	O:0.999956
indices	O	O:0.998662
in	O	O:0.999948
Numpy	O	O:0.999446
	
(	O	O:0.999799
An	O	O:0.999975
nonzero	O	O:0.866562
exit	O	O:0.999243
status	O	O:0.999544
usually	O	O:0.999860
indicates	O	O:0.999906
an	O	O:0.999988
error	O	O:0.999796
on	O	O:0.999952
Unix	O	O:0.999211
style	O	O:0.999872
systems	O	O:0.999641
.	O	O:0.999885
A	O	O:0.999997
couple	O	O:0.999857
programs	O	O:0.999613
are	O	O:0.999991
different	O	O:0.999924
,	O	O:0.999982
e.g.	O	O:0.999711
,	O	O:0.999973
`	O	O:0.999997
diff	B-API	B-API:0.994652
`	O	O:0.999993
.	O	O:0.999795
)	O	O:0.999995
Try	O	O:0.999974
examining	O	O:0.999729
the	O	O:0.999740
`	O	O:0.999964
stderr	O	O:0.927163
`	O	O:0.999999
produced	O	O:0.999543
by	O	O:0.999988
the	O	O:0.999977
subprocess	O	O:0.999678
to	O	O:0.999980
see	O	O:1.000000
what	O	O:0.999977
error	O	O:0.999960
messages	O	O:0.999784
are	O	O:0.999957
printed	O	O:0.999787
there	O	O:0.999760
.	O	O:0.999903
	
To	O	O:0.999973
achieve	O	O:0.999865
exactly	O	O:0.999976
what	O	O:0.999891
you	O	O:0.999974
are	O	O:0.999998
asking	O	O:0.999893
for	O	O:0.999946
I	O	O:0.999938
would	O	O:0.999980
apply	O	O:0.820080
a	O	O:0.999943
`	O	O:0.998320
[	O	O:0.999934
3x3	O	O:0.999907
]`	O	O:0.999958
box-filter	O	O:0.997761
on	O	O:0.999978
the	O	O:0.999963
image	O	O:0.999533
and	O	O:0.999996
than	O	O:0.999941
I	O	O:0.999981
would	O	O:0.999972
resize	O	B-API:0.633031
the	O	O:0.999978
matrix	O	O:0.999788
using	O	O:0.999899
nearest	O	O:0.996678
neighbor	O	O:0.998139
interpolation	O	O:0.999041
.	O	O:0.999875
	
Is	O	O:0.999985
there	O	O:0.999985
a	O	O:0.999997
quick	O	O:0.999018
way	O	O:0.999957
to	O	O:0.999981
reshape	O	O:0.988163
my	O	O:0.999916
`	O	O:0.999965
csr_matrix	O	O:0.629927
`	O	O:0.999992
without	O	O:0.998942
copying	O	O:0.999849
everything	O	O:0.998760
in	O	O:0.999910
it	O	O:0.999978
?	O	O:0.999978
	
The	O	O:0.999928
catch	O	O:0.986910
is	O	O:0.999998
that	O	O:0.999684
I	O	O:1.000000
need	O	O:0.999995
to	O	O:0.999993
keep	O	O:0.999993
the	O	O:0.999995
colors	O	O:0.999513
exactly	O	O:0.999978
the	O	O:0.999988
way	O	O:0.999970
they	O	O:0.999640
are	O	O:0.999874
(	O	O:0.999887
background	O	O:0.999481
:	O	O:0.999964
I'm	O	O:0.999989
resizing	O	O:0.999985
a	O	O:0.999959
map	O	B-API:0.778445
where	O	O:0.999953
provinces	O	O:0.999570
are	O	O:0.999991
color-coded	O	O:0.999797
)	O	O:0.999977
,	O	O:0.999963
and	O	O:0.999998
so	O	O:0.999978
I	O	O:0.999959
cannot	O	O:0.999996
just	O	O:0.999923
perform	O	O:0.999987
a	O	O:0.999977
resize	O	B-API:0.755715
with	O	O:0.999745
bicubic	O	O:0.997650
interpolation	O	O:0.999850
,	O	O:0.999985
because	O	O:0.999976
that	O	O:0.999938
will	O	O:0.999998
also	O	O:0.999991
interpolate	O	O:0.976096
the	O	O:0.999959
pixel	O	O:0.999629
colors	O	O:0.999386
while	O	O:0.999946
smoothing	O	O:0.999399
.	O	O:0.999852
	
You	O	O:0.999823
should	O	O:0.999881
"	O	O:0.999994
flatten	O	B-API:0.796616
"	O	O:0.999975
the	O	O:0.999984
array	O	O:0.999929
of	O	O:0.999966
arrays	O	O:0.999679
first	O	O:0.999932
.	O	O:0.999985
unfortunately	O	O:0.999621
,	O	O:0.999993
there's	O	O:0.999724
no	O	O:0.999815
builtin	O	O:0.998661
method	O	O:0.999969
,	O	O:0.999985
see	O	O:0.999911
#URL	O	O:0.999164
	
then	O	O:0.999395
concatenate	O	O:0.962650
the	O	O:0.999982
saved	O	O:0.999708
objects	O	O:0.999463
whit	O	O:0.999964
this	O	O:0.999916
code	O	O:0.999337
:	O	O:0.999981
#CODE	O	O:0.999835
	
For	O	O:0.999982
something	O	O:0.999966
like	O	O:0.999960
a	O	O:0.999998
dot	O	O:0.996614
product	O	O:0.999611
,	O	O:0.999990
pandas	O	O:0.999782
`	O	O:0.999995
DataFrames	O	O:0.982928
`	O	O:0.999992
are	O	O:0.999972
generally	O	O:0.999975
going	O	O:0.999754
to	O	O:0.999980
be	O	O:0.999998
slower	O	O:0.999949
than	O	O:0.999934
a	O	O:0.999996
numpy	O	O:0.999623
array	O	O:0.999931
since	O	O:0.999938
pandas	O	O:0.998687
is	O	O:0.999999
doing	O	O:0.999221
**	O	O:0.999993
a	O	O:0.999925
lot	O	O:0.999990
more	O	O:0.999816
stuff	O	O:0.998699
**	O	O:0.999993
aligning	O	O:0.999864
labels	O	O:0.998430
,	O	O:0.999990
potentially	O	O:0.999881
dealing	O	O:0.999089
with	O	O:0.999873
heterogenous	O	O:0.999728
types	O	O:0.999081
,	O	O:0.999983
and	O	O:0.999998
so	O	O:0.999983
on	O	O:0.999896
.	O	O:0.999943
	
I	O	O:0.999987
want	O	O:0.999965
to	O	O:0.999987
pass	O	O:0.999973
an	O	O:0.999995
array	O	O:0.999991
of	O	O:0.999967
indices	O	O:0.995876
and	O	O:0.999996
column	O	O:0.999940
names	O	O:0.999281
and	O	O:0.999996
get	O	O:0.999979
a	O	O:0.999996
list	O	O:0.996958
of	O	O:0.999985
objects	O	O:0.999777
that	O	O:0.999962
are	O	O:0.999999
found	O	O:0.999796
in	O	O:0.999969
the	O	O:0.999944
corresponding	O	O:0.998338
index	O	O:0.999182
and	O	O:0.999987
column	O	O:0.999969
name	O	O:0.999626
.	O	O:0.999877
	
From	O	O:0.999937
this	O	O:0.999943
you	O	O:0.999985
would	O	O:0.999983
expect	O	O:0.999991
the	O	O:0.999999
total	O	O:0.999857
sum	O	O:0.999907
to	O	O:0.999995
be	O	O:0.999999
`	O	O:0.999995
100,679,697	O	O:0.995765
=	O	O:0.999956
200*	O	O:0.996150
(	O	O:0.999926
1,000,000	O	O:0.998201
-	O	O:0.999990
499,097	O	O:0.999062
)	O	O:0.999946
+	O	O:0.999949
499,097	O	O:0.998001
`	O	O:0.999915
	
The	O	O:0.999837
histogram	O	O:0.999861
way	O	O:0.999523
is	O	O:0.999981
not	O	O:0.999933
the	O	O:0.999992
fastest	O	O:0.998343
,	O	O:0.999959
and	O	O:0.999984
can't	O	O:0.999945
tell	O	O:0.999546
the	O	O:0.999995
difference	O	O:0.999616
between	O	O:0.999609
an	O	O:0.999991
arbitrarily	O	O:0.999930
small	O	O:0.999628
separation	O	O:0.999803
of	O	O:0.999975
points	O	O:0.999037
and	O	O:0.999995
`	O	O:0.999985
2	O	O:0.998517
*	O	O:0.999985
sqrt	B-API	B-API:0.967582
(	O	O:0.999970
2	O	O:0.999896
)	O	O:0.999963
*	O	O:0.999987
b	O	O:0.999823
`	O	O:0.999877
(	O	O:0.999956
where	O	O:0.999950
`	O	O:0.999986
b	O	O:0.999282
`	O	O:0.999982
is	O	O:0.999837
bin	O	O:0.999695
width	O	O:0.999845
)	O	O:0.999893
.	O	O:0.999757
	
}	O	O:0.999924
for	O	O:0.999932
n=1	O	O:0.999496
,	O	O:0.999945
2	O	O:0.999957
,	O	O:0.999968
3	O	O:0.999949
,	O	O:0.999985
4	O	O:0.999965
,	O	O:0.999985
5	O	O:0.999954
,	O	O:0.999967
6	O	O:0.999399
(	O	O:0.999988
using	O	O:0.999589
Sum	B-API	O:0.994427
(	O	O:0.999897
c_n	O	O:0.995649
exp	B-API	B-API:0.913819
(	O	O:0.999989
i	O	O:0.999943
2	O	O:0.999980
pi	O	O:0.999805
n	O	O:0.999967
x	O	O:0.999961
)	O	O:0.999995
)	O	O:0.999992
as	O	O:0.999979
Fourier	O	O:0.999438
series	O	O:0.999459
)	O	O:0.999944
.	O	O:0.999848
	
I	O	O:0.999990
think	O	O:0.999959
I	O	O:0.999964
can	O	O:0.999979
t	O	O:0.997860
just	O	O:0.999986
simple	O	O:0.999965
sum	O	O:0.999863
the	O	O:0.999962
"	O	O:0.999964
seq	O	O:0.998832
*	O	O:0.999981
"	O	O:0.999984
array	O	O:0.999769
,	O	O:0.999988
because	O	O:0.999966
instead	O	O:0.999985
of	O	O:1.000000
a	O	O:0.999993
chord	O	O:0.999739
I	O	O:0.999994
will	O	O:0.999972
get	O	O:0.999875
noise	O	O:0.999361
.	O	O:0.999891
	
I	O	O:0.999985
presume	O	O:0.999967
you	O	O:0.999971
want	O	O:0.999968
to	O	O:0.999995
transpose	O	O:0.995638
first	O	O:0.999386
:	O	O:0.999959
#CODE	O	O:0.999800
	
Oh	O	O:0.999716
,	O	O:0.999977
that's	O	O:0.999950
interesting	O	O:0.999807
you	O	O:0.999981
can	O	O:0.999978
do	O	O:0.999999
it	O	O:0.999998
with	O	O:0.999944
stack	B-API	B-API:0.760251
.	O	O:0.999929
	
In	O	O:0.999984
this	O	O:0.999968
case	O	O:0.999981
,	O	O:0.999999
using	O	O:0.999967
numpy	O	O:0.999666
outer	B-API	O:0.825230
operations	O	O:0.999822
allow	O	O:0.999718
you	O	O:0.999993
to	O	O:0.999988
compute	O	O:0.999990
the	O	O:0.999991
multiplications	O	O:0.999737
and	O	O:0.999999
sums	O	O:0.999889
at	O	O:0.999984
the	O	O:0.999986
`	O	O:0.999955
C	O	O:0.988833
`	O	O:0.999995
loop	O	O:0.998705
speed	O	O:0.999271
.	O	O:0.999856
	
The	O	O:0.999975
most	O	O:0.999709
efficient	O	O:0.999870
way	O	O:0.999704
is	O	O:0.999986
likely	O	O:0.999529
to	O	O:0.999984
use	O	O:0.999958
'	O	O:0.999823
np.empty()	B-API	B-API:0.989951
'	O	O:0.999987
to	O	O:0.999993
allocate	O	O:0.999994
the	O	O:0.999980
space	O	O:0.999289
/	O	O:0.999987
memory	O	O:0.999838
for	O	O:0.999997
your	O	O:0.999883
end	O	O:0.999628
dataset	O	O:0.999930
and	O	O:0.999991
then	O	O:0.999987
load	O	O:0.999954
data	O	O:0.999944
&	O	O:0.999986
broadcast	O	O:0.999741
within	O	O:0.999950
that	O	O:0.999961
using	O	O:0.999967
slice	O	O:0.988622
indexing	O	O:0.996647
.	O	O:0.999409
	
Ok	O	O:0.999872
,	O	O:0.999987
with	O	O:0.999994
your	O	O:0.999877
histogram	O	O:0.999967
I	O	O:0.999999
get	O	O:0.999997
at	O	O:0.999989
least	O	O:0.999894
the	O	O:0.999996
total	O	O:0.999512
number	O	O:0.999944
of	O	O:0.999993
each	O	O:0.999902
pair	O	O:0.999770
.	O	O:0.999894
	
This	O	O:0.998620
is	O	O:0.999982
because	O	O:0.999930
python's	O	O:0.999800
sum	O	O:0.999338
is	O	O:0.999991
basically	O	O:0.999955
summing	O	O:0.999981
a	O	O:0.999959
for	O	O:0.999958
loop	O	O:0.999837
over	O	O:0.998988
the	O	O:0.999761
object	O	O:0.999186
.	O	O:0.999811
	
Then	O	O:0.999746
the	O	O:0.999999
entire	O	O:0.999965
shape	O	O:0.999984
changes	O	O:0.999803
from	O	O:0.999305
(	O	O:0.999985
x	O	O:0.999956
,	O	O:0.999996
y	O	O:0.999977
)	O	O:0.999984
to	O	O:0.999970
merely	O	O:0.999922
(	O	O:0.999986
x	O	O:0.999903
,	O	O:0.999987
)	O	O:0.999992
and	O	O:0.999990
I	O	O:0.999996
get	O	O:0.999612
'	O	O:0.999844
too	O	O:0.999986
many	O	O:0.999946
indices	O	O:0.998002
'	O	O:0.999989
errors	O	O:0.999982
when	O	O:0.999820
I	O	O:0.999998
try	O	O:0.999998
to	O	O:0.999930
use	O	O:0.999994
masks	O	O:0.994974
.	O	O:0.999701
	
If	O	O:0.999928
reps	O	O:0.990418
has	O	O:0.999954
length	O	O:0.999590
d	O	O:0.999761
,	O	O:0.999999
the	O	O:0.999970
result	O	O:0.999876
will	O	O:0.999983
have	O	O:0.999997
dimension	O	O:0.999986
of	O	O:0.999976
max	B-API	B-API:0.799004
(	O	O:0.999984
d	O	O:0.999852
,	O	O:0.999990
A.ndim	O	O:0.996738
)	O	O:0.999952
.	O	O:0.999731
	
I	O	O:0.999988
want	O	O:0.999976
to	O	O:0.999871
do	O	O:1.000000
this	O	O:0.999983
by	O	O:0.999994
dividing	O	O:0.999919
each	O	O:0.998942
histogram	O	O:0.999982
by	O	O:0.999994
its	O	O:0.999983
maximum	O	O:0.999923
value	O	O:0.999961
so	O	O:0.999990
all	O	O:0.999997
the	O	O:0.999996
distributions	O	O:0.999802
have	O	O:0.999934
the	O	O:0.999998
same	O	O:0.999961
scale	O	O:0.998404
.	O	O:0.999951
	
An	O	O:0.999887
obvious	O	O:0.999578
path	O	O:0.999811
would	O	O:0.999982
be	O	O:0.999998
to	O	O:0.999999
transpose	O	O:0.991302
the	O	O:0.999995
array	O	O:0.999929
so	O	O:0.999995
that	O	O:0.999982
the	O	O:0.999997
indices	O	O:0.999917
that	O	O:0.999926
I	O	O:0.999999
am	O	O:0.999999
selecting	O	O:0.996408
would	O	O:0.999974
come	O	O:0.999915
up	O	O:0.999994
first	O	O:0.999407
.	O	O:0.999843
	
Now	O	O:0.999922
,	O	O:0.999984
for	O	O:0.999999
mean	O	O:0.999242
calculations	O	O:0.999651
,	O	O:0.999998
those	O	O:0.999970
numeric	O	O:0.998945
IDs	O	O:0.999887
could	O	O:0.999936
be	O	O:1.000000
used	O	O:0.999981
as	O	O:0.999910
`"	O	O:0.999907
weights	O	O:0.999471
"`	O	O:0.999926
for	O	O:0.999973
binning	O	O:0.999297
with	O	O:0.998655
`	O	O:0.999904
np.bincount	B-API	B-API:0.992866
`	O	O:0.999990
,	O	O:0.999990
giving	O	O:0.999912
us	O	O:0.999934
the	O	O:0.999990
sum	O	O:0.999936
of	O	O:0.999998
data	O	O:0.999977
elements	O	O:0.999994
corresponding	O	O:0.999797
to	O	O:0.999994
each	O	O:0.999968
`	O	O:0.999973
ID	O	O:0.996285
`	O	O:0.999983
.	O	O:0.998964
	
However	O	O:0.999514
,	O	O:0.999997
what	O	O:0.999958
I	O	O:0.999997
need	O	O:0.999955
is	O	O:0.999993
a	O	O:0.999981
string	O	O:0.999602
containing	O	O:0.999039
all	O	O:0.999986
the	O	O:0.999996
elements	O	O:0.999179
in	O	O:0.999961
the	O	O:0.999993
list	O	O:0.999356
linked	O	O:0.999861
by	O	O:0.999939
'	O	O:0.999945
;	O	O:0.999926
'	O	O:0.999855
,	O	O:0.999997
not	O	O:0.999956
the	O	O:0.999997
list	O	O:0.999545
itself	O	O:0.999866
,	O	O:0.999996
so	O	O:0.999984
it	O	O:0.999991
seems	O	O:0.999996
like	O	O:0.999969
I	O	O:0.999999
have	O	O:0.999992
to	O	O:0.999989
sum	O	O:0.999996
all	O	O:0.999992
the	O	O:0.999998
elements	O	O:0.999430
in	O	O:0.999993
asString	O	O:0.999953
with	O	O:0.999976
another	O	O:0.999495
iteration	O	O:0.999785
?	O	O:0.999918
	
the	O	O:0.999927
output	O	O:0.999564
I	O	O:0.999985
need	O	O:0.999901
:	O	O:0.999973
`	O	O:0.999996
S	O	O:0.999778
=	O	O:0.999948
[	O	O:0.999929
2	O	O:0.999945
,	O	O:0.999976
5	O	O:0.999926
,	O	O:0.999979
8	O	O:0.999928
,	O	O:0.999979
11	O	O:0.999897
,	O	O:0.999983
14	O	O:0.999953
]`	O	O:0.999945
I	O	O:0.999963
thought	O	O:0.999978
something	O	O:0.999622
like	O	O:0.999037
:	O	O:0.999993
`	O	O:0.999989
S1	O	O:0.999744
=	O	O:0.999817
np.array	B-API	B-API:0.993490
(	O	O:0.999901
L	O	O:0.999709
[:	O	O:0.999937
]	O	O:0.999886
[	O	O:0.999904
1	O	O:0.999982
,	O	O:0.999976
0	O	O:0.999858
])`	O	O:0.999797
should	O	O:0.999453
work	O	O:0.999914
but	O	O:0.999997
whatever	O	O:0.999976
I	O	O:0.999996
try	O	O:0.999994
I	O	O:0.999985
have	O	O:0.999992
the	O	O:0.999975
error	O	O:0.999857
like	O	O:0.999345
:	O	O:0.999979
`	O	O:0.999975
TypeError	O	O:0.997142
:	O	O:0.999993
list	O	O:0.998878
indices	O	O:0.999900
must	O	O:0.999914
be	O	O:0.999997
integers	O	O:0.999664
,	O	O:0.999928
not	O	O:0.999980
tuple	O	O:0.998703
`	O	O:0.999977
.	O	O:0.999650
	
I	O	O:0.999974
need	O	O:0.999961
it	O	O:0.999983
because	O	O:0.999969
in	O	O:0.999988
the	O	O:0.999996
next	O	O:0.999876
part	O	O:0.999852
I	O	O:0.999997
will	O	O:0.999997
sum	O	O:0.999383
up	O	O:0.999995
this	O	O:0.999953
large	O	O:0.999755
np.array	B-API	B-API:0.969901
with	O	O:0.999934
some	O	O:0.999905
delta_array	O	O:0.999543
that	O	O:0.999847
has	O	O:0.999990
the	O	O:0.999996
same	O	O:0.999805
shape	O	O:0.999561
.	O	O:0.999916
	
Used	O	O:0.999576
reshape	B-API	O:0.550655
to	O	O:0.999996
make	O	O:0.999999
rows	O	O:0.999956
into	O	O:0.999875
columns	O	O:0.999929
.	O	O:0.999777
	
I	O	O:0.999941
understand	O	O:0.999966
that	O	O:0.999618
you	O	O:0.999993
could	O	O:0.999997
create	O	O:0.999984
an	O	O:0.999999
array	O	O:0.999994
of	O	O:0.999972
zeros	O	O:0.757662
and	O	O:0.999998
iteratively	O	O:0.999908
change	O	O:0.999206
the	O	O:0.999985
values	O	O:0.997733
in	O	O:0.999986
each	O	O:0.999960
column	O	O:0.999803
,	O	O:0.999995
but	O	O:0.999983
I	O	O:0.999994
also	O	O:0.999946
understand	O	O:0.999947
this	O	O:0.995443
is	O	O:0.999984
not	O	O:0.999967
an	O	O:0.999956
efficient	O	O:0.999367
method	O	O:0.999834
.	O	O:0.999893
	
I'm	O	O:0.999961
trying	O	O:0.999911
to	O	O:0.999985
implement	O	O:0.999957
the	O	O:0.999987
univariate	O	O:0.999105
gradient	O	O:0.966972
descent	O	O:0.999797
algorithm	O	O:0.999759
in	O	O:0.999952
python	O	O:0.999135
.	O	O:0.999933
	
numpy	O	O:0.996454
glossary	O	O:0.999812
says	O	O:0.999882
the	O	O:0.999987
sum	O	O:0.999657
along	O	O:0.999907
axis	O	O:0.999743
argument	O	O:0.999775
`	O	O:0.999980
axis=1	O	O:0.995514
`	O	O:0.999999
sums	O	O:0.999819
over	O	O:0.999972
rows	O	O:0.999245
:	O	O:0.999981
"	O	O:0.999999
we	O	O:0.999993
can	O	O:0.999984
sum	O	O:0.999999
each	O	O:0.999981
row	O	O:0.999989
of	O	O:0.999994
an	O	O:0.999980
array	O	O:0.999986
,	O	O:0.999985
in	O	O:0.999961
which	O	O:0.999974
case	O	O:0.999979
we	O	O:0.999997
operate	O	O:0.999957
along	O	O:0.999962
columns	O	O:0.999849
,	O	O:0.999988
or	O	O:0.999998
axis	O	O:0.999848
1	O	O:0.999899
"	O	O:0.999964
.	O	O:0.999657
	
It	O	O:0.999973
also	O	O:0.999959
prints	O	O:0.999947
out	O	O:0.999953
the	O	O:0.999989
new	O	O:0.999742
indices	O	O:0.998991
signature	O	O:0.999772
.	O	O:0.999902
	
At	O	O:0.999979
first	O	O:0.999759
,	O	O:1.000000
your	O	O:0.999959
`	O	O:0.999978
result	O	O:0.999202
`	O	O:0.999993
does	O	O:0.998856
not	O	O:0.999995
look	O	O:0.999990
like	O	O:0.999982
a	O	O:0.999997
complex	O	O:0.993283
FFT	O	O:0.999854
output	O	O:0.998664
	
debug	O	O:0.997642
performance	O	O:0.999983
diff	O	B-API:0.842642
of	O	O:0.999974
Same	O	O:0.999961
code	O	O:0.999912
on	O	O:0.999992
nearly	O	O:0.999904
same	O	O:0.999955
cpu	O	O:0.999842
/	O	O:0.999976
ram	O	O:0.999702
	
The	O	O:0.999858
HTML	O	O:0.999700
file	O	O:0.999951
generated	O	O:0.999863
by	O	O:0.999964
Cython	O	O:0.999345
indicates	O	O:0.999804
that	O	O:0.999932
the	O	O:0.999995
bottleneck	O	O:0.998942
is	O	O:0.999978
the	O	O:0.999963
dot	O	O:0.998359
products	O	O:0.998430
(	O	O:0.999942
which	O	O:0.999858
is	O	O:0.999996
expected	O	O:0.999953
of	O	O:0.999997
course	O	O:0.999770
)	O	O:0.999993
.	O	O:0.999597
	
`	O	O:0.999930
numpy.unique	B-API	B-API:0.994072
`	O	O:0.999994
with	O	O:0.997851
`	O	O:0.999987
return_index=True	O	O:0.983568
`	O	O:0.999988
will	O	O:0.999846
give	O	O:0.999981
you	O	O:0.999991
a	O	O:0.999999
list	O	O:0.999535
of	O	O:0.999994
indices	O	O:0.999525
to	O	O:0.999999
take	O	O:0.999997
from	O	O:0.999915
.	O	O:0.999945
	
I	O	O:0.999955
forgot	O	O:0.999891
exactly	O	O:0.999561
why	O	O:0.999885
,	O	O:0.999959
but	O	O:0.999992
there	O	O:0.999804
is	O	O:0.999998
a	O	O:0.999994
good	O	O:0.997902
reason	O	O:0.999911
why	O	O:0.999991
you	O	O:0.999986
calculate	O	O:0.999947
it	O	O:0.999999
as	O	O:0.999999
the	O	O:0.999979
ratio	O	O:0.999184
between	O	O:0.999331
these	O	O:0.999983
two	O	O:0.999989
averages	O	O:0.999664
,	O	O:0.999994
instead	O	O:0.999998
of	O	O:0.999995
directly	O	O:0.999919
averaging	O	O:0.999789
`	O	O:0.999757
fft	B-API	B-API:0.973718
(	O	O:0.999993
y	O	O:0.999852
)	O	O:0.999931
/	O	O:0.999810
fft	B-API	B-API:0.954597
(	O	O:0.999937
x	O	O:0.999834
)`	O	O:0.999607
.	O	O:0.999821
	
Do	O	O:0.999962
you	O	O:0.999986
really	O	O:0.999951
want	O	O:0.999989
this	O	O:0.999588
'	O	O:0.999996
roll	B-API	B-API:0.847472
'	O	O:0.999896
?	O	O:0.999962
	
By	O	O:0.999975
adding	O	O:0.999805
a	O	O:0.999984
nonzero	O	O:0.609949
number	O	O:0.999901
at	O	O:0.999991
the	O	O:0.999999
end	O	O:0.999934
of	O	O:0.999988
the	O	O:0.999968
array	O	O:0.999977
,	O	O:0.999995
you	O	O:0.999976
can	O	O:0.999997
still	O	O:0.999996
use	O	O:0.999980
np.nonzero	B-API	B-API:0.961342
to	O	O:0.999972
get	O	O:0.999999
your	O	O:0.999962
desired	O	O:0.999788
outcome	O	O:0.999904
.	O	O:0.999836
	
which	O	O:0.999931
simply	O	O:0.999960
sorts	O	O:0.999763
the	O	O:0.999974
terms	O	O:0.999513
and	O	O:0.999996
then	O	O:0.999738
takes	O	O:0.999975
the	O	O:0.999999
ones	O	O:0.998703
which	O	O:0.999916
aren't	O	O:0.999997
equal	O	O:0.999858
to	O	O:0.999994
the	O	O:0.999999
previous	O	O:0.999584
one	O	O:0.999951
.	O	O:0.999941
	
4	O	O:0.999417
:	O	O:0.999975
I	O	O:0.999974
am	O	O:0.999998
not	O	O:0.999985
sure	O	O:0.999980
about	O	O:0.999963
the	O	O:0.999969
indices	O	O:0.998932
,	O	O:0.999995
by	O	O:0.999985
writing	O	O:0.999936
couple	O	O:0.999063
of	O	O:0.999997
code	O	O:0.999841
lines	O	O:0.999882
I	O	O:0.999996
just	O	O:0.999997
able	O	O:0.999974
to	O	O:0.999997
get	O	O:0.999996
cluster	O	O:0.999767
indices	O	O:0.999957
based	O	O:0.999904
on	O	O:0.999978
fclusterdata	O	O:0.977564
.	O	O:0.999930
	
Matlab	O	O:0.999419
gives	O	O:0.999838
me	O	O:0.999985
a	O	O:0.999992
norm	O	B-API:0.831004
=	O	O:0.999901
2	O	O:0.999888
for	O	O:0.999989
your	O	O:0.998931
matrix	O	O:0.997755
.	O	O:0.999909
	
I	O	O:0.999977
first	O	O:0.999976
generated	O	O:0.999658
a	O	O:0.999982
labelled	O	O:0.999512
array	O	O:0.999971
of	O	O:0.999985
unique	O	O:0.781950
IDs	O	O:0.999864
for	O	O:0.999982
each	O	O:0.999786
discrete	O	O:0.998980
region	O	O:0.999686
,	O	O:0.999996
calculated	O	O:0.999909
sizes	O	O:0.999785
for	O	O:0.999993
each	O	O:0.999510
ID	O	O:0.999373
,	O	O:0.999986
masked	O	O:0.999339
the	O	O:0.999974
size	O	O:0.999872
array	O	O:0.999973
to	O	O:0.999994
focus	O	O:0.999994
only	O	O:0.999960
on	O	O:0.999997
size	O	O:0.999893
==	O	O:0.999976
1	O	O:0.999972
blobs	O	O:0.999723
,	O	O:0.999993
then	O	O:0.999875
index	O	O:0.999994
the	O	O:0.999997
original	O	O:0.999714
array	O	O:0.999946
and	O	O:0.999995
set	O	O:0.999915
IDs	O	O:0.999863
with	O	O:0.999973
a	O	O:0.999994
size	O	O:0.999360
==	O	O:0.999950
1	O	O:0.999983
to	O	O:0.999905
0	O	O:0.999928
:	O	O:0.999957
#CODE	O	O:0.999756
	
absolute	B-API	O:0.501426
(	O	O:0.999988
a	O	O:0.999985
-	O	O:0.999972
b	O	O:0.999909
)	O	O:0.999963
=	O	O:0.976457
(	O	O:0.999989
atol	O	O:0.997861
+	O	O:0.999982
rtol	O	O:0.996320
*	O	O:0.999987
absolute	B-API	O:0.568869
(	O	O:0.999974
b	O	O:0.999909
))	O	O:0.999111
	
Then	O	O:0.999621
I	O	O:0.999996
reshape	O	O:0.979803
this	O	O:0.999403
to	O	O:0.999997
form	O	O:0.999999
a	O	O:0.999989
2D	O	O:0.999885
numpy	O	O:0.999698
array	O	O:0.999700
.	O	O:0.999766
	
n=5	O	O:0.977947
(	O	O:0.999978
min	O	O:0.942637
length	O	O:0.999612
of	O	O:0.999973
sequence	O	O:0.999807
)	O	O:0.999978
	
I	O	O:0.999991
have	O	O:0.999973
written	O	O:0.999770
a	O	O:0.999987
function	O	O:0.998840
which	O	O:0.999728
contains	O	O:0.999691
nested	O	O:0.999657
loops	O	O:0.999172
and	O	O:0.999982
a	O	O:0.999979
conditional	O	O:0.916738
statement	O	O:0.999851
;	O	O:0.999991
the	O	O:0.999995
purpose	O	O:0.999932
of	O	O:0.999982
the	O	O:0.999955
loop	O	O:0.999563
is	O	O:0.999975
to	O	O:0.999989
return	O	O:0.999977
a	O	O:0.999994
list	O	O:0.999095
of	O	O:0.999996
indices	O	O:0.998786
for	O	O:0.999992
the	O	O:0.999977
nearest	O	O:0.999428
elements	O	O:0.999499
in	O	O:0.999969
array	O	O:0.999988
x	O	O:0.999980
when	O	O:0.999769
compared	O	O:0.999909
to	O	O:0.999998
array	O	O:0.999994
y	O	O:0.999828
.	O	O:0.999850
	
I	O	O:0.999988
also	O	O:0.999994
want	O	O:0.999963
to	O	O:0.999966
color	O	O:0.999997
the	O	O:0.999970
1D	O	O:0.999812
histogram	O	O:0.999969
bars	O	O:0.999935
according	O	O:0.999917
to	O	O:0.999981
the	O	O:0.999999
same	O	O:0.999814
normalization	O	O:0.999563
.	O	O:0.999973
	
If	O	O:0.999937
you	O	O:0.999945
are	O	O:0.999996
calling	O	O:0.999782
it	O	O:0.999987
with	O	O:0.999952
an	O	O:0.999992
empty	O	O:0.999802
matrix	O	O:0.999581
for	O	O:0.999806
[	O	O:0.999947
low	O	O:0.999512
,	O	O:0.999989
high	O	O:0.998925
]	O	O:0.999951
it	O	O:0.999952
will	O	O:0.999993
just	O	O:0.999977
use	O	O:0.999985
whatever	O	O:0.999388
the	O	O:0.999887
max	O	O:0.503835
and	O	O:0.999991
min	O	O:0.973046
values	O	O:0.998911
in	O	O:0.999975
the	O	O:0.999988
array	O	O:0.999785
are	O	O:0.999913
.	O	O:0.999912
	
Creating	O	O:0.999706
a	O	O:0.999967
class	O	O:0.999890
deriving	O	O:0.999920
from	O	O:0.998764
`	O	O:0.999981
ndarray	B-API	B-API:0.947102
`	O	O:0.999926
and	O	O:0.999863
overriding	O	O:0.999923
indexing	O	O:0.998947
such	O	O:0.999931
that	O	O:0.999962
the	O	O:0.999992
absolute	O	O:0.909584
indices	O	O:0.998025
are	O	O:0.999977
used	O	O:0.999797
.	O	O:0.999697
	
One	O	O:0.999853
solution	O	O:0.998980
is	O	O:0.999991
to	O	O:0.999981
sort	O	O:0.999977
both	O	O:0.999834
arrays	O	O:0.997765
(	O	O:0.999991
adding	O	O:0.999122
an	O	O:0.999908
index	O	O:0.999983
column	O	O:0.999954
so	O	O:0.999999
that	O	O:0.999984
the	O	O:0.999997
sorted	O	O:0.999819
arrays	O	O:0.999897
still	O	O:0.999674
contains	O	O:0.999878
the	O	O:0.999995
original	O	O:0.999579
indices	O	O:0.999329
)	O	O:0.999966
.	O	O:0.999886
	
Use	O	O:0.999660
`	O	O:0.999957
reshape	B-API	B-API:0.989329
`	O	O:0.999829
:	O	O:0.999773
#CODE	O	O:0.999908
	
What's	O	O:0.999848
wrong	O	O:0.999703
with	O	O:0.999895
the	O	O:0.999993
normal	O	O:0.999439
div	O	O:0.986543
/	O	O:0.999975
mod	O	O:0.913892
operations	O	O:0.999682
?	O	O:0.999892
	
You	O	O:0.999933
can	O	O:0.999938
use	O	O:0.999996
`	O	O:0.999720
argmin	B-API	B-API:0.994404
`	O	O:0.999996
to	O	O:0.999965
find	O	O:0.999994
the	O	O:0.999993
False	O	O:0.999784
values	O	O:0.999304
,	O	O:0.999953
and	O	O:0.999999
this	O	O:0.999919
will	O	O:0.999886
be	O	O:0.999992
faster	O	O:0.999684
and	O	O:0.999992
take	O	O:0.999868
less	O	O:0.998348
memory	O	O:0.999968
than	O	O:0.999834
using	O	O:0.999916
nonzero	B-API	B-API:0.830202
,	O	O:0.999637
but	O	O:0.999989
this	O	O:0.999472
is	O	O:0.999998
linear	O	O:0.995989
in	O	O:0.999987
the	O	O:0.999984
length	O	O:0.999678
of	O	O:0.999914
`	O	O:0.999996
a	O	O:0.999880
`	O	O:0.999912
.	O	O:0.999461
	
I'd	O	O:0.999962
like	O	O:0.999943
it	O	O:0.999996
to	O	O:0.999996
be	O	O:1.000000
like	O	O:0.999986
8x10^8	O	O:0.998742
or	O	O:0.999993
.8x10	O	O:0.997427
^9	O	O:0.999910
to	O	O:0.999994
save	O	O:0.999960
space	O	O:0.999971
instead	O	O:0.999989
of	O	O:0.999998
putting	O	O:0.999101
all	O	O:0.999982
those	O	O:0.999917
zeros	O	O:0.592125
.	O	O:0.999848
	
The	O	O:0.999976
one	O	O:0.999971
I	O	O:0.999995
pointed	O	O:0.999944
out	O	O:0.999777
in	O	O:0.999998
a	O	O:0.999991
comment	O	O:0.999497
to	O	O:0.999996
other	O	O:0.999996
answer	O	O:0.999977
as	O	O:0.999991
to	O	O:0.999972
encode	O	O:0.977613
the	O	O:0.999993
binary	O	O:0.999900
representation	O	O:0.999907
of	O	O:0.999989
the	O	O:0.999992
array	O	O:0.999989
as	O	O:0.999994
a	O	O:0.999969
Base64	O	O:0.999728
text	O	O:0.999509
block	O	O:0.999478
.	O	O:0.999844
	
due	O	O:0.999635
to	O	O:0.999969
broadcasting	O	O:0.999979
,	O	O:0.999991
you	O	O:0.999976
don't	O	O:0.999992
need	O	O:0.999995
to	O	O:0.999999
repeat	O	O:0.999984
duplicate	O	O:0.999941
indices	O	O:0.999787
,	O	O:0.999997
thus	O	O:0.998268
:	O	O:0.999983
#CODE	O	O:0.999884
	
Maybe	O	O:0.999798
`	O	O:0.999974
flatten()	B-API	B-API:0.996820
`	O	O:0.999994
the	O	O:0.999975
original	O	O:0.999813
array	O	O:0.999965
,	O	O:0.999999
then	O	O:0.999834
use	O	O:0.999999
your	O	O:0.999865
1D	O	O:0.999821
solution	O	O:0.999939
,	O	O:0.999997
finally	O	O:0.999889
calculate	O	O:0.999301
the	O	O:0.999997
real	O	O:0.999401
nD	O	O:0.999972
indices	O	O:0.999663
using	O	O:0.999953
the	O	O:0.999976
original	O	O:0.996507
shape	O	O:0.999660
?	O	O:0.999913
	
Note	O	O:0.999939
that	O	O:0.999931
the	O	O:0.999997
diagonal	O	B-API:0.508324
is	O	O:0.999987
always	O	O:0.999944
zero	O	O:0.999881
since	O	O:0.999565
`	O	O:0.999974
mahalanobis	O	O:0.995790
(	O	O:0.999990
x	O	O:0.999787
,	O	O:0.999989
x	O	O:0.999956
)`	O	O:0.999938
equals	O	O:0.999927
zero	O	O:0.999391
for	O	O:0.999903
	
possible	O	O:0.999872
duplicate	O	O:0.999966
of	O	O:0.999910
[	O	O:0.999964
NumPy	O	O:0.999934
min	B-API	B-API:0.785754
/	O	O:0.999806
max	B-API	B-API:0.636236
in-place	O	O:0.999567
assignment	O	O:0.999582
]	O	O:0.999431
(	O	O:0.999860
#URL	O	O:0.999469
)	O	O:0.999917
	
Once	O	O:0.999769
the	O	O:0.999992
tree	O	O:0.999865
structure	O	O:0.999749
has	O	O:0.999977
been	O	O:0.999801
built	O	O:0.999900
,	O	O:0.999996
go	O	O:0.999969
back	O	O:0.999738
and	O	O:0.999997
collect	O	O:0.998294
all	O	O:0.999966
the	O	O:0.999971
branches	O	O:0.996616
and	O	O:0.999984
leaves	O	O:0.999806
into	O	O:0.998550
the	O	O:0.999962
array	O	O:0.999657
structure	O	O:0.999775
and	O	O:0.999994
by	O	O:0.999986
definition	O	O:0.999140
,	O	O:0.999992
they	O	O:0.999941
will	O	O:0.999946
be	O	O:0.999997
unique	O	O:0.861084
.	O	O:0.999275
	
I	O	O:0.999945
wrote	O	O:0.999909
the	O	O:0.999939
following	O	O:0.999619
code	O	O:0.999026
but	O	O:0.999990
the	O	O:0.999990
output	O	O:0.999904
only	O	O:0.999855
contains	O	O:0.999899
the	O	O:0.999973
ids	O	B-API:0.603005
(	O	O:0.999990
single	O	O:0.999970
column	O	O:0.999907
)	O	O:0.999978
.	O	O:0.999845
	
Maximum	O	O:0.995001
is	O	O:0.999985
always	O	O:0.999767
bigger	O	O:0.999886
than	O	O:0.999520
the	O	O:0.999957
minimum	O	O:0.997519
(	O	O:0.999995
more	O	O:0.999896
to	O	O:0.999995
the	O	O:1.000000
right	O	O:0.999934
on	O	O:0.999997
a	O	O:0.999996
1d	O	O:0.999928
axis	O	O:0.999478
,	O	O:0.999995
not	O	O:0.999994
by	O	O:0.999995
absolute	O	O:0.986392
value	O	O:0.999707
)	O	O:0.999958
.	O	O:0.999827
	
Note	O	O:0.999950
that	O	O:0.999808
`	O	O:0.999999
unq_count	O	O:0.977460
`	O	O:0.999995
doesn't	O	O:0.999811
count	O	O:0.999958
the	O	O:1.000000
occurrences	O	O:0.999715
of	O	O:0.999989
the	O	O:0.999996
last	O	O:0.999845
unique	O	O:0.907955
item	O	O:0.999535
,	O	O:0.999990
because	O	O:0.999986
that	O	O:0.998113
is	O	O:0.999998
not	O	O:0.999991
needed	O	O:0.999990
to	O	O:0.999997
split	O	O:0.999193
the	O	O:0.999967
index	O	O:0.999793
array	O	O:0.999894
.	O	O:0.999926
	
If	O	O:0.999957
yes	O	O:0.999844
,	O	O:0.999998
you	O	O:0.999992
can	O	O:0.999974
use	O	O:0.999998
the	O	O:0.999946
Linux	O	O:0.998836
terminal	O	O:0.999785
to	O	O:0.999995
strip	O	O:0.990645
quotes	O	O:0.999905
from	O	O:0.999958
the	O	O:0.999999
ends	O	O:0.999830
of	O	O:0.999998
the	O	O:0.999999
rows	O	O:0.999759
quickly	O	O:0.999191
.	O	O:0.999962
	
The	O	O:0.998516
append	B-API	B-API:0.791988
method	O	O:0.999839
for	O	O:0.999992
a	O	O:0.999993
numpy	O	O:0.998463
array	O	O:0.999958
returns	O	O:0.999923
a	O	O:0.999999
copy	O	O:0.984261
of	O	O:0.999996
the	O	O:0.999818
array	O	O:0.999976
with	O	O:0.999954
new	O	O:0.999978
items	O	O:0.999965
added	O	O:0.999821
to	O	O:0.999993
the	O	O:0.999998
end	O	O:0.999625
.	O	O:0.999886
	
I	O	O:0.999992
want	O	O:0.999985
to	O	O:0.999937
get	O	O:0.999998
the	O	O:0.999998
norm	B-API	O:0.542830
of	O	O:0.999997
this	O	O:0.999909
array	O	O:0.999995
using	O	O:0.999887
numpy	O	O:0.995136
.	O	O:0.999159
	
The	O	O:0.999986
only	O	O:0.999878
problem	O	O:0.999965
here	O	O:0.998725
is	O	O:0.999997
that	O	O:0.999761
I	O	O:0.999998
think	O	O:0.999954
it	O	O:0.999965
will	O	O:0.999984
append	O	O:0.969635
directly	O	O:0.999771
to	O	O:0.999987
the	O	O:0.999999
column	O	O:0.999903
,	O	O:0.999999
when	O	O:0.999926
I	O	O:0.999993
would	O	O:0.999997
prefer	O	O:0.999833
it	O	O:0.999999
to	O	O:0.999997
append	O	O:0.990625
to	O	O:0.999995
a	O	O:1.000000
new	O	O:0.999804
column	O	O:0.999730
.	O	O:0.999922
	
You	O	O:0.999850
don't	O	O:0.999962
need	O	O:0.999938
to	O	O:0.999987
import	O	O:0.999975
string	O	O:0.999566
,	O	O:0.999954
and	O	O:0.999995
you	O	O:0.999959
don't	O	O:0.999969
need	O	O:0.999979
to	O	O:0.999998
loop	O	O:0.999999
through	O	O:0.999759
all	O	O:0.999986
the	O	O:0.999981
lines	O	O:0.997841
and	O	O:0.999971
append	O	O:0.982827
text	O	O:0.999163
or	O	O:0.999994
count	O	O:0.999419
the	O	O:0.999995
characters	O	O:0.998287
.	O	O:0.999882
	
The	O	O:0.999989
transpose	O	O:0.897958
of	O	O:0.999993
the	O	O:0.999992
transpose	O	O:0.977094
of	O	O:0.999995
a	O	O:0.999969
matrix	O	O:0.998795
==	O	O:0.999942
that	O	O:0.999773
matrix	O	O:0.999980
,	O	O:0.999996
or	O	O:0.999989
,	O	O:0.999957
[	O	O:0.999991
A^T	O	O:0.999877
]	O	O:0.999860
^T	O	O:0.999550
==	O	O:0.999525
A	O	O:0.999903
.	O	O:0.999854
	
Currently	O	O:0.999838
I	O	O:0.999989
am	O	O:0.999998
looping	O	O:0.998780
through	O	O:0.999420
the	O	O:0.999891
arrays	O	O:0.999215
and	O	O:0.999995
using	O	O:0.999870
numpy.dstack	B-API	B-API:0.993830
to	O	O:0.999907
stack	O	O:0.962241
the	O	O:0.999982
1000	O	O:0.999392
arrays	O	O:0.999940
into	O	O:0.999964
a	O	O:0.999994
rather	O	O:0.999185
large	O	O:0.999466
3d	O	O:0.998284
array	O	O:0.999713
...	O	O:0.999548
and	O	O:0.999996
then	O	O:0.999972
will	O	O:0.999978
calculate	O	O:0.999939
the	O	O:0.999999
mean	O	O:0.999810
across	O	O:0.999885
the	O	O:0.999961
3rd	O	O:0.996787
(	O	O:0.999974
?	O	O:0.999989
)	O	O:0.999980
dimension	O	O:0.999622
.	O	O:0.999897
	
If	O	O:0.999967
you	O	O:0.999977
strip	O	O:0.777607
all	O	O:0.999991
these	O	O:0.999904
out	O	O:0.999727
and	O	O:0.999997
just	O	O:0.999915
call	O	O:0.998965
lapack	O	O:0.994282
in	O	O:0.999979
your	O	O:0.999827
for	O	O:0.999961
loop	O	O:0.997667
(	O	O:0.999978
since	O	O:0.999951
you	O	O:0.999971
already	O	O:0.999997
know	O	O:0.999974
the	O	O:0.999998
dimensions	O	O:0.999656
of	O	O:0.999994
your	O	O:0.999694
matrix	O	O:0.999823
and	O	O:0.999998
maybe	O	O:0.999968
know	O	O:0.999681
that	O	O:0.999701
it's	O	O:0.999964
real	O	O:0.997480
,	O	O:0.999986
not	O	O:0.999962
complex	O	O:0.999508
)	O	O:0.999994
,	O	O:0.999990
things	O	O:0.999733
run	O	O:0.999667
MUCH	O	O:0.999557
faster	O	O:0.995514
(	O	O:0.999930
Note	O	O:0.999956
that	O	O:0.999894
I've	O	O:0.999987
made	O	O:0.999947
my	O	O:0.999957
array	O	O:0.999962
larger	O	O:0.998005
)	O	O:0.999545
:	O	O:0.999829
#CODE	O	O:0.999816
	
First	O	O:0.999747
,	O	O:0.999994
you	O	O:0.999996
have	O	O:0.999984
a	O	O:0.999999
binomial	O	B-API:0.752759
response	O	O:0.998925
:	O	O:0.999974
having	O	O:0.999313
or	O	O:0.999981
not	O	O:0.999969
having	O	O:0.999975
a	O	O:0.999996
particular	O	O:0.998508
behavior	O	O:0.999593
.	O	O:0.999764
	
The	O	O:0.999961
call	O	O:0.997837
to	O	O:0.999974
`	O	O:0.999980
np.sqrt	B-API	B-API:0.996158
`	O	O:0.999995
,	O	O:0.999962
which	O	O:0.999914
is	O	O:0.999994
a	O	O:0.999990
Python	O	O:0.996012
function	O	O:0.999969
call	O	O:0.997309
,	O	O:0.999981
is	O	O:0.999868
killing	O	O:0.999594
your	O	O:0.999789
performance	O	O:0.999489
You	O	O:0.999981
are	O	O:0.999993
computing	O	O:0.999722
the	O	O:0.999970
square	O	O:0.999856
root	O	O:0.999867
of	O	O:0.999977
scalar	O	O:0.999947
floating	O	O:0.999923
point	O	O:0.999850
value	O	O:0.999940
,	O	O:0.999997
so	O	O:0.999994
you	O	O:0.999985
should	O	O:0.999979
use	O	O:0.999995
the	O	O:0.999943
`	O	O:0.999939
sqrt	B-API	B-API:0.983571
`	O	O:0.999989
function	O	O:0.999871
from	O	O:0.999986
the	O	O:0.999960
C	O	O:0.999716
math	O	O:0.999560
library	O	O:0.999322
.	O	O:0.999845
	
This	O	O:0.999586
would	O	O:0.999952
call	O	O:0.999845
the	O	O:0.999978
function	O	O:0.997134
`	O	O:0.999953
np.loadtxt	B-API	B-API:0.990778
`	O	O:0.999993
which	O	O:0.999053
would	O	O:0.999989
load	O	O:0.999736
the	O	O:0.999997
file	O	O:0.999248
`	O	O:0.999982
GPBUSD1d.txt	O	O:0.994846
'`	O	O:0.999956
and	O	O:0.999917
transpose	O	B-API:0.544180
(	O	O:0.999881
"	O	O:0.999975
unpack	O	O:0.962263
")	O	O:0.999800
it	O	O:0.999820
.	O	O:0.999913
	
You	O	O:0.999915
can't	O	O:0.999916
change	O	O:0.999585
the	O	O:0.999996
typing	O	O:0.999104
of	O	O:0.999975
the	O	O:0.999940
array	O	O:0.999775
in-place	O	O:0.994392
(	O	O:0.999962
unless	O	O:0.999813
I'm	O	O:0.999977
grossly	O	O:0.999900
mistaken	O	O:0.999544
)	O	O:0.999939
,	O	O:0.999965
but	O	O:0.999988
you	O	O:0.999955
can	O	O:0.999985
floor	B-API	O:0.947895
.	O	O:0.999916
	
Finally	O	O:0.999830
I	O	O:0.999996
just	O	O:0.999976
transpose	O	O:0.851534
the	O	O:0.999989
dataframe	O	O:0.998877
to	O	O:0.999994
get	O	O:0.999999
ids	O	O:0.996701
as	O	O:0.999999
rows	O	O:0.999505
and	O	O:0.999996
categories	O	O:0.999953
as	O	O:0.999980
columns	O	O:0.999483
.	O	O:0.999873
	
The	O	O:0.999942
following	O	O:0.999912
way	O	O:0.999969
of	O	O:0.999981
obtaining	O	O:0.999618
the	O	O:0.999987
unique	O	O:0.939019
elements	O	O:0.999414
in	O	O:0.999983
all	O	O:0.999991
sub-arrays	O	O:0.998103
is	O	O:0.999983
very	O	O:0.999375
fast	O	O:0.997129
:	O	O:0.999944
#CODE	O	O:0.999695
	
You	O	O:0.999931
can't	O	O:0.999749
use	O	O:0.999973
the	O	O:0.999970
numpy	O	O:0.999490
reshape	B-API	O:0.508907
for	O	O:0.999982
a	O	O:0.999990
simple	O	O:0.988631
reason	O	O:0.999448
:	O	O:0.999991
you	O	O:0.999999
have	O	O:0.999998
data	O	O:0.999998
duplicity	O	O:0.999877
in	O	O:0.999999
your	O	O:0.999967
original	O	O:0.999419
array	O	O:0.999623
(	O	O:0.999971
time	O	O:0.999884
and	O	O:0.999996
positions	O	O:0.999761
)	O	O:0.999688
and	O	O:0.999994
not	O	O:0.999961
in	O	O:0.999996
the	O	O:0.999986
result	O	O:0.999903
you	O	O:0.999980
want	O	O:0.999918
.	O	O:0.999944
	
So	O	O:0.999902
it	O	O:0.999969
does	O	O:0.999814
not	O	O:0.999994
make	O	O:0.999988
much	O	O:0.999915
sense	O	O:0.999970
to	O	O:0.999982
me	O	O:0.999998
to	O	O:0.999983
reshape	O	O:0.986336
it	O	O:0.999991
to	O	O:0.999999
a	O	O:0.999999
"	O	O:0.999948
1d-matrix	O	O:0.992419
"	O	O:0.999951
.	O	O:0.999688
	
Now	O	O:0.999914
create	O	O:0.999767
5-bit	O	O:0.999918
bitstrings	O	O:0.999959
from	O	O:0.999942
each	O	O:0.999598
integer	O	O:0.999320
and	O	O:0.999990
join	O	O:0.939149
them	O	O:0.998974
together	O	O:0.997559
:	O	O:0.999960
#CODE	O	O:0.999722
	
It	O	O:0.999811
would	O	O:0.999967
probably	O	O:0.999967
be	O	O:1.000000
just	O	O:0.999941
as	O	O:0.999997
much	O	O:0.999582
work	O	O:0.999950
to	O	O:0.999997
translate	O	O:0.998734
the	O	O:0.999991
top	O	O:0.999878
Matlab	O	O:0.999753
routine	O	O:0.999855
from	O	O:0.999844
Maurits	O	O:0.998496
.	O	O:0.999921
	
In	O	O:0.999937
the	O	O:0.999994
particular	O	O:0.999974
case	O	O:0.999966
of	O	O:0.999999
your	O	O:0.999898
example	O	O:0.999931
,	O	O:0.999998
where	O	O:0.999997
your	O	O:0.999979
unique	O	O:0.946290
values	O	O:0.999789
are	O	O:0.999991
sequential	O	O:0.999841
integers	O	O:0.999705
,	O	O:0.999996
you	O	O:0.999992
can	O	O:0.999977
use	O	O:0.999998
`	O	O:0.999979
find_objects	O	O:0.829321
`	O	O:0.999993
directly	O	O:0.996433
.	O	O:0.999923
	
axis=1	O	O:0.999390
refers	O	O:0.999164
to	O	O:0.999989
working	O	O:0.999997
on	O	O:0.999999
rows	O	O:0.999594
in	O	O:0.999998
this	O	O:0.999972
2d	O	O:0.999967
case	O	O:0.998816
(	O	O:0.999990
axis=0	O	O:0.999715
,	O	O:0.999967
in	O	O:0.999978
contrast	O	O:0.999617
,	O	O:0.999995
would	O	O:0.999953
be	O	O:0.999998
getting	O	O:0.999956
you	O	O:0.999885
the	O	O:0.999995
max	B-API	O:0.812799
in	O	O:0.999987
each	O	O:0.999968
column	O	O:0.999913
)	O	O:0.999980
	
There	O	O:0.999412
are	O	O:0.999994
many	O	O:0.999968
other	O	O:0.999642
`	O	O:0.999991
ufunc	O	O:0.885833
`	O	O:0.999982
,	O	O:0.999790
and	O	O:0.999998
other	O	O:0.999907
iteration	O	O:0.999644
modes	O	O:0.999766
-	O	O:0.999985
`	O	O:0.999994
accumulate	B-API	B-API:0.840560
`	O	O:0.999981
,	O	O:0.999834
`	O	O:0.999984
reduceat	B-API	B-API:0.996645
`	O	O:0.999980
.	O	O:0.999565
	
All	O	O:0.999879
diagonal	O	O:0.962609
elements	O	O:0.999876
will	O	O:0.999980
be	O	O:0.999999
of	O	O:0.999998
the	O	O:0.999939
form	O	O:0.999931
`	O	O:0.999979
s_i	O	O:0.999081
**	O	O:0.999991
2	O	O:0.999857
/	O	O:0.999958
s_i	O	O:0.998921
**	O	O:0.999962
2	O	O:0.999864
==	O	O:0.999857
1	O	O:0.999519
`	O	O:0.999950
.	O	O:0.999482
	
@USER	O	O:0.998558
In	O	O:0.999970
the	O	O:0.999992
example	O	O:0.999895
above	O	O:0.999954
,	O	O:0.999999
I	O	O:0.999995
get	O	O:0.999978
the	O	O:0.999981
following	O	O:0.999507
error	O	O:0.997398
:	O	O:0.999985
Non-broadcastable	O	O:0.999841
operand	O	O:0.999911
with	O	O:0.999804
shape	O	O:0.998009
(	O	O:0.999986
100	O	O:0.999761
)	O	O:0.999973
doesn't	O	O:0.999801
match	O	O:0.999895
the	O	O:0.999991
broadcast	B-API	O:0.997800
shape	O	O:0.998994
(	O	O:0.999983
100,100	O	O:0.999465
)	O	O:0.999921
	
is	O	O:0.999970
calculated	O	O:0.999257
such	O	O:0.999983
that	O	O:0.999925
all	O	O:0.999863
but	O	O:0.999985
the	O	O:0.999890
diagonal	O	O:0.606577
#CODE	O	O:0.999295
	
To	O	O:0.999940
compute	O	O:0.999445
the	O	O:0.999997
number	O	O:0.999904
of	O	O:0.999989
unique	O	O:0.984672
elements	O	O:0.999899
in	O	O:0.999993
a	O	O:0.999998
numpy	O	O:0.999712
array	O	O:0.999949
,	O	O:0.999995
you	O	O:0.999986
can	O	O:0.999976
use	O	O:0.999998
`	O	O:0.999976
unique	B-API	B-API:0.962902
(	O	O:0.999987
x	O	O:0.999711
)	O	O:0.999978
.size	O	B-API:0.964178
`	O	O:0.999982
or	O	O:0.999850
`	O	O:0.999965
len	B-API	B-API:0.989960
(	O	O:0.999980
unique	B-API	B-API:0.967867
(	O	O:0.999898
x	O	O:0.999854
))`	O	O:0.989438
(	O	O:0.999984
see	O	O:0.999870
`	O	O:0.999974
numpy.unique	B-API	B-API:0.989389
`	O	O:0.999984
)	O	O:0.999900
.	O	O:0.999892
	
Or	O	O:0.999847
would	O	O:0.999975
that	O	O:0.999998
basically	O	O:0.999998
require	O	O:0.999927
implementing	O	O:0.999671
the	O	O:0.999890
outer	O	O:0.874695
loop	O	O:0.999161
in	O	O:0.999952
Cython	O	O:0.999579
?	O	O:0.999963
	
For	O	O:0.999951
a	O	O:0.999956
tensor	O	O:0.999432
it	O	O:0.999695
is	O	O:0.999991
not	O	O:0.999967
clear	O	O:0.999903
how	O	O:0.999981
to	O	O:0.999995
define	O	O:0.999990
an	O	O:0.999994
inverse	O	O:0.999858
or	O	O:0.999996
a	O	O:0.999982
transpose	O	B-API:0.540062
.	O	O:0.999897
	
Second	O	O:0.999783
,	O	O:0.999991
you	O	O:0.999987
are	O	O:0.999997
doing	O	O:0.999981
transpose	B-API	O:0.827035
the	O	O:0.999962
hard	O	O:0.998184
way	O	O:0.999901
.	O	O:0.999867
	
Where	O	O:0.999770
does	O	O:0.998721
log	B-API	O:0.845600
(	O	O:0.999991
b	O	O:0.999950
,	O	O:0.999989
2	O	O:0.999893
)	O	O:0.999996
come	O	O:0.999670
from	O	O:0.999941
?	O	O:0.999932
	
(	O	O:0.999965
The	O	O:0.999995
values	O	O:0.999122
in	O	O:0.999994
the	O	O:0.999995
corners	O	O:0.999780
correspond	O	O:0.999833
to	O	O:0.999995
the	O	O:0.999999
diagonal	O	O:0.917119
elements	O	O:0.999813
.	O	O:0.999969
)	O	O:0.999987
	
I	O	O:0.999978
tried	O	O:0.999955
using	O	O:0.999393
the	O	O:0.999588
scipy.stat	O	O:0.975909
module	O	O:0.999947
by	O	O:0.999990
creating	O	O:0.999930
my	O	O:0.999928
numbers	O	O:0.999658
with	O	O:0.999803
`	O	O:0.999986
np.random.normal	B-API	B-API:0.998869
`	O	O:0.999988
,	O	O:0.999963
since	O	O:0.999976
it	O	O:0.999989
only	O	O:0.999995
takes	O	O:0.999982
data	O	O:0.999644
and	O	O:0.999987
not	O	O:0.999996
stat	O	O:0.997990
values	O	O:0.999898
like	O	O:0.999912
mean	O	O:0.999867
and	O	O:0.999991
std	O	O:0.998013
dev	O	O:0.994409
(	O	O:0.999597
is	O	O:0.999988
there	O	O:0.999943
any	O	O:0.999986
way	O	O:0.999966
to	O	O:0.999903
use	O	O:0.999999
these	O	O:0.999950
values	O	O:0.999825
directly	O	O:0.999626
)	O	O:0.999976
.	O	O:0.999591
	
The	O	O:0.999937
asymptotic	O	O:0.999893
complexity	O	O:0.999890
of	O	O:0.999998
both	O	O:0.999887
of	O	O:0.999997
the	O	O:0.999924
`	O	O:0.999956
matrix_rank	B-API	B-API:0.997633
`	O	O:0.999978
and	O	O:0.999877
`	O	O:0.999985
det	B-API	B-API:0.990738
`	O	O:0.999980
calls	O	O:0.997573
are	O	O:0.999999
therefore	O	O:0.998289
O	O	O:0.996914
(	O	O:0.999989
n^3	O	O:0.999601
)	O	O:0.999981
,	O	O:0.999992
the	O	O:0.999996
complexity	O	O:0.999759
of	O	O:0.999993
LU	O	O:0.999670
decomposition	O	O:0.999457
.	O	O:0.999789
	
I	O	O:0.999979
think	O	O:0.999975
the	O	O:0.999763
np.std()	B-API	B-API:0.999397
is	O	O:0.999966
just	O	O:0.999812
universal	O	O:0.999601
std	B-API	O:0.989993
.	O	O:0.999556
	
Golub	O	O:0.997729
and	O	O:0.999926
Van	O	O:0.999752
Loan	O	O:0.999719
also	O	O:0.999953
provide	O	O:0.999981
a	O	O:0.999993
way	O	O:0.999918
of	O	O:0.999992
storing	O	O:0.999552
a	O	O:0.999985
matrix	O	O:0.998277
in	O	O:0.999974
diagonal	O	O:0.967251
dominant	O	O:0.999451
form	O	O:0.999723
.	O	O:0.999821
	
I	O	O:0.999968
see	O	O:0.999985
no	O	O:0.999893
reason	O	O:0.999900
why	O	O:0.999958
`	O	O:0.999996
numpy	O	O:0.998160
`	O	O:0.999987
would	O	O:0.999926
need	O	O:0.999993
to	O	O:0.999999
make	O	O:0.999999
a	O	O:0.999999
copy	O	O:0.981842
for	O	O:0.999998
an	O	O:0.999736
operation	O	O:0.999839
like	O	O:0.999972
this	O	O:0.999986
,	O	O:0.999996
as	O	O:0.999999
long	O	O:0.999762
as	O	O:0.999985
it	O	O:0.999976
does	O	O:0.999915
the	O	O:0.999992
necessary	O	O:0.999959
checks	O	O:0.999653
for	O	O:0.999980
overlaps	O	O:0.990362
(	O	O:0.999987
though	O	O:0.999982
of	O	O:0.999997
course	O	O:0.999955
as	O	O:0.999999
others	O	O:0.999893
have	O	O:0.999928
noted	O	O:0.999929
,	O	O:0.999994
`	O	O:0.999981
resize	B-API	B-API:0.970496
`	O	O:0.999995
may	O	O:0.999971
itself	O	O:0.999991
have	O	O:0.999987
to	O	O:0.999996
allocate	O	O:0.999999
a	O	O:0.999996
new	O	O:0.999971
block	O	O:0.999908
of	O	O:0.999984
memory	O	O:0.999351
)	O	O:0.999980
.	O	O:0.999758
	
I	O	O:0.999983
found	O	O:0.999977
another	O	O:0.999764
stack	O	B-API:0.532503
question	O	O:0.999813
about	O	O:0.999980
this	O	O:0.999882
here	O	O:0.998513
,	O	O:0.999992
but	O	O:0.999982
I	O	O:0.999952
am	O	O:0.999995
not	O	O:0.999942
entirely	O	O:0.999976
sure	O	O:0.999754
how	O	O:0.999941
it	O	O:0.999973
was	O	O:0.999969
resolved	O	O:0.999760
,	O	O:0.999983
I'm	O	O:0.999987
still	O	O:0.999937
a	O	O:0.999998
little	O	O:0.997626
confused	O	O:0.998803
.	O	O:0.999859
	
Maybe	O	O:0.999450
`	O	O:0.999967
floor	B-API	B-API:0.967381
(	O	O:0.999832
arange	B-API	B-API:0.963995
(	O	O:0.999918
0	O	O:0.999872
,	O	O:0.999978
10	O	O:0.999759
,	O	O:0.999967
0.1	O	O:0.999015
))`	O	O:0.998506
?	O	O:0.999865
	
In	O	O:0.999931
python	O	O:0.999838
,	O	O:0.999995
I	O	O:0.999983
would	O	O:0.999997
like	O	O:0.999968
to	O	O:0.999999
convolve	O	O:0.953787
the	O	O:0.999992
two	O	O:0.999960
matrices	O	O:0.999952
along	O	O:0.999859
the	O	O:0.999948
second	O	O:0.999272
axis	O	O:0.999950
only	O	O:0.999762
.	O	O:0.999971
	
`	O	O:0.999981
view	B-API	O:0.947917
`	O	O:0.999990
is	O	O:0.999937
basically	O	O:0.999965
taking	O	O:0.999961
your	O	O:0.999748
two	O	O:0.999985
coordinates	O	O:0.999952
as	O	O:0.999999
a	O	O:0.999997
single	O	O:0.999368
variable	O	O:0.999985
that	O	O:0.999897
can	O	O:0.999993
be	O	O:1.000000
used	O	O:0.999980
to	O	O:0.999970
find	O	O:0.999990
the	O	O:0.999996
unique	O	O:0.815250
coordinates	O	O:0.997394
.	O	O:0.999896
	
Keep	O	O:0.998776
in	O	O:0.999969
mind	O	O:0.999944
that	O	O:0.999944
machine	O	O:0.999986
precision	O	O:0.999951
for	O	O:0.999997
a	O	O:0.999987
32-bit	O	O:0.995152
double	O	O:0.968517
is	O	O:0.999846
~	O	O:0.998742
10^-16	O	O:0.999542
,	O	O:0.999963
which	O	O:0.999928
will	O	O:0.999952
be	O	O:0.999999
an	O	O:0.999997
absolute	O	O:0.935038
limiting	O	O:0.998498
factor	O	O:0.992157
.	O	O:0.999762
	
Also	O	O:0.999769
,	O	O:0.999994
if	O	O:0.999995
there	O	O:0.999789
is	O	O:0.999999
then	O	O:0.999763
I	O	O:0.999999
could	O	O:0.999999
just	O	O:0.999963
append	O	O:0.920453
to	O	O:0.999947
the	O	O:0.999997
b	O	O:0.999833
and	O	O:0.999991
c	O	O:0.999959
arrays	O	O:0.999863
each	O	O:0.999755
time	O	O:0.999965
instead	O	O:0.999986
of	O	O:0.999996
overwriting	O	O:0.998484
and	O	O:0.999995
starting	O	O:0.999974
from	O	O:0.999637
scratch	O	O:0.999808
each	O	O:0.999747
loop	O	O:0.999353
.	O	O:0.999895
	
Use	O	O:0.999504
`	O	O:0.999899
multiprocessing.Process	O	B-API:0.570485
(	O	O:0.999995
target	O	O:0.999832
=	O	O:0.999925
somefunc	O	O:0.991303
,	O	O:0.999989
args	O	O:0.998217
=	O	O:0.997112
(	O	O:0.999978
sa	O	O:0.999775
,	O	O:0.999963
)`	O	O:0.995363
(	O	O:0.999874
and	O	O:0.999991
`	O	O:0.999994
start	O	O:0.981488
`	O	O:0.999997
,	O	O:0.999988
maybe	O	O:0.999968
`	O	O:0.999997
join	B-API	B-API:0.933475
`)	O	O:0.999996
to	O	O:0.999984
call	O	O:0.999936
`	O	O:0.999992
somefunc	O	B-API:0.515193
`	O	O:0.999995
in	O	O:0.999980
a	O	O:0.999999
separate	O	O:0.999745
process	O	O:0.999322
,	O	O:0.999997
passing	O	O:0.999657
the	O	O:0.999881
shared	O	O:0.998709
array	O	O:0.999864
.	O	O:0.999773
	
Take	O	O:0.999937
a	O	O:0.999994
look	O	O:0.999687
a	O	O:0.999997
the	O	O:0.999920
concatenate	B-API	B-API:0.954552
function	O	O:0.999687
.	O	O:0.999895
	
Unlike	O	O:0.998868
Joe	O	O:0.999931
Kington's	O	O:0.999776
answer	O	O:0.999741
,	O	O:0.999985
the	O	O:0.999987
benefit	O	O:0.999720
of	O	O:0.999997
this	O	O:0.999337
is	O	O:0.999999
that	O	O:0.999857
you	O	O:0.999992
don't	O	O:0.999996
need	O	O:0.999987
to	O	O:0.999998
know	O	O:0.999998
the	O	O:0.999998
original	O	O:0.999883
shape	O	O:0.999966
of	O	O:0.999998
the	O	O:0.999999
data	O	O:0.999951
in	O	O:0.999994
the	O	O:0.999980
`	O	O:0.999988
.mat	O	B-API:0.981501
`	O	O:0.999997
file	O	O:0.999376
,	O	O:0.999996
i.e.	O	O:0.999911
no	O	O:0.999992
need	O	O:0.999953
to	O	O:0.999996
reshape	O	O:0.993481
upon	O	O:0.999762
reading	O	O:0.998642
in	O	O:0.999883
.	O	O:0.999888
	
but	O	O:0.999874
I	O	O:0.999995
think	O	O:0.999965
,	O	O:0.999973
finding	O	O:0.999533
the	O	O:0.999839
local	O	O:0.999540
max	O	O:0.834171
can	O	O:0.999851
be	O	O:1.000000
simplified	O	O:0.999850
to	O	O:0.999595
:	O	O:0.999997
#CODE	O	O:0.999821
	
@USER	O	O:0.999017
`	O	O:0.999967
swapaxes	B-API	B-API:0.993967
`	O	O:0.999985
seemed	O	O:0.999338
to	O	O:0.999992
be	O	O:0.999999
indistinguishable	O	O:0.999928
from	O	O:0.999529
`	O	O:0.999979
transpose	B-API	B-API:0.527776
(	O	O:0.999993
0	O	O:0.999946
,	O	O:0.999972
2	O	O:0.999910
,	O	O:0.999971
1	O	O:0.999935
)`	O	O:0.999676
.	O	O:0.999709
	
Do	O	O:0.999932
gradient	B-API	O:0.981579
actually	O	O:0.999948
compute	O	O:0.999659
really	O	O:0.999968
a	O	O:0.999983
gradient	O	B-API:0.560938
?	O	O:0.999911
	
I	O	O:0.999911
would	O	O:0.999981
suggest	O	O:0.999666
to	O	O:0.999998
first	O	O:0.999976
program	O	O:0.999914
it	O	O:0.999989
with	O	O:0.999970
`	O	O:0.999913
np.nditer	B-API	B-API:0.995916
`	O	O:0.999971
and	O	O:0.999993
then	O	O:0.999954
translate	O	O:0.970372
it	O	O:0.999998
into	O	O:0.999616
C	O	O:0.999678
.	O	O:0.999570
	
As	O	O:0.999979
you	O	O:0.999978
can	O	O:0.999994
see	O	O:1.000000
,	O	O:0.999999
using	O	O:0.999981
the	O	O:0.999945
join	B-API	B-API:0.979955
function	O	O:0.999921
on	O	O:0.999976
the	O	O:0.999984
list	O	O:0.992299
(	O	O:0.999909
`	O	O:0.999997
binary_list	O	O:0.978956
`)	O	O:0.999994
works	O	O:0.999835
properly	O	O:0.999842
,	O	O:0.999994
but	O	O:0.999985
on	O	O:0.999991
the	O	O:0.999993
equivalent	O	O:0.999872
numpy	O	O:0.999746
array	O	O:0.999545
(	O	O:0.999861
`	O	O:0.999995
binary_split_array	O	O:0.989996
`)	O	O:0.999987
it	O	O:0.999720
doesn't	O	O:0.999796
:	O	O:0.999998
we	O	O:0.999998
can	O	O:0.999987
see	O	O:0.999999
the	O	O:0.999994
string	O	O:0.999835
returned	O	O:0.998244
is	O	O:0.999996
only	O	O:0.999833
72	O	O:0.999977
characters	O	O:0.999891
long	O	O:0.999874
instead	O	O:0.999988
of	O	O:0.999956
80	O	O:0.999513
.	O	O:0.999895
	
@USER	O	O:0.998682
.B	O	O:0.998784
.	O	O:0.999980
the	O	O:0.999993
above	O	O:0.999780
question	O	O:0.999218
is	O	O:0.999991
significantly	O	O:0.999877
different	O	O:0.999950
from	O	O:0.999867
mine	O	O:0.998991
;	O	O:0.999990
it	O	O:0.999983
asks	O	O:0.999748
for	O	O:0.999982
both	O	O:0.998289
min	B-API	B-API:0.707470
and	O	O:0.999932
max	B-API	B-API:0.506535
,	O	O:0.999534
and	O	O:0.999989
it	O	O:0.999929
is	O	O:0.999956
for	O	O:0.999904
2D	O	O:0.999261
matrix	O	O:0.996755
	
This	O	O:0.999898
will	O	O:0.999926
join	O	O:0.843100
the	O	O:0.999998
rows	O	O:0.999148
and	O	O:0.999989
write	O	O:0.999999
them	O	O:0.999596
to	O	O:0.999999
a	O	O:1.000000
new	O	O:0.999239
csv	O	O:0.998424
:	O	O:0.999966
#CODE	O	O:0.999722
	
The	O	O:0.999947
reason	O	O:0.999813
I	O	O:0.999998
have	O	O:0.999966
`	O	O:0.999947
-det	O	O:0.989173
(	O	O:0.999994
mat	O	O:0.971923
)`	O	O:0.999794
in	O	O:0.999966
the	O	O:0.999988
energy	O	O:0.999156
function	O	O:0.999686
is	O	O:0.999988
because	O	O:0.999941
the	O	O:0.999984
simulated	O	O:0.999928
annealing	O	O:0.999460
algorithm	O	O:0.999905
does	O	O:0.998788
minimization	O	O:0.999709
.	O	O:0.999963
	
Also	O	O:0.999037
is	O	O:0.999959
`	O	O:0.999979
x	O	O:0.998087
`	O	O:0.999992
unique	O	B-API:0.576036
?	O	O:0.999933
	
Pandas	O	O:0.999590
append	B-API	O:0.761470
filtered	O	O:0.999437
row	O	O:0.999978
to	O	O:0.999982
another	O	O:0.999991
DataFrame	O	O:0.993803
	
Again	O	O:0.999598
,	O	O:0.999996
the	O	O:0.999996
code	O	O:0.999435
notes	O	O:0.999981
that	O	O:0.999993
set	O	O:0.999996
of	O	O:0.999997
combinations	O	O:0.986096
is	O	O:0.999991
not	O	O:0.999969
unique	O	O:0.641341
;	O	O:0.999879
but	O	O:0.999840
it	O	O:0.999998
does	O	O:0.999977
have	O	O:0.999994
a	O	O:0.999999
unique	O	O:0.870880
subset	O	O:0.998728
,	O	O:0.999991
namely	O	O:0.999838
[[	O	O:0.999970
2	O	O:0.999951
3	O	O:0.999933
]	O	O:0.999951
,	O	O:0.999966
[	O	O:0.999987
0	O	O:0.999946
1	O	O:0.999883
]]	O	O:0.999952
,	O	O:0.999978
which	O	O:0.999980
as	O	O:0.999991
you	O	O:0.999991
just	O	O:0.999956
revealed	O	O:0.999970
,	O	O:0.999994
you	O	O:0.999992
do	O	O:0.999991
consider	O	O:0.999974
a	O	O:0.999994
valid	O	O:0.997987
combination	O	O:0.999728
.	O	O:0.999906
	
That	O	O:0.999921
concatenate	B-API	O:0.625664
action	O	O:0.999805
should	O	O:0.999925
be	O	O:0.999996
pretty	O	O:0.999906
fast	O	O:0.997329
.	O	O:0.999813
	
If	O	O:0.999965
you	O	O:0.999990
want	O	O:0.999987
to	O	O:0.999999
pass	O	O:0.999948
in	O	O:0.999989
the	O	O:0.999994
transpose	O	O:0.835532
,	O	O:0.999991
you'll	O	O:0.999960
need	O	O:0.999978
to	O	O:0.999999
set	O	O:0.999993
`	O	O:0.999995
rowvar	O	O:0.922628
`	O	O:0.999996
to	O	O:0.999912
zero	O	O:0.999939
.	O	O:0.999926
	
You	O	O:0.999891
can	O	O:0.999928
override	O	O:0.999992
this	O	O:0.999988
behavior	O	O:0.999992
by	O	O:0.999989
using	O	O:0.999836
the	O	O:0.999742
arguments	O	O:0.995571
`	O	O:0.999980
vmin	O	O:0.836026
`	O	O:0.999994
and	O	O:0.999735
`	O	O:0.999994
vmax	O	B-API:0.668098
`	O	O:0.999963
(	O	O:0.999914
or	O	O:0.999986
`	O	O:0.999993
norm	O	B-API:0.542339
`)	O	O:0.999998
of	O	O:0.999956
`	O	O:0.999883
imshow	B-API	B-API:0.993163
`	O	O:0.999971
.	O	O:0.999122
	
@USER	O	O:0.999229
,	O	O:0.999960
`	O	O:0.999989
cs	O	O:0.992988
`	O	O:0.999987
is	O	O:0.999883
sorted	O	O:0.998955
and	O	O:0.999981
`	O	O:0.999955
searchsorted()	B-API	B-API:0.999679
`	O	O:0.999978
exploits	O	O:0.999764
that	O	O:0.999980
to	O	O:0.999998
do	O	O:1.000000
a	O	O:0.999998
binary	O	O:0.997871
search	O	O:0.999547
-	O	O:0.999997
only	O	O:0.999939
`	O	O:0.999980
O	O	O:0.954867
(	O	O:0.999957
log	B-API	O:0.611334
(	O	O:0.999675
len	B-API	B-API:0.954623
(	O	O:0.999977
weights	O	O:0.999691
)))`	O	O:0.998711
comparisons	O	O:0.999561
are	O	O:0.999974
needed	O	O:0.999852
.	O	O:0.999912
	
Think	O	O:0.999369
`	O	O:0.999984
flatten	B-API	B-API:0.944426
`	O	O:0.999984
without	O	O:0.999007
the	O	O:0.999984
copy	O	O:0.888811
.	O	O:0.999901
	
In	O	O:0.999989
your	O	O:0.999915
case	O	O:0.999844
it	O	O:0.999998
looks	O	O:0.999971
like	O	O:0.999960
the	O	O:0.999979
weight	O	O:0.999741
arrays	O	O:0.999871
will	O	O:0.999975
have	O	O:0.999989
the	O	O:0.999999
same	O	O:0.999980
dimension	O	O:0.999952
as	O	O:0.999988
'	O	O:0.999917
A	O	O:0.999962
'	O	O:0.999978
,	O	O:0.999995
so	O	O:0.999995
you	O	O:0.999971
reshape	O	O:0.997036
them	O	O:0.999934
accordingly	O	O:0.999814
and	O	O:0.999996
multiply	O	O:0.997714
dx	O	O:0.998512
and	O	O:0.999992
dy	O	O:0.999972
by	O	O:0.999925
their	O	O:0.999834
individual	O	O:0.997611
weight	O	O:0.999667
vectors	O	O:0.996829
.	O	O:0.999907
	
Does	O	O:0.999859
this	O	O:0.999968
mean	O	O:0.999892
the	O	O:0.999998
standard	O	O:0.999930
error	O	O:0.999909
of	O	O:0.999990
the	O	O:0.999979
gradient	O	O:0.892569
or	O	O:0.999944
intercept	O	O:0.999807
?	O	O:0.999980
	
Also	O	O:0.999704
,	O	O:0.999997
the	O	O:0.999983
algo	O	O:0.999488
has	O	O:0.999990
a	O	O:0.999997
lot	O	O:0.999917
of	O	O:0.999981
matrices	O	O:0.997790
manipulation	O	O:0.999303
(	O	O:0.999986
fft	B-API	O:0.674310
,	O	O:0.999982
filters	O	O:0.998311
,	O	O:0.999982
etc	O	O:0.999981
.	O	O:0.999987
)	O	O:0.999996
,	O	O:0.999997
so	O	O:0.999996
using	O	O:0.999958
numpy	O	O:0.998641
/	O	O:0.999877
scipy	O	O:0.999717
should	O	O:0.999853
result	O	O:0.999958
in	O	O:0.999991
faster	O	O:0.999437
run	O	O:0.999733
time	O	O:0.999761
.	O	O:0.999908
	
You	O	O:0.999885
can	O	O:0.999949
broadcast	O	O:0.999987
that	O	O:0.999992
into	O	O:0.999930
an	O	O:0.999997
array	O	O:0.999973
using	O	O:0.999874
expressions	O	O:0.998561
,	O	O:0.999933
for	O	O:0.999961
example	O	O:0.997522
#CODE	O	O:0.999296
	
If	O	O:0.999983
I	O	O:0.999983
use	O	O:0.999991
the	O	O:0.999611
above	O	O:0.999909
test	O	O:0.999226
on	O	O:0.999996
the	O	O:0.999999
absolute	O	O:0.994855
values	O	O:0.999824
of	O	O:0.999996
the	O	O:0.999993
angles	O	O:0.999810
to	O	O:0.999985
be	O	O:0.999999
tested	O	O:0.999811
,	O	O:0.999995
everything	O	O:0.999680
	
The	O	O:0.999930
returned	O	O:0.999371
gradient	O	O:0.848993
hence	O	O:0.999558
has	O	O:0.999758
	
"	O	O:0.999887
In	O	O:0.999970
the	O	O:0.999994
first	O	O:0.999837
case	O	O:0.999940
the	O	O:0.999989
gradient	O	O:0.684162
is	O	O:0.999947
1	O	O:0.999851
mV	O	O:0.999953
/	O	O:0.999979
ms	O	O:0.999947
,	O	O:0.999983
in	O	O:0.999992
the	O	O:0.999974
second	O	O:0.999682
case	O	O:0.999932
it	O	O:0.999976
is	O	O:0.999985
50	O	O:0.999664
mV	O	O:0.999883
/	O	O:0.999936
ms	O	O:0.999613
.	O	O:0.999828
	
If	O	O:0.999949
True	O	O:0.999297
,	O	O:0.999992
uses	O	O:0.999509
the	O	O:0.999964
old	O	O:0.999861
behavior	O	O:0.999903
from	O	O:0.999817
Numeric	O	O:0.993232
,	O	O:0.999960
(	O	O:0.999941
correlate	B-API	B-API:0.780092
(	O	O:0.999995
a	O	O:0.999995
,	O	O:0.999981
v	O	O:0.999923
)	O	O:0.999974
==	O	O:0.999779
correlate	B-API	B-API:0.757113
(	O	O:0.999973
v	O	O:0.999951
,	O	O:0.999998
a	O	O:0.999990
)	O	O:0.999930
,	O	O:0.999962
and	O	O:0.999996
the	O	O:0.999981
conjugate	O	O:0.953769
is	O	O:0.999979
not	O	O:0.999985
taken	O	O:0.999677
for	O	O:0.999985
complex	O	O:0.997817
arrays	O	O:0.999299
)	O	O:0.999919
.	O	O:0.999739
	
Why	O	O:0.999903
don't	O	O:0.999905
you	O	O:0.999996
just	O	O:0.999988
compress	O	O:0.987653
the	O	O:0.999996
files	O	O:0.999719
with	O	O:0.999915
the	O	O:0.999989
built-in	O	O:0.998827
`	O	O:0.999984
gzip	O	O:0.547653
`	O	O:0.999990
module	O	O:0.999057
?	O	O:0.999966
	
So	O	O:0.999969
you	O	O:0.999994
need	O	O:0.999989
to	O	O:0.999998
write	O	O:0.999999
some	O	O:0.999444
function	O	O:0.999995
that	O	O:0.999974
convert	O	O:0.999825
a	O	O:0.999999
poly	O	B-API:0.797181
parameters	O	O:0.999586
array	O	O:0.999973
to	O	O:0.999997
a	O	O:0.999999
latex	O	O:0.998052
string	O	O:0.999774
,	O	O:0.999987
here	O	O:0.999285
is	O	O:0.999990
an	O	O:0.999944
example	O	O:0.998718
:	O	O:0.999941
#CODE	O	O:0.999849
	
In	O	O:0.999994
your	O	O:0.999945
example	O	O:0.999834
,	O	O:0.999998
the	O	O:0.999993
square	O	O:0.999273
root	O	O:0.999105
is	O	O:0.999996
calculated	O	O:0.999884
by	O	O:0.999993
evaluating	O	O:0.999588
the	O	O:0.999825
the	O	O:0.999931
module	O	O:0.999334
and	O	O:0.999993
the	O	O:0.999996
argument	O	O:0.999812
of	O	O:0.999996
your	O	O:0.999876
complex	O	O:0.999141
number	O	O:0.999647
(	O	O:0.999989
essentially	O	O:0.999982
via	O	O:0.999917
the	O	O:0.999929
log	B-API	O:0.676326
function	O	O:0.999914
,	O	O:0.999984
which	O	O:0.999939
returns	O	O:0.998469
log	B-API	O:0.645186
(	O	O:0.999972
module	O	O:0.999837
)	O	O:0.999936
+	O	O:0.999938
i	O	O:0.999981
phase	O	O:0.999783
)	O	O:0.999896
.	O	O:0.999843
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999650
to	O	O:0.999989
run	O	O:0.999941
hstack	B-API	B-API:0.567925
to	O	O:0.999997
join	O	O:0.988490
a	O	O:0.999999
column	O	O:0.999908
of	O	O:0.999997
integer	O	O:0.999695
values	O	O:0.999895
to	O	O:0.999985
a	O	O:1.000000
list	O	O:0.999247
of	O	O:0.999997
columns	O	O:0.999964
created	O	O:0.999980
by	O	O:0.999996
a	O	O:0.999969
TF-IDF	O	O:0.967270
(	O	O:0.999993
so	O	O:0.999992
I	O	O:0.999994
can	O	O:0.999998
eventually	O	O:0.999959
use	O	O:0.999997
all	O	O:0.999814
of	O	O:0.999990
these	O	O:0.999945
columns	O	O:0.999961
/	O	O:0.999995
features	O	O:0.999445
in	O	O:0.999996
a	O	O:0.999997
classifier	O	O:0.998867
)	O	O:0.999972
.	O	O:0.999820
	
How	O	O:0.999875
to	O	O:0.999991
pass	O	O:0.999952
these	O	O:0.999668
`	O	O:0.999994
norm	O	B-API:0.983300
`	O	O:0.999979
and	O	O:0.999609
`	O	O:0.999997
cmap	O	O:0.629107
`	O	O:0.999998
parameters	O	O:0.986146
in	O	O:0.999996
matplotlib	O	O:0.999929
to	O	O:0.999971
`	O	O:0.999997
plt.show	B-API	B-API:0.987484
`	O	O:0.999995
or	O	O:0.999883
`	O	O:0.999978
imshow()	B-API	B-API:0.998839
`	O	O:0.999973
?	O	O:0.999752
	
Forget	O	O:0.999670
about	O	O:0.999933
the	O	O:0.999941
C	O	O:0.999469
stack	O	B-API:0.657231
,	O	O:0.999984
numpy	O	O:0.999924
objects	O	O:0.999511
can't	O	O:0.999549
use	O	O:0.999972
it	O	O:0.999827
.	O	O:0.999811
	
You	O	O:0.999951
can	O	O:0.999928
use	O	O:0.999998
the	O	O:0.999958
append	B-API	B-API:0.928086
function	O	O:0.999817
as	O	O:0.999942
he	O	O:0.999865
has	O	O:0.999867
defined	O	O:0.998190
.	O	O:0.999788
	
This	O	O:0.999776
can	O	O:0.999969
be	O	O:1.000000
particularly	O	O:0.999971
tricky	O	O:0.999791
when	O	O:0.999894
trying	O	O:0.999966
to	O	O:0.999998
append	O	O:0.969518
to	O	O:0.999992
a	O	O:1.000000
numpy	O	O:0.999878
array	O	O:0.999943
quickly	O	O:0.999244
.	O	O:0.999791
	
I	O	O:0.999992
have	O	O:0.999995
a	O	O:0.999991
question	O	O:0.999885
regarding	O	O:0.999823
to	O	O:0.999982
the	O	O:0.999996
`	O	O:0.999962
fft	B-API	B-API:0.971188
`	O	O:0.999980
and	O	O:0.999710
`	O	O:0.999989
ifft	B-API	B-API:0.997588
`	O	O:0.999975
functions	O	O:0.997870
.	O	O:0.999909
	
So	O	O:0.999965
for	O	O:0.999982
now	O	O:0.999922
,	O	O:0.999988
I	O	O:0.999999
just	O	O:0.999950
changed	O	O:0.999576
the	O	O:0.999906
max	B-API	B-API:0.832819
(	O	O:0.999977
z	O	O:0.999969
)	O	O:0.999996
to	O	O:0.999998
a	O	O:0.999999
number	O	O:0.999890
that	O	O:0.999951
I	O	O:1.000000
know	O	O:0.999783
is	O	O:0.999937
the	O	O:0.999668
max	B-API	B-API:0.917994
(	O	O:0.999963
1567	O	O:0.999121
)	O	O:0.999966
.	O	O:0.999757
	
The	O	O:0.999860
`	O	O:0.999986
add	B-API	O:0.998388
`	O	O:0.999988
operation	O	O:0.998339
does	O	O:0.999947
not	O	O:0.999989
do	O	O:0.999995
the	O	O:0.999995
same	O	O:0.999952
thing	O	O:0.999965
as	O	O:0.999990
`	O	O:0.999983
join	B-API	B-API:0.996581
`	O	O:0.999977
.	O	O:0.999514
	
You	O	O:0.999910
don't	O	O:0.999961
specify	O	O:0.998288
`	O	O:0.999992
x	O	O:0.998666
`	O	O:0.999996
or	O	O:0.999890
`	O	O:0.999995
y	O	O:0.999189
`	O	O:0.999989
,	O	O:0.999904
and	O	O:1.000000
your	O	O:0.999656
`	O	O:0.999900
mat	O	B-API:0.621716
[:	O	O:0.999977
,	O	O:0.999963
i+1	O	O:0.998945
]`	O	O:0.999827
indexing	O	O:0.997454
will	O	O:0.999844
not	O	O:0.999994
work	O	O:0.999987
with	O	O:0.999993
a	O	O:0.999995
structured	O	O:0.998744
array	O	O:0.999815
.	O	O:0.999783
	
This	O	O:0.998723
is	O	O:0.999992
because	O	O:0.999826
in	O	O:0.999997
some	O	O:0.999949
cases	O	O:0.998661
it's	O	O:0.999804
not	O	O:0.999984
just	O	O:0.999932
NaNs	O	O:0.999922
and	O	O:0.999978
1s	O	O:0.999920
,	O	O:0.999890
but	O	O:0.999993
other	O	O:0.999874
integers	O	O:0.999828
,	O	O:0.999973
which	O	O:0.999959
gives	O	O:0.999945
a	O	O:0.999993
std	O	O:0.992934
>	O	O:0.999900
0	O	O:0.999671
.	O	O:0.999797
	
You	O	O:0.999902
could	O	O:0.999969
check	O	O:0.999953
whether	O	O:0.999992
this	O	O:0.999301
is	O	O:0.999991
the	O	O:0.999975
case	O	O:0.999735
,	O	O:0.999994
and	O	O:0.999995
append	O	O:0.756543
to	O	O:0.999982
your	O	O:0.999997
sample	O	O:0.999643
in	O	O:0.999998
a	O	O:0.999996
loop	O	O:0.999639
if	O	O:0.999985
necessary	O	O:0.999863
.	O	O:0.999909
	
The	O	O:0.999944
above	O	O:0.999685
code	O	O:0.999537
works	O	O:0.999691
,	O	O:0.999981
but	O	O:0.999915
would	O	O:0.999955
be	O	O:0.999998
better	O	O:0.999992
to	O	O:0.999960
append	O	O:0.956994
the	O	O:0.999942
data_array	O	O:0.998213
retrieved	O	O:0.999932
from	O	O:0.999768
for	O	O:0.999998
loop	O	O:0.999934
directly	O	O:0.999776
into	O	O:0.999614
the	O	O:0.999981
numpy	O	O:0.999821
array	O	O:0.999906
rather	O	O:0.999966
than	O	O:0.999917
using	O	O:0.999783
python	O	O:0.998036
list	O	O:0.987620
.	O	O:0.999772
	
If	O	O:0.999960
you	O	O:0.999990
want	O	O:0.999985
an	O	O:0.999992
intersection	O	O:0.938741
between	O	O:0.999602
the	O	O:0.999979
two	O	O:0.999952
arrays	O	O:0.999957
you	O	O:0.999956
can	O	O:0.999992
loop	O	O:0.999995
;	O	O:0.999993
for	O	O:0.999984
i	O	O:0.999978
data	O	O:0.999435
:	O	O:0.999975
and	O	O:0.999997
get	O	O:0.999980
i	O	O:0.999972
from	O	O:0.999979
first	O	O:0.999714
array	O	O:0.999944
,	O	O:0.999935
and	O	O:0.999990
i	O	O:0.999983
from	O	O:0.999652
second	O	O:0.999583
array.But	O	O:0.995079
I'm	O	O:0.999928
not	O	O:0.999992
sure	O	O:0.999968
if	O	O:0.999987
I	O	O:0.999982
follow	O	O:0.999959
it	O	O:0.999966
correctly	O	O:0.999974
,	O	O:0.999999
you	O	O:0.999993
have	O	O:0.999998
some	O	O:0.999999
data	O	O:0.999956
which	O	O:0.999980
has	O	O:0.999989
0	O	O:0.999995
occurences	O	O:0.999671
in	O	O:0.999995
some	O	O:0.999998
columns	O	O:0.999975
of	O	O:0.999999
your	O	O:0.999925
array	O	O:0.999977
,	O	O:0.999998
if	O	O:0.999997
you	O	O:0.999979
append	O	O:0.842352
the	O	O:0.999995
other	O	O:0.999929
values	O	O:0.999857
to	O	O:0.999998
a	O	O:1.000000
new	O	O:0.999696
array	O	O:0.999963
the	O	O:0.999991
memory	O	O:0.999895
of	O	O:0.999997
where	O	O:0.999888
in	O	O:0.999999
the	O	O:0.999998
data	O	O:0.999986
those	O	O:0.999975
values	O	O:0.999961
came	O	O:0.999933
from	O	O:0.999909
is	O	O:0.999987
already	O	O:0.999941
automatically	O	O:0.999824
stored	O	O:0.996318
.	O	O:0.999572
	
(	O	O:0.999943
2	O	O:0.999910
)	O	O:0.999978
Collect	O	O:0.999825
the	O	O:0.999998
parts	O	O:0.999679
of	O	O:0.999990
the	O	O:0.999985
SQL	O	O:0.999618
command	O	O:0.999674
in	O	O:0.999986
a	O	O:0.999990
list	O	O:0.994579
and	O	O:0.999996
do	O	O:0.999994
a	O	O:0.999964
`	O	O:0.999871
str.join	B-API	B-API:0.994760
`	O	O:0.999990
in	O	O:0.999960
the	O	O:0.999996
end	O	O:0.999898
,	O	O:0.999991
to	O	O:0.999985
avoid	O	O:0.999991
allocating	O	O:0.999849
an	O	O:0.999895
increasingly	O	O:0.999893
long	O	O:0.999683
string	O	O:0.999780
each	O	O:0.999529
time	O	O:0.999582
(	O	O:0.999992
you	O	O:0.999981
can't	O	O:0.999985
really	O	O:0.999988
append	O	O:0.905935
to	O	O:0.999989
a	O	O:1.000000
string	O	O:0.998340
in	O	O:0.999987
Python	O	O:0.999899
as	O	O:0.999998
they	O	O:0.999484
are	O	O:0.999996
immutable	O	O:0.999525
)	O	O:0.999954
.	O	O:0.999755
	
append	O	B-API:0.754979
C	O	O:0.998694
:\	O	O:0.999974
libav\usr\bin\	O	O:0.995552
to	O	O:0.999987
the	O	O:0.999994
'	O	O:0.999882
Path	O	B-API:0.871155
'	O	O:0.999960
environment	O	O:0.999912
variable	O	O:0.999792
	
How	O	O:0.999932
to	O	O:0.999990
efficiently	O	O:0.999997
join	O	B-API:0.619665
a	O	O:0.999997
list	O	O:0.999620
of	O	O:0.999995
values	O	O:0.999692
to	O	O:0.999996
a	O	O:1.000000
list	O	O:0.998944
of	O	O:0.999989
intervals	O	O:0.999260
?	O	O:0.999974
	
The	O	O:0.999938
alignment	O	O:0.999880
angles	O	O:0.999519
may	O	O:0.999963
be	O	O:0.999997
unique	O	O:0.956262
,	O	O:0.999992
a	O	O:0.999997
discrete	O	O:0.999081
set	O	O:0.999905
,	O	O:0.999997
or	O	O:0.999999
a	O	O:0.999996
continuum	O	O:0.999753
as	O	O:0.999992
below	O	O:0.997611
.	O	O:0.999876
	
Alternatively	O	O:0.999757
,	O	O:0.999993
you	O	O:0.999990
could	O	O:0.999982
assign	O	O:0.999979
the	O	O:0.999999
flip	O	O:0.998916
cards	O	O:0.999915
their	O	O:0.999717
own	O	O:0.999974
unique	O	O:0.682959
IDs	O	O:0.999338
and	O	O:0.999993
store	O	O:0.999987
them	O	O:0.998750
in	O	O:0.999994
the	O	O:0.999994
same	O	O:0.999962
record	O	O:0.999837
array	O	O:0.999989
as	O	O:0.999994
the	O	O:0.999988
regular	O	O:0.999633
cards	O	O:0.999719
,	O	O:0.999995
as	O	O:0.999997
the	O	O:0.999968
properties	O	O:0.999828
seem	O	O:0.999919
to	O	O:0.999999
have	O	O:0.999999
the	O	O:0.999997
same	O	O:0.999967
names	O	O:0.999747
,	O	O:0.999994
and	O	O:0.999999
then	O	O:0.999979
have	O	O:0.999998
a	O	O:0.999997
`	O	O:0.999977
flip_id	O	O:0.982463
`	O	O:0.999993
field	O	O:0.999795
that	O	O:0.999925
would	O	O:0.999993
be	O	O:1.000000
some	O	O:0.999994
set	O	O:0.999934
value	O	O:0.999996
such	O	O:0.999938
as	O	O:0.999998
`	O	O:0.999813
0	O	O:0.999002
`	O	O:0.999992
or	O	O:0.996940
`	O	O:0.999990
None	O	O:0.998430
`	O	O:0.999997
for	O	O:0.999943
cards	O	O:0.999677
without	O	O:0.999846
flip	O	O:0.997410
aspects	O	O:0.999139
and	O	O:0.999994
then	O	O:0.999981
the	O	O:0.999998
ID	O	O:0.999921
of	O	O:0.999982
the	O	O:0.999992
flip	O	O:0.999779
card	O	O:0.999387
for	O	O:0.999998
those	O	O:0.999933
cards	O	O:0.999862
that	O	O:0.999973
do	O	O:0.999998
have	O	O:0.999993
a	O	O:0.999995
flip	O	O:0.988751
.	O	O:0.999855
	
You	O	O:0.999844
can	O	O:0.999948
notice	O	O:0.999996
that	O	O:0.999992
there	O	O:0.999877
is	O	O:0.999998
gray	O	O:0.999693
strip	O	B-API:0.532363
on	O	O:0.999940
top	O	O:0.999851
and	O	O:0.999996
on	O	O:0.999988
the	O	O:0.999902
left	O	O:0.998510
...	O	O:0.998633
	
Furthermore	O	O:0.999864
you	O	O:0.999995
then	O	O:0.999970
go	O	O:0.999999
and	O	O:0.999998
compute	O	O:0.999237
the	O	O:0.999993
norm	O	B-API:0.607725
of	O	O:0.999980
those	O	O:0.999983
three	O	O:0.999944
values	O	O:0.999045
.	O	O:0.999810
	
Tables	O	O:0.999780
have	O	O:0.999959
an	O	O:0.999925
append	B-API	B-API:0.557967
method	O	O:0.999958
that	O	O:0.999879
can	O	O:0.999997
easily	O	O:0.999996
add	O	O:0.999996
additional	O	O:0.999897
rows	O	O:0.997829
.	O	O:0.999712
	
@USER	O	O:0.999665
,	O	O:0.999987
I	O	O:0.999976
tested	O	O:0.999957
the	O	O:0.998943
append	B-API	B-API:0.695761
method	O	O:0.999872
of	O	O:0.999995
array	O	O:0.999993
by	O	O:0.999985
measure	O	O:0.999176
the	O	O:0.999965
time	O	O:0.999898
it	O	O:0.999995
cost	O	O:0.999765
,	O	O:1.000000
since	O	O:0.999846
resize	B-API	O:0.606675
the	O	O:0.999989
array	O	O:0.999943
will	O	O:0.999485
use	O	O:0.999987
more	O	O:0.999540
time	O	O:0.999600
.	O	O:0.999900
	
I	O	O:0.999986
think	O	O:0.999961
you	O	O:0.999970
need	O	O:0.999986
to	O	O:0.999998
use	O	O:0.999999
append	B-API	B-API:0.908663
function	O	O:0.999814
to	O	O:0.999987
append	B-API	O:0.986483
new	O	O:0.999870
array	O	O:0.999934
with	O	O:0.999924
previous	O	O:0.999641
array	O	O:0.999976
,	O	O:0.999982
asarray	B-API	B-API:0.920874
function	O	O:0.999802
converts	O	O:0.999629
input	O	O:0.999963
to	O	O:0.999975
array	O	O:0.999979
.	O	O:0.999838
	
I	O	O:0.999939
would	O	O:0.999992
store	O	O:0.999146
all	O	O:1.000000
your	O	O:0.999994
data	O	O:0.999889
in	O	O:0.999998
a	O	O:0.999989
python	O	O:0.999248
list	O	O:0.999122
and	O	O:0.999981
use	O	O:0.999982
the	O	O:0.999580
append	B-API	B-API:0.962140
function	O	O:0.999738
to	O	O:0.999985
add	O	O:0.999997
new	O	O:0.999837
measurement	O	O:0.999412
.	O	O:0.999825
	
The	O	O:0.999821
Series	O	O:0.999661
must	O	O:0.999967
also	O	O:0.999997
have	O	O:0.999999
a	O	O:0.999986
`	O	O:0.999984
name	O	O:0.999088
`	O	O:0.999998
to	O	O:0.999983
be	O	O:1.000000
used	O	O:0.999943
with	O	O:0.999522
`	O	O:0.999991
join	B-API	B-API:0.990713
`	O	O:0.999996
,	O	O:0.999892
which	O	O:0.999978
gets	O	O:0.999813
pulled	O	O:0.999837
in	O	O:0.999995
as	O	O:0.999999
a	O	O:0.999995
new	O	O:0.999537
field	O	O:0.999877
called	O	O:0.996922
`	O	O:0.999995
name	O	O:0.992187
`	O	O:0.999985
.	O	O:0.999727
	
NumPy	O	O:0.999902
by	O	O:0.999942
itself	O	O:0.998461
is	O	O:0.999995
a	O	O:0.999957
fairly	O	O:0.996740
low-level	O	O:0.998362
tool	O	O:0.997929
,	O	O:0.999954
and	O	O:0.999994
will	O	O:0.999889
be	O	O:0.999993
very	O	O:0.999968
much	O	O:0.999637
similar	O	O:0.999921
to	O	O:0.999990
using	O	O:0.999981
MATLAB	O	O:0.994340
.	O	O:0.999963
pandas	O	O:0.999795
on	O	O:0.999993
the	O	O:0.999991
other	O	O:0.999937
hand	O	O:0.999775
provides	O	O:0.999901
rich	O	O:0.999776
time	O	O:0.999985
series	O	O:0.999943
functionality	O	O:0.999974
,	O	O:0.999999
data	O	O:0.999956
alignment	O	O:0.999929
,	O	O:0.999998
NA-friendly	O	O:0.999892
statistics	O	O:0.998507
,	O	O:0.999975
groupby	B-API	B-API:0.942039
,	O	O:0.999973
merge	O	B-API:0.826186
and	O	O:0.999977
join	B-API	B-API:0.527330
methods	O	O:0.998591
,	O	O:0.999908
and	O	O:0.999998
lots	O	O:0.999890
of	O	O:0.999984
other	O	O:0.999815
conveniences	O	O:0.999343
.	O	O:0.999846
	
already	O	O:0.999903
have	O	O:0.999841
all	O	O:0.999970
header	O	O:0.999967
names	O	O:0.999732
listed	O	O:0.999975
then	O	O:0.999972
you	O	O:0.999999
can	O	O:0.999995
use	O	O:0.999997
"	O	O:0.999984
join	B-API	B-API:0.987605
"	O	O:0.999855
and	O	O:0.999866
	
Because	O	O:0.999816
these	O	O:0.999860
are	O	O:0.999995
irregular	O	O:0.999845
operations	O	O:0.999842
,	O	O:0.999974
I	O	O:0.999995
can't	O	O:0.999935
use	O	O:0.999931
merge	B-API	B-API:0.753791
/	O	O:0.999799
join	B-API	B-API:0.972307
.	O	O:0.999737
	
It	O	O:0.999912
should	O	O:0.999956
be	O	O:0.999999
a	O	O:0.999999
bit	O	O:0.998629
quicker	O	O:0.999955
just	O	O:0.999480
by	O	O:0.999991
not	O	O:0.999988
using	O	O:0.999910
so	O	O:0.999952
many	O	O:0.999781
intermediary	O	O:0.999717
bitstrings	O	O:0.999334
-	O	O:0.999962
it's	O	O:0.999898
all	O	O:0.999997
done	O	O:0.999840
in	O	O:0.999983
the	O	O:0.999871
join	B-API	B-API:0.958724
method	O	O:0.999766
.	O	O:0.999918
	
How	O	O:0.999836
can	O	O:0.999962
i	O	O:0.999997
use	O	O:0.999990
the	O	O:0.999802
unique	B-API	B-API:0.814888
(	O	O:0.999990
a	O	O:0.999997
,	O	O:0.999999
rows	O	O:0.999821
)	O	O:0.999995
from	O	O:0.999990
MATLab	O	O:0.999817
at	O	O:0.999987
python	O	O:0.998882
?	O	O:0.999962
	
If	O	O:0.999973
you	O	O:0.999978
convert	O	O:0.999913
your	O	O:0.999983
2D	O	O:0.999959
coordinates	O	O:0.999835
into	O	O:0.998738
`	O	O:0.999997
target_map	O	O:0.902977
`	O	O:0.999997
into	O	O:0.999467
flat	O	O:0.999713
indices	O	O:0.999099
into	O	O:0.999453
it	O	O:0.999997
using	O	O:0.999791
`	O	O:0.999619
np.ravel_multi_index	B-API	B-API:0.999399
`	O	O:0.999991
,	O	O:0.999988
you	O	O:0.999995
can	O	O:0.999974
use	O	O:0.999996
`	O	O:0.999925
np.unique	B-API	B-API:0.998211
`	O	O:0.999973
and	O	O:0.999564
`	O	O:0.999978
np.bincount	B-API	B-API:0.998788
`	O	O:0.999991
to	O	O:0.999958
speed	O	O:0.999997
things	O	O:0.999889
up	O	O:0.999981
quite	O	O:0.999972
a	O	O:0.999960
bit	O	O:0.990054
:	O	O:0.999950
#CODE	O	O:0.999688
	
To	O	O:0.999958
get	O	O:0.999931
the	O	O:0.999997
unobserved	O	O:0.999555
values	O	O:0.999398
filled	O	O:0.999387
,	O	O:0.999998
we'll	O	O:0.999642
use	O	O:0.999945
the	O	O:0.999861
`	O	O:0.999918
unstack	B-API	B-API:0.998825
`	O	O:0.999953
and	O	O:0.999829
`	O	O:0.999996
stack	B-API	B-API:0.995841
`	O	O:0.999990
methods	O	O:0.996755
.	O	O:0.999910
	
The	O	O:0.999924
actual	O	O:0.999411
RMS	O	O:0.999670
would	O	O:0.999887
be	O	O:0.999981
`	O	O:0.999996
norm	B-API	B-API:0.996598
(	O	O:0.999993
x	O	O:0.999809
)	O	O:0.999965
/	O	O:0.999906
sqrt	B-API	B-API:0.987396
(	O	O:0.999970
x.size	O	O:0.998677
)`	O	O:0.999241
,	O	O:0.999979
but	O	O:0.999974
for	O	O:0.999963
minimization	O	O:0.999877
the	O	O:0.999960
constant	O	O:0.999466
multiplier	O	O:0.999822
doesn't	O	O:0.999933
make	O	O:0.999942
any	O	O:0.999982
difference	O	O:0.999475
.	O	O:0.999593
	
The	O	O:0.999956
above	O	O:0.999937
entire	O	O:0.999835
expression	O	O:0.999433
is	O	O:0.999990
therefore	O	O:0.999960
evaluating	O	O:0.999957
to	O	O:0.999984
an	O	O:1.000000
array	O	O:0.999984
of	O	O:0.999995
truth	O	O:0.999821
values	O	O:0.999955
,	O	O:0.999977
rather	O	O:0.999990
than	O	O:0.999976
a	O	O:0.999999
single	O	O:0.997374
`	O	O:0.999987
True	O	O:0.995770
`	O	O:0.999986
/	O	O:0.997396
`	O	O:0.999983
False	O	O:0.989271
`	O	O:0.999969
.	O	O:0.999442
	
For	O	O:0.999895
the	O	O:0.999922
multiprocessing	O	O:0.994220
:	O	O:0.999962
You	O	O:0.999988
can	O	O:0.999991
distribute	O	O:0.999988
the	O	O:0.999998
data	O	O:0.999984
sets	O	O:0.999968
across	O	O:0.999983
cores	O	O:0.999896
,	O	O:0.999997
do	O	O:0.999966
`	O	O:0.999990
partial_fit	O	O:0.575634
`	O	O:0.999998
,	O	O:0.999981
get	O	O:0.999985
the	O	O:0.999982
weight	O	O:0.999876
vectors	O	O:0.999620
,	O	O:0.999997
average	O	O:0.999987
them	O	O:0.999821
,	O	O:0.999998
distribute	O	O:0.999989
them	O	O:0.999652
to	O	O:0.999998
the	O	O:1.000000
estimators	O	O:0.999576
,	O	O:0.999990
do	O	O:0.999992
partial	O	O:0.999653
fit	O	O:0.998757
again	O	O:0.999710
.	O	O:0.999896
	
the	O	O:0.999985
size	O	O:0.999882
of	O	O:0.999971
Y	O	O:0.999116
is	O	O:0.999992
100e6	O	O:0.999641
x	O	O:0.999716
1	O	O:0.999709
	
Put	O	O:0.999639
I	O	O:0.999983
think	O	O:0.999968
that	O	O:0.999622
following	O	O:0.999988
this	O	O:0.999938
route	O	O:0.999689
would	O	O:0.999955
lead	O	O:0.999926
to	O	O:0.999997
an	O	O:0.999999
inefficient	O	O:0.999633
solution	O	O:0.999599
.	O	O:0.999911
	
Your	O	O:0.999796
example	O	O:0.999958
come	O	O:0.999895
at	O	O:0.999999
a	O	O:0.999989
good	O	O:0.999531
time	O	O:0.999969
for	O	O:0.999988
me	O	O:0.999951
,	O	O:0.999993
so	O	O:0.999996
I	O	O:0.999992
now	O	O:0.999997
have	O	O:0.999965
something	O	O:0.999986
concrete	O	O:0.999846
to	O	O:0.999994
train	O	O:0.999861
with	O	O:0.999921
.	O	O:0.999902
	
One	O	O:0.999964
thing	O	O:0.999866
I	O	O:0.999993
find	O	O:0.999941
very	O	O:0.999779
confortable	O	O:0.999668
with	O	O:0.999954
Numpy	O	O:0.998039
is	O	O:0.999982
the	O	O:0.999973
vectorization	O	O:0.999960
of	O	O:0.999987
operations	O	O:0.999773
with	O	O:0.999905
arrays	O	O:0.998958
(	O	O:0.999974
ie	O	O:0.999989
.	O	O:0.999986
the	O	O:0.999996
absence	O	O:0.999943
of	O	O:0.999982
any	O	O:0.999971
explicit	O	O:0.999903
looping	O	O:0.999082
)	O	O:0.999921
,	O	O:0.999900
and	O	O:0.999993
the	O	O:0.999968
implicit	O	O:0.998247
element-by-element	O	O:0.999745
behavior	O	O:0.999876
of	O	O:0.999964
operations	O	O:0.995160
.	O	O:0.999918
	
I	O	O:0.999961
suggest	O	O:0.999936
to	O	O:0.999956
set	O	O:0.999993
it	O	O:0.999995
to	O	O:0.999998
some	O	O:0.999999
reasonable	O	O:0.999934
upper	O	O:0.999905
limit	O	O:0.998332
,	O	O:0.999985
though	O	O:0.999777
.	O	O:0.999922
	
Gonna	O	O:0.999479
try	O	O:0.999925
to	O	O:0.999997
find	O	O:0.999999
another	O	O:0.999902
solution	O	O:0.999532
.	O	O:0.999863
	
Is	O	O:0.999945
it	O	O:0.999995
possible	O	O:0.999962
to	O	O:0.999998
construct	O	O:0.999993
a	O	O:0.999992
`	O	O:0.999983
numpy	O	O:0.996163
`	O	O:0.999993
matrix	O	O:0.999818
from	O	O:0.999993
a	O	O:0.999937
function	O	O:0.999543
?	O	O:0.999942
	
I	O	O:0.999986
have	O	O:0.999951
2D	O	O:0.999910
numpy	O	O:0.999902
array	O	O:0.999910
,	O	O:0.999988
with	O	O:0.999933
example	O	O:0.999468
shape	O	O:0.999523
:	O	O:0.999974
#CODE	O	O:0.999851
	
`	O	O:0.999904
grid	O	O:0.999346
[	O	O:0.999994
0	O	O:0.999966
]`	O	O:0.999926
can	O	O:0.999821
be	O	O:1.000000
used	O	O:0.999988
as	O	O:0.999992
a	O	O:0.999995
proxy	O	O:0.997501
for	O	O:0.999880
the	O	O:0.999902
index	O	O:0.999032
`	O	O:0.999977
i	O	O:0.999422
`	O	O:0.999996
,	O	O:0.999774
and	O	O:0.999983
	
Thank	O	O:0.999531
you	O	O:0.999927
Martijn	O	O:0.999696
:)	O	O:0.999969
-	O	O:0.999997
your	O	O:0.999924
are	O	O:0.999954
BIG	O	O:0.999894
help	O	O:0.997508
,	O	O:0.999952
and	O	O:0.999998
just	O	O:0.999918
one	O	O:0.999987
thing	O	O:0.999905
confuses	O	O:0.999776
me	O	O:0.999973
,	O	O:0.999992
how	O	O:0.999989
do	O	O:0.999948
I	O	O:0.999998
tell	O	O:0.999895
python	O	O:0.999033
to	O	O:0.999994
read	O	O:0.999932
all	O	O:0.999991
CDR	O	O:0.999969
records	O	O:0.999823
if	O	O:0.999978
record	O	O:0.998347
is	O	O:0.999973
907	O	O:0.999506
bytes	O	O:0.999801
long	O	O:0.998888
.	O	O:0.999787
	
I	O	O:0.999992
want	O	O:0.999985
to	O	O:0.999937
get	O	O:0.999999
the	O	O:0.999999
elements	O	O:0.999963
of	O	O:0.999998
a	O	O:0.999990
`	O	O:0.999992
numpy	O	O:0.996657
`	O	O:0.999996
array	O	O:0.999939
using	O	O:0.999833
an	O	O:0.999744
index	O	O:0.999738
array	O	O:0.999987
like	O	O:0.999838
so	O	O:0.999969
#CODE	O	O:0.999773
	
I	O	O:0.999964
can	O	O:0.999959
weight	O	O:0.999998
them	O	O:0.999933
how	O	O:0.999992
I	O	O:0.999998
want	O	O:0.999994
to	O	O:0.999945
as	O	O:1.000000
long	O	O:0.999898
as	O	O:0.999998
sum	O	O:0.999723
of	O	O:0.999998
their	O	O:0.999206
weights	O	O:0.999933
adds	O	O:0.999746
to	O	O:0.999975
1	O	O:0.999975
.	O	O:0.999873
	
I	O	O:0.999963
wanted	O	O:0.999959
to	O	O:0.999921
try	O	O:0.999999
to	O	O:0.999989
duplicate	O	O:0.999999
those	O	O:0.999976
performance	O	O:0.999978
gains	O	O:0.999978
when	O	O:0.999855
solving	O	O:0.999878
the	O	O:0.999989
distance	O	O:0.999519
between	O	O:0.999601
two	O	O:0.999986
equal	O	O:0.999882
sized	O	O:0.999586
arrays	O	O:0.999172
.	O	O:0.999771
	
Even	O	O:0.999357
if	O	O:0.999976
it	O	O:0.999927
worked	O	O:0.999875
,	O	O:0.999991
I	O	O:0.999892
would	O	O:0.999970
not	O	O:0.999967
expect	O	O:0.999997
any	O	O:0.999991
speed-up	O	O:0.999296
from	O	O:0.999970
this	O	O:0.999941
compared	O	O:0.999954
to	O	O:0.999995
an	O	O:0.999999
ordinary	O	O:0.999908
loop	O	O:0.999616
,	O	O:0.999993
since	O	O:0.999937
it	O	O:0.999991
needs	O	O:0.999995
to	O	O:0.999998
call	O	O:0.999971
a	O	O:0.999995
Python	O	O:0.976696
function	O	O:0.999928
for	O	O:0.999989
every	O	O:0.999683
entry	O	O:0.999277
.	O	O:0.999780
	
@USER	O	O:0.998633
,	O	O:0.999982
you're	O	O:0.999947
right	O	O:0.999890
,	O	O:0.999999
if	O	O:0.999997
you	O	O:0.999996
have	O	O:0.999987
to	O	O:0.999998
convert	O	O:0.999990
everything	O	O:0.999973
to	O	O:0.999990
ndarrays	O	O:0.999991
it's	O	O:0.999508
often	O	O:0.999571
not	O	O:0.999973
worth	O	O:0.999618
it	O	O:0.999963
.	O	O:0.999916
	
An	O	O:0.999933
example	O	O:0.999873
implementation	O	O:0.999891
without	O	O:0.999923
recalculating	O	O:0.998845
the	O	O:0.999820
distance	O	O:0.999885
array	O	O:0.999882
would	O	O:0.999932
be	O	O:0.999997
this	O	O:0.999834
:	O	O:0.999946
#CODE	O	O:0.999821
	
I	O	O:0.999989
need	O	O:0.999965
to	O	O:0.999985
return	O	O:0.999996
all	O	O:0.999968
of	O	O:0.999996
the	O	O:0.999962
points	O	O:0.999884
within	O	O:0.999932
a	O	O:0.999999
distance	O	O:0.999894
of	O	O:0.999987
X	O	O:0.999976
units	O	O:0.999951
from	O	O:0.999958
every	O	O:0.999780
point	O	O:0.999764
.	O	O:0.999850
	
EDIT	O	O:0.994990
:	O	O:0.999952
Actually	O	O:0.999974
renaming	O	O:0.999819
my	O	O:0.999871
package	O	O:0.999415
does	O	O:0.999600
not	O	O:0.999971
fix	O	O:0.999830
it	O	O:0.999956
.	O	O:0.999921
	
2	O	O:0.999782
)	O	O:0.999994
look	O	O:0.999391
at	O	O:0.999998
the	O	O:0.999980
lengths	O	O:0.995109
distance	O	O:0.997761
(	O	O:0.999987
point	O	O:0.999884
,	O	O:0.999993
centre	O	O:0.999617
,	O	O:0.999904
metric=	O	O:0.999896
...	O	O:0.999974
)	O	O:0.999995
of	O	O:0.999987
all	O	O:0.999969
the	O	O:0.999993
rays	O	O:0.995625
.	O	O:0.999851
	
Sorry	O	O:0.999335
,	O	O:0.999986
all	O	O:0.999946
are	O	O:0.999996
positive	O	O:0.999935
values	O	O:0.999635
greater	O	O:0.999947
than	O	O:0.999776
0	O	O:0.999726
.	O	O:0.999885
	
After	O	O:0.999928
that	O	O:0.999931
I	O	O:0.999998
convert	O	O:0.999500
the	O	O:0.999940
image	O	O:0.999670
to	O	O:0.999954
BGR	O	O:0.999978
model	O	O:0.997946
:	O	O:0.999955
#CODE	O	O:0.999862
	
How	O	O:0.999932
do	O	O:0.999949
I	O	O:0.999998
standardize	O	O:0.999537
a	O	O:0.999883
matrix	O	O:0.998372
?	O	O:0.999930
	
Speed	O	O:0.998971
can	O	O:0.999965
probably	O	O:0.999992
be	O	O:0.999998
increased	O	O:0.999960
by	O	O:0.999973
ensuring	O	O:0.999718
that	O	O:0.999718
the	O	O:0.999996
record	O	O:0.999559
array	O	O:0.999967
you	O	O:0.999993
pass	O	O:0.999447
to	O	O:0.999992
Cython	O	O:0.999887
is	O	O:0.999986
contiguous	O	O:0.987608
.	O	O:0.999907
	
fid	O	O:0.997026
is	O	O:0.999970
the	O	O:0.999980
file	O	O:0.999774
currently	O	O:0.999890
being	O	O:0.999906
looked	O	O:0.999216
at	O	O:0.999887
	
I'm	O	O:0.999883
guessing	O	O:0.999535
it's	O	O:0.999807
opening	O	O:0.999754
TWO	O	O:0.999907
filehandles	O	O:0.999321
per	O	O:0.999821
iteration	O	O:0.999828
,	O	O:0.999998
just	O	O:0.999974
based	O	O:0.999929
on	O	O:0.999989
the	O	O:0.999926
498	O	O:0.998688
(	O	O:0.999993
a	O	O:0.999993
bit	O	O:0.999826
less	O	O:0.999697
than	O	O:0.999714
half	O	O:0.999700
1024	O	O:0.999372
,	O	O:0.999958
and	O	O:0.999986
Python	O	O:0.999433
would	O	O:0.999957
have	O	O:0.999997
some	O	O:0.999991
files	O	O:0.999983
open	O	O:0.999089
itself	O	O:0.999641
(	O	O:0.999994
maybe	O	O:0.999877
25-odd	O	O:0.999607
?	O	O:0.999975
)	O	O:0.999964
.	O	O:0.999855
	
The	O	O:0.999942
idea	O	O:0.998792
is	O	O:0.999995
to	O	O:0.999992
count	O	O:0.999986
the	O	O:0.999997
number	O	O:0.999953
of	O	O:0.999998
occurrences	O	O:0.999963
of	O	O:0.999997
each	O	O:0.999714
transition	O	O:0.999937
,	O	O:0.999995
and	O	O:0.999991
use	O	O:0.999969
the	O	O:0.999928
counts	O	O:0.998511
in	O	O:0.999993
a	O	O:0.999998
vectorized	O	O:0.999899
update	O	O:0.999677
of	O	O:0.999957
the	O	O:0.999836
matrix	O	O:0.999590
.	O	O:0.999789
	
I	O	O:0.999978
kept	O	O:0.999995
them	O	O:0.999255
in	O	O:0.999995
to	O	O:0.999995
distinguish	O	O:0.999999
them	O	O:0.999930
from	O	O:0.999983
the	O	O:0.999978
`	O	O:0.999990
math	O	O:0.997461
`	O	O:0.999999
ones	O	O:0.999525
,	O	O:0.999993
which	O	O:0.999957
won't	O	O:0.999963
work	O	O:0.999911
for	O	O:1.000000
this	O	O:0.999783
approach	O	O:0.999579
.	O	O:0.999783
	
Powers	O	O:0.999634
of	O	O:0.999981
two	O	O:0.999832
are	O	O:0.999998
simple	O	O:0.999909
to	O	O:0.999973
compute	O	O:0.999691
,	O	O:0.999984
but	O	O:0.999986
mixed	O	O:0.999723
radix	O	O:0.999939
sizes	O	O:0.999577
can	O	O:0.999974
be	O	O:0.999999
faster	O	O:0.999889
and	O	O:0.999933
use	O	O:0.999898
less	O	O:0.966591
memory	O	O:0.998487
.	O	O:0.999662
	
The	O	O:0.999944
stars	O	O:0.998334
/	O	O:0.999994
dots	O	O:0.999628
are	O	O:0.999989
the	O	O:0.999983
`	O	O:0.999946
X	O	O:0.996455
`	O	O:0.999989
and	O	O:0.999842
`	O	O:0.999994
Y	O	O:0.995427
`	O	O:0.999994
plotted	O	O:0.996660
with	O	O:0.999984
two	O	O:0.999966
modifications	O	O:0.999966
,	O	O:0.999995
I	O	O:0.999996
removed	O	O:0.999826
the	O	O:0.999952
first	O	O:0.999313
position	O	O:0.999328
and	O	O:0.999992
added	O	O:0.999994
a	O	O:0.999970
false	O	O:0.999140
one	O	O:0.999984
to	O	O:0.999993
make	O	O:0.999999
this	O	O:0.999989
a	O	O:0.999999
full	O	O:0.999848
example	O	O:0.999949
of	O	O:0.999993
the	O	O:0.999985
sought	O	O:0.999630
algorithm	O	O:0.999637
.	O	O:0.999894
	
Please	O	O:0.999778
look	O	O:0.999601
at	O	O:0.999993
my	O	O:0.999959
EDIT	O	O:0.999524
2	O	O:0.999932
,	O	O:0.999996
where	O	O:0.999966
I	O	O:0.999990
described	O	O:0.999992
my	O	O:0.999928
problem	O	O:0.999779
with	O	O:0.999985
input	O	O:0.999939
data	O	O:0.999952
...	O	O:0.999719
and	O	O:0.999997
why	O	O:0.999976
I	O	O:0.999966
can't	O	O:0.999927
get	O	O:0.999466
matrix	O	O:0.999899
..	O	O:0.999782
	
pyqt	O	O:0.990078
:	O	O:0.999955
Convert	O	O:0.999909
numpy	O	O:0.999943
array	O	O:0.999946
to	O	O:0.999924
QImage	O	O:0.998566
	
To	O	O:0.999970
find	O	O:0.999831
the	O	O:0.999994
difference	O	O:0.999577
between	O	O:0.999968
your	O	O:0.999971
data	O	O:0.999881
and	O	O:1.000000
a	O	O:0.999997
point	O	O:0.997054
,	O	O:0.999986
you'd	O	O:0.999986
just	O	O:0.999917
do	O	O:0.999998
`	O	O:0.999998
data	O	O:0.999467
-	O	O:0.999998
point	O	O:0.999643
`	O	O:0.999970
.	O	O:0.999702
	
Unfortunately	O	O:0.999945
when	O	O:0.999764
numpy	O	O:0.999964
reads	O	O:0.999887
the	O	O:0.999982
19-digit	O	O:0.999723
number	O	O:0.999964
as	O	O:0.999998
a	O	O:0.999998
floating	O	O:0.999292
point	O	O:0.999657
number	O	O:0.999720
,	O	O:0.999996
there	O	O:0.999693
is	O	O:0.999977
not	O	O:0.999956
enough	O	O:0.999950
precision	O	O:0.999969
to	O	O:0.999992
get	O	O:0.999999
all	O	O:0.999992
the	O	O:0.999996
significant	O	O:0.999492
digits	O	O:0.999659
,	O	O:0.999995
so	O	O:0.999997
there	O	O:0.999814
is	O	O:0.999998
a	O	O:0.999992
rounding	O	O:0.998824
error	O	O:0.998906
.	O	O:0.999762
	
The	O	O:0.999925
exceptions	O	O:0.998693
are	O	O:0.999993
very	O	O:0.999948
rare	O	O:0.999750
,	O	O:0.999992
if	O	O:0.999984
any	O	O:0.999911
.	O	O:0.999820
	
I	O	O:0.999958
can't	O	O:0.999944
reproduce	O	O:0.999939
your	O	O:0.999965
problem	O	O:0.999776
on	O	O:0.999996
Linux	O	O:0.999896
using	O	O:0.999952
the	O	O:0.999929
same	O	O:0.999790
versions	O	O:0.999883
of	O	O:0.999984
numpy	O	O:0.999171
and	O	O:0.999989
python	O	O:0.999566
and	O	O:0.999997
a	O	O:0.999987
quickly	O	O:0.995277
made	O	O:0.999855
test	O	O:0.999060
file	O	O:0.999630
(	O	O:0.999990
with	O	O:0.999925
dos	O	O:0.999918
line	O	O:0.999940
endings	O	O:0.999862
,	O	O:0.999999
even	O	O:0.999472
)	O	O:0.999995
...	O	O:0.999429
	
I	O	O:0.999980
imagine	O	O:0.999919
I	O	O:0.999923
would	O	O:0.999996
have	O	O:0.999974
to	O	O:0.999998
use	O	O:0.999998
the	O	O:0.999916
uncompiled	O	O:0.999179
source	O	O:0.999824
provided	O	O:0.999859
from	O	O:0.999990
each	O	O:0.999853
of	O	O:0.999989
these	O	O:0.999971
three	O	O:0.999928
projects	O	O:0.999288
.	O	O:0.999836
	
However	O	O:0.999854
,	O	O:0.999991
I	O	O:0.999992
am	O	O:0.999997
checking	O	O:0.998038
optimization	O	O:0.999946
routine	O	O:0.999833
result	O	O:0.999805
,	O	O:0.999993
and	O	O:0.999996
sometimes	O	O:0.999860
power	O	O:0.997630
is	O	O:0.999970
negative	O	O:0.999169
,	O	O:0.999987
sometimes	O	O:0.999808
it	O	O:0.999901
is	O	O:0.999990
positive	O	O:0.996488
.	O	O:0.999798
	
What	O	O:0.999801
about	O	O:0.999977
array	O	O:0.999964
of	O	O:0.999928
arrays	O	O:0.999709
that	O	O:0.999949
contains	O	O:0.999979
some	O	O:0.999944
structures	O	O:0.999502
?	O	O:0.999949
	
The	O	O:0.999987
y	O	O:0.999982
data	O	O:0.999954
takes	O	O:0.999929
the	O	O:0.999998
shape	O	O:0.999889
of	O	O:0.999979
the	O	O:0.999961
triangle	O	O:0.999989
wave	O	O:0.999526
below	O	O:0.999261
.	O	O:0.999925
	
There	O	O:0.999761
are	O	O:0.999997
some	O	O:0.999960
algorithm	O	O:0.999975
to	O	O:0.999996
calculate	O	O:0.999933
faster	O	O:0.999993
the	O	O:0.999991
results	O	O:0.999828
for	O	O:0.999975
low	O	O:0.998896
valued	O	O:0.998825
matrix	O	O:0.998424
,	O	O:0.999940
but	O	O:0.999992
just	O	O:0.999896
google	O	O:0.999582
for	O	O:0.999991
this	O	O:0.999455
.	O	O:0.999865
	
Those	O	O:0.998987
are	O	O:0.999972
not	O	O:0.999991
random	O	O:0.999923
replacements	O	O:0.999495
by	O	O:0.999959
any	O	O:0.999960
means	O	O:0.998695
.	O	O:0.999816
	
I	O	O:0.999899
would	O	O:0.999985
suggest	O	O:0.999817
to	O	O:0.999999
make	O	O:0.999993
the	O	O:0.999991
library	O	O:0.999826
use	O	O:0.999868
an	O	O:0.998524
(	O	O:0.999988
NumPy-	O	O:0.999317
)	O	O:0.999987
array	O	O:0.999951
you	O	O:0.999979
allocate	O	O:0.999657
in	O	O:0.999970
Python	O	O:0.999501
and	O	O:0.999999
pass	O	O:0.999425
on	O	O:0.999941
to	O	O:0.999994
the	O	O:0.999998
library	O	O:0.999122
.	O	O:0.999847
	
For	O	O:0.999912
the	O	O:0.999977
simple	O	O:0.999908
case	O	O:0.999962
of	O	O:0.999994
"	O	O:0.999985
remove	O	O:0.999665
column	O	O:0.999853
3	O	O:0.999893
"	O	O:0.999982
,	O	O:0.999980
`	O	O:0.999994
delete	O	O:0.866273
`	O	O:0.999993
makes	O	O:0.999789
more	O	O:0.999950
sense	O	O:0.999887
;	O	O:0.999984
for	O	O:0.999987
a	O	O:0.999997
more	O	O:0.997563
complicated	O	O:0.999876
case	O	O:0.999955
,	O	O:0.999994
`	O	O:0.999998
take	O	O:0.995654
`	O	O:0.999998
probably	O	O:0.999330
makes	O	O:0.999980
more	O	O:0.999653
sense	O	O:0.999619
.	O	O:0.999828
	
I	O	O:0.999993
have	O	O:0.999981
an	O	O:0.999992
array	O	O:0.999992
of	O	O:0.999989
points	O	O:0.998520
in	O	O:0.999984
numpy	O	O:0.998795
:	O	O:0.999956
#CODE	O	O:0.999775
	
I	O	O:0.999984
have	O	O:0.999993
done	O	O:0.999893
7	O	O:0.999977
of	O	O:0.999989
the	O	O:0.999984
problems	O	O:0.999906
on	O	O:0.999946
Project	O	O:0.998585
Euler	O	O:0.999169
(	O	O:0.999987
nothing	O	O:0.999556
to	O	O:0.999994
brag	O	O:0.999966
about	O	O:0.999630
,	O	O:0.999928
but	O	O:0.999930
it	O	O:0.999949
might	O	O:0.999988
give	O	O:0.999957
you	O	O:0.999998
a	O	O:0.999996
better	O	O:0.999926
idea	O	O:0.999930
of	O	O:0.999997
where	O	O:0.999890
I	O	O:0.999998
stand	O	O:0.999930
in	O	O:0.999964
skills	O	O:0.999579
)	O	O:0.999972
.	O	O:0.999772
	
How	O	O:0.999951
do	O	O:0.999955
I	O	O:0.999997
find	O	O:0.999934
the	O	O:0.999833
length	O	O:0.995496
(	O	O:0.999961
or	O	O:0.999998
dimensions	O	O:0.999763
,	O	O:0.999998
size	O	O:0.999979
)	O	O:0.999996
of	O	O:0.999998
a	O	O:0.999987
numpy	O	O:0.999702
matrix	O	O:0.999341
in	O	O:0.999957
python	O	O:0.999642
?	O	O:0.999973
	
It's	O	O:0.999684
longer	O	O:0.999983
than	O	O:0.999942
the	O	O:0.999996
other	O	O:0.999481
answer	O	O:0.999560
but	O	O:0.999565
is	O	O:0.999992
more	O	O:0.999372
generic	O	O:0.997564
(	O	O:0.999974
can	O	O:0.999962
be	O	O:1.000000
used	O	O:0.999991
with	O	O:0.999758
values	O	O:0.999756
that	O	O:0.999719
are	O	O:0.999998
not	O	O:0.999995
strings	O	O:0.999591
)	O	O:0.999971
.	O	O:0.999890
	
I	O	O:0.999981
coded	O	O:0.999979
my	O	O:0.999941
own	O	O:0.999830
routine	O	O:0.999870
with	O	O:0.999873
Python	O	O:0.999111
/	O	O:0.999982
Numpy	O	O:0.998405
,	O	O:0.999864
and	O	O:0.999984
it	O	O:0.999864
is	O	O:0.999982
giving	O	O:0.999813
me	O	O:0.999983
a	O	O:0.999985
little	O	O:0.998554
bit	O	O:0.999994
different	O	O:0.999907
results	O	O:0.999936
from	O	O:0.999945
the	O	O:0.999984
MATLAB	O	O:0.999859
code	O	O:0.999853
somebody	O	O:0.999900
else	O	O:0.999765
did	O	O:0.999800
,	O	O:0.999991
and	O	O:0.999995
I	O	O:0.999980
am	O	O:0.999981
having	O	O:0.998996
hard	O	O:0.999719
time	O	O:0.999974
finding	O	O:0.999841
out	O	O:0.999931
where	O	O:0.999922
it	O	O:0.999920
is	O	O:0.999997
coming	O	O:0.999324
from	O	O:0.999982
because	O	O:0.999939
of	O	O:0.999996
different	O	O:0.999889
random	O	O:0.999175
draws	O	O:0.997994
.	O	O:0.999804
	
How	O	O:0.999787
can	O	O:0.999865
1,000,000	O	O:0.999975
4-byte	O	O:0.999927
ints	O	O:0.999177
be	O	O:0.999990
compressed	O	O:0.999956
any	O	O:0.999901
smaller	O	O:0.997300
?	O	O:0.999709
	
If	O	O:0.999992
this	O	O:0.999904
number	O	O:0.999640
is	O	O:0.999989
less	O	O:0.999857
than	O	O:0.999977
a	O	O:0.999999
third	O	O:0.999743
of	O	O:0.999991
the	O	O:0.999957
total	O	O:0.999833
I'll	O	O:0.999592
use	O	O:0.999962
my	O	O:0.999836
answer	O	O:0.999649
above	O	O:0.999396
.	O	O:0.999701
	
I	O	O:0.999984
have	O	O:0.999993
done	O	O:0.999893
7	O	O:0.999977
of	O	O:0.999989
the	O	O:0.999984
problems	O	O:0.999906
on	O	O:0.999946
Project	O	O:0.998585
Euler	O	O:0.999169
(	O	O:0.999987
nothing	O	O:0.999556
to	O	O:0.999994
brag	O	O:0.999966
about	O	O:0.999630
,	O	O:0.999928
but	O	O:0.999930
it	O	O:0.999949
might	O	O:0.999988
give	O	O:0.999957
you	O	O:0.999998
a	O	O:0.999996
better	O	O:0.999926
idea	O	O:0.999930
of	O	O:0.999997
where	O	O:0.999890
I	O	O:0.999998
stand	O	O:0.999930
in	O	O:0.999964
skills	O	O:0.999579
)	O	O:0.999972
.	O	O:0.999772
	
Apologies	O	O:0.998633
if	O	O:0.999995
this	O	O:0.999798
is	O	O:0.999999
a	O	O:0.999982
wrongly	O	O:0.999504
framed	O	O:0.999864
question	O	O:0.999757
or	O	O:0.999987
if	O	O:0.999996
this	O	O:0.999933
question	O	O:0.999453
was	O	O:0.999938
already	O	O:0.999963
asked	O	O:0.999570
earlier	O	O:0.997235
(	O	O:0.999937
I	O	O:0.999972
couldn't	O	O:0.999881
find	O	O:0.999691
it	O	O:0.999989
)	O	O:0.999977
	
If	O	O:0.999979
you	O	O:0.999974
can	O	O:0.999991
choose	O	O:0.999998
,	O	O:0.999999
I	O	O:0.999997
strongly	O	O:0.999562
recommend	O	O:0.998061
pandas	O	O:0.997644
:	O	O:0.999980
it	O	O:0.999979
has	O	O:0.999972
"	O	O:0.999989
column	O	O:0.999546
indexing	O	O:0.999269
"	O	O:0.999977
built-in	O	O:0.999118
plus	O	O:0.999937
a	O	O:0.999996
lot	O	O:0.999868
of	O	O:0.999994
other	O	O:0.999642
features	O	O:0.999162
.	O	O:0.999749
	
But	O	O:0.999970
this	O	O:0.999968
will	O	O:0.999978
iterate	O	O:0.999947
through	O	O:0.999914
the	O	O:0.999983
entire	O	O:0.999294
array	O	O:0.999909
and	O	O:0.999992
allocate	O	O:0.999975
a	O	O:0.999968
new	O	O:0.999763
array	O	O:0.999880
in	O	O:0.999912
memory	O	O:0.999904
containing	O	O:0.999769
the	O	O:0.999986
all	O	O:0.999988
the	O	O:0.999967
results	O	O:0.999701
,	O	O:0.999985
and	O	O:0.999999
only	O	O:0.999993
then	O	O:0.999956
check	O	O:0.999993
to	O	O:0.999997
see	O	O:0.999997
if	O	O:0.999986
it	O	O:0.999946
is	O	O:0.999996
empty	O	O:0.995457
.	O	O:0.999812
	
Since	O	O:0.999911
some	O	O:0.999847
askers	O	O:0.999300
and	O	O:0.999999
some	O	O:0.999787
answers	O	O:0.999826
both	O	O:0.999780
avoid	O	O:0.999775
that	O	O:0.999862
constraint	O	O:0.999963
,	O	O:0.999997
I	O	O:0.999991
encourage	O	O:0.999813
anyone	O	O:0.998454
who's	O	O:0.999713
here	O	O:0.996599
and	O	O:0.999981
doesn't	O	O:0.999854
mind	O	O:0.999637
having	O	O:0.999838
PIL	O	O:0.999669
to	O	O:0.999969
look	O	O:0.999962
below	O	O:0.999671
,	O	O:0.999985
and	O	O:0.999992
any	O	O:0.999985
non-PIL	O	O:0.995800
answers	O	O:0.997640
(	O	O:0.999993
new	O	O:0.999842
or	O	O:0.999986
old	O	O:0.999929
)	O	O:0.999994
to	O	O:0.999957
mention	O	O:0.999991
that	O	O:0.999951
they're	O	O:0.999993
a	O	O:0.999996
PIL-is-used	O	O:0.999816
type	O	O:0.999779
of	O	O:0.999985
answer	O	O:0.999811
,	O	O:0.999996
to	O	O:0.999994
distinguish	O	O:0.999992
themselves	O	O:0.999974
from	O	O:0.999978
answers	O	O:0.999924
meeting	O	O:0.999790
the	O	O:0.999958
original	O	O:0.998767
constraint	O	O:0.999640
.	O	O:0.999910
	
As	O	O:0.999928
I	O	O:0.999987
understand	O	O:0.999996
your	O	O:0.999390
question	O	O:0.999541
,	O	O:0.999998
you	O	O:0.999995
have	O	O:0.999993
a	O	O:0.999998
2D	O	O:0.999978
array	O	O:0.999976
of	O	O:0.999956
"	O	O:0.999971
z	O	O:0.999939
"	O	O:0.999983
values	O	O:0.999856
that	O	O:0.999957
ranges	O	O:0.999989
from	O	O:0.999981
some	O	O:0.999970
xmin	O	O:0.999617
to	O	O:0.999990
xmax	O	O:0.999942
,	O	O:0.999981
and	O	O:0.999998
ymin	O	O:0.999626
to	O	O:0.999986
ymax	O	O:0.999943
in	O	O:0.999993
each	O	O:0.999774
direction	O	O:0.999278
.	O	O:0.999937
	
The	O	O:0.999794
covariance	O	O:0.999867
matrix	O	O:0.999975
of	O	O:0.999998
a	O	O:0.999987
dataset	O	O:0.999603
A	O	O:0.999754
is	O	O:0.999972
:	O	O:0.999887
1	O	O:0.999900
/(	O	O:0.999979
N-1	O	O:0.999698
)	O	O:0.999961
*	O	O:0.999969
AA^T	O	O:0.999654
	
I	O	O:0.999992
have	O	O:0.999992
a	O	O:0.999976
large	O	O:0.988368
(	O	O:0.999941
500k	O	O:0.999517
by	O	O:0.999962
500k	O	O:0.999033
)	O	O:0.999931
,	O	O:0.999966
sparse	O	O:0.999058
matrix	O	O:0.998864
.	O	O:0.999804
	
I	O	O:0.999961
can't	O	O:0.999947
comment	O	O:0.999831
on	O	O:0.999998
a	O	O:0.999995
numpy	O	O:0.999905
array	O	O:0.999983
as	O	O:0.999974
I	O	O:0.999907
haven't	O	O:0.999915
used	O	O:0.999170
one	O	O:0.999917
before	O	O:0.998922
,	O	O:0.999985
but	O	O:0.999961
for	O	O:0.999994
using	O	O:0.999932
a	O	O:0.999966
list	O	O:0.992252
of	O	O:0.999981
lists	O	O:0.997430
Python	O	O:0.999687
already	O	O:0.999907
has	O	O:0.999951
built	O	O:0.999238
in	O	O:0.999950
support	O	O:0.994228
.	O	O:0.999870
	
If	O	O:0.999827
`	O	O:0.999992
finer_fxy	O	O:0.973866
`	O	O:0.999980
is	O	O:0.999972
stored	O	O:0.998927
in	O	O:0.999976
the	O	O:0.999981
probably-default	O	O:0.991897
`	O	O:0.999982
float64	O	O:0.991179
`	O	O:0.999994
s	O	O:0.998172
,	O	O:0.999999
this	O	O:0.999837
would	O	O:0.999994
take	O	O:0.999986
about	O	O:0.999990
64	O	O:0.999985
GiB	O	O:0.999750
of	O	O:0.999963
memory	O	O:0.998152
;	O	O:0.999993
not	O	O:0.999947
surprising	O	O:0.999958
that	O	O:0.999799
you're	O	O:0.999964
running	O	O:0.999751
out	O	O:0.999816
.	O	O:0.999878
	
Sebastian's	O	O:0.999265
solution	O	O:0.999643
for	O	O:0.999997
a	O	O:0.999982
way	O	O:0.998919
around	O	O:0.999622
the	O	O:0.999959
integer-values-only	O	O:0.995422
restriction	O	O:0.998369
and	O	O:0.999992
big-values	O	O:0.998477
problem	O	O:0.997800
.	O	O:0.999835
	
This	O	O:0.999649
allows	O	O:0.999830
the	O	O:0.999992
column	O	O:0.999819
to	O	O:0.999995
hold	O	O:0.999994
float	O	O:0.999916
values	O	O:0.999827
at	O	O:0.999993
first	O	O:0.999821
,	O	O:0.999980
and	O	O:0.999997
strings	O	O:0.998879
later	O	O:0.998784
.	O	O:0.999935
	
Efficient	O	O:0.999722
slicing	O	O:0.999808
of	O	O:0.999987
matrices	O	O:0.999511
using	O	O:0.999903
matrix	O	O:0.998974
multiplication	O	O:0.999325
,	O	O:0.999992
with	O	O:0.999915
Python	O	O:0.999357
,	O	O:0.999997
NumPy	O	O:0.999596
,	O	O:0.999943
SciPy	O	O:0.999037
	
Is	O	O:0.999985
there	O	O:0.999977
a	O	O:0.999999
more	O	O:0.999303
compact	O	O:0.999741
way	O	O:0.999979
to	O	O:0.999988
operate	O	O:0.999991
on	O	O:0.999992
array	O	O:0.999991
elements	O	O:0.999942
,	O	O:0.999977
without	O	O:0.999957
having	O	O:0.999678
to	O	O:0.999923
use	O	O:0.999995
the	O	O:0.999960
standard	O	O:0.998527
for	O	O:0.999963
loop	O	O:0.998820
.?	O	O:0.668253
	
Please	O	O:0.999770
look	O	O:0.998964
at	O	O:0.999998
this	O	O:0.999514
answer	O	O:0.999653
:	O	O:0.999859
#URL	O	O:0.999144
	
When	O	O:0.999326
I	O	O:0.999988
tried	O	O:0.999985
this	O	O:0.999709
,	O	O:0.999989
I	O	O:0.999983
got	O	O:0.999997
sort	O	O:0.999346
of	O	O:0.999992
similar	O	O:0.999804
shaped	O	O:0.999857
"	O	O:0.999989
tiles	O	O:0.999409
"	O	O:0.999992
of	O	O:0.999993
different	O	O:0.999920
colors	O	O:0.999201
rather	O	O:0.999979
than	O	O:0.999559
3	O	O:0.999902
Gaussian	O	O:0.999293
humps	O	O:0.999604
.	O	O:0.999861
	
I	O	O:0.999964
created	O	O:0.999845
the	O	O:0.999962
first	O	O:0.999768
array	O	O:0.999965
like	O	O:0.999892
this	O	O:0.999682
:	O	O:0.999971
	
(	O	O:0.999870
Note	O	O:0.999992
that	O	O:0.999934
I	O	O:0.999998
can't	O	O:0.999977
imagine	O	O:0.999907
any	O	O:0.999978
reason	O	O:0.999315
why	O	O:0.999983
this	O	O:0.999904
should	O	O:0.999983
be	O	O:0.999996
necessary	O	O:0.999985
.	O	O:0.999921
)	O	O:0.999956
	
SOLUTION	O	O:0.995623
:	O	O:0.999966
i	O	O:0.999989
have	O	O:0.999995
some	O	O:0.999942
scattered	O	O:0.999897
points	O	O:0.996865
(	O	O:0.999967
i	O	O:0.999974
don't	O	O:0.999965
know	O	O:0.999551
how	O	O:0.999996
many	O	O:0.999666
)	O	O:0.999973
and	O	O:0.999980
i	O	O:0.999985
want	O	O:0.999732
to	O	O:0.999947
reduce	O	O:0.999978
it	O	O:0.999990
to	O	O:0.999999
a	O	O:0.999999
8	O	O:0.999682
meaning	O	O:0.999484
point	O	O:0.999737
.	O	O:0.999996
one	O	O:0.999996
of	O	O:0.999985
the	O	O:0.999966
technique	O	O:0.999976
i	O	O:0.999975
can	O	O:0.999974
use	O	O:0.999987
is	O	O:0.999978
to	O	O:0.999985
clusterize	O	O:0.999999
them	O	O:0.999894
with	O	O:0.999997
some	O	O:0.999938
cluster	O	O:0.999664
algorithms	O	O:0.999795
.	O	O:0.999861
	
that	O	O:0.999812
blas	O	O:0.995360
is	O	O:0.999990
reference	O	O:0.999919
blas	O	O:0.999410
from	O	O:0.999945
netlib	O	O:0.999098
-	O	O:0.999995
the	O	O:0.999966
slowest	O	O:0.999597
blas	O	O:0.992743
around	O	O:0.999636
.	O	O:0.999893
install	O	O:0.999618
atlas	O	O:0.998418
or	O	O:0.999951
mkl	O	O:0.999024
instead	O	O:0.999918
.	O	O:0.999886
	
EDIT	O	O:0.995475
:	O	O:0.999949
Answer	O	O:0.999909
updated	O	O:0.999816
for	O	O:0.999988
a	O	O:0.999953
2D	O	O:0.998617
array	O	O:0.999649
.	O	O:0.999693
	
But	O	O:0.999949
you	O	O:0.999995
lose	O	O:0.999937
a	O	O:0.999999
lot	O	O:0.999829
of	O	O:0.999990
NumPy	O	O:0.999204
power	O	O:0.999894
that	O	O:0.999209
way	O	O:0.999959
.	O	O:0.999896
	
Because	O	O:0.999838
I	O	O:0.999993
view	O	O:0.998992
doesn't	O	O:0.999789
really	O	O:0.999939
have	O	O:0.999980
to	O	O:0.999995
do	O	O:0.999999
with	O	O:0.999983
filtering	O	O:0.997177
,	O	O:0.999994
but	O	O:0.999967
rather	O	O:0.999926
with	O	O:0.999991
different	O	O:0.999966
representation	O	O:0.999883
of	O	O:0.999989
the	O	O:0.999996
same	O	O:0.999990
data	O	O:0.999809
.	O	O:0.999963
	
@USER	O	O:0.996878
,	O	O:0.999980
not	O	O:0.999979
sure	O	O:0.999974
what	O	O:0.999938
you	O	O:0.999998
mean	O	O:0.999993
by	O	O:0.999981
"	O	O:0.999993
changing	O	O:0.999784
original	O	O:0.999562
values	O	O:0.998384
"	O	O:0.999919
.	O	O:0.999874
	
this	O	O:0.999689
could	O	O:0.999985
also	O	O:0.999997
be	O	O:1.000000
achieved	O	O:0.999924
elegantly	O	O:0.999649
with	O	O:0.999836
numpy's	O	O:0.998465
`	O	O:0.999995
where	O	O:0.999394
`	O	O:0.999953
function	O	O:0.999450
	
I	O	O:0.999989
need	O	O:0.999985
to	O	O:0.999997
specify	O	O:0.999994
datatypes	O	O:0.999698
for	O	O:0.999974
all	O	O:0.999984
numerical	O	O:0.999224
types	O	O:0.999631
since	O	O:0.999914
I	O	O:0.999999
care	O	O:0.999987
about	O	O:0.999699
int	O	O:0.996216
8/	O	O:0.999768
16	O	O:0.999267
/	O	O:0.999930
32	O	O:0.999915
,	O	O:0.999983
etc	O	O:0.999676
,	O	O:0.999991
but	O	O:0.999980
I	O	O:0.999986
would	O	O:0.999998
like	O	O:0.999944
to	O	O:0.999999
benefit	O	O:0.999997
from	O	O:0.999963
the	O	O:0.999984
auto	O	O:0.999564
string	O	O:0.999847
length	O	O:0.998241
detection	O	O:0.999719
that	O	O:0.999881
works	O	O:0.999990
if	O	O:0.999992
I	O	O:0.999988
don't	O	O:0.999993
specify	O	O:0.998315
datatypes	O	O:0.999354
.	O	O:0.999758
	
In	O	O:0.999945
the	O	O:0.999982
following	O	O:0.999834
trivial	O	O:0.996857
function	O	O:0.999975
,	O	O:0.999995
I	O	O:0.999999
have	O	O:0.999964
declared	O	O:0.999712
the	O	O:0.999995
numpy	O	O:0.999695
array	O	O:0.999897
argument	O	O:0.999777
`	O	O:0.999985
arr	O	O:0.998065
`	O	O:0.999997
using	O	O:0.999144
the	O	O:0.999690
buffer	O	O:0.988859
syntax	O	O:0.999329
.	O	O:0.999796
	
I	O	O:0.999944
remember	O	O:0.999889
that	O	O:0.999664
there	O	O:0.999942
was	O	O:0.999994
a	O	O:0.999996
smart	O	O:0.999302
trick	O	O:0.999937
about	O	O:0.999973
turning	O	O:0.999345
on	O	O:0.999896
and	O	O:0.999992
off	O	O:0.999991
the	O	O:0.999970
right	O	O:0.999892
intersections	O	O:0.999963
of	O	O:0.999998
rows	O	O:0.999607
and	O	O:0.999999
columns	O	O:0.999987
to	O	O:0.999996
turn	O	O:0.999985
off	O	O:0.999983
one-by-one	O	O:0.999825
all	O	O:0.999966
the	O	O:0.999987
lightbulbs	O	O:0.985059
,	O	O:0.999963
but	O	O:0.999975
it	O	O:0.999990
wont	O	O:0.999994
come	O	O:0.999990
back	O	O:0.999943
to	O	O:0.999993
my	O	O:0.999995
mind	O	O:0.999799
...	O	O:0.999746
	
However	O	O:0.999952
this	O	O:0.999943
code	O	O:0.999749
is	O	O:0.999997
to	O	O:0.999994
slow	O	O:0.999964
in	O	O:0.999994
the	O	O:0.999991
current	O	O:0.999494
version	O	O:0.999723
,	O	O:0.999987
and	O	O:0.999996
I	O	O:0.999987
am	O	O:0.999991
wondering	O	O:0.999165
wheater	O	O:0.999779
there	O	O:0.999772
is	O	O:0.999998
a	O	O:0.999986
faster	O	O:0.997338
solution	O	O:0.999550
.	O	O:0.999935
thanks	O	O:0.999037
!	O	O:0.999897
	
This	O	O:0.999414
would	O	O:0.999981
probably	O	O:0.999978
be	O	O:0.999998
the	O	O:0.999996
most	O	O:0.999302
efficient	O	O:0.999876
way	O	O:0.999986
to	O	O:0.999996
access	O	O:0.999992
a	O	O:0.999996
numpy	O	O:0.999468
array	O	O:0.999980
stored	O	O:0.999648
on	O	O:0.999983
disk	O	O:0.998849
.	O	O:0.999956
	
hmmmmm	O	O:0.996099
,	O	O:0.999990
probably	O	O:0.999827
it	O	O:0.999988
will	O	O:0.999965
help	O	O:0.999986
some	O	O:0.999979
others	O	O:0.999957
to	O	O:0.999998
sort	O	O:0.999998
dictionarys	O	O:0.999926
or	O	O:0.999996
to	O	O:0.999998
prevent	O	O:0.999992
from	O	O:0.999981
using	O	O:0.999924
commands	O	O:0.999858
like	O	O:0.999515
sorted	O	O:0.999775
=	O	O:0.999792
sorted	O	O:0.986696
(	O	O:0.999982
...	O	O:0.999662
)	O	O:0.999941
.	O	O:0.999824
	
The	O	O:0.999902
ticket	O	O:0.999912
simply	O	O:0.999982
spoke	O	O:0.999932
of	O	O:0.999990
random	O	O:0.998707
number	O	O:0.999960
seeding	O	O:0.999367
with	O	O:0.999923
64-bit	O	O:0.999535
,	O	O:0.999996
perhaps	O	O:0.999966
its	O	O:0.999986
referring	O	O:0.999945
to	O	O:0.999994
a	O	O:1.000000
different	O	O:0.999805
random	O	O:0.998827
number	O	O:0.999723
generator	O	O:0.999543
.	O	O:0.999936
	
Not	O	O:0.999970
really	O	O:0.999923
elegant	O	O:0.999809
at	O	O:0.999972
all	O	O:0.999919
but	O	O:0.999986
you	O	O:0.999971
can	O	O:0.999993
get	O	O:0.999999
close	O	O:0.999962
to	O	O:0.999999
what	O	O:0.999997
you	O	O:0.999996
want	O	O:0.999997
using	O	O:0.999987
a	O	O:0.999986
tuple	O	O:0.997162
to	O	O:0.999995
store	O	O:0.999961
pointers	O	O:0.999849
to	O	O:0.999994
the	O	O:0.999999
arrays	O	O:0.999137
.	O	O:0.999852
	
For	O	O:0.999953
example	O	O:0.999752
I	O	O:0.999988
am	O	O:0.999998
looking	O	O:0.998914
for	O	O:0.999875
4.2	O	O:0.995608
but	O	O:0.999931
I	O	O:0.999997
know	O	O:0.999894
in	O	O:0.999948
the	O	O:0.999958
array	O	O:0.999956
there	O	O:0.999425
is	O	O:0.999990
no	O	O:0.999842
4.2	O	O:0.999033
but	O	O:0.999959
I	O	O:0.999996
want	O	O:0.999975
to	O	O:0.999918
return	O	O:0.999913
the	O	O:0.999985
index	O	O:0.999937
of	O	O:0.999996
the	O	O:0.999993
value	O	O:0.999951
4.1	O	O:0.999556
instead	O	O:0.999981
of	O	O:0.999969
4.4	O	O:0.996890
.	O	O:0.999903
	
Print	O	O:0.996043
'	O	O:0.999972
Length	O	O:0.999956
of	O	O:0.999987
together	O	O:0.993958
'	O	O:0.999997
goes	O	O:0.999858
just	O	O:0.999805
before	O	O:0.999913
the	O	O:0.999845
matrix	O	O:0.999243
line	O	O:0.999378
.	O	O:0.999921
	
solve	O	O:0.999448
a	O	O:0.999989
nonlinear	O	O:0.997957
equation	O	O:0.999660
at	O	O:0.999990
several	O	O:0.999798
intermediate	O	O:0.999954
points	O	O:0.999815
of	O	O:0.999995
a	O	O:0.999981
calculation	O	O:0.998511
,	O	O:0.999995
not	O	O:0.999997
just	O	O:0.999970
as	O	O:0.999999
the	O	O:0.999998
final	O	O:0.998625
result	O	O:0.999799
.	O	O:0.999875
	
Find	O	O:0.999375
where	O	O:0.999806
they're	O	O:0.999967
located	O	O:0.999797
at	O	O:0.999887
(	O	O:0.999958
assumes	O	O:0.999931
the	O	O:0.999992
data	O	O:0.998907
is	O	O:0.999984
sorted	O	O:0.998744
!!	O	O:0.999465
):	O	O:0.999793
#CODE	O	O:0.999534
	
You	O	O:0.999924
need	O	O:0.999926
Python	O	O:0.999912
to	O	O:0.999999
keep	O	O:0.999994
track	O	O:0.999840
of	O	O:0.999999
your	O	O:0.999826
vector	O	O:0.999935
so	O	O:0.999994
that	O	O:0.999965
it	O	O:0.999998
can	O	O:0.999994
be	O	O:0.999999
deleted	O	O:0.999949
*	O	O:0.999971
after	O	O:0.999759
*	O	O:0.999975
the	O	O:0.999977
numpy	O	O:0.999460
array	O	O:0.999741
.	O	O:0.999830
	
I	O	O:0.999977
find	O	O:0.999979
that	O	O:0.999897
I	O	O:1.000000
have	O	O:0.999992
to	O	O:0.999985
first	O	O:0.999995
build	O	O:0.999585
a	O	O:0.999985
list	O	O:0.988943
and	O	O:0.999997
then	O	O:0.999860
cast	O	O:0.997808
it	O	O:0.999981
(	O	O:0.999996
using	O	O:0.999885
"	O	O:0.999899
array	O	O:0.999364
")	O	O:0.999954
to	O	O:0.999942
an	O	O:0.999998
array	O	O:0.999877
.	O	O:0.999840
	
I	O	O:0.999993
have	O	O:0.999982
an	O	O:0.999985
numpy	O	O:0.999946
one	O	O:0.999986
dimensional	O	O:0.999724
array	O	O:0.999954
c	O	O:0.999948
that	O	O:0.999771
is	O	O:0.999997
supposed	O	O:0.999951
to	O	O:0.999996
be	O	O:0.999999
filled	O	O:0.999754
with	O	O:0.999898
the	O	O:0.999996
contents	O	O:0.999777
of	O	O:0.999952
	
but	O	O:0.999927
the	O	O:0.999985
issue	O	O:0.999763
now	O	O:0.999922
,	O	O:0.999999
when	O	O:0.999932
I	O	O:0.999992
am	O	O:1.000000
trying	O	O:0.999591
to	O	O:0.999996
save	O	O:0.999954
the	O	O:0.999998
name	O	O:0.999967
of	O	O:0.999989
the	O	O:0.999997
file	O	O:0.999981
as	O	O:0.999999
well	O	O:0.999812
in	O	O:0.999995
the	O	O:0.999974
csv	O	O:0.999924
file	O	O:0.999941
like	O	O:0.999945
this	O	O:0.999788
:	O	O:0.999979
#CODE	O	O:0.999843
	
After	O	O:0.999741
you	O	O:0.999923
do	O	O:0.999995
this	O	O:0.999991
no	O	O:0.999991
matter	O	O:0.999975
where	O	O:0.999970
the	O	O:0.999966
template	O	O:0.999826
object	O	O:0.999760
is	O	O:0.999988
in	O	O:0.999992
a	O	O:0.999976
calculation	O	O:0.997897
.	O	O:0.999924
	
So	O	O:0.999963
the	O	O:0.999982
easiest	O	O:0.999747
thing	O	O:0.999937
to	O	O:0.999989
do	O	O:0.999997
would	O	O:0.999986
be	O	O:0.999997
to	O	O:1.000000
take	O	O:0.999996
a	O	O:0.999999
sample	O	O:0.999752
of	O	O:0.999994
say	O	O:0.999897
,	O	O:0.999997
1000	O	O:0.999655
points	O	O:0.999599
,	O	O:0.999996
from	O	O:0.999999
your	O	O:0.999946
data	O	O:0.999611
:	O	O:0.999988
#CODE	O	O:0.999908
	
Your	O	O:0.999634
array	O	O:0.999984
consists	O	O:0.999625
of	O	O:0.999864
:	O	O:0.999903
#CODE	O	O:0.999914
	
The	O	O:0.999954
final	O	O:0.998352
DF	O	O:0.999997
should	O	O:0.999977
have	O	O:0.999980
as	O	O:1.000000
many	O	O:0.999989
columns	O	O:0.999956
as	O	O:0.999997
all	O	O:0.999987
the	O	O:0.999994
df	O	O:0.999889
columns	O	O:0.999945
added	O	O:0.999948
together	O	O:0.999855
,	O	O:0.999992
so	O	O:0.999976
it	O	O:0.999983
grow	O	O:0.999749
additively	O	O:0.998262
and	O	O:0.999978
not	O	O:0.999927
be	O	O:0.999972
combinatorial	O	O:0.997273
.	O	O:0.999540
	
I'm	O	O:0.999892
sorting	O	O:0.999866
the	O	O:0.999997
cells	O	O:0.999752
of	O	O:0.999989
the	O	O:0.999989
matrix	O	O:0.999976
by	O	O:0.999961
the	O	O:0.999990
float	O	O:0.997921
value	O	O:0.999890
,	O	O:0.999996
producing	O	O:0.999963
a	O	O:0.999994
list	O	O:0.999124
of	O	O:0.999956
`	O	O:0.999870
(	O	O:0.999966
row	O	O:0.999943
,	O	O:0.999984
col	O	O:0.999581
,	O	O:0.999996
value	O	O:0.999958
)`	O	O:0.999918
tuples	O	O:0.998699
.	O	O:0.999910
	
Is	O	O:0.999946
it	O	O:0.999985
essential	O	O:0.999937
that	O	O:0.999977
you	O	O:0.999999
need	O	O:0.999997
a	O	O:0.999999
numpy	O	O:0.999690
array	O	O:0.999881
?	O	O:0.999902
	
Mh	O	O:0.997403
.	O	O:0.999804
but	O	O:0.999984
look	O	O:0.999524
at	O	O:0.999995
this	O	O:0.999018
:	O	O:0.999961
	
All	O	O:0.999889
variables	O	O:0.999504
are	O	O:0.999993
dependent	O	O:0.999922
on	O	O:0.999989
each	O	O:0.999701
other	O	O:0.999936
and	O	O:0.999994
I	O	O:0.999987
am	O	O:0.999994
only	O	O:0.999847
looking	O	O:0.999894
for	O	O:0.999970
local	O	O:0.999401
minima	O	O:0.999902
from	O	O:0.999681
the	O	O:0.999976
initial	O	O:0.999359
guess	O	O:0.999169
.	O	O:0.999868
	
The	O	O:0.999924
basic	O	O:0.999601
idea	O	O:0.999092
is	O	O:0.999982
to	O	O:0.999993
simply	O	O:0.999996
run	O	O:0.999877
all	O	O:0.999977
the	O	O:0.999997
usual	O	O:0.999961
steps	O	O:0.999967
of	O	O:0.999998
a	O	O:0.999996
root	O	O:0.999688
finder	O	O:0.999615
in	O	O:0.999994
parallel	O	O:0.999849
on	O	O:0.999996
a	O	O:0.999996
vector	O	O:0.999975
of	O	O:0.999991
variables	O	O:0.999183
,	O	O:0.999999
using	O	O:0.999995
a	O	O:0.999481
function	O	O:0.999779
that	O	O:0.999925
can	O	O:0.999992
be	O	O:1.000000
evaluated	O	O:0.999982
on	O	O:0.999990
a	O	O:0.999996
vector	O	O:0.999964
of	O	O:0.999985
variables	O	O:0.997366
and	O	O:0.999995
equivalent	O	O:0.999525
vector	O	O:0.997027
(	O	O:0.999983
s	O	O:0.999960
)	O	O:0.999996
of	O	O:0.999986
parameters	O	O:0.999675
that	O	O:0.999978
define	O	O:0.999904
the	O	O:0.999995
individual	O	O:0.999361
component	O	O:0.999691
functions	O	O:0.999703
.	O	O:0.999878
	
Hence	O	O:0.999799
,	O	O:0.999989
with	O	O:0.999966
NetworkX	O	O:0.999730
,	O	O:0.999997
you	O	O:0.999984
can	O	O:0.999995
put	O	O:0.999993
in	O	O:0.999997
an	O	O:0.999985
adjacency	O	O:0.999757
matrix	O	O:0.998621
and	O	O:0.999990
find	O	O:0.999907
out	O	O:0.999900
which	O	O:0.999952
authors	O	O:0.999761
are	O	O:0.999990
clustered	O	O:0.999876
together	O	O:0.999087
.	O	O:0.999878
	
The	O	O:0.999886
issue	O	O:0.999958
your	O	O:0.999766
having	O	O:0.999540
more	O	O:0.999826
likely	O	O:0.998410
is	O	O:0.999995
a	O	O:0.999974
python	O	O:0.999506
mmap	O	O:0.988686
issue	O	O:0.999835
,	O	O:0.999989
since	O	O:0.999922
python	O	O:0.999929
mmaps	O	O:0.999988
handle	O	O:0.999852
all	O	O:0.999977
the	O	O:0.999963
memory	O	O:0.999446
mapping	O	O:0.998296
and	O	O:0.999992
file	O	O:0.999944
closing	O	O:0.997933
for	O	O:0.999977
numpy	O	O:0.999061
memmaps	O	O:0.996497
.	O	O:0.999712
	
So	O	O:0.999935
far	O	O:0.999878
,	O	O:0.999993
I'm	O	O:0.999971
sticking	O	O:0.999166
with	O	O:0.999862
C++	O	O:0.999902
-	O	O:0.999993
on	O	O:0.999992
my	O	O:0.999994
tests	O	O:0.999958
,	O	O:0.999998
at	O	O:0.999999
least	O	O:0.999672
2	O	O:0.999994
orders	O	O:0.999650
of	O	O:0.999987
magnitude	O	O:0.999852
faster	O	O:0.999393
!	O	O:0.999902
	
Sorting	O	O:0.999886
ends	O	O:0.998483
up	O	O:0.999972
being	O	O:0.999603
the	O	O:0.999969
slowest	O	O:0.997548
step	O	O:0.999654
but	O	O:0.999954
it's	O	O:0.999973
still	O	O:0.999834
faster	O	O:0.999940
if	O	O:0.999979
m	O	O:0.999578
is	O	O:0.999988
large	O	O:0.998822
because	O	O:0.999821
the	O	O:0.999805
n*log	O	O:0.962090
(	O	O:0.999982
n	O	O:0.999933
)	O	O:0.999997
sort	O	O:0.995811
is	O	O:0.999985
faster	O	O:0.999141
than	O	O:0.997715
(	O	O:0.999972
n*m	O	O:0.999639
)	O	O:0.999952
.	O	O:0.999821
	
Basically	O	O:0.999869
,	O	O:0.999992
I	O	O:0.999989
am	O	O:0.999997
getting	O	O:0.999570
a	O	O:0.999992
memory	O	O:0.999744
error	O	O:0.999646
in	O	O:0.999984
python	O	O:0.999823
when	O	O:0.999947
trying	O	O:0.999955
to	O	O:0.999998
perform	O	O:0.999932
an	O	O:0.999993
algebraic	O	O:0.999935
operation	O	O:0.999916
on	O	O:0.999992
a	O	O:0.999994
numpy	O	O:0.999104
matrix	O	O:0.999367
.	O	O:0.999817
	
Surely	O	O:0.999881
there	O	O:0.999950
must	O	O:0.999965
be	O	O:0.999999
a	O	O:0.999998
way	O	O:0.999849
to	O	O:0.999994
populate	O	O:0.999994
a	O	O:0.999995
boost	O	O:0.992039
::	O	O:0.999982
python	O	O:0.997793
::	O	O:0.999977
numeric	O	O:0.994632
::	O	O:0.999962
array	O	O:0.999986
with	O	O:0.999982
data	O	O:0.999984
from	O	O:0.999995
a	O	O:0.999997
simple	O	O:0.999219
std	O	O:0.994091
::	O	O:0.999948
vector	O	O:0.999705
without	O	O:0.999792
having	O	O:0.999547
to	O	O:0.999959
get	O	O:0.999998
some	O	O:0.999955
3rd	O	O:0.999969
party	O	O:0.999710
library	O	O:0.999471
.	O	O:0.999823
	
Here	O	O:0.999740
again	O	O:0.999977
a	O	O:0.999977
if	O	O:0.999772
statement	O	O:0.999952
could	O	O:0.999916
do	O	O:0.999988
,	O	O:0.999996
but	O	O:0.999967
I	O	O:0.999987
am	O	O:0.999998
wondering	O	O:0.999160
if	O	O:0.999993
there	O	O:0.999765
is	O	O:0.999995
a	O	O:0.999983
workarouns	O	O:0.994994
and	O	O:0.999996
a	O	O:0.999988
Python	O	O:0.995410
library	O	O:0.999929
where	O	O:0.999862
negative	O	O:0.999800
exposant	O	O:0.998459
is	O	O:0.999970
allowed	O	O:0.999267
.	O	O:0.999880
	
The	O	O:0.999885
key	O	O:0.999958
point	O	O:0.999940
here	O	O:0.998523
is	O	O:0.999995
that	O	O:0.999722
Tabular	O	O:0.999775
and	O	O:0.999990
NumPy	O	O:0.999854
set	O	O:0.999321
certain	O	O:0.999665
standards	O	O:0.999470
for	O	O:0.999993
what	O	O:0.999971
counts	O	O:0.999771
as	O	O:0.999992
"	O	O:0.999988
fast	O	O:0.998717
"	O	O:0.999987
or	O	O:0.999936
"	O	O:0.999985
slow	O	O:0.997396
"	O	O:0.999949
--	O	O:0.999908
and	O	O:0.999994
then	O	O:0.999961
,	O	O:0.999999
force	O	O:0.999894
you	O	O:0.999980
to	O	O:0.999997
be	O	O:1.000000
explicit	O	O:0.999975
about	O	O:0.999830
operations	O	O:0.999854
that	O	O:0.999571
are	O	O:0.999999
going	O	O:0.999882
to	O	O:0.999984
be	O	O:0.999998
slow	O	O:0.999262
.	O	O:0.999811
	
Asume	O	O:0.999615
that	O	O:0.999986
your	O	O:0.999977
numpy	O	O:0.999870
module	O	O:0.999742
is	O	O:0.999987
located	O	O:0.999305
at	O	O:0.999937
/	O	O:0.999873
Users	O	O:0.998557
/	O	O:0.999868
Me	O	O:0.999597
/	O	O:0.999960
python	O	O:0.999129
/	O	O:0.999976
modules	O	O:0.998844
directory	O	O:0.999725
.	O	O:0.999872
	
I	O	O:0.999843
am	O	O:0.999991
not	O	O:0.999972
responsible	O	O:0.999956
from	O	O:0.999955
any	O	O:0.999974
brain	O	O:0.999953
damage	O	O:0.999963
resulting	O	O:0.999866
from	O	O:0.999961
attempting	O	O:0.999443
to	O	O:0.999954
understand	O	O:0.999993
this	O	O:0.999925
code	O	O:0.999343
.	O	O:0.999956
	
There	O	O:0.999922
a	O	O:0.999998
plenty	O	O:0.999835
of	O	O:0.999994
places	O	O:0.999853
where	O	O:0.999949
you're	O	O:0.999916
inadvertently	O	O:0.999925
creating	O	O:0.999926
additional	O	O:0.999626
temporary	O	O:0.999670
arrays	O	O:0.998257
,	O	O:0.999906
but	O	O:0.999937
they're	O	O:0.999923
mostly	O	O:0.999873
irrelevant	O	O:0.999935
,	O	O:0.999980
as	O	O:0.999988
they're	O	O:0.999907
overwhelmed	O	O:0.999889
by	O	O:0.999989
what	O	O:0.999972
goes	O	O:0.999645
on	O	O:0.999997
during	O	O:0.999810
the	O	O:0.999989
call	O	O:0.997239
to	O	O:0.999991
`	O	O:0.999996
select	O	O:0.918174
`	O	O:0.999989
.	O	O:0.999687
	
The	O	O:0.999930
fact	O	O:0.999919
that	O	O:0.999939
you	O	O:0.999992
are	O	O:0.999999
using	O	O:0.999920
`	O	O:0.999681
object	O	O:0.986846
`	O	O:0.999979
arrays	O	O:0.960104
(	O	O:0.999976
not	O	O:0.999982
very	O	O:0.999678
common	O	O:0.997198
and	O	O:0.999985
not	O	O:0.999974
very	O	O:0.999750
memory-efficient	O	O:0.999329
)	O	O:0.999983
presents	O	O:0.999906
a	O	O:0.999998
particular	O	O:0.999524
problem	O	O:0.999871
when	O	O:0.999932
trying	O	O:0.999979
to	O	O:0.999999
determine	O	O:0.999863
the	O	O:0.999990
index	O	O:0.999783
of	O	O:0.999986
non-None	O	O:0.999841
array	O	O:0.999983
items	O	O:0.999224
.	O	O:0.999781
	
where	O	O:0.999852
things	O	O:0.999918
improve	O	O:0.999886
as	O	O:0.999996
the	O	O:0.999983
number	O	O:0.999857
of	O	O:0.999987
bits	O	O:0.999792
increases	O	O:0.999760
.	O	O:0.999915
	
Really	O	O:0.999204
,	O	O:0.999978
4D	O	O:0.999912
arrays	O	O:0.999419
are	O	O:0.999992
just	O	O:0.999902
1D	O	O:0.999988
arrays	O	O:0.998933
in	O	O:0.999972
memory	O	O:0.999789
anyway	O	O:0.999164
(	O	O:0.999986
Unless	O	O:0.999942
you	O	O:0.999990
really	O	O:0.999986
have	O	O:0.999952
view	O	O:0.999115
objects	O	O:0.999740
,	O	O:0.999909
but	O	O:0.999969
it	O	O:0.999972
should	O	O:0.999982
still	O	O:0.999986
work	O	O:0.999973
with	O	O:0.999995
those	O	O:0.999986
as	O	O:0.999999
well	O	O:0.999589
)	O	O:0.999982
	
I'll	O	O:0.999186
add	O	O:0.999912
comments	O	O:0.999791
to	O	O:0.999987
explain	O	O:0.999982
things	O	O:0.999859
in	O	O:0.999996
a	O	O:0.999992
bit	O	O:0.998686
.	O	O:0.999839
	
I	O	O:0.999939
was	O	O:0.999980
assuming	O	O:0.999867
that	O	O:0.999932
the	O	O:0.999989
rgb	O	O:0.999207
and	O	O:0.999987
ycc	O	O:0.999597
matrices	O	O:0.999208
were	O	O:0.999965
just	O	O:0.999964
a	O	O:0.999996
matrix	O	O:0.999412
that	O	O:0.999916
had	O	O:0.999982
as	O	O:1.000000
many	O	O:0.999982
rows	O	O:0.999832
as	O	O:0.999991
pixels	O	O:0.999550
and	O	O:0.999998
a	O	O:0.999999
column	O	O:0.998305
per	O	O:0.999945
colour	O	O:0.999391
component	O	O:0.999493
.	O	O:0.999875
	
For	O	O:0.999920
example	O	O:0.999780
,	O	O:0.999997
suppose	O	O:0.999940
`	O	O:0.999998
a	O	O:0.999972
=	O	O:0.999921
ones	O	O:0.999297
((	O	O:0.999162
3	O	O:0.999973
,	O	O:0.999947
3	O	O:0.999921
))`	O	O:0.997786
.	O	O:0.999821
	
Therefore	O	O:0.999809
,	O	O:0.999984
n	O	O:0.999902
and	O	O:0.999987
m	O	O:0.999978
correspond	O	O:0.999701
to	O	O:0.999995
indices	O	O:0.999957
in	O	O:0.999985
the	O	O:0.999991
array	O	O:0.999742
,	O	O:0.999938
but	O	O:0.999835
I'm	O	O:0.999963
not	O	O:0.999994
sure	O	O:0.999904
how	O	O:0.999951
?	O	O:0.999967
	
Update	O	O:0.998398
:	O	O:0.999960
As	O	O:0.999996
mentioned	O	O:0.999884
in	O	O:0.999997
my	O	O:0.999981
comment	O	O:0.999848
below	O	O:0.999912
,	O	O:0.999989
I	O	O:0.999988
should	O	O:0.999989
have	O	O:0.999822
stated	O	O:0.999942
that	O	O:0.999884
I'm	O	O:0.999996
trying	O	O:0.999967
to	O	O:0.999978
do	O	O:0.999999
this	O	O:0.999969
on	O	O:0.999985
2D	O	O:0.999964
arrays	O	O:0.999741
,	O	O:0.999973
and	O	O:0.999998
therefore	O	O:0.999984
get	O	O:0.999995
a	O	O:1.000000
set	O	O:0.999749
of	O	O:0.999990
2D	O	O:0.999928
indices	O	O:0.999799
back	O	O:0.997574
.	O	O:0.999927
	
Need	O	O:0.999699
to	O	O:0.999989
add	O	O:0.999999
a	O	O:0.999998
check	O	O:0.998331
for	O	O:0.999997
that	O	O:0.999151
,	O	O:0.999994
but	O	O:0.999993
otherwise	O	O:0.999940
thanks	O	O:0.999555
!	O	O:0.999934
	
I	O	O:0.999986
think	O	O:0.999939
you	O	O:0.999963
just	O	O:0.999975
want	O	O:0.999978
`	O	O:0.999977
label	O	O:0.998811
==	O	O:0.999979
num	O	O:0.998262
`	O	O:0.999995
where	O	O:0.998609
`	O	O:0.999996
num	O	O:0.994020
`	O	O:0.999975
is	O	O:0.999982
the	O	O:0.999995
number	O	O:0.999876
of	O	O:0.999965
the	O	O:0.999979
object	O	O:0.999922
in	O	O:0.999928
`	O	O:0.999995
label	O	O:0.995625
`	O	O:0.999929
(	O	O:0.999936
the	O	O:0.999988
labeled	O	O:0.999212
array	O	O:0.999853
)	O	O:0.999952
.	O	O:0.999782
	
My	O	O:0.999923
question	O	O:0.998333
is	O	O:0.999991
how	O	O:0.999943
can	O	O:0.999988
I	O	O:1.000000
go	O	O:0.999999
thru	O	O:0.999549
the	O	O:0.999992
array	O	O:0.999970
to	O	O:0.999988
access	O	O:0.999976
the	O	O:0.999985
object	O	O:0.999702
in	O	O:0.999987
the	O	O:0.999985
array	O	O:0.999852
?	O	O:0.999909
	
The	O	O:0.999930
matrix	O	O:0.999411
in	O	O:0.999985
the	O	O:0.999994
example	O	O:0.999882
above	O	O:0.999558
is	O	O:0.999985
singular	O	O:0.990764
(	O	O:0.999985
determinant	O	O:0.999789
~	O	O:0.998968
0	O	O:0.999882
)	O	O:0.999949
.	O	O:0.999579
	
See	O	O:0.999700
the	O	O:0.999990
note	O	O:0.999644
at	O	O:0.999967
#URL	O	O:0.998943
	
would	O	O:0.999921
turn	O	O:0.999878
into	O	O:0.999837
either	O	O:0.999984
this	O	O:0.999502
array	O	O:0.999749
:	O	O:0.999946
#CODE	O	O:0.999750
	
Note	O	O:0.999892
that	O	O:0.999984
this	O	O:0.999952
is	O	O:0.999999
a	O	O:0.999978
bit	O	O:0.999924
more	O	O:0.999814
sophisticated	O	O:0.999785
than	O	O:0.999894
the	O	O:0.999993
simple	O	O:0.999541
do-it-yourself	O	O:0.999426
convolve-method	O	O:0.998453
,	O	O:0.999994
since	O	O:0.999919
it	O	O:0.999995
tries	O	O:0.999970
to	O	O:0.999992
handle	O	O:0.999990
the	O	O:0.999997
problems	O	O:0.999704
at	O	O:0.999992
the	O	O:0.999995
beginning	O	O:0.998815
and	O	O:0.999991
the	O	O:0.999996
end	O	O:0.999809
of	O	O:0.999996
the	O	O:0.999996
data	O	O:0.999994
by	O	O:0.999985
reflecting	O	O:0.999507
it	O	O:0.999599
(	O	O:0.999968
which	O	O:0.999975
may	O	O:0.999967
or	O	O:0.999990
may	O	O:0.999985
not	O	O:0.999998
work	O	O:0.999957
in	O	O:1.000000
your	O	O:0.999883
case	O	O:0.999956
...	O	O:0.999947
)	O	O:0.999940
.	O	O:0.999805
	
Usually	O	O:0.999856
,	O	O:0.999985
in	O	O:0.999993
numpy	O	O:0.999923
,	O	O:0.999998
you	O	O:0.999995
keep	O	O:0.999681
the	O	O:0.999998
string	O	O:0.999984
data	O	O:0.999931
in	O	O:0.999999
a	O	O:0.999999
separate	O	O:0.999011
array	O	O:0.999804
.	O	O:0.999820
	
Any	O	O:0.999708
idea	O	O:0.999601
what	O	O:0.999679
might	O	O:0.999964
be	O	O:0.999995
happening	O	O:0.999845
?	O	O:0.999805
	
but	O	O:0.999892
the	O	O:0.999984
size	O	O:0.998331
is	O	O:0.999980
wrong	O	O:0.999472
because	O	O:0.999863
i've	O	O:0.999891
assigned	O	O:0.999966
1000	O	O:0.999257
as	O	O:0.999975
the	O	O:0.999840
period	O	O:0.999491
size	O	O:0.999526
.	O	O:0.999900
	
This	O	O:0.998878
may	O	O:0.999974
not	O	O:0.999993
be	O	O:0.999998
perfectly	O	O:0.999822
pythonic	O	O:0.995202
(	O	O:0.999989
perhaps	O	O:0.999939
someone	O	O:0.999819
can	O	O:0.999995
think	O	O:0.999998
of	O	O:0.999999
a	O	O:0.999989
nicer	O	O:0.999679
implementation	O	O:0.999934
using	O	O:0.999972
generators	O	O:0.997932
or	O	O:0.999823
itertools	O	O:0.993343
?	O	O:0.999950
)	O	O:0.999899
but	O	O:0.999964
it	O	O:0.999929
is	O	O:0.999995
hard	O	O:0.999190
to	O	O:0.999992
imagine	O	O:0.999957
any	O	O:0.999909
method	O	O:0.999978
that	O	O:0.999951
relies	O	O:0.999940
on	O	O:0.999995
searching	O	O:0.999867
one	O	O:0.999993
point	O	O:0.999945
at	O	O:0.999999
a	O	O:0.999996
time	O	O:0.999646
beating	O	O:0.999951
this	O	O:0.999849
in	O	O:0.999972
speed	O	O:0.998600
.	O	O:0.999913
	
Thanks	O	O:0.999229
,	O	O:0.999998
your	O	O:0.999904
post	O	O:0.997878
helped	O	O:0.999976
me	O	O:0.999968
solve	O	O:0.999896
this	O	O:0.999850
problem	O	O:0.999511
.	O	O:0.999888
	
Now	O	O:0.999913
imagine	O	O:0.999948
that	O	O:0.999956
the	O	O:0.999997
next	O	O:0.999926
time	O	O:0.999985
step	O	O:0.999997
some	O	O:0.999991
values	O	O:0.999946
change	O	O:0.999403
,	O	O:0.999996
so	O	O:0.999892
should	O	O:0.999971
this	O	O:0.999975
picture	O	O:0.999928
.	O	O:0.999885
	
Since	O	O:0.999804
get_probability	O	O:0.995994
is	O	O:0.999998
a	O	O:0.999926
function	O	O:0.999782
,	O	O:0.999990
so	O	O:0.999996
what	O	O:0.999944
value	O	O:0.999811
is	O	O:0.999995
being	O	O:0.999711
passed	O	O:0.999654
to	O	O:0.999987
count	O	O:0.999945
parameter	O	O:0.999945
here	O	O:0.999433
???	O	O:0.999938
	
taking	O	O:0.999361
the	O	O:0.999966
sum	O	O:0.999296
for	O	O:0.999992
each	O	O:0.999611
column	O	O:0.999479
.	O	O:0.999935
	
You	O	O:0.999814
should	O	O:0.999922
be	O	O:0.999999
able	O	O:0.999991
to	O	O:0.999993
just	O	O:0.999995
load	O	O:0.999902
the	O	O:0.999992
entire	O	O:0.999776
thing	O	O:0.999921
into	O	O:0.999762
memory	O	O:0.999961
on	O	O:0.999986
a	O	O:0.999992
modern	O	O:0.998356
machine	O	O:0.999555
.	O	O:0.999765
	
What	O	O:0.999726
I	O	O:0.999997
want	O	O:0.999985
to	O	O:0.999927
do	O	O:0.999996
is	O	O:0.999998
to	O	O:0.999977
calculate	O	O:0.999979
the	O	O:0.999998
geographic	O	O:0.999510
distances	O	O:0.999952
between	O	O:0.999943
rows	O	O:0.999308
(	O	O:0.999987
with	O	O:0.999985
the	O	O:0.999989
special	O	O:0.999374
condition	O	O:0.999961
that	O	O:0.999966
the	O	O:0.999999
first	O	O:0.999808
element	O	O:0.998443
is	O	O:0.999990
always	O	O:0.999966
zero	O	O:0.999907
,	O	O:0.999990
at	O	O:0.999993
the	O	O:0.999986
starting	O	O:0.999766
point	O	O:0.999723
)	O	O:0.999976
.	O	O:0.999879
	
We	O	O:0.999976
can	O	O:0.999990
simply	O	O:0.999996
use	O	O:0.999996
the	O	O:0.999750
leastsq	O	O:0.840892
function	O	O:0.999929
to	O	O:0.999991
find	O	O:0.999993
the	O	O:0.999995
best	O	O:0.999507
coefficients	O	O:0.999010
.	O	O:0.999918
	
If	O	O:0.999901
the	O	O:0.999993
list	O	O:0.998856
of	O	O:0.999963
python	O	O:0.999631
objects	O	O:0.999857
doesn't	O	O:0.999930
grow	O	O:0.999537
at	O	O:0.999997
all	O	O:0.999977
from	O	O:0.999977
frame	O	O:0.999992
to	O	O:0.999997
frame	O	O:1.000000
,	O	O:0.999995
the	O	O:0.999991
leak	O	O:0.995777
is	O	O:0.999996
probably	O	O:0.999626
in	O	O:0.999996
the	O	O:0.999973
C	O	O:0.999951
code	O	O:0.999739
or	O	O:0.999994
the	O	O:0.999988
python-to-C	O	O:0.998162
link	O	O:0.999273
	
Any	O	O:0.999160
and	O	O:0.999981
all	O	O:0.999945
advice	O	O:0.996185
is	O	O:0.999941
greatly	O	O:0.997710
appreciated	O	O:0.999512
.	O	O:0.999538
	
Numpy	O	O:0.996062
:	O	O:0.999880
Is	O	O:0.999996
there	O	O:0.999985
an	O	O:0.999992
array	O	O:0.999987
size	O	O:0.999808
limit	O	O:0.997686
?	O	O:0.999970
	
Then	O	O:0.999324
do	O	O:0.999999
this	O	O:0.999956
after	O	O:0.999976
each	O	O:0.997039
calculation	O	O:0.999040
:	O	O:0.999991
for	O	O:0.999988
i	O	O:0.999916
in	O	O:0.999932
range	O	O:0.999306
(	O	O:0.999827
len	O	B-API:0.978376
(	O	O:0.999959
array	O	O:0.999273
)):	O	O:0.998707
array	O	O:0.999575
[	O	O:0.999966
i	O	O:0.999942
]	O	O:0.999898
[	O	O:0.999931
i	O	O:0.999988
]=	O	O:0.999899
0	O	O:0.999270
	
I	O	O:0.999982
know	O	O:0.999925
the	O	O:0.999985
random	O	O:0.994505
functions	O	O:0.999578
and	O	O:0.999986
numbers	O	O:0.999867
seem	O	O:0.998698
odd	O	O:0.999856
,	O	O:0.999980
but	O	O:0.999942
conceptually	O	O:0.999910
this	O	O:0.999972
still	O	O:0.999637
should	O	O:0.999974
work	O	O:0.999971
,	O	O:0.999999
as	O	O:0.999991
it	O	O:0.999708
worked	O	O:0.999873
when	O	O:0.999733
both	O	O:0.999930
were	O	O:0.999993
set	O	O:0.999933
to	O	O:0.999998
variables	O	O:0.999983
individually	O	O:0.999493
.	O	O:0.999959
	
@USER	O	O:0.999034
are	O	O:0.999999
your	O	O:0.999970
numbers	O	O:0.998858
in	O	O:0.999994
the	O	O:0.999998
range	O	O:0.999959
of	O	O:0.999971
-128	O	O:0.999016
to	O	O:0.999982
127	O	O:0.999965
before	O	O:0.999869
you	O	O:0.999964
convert	O	O:0.999963
them	O	O:0.999952
to	O	O:0.999987
8b	O	O:0.999988
it	O	O:0.999971
?	O	O:0.999979
	
In	O	O:0.999965
the	O	O:0.999974
future	O	O:0.999682
,	O	O:0.999974
how	O	O:0.999979
should	O	O:0.999970
I	O	O:1.000000
go	O	O:0.999997
about	O	O:0.999887
trying	O	O:0.999736
to	O	O:0.999992
find	O	O:0.999990
routines	O	O:0.999930
like	O	O:0.999970
this	O	O:0.999963
?	O	O:0.999977
	
At	O	O:0.999934
20,000	O	O:0.999764
elements	O	O:0.999752
,	O	O:0.999987
your	O	O:0.999914
method	O	O:0.999697
is	O	O:0.999995
about	O	O:0.999850
25%	O	O:0.999771
faster	O	O:0.995335
.	O	O:0.999777
	
I'll	O	O:0.997541
fix	O	O:0.999213
it	O	O:0.999994
just	O	O:0.999916
for	O	O:0.999996
you	O	O:0.999677
:P	O	O:0.999850
	
Then	O	O:0.999486
I	O	O:0.999998
convert	O	O:0.999605
it	O	O:0.999979
to	O	O:0.999998
a	O	O:1.000000
numpy	O	O:0.998529
array	O	O:0.999523
:	O	O:0.999947
#CODE	O	O:0.999744
	
Just	O	O:0.999902
throwing	O	O:0.999612
in	O	O:0.999986
my	O	O:0.999984
two	O	O:0.999990
cents	O	O:0.999932
you	O	O:0.999984
could	O	O:0.999975
do	O	O:0.999999
this	O	O:0.999991
pretty	O	O:0.999921
simply	O	O:0.999946
using	O	O:0.999967
list	O	O:0.993269
comprehension	O	O:0.998588
if	O	O:0.999952
it's	O	O:0.999870
always	O	O:0.999976
a	O	O:0.999995
2d	O	O:0.999546
array	O	O:0.999967
like	O	O:0.999843
that	O	O:0.999834
#CODE	O	O:0.999920
	
While	O	O:0.999863
its	O	O:0.999922
expected	O	O:0.999974
value	O	O:0.999971
here	O	O:0.999622
is	O	O:0.999996
zero	O	O:0.998634
,	O	O:0.999996
the	O	O:0.999997
particular	O	O:0.999744
realizations	O	O:0.999862
will	O	O:0.999922
fluctuate	O	O:0.999944
around	O	O:0.999952
that	O	O:0.999898
expected	O	O:0.999972
value	O	O:0.999920
.	O	O:0.999871
	
Then	O	O:0.999677
if	O	O:0.999998
each	O	O:0.999942
item	O	O:0.998917
is	O	O:0.999990
weighted	O	O:0.999094
with	O	O:0.999802
weight	O	O:0.999452
w_i	O	O:0.999702
,	O	O:0.999997
the	O	O:0.999958
"	O	O:0.999964
summed	O	O:0.999281
histogram	O	O:0.999919
"	O	O:0.999973
would	O	O:0.999966
have	O	O:0.999965
weight	O	O:0.999966
sum	O	O:0.998384
(	O	O:0.999995
i	O	O:0.999977
in	O	O:0.999997
items	O	O:0.999699
)	O	O:0.999941
w_i	O	O:0.999661
D_ij	O	O:0.992084
.	O	O:0.999747
	
This	O	O:0.999572
approach	O	O:0.999926
will	O	O:0.999976
take	O	O:0.999967
an	O	O:0.999994
overhead	O	O:0.999982
because	O	O:0.999955
of	O	O:0.999997
crating	O	O:0.999878
a	O	O:0.999997
new	O	O:0.999661
array	O	O:0.999813
in	O	O:0.999905
memory	O	O:0.999262
.	O	O:0.999872
	
"	O	O:0.999955
Eric's	O	O:0.999550
suggestion	O	O:0.999570
for	O	O:0.999966
revising	O	O:0.999756
this	O	O:0.999130
question	O	O:0.999614
is	O	O:0.999997
a	O	O:0.999991
good	O	O:0.998747
start	O	O:0.999231
,	O	O:0.999993
but	O	O:0.999985
I	O	O:0.999994
think	O	O:0.999985
the	O	O:0.999945
question	O	O:0.996960
"	O	O:0.999985
Given	O	O:0.999828
a	O	O:0.999991
Cartesian	O	O:0.998331
plane	O	O:0.999883
,	O	O:0.999990
how	O	O:0.999985
to	O	O:0.999992
discretize	O	O:0.999986
it	O	O:0.999992
in	O	O:0.999998
a	O	O:0.999992
matrix	O	O:0.999337
form	O	O:0.999877
?	O	O:0.999956
	
it	O	O:0.999726
is	O	O:0.999990
the	O	O:0.999994
same	O	O:0.999943
as	O	O:0.999999
long	O	O:0.999931
as	O	O:0.999992
you	O	O:0.999890
ignore	O	O:0.999182
precision	O	O:0.999935
issue	O	O:0.999923
-	O	O:0.999975
which	O	O:0.999796
matters	O	O:0.999923
quite	O	O:0.999951
often	O	O:0.999809
when	O	O:0.999944
you	O	O:0.999986
start	O	O:0.999979
taking	O	O:0.999978
exponential	O	O:0.999441
of	O	O:0.999973
numbers	O	O:0.995351
.	O	O:0.999935
	
Google	O	O:0.999047
Protocol	O	O:0.999096
Buffers	O	O:0.999874
support	O	O:0.999115
self-describing	O	O:0.999359
too	O	O:0.999662
,	O	O:0.999993
are	O	O:0.999975
pretty	O	O:0.999552
fast	O	O:0.988775
(	O	O:0.999936
but	O	O:0.999968
Python	O	O:0.999763
support	O	O:0.998352
is	O	O:0.999994
poor	O	O:0.998752
at	O	O:0.999991
present	O	O:0.999343
time	O	O:0.999930
,	O	O:0.999992
slow	O	O:0.998807
and	O	O:0.999994
buggy	O	O:0.999593
)	O	O:0.999883
.	O	O:0.998937
	
Not	O	O:0.999959
all	O	O:0.999988
people	O	O:0.999678
can	O	O:0.999810
install	O	O:0.999927
NumPy	O	O:0.999622
(	O	O:0.999900
or	O	O:0.999995
even	O	O:0.999687
Python	O	O:0.999967
:D	O	O:0.999988
)	O	O:0.999967
as	O	O:0.999991
many	O	O:0.999801
Blender	O	O:0.999803
users	O	O:0.999078
are	O	O:0.999989
just	O	O:0.999787
artists	O	O:0.999604
.	O	O:0.999726
	
All	O	O:0.999966
possible	O	O:0.999877
solutions	O	O:0.999904
are	O	O:0.999992
mentioned	O	O:0.999777
in	O	O:0.999983
the	O	O:0.999969
comments	O	O:0.999016
.	O	O:0.999882
	
I've	O	O:0.999877
also	O	O:0.999851
refined	O	O:0.999993
your	O	O:0.999825
approach	O	O:0.999966
to	O	O:0.999990
allow	O	O:0.999983
zooming	O	O:0.999704
in	O	O:0.999976
over	O	O:0.999967
a	O	O:0.999995
section	O	O:0.999624
of	O	O:0.999997
the	O	O:0.999994
data	O	O:0.999931
and	O	O:0.999997
to	O	O:0.999998
produce	O	O:0.999993
better	O	O:0.999925
results	O	O:0.999962
at	O	O:0.999995
the	O	O:0.999977
borders	O	O:0.998198
.	O	O:0.999797
	
I	O	O:0.999989
need	O	O:0.999985
to	O	O:0.999997
specify	O	O:0.999994
datatypes	O	O:0.999698
for	O	O:0.999974
all	O	O:0.999984
numerical	O	O:0.999224
types	O	O:0.999631
since	O	O:0.999914
I	O	O:0.999999
care	O	O:0.999987
about	O	O:0.999699
int	O	O:0.996216
8/	O	O:0.999768
16	O	O:0.999267
/	O	O:0.999930
32	O	O:0.999915
,	O	O:0.999983
etc	O	O:0.999676
,	O	O:0.999991
but	O	O:0.999980
I	O	O:0.999986
would	O	O:0.999998
like	O	O:0.999944
to	O	O:0.999999
benefit	O	O:0.999997
from	O	O:0.999963
the	O	O:0.999984
auto	O	O:0.999564
string	O	O:0.999847
length	O	O:0.998241
detection	O	O:0.999719
that	O	O:0.999881
works	O	O:0.999990
if	O	O:0.999992
I	O	O:0.999988
don't	O	O:0.999993
specify	O	O:0.998315
datatypes	O	O:0.999354
.	O	O:0.999758
	
I	O	O:0.999934
would	O	O:0.999978
appreciate	O	O:0.999937
any	O	O:0.999994
assistance	O	O:0.999815
you	O	O:0.999946
can	O	O:0.999977
offer	O	O:0.999971
.	O	O:0.999939
	
Let's	O	O:0.999850
say	O	O:0.999919
for	O	O:0.999994
example	O	O:0.999581
I	O	O:0.999996
have	O	O:0.999992
a	O	O:0.999962
matrix	O	O:0.999688
X	O	O:0.999910
which	O	O:0.999705
is	O	O:0.999990
my	O	O:0.999950
input	O	O:0.999718
.	O	O:0.999902
	
@USER	O	O:0.999075
-	O	O:0.999968
By	O	O:0.999989
the	O	O:0.999978
way	O	O:0.999764
,	O	O:0.999959
indexing	O	O:0.999902
returns	O	O:0.999888
a	O	O:0.999981
view	O	O:0.908388
(	O	O:0.999997
essentially	O	O:0.999978
a	O	O:0.999996
pointer	O	O:0.999582
)	O	O:0.999989
into	O	O:0.999277
the	O	O:0.999971
array	O	O:0.998925
.	O	O:0.999738
	
Note	O	O:0.999950
that	O	O:0.999862
`	O	O:1.000000
view	O	O:0.961477
`	O	O:0.999997
holds	O	O:0.997638
the	O	O:0.999999
same	O	O:0.999994
data	O	O:0.999967
as	O	O:0.999999
the	O	O:0.999996
original	O	O:0.999389
array	O	O:0.999785
!	O	O:0.999845
	
EDIT	O	O:0.994354
:	O	O:0.999971
What	O	O:0.999994
sort	O	O:0.999577
of	O	O:0.999991
sequence	O	O:0.999022
is	O	O:0.999986
it	O	O:0.999952
you're	O	O:0.999950
making	O	O:0.999117
?	O	O:0.999915
	
The	O	O:0.999958
relative	O	O:0.999628
error	O	O:0.999362
is	O	O:0.999990
less	O	O:0.999462
than	O	O:0.999750
2	O	O:0.999905
-24	O	O:0.999907
,	O	O:0.999981
which	O	O:0.999876
is	O	O:0.999976
1	O	O:0.999920
/	O	O:0.999974
2	O	O:0.999925
ULP	O	O:0.999970
divided	O	O:0.999871
by	O	O:0.999991
the	O	O:0.999985
smallest	O	O:0.999592
the	O	O:0.999983
value	O	O:0.999938
could	O	O:0.999919
be	O	O:0.999989
(	O	O:0.999998
the	O	O:0.999991
smallest	O	O:0.999903
value	O	O:0.999858
in	O	O:0.999975
the	O	O:0.999990
interval	O	O:0.999805
for	O	O:0.999994
a	O	O:0.999998
particular	O	O:0.999302
ULP	O	O:0.999948
,	O	O:0.999991
so	O	O:0.999997
the	O	O:0.999997
power	O	O:0.999876
of	O	O:0.999973
two	O	O:0.999983
that	O	O:0.999977
bounds	O	O:0.999940
it	O	O:0.999983
)	O	O:0.999983
.	O	O:0.999824
	
This	O	O:0.998399
is	O	O:0.999959
called	O	O:0.997914
matrix	O	O:0.999818
transposition	O	O:0.998926
.	O	O:0.999910
	
@USER	O	O:0.999389
The	O	O:0.999950
solutions	O	O:0.999878
there	O	O:0.999959
all	O	O:0.999998
make	O	O:0.999956
use	O	O:0.999963
of	O	O:0.999958
the	O	O:0.999902
fact	O	O:0.999945
that	O	O:0.999982
only	O	O:0.999992
a	O	O:0.999999
3x3	O	O:0.999374
sliding	O	O:0.984908
window	O	O:0.998397
is	O	O:0.999971
needed	O	O:0.999510
,	O	O:0.999992
but	O	O:0.999984
I	O	O:0.999995
need	O	O:0.999993
something	O	O:0.999806
that	O	O:0.999917
works	O	O:0.999979
for	O	O:0.999998
all	O	O:0.999973
sizes	O	O:0.999804
of	O	O:0.999972
templates	O	O:0.998889
.	O	O:0.999953
	
(	O	O:0.999865
0008	O	O:0.999104
,	O	O:0.999993
103e	O	O:0.998322
)	O	O:0.999958
Series	O	O:0.999306
Description	O	O:0.999331
LO	O	O:0.999844
:	O	O:0.999743
'	O	O:0.999960
Screen	O	O:0.999820
Save	O	O:0.999362
'	O	O:0.999857
	
@USER	O	O:0.999599
khanSever	O	O:0.998316
20k	O	O:0.999003
wouldn't	O	O:0.999904
be	O	O:0.999998
a	O	O:0.999999
problem	O	O:0.996725
for	O	O:0.999989
modern	O	O:0.999277
computers	O	O:0.999478
,	O	O:0.999996
if	O	O:0.999991
you	O	O:0.999974
are	O	O:0.999995
really	O	O:0.999983
thresholded	O	O:0.999920
by	O	O:0.999991
speed	O	O:0.998088
in	O	O:0.999972
this	O	O:0.999971
kind	O	O:0.999975
of	O	O:0.999982
computation	O	O:0.999733
,	O	O:0.999998
I	O	O:0.999983
would	O	O:0.999983
say	O	O:0.999991
that	O	O:0.999987
you	O	O:0.999979
shouldn't	O	O:0.999991
have	O	O:0.999964
had	O	O:0.999980
an	O	O:0.999999
inhomogenous	O	O:0.999907
data	O	O:0.999982
array	O	O:0.999986
to	O	O:0.999996
begin	O	O:0.999991
with	O	O:0.999944
.	O	O:0.999894
	
@USER	O	O:0.998487
Eweiwi	O	O:0.994969
:	O	O:0.999970
Did	O	O:0.999989
you	O	O:0.999995
find	O	O:0.999984
my	O	O:0.999996
answer	O	O:0.999945
anyway	O	O:0.999884
useful	O	O:0.998681
?	O	O:0.999856
	
You	O	O:0.999954
can	O	O:0.999986
now	O	O:0.999997
compute	O	O:0.999900
the	O	O:0.999966
function	O	O:0.999892
`	O	O:0.999972
f	O	O:0.997340
(	O	O:0.999995
x	O	O:0.999973
)`	O	O:0.999878
at	O	O:0.999995
any	O	O:0.999972
point	O	O:0.999145
`	O	O:0.999972
x	O	O:0.996819
`	O	O:0.999984
.	O	O:0.999672
	
BTW	O	O:0.999031
:	O	O:0.999995
this	O	O:0.999889
is	O	O:0.999999
a	O	O:0.999990
neat	O	O:0.997708
workaround	O	O:0.999598
,	O	O:0.999976
but	O	O:0.999972
if	O	O:0.999954
it	O	O:0.999990
were	O	O:0.999985
possible	O	O:0.999975
to	O	O:0.999993
use	O	O:0.999998
the	O	O:0.999893
`	O	O:0.999941
in	O	O:0.998607
`	O	O:0.999990
operator	O	O:0.999608
would	O	O:0.999987
have	O	O:0.999983
preferred	O	O:0.999985
,	O	O:0.999999
as	O	O:0.999995
in	O	O:0.999981
my	O	O:0.999898
"	O	O:0.999996
real	O	O:0.998668
case	O	O:0.999865
"	O	O:0.999982
I	O	O:0.999994
have	O	O:0.999989
a	O	O:0.999992
pool	O	O:0.999847
of	O	O:0.999995
roughly	O	O:0.999637
10	O	O:0.999970
values	O	O:0.998956
,	O	O:0.999993
non	O	O:0.999984
only	O	O:0.999711
`	O	O:0.999973
(	O	O:0.999940
6	O	O:0.999960
,	O	O:0.999961
8)	O	O:0.999236
`	O	O:0.999929
.	O	O:0.999555
	
In	O	O:0.999983
this	O	O:0.999969
example	O	O:0.999934
I	O	O:0.999998
want	O	O:0.999975
to	O	O:0.999960
return	O	O:0.999981
an	O	O:0.999992
array	O	O:0.999979
of	O	O:0.999926
[	O	O:0.999890
202	O	O:0.999908
203	O	O:0.999411
206	O	O:0.999583
210	O	O:0.999347
]	O	O:0.999822
	
So	O	O:0.999887
f	O	O:0.998945
(	O	O:0.999983
x	O	O:0.999891
,	O	O:0.999996
y	O	O:0.999964
)	O	O:0.999990
=	O	O:0.999522
0	O	O:0.999856
	
I	O	O:0.999983
present	O	O:0.999895
below	O	O:0.999667
a	O	O:0.999994
sample	O	O:0.999279
silhouette	O	O:0.999795
implementation	O	O:0.998850
in	O	O:0.999982
both	O	O:0.999529
MATLAB	O	O:0.999084
and	O	O:0.999970
Python	O	O:0.998494
/	O	O:0.999856
Numpy	O	O:0.995365
(	O	O:0.999989
keep	O	O:0.996976
in	O	O:0.999981
mind	O	O:0.999980
that	O	O:0.999968
I	O	O:0.999997
am	O	O:0.999999
more	O	O:0.999516
fluent	O	O:0.999522
in	O	O:0.999937
MATLAB	O	O:0.995304
):	O	O:0.999901
	
Python	O	O:0.998401
import	O	O:0.997800
Column	O	O:0.999786
Data	O	O:0.999705
from	O	O:0.999905
MySQL	O	O:0.999738
as	O	O:0.999975
Array	O	O:0.999167
	
This	O	O:0.998993
is	O	O:0.999995
just	O	O:0.999639
the	O	O:0.999998
partial	O	O:0.999675
count	O	O:0.999632
due	O	O:0.999974
to	O	O:0.999992
the	O	O:0.999993
34	O	O:0.999816
1-chips	O	O:0.997005
.	O	O:0.999903
	
I	O	O:0.999988
want	O	O:0.999968
to	O	O:0.999954
know	O	O:0.999995
how	O	O:0.999957
I	O	O:0.999913
should	O	O:0.999986
index	O	O:0.999841
/	O	O:0.999996
access	O	O:0.999968
some	O	O:0.999993
data	O	O:0.999992
programmatically	O	O:0.999735
in	O	O:0.999987
python	O	O:0.999059
.	O	O:0.999937
	
There	O	O:0.999404
is	O	O:0.999996
a	O	O:0.999996
short	O	O:0.999470
comment	O	O:0.999761
at	O	O:0.999995
the	O	O:0.999996
end	O	O:0.999935
of	O	O:0.999988
the	O	O:0.999938
introduction	O	O:0.999869
to	O	O:0.999985
SciPy	O	O:0.999910
documentation	O	O:0.999265
:	O	O:0.999932
	
What	O	O:0.999821
about	O	O:0.999927
the	O	O:0.999990
maximum	O	O:0.999759
value	O	O:0.999839
in	O	O:0.999990
the	O	O:0.999987
array	O	O:0.999797
?	O	O:0.999909
	
If	O	O:0.999981
you	O	O:0.999970
use	O	O:0.999988
a	O	O:0.999995
list	O	O:0.997036
of	O	O:0.999935
`	O	O:0.999954
True	O	O:0.998659
/	O	O:0.999986
False	O	O:0.998769
`	O	O:0.999949
,	O	O:0.999967
NumPy	O	O:0.999921
will	O	O:0.998985
interpret	O	O:0.999984
that	O	O:0.999992
as	O	O:0.999999
a	O	O:0.999998
list	O	O:0.998220
of	O	O:0.999984
`	O	O:0.999952
1	O	O:0.999916
/	O	O:0.999985
0	O	O:0.999808
`	O	O:0.999991
as	O	O:0.999942
integers	O	O:0.999489
,	O	O:0.999996
that	O	O:0.999727
is	O	O:0.999996
,	O	O:0.999994
indices	O	O:0.999554
,	O	O:0.999988
meaning	O	O:0.999963
that	O	O:0.999918
you	O	O:0.999986
'	O	O:0.999998
either	O	O:0.999984
get	O	O:0.999974
the	O	O:0.999998
second	O	O:0.999685
or	O	O:0.999995
first	O	O:0.999952
element	O	O:0.999964
of	O	O:0.999997
your	O	O:0.999738
array	O	O:0.999872
.	O	O:0.999899
	
But	O	O:0.999732
it's	O	O:0.999888
still	O	O:0.999839
an	O	O:0.999992
array	O	O:0.999805
and	O	O:0.999992
there	O	O:0.999601
is	O	O:0.999952
no	O	O:0.999980
difference	O	O:0.999688
in	O	O:0.999977
asymptotic	O	O:0.999608
complexity	O	O:0.999633
.	O	O:0.999804
	
Here's	O	O:0.999651
one	O	O:0.999906
way	O	O:0.999562
(	O	O:0.999985
same	O	O:0.999966
matrix	O	O:0.999844
as	O	O:0.999965
before	O	O:0.990220
):	O	O:0.999891
#CODE	O	O:0.999286
	
assume	O	O:0.999726
i	O	O:0.999980
have	O	O:0.999828
100	O	O:0.999922
points	O	O:0.999908
whose	O	O:0.999872
coordinates	O	O:0.999282
are	O	O:0.999992
random	O	O:0.999293
,	O	O:0.999919
	
If	O	O:0.999967
you	O	O:0.999994
just	O	O:0.999985
want	O	O:0.999994
the	O	O:0.999988
first	O	O:0.999953
one	O	O:0.999991
,	O	O:0.999993
use	O	O:0.999994
next	O	O:0.998026
with	O	O:0.999782
the	O	O:0.999990
list	O	O:0.999486
comprehension	O	O:0.999919
as	O	O:0.999999
a	O	O:0.999972
generator	O	O:0.999195
expression	O	O:0.999356
.	O	O:0.999889
	
So	O	O:0.999958
I	O	O:0.999988
am	O	O:0.999999
able	O	O:0.999817
to	O	O:0.999995
plot	O	O:0.999993
what	O	O:0.999962
I	O	O:0.999998
want	O	O:0.999995
onto	O	O:0.995925
my	O	O:0.999950
matrix	O	O:0.999336
	
By	O	O:0.999953
X3D	O	O:0.999523
,	O	O:0.999992
are	O	O:0.999994
you	O	O:0.999993
referring	O	O:0.999915
to	O	O:0.999989
the	O	O:0.999997
x3d	O	O:0.999932
standard	O	O:0.999683
for	O	O:0.999993
3d	O	O:0.999865
content	O	O:0.999364
,	O	O:0.999998
as	O	O:0.999994
at	O	O:0.999939
#URL	O	O:0.999481
If	O	O:0.999989
so	O	O:0.999985
,	O	O:0.999994
I	O	O:0.999984
would	O	O:0.999986
very	O	O:0.999873
much	O	O:0.999988
like	O	O:0.999949
to	O	O:0.999991
learn	O	O:0.999993
more	O	O:0.999840
of	O	O:0.999994
what	O	O:0.999876
you	O	O:0.999992
are	O	O:0.999999
doing	O	O:0.999917
--	O	O:0.999952
thanks	O	O:0.993794
	
Would	O	O:0.999461
it	O	O:0.999980
be	O	O:0.999998
prohibitvely	O	O:0.999890
wasteful	O	O:0.999327
to	O	O:0.999995
save	O	O:0.999998
them	O	O:0.999940
with	O	O:0.999998
a	O	O:0.999994
fixed	O	O:0.998564
width	O	O:0.999754
?	O	O:0.999851
	
BSD-licensed	O	O:0.996268
Python	O	O:0.999605
source	O	O:0.999923
code	O	O:0.999561
for	O	O:0.999984
surface	O	O:0.999697
fits	O	O:0.999118
can	O	O:0.999975
be	O	O:0.999999
found	O	O:0.999916
at	O	O:0.999878
	
...	O	O:0.999138
which	O	O:0.999938
returned	O	O:0.998509
`	O	O:0.999985
True	O	O:0.997713
`	O	O:0.999997
on	O	O:0.999986
each	O	O:0.999990
value	O	O:0.999984
of	O	O:0.999988
the	O	O:0.999955
array	O	O:0.999868
.	O	O:0.999752
	
I	O	O:0.999982
have	O	O:0.999984
two	O	O:0.999931
ordered	O	O:0.999913
numpy	O	O:0.999718
arrays	O	O:0.999631
and	O	O:0.999986
I	O	O:0.999998
want	O	O:0.999885
to	O	O:0.999899
interleave	O	O:0.999999
them	O	O:0.999889
so	O	O:0.999999
that	O	O:0.999979
I	O	O:1.000000
take	O	O:0.999992
one	O	O:0.999990
item	O	O:0.999967
from	O	O:0.999971
the	O	O:0.999993
first	O	O:0.999883
array	O	O:0.999961
,	O	O:0.999999
then	O	O:0.999987
another	O	O:0.999996
from	O	O:0.999985
the	O	O:0.999984
second	O	O:0.999828
,	O	O:0.999999
then	O	O:0.999985
back	O	O:0.999977
to	O	O:0.999999
the	O	O:1.000000
first	O	O:0.999686
-	O	O:0.999994
taking	O	O:0.999741
the	O	O:0.999980
next	O	O:0.999420
item	O	O:0.999952
that	O	O:0.999865
is	O	O:0.999998
larger	O	O:0.999698
than	O	O:0.999777
the	O	O:0.999991
one	O	O:0.999971
I	O	O:0.999998
just	O	O:0.999982
took	O	O:0.999809
from	O	O:0.999941
the	O	O:0.999969
second	O	O:0.999314
and	O	O:0.999995
so	O	O:0.999987
on	O	O:0.999902
.	O	O:0.999926
	
Did	O	O:0.999930
you	O	O:0.999990
look	O	O:0.999925
at	O	O:0.999997
the	O	O:0.999989
link	O	O:0.999499
in	O	O:0.999994
my	O	O:0.999991
answer	O	O:0.999941
to	O	O:0.999980
the	O	O:0.999997
SciPy	O	O:0.999852
page	O	O:0.999611
on	O	O:0.999965
Performance	O	O:0.999878
Python	O	O:0.999498
.	O	O:0.999878
	
If	O	O:0.999977
you	O	O:0.999985
want	O	O:0.999984
the	O	O:0.999996
column	O	O:0.999958
indices	O	O:0.999942
instead	O	O:0.999989
of	O	O:0.999999
the	O	O:0.999995
resulting	O	O:0.999774
square	O	O:0.998855
matrix	O	O:0.999638
,	O	O:0.999998
just	O	O:0.999932
replace	O	O:0.995479
`	O	O:0.999995
return	O	O:0.998308
B	O	O:0.999890
`	O	O:0.999987
with	O	O:0.995551
`	O	O:0.999992
return	O	O:0.998630
colset	O	O:0.996352
`	O	O:0.999972
.	O	O:0.999336
	
At	O	O:0.999951
the	O	O:0.999993
end	O	O:0.999919
of	O	O:0.999980
it	O	O:0.999945
all	O	O:0.999924
:	O	O:0.999954
#CODE	O	O:0.999680
	
Is	O	O:0.999979
there	O	O:0.999964
no	O	O:0.999994
equivalent	O	O:0.999144
function	O	O:0.999972
that	O	O:0.999925
gets	O	O:0.999738
the	O	O:0.999997
index	O	O:0.999916
of	O	O:0.999990
the	O	O:0.999996
last	O	O:0.999812
occurrence	O	O:0.999844
?	O	O:0.999922
	
I	O	O:0.999989
want	O	O:0.999980
to	O	O:0.999961
get	O	O:1.000000
a	O	O:0.999998
cartesian	O	O:0.999769
product	O	O:0.999984
of	O	O:0.999995
a	O	O:0.999678
[:	O	O:0.999175
:	O	O:0.999968
i	O	O:0.999931
]	O	O:0.999973
and	O	O:0.999938
b	O	O:0.998966
[:	O	O:0.999700
:	O	O:0.999966
j	O	O:0.999937
]	O	O:0.999996
from	O	O:0.999353
c	O	O:0.999763
.	O	O:0.999945
	
python	O	O:0.997301
/	O	O:0.999945
numpy	O	O:0.998720
:	O	O:0.999981
how	O	O:0.999989
to	O	O:0.999996
get	O	O:0.999998
2D	O	O:0.999983
array	O	O:0.999987
column	O	O:0.999730
length	O	O:0.999387
?	O	O:0.999866
	
Your	O	O:0.999465
example	O	O:0.999615
works	O	O:0.999932
for	O	O:0.999993
me	O	O:0.999925
if	O	O:0.999943
I	O	O:0.999994
sample	O	O:0.999560
around	O	O:0.999172
2**6	O	O:0.998634
points	O	O:0.997964
.	O	O:0.999836
	
NumPy's	O	O:0.999613
main	O	O:0.998015
object	O	O:0.999547
is	O	O:0.999977
the	O	O:0.999933
homogeneous	O	O:0.999137
multidimensional	O	O:0.998571
array	O	O:0.999769
.	O	O:0.999786
	
Pythonic	O	O:0.999359
way	O	O:0.999943
to	O	O:0.999990
import	O	O:0.999996
data	O	O:0.999970
from	O	O:0.999990
multiple	O	O:0.999979
files	O	O:0.999952
into	O	O:0.999791
an	O	O:0.999986
array	O	O:0.999579
	
The	O	O:0.999970
only	O	O:0.999953
thing	O	O:0.999953
I	O	O:0.999959
was	O	O:0.999986
going	O	O:0.999137
to	O	O:0.999961
add	O	O:0.999869
was	O	O:0.999934
this	O	O:0.999631
:	O	O:0.999980
#URL	O	O:0.999892
Indicated	O	O:0.999784
that	O	O:0.999981
this	O	O:0.999576
is	O	O:0.999992
not	O	O:0.999960
likely	O	O:0.999898
to	O	O:0.999985
change	O	O:0.999441
.	O	O:0.999885
	
i	O	O:0.999969
have	O	O:0.999986
a	O	O:0.999998
numpy	O	O:0.999880
array	O	O:0.999982
like	O	O:0.999882
the	O	O:0.999975
following	O	O:0.998379
#CODE	O	O:0.999217
	
I	O	O:0.999988
want	O	O:0.999975
to	O	O:0.999936
write	O	O:0.999998
a	O	O:0.999993
Boost-Python	O	O:0.998681
program	O	O:0.999959
to	O	O:0.999998
take	O	O:0.999999
a	O	O:0.999997
symbolic	O	O:0.998623
python	O	O:0.998949
function	O	O:0.999953
from	O	O:0.999872
user	O	O:0.999309
and	O	O:0.999988
evaluate	O	O:0.999769
its	O	O:0.999916
derivative	O	O:0.999867
in	O	O:0.999968
my	O	O:0.999926
program	O	O:0.999570
.	O	O:0.999881
	
Is	O	O:0.999985
there	O	O:0.999986
a	O	O:0.999993
way	O	O:0.999326
around	O	O:0.999914
this	O	O:0.999633
?	O	O:0.999958
	
Not	O	O:0.999981
sure	O	O:0.999924
if	O	O:0.999989
I	O	O:0.999983
explained	O	O:0.999980
this	O	O:0.999779
all	O	O:0.999989
really	O	O:0.999921
well	O	O:0.999261
,	O	O:0.999984
but	O	O:0.999988
just	O	O:0.999877
print	O	O:0.999856
out	O	O:0.999856
a_strided	O	O:0.994741
and	O	O:0.999988
you'll	O	O:0.999737
see	O	O:0.999928
what	O	O:0.999985
the	O	O:0.999983
result	O	O:0.999277
is	O	O:0.999956
and	O	O:0.999979
how	O	O:0.999990
easy	O	O:0.999721
this	O	O:0.999931
makes	O	O:0.999922
the	O	O:0.999963
operation	O	O:0.998935
.	O	O:0.999868
	
But	O	O:0.999981
when	O	O:0.999886
I	O	O:0.999997
start	O	O:0.999995
calling	O	O:0.999743
columns	O	O:0.999909
by	O	O:0.999992
their	O	O:0.999922
field	O	O:0.999835
names	O	O:0.999771
,	O	O:0.999995
screwy	O	O:0.999891
things	O	O:0.999540
happen	O	O:0.999099
.	O	O:0.999970
	
all	O	O:0.999932
I	O	O:0.999992
get	O	O:0.999700
is	O	O:0.999976
very	O	O:0.999923
high	O	O:0.999548
or	O	O:0.999976
inf	O	O:0.999672
numbers	O	O:0.999214
.	O	O:0.999809
	
If	O	O:0.999897
you're	O	O:0.999943
iterating	O	O:0.999849
through	O	O:0.999535
,	O	O:0.999955
and	O	O:0.999995
applying	O	O:0.999887
the	O	O:0.998843
function	O	O:0.999686
to	O	O:0.999971
_each_	O	O:0.999985
item	O	O:0.999903
,	O	O:0.999999
then	O	O:0.999945
,	O	O:1.000000
yeah	O	O:0.999851
,	O	O:0.999996
the	O	O:0.999998
numpy	O	O:0.999632
functions	O	O:0.999851
will	O	O:0.999934
be	O	O:0.999995
slower	O	O:0.999626
.	O	O:0.999585
	
Slicing	O	O:0.998098
does	O	O:0.999362
not	O	O:0.999995
copy	O	O:0.999410
the	O	O:0.999993
array	O	O:0.999763
into	O	O:0.999483
new	O	O:0.999825
memory	O	O:0.995090
(	O	O:0.999978
unlike	O	O:0.999904
delete	O	O:0.989273
)	O	O:0.999951
.	O	O:0.999779
	
And	O	O:0.999807
here's	O	O:0.999735
the	O	O:0.999968
filled	O	O:0.996790
version	O	O:0.998283
:	O	O:0.999953
#CODE	O	O:0.999885
	
This	O	O:0.999306
is	O	O:0.999996
a	O	O:0.999987
little	O	O:0.998796
bit	O	O:0.999936
annoying	O	O:0.999689
to	O	O:0.999968
do	O	O:0.999982
,	O	O:0.999995
but	O	O:0.999986
at	O	O:0.999998
least	O	O:0.999941
you	O	O:0.999993
can	O	O:0.999967
remove	O	O:0.999983
that	O	O:0.999987
annoying	O	O:0.999915
`	O	O:0.999967
==	O	O:0.996199
`	O	O:0.999993
easily	O	O:0.999542
,	O	O:0.999998
using	O	O:0.999637
sorting	O	O:0.854389
(	O	O:0.998921
and	O	O:0.999988
thats	O	O:0.999777
probably	O	O:0.999971
your	O	O:0.999920
speed	O	O:0.998780
killer	O	O:0.999928
)	O	O:0.999945
.	O	O:0.999788
	
I	O	O:0.999952
still	O	O:0.999728
haven't	O	O:0.999547
found	O	O:0.999862
an	O	O:0.999992
entirely	O	O:0.999925
satisfactory	O	O:0.999699
solution	O	O:0.999103
,	O	O:0.999985
but	O	O:0.999980
nevertheless	O	O:0.999931
there	O	O:0.999893
is	O	O:0.999998
something	O	O:0.999932
one	O	O:0.999983
can	O	O:0.999988
do	O	O:1.000000
to	O	O:0.999999
obtain	O	O:0.999971
the	O	O:0.999989
pointer	O	O:0.999945
with	O	O:0.999980
a	O	O:0.999992
lot	O	O:0.999937
less	O	O:0.999332
overhead	O	O:0.999583
in	O	O:0.999916
CPython	O	O:0.999332
.	O	O:0.999906
	
I	O	O:0.999982
also	O	O:0.999974
tried	O	O:0.999884
using	O	O:0.999626
NumPy	O	O:0.997607
masked	O	O:0.996137
arrays	O	O:0.999402
,	O	O:0.999987
with	O	O:0.999927
NaN	O	O:0.997493
fill_value	O	O:0.993718
,	O	O:0.999983
which	O	O:0.999964
also	O	O:0.999154
did	O	O:0.999986
not	O	O:0.999961
work	O	O:0.999865
.	O	O:0.999966
	
cartesian	O	O:0.990577
(	O	O:0.999986
split	O	O:0.934771
(	O	O:0.999996
a	O	O:0.999994
,	O	O:0.999898
3	O	O:0.999910
))`	O	O:0.997881
.	O	O:0.999811
	
I	O	O:0.999945
did	O	O:0.999990
a	O	O:0.999987
little	O	O:0.998683
further	O	O:0.999543
experimenting	O	O:0.998615
and	O	O:0.999983
found	O	O:0.999939
a	O	O:0.999983
numpy	O	O:0.999557
specific	O	O:0.999839
way	O	O:0.999959
to	O	O:0.999962
solve	O	O:0.999971
this	O	O:0.999244
:	O	O:0.999982
#CODE	O	O:0.999891
	
When	O	O:0.999692
you	O	O:0.999997
need	O	O:0.999990
to	O	O:0.999999
deal	O	O:0.999987
with	O	O:0.999986
exponential	O	O:0.999004
,	O	O:0.999999
you	O	O:0.999989
quickly	O	O:0.999936
go	O	O:0.999996
into	O	O:0.999845
under	O	O:0.999942
/	O	O:0.999982
over	O	O:0.999721
flow	O	O:0.999831
since	O	O:0.999968
the	O	O:0.999933
function	O	O:0.999988
grows	O	O:0.999914
so	O	O:0.999987
quickly	O	O:0.999356
.	O	O:0.999889
	
Long	O	O:0.999299
story	O	O:0.999755
short	O	O:0.997715
,	O	O:0.999988
not	O	O:0.999988
only	O	O:0.999978
does	O	O:0.999937
tabular	O	O:0.999917
not	O	O:0.999991
act	O	O:0.999989
like	O	O:0.999986
a	O	O:0.999998
spreadsheet	O	O:0.999871
out	O	O:0.999981
of	O	O:0.999992
the	O	O:0.999857
box	O	O:0.999972
,	O	O:0.999987
I	O	O:0.999991
can't	O	O:0.999987
find	O	O:0.999952
a	O	O:0.999998
way	O	O:0.999817
to	O	O:0.999986
make	O	O:0.999986
it	O	O:0.999992
work	O	O:0.999802
.	O	O:0.999975
	
What	O	O:0.999843
do	O	O:0.999957
you	O	O:0.999997
mean	O	O:0.999603
"	O	O:0.999997
two	O	O:0.999988
significant	O	O:0.999897
figures	O	O:0.997397
"	O	O:0.999945
?	O	O:0.999915
	
We	O	O:0.999948
put	O	O:0.999461
it	O	O:0.999986
in	O	O:0.999990
a	O	O:0.999987
list	O	O:0.991138
and	O	O:0.999972
double	O	O:0.983770
it	O	O:0.999790
.	O	O:0.999867
	
For	O	O:0.999945
example	O	O:0.999805
for	O	O:0.999990
value	O	O:0.999843
255	O	O:0.999834
the	O	O:0.999997
coordinates	O	O:0.999229
of	O	O:0.999990
the	O	O:0.999956
box	O	O:0.999928
around	O	O:0.999878
the	O	O:0.999977
value	O	O:0.999718
255	O	O:0.999780
will	O	O:0.999939
be	O	O:0.999996
upper	O	O:0.999908
left	O	O:0.987869
(	O	O:0.999921
0	O	O:0.999925
,	O	O:0.999984
0	O	O:0.999745
)	O	O:0.999960
and	O	O:0.999985
lower	O	O:0.999517
right	O	O:0.991895
(	O	O:0.999969
4	O	O:0.999944
,	O	O:0.999988
6	O	O:0.999826
)	O	O:0.999955
.	O	O:0.999805
	
Like	O	O:0.999793
in	O	O:0.999994
a	O	O:0.999997
java	O	O:0.998083
program	O	O:0.999895
,	O	O:0.999995
you	O	O:0.999990
can	O	O:0.999988
choose	O	O:0.999998
to	O	O:0.999998
start	O	O:0.999997
it	O	O:0.999995
up	O	O:0.999979
with	O	O:0.999956
,	O	O:0.999994
say	O	O:0.999958
,	O	O:0.999995
5GB	O	O:0.999949
of	O	O:0.999948
memory	O	O:0.999176
.	O	O:0.999943
	
However	O	O:0.999864
,	O	O:0.999995
due	O	O:0.999969
to	O	O:0.999992
the	O	O:0.999998
way	O	O:0.999990
the	O	O:0.999994
data	O	O:0.999960
points	O	O:0.999745
lie	O	O:0.999928
it	O	O:0.999987
does	O	O:0.999648
not	O	O:0.999997
give	O	O:0.999984
me	O	O:0.999992
a	O	O:0.999979
y-axis	O	O:0.999740
interception	O	O:0.999770
at	O	O:0.999985
0	O	O:0.999528
.	O	O:0.999815
	
I'd	O	O:0.999979
like	O	O:0.999940
to	O	O:0.999997
sort	O	O:0.999976
it	O	O:0.999997
such	O	O:0.999986
that	O	O:0.999992
my	O	O:0.999978
points	O	O:0.999766
are	O	O:0.999992
ordered	O	O:0.999915
by	O	O:0.999935
x-coordinate	O	O:0.999802
,	O	O:0.999947
and	O	O:1.000000
then	O	O:0.999969
by	O	O:0.999998
y	O	O:0.999990
in	O	O:0.999977
cases	O	O:0.999880
where	O	O:0.999971
the	O	O:0.999983
x	O	O:0.999952
coordinate	O	O:0.999494
is	O	O:0.999994
the	O	O:0.999985
same	O	O:0.999726
.	O	O:0.999864
	
Of	O	O:0.999939
course	O	O:0.999978
this	O	O:0.999991
will	O	O:0.999937
slow	O	O:0.999912
the	O	O:0.999990
program	O	O:0.999853
down	O	O:0.997962
,	O	O:0.999997
but	O	O:0.999988
at	O	O:0.999988
least	O	O:0.999626
it'll	O	O:0.999750
finish	O	O:0.992443
.	O	O:0.999731
	
Im	O	O:0.999872
writing	O	O:0.999514
it	O	O:0.999965
here	O	O:0.999679
because	O	O:0.999943
i	O	O:0.999986
cant	O	O:0.999948
put	O	O:0.999891
image	O	O:0.999946
in	O	O:0.999908
comment	O	O:0.999144
.	O	O:0.999915
	
In	O	O:0.999977
looking	O	O:0.999859
at	O	O:0.999973
`	O	O:0.999991
fill	O	O:0.909715
`	O	O:0.999997
,	O	O:0.999968
I	O	O:0.999990
saw	O	O:0.999971
that	O	O:0.999670
`	O	O:0.999999
repeat	O	O:0.966940
`	O	O:0.999991
suits	O	O:0.999135
my	O	O:0.999991
needs	O	O:0.999961
even	O	O:0.999685
better	O	O:0.999726
.	O	O:0.999887
	
Note	O	O:0.999965
that	O	O:0.999941
an	O	O:0.999997
array's	O	O:0.999944
base	O	O:0.999866
will	O	O:0.999969
be	O	O:0.999999
another	O	O:0.999972
array	O	O:0.999821
,	O	O:0.999993
even	O	O:0.999784
if	O	O:0.999996
it	O	O:0.999975
is	O	O:0.999998
a	O	O:0.999976
subset	O	O:0.945582
:	O	O:0.999961
#CODE	O	O:0.999652
	
If	O	O:0.999969
you	O	O:0.999983
have	O	O:0.999994
float	O	O:0.999962
data	O	O:0.999990
,	O	O:0.999999
or	O	O:1.000000
data	O	O:0.999977
spread	O	O:0.999975
over	O	O:0.999978
a	O	O:0.999996
huge	O	O:0.999191
range	O	O:0.999936
you	O	O:0.999932
can	O	O:0.999980
convert	O	O:0.999955
it	O	O:0.999998
to	O	O:0.999997
integers	O	O:0.999997
by	O	O:0.999967
doing	O	O:0.998748
:	O	O:0.999811
#CODE	O	O:0.999132
	
@USER	O	O:0.999176
,	O	O:0.999995
plaes	O	O:0.999240
recommend	O	O:0.999942
using	O	O:0.999978
a	O	O:0.999883
generator	O	O:0.972262
(	O	O:0.999982
parenthesis	O	O:0.999709
)	O	O:0.999994
instead	O	O:0.999989
of	O	O:0.999996
a	O	O:0.999976
list	O	O:0.981341
(	O	O:0.999993
brackets	O	O:0.999852
)	O	O:0.999987
in	O	O:0.999993
order	O	O:0.999829
to	O	O:0.999991
save	O	O:0.999869
memory	O	O:0.999752
and	O	O:0.999997
gain	O	O:0.999723
speed	O	O:0.999502
when	O	O:0.999790
managing	O	O:0.999933
high	O	O:0.999928
amounts	O	O:0.999982
of	O	O:0.999985
data	O	O:0.999682
.	O	O:0.999967
	
I	O	O:0.999988
want	O	O:0.999975
to	O	O:0.999913
divide	O	O:0.999992
this	O	O:0.999933
array	O	O:0.999997
into	O	O:0.999506
3	O	O:0.999986
blocks	O	O:0.999650
of	O	O:0.999981
size	O	O:0.999790
2x4	O	O:0.999834
,	O	O:0.999982
and	O	O:0.999998
then	O	O:0.999928
find	O	O:0.999963
the	O	O:1.000000
mean	O	O:0.999876
of	O	O:0.999992
all	O	O:0.999990
three	O	O:0.999921
blocks	O	O:0.997349
(	O	O:0.999989
so	O	O:0.999998
that	O	O:0.999979
the	O	O:1.000000
shape	O	O:0.999954
of	O	O:0.999979
the	O	O:0.999990
mean	O	O:0.998515
is	O	O:0.999976
2x4	O	O:0.998424
.	O	O:0.999792
	
(	O	O:0.999919
Have	O	O:0.999982
a	O	O:0.999997
look	O	O:0.999152
at	O	O:0.999997
the	O	O:0.999991
comments	O	O:0.999702
above	O	O:0.999921
the	O	O:0.999992
code	O	O:0.999288
for	O	O:0.999995
that	O	O:0.999871
portion	O	O:0.999889
.	O	O:0.999984
)	O	O:0.999971
	
That	O	O:0.998459
is	O	O:0.999990
because	O	O:0.999894
`	O	O:0.999967
fsolve	O	O:0.709531
`	O	O:0.999981
thinks	O	O:0.999371
it	O	O:0.999960
is	O	O:0.999989
looking	O	O:0.999664
for	O	O:0.999981
an	O	O:0.999986
array	O	O:0.999963
of	O	O:0.999970
length	O	O:0.996760
17	O	O:0.999954
that	O	O:0.999769
solves	O	O:0.999827
`	O	O:0.999994
p	O	O:0.993907
`	O	O:0.999984
.	O	O:0.999418
	
When	O	O:0.999628
there's	O	O:0.999986
a	O	O:0.999997
choice	O	O:0.999088
between	O	O:0.999636
working	O	O:0.998984
with	O	O:0.999828
NumPy	O	O:0.999623
array	O	O:0.999560
and	O	O:0.999987
numeric	O	O:0.999456
lists	O	O:0.996903
,	O	O:0.999992
the	O	O:0.999971
former	O	O:0.999345
are	O	O:0.999991
typically	O	O:0.999866
faster	O	O:0.999497
.	O	O:0.999704
	
Wait	O	O:0.999392
...	O	O:0.999895
why	O	O:0.999986
do	O	O:0.999985
you	O	O:0.999994
need	O	O:0.999960
the	O	O:0.999996
negative	O	O:0.999280
?	O	O:0.999916
	
But	O	O:0.999954
if	O	O:0.999996
a	O	O:0.999996
dense	O	O:0.998014
3d	O	O:0.999917
array	O	O:0.999697
representation	O	O:0.998795
isn't	O	O:0.999941
that	O	O:0.999960
much	O	O:0.999903
bigger	O	O:0.999793
,	O	O:0.999971
storing	O	O:0.999606
it	O	O:0.999976
as	O	O:0.999999
a	O	O:0.999987
chuncked	O	O:0.985929
and	O	O:0.999985
compressed	O	O:0.999691
hdf5	O	O:0.999250
array	O	O:0.999520
is	O	O:0.999980
probably	O	O:0.999676
the	O	O:0.999988
way	O	O:0.999933
to	O	O:0.999963
go	O	O:0.999995
.	O	O:0.999961
	
Index	O	O:0.996166
datetime	O	O:0.994456
in	O	O:0.999954
numpy	O	O:0.999634
array	O	O:0.999842
	
Is	O	O:0.999987
there	O	O:0.999970
an	O	O:0.999969
"	O	O:0.999997
expandable	O	O:0.996404
"	O	O:0.999990
matrix	O	O:0.999963
data	O	O:0.999965
structure	O	O:0.999987
available	O	O:0.999948
in	O	O:0.999998
a	O	O:0.999995
well	O	O:0.998061
tested	O	O:0.999724
module	O	O:0.999771
?	O	O:0.999907
	
You	O	O:0.999858
can	O	O:0.999962
make	O	O:0.999998
this	O	O:0.999980
one-liner	O	O:0.999982
reusable	O	O:0.999876
if	O	O:0.999989
you	O	O:0.999976
are	O	O:0.999996
going	O	O:0.999943
to	O	O:0.999978
repeat	O	O:0.999896
it	O	O:0.999995
a	O	O:0.999983
lot	O	O:0.997320
:	O	O:0.999934
#CODE	O	O:0.999698
	
Here's	O	O:0.999637
my	O	O:0.999903
array	O	O:0.999796
(	O	O:0.999979
rather	O	O:0.999899
,	O	O:0.999983
a	O	O:0.999996
method	O	O:0.999856
of	O	O:0.999994
generating	O	O:0.999640
representative	O	O:0.999878
test	O	O:0.997671
arrays	O	O:0.998785
):	O	O:0.999933
#CODE	O	O:0.999596
	
We	O	O:0.999967
need	O	O:0.999945
more	O	O:0.999911
information	O	O:0.999961
on	O	O:0.999998
your	O	O:0.999893
array	O	O:0.999879
.	O	O:0.999915
	
@USER	O	O:0.998121
:	O	O:0.999938
If	O	O:0.999994
the	O	O:0.999996
code	O	O:0.999828
all	O	O:0.999968
F77	O	O:0.999700
,	O	O:0.999990
why	O	O:0.999818
is	O	O:0.999991
the	O	O:0.999969
question	O	O:0.999580
tagged	O	O:0.999561
Python	O	O:0.999552
?	O	O:0.999955
	
It	O	O:0.999957
does	O	O:0.999952
that	O	O:0.999966
without	O	O:0.999993
densifying	O	O:0.998221
the	O	O:0.999894
matrix	O	O:0.999350
right	O	O:0.999598
?	O	O:0.999980
	
To	O	O:0.999988
speed	O	O:0.999565
up	O	O:0.999962
the	O	O:0.999948
program	O	O:0.999769
,	O	O:0.999992
I	O	O:0.999999
want	O	O:0.999983
to	O	O:0.999981
pass	O	O:0.999881
the	O	O:0.999979
index	O	O:0.999969
through	O	O:0.999898
a	O	O:0.999989
subroutine	O	O:0.998515
,	O	O:0.999985
but	O	O:0.999975
I	O	O:0.999986
cannot	O	O:0.999995
pass	O	O:0.996531
`	O	O:0.999858
[	O	O:0.999890
index	O	O:0.999944
[	O	O:0.999964
0	O	O:0.999970
]	O	O:0.999820
,	O	O:0.999810
:	O	O:0.999902
,	O	O:0.999989
index	O	O:0.999951
[	O	O:0.999984
1	O	O:0.999984
]	O	O:0.999804
,	O	O:0.999934
index	O	O:0.999876
[	O	O:0.999963
2	O	O:0.999986
]]`	O	O:0.999962
through	O	O:0.999728
a	O	O:0.999971
subroutine	O	O:0.999653
because	O	O:0.999925
I	O	O:0.999993
cannot	O	O:0.999997
pass	O	O:0.999005
the	O	O:0.999988
colon	O	O:0.996213
'	O	O:0.999931
:	O	O:0.999913
'	O	O:0.999973
.	O	O:0.999953
	
Any	O	O:0.999922
thoughts	O	O:0.999667
on	O	O:0.999983
what	O	O:0.999881
I'm	O	O:0.999996
doing	O	O:0.999949
wrong	O	O:0.999253
?	O	O:0.999731
	
This	O	O:0.999799
will	O	O:0.999949
be	O	O:0.999996
far	O	O:0.999982
,	O	O:0.999984
far	O	O:0.999820
faster	O	O:0.999834
than	O	O:0.999885
constantly	O	O:0.999728
reallocating	O	O:0.999901
the	O	O:0.999861
array	O	O:0.999932
inside	O	O:0.999722
the	O	O:0.999953
loop	O	O:0.998823
.	O	O:0.999829
	
How	O	O:0.999904
can	O	O:0.999959
I	O	O:1.000000
get	O	O:0.999999
a	O	O:0.999993
new	O	O:0.999629
array	O	O:0.999942
containing	O	O:0.999667
the	O	O:0.999994
values	O	O:0.999670
of	O	O:0.999992
specific	O	O:0.999988
attributes	O	O:0.999896
of	O	O:0.999960
those	O	O:0.999916
objects	O	O:0.999783
?	O	O:0.999938
	
Seriously	O	O:0.999663
,	O	O:0.999993
at	O	O:0.999996
least	O	O:0.999859
leave	O	O:0.999795
a	O	O:0.999987
note	O	O:0.995187
,	O	O:0.999993
but	O	O:0.999983
given	O	O:0.999584
the	O	O:0.999982
"	O	O:0.999983
complexity	O	O:0.999725
"	O	O:0.999994
of	O	O:0.999996
your	O	O:0.999820
actual	O	O:0.999802
request	O	O:0.999876
I'd	O	O:0.999974
say	O	O:0.999992
that	O	O:0.999931
you'll	O	O:0.999983
have	O	O:0.999984
better	O	O:0.999962
chances	O	O:0.999916
with	O	O:0.999983
a	O	O:0.999997
new	O	O:0.999385
question	O	O:0.999244
.	O	O:0.999850
	
and	O	O:0.999981
find	O	O:0.999938
the	O	O:0.999981
roots	O	O:0.999368
with	O	O:0.999781
numpy	O	O:0.999066
:	O	O:0.999975
#CODE	O	O:0.999795
	
I	O	O:0.999990
need	O	O:0.999989
to	O	O:0.999994
create	O	O:0.999997
a	O	O:0.999998
numpy	O	O:0.999944
array	O	O:0.999988
of	O	O:0.999967
N	O	O:0.999936
elements	O	O:0.999658
,	O	O:0.999977
but	O	O:0.999988
I	O	O:0.999998
want	O	O:0.999994
to	O	O:0.999970
access	O	O:0.999978
the	O	O:0.999931
	
I	O	O:0.999990
have	O	O:0.999979
allocated	O	O:0.999968
a	O	O:0.999999
chunk	O	O:0.999666
of	O	O:0.999991
double	O	O:0.989398
in	O	O:0.999998
a	O	O:0.999971
C	O	O:0.998409
library	O	O:0.999649
and	O	O:0.999969
I	O	O:0.999985
would	O	O:0.999988
like	O	O:0.999957
to	O	O:1.000000
create	O	O:0.999995
a	O	O:0.999999
numpy	O	O:0.999649
1D	O	O:0.999962
array	O	O:0.999969
based	O	O:0.999552
on	O	O:0.999998
that	O	O:0.999989
data	O	O:0.999995
;	O	O:0.999999
ideally	O	O:0.999945
I	O	O:0.999997
would	O	O:0.999991
like	O	O:0.999919
two	O	O:0.999995
versions	O	O:0.999976
one	O	O:0.999977
which	O	O:0.999986
only	O	O:0.999930
wraps	O	O:0.999960
the	O	O:0.999982
c_ptr	O	O:0.997473
readonly	O	O:0.999639
-	O	O:0.999987
letting	O	O:0.999672
the	O	O:0.999976
C	O	O:0.999814
layer	O	O:0.999875
retain	O	O:0.999290
ownership	O	O:0.999961
of	O	O:0.999996
the	O	O:0.999994
data	O	O:0.999917
,	O	O:0.999985
and	O	O:0.999999
one	O	O:0.999992
which	O	O:0.999815
copies	O	O:0.999914
the	O	O:0.999994
data	O	O:0.999626
.	O	O:0.999916
	
The	O	O:0.999922
code	O	O:0.999725
included	O	O:0.999790
in	O	O:0.999993
pypy	O	O:0.998341
is	O	O:0.999998
a	O	O:0.999983
new	O	O:0.999585
array	O	O:0.999966
class	O	O:0.999637
which	O	O:0.999955
tries	O	O:0.999819
to	O	O:0.999996
be	O	O:0.999999
compatible	O	O:0.999891
with	O	O:0.999953
numpy	O	O:0.999647
,	O	O:0.999967
IOW	O	O:0.999370
,	O	O:0.999986
it	O	O:0.999947
is	O	O:0.999999
a	O	O:0.999991
reimplementation	O	O:0.999937
from	O	O:0.999878
scratch	O	O:0.999713
,	O	O:0.999985
without	O	O:0.999946
many	O	O:0.999763
features	O	O:0.999417
from	O	O:0.999940
numpy	O	O:0.999735
.	O	O:0.999911
	
Like	O	O:0.999828
I	O	O:0.999996
say	O	O:0.999982
,	O	O:0.999932
I'm	O	O:0.999959
honestly	O	O:0.999874
struggling	O	O:0.999516
,	O	O:0.999990
any	O	O:0.999981
help	O	O:0.997325
would	O	O:0.999933
be	O	O:0.999997
much	O	O:0.999881
appreciated	O	O:0.999132
.	O	O:0.999657
	
with	O	O:0.999439
array	O	O:0.999661
.	O	O:0.999878
	
I'm	O	O:0.999852
not	O	O:0.999985
sure	O	O:0.999991
that	O	O:0.999950
I	O	O:0.999997
understand	O	O:0.999965
the	O	O:0.999933
difference	O	O:0.999230
between	O	O:0.999474
copying	O	O:0.999309
the	O	O:0.999867
matrix	O	O:0.990840
(	O	O:0.999987
example	O	O:0.999914
1	O	O:0.999942
)	O	O:0.999979
and	O	O:0.999987
copying	O	O:0.999880
the	O	O:0.999926
data	O	O:0.996380
(	O	O:0.999993
example	O	O:0.999943
2	O	O:0.999917
)	O	O:0.999978
.	O	O:0.999770
	
Does	O	O:0.999579
anybody	O	O:0.999966
know	O	O:0.999898
of	O	O:0.999989
a	O	O:0.999684
(	O	O:0.999955
common	O	O:0.999895
case	O	O:0.999928
)	O	O:0.999994
faster-than-linear	O	O:0.999587
way	O	O:0.999969
to	O	O:0.999988
find	O	O:0.999995
the	O	O:0.999999
endpoints	O	O:0.999949
of	O	O:0.999996
a	O	O:0.999957
boolean	O	O:0.999582
property	O	O:0.999969
of	O	O:0.999981
an	O	O:0.999959
array	O	O:0.999928
.	O	O:0.999748
	
Any	O	O:0.999566
unrecognized	O	O:0.999500
type	O	O:0.998384
will	O	O:0.999862
work	O	O:0.999992
this	O	O:0.999986
way	O	O:0.999991
,	O	O:0.999996
so	O	O:0.999989
you	O	O:0.999952
might	O	O:0.999996
want	O	O:0.999993
to	O	O:0.999994
use	O	O:0.999994
`	O	O:0.999959
myclass	O	O:0.963626
`	O	O:0.999998
instead	O	O:0.999916
of	O	O:0.999986
`	O	O:0.999921
object	O	O:0.997025
`	O	O:0.999980
.	O	O:0.999512
	
Iterate	O	O:0.999865
over	O	O:0.999804
vectors	O	O:0.999176
in	O	O:0.999990
a	O	O:0.999997
multidimensional	O	O:0.998872
numpy	O	O:0.999747
array	O	O:0.999678
	
This	O	O:0.999776
way	O	O:0.999981
you	O	O:0.999943
can	O	O:0.999996
load	O	O:0.999994
a	O	O:0.999999
large	O	O:0.999476
dataset	O	O:0.999950
from	O	O:0.999920
a	O	O:0.999994
textfile	O	O:0.999959
memory-efficiently	O	O:0.999766
while	O	O:0.999978
retaining	O	O:0.999706
all	O	O:0.999943
the	O	O:0.999974
convenient	O	O:0.999838
parsing	O	O:0.999968
features	O	O:0.999648
of	O	O:0.999986
the	O	O:0.999996
two	O	O:0.999946
functions	O	O:0.999790
.	O	O:0.999835
	
you	O	O:0.999888
may	O	O:0.999983
win	O	O:0.999961
few	O	O:0.999986
cycles	O	O:0.999885
if	O	O:0.999989
you	O	O:0.999998
multiply	O	O:0.999910
by	O	O:0.999987
inverse	O	O:0.999914
instead	O	O:0.999943
of	O	O:0.999996
dividing	O	O:0.999229
in	O	O:0.999949
floating-point	O	O:0.999342
performance	O	O:0.999364
.	O	O:0.999791
	
Without	O	O:0.999728
knowing	O	O:0.999536
the	O	O:0.999986
size	O	O:0.999716
or	O	O:0.999998
quantity	O	O:0.999977
of	O	O:0.999998
the	O	O:0.999992
images	O	O:0.999324
or	O	O:0.999995
the	O	O:0.999996
application	O	O:0.999974
of	O	O:0.999992
the	O	O:0.999946
algorithm	O	O:0.999496
(	O	O:0.999964
computer	O	O:0.999792
vision	O	O:0.999923
?	O	O:0.999990
)	O	O:0.999994
,	O	O:0.999991
I	O	O:0.999989
can't	O	O:0.999960
say	O	O:0.999901
how	O	O:0.999994
big	O	O:0.999957
a	O	O:0.999995
deal	O	O:0.994947
that	O	O:0.999987
kind	O	O:0.999969
of	O	O:0.999990
speedup	O	O:0.992798
is	O	O:0.999970
.	O	O:0.999729
	
Is	O	O:0.999986
there	O	O:0.999963
an	O	O:0.999997
easy	O	O:0.999871
way	O	O:0.999978
to	O	O:0.999986
sort	O	O:0.999971
these	O	O:0.999946
eigenvalues	O	O:0.995675
(	O	O:0.999949
and	O	O:0.999998
associated	O	O:0.999917
vectors	O	O:0.998919
)	O	O:0.999978
in	O	O:0.999984
order	O	O:0.999654
?	O	O:0.999948
	
You	O	O:0.999884
can	O	O:0.999991
pass	O	O:0.999975
a	O	O:0.999998
numpy	O	O:0.999858
array	O	O:0.999821
or	O	O:0.999980
matrix	O	O:0.999934
as	O	O:0.999997
an	O	O:0.999970
argument	O	O:0.999956
when	O	O:0.999740
initializing	O	O:0.999928
a	O	O:0.999986
sparse	O	O:0.991492
matrix	O	O:0.999055
.	O	O:0.999772
	
(	O	O:0.999828
For	O	O:0.999991
most	O	O:0.999861
common	O	O:0.999943
applications	O	O:0.999949
of	O	O:0.999978
quadratic	O	O:0.999409
forms	O	O:0.999961
q	O	O:0.999677
A	O	O:0.999983
,	O	O:0.999983
the	O	O:0.999952
matrix	O	O:0.998808
A	O	O:0.999936
is	O	O:0.999995
symmetric	O	O:0.999031
,	O	O:0.999992
or	O	O:0.999997
even	O	O:0.999787
symmetric	O	O:0.999985
positive	O	O:0.999825
definite	O	O:0.999756
,	O	O:0.999987
so	O	O:0.999989
feel	O	O:0.999893
free	O	O:0.999926
to	O	O:0.999994
assume	O	O:0.999999
that	O	O:0.999937
either	O	O:0.999997
one	O	O:0.999998
of	O	O:0.999996
these	O	O:0.999451
is	O	O:0.999995
the	O	O:0.999969
case	O	O:0.999830
,	O	O:0.999992
if	O	O:0.999979
it	O	O:0.999989
matters	O	O:0.999767
for	O	O:0.999999
your	O	O:0.998683
answer	O	O:0.999478
.	O	O:0.999947
)	O	O:0.999938
	
I	O	O:0.999985
think	O	O:0.999944
you	O	O:0.999846
might	O	O:0.999983
find	O	O:0.999966
the	O	O:0.999995
`	O	O:0.999994
flat	O	O:0.743611
`	O	O:0.999984
method	O	O:0.999598
useful	O	O:0.999256
.	O	O:0.999854
	
Now	O	O:0.999980
that	O	O:0.999971
we	O	O:0.999999
have	O	O:0.999984
both	O	O:0.999972
the	O	O:0.999993
starting	O	O:0.998767
and	O	O:0.999998
ending	O	O:0.999852
values	O	O:0.999459
,	O	O:0.999995
we	O	O:0.999999
can	O	O:0.999953
use	O	O:0.999999
the	O	O:0.999978
indices	O	O:0.994535
function	O	O:0.999942
from	O	O:0.999993
this	O	O:0.999964
question	O	O:0.999970
to	O	O:0.999996
get	O	O:0.999998
an	O	O:0.999999
array	O	O:0.999992
of	O	O:0.999984
selector	O	O:0.998374
indices	O	O:0.997564
:	O	O:0.999942
#CODE	O	O:0.999850
	
10	O	O:0.995464
(	O	O:0.999914
i	O	O:0.999973
?	O	O:0.999990
1	O	O:0.999937
)	O	O:0.999989
K	O	O:0.999841
,	O	O:0.999998
where	O	O:0.999857
K	O	O:0.999913
=	O	O:0.999972
k	O	O:0.999622
/	O	O:0.999727
(	O	O:0.999948
n	O	O:0.999949
?	O	O:0.999985
1	O	O:0.999848
)	O	O:0.999978
.	O	O:0.999726
	
This	O	O:0.999802
identifies	O	O:0.999781
which	O	O:0.999994
rows	O	O:0.999890
have	O	O:0.999976
any	O	O:0.999997
element	O	O:0.999730
which	O	O:0.999413
are	O	O:0.999957
True	O	O:0.999596
#CODE	O	O:0.999444
	
Broadcasting	O	O:0.996174
is	O	O:0.999984
a	O	O:0.999982
more	O	O:0.999437
general	O	O:0.999478
way	O	O:0.999918
to	O	O:0.999985
fill	O	O:0.999816
an	O	O:0.999980
array	O	O:0.999929
and	O	O:0.999987
I	O	O:0.999974
would	O	O:0.999956
guess	O	O:0.999013
is	O	O:0.999998
slower	O	O:0.999269
or	O	O:0.999997
equal	O	O:0.999554
to	O	O:0.999995
the	O	O:1.000000
very	O	O:0.999729
narrow	O	O:0.999621
use	O	O:0.999995
case	O	O:0.999870
of	O	O:0.999961
`	O	O:0.999981
fill	O	O:0.897634
`	O	O:0.999985
.	O	O:0.999298
	
By	O	O:0.999547
"	O	O:0.999951
not	O	O:0.999992
replicating	O	O:0.999967
data	O	O:0.999797
"	O	O:0.999992
I	O	O:0.999993
am	O	O:0.999999
assuming	O	O:0.999679
you	O	O:0.999992
mean	O	O:0.999212
"	O	O:0.999994
not	O	O:0.999960
allocating	O	O:0.999962
more	O	O:0.999367
memory	O	O:0.999385
"	O	O:0.999943
.	O	O:0.999701
	
Can	O	O:0.999744
you	O	O:0.999982
post	O	O:0.999850
all	O	O:0.999977
/	O	O:0.999999
more	O	O:0.999765
of	O	O:0.999997
the	O	O:0.999993
data	O	O:0.999905
?	O	O:0.999960
	
The	O	O:0.999860
scoring	O	O:0.994405
matrix	O	O:0.999362
would	O	O:0.999872
be	O	O:0.999998
trivial	O	O:0.999977
,	O	O:0.999993
as	O	O:0.999992
the	O	O:0.999859
"	O	O:0.999977
distance	O	O:0.999519
"	O	O:0.999945
between	O	O:0.999561
two	O	O:0.999960
numbers	O	O:0.997830
is	O	O:0.999991
just	O	O:0.999942
their	O	O:0.999933
difference	O	O:0.999453
.	O	O:0.999682
	
Contours	O	O:0.998938
around	O	O:0.999866
scipy	O	O:0.999698
labeled	O	O:0.999673
regions	O	O:0.999339
in	O	O:0.999992
a	O	O:0.999990
2D	O	O:0.999379
grid	O	O:0.999263
	
Why	O	O:0.999809
doesn't	O	O:0.999872
the	O	O:0.999997
shape	O	O:0.999950
of	O	O:0.999990
my	O	O:0.999980
numpy	O	O:0.999977
array	O	O:0.999962
change	O	O:0.997117
?	O	O:0.999911
	
Mind	O	O:0.999764
also	O	O:0.999833
the	O	O:0.999982
indexing	O	O:0.999775
starts	O	O:0.999087
at	O	O:0.999991
`	O	O:0.999982
0	O	O:0.997208
`	O	O:0.999969
	
I	O	O:0.999992
have	O	O:0.999995
a	O	O:0.999992
vague	O	O:0.999416
feeling	O	O:0.999949
that	O	O:0.999765
I	O	O:0.999996
might	O	O:0.999997
have	O	O:0.999936
seen	O	O:0.999982
a	O	O:0.999995
question	O	O:0.999043
addressing	O	O:0.999979
this	O	O:0.999673
problem	O	O:0.999027
,	O	O:0.999989
but	O	O:0.999959
I	O	O:0.999976
can't	O	O:0.999968
find	O	O:0.999834
it	O	O:0.999991
now	O	O:0.999866
.	O	O:0.999947
	
If	O	O:0.999970
you	O	O:0.999992
know	O	O:0.999976
which	O	O:0.999998
rows	O	O:0.999712
are	O	O:0.999995
to	O	O:0.999999
be	O	O:0.999999
deleted	O	O:0.999864
,	O	O:0.999999
just	O	O:0.999941
extract	O	O:0.999689
the	O	O:0.999998
other	O	O:0.999984
rows	O	O:0.997572
(	O	O:0.999988
you	O	O:0.999998
need	O	O:0.999952
)	O	O:0.999998
and	O	O:0.999998
create	O	O:0.999941
a	O	O:0.999985
new	O	O:0.999460
array	O	O:0.999726
.	O	O:0.999741
	
If	O	O:0.999978
there	O	O:0.999610
is	O	O:0.999996
any	O	O:0.999973
other	O	O:0.999918
way	O	O:0.999893
I	O	O:0.999994
guess	O	O:0.999952
I	O	O:0.999993
have	O	O:0.999978
to	O	O:0.999966
do	O	O:0.999999
that	O	O:0.999887
.	O	O:0.999968
	
I	O	O:0.999992
have	O	O:0.999985
a	O	O:0.999966
matrix	O	O:0.999502
,	O	O:0.999986
say	O	O:0.999914
#CODE	O	O:0.999678
	
You	O	O:0.999826
might	O	O:0.999979
find	O	O:0.999866
out	O	O:0.999994
the	O	O:0.999981
distribution	O	O:0.999614
information	O	O:0.999977
using	O	O:0.999940
`	O	O:0.999912
cat	O	O:0.991485
/	O	O:0.999994
etc	O	O:0.998890
/	O	O:0.999988
*-release	O	O:0.998065
`	O	O:0.999927
;)	O	O:0.999240
	
I	O	O:0.999848
was	O	O:0.999975
wondering	O	O:0.998985
if	O	O:0.999966
anyone	O	O:0.999897
found	O	O:0.999911
a	O	O:0.999985
good	O	O:0.996464
workaround	O	O:0.999963
,	O	O:0.999996
as	O	O:0.999995
my	O	O:0.999942
real-world	O	O:0.999777
problem	O	O:0.999888
of	O	O:0.999994
iterating	O	O:0.999794
over	O	O:0.999773
the	O	O:0.999990
Cartesian-product	O	O:0.999576
of	O	O:0.999997
the	O	O:0.999999
rows	O	O:0.999730
in	O	O:0.999988
very	O	O:0.999960
large	O	O:0.999898
arrays	O	O:0.997657
is	O	O:0.999983
so	O	O:0.999967
slow	O	O:0.998528
it's	O	O:0.999945
impeding	O	O:0.999241
progress	O	O:0.999312
.	O	O:0.999784
	
I	O	O:0.999993
have	O	O:0.999981
an	O	O:0.999992
array	O	O:0.999984
of	O	O:0.999975
x	O	O:0.999820
,	O	O:0.999997
y	O	O:0.999950
,	O	O:0.999988
z	O	O:0.999949
distances	O	O:0.999834
and	O	O:0.999994
I	O	O:0.999999
need	O	O:0.999949
to	O	O:0.999982
find	O	O:0.999996
the	O	O:0.999994
differences	O	O:0.999669
between	O	O:0.999745
each	O	O:0.999885
vector	O	O:0.999975
from	O	O:0.999983
one	O	O:0.999993
another	O	O:0.999798
.	O	O:0.999872
	
The	O	O:0.999974
code	O	O:0.999603
above	O	O:0.999974
finds	O	O:0.999937
parts	O	O:0.999790
where	O	O:0.999968
there	O	O:0.999989
are	O	O:0.999997
at	O	O:0.999996
least	O	O:0.999753
MIN_SILENCE	O	O:0.999812
consecutive	O	O:0.999704
elements	O	O:0.999754
smaller	O	O:0.999658
than	O	O:0.999742
SILENCE_THRESHOLD	O	O:0.992210
.	O	O:0.999884
	
The	O	O:0.999974
list	O	O:0.999254
of	O	O:0.999985
indices	O	O:0.998097
will	O	O:0.999969
always	O	O:0.999992
be	O	O:0.999998
ascending	O	O:0.998749
,	O	O:0.999954
never	O	O:0.999900
have	O	O:0.999950
duplicates	O	O:0.999249
,	O	O:0.999988
but	O	O:0.999989
may	O	O:0.999996
have	O	O:0.999994
gaps	O	O:0.999958
like	O	O:0.999962
the	O	O:0.999994
example	O	O:0.999181
.	O	O:0.999849
	
Any	O	O:0.999667
ideas	O	O:0.999166
?	O	O:0.999888
	
sum	O	O:0.998106
function	O	O:0.999845
in	O	O:0.999971
python	O	O:0.999376
	
All	O	O:0.999854
globals	O	O:0.999946
hold	O	O:0.999621
either	O	O:0.999984
values	O	O:0.999931
referenced	O	O:0.999864
by	O	O:0.999995
those	O	O:0.999973
tuples	O	O:0.998852
or	O	O:0.999994
are	O	O:0.999998
lists	O	O:0.999915
of	O	O:0.999973
tuples	O	O:0.997697
.	O	O:0.999945
	
You	O	O:0.999879
can	O	O:0.999991
pass	O	O:0.999928
a	O	O:0.999998
list	O	O:0.998343
or	O	O:0.999995
an	O	O:0.999992
array	O	O:0.999994
as	O	O:0.999993
indexes	O	O:0.999113
to	O	O:0.999986
any	O	O:0.999998
np	O	O:0.999104
array	O	O:0.999737
.	O	O:0.999864
	
The	O	O:0.999878
array	O	O:0.999878
I'm	O	O:0.999983
using	O	O:0.999605
is	O	O:0.999905
quite	O	O:0.997495
large	O	O:0.993703
(	O	O:0.999920
3500x3500	O	O:0.998227
)	O	O:0.999988
,	O	O:0.999988
so	O	O:0.999988
I'm	O	O:0.999985
wondering	O	O:0.999950
where	O	O:0.999941
the	O	O:0.999995
best	O	O:0.999925
place	O	O:0.999731
to	O	O:0.999996
load	O	O:0.999956
it	O	O:0.999974
is	O	O:0.999992
for	O	O:0.999993
repeated	O	O:0.997217
use	O	O:0.998721
.	O	O:0.999021
	
Basically	O	O:0.999598
,	O	O:0.999991
it	O	O:0.999996
comes	O	O:0.999882
down	O	O:0.999894
to	O	O:0.999994
checking	O	O:0.999945
before	O	O:0.999816
you	O	O:0.999920
add	O	O:0.999804
.	O	O:0.999939
	
I	O	O:0.999992
have	O	O:0.999991
a	O	O:0.999991
simple	O	O:0.995501
function	O	O:0.999892
called	O	O:0.999850
get_gradient	O	O:0.997102
which	O	O:0.999787
takes	O	O:0.999944
a	O	O:0.999997
numpy	O	O:0.999838
array	O	O:0.999959
of	O	O:0.999754
[[	O	O:0.999913
x	O	O:0.999968
,	O	O:0.999991
y	O	O:0.999922
,	O	O:0.999978
Vx	O	O:0.999858
,	O	O:0.999986
Vy	O	O:0.999939
]]	O	O:0.999827
and	O	O:0.999906
returns	O	O:0.994419
(	O	O:0.999632
should	O	O:0.999947
return	O	O:0.999670
)	O	O:0.999994
an	O	O:0.999993
array	O	O:0.999977
of	O	O:0.999692
[[	O	O:0.999829
Vx	O	O:0.999952
,	O	O:0.999977
Vy	O	O:0.999947
,	O	O:0.999973
Ax	O	O:0.999902
,	O	O:0.999990
Ay	O	O:0.999910
]]	O	O:0.999873
.	O	O:0.999524
	
I	O	O:0.999887
found	O	O:0.999951
this	O	O:0.999232
post	O	O:0.996472
:	O	O:0.999964
Python	O	O:0.999427
:	O	O:0.999997
finding	O	O:0.999831
an	O	O:0.999984
element	O	O:0.999894
in	O	O:0.999986
an	O	O:0.999984
array	O	O:0.999891
	
So	O	O:0.999923
,	O	O:0.999993
are	O	O:0.999990
VBOs	O	O:0.999759
simply	O	O:0.999879
not	O	O:0.999996
meant	O	O:0.999959
to	O	O:0.999988
be	O	O:1.000000
that	O	O:0.999935
big	O	O:0.999555
(	O	O:0.999998
I	O	O:0.999991
somehow	O	O:0.999968
doubt	O	O:0.999656
that	O	O:0.999955
VBOs	O	O:0.999927
could	O	O:0.999991
only	O	O:0.999998
have	O	O:0.999946
around	O	O:0.999967
17k	O	O:0.999898
triangles	O	O:0.999879
each	O	O:0.999748
)	O	O:0.999985
?	O	O:0.999930
	
`	O	O:0.999971
flags	O	O:0.989756
`	O	O:0.999989
parameter	O	O:0.999779
leads	O	O:0.999820
to	O	O:0.999960
`	O	O:0.999997
TypeError	O	O:0.997526
`	O	O:0.999996
if	O	O:0.999941
input	O	O:0.999975
array	O	O:0.998156
is	O	O:0.999906
not	O	O:0.999903
contiguous	O	O:0.998780
.	O	O:0.999866
	
I	O	O:0.999994
then	O	O:0.999988
have	O	O:0.999994
a	O	O:0.999998
2nd	O	O:0.999882
array	O	O:0.999974
similar	O	O:0.999533
to	O	O:0.999964
#CODE	O	O:0.999975
	
Convert	O	O:0.999455
a	O	O:0.999994
list	O	O:0.997876
of	O	O:0.999983
2D	O	O:0.999908
numpy	O	O:0.999929
arrays	O	O:0.999781
to	O	O:0.999989
one	O	O:0.999999
3D	O	O:0.999966
numpy	O	O:0.999830
array	O	O:0.999871
?	O	O:0.999908
	
I'm	O	O:0.999960
currently	O	O:0.999961
a	O	O:0.999999
grad	O	O:0.989966
student	O	O:0.999680
at	O	O:0.999960
Harvard	O	O:0.998837
and	O	O:0.999997
a	O	O:0.999995
good	O	O:0.996233
friend	O	O:0.999943
of	O	O:0.999987
mine	O	O:0.999321
went	O	O:0.999877
there	O	O:0.999418
(	O	O:0.999982
he	O	O:0.999945
would	O	O:0.999958
have	O	O:0.999974
graduated	O	O:0.999993
two	O	O:0.999981
or	O	O:0.999999
three	O	O:0.999912
years	O	O:0.999892
ago	O	O:0.999983
,	O	O:0.999997
as	O	O:0.999985
he	O	O:0.999464
is	O	O:0.999995
currently	O	O:0.999963
a	O	O:0.999994
second-year	O	O:0.998709
grad	O	O:0.996240
student	O	O:0.999970
here	O	O:0.999454
at	O	O:0.999995
Harvard	O	O:0.999643
with	O	O:0.999947
me	O	O:0.999884
)	O	O:0.999974
.	O	O:0.999802
	
I'm	O	O:0.999901
not	O	O:0.999991
clear	O	O:0.999939
on	O	O:0.999993
how	O	O:0.999969
you	O	O:0.999990
are	O	O:0.999998
wanting	O	O:0.999953
to	O	O:0.999983
plot	O	O:0.999972
it	O	O:0.999958
,	O	O:0.999986
but	O	O:0.999989
it	O	O:0.999988
sound	O	O:0.999918
like	O	O:0.999935
you'll	O	O:0.999975
need	O	O:0.999987
to	O	O:0.999997
select	O	O:0.999996
some	O	O:0.999989
values	O	O:0.999956
of	O	O:0.999998
a	O	O:0.999995
column	O	O:0.999510
.	O	O:0.999915
	
The	O	O:0.999936
issue	O	O:0.999780
I	O	O:0.999984
am	O	O:0.999994
running	O	O:0.997969
in	O	O:0.999982
to	O	O:0.999939
is	O	O:1.000000
that	O	O:0.999906
the	O	O:0.999999
array	O	O:0.999960
can	O	O:0.999940
be	O	O:0.999999
larger	O	O:0.999926
than	O	O:0.999586
3gb	O	O:0.999027
in	O	O:0.999970
size	O	O:0.997791
(	O	O:0.999989
these	O	O:0.999936
are	O	O:0.999993
huge	O	O:0.999808
images	O	O:0.997035
)	O	O:0.999972
and	O	O:0.999991
I	O	O:0.999998
need	O	O:0.999926
to	O	O:0.999899
segment	O	O:1.000000
them	O	O:0.999977
prior	O	O:0.999919
to	O	O:0.999995
ingesting	O	O:0.999999
them	O	O:0.999000
.	O	O:0.999945
	
The	O	O:0.999789
latter	O	O:0.999385
might	O	O:0.999925
be	O	O:0.999968
faster	O	O:0.999871
because	O	O:0.999722
it	O	O:0.999973
doesn't	O	O:0.999972
produce	O	O:0.999926
the	O	O:0.999994
intermediate	O	O:0.999444
`	O	O:0.999960
x**2	O	O:0.972511
`	O	O:0.999991
array	O	O:0.999285
.	O	O:0.999905
	
Any	O	O:0.999679
suggestions	O	O:0.999103
?	O	O:0.999884
	
"	O	O:0.999854
A	O	O:0.999998
copy	O	O:0.997515
of	O	O:0.999990
arr	O	O:0.997412
with	O	O:0.999975
the	O	O:0.999975
elements	O	O:0.999941
specified	O	O:0.999835
by	O	O:0.999989
obj	O	O:0.999183
removed	O	O:0.996808
.	O	O:0.999673
	
is	O	O:0.999878
not	O	O:0.999955
it	O	O:0.999999
another	O	O:0.999977
copy	O	O:0.984883
?	O	O:0.999959
	
NOTE	O	O:0.998405
:	O	O:0.999994
the	O	O:0.999971
row	O	O:0.999900
has	O	O:0.999598
"	O	O:0.999969
:	O	O:0.999932
"	O	O:0.999973
,	O	O:0.999967
but	O	O:0.999982
the	O	O:0.999840
"	O	O:0.999882
:	O	O:0.999904
"	O	O:0.999995
does	O	O:0.999940
mean	O	O:0.999893
the	O	O:0.999997
dict	O	O:0.995992
'	O	O:0.999905
:	O	O:0.999939
'	O	O:0.999973
.	O	O:0.999953
	
If	O	O:0.999961
,	O	O:0.999989
for	O	O:0.999997
some	O	O:0.999389
reason	O	O:0.999845
,	O	O:0.999995
I	O	O:0.999990
would	O	O:0.999991
only	O	O:0.999978
save	O	O:0.999947
one	O	O:0.999994
dictionary	O	O:0.999991
then	O	O:0.999954
every	O	O:0.999925
script	O	O:0.999956
loading	O	O:0.999880
this	O	O:0.999945
file	O	O:0.999950
with	O	O:0.999941
pickle	O	O:0.991522
would	O	O:0.999996
mess	O	O:0.999871
up	O	O:0.999997
the	O	O:0.999998
order	O	O:0.999828
of	O	O:0.999987
the	O	O:0.999988
stored	O	O:0.999847
variables	O	O:0.997882
.	O	O:0.999877
	
You	O	O:0.999760
might	O	O:0.999969
also	O	O:0.999984
want	O	O:0.999996
to	O	O:0.999996
take	O	O:0.999999
a	O	O:0.999999
look	O	O:0.998998
at	O	O:0.999996
Anvil	O	O:0.998537
,	O	O:0.999968
announcement	O	O:0.999885
here	O	O:0.998548
.	O	O:0.999904
	
The	O	O:0.999962
other	O	O:0.999756
way	O	O:0.999991
that	O	O:0.999874
I	O	O:0.999999
know	O	O:0.999856
is	O	O:0.999958
to	O	O:0.999974
convert	O	O:0.999888
Y	O	O:0.999904
to	O	O:0.999991
list	O	O:0.999956
iteratively	O	O:0.999037
.	O	O:0.999896
	
This	O	O:0.999035
is	O	O:0.999988
especially	O	O:0.999665
helpful	O	O:0.999752
since	O	O:0.999749
it	O	O:0.999968
includes	O	O:0.999927
the	O	O:0.999978
import	O	O:0.993355
commands	O	O:0.997914
and	O	O:0.999992
info	O	O:0.999930
on	O	O:0.999970
how	O	O:0.999989
to	O	O:0.999996
write	O	O:0.999993
to	O	O:0.999992
file	O	O:0.999990
.	O	O:0.999939
	
But	O	O:0.999966
actually	O	O:0.999957
I	O	O:0.999967
am	O	O:0.999993
not	O	O:0.999937
so	O	O:0.999998
sure	O	O:0.999980
that	O	O:0.999990
from	O	O:0.999995
where	O	O:0.999977
you	O	O:0.999992
are	O	O:0.999997
now	O	O:0.999987
,	O	O:0.999998
using	O	O:0.999975
sparse	O	O:0.997699
matrices	O	O:0.998800
will	O	O:0.999912
gain	O	O:0.999695
you	O	O:0.999996
any	O	O:0.999983
speed-up	O	O:0.997887
.	O	O:0.999778
	
Upon	O	O:0.999364
deeper	O	O:0.999930
examination	O	O:0.999908
of	O	O:0.999996
the	O	O:0.999979
relationship	O	O:0.999728
between	O	O:0.999153
the	O	O:0.999985
python	O	O:0.999548
printout	O	O:0.999717
and	O	O:0.999993
the	O	O:0.999999
structure	O	O:0.999635
of	O	O:0.999987
my	O	O:0.999996
underlying	O	O:0.999974
data	O	O:0.999941
,	O	O:0.999995
I	O	O:0.999997
see	O	O:0.999993
that	O	O:0.999796
the	O	O:0.999997
python	O	O:0.999643
print	O	O:0.998154
command	O	O:0.997731
is	O	O:0.999972
saying	O	O:0.999599
that	O	O:0.999945
there	O	O:0.999953
are	O	O:0.999995
two	O	O:0.999998
empty	O	O:0.999975
columns	O	O:0.999857
at	O	O:0.999995
the	O	O:0.999999
end	O	O:0.999921
of	O	O:0.999984
the	O	O:0.999922
array	O	O:0.999900
.	O	O:0.999745
	
How	O	O:0.999891
to	O	O:0.999991
convert	O	O:0.999964
a	O	O:0.999992
simple	O	O:0.999821
list	O	O:0.999813
of	O	O:0.999992
lists	O	O:0.999719
into	O	O:0.999953
a	O	O:0.999996
numppy	O	O:0.991388
array	O	O:0.999903
?	O	O:0.999904
	
Django	O	O:0.999000
has	O	O:0.999978
a	O	O:0.999989
library	O	O:0.998786
for	O	O:0.999988
encapsulating	O	O:0.999137
all	O	O:0.999902
the	O	O:0.999993
database	O	O:0.999914
work	O	O:0.999811
into	O	O:0.999970
Python	O	O:0.999960
classes	O	O:0.999402
,	O	O:0.999997
so	O	O:0.999995
you	O	O:0.999971
don't	O	O:0.999997
have	O	O:0.999992
to	O	O:0.999999
mess	O	O:0.999989
with	O	O:0.999973
raw	O	O:0.999936
SQL	O	O:0.999976
until	O	O:0.999605
you	O	O:0.999988
have	O	O:0.999991
to	O	O:0.999998
do	O	O:1.000000
something	O	O:0.999985
really	O	O:0.999370
clever	O	O:0.999474
.	O	O:0.999845
	
So	O	O:0.999947
I	O	O:0.999971
got	O	O:0.999986
numpy	O	O:0.999366
,	O	O:0.999991
scipy	O	O:0.999126
,	O	O:0.999968
IPython	O	O:0.998959
,	O	O:0.999957
and	O	O:0.999992
matplotlib	O	O:0.999539
working	O	O:0.991504
(	O	O:0.999987
I	O	O:0.999985
can	O	O:0.999981
import	O	O:0.999915
all	O	O:0.999995
four	O	O:0.999798
with	O	O:0.999599
"	O	O:0.999974
import	O	O:0.998274
_	O	O:0.999438
)"	O	O:0.999348
.	O	O:0.999500
	
@USER	O	O:0.998442
`	O	O:0.999959
new	O	O:0.999222
type	O	O:0.999696
not	O	O:0.999975
compatible	O	O:0.999837
with	O	O:0.999914
array	O	O:0.999717
.	O	O:0.999888
	
Is	O	O:0.999974
there	O	O:0.999971
any	O	O:0.999986
way	O	O:0.999961
to	O	O:0.999952
do	O	O:1.000000
this	O	O:0.999901
in	O	O:0.999977
Python	O	O:0.999665
?	O	O:0.999970
	
Then	O	O:0.999800
you	O	O:0.999995
can	O	O:0.999990
choose	O	O:0.999999
many	O	O:0.999982
methods	O	O:0.999822
to	O	O:0.999980
visualize	O	O:0.999918
it	O	O:0.999952
.	O	O:0.999958
	
Numpy	O	O:0.999141
Array	O	O:0.999495
to	O	O:0.999945
base64	O	O:0.999976
and	O	O:0.999996
back	O	O:0.999373
to	O	O:0.999962
Numpy	O	O:0.999971
Array	O	O:0.999649
-	O	O:0.999951
Python	O	O:0.999271
	
In	O	O:0.999971
each	O	O:0.999869
iteration	O	O:0.999951
of	O	O:0.999986
Gibbs	O	O:0.999716
sampling	O	O:0.999789
,	O	O:0.999982
we	O	O:0.999991
remove	O	O:0.998304
one	O	O:0.999941
(	O	O:0.999996
current	O	O:0.999559
)	O	O:0.999986
word	O	O:0.999545
,	O	O:0.999997
sample	O	O:0.999970
a	O	O:0.999986
new	O	O:0.999678
topic	O	O:0.999843
for	O	O:0.999988
that	O	O:0.999701
word	O	O:0.999983
according	O	O:0.999929
to	O	O:0.999996
a	O	O:0.999997
posterior	O	O:0.999695
conditional	O	O:0.999338
probability	O	O:0.999899
distribution	O	O:0.999859
inferred	O	O:0.999918
from	O	O:0.999948
the	O	O:0.999889
LDA	O	O:0.999914
model	O	O:0.999516
,	O	O:0.999986
and	O	O:0.999993
update	O	O:0.999640
word-topic	O	O:0.999649
counts	O	O:0.999705
,	O	O:0.999998
as	O	O:0.999986
follows	O	O:0.984734
:	O	O:0.999968
#CODE	O	O:0.999795
	
I	O	O:0.999936
am	O	O:0.999995
getting	O	O:0.998621
weird	O	O:0.999801
errors	O	O:0.999964
when	O	O:0.999757
I	O	O:0.999998
try	O	O:0.999998
to	O	O:0.999969
convert	O	O:0.999965
a	O	O:0.999994
black	O	O:0.995976
and	O	O:0.999990
white	O	O:0.999510
PIL	O	O:0.999520
image	O	O:0.999863
to	O	O:0.999991
a	O	O:1.000000
numpy	O	O:0.999178
array	O	O:0.999851
.	O	O:0.999837
	
Numpy	O	O:0.999511
arrays	O	O:0.999895
have	O	O:0.999964
a	O	O:0.999995
`	O	O:0.999992
copy	O	O:0.545529
`	O	O:0.999996
method	O	O:0.998610
which	O	O:0.999984
you	O	O:0.999991
can	O	O:0.999988
use	O	O:0.999997
for	O	O:0.999969
just	O	O:0.999895
this	O	O:0.999911
purpose	O	O:0.999156
.	O	O:0.999857
	
Actually	O	O:0.999818
I	O	O:0.999959
could	O	O:0.999962
not	O	O:0.999994
test	O	O:0.999782
with	O	O:0.999986
big	O	O:0.999737
K	O	O:0.999894
,	O	O:0.999964
d	O	O:0.999855
and	O	O:0.999989
N	O	O:0.999986
as	O	O:0.999949
I	O	O:0.999775
was	O	O:0.999985
going	O	O:0.999504
out	O	O:0.999905
of	O	O:0.999948
memory	O	O:0.998598
.	O	O:0.999927
	
With	O	O:0.999918
all	O	O:0.999958
of	O	O:0.999996
these	O	O:0.999829
options	O	O:0.999982
you	O	O:0.999993
have	O	O:0.999991
to	O	O:0.999999
pay	O	O:0.999999
a	O	O:0.999992
JNA	O	O:0.996819
tax	O	O:0.999937
...	O	O:0.999960
all	O	O:0.999976
of	O	O:1.000000
your	O	O:0.999914
data	O	O:0.999955
has	O	O:0.999992
to	O	O:0.999994
be	O	O:0.999999
copied	O	O:0.999243
before	O	O:0.999816
it	O	O:0.999966
can	O	O:0.999952
be	O	O:0.999999
processed	O	O:0.999829
.	O	O:0.999705
	
Useless	O	O:0.998117
because	O	O:0.999879
it	O	O:0.999981
ignores	O	O:0.999926
the	O	O:0.999976
"	O	O:0.999974
cross	O	O:0.998768
platform	O	O:0.999976
issues	O	O:0.999665
,	O	O:0.999991
proprietary	O	O:0.999880
tool	O	O:0.999813
chains	O	O:0.999922
,	O	O:0.999995
certification	O	O:0.999878
gates	O	O:0.999499
,	O	O:0.999994
licensed	O	O:0.999837
technologies	O	O:0.999359
,	O	O:0.999976
and	O	O:0.999994
stringent	O	O:0.999584
performance	O	O:0.999749
requirements	O	O:0.999889
on	O	O:0.999997
top	O	O:0.999975
of	O	O:0.999997
the	O	O:0.999930
issues	O	O:0.999798
with	O	O:0.999885
legacy	O	O:0.999611
codebases	O	O:0.997683
and	O	O:0.999990
workforce	O	O:0.999829
availability	O	O:0.998746
"	O	O:0.999412
(	O	O:0.999882
John	O	O:0.999920
Carmack	O	O:0.999236
)	O	O:0.999994
that	O	O:0.999825
op	O	O:0.999949
is	O	O:0.999989
probably	O	O:0.999321
facing	O	O:0.999160
.	O	O:0.999451
	
And	O	O:0.999967
that	O	O:0.999982
the	O	O:0.999999
values	O	O:0.999878
of	O	O:0.999969
all	O	O:0.999648
(	O	O:0.999994
x	O	O:0.999861
,	O	O:0.999996
y	O	O:0.999989
)	O	O:0.999993
pairs	O	O:0.999496
are	O	O:0.999986
given	O	O:0.999265
.	O	O:0.999882
	
Is	O	O:0.999780
is	O	O:0.999995
possible	O	O:0.999767
to	O	O:0.999998
have	O	O:0.999999
a	O	O:0.999997
3-D	O	O:0.999843
record	O	O:0.999650
array	O	O:0.999883
in	O	O:0.999978
numpy	O	O:0.999641
?	O	O:0.999953
	
However	O	O:0.999725
,	O	O:0.999992
the	O	O:0.999978
evidence	O	O:0.999527
suggests	O	O:0.999854
that	O	O:0.999952
you've	O	O:0.999975
encountered	O	O:0.999945
an	O	O:0.999994
issue	O	O:0.999873
of	O	O:0.999995
this	O	O:0.999848
sort	O	O:0.999147
.	O	O:0.999933
	
There's	O	O:0.999591
_way_	O	O:0.999578
less	O	O:0.998362
overhead	O	O:0.999973
this	O	O:0.999691
way	O	O:0.999923
.	O	O:0.999835
	
I'm	O	O:0.999847
having	O	O:0.999772
trouble	O	O:0.999893
figuring	O	O:0.999261
out	O	O:0.999910
what	O	O:0.999953
kind	O	O:0.999914
of	O	O:0.999998
test	O	O:0.998326
I	O	O:0.999999
need	O	O:0.999985
here	O	O:0.998882
,	O	O:0.999989
and	O	O:0.999991
the	O	O:0.999986
best	O	O:0.998690
numpy	O	O:0.999722
/	O	O:0.999975
scipy	O	O:0.999351
/	O	O:0.999953
R	O	O:0.998028
function	O	O:0.999950
to	O	O:0.999971
use	O	O:0.999993
for	O	O:0.999728
these	O	O:0.999893
kinds	O	O:0.999884
of	O	O:0.999944
issues	O	O:0.997735
.	O	O:0.999924
	
I	O	O:0.999991
have	O	O:0.999965
see	O	O:0.999955
people	O	O:0.999973
using	O	O:0.999958
dictionaries	O	O:0.995984
,	O	O:0.999871
but	O	O:0.999985
the	O	O:0.999949
arrays	O	O:0.999493
are	O	O:0.999978
large	O	O:0.999290
and	O	O:0.999946
filled	O	O:0.997846
with	O	O:0.999689
both	O	O:0.999710
positive	O	O:0.998339
and	O	O:0.999986
negative	O	O:0.999451
floats	O	O:0.995943
.	O	O:0.999785
	
How	O	O:0.999896
can	O	O:0.999939
I	O	O:1.000000
speed	O	O:0.999956
up	O	O:0.999796
iteration	O	O:0.999862
through	O	O:0.999878
this	O	O:0.999916
transformed	O	O:0.999881
numpy	O	O:0.999867
array	O	O:0.999817
?	O	O:0.999910
	
This	O	O:0.998247
is	O	O:0.999946
may	O	O:0.999967
not	O	O:0.999991
be	O	O:0.999996
the	O	O:0.999995
best	O	O:0.998968
way	O	O:0.999969
to	O	O:0.999965
solve	O	O:0.999982
this	O	O:0.999853
but	O	O:0.999997
have	O	O:0.999992
a	O	O:0.999999
look	O	O:0.999453
at	O	O:0.999994
the	O	O:0.999928
following	O	O:0.999024
...	O	O:0.998388
	
All	O	O:0.999773
in	O	O:0.999987
all	O	O:0.999982
,	O	O:0.999996
I	O	O:0.999992
would	O	O:0.999990
go	O	O:0.999977
with	O	O:0.999988
the	O	O:0.999918
#CODE	O	O:0.999538
	
This	O	O:0.995737
is	O	O:0.999986
not	O	O:0.999989
a	O	O:0.999999
matter	O	O:0.999758
of	O	O:0.999981
style	O	O:0.999751
.	O	O:0.999973
without	O	O:0.999555
the	O	O:0.999884
list	O	O:0.952544
(	O	O:0.999969
_	O	O:0.999720
)	O	O:0.999981
it	O	O:0.999945
does	O	O:0.999884
not	O	O:0.999996
even	O	O:0.999992
work	O	O:0.999988
at	O	O:1.000000
last	O	O:0.999537
for	O	O:0.999988
the	O	O:0.999952
case	O	O:0.999562
i	O	O:0.999987
have	O	O:0.999987
that	O	O:0.999975
y	O	O:0.999976
is	O	O:0.999995
an	O	O:0.999989
array	O	O:0.999975
itself	O	O:0.998858
	
(	O	O:0.999954
at	O	O:0.999991
least	O	O:0.999498
it	O	O:0.999993
gives	O	O:0.999883
me	O	O:0.999991
an	O	O:0.999982
error	O	O:0.999841
stating	O	O:0.999588
that	O	O:0.999879
the	O	O:0.999987
'	O	O:0.999990
as	O	O:0.999961
'	O	O:0.999875
is	O	O:0.999993
reserved	O	O:0.998043
in	O	O:0.999970
python	O	O:0.999757
2.6	O	O:0.999704
)	O	O:0.999978
Am	O	O:0.999973
I	O	O:0.999988
correct	O	O:0.999928
?	O	O:0.999888
	
Did	O	O:0.999917
you	O	O:0.999962
try	O	O:0.999996
looking	O	O:0.999930
at	O	O:0.999997
numpy	O	O:0.999717
for	O	O:0.999984
matlab	O	O:0.999654
users	O	O:0.999398
manuals	O	O:0.999482
,	O	O:0.999987
like	O	O:0.999700
:	O	O:0.999959
#URL	O	O:0.999672
	
I	O	O:0.999686
would	O	O:0.999954
not	O	O:0.999970
try	O	O:0.999997
to	O	O:0.999996
process	O	O:0.999961
`	O	O:0.999993
arr	O	O:0.998933
`	O	O:0.999994
in	O	O:0.999917
place	O	O:0.999858
-	O	O:0.999995
it	O	O:0.999983
seems	O	O:0.999989
that	O	O:0.999994
a	O	O:0.999999
new	O	O:0.999825
array	O	O:0.999794
is	O	O:0.999986
created	O	O:0.998496
under	O	O:0.999950
the	O	O:0.999984
hood	O	O:0.998855
in	O	O:0.999995
most	O	O:0.999905
cases	O	O:0.999866
anyway	O	O:0.999862
.	O	O:0.999866
	
Now	O	O:0.999909
you	O	O:0.999967
must	O	O:0.999987
initialize	O	O:0.999982
each	O	O:0.999981
element	O	O:0.999946
of	O	O:0.999992
the	O	O:0.999982
numpy	O	O:0.999938
array	O	O:0.999939
to	O	O:0.999994
be	O	O:1.000000
an	O	O:0.999988
1-d	O	O:0.999844
numpy	O	O:0.999344
array	O	O:0.998928
:	O	O:0.999927
#CODE	O	O:0.999744
	
The	O	O:0.999934
easiest	O	O:0.999386
way	O	O:0.999843
around	O	O:0.999937
this	O	O:0.999545
is	O	O:0.999987
to	O	O:0.999995
just	O	O:0.999994
use	O	O:0.999996
a	O	O:0.999964
numpy	O	O:0.999242
array	O	O:0.999909
,	O	O:0.999993
instead	O	O:0.999990
of	O	O:0.999998
a	O	O:0.999989
numpy	O	O:0.998687
matrix	O	O:0.997572
:	O	O:0.999930
#CODE	O	O:0.999845
	
I	O	O:0.999927
am	O	O:0.999997
trying	O	O:0.999776
to	O	O:0.999998
create	O	O:0.999978
an	O	O:0.999988
affinity	O	O:0.999956
matrix	O	O:0.999857
for	O	O:0.999967
an	O	O:0.999920
image	O	O:0.998919
.	O	O:0.999762
	
to	O	O:0.999939
handle	O	O:0.999991
the	O	O:0.999994
error	O	O:0.999818
cases	O	O:0.998947
and	O	O:0.999993
the	O	O:0.999990
return	O	O:0.996633
value	O	O:0.999632
,	O	O:0.999996
they	O	O:0.999865
are	O	O:0.999994
not	O	O:0.999989
related	O	O:0.999909
to	O	O:0.999988
the	O	O:0.999998
array	O	O:0.999811
assignment	O	O:0.999303
.	O	O:0.999853
	
Saving	O	O:0.999524
a	O	O:0.999957
Numpy	O	O:0.999378
array	O	O:0.999961
as	O	O:0.999977
an	O	O:0.999866
image	O	O:0.998920
(	O	O:0.999977
instructions	O	O:0.999477
)	O	O:0.999937
	
Using	O	O:0.999860
this	O	O:0.999729
,	O	O:0.999995
I	O	O:0.999998
know	O	O:0.999914
I	O	O:0.999965
am	O	O:0.999995
calculating	O	O:0.999238
r-squared	O	O:0.999890
correctly	O	O:0.999873
for	O	O:0.999988
linear	O	O:0.990274
best-fit	O	O:0.985358
(	O	O:0.999919
degree	O	O:0.999917
equals	O	O:0.999584
1	O	O:0.999915
)	O	O:0.999935
.	O	O:0.999726
	
No	O	O:0.999976
expert	O	O:0.999827
on	O	O:0.999983
the	O	O:0.999975
topic	O	O:0.999568
,	O	O:0.999966
but	O	O:0.999996
this	O	O:0.999771
is	O	O:0.999996
some	O	O:0.999943
kind	O	O:0.999941
of	O	O:0.999984
adjency	O	O:0.995888
matrix	O	O:0.998595
(	O	O:0.999925
#URL	O	O:0.999487
)	O	O:0.999941
.	O	O:0.999746
	
about	O	O:0.999554
15	O	O:0.999927
times	O	O:0.999434
faster	O	O:0.999904
using	O	O:0.999858
broadcast	O	O:0.977141
	
Arrays	O	O:0.998815
to	O	O:0.999936
Matrix	O	O:0.999993
numpy	O	O:0.999498
	
but	O	O:0.999814
it	O	O:0.999977
appears	O	O:0.999971
to	O	O:0.999997
only	O	O:0.999998
take	O	O:0.999979
square	O	O:0.999864
matrices	O	O:0.999563
.	O	O:0.999823
	
Any	O	O:0.999869
idea	O	O:0.999302
how	O	O:0.999988
that	O	O:0.999957
can	O	O:0.999996
be	O	O:1.000000
done	O	O:0.999926
?	O	O:0.999904
	
In	O	O:0.999993
your	O	O:0.999948
code	O	O:0.999821
,	O	O:0.999997
`	O	O:0.999998
a	O	O:0.999889
[	O	O:0.999976
condition	O	O:0.999899
]	O	O:0.999633
[	O	O:0.999958
index	O	O:0.999899
]`	O	O:0.999940
returns	O	O:0.999817
the	O	O:0.999991
value	O	O:0.999858
in	O	O:0.999994
a	O	O:0.999986
,	O	O:0.999976
but	O	O:0.999985
I	O	O:0.999995
want	O	O:0.999986
the	O	O:0.999893
INDEX	O	O:0.998569
in	O	O:0.999993
a	O	O:0.999993
,	O	O:0.999987
so	O	O:0.999997
that	O	O:0.999944
`	O	O:1.000000
a	O	O:0.999972
[	O	O:0.999964
INDEX	O	O:0.998939
]	O	O:0.999933
=	O	O:0.999794
a	O	O:0.999965
[	O	O:0.999880
condition	O	O:0.999889
]	O	O:0.999619
[	O	O:0.999925
index	O	O:0.999761
]`	O	O:0.999831
.	O	O:0.999817
	
Any	O	O:0.999842
database	O	O:0.999983
that	O	O:0.999908
can	O	O:0.999998
create	O	O:0.999968
an	O	O:0.999996
index	O	O:0.999966
will	O	O:0.999895
provide	O	O:0.999962
relatively	O	O:0.999946
fast	O	O:0.999006
look-ups	O	O:0.997046
(	O	O:0.999991
depending	O	O:0.999934
on	O	O:0.999943
how	O	O:0.999979
many	O	O:0.999989
millions	O	O:0.999988
of	O	O:0.999990
records	O	O:0.999190
you're	O	O:0.999976
storing	O	O:0.999426
)	O	O:0.999954
.	O	O:0.999772
	
Actually	O	O:0.999748
,	O	O:0.999989
the	O	O:0.999994
best	O	O:0.999438
way	O	O:0.999956
to	O	O:0.999991
manage	O	O:0.999998
packages	O	O:0.999698
on	O	O:0.999987
OS	O	O:0.999981
X	O	O:0.999750
is	O	O:0.999802
[	O	O:0.999954
Homebrew	O	O:0.999595
]	O	O:0.999134
(	O	O:0.999859
#URL	O	O:0.999257
)	O	O:0.999193
(	O	O:0.999905
not	O	O:0.999989
Fink	O	O:0.999739
or	O	O:0.999978
MacPorts	O	O:0.999390
:))	O	O:0.999912
-	O	O:0.999978
which	O	O:0.999976
unfortunately	O	O:0.999955
lists	O	O:0.999504
neither	O	O:0.999956
NumPy	O	O:0.999797
now	O	O:0.999968
SciPy	O	O:0.999819
at	O	O:0.999991
the	O	O:0.999969
current	O	O:0.999465
time	O	O:0.999810
.	O	O:0.999910
	
I	O	O:0.999936
would	O	O:0.999996
like	O	O:0.999949
to	O	O:1.000000
keep	O	O:0.999922
`	O	O:0.999993
xcoords	O	O:0.965558
`	O	O:0.999999
a	O	O:0.999973
numpy	O	O:0.999781
array	O	O:0.999939
if	O	O:0.999972
possible	O	O:0.999462
.	O	O:0.999993
what	O	O:0.999954
do	O	O:0.999972
you	O	O:0.999997
mean	O	O:0.999492
'	O	O:0.999998
adding	O	O:0.999995
them	O	O:0.999471
to	O	O:0.999984
the	O	O:0.999992
object	O	O:0.999267
before	O	O:0.999819
it	O	O:0.999942
is	O	O:0.999993
returned	O	O:0.997477
'	O	O:0.999936
?	O	O:0.999938
	
But	O	O:0.999881
I	O	O:0.999998
just	O	O:0.999988
need	O	O:0.999946
to	O	O:0.999998
sort	O	O:0.999990
out	O	O:0.999971
which	O	O:0.999977
points	O	O:0.999756
to	O	O:0.999997
send	O	O:0.999971
for	O	O:0.999997
a	O	O:0.999984
complete	O	O:0.994006
graph	O	O:0.999654
.	O	O:0.999750
	
how	O	O:0.999952
do	O	O:0.999984
I	O	O:0.999997
calculate	O	O:0.999912
that	O	O:0.999948
an	O	O:0.999999
array	O	O:0.999986
of	O	O:0.999977
python	O	O:0.999871
numpy	O	O:0.999974
or	O	O:0.999997
me	O	O:0.999985
of	O	O:0.999994
all	O	O:0.999985
the	O	O:0.999997
calculate	O	O:0.996911
decimals	O	O:0.999393
and	O	O:0.999995
not	O	O:0.999997
skip	O	O:0.997836
like	O	O:0.999851
.	O	O:0.999922
	
It	O	O:0.999928
will	O	O:0.999781
support	O	O:0.999902
it	O	O:0.999993
on	O	O:0.999989
the	O	O:0.999997
next	O	O:0.999631
release	O	O:0.998764
.	O	O:0.999895
	
Python	O	O:0.999563
lists	O	O:0.999557
are	O	O:0.999980
defined	O	O:0.999782
with	O	O:0.999896
square	O	O:0.999308
brackets	O	O:0.999660
,	O	O:0.999984
and	O	O:0.999995
we	O	O:0.999997
want	O	O:0.999930
to	O	O:0.999998
generate	O	O:0.999993
a	O	O:0.999999
list	O	O:0.999606
of	O	O:0.999989
lists	O	O:0.990395
(	O	O:0.999997
where	O	O:0.999976
each	O	O:0.999633
piece	O	O:0.999966
contains	O	O:0.999962
one	O	O:0.999997
of	O	O:0.999999
your	O	O:0.999923
defined	O	O:0.999926
segments	O	O:0.999743
)	O	O:0.999946
.	O	O:0.999905
	
The	O	O:0.999902
biggest	O	O:0.999406
gotcha	O	O:0.999836
for	O	O:0.999937
me	O	O:0.999315
was	O	O:0.999901
that	O	O:0.999935
almost	O	O:0.999993
every	O	O:0.999805
standard	O	O:0.998499
operator	O	O:0.998913
is	O	O:0.999982
overloaded	O	O:0.999871
to	O	O:0.999995
distribute	O	O:0.999972
across	O	O:0.999763
the	O	O:0.999953
array	O	O:0.999727
.	O	O:0.999773
	
I	O	O:0.999992
want	O	O:0.999987
to	O	O:0.999961
combine	O	O:0.999961
the	O	O:0.999992
two	O	O:0.999984
into	O	O:0.999884
a	O	O:0.999995
mutli-dimensional	O	O:0.993871
numpy	O	O:0.999784
array	O	O:0.999779
.	O	O:0.999766
	
where	O	O:0.998799
`	O	O:0.999989
nlooks	O	O:0.989420
`	O	O:0.999988
and	O	O:0.999789
`	O	O:0.999998
dfactor	O	O:0.926155
`	O	O:0.999991
are	O	O:0.999834
scalars	O	O:0.999745
and	O	O:0.999939
`	O	O:0.999993
Ic	O	O:0.997984
`	O	O:0.999971
is	O	O:0.999909
the	O	O:0.999977
unfiltered	O	O:0.998659
array	O	O:0.999444
.	O	O:0.999755
	
In	O	O:0.999974
a	O	O:0.999989
10x5x5	O	O:0.996610
matrix	O	O:0.999883
with	O	O:0.999675
`	O	O:0.999984
x	O	O:0.999787
[	O	O:0.999989
0	O	O:0.999887
,	O	O:0.999935
:	O	O:0.999971
,	O	O:0.999976
:]	O	O:0.999993
=	O	O:0.999866
0	O	O:0.999943
`	O	O:0.999984
I	O	O:0.999908
would	O	O:0.999994
expect	O	O:0.999993
a	O	O:0.999999
result	O	O:0.999735
of	O	O:0.999861
:	O	O:0.999886
#CODE	O	O:0.999915
	
For	O	O:0.999725
example	O	O:0.999403
:	O	O:0.999990
I	O	O:0.999999
have	O	O:0.999998
a	O	O:0.999967
=	O	O:0.999735
array	O	O:0.999793
([	O	O:0.999866
123	O	O:0.998985
,	O	O:0.999969
412	O	O:0.999622
,	O	O:0.999979
444	O	O:0.999639
])	O	O:0.999788
	
While	O	O:0.999800
it	O	O:0.999998
often	O	O:0.999774
results	O	O:0.999975
in	O	O:0.999995
a	O	O:0.999997
massive	O	O:0.999265
speedup	O	O:0.999796
to	O	O:0.999991
eliminate	O	O:0.999945
for	O	O:0.999984
loops	O	O:0.999166
and	O	O:0.999992
take	O	O:0.999957
advantage	O	O:0.999945
of	O	O:0.999988
numpy	O	O:0.999290
built-ins	O	O:0.999639
/	O	O:0.999880
vectorization	O	O:0.999212
.	O	O:0.999848
	
If	O	O:0.999926
I	O	O:0.999996
understand	O	O:0.999971
correctly	O	O:0.999723
you	O	O:0.999995
have	O	O:0.999992
a	O	O:0.999999
three	O	O:0.999841
dimensional	O	O:0.999720
array	O	O:0.999905
,	O	O:0.999996
something	O	O:0.999890
like	O	O:0.998169
:	O	O:0.999984
#CODE	O	O:0.999860
	
@USER	O	O:0.997501
:	O	O:0.999986
where	O	O:0.999877
is	O	O:0.999999
a	O	O:0.999995
new	O	O:0.999734
array	O	O:0.999907
created	O	O:0.998136
?	O	O:0.999941
	
array	O	O:0.999322
([	O	O:0.999860
41	O	O:0.999465
,	O	O:0.999976
32	O	O:0.999943
,	O	O:0.999959
41	O	O:0.999872
,	O	O:0.999976
33	O	O:0.999909
,	O	O:0.999976
42	O	O:0.999874
,	O	O:0.999983
32	O	O:0.999956
,	O	O:0.999971
42	O	O:0.999875
,	O	O:0.999984
33	O	O:0.999835
])	O	O:0.999776
	
Any	O	O:0.999853
idea	O	O:0.999711
when	O	O:0.999492
it	O	O:0.999996
will	O	O:0.999994
be	O	O:0.999997
ready	O	O:0.999694
?	O	O:0.999857
	
I	O	O:0.999949
see	O	O:0.999981
you've	O	O:0.999828
taken	O	O:0.999930
care	O	O:0.999962
of	O	O:0.999995
my	O	O:0.999958
edge	O	O:0.999933
issues	O	O:0.999674
,	O	O:0.999992
although	O	O:0.999997
your	O	O:0.999807
filter	O	O:0.998353
size	O	O:0.999706
is	O	O:0.999981
hardcoded	O	O:0.999572
;)	O	O:0.999826
.	O	O:0.999530
	
If	O	O:0.999942
you	O	O:0.999947
open	O	O:0.999654
idle	O	O:0.999753
and	O	O:0.999996
type	O	O:0.998943
`	O	O:0.999895
import	O	O:0.997491
matplotlib	O	O:0.999367
`	O	O:0.999925
it	O	O:0.999805
shouldn't	O	O:0.999986
return	O	O:0.999744
an	O	O:0.999970
error	O	O:0.999486
	
No	O	O:0.999976
expert	O	O:0.999827
on	O	O:0.999983
the	O	O:0.999975
topic	O	O:0.999568
,	O	O:0.999966
but	O	O:0.999996
this	O	O:0.999771
is	O	O:0.999996
some	O	O:0.999943
kind	O	O:0.999941
of	O	O:0.999984
adjency	O	O:0.995888
matrix	O	O:0.998595
(	O	O:0.999925
#URL	O	O:0.999487
)	O	O:0.999941
.	O	O:0.999746
	
Edit	O	O:0.997796
:	O	O:0.999942
If	O	O:0.999989
it's	O	O:0.999978
a	O	O:0.999997
floating	O	O:0.999465
point	O	O:0.999685
issue	O	O:0.999625
,	O	O:0.999997
what	O	O:0.999986
sort	O	O:0.999574
of	O	O:0.999998
floating	O	O:0.999785
point	O	O:0.999940
error	O	O:0.999910
mistakes	O	O:0.999970
a	O	O:0.999979
number	O	O:0.999776
much	O	O:0.999780
less	O	O:0.999968
than	O	O:0.999828
1	O	O:0.999969
as	O	O:0.999996
one	O	O:0.999929
around	O	O:0.999599
8	O	O:0.999755
?	O	O:0.999858
	
The	O	O:0.999831
question	O	O:0.999263
was	O	O:0.999969
about	O	O:0.999921
how	O	O:0.999966
to	O	O:0.999993
slice	O	O:0.999985
if	O	O:0.999996
the	O	O:0.999995
rank	O	O:0.972403
is	O	O:0.999993
not	O	O:0.999988
known	O	O:0.999917
at	O	O:0.999992
the	O	O:0.999987
time	O	O:0.999945
I	O	O:0.999989
write	O	O:0.999972
the	O	O:0.999922
code	O	O:0.999271
.	O	O:0.999907
	
I	O	O:0.999986
think	O	O:0.999972
a	O	O:0.999801
typical	O	O:0.991477
method	O	O:0.999830
is	O	O:0.999961
to	O	O:0.999995
always	O	O:0.999995
double	O	O:0.997626
the	O	O:0.999978
size	O	O:0.999807
,	O	O:0.999998
when	O	O:0.999953
you	O	O:0.999994
really	O	O:0.999982
don't	O	O:0.999979
know	O	O:0.999800
how	O	O:0.999994
large	O	O:0.999549
things	O	O:0.999594
will	O	O:0.999735
be	O	O:0.999991
.	O	O:0.999957
	
This	O	O:0.999135
script	O	O:0.999024
is	O	O:0.999984
mainly	O	O:0.999535
intended	O	O:0.999894
to	O	O:0.999958
demonstrate	O	O:0.999973
building	O	O:0.999811
an	O	O:0.999955
independent	O	O:0.999778
python	O	O:0.999563
in	O	O:0.999998
your	O	O:0.999853
home	O	O:0.999843
directory	O	O:0.999953
,	O	O:0.999954
and	O	O:0.999990
assumes	O	O:0.999747
the	O	O:0.999791
system	O	O:0.997961
you're	O	O:0.999955
building	O	O:0.999792
on	O	O:0.999968
has	O	O:0.999962
the	O	O:0.999998
proper	O	O:0.999544
dependencies	O	O:0.998963
already	O	O:0.999763
installed	O	O:0.999225
,	O	O:0.999935
but	O	O:0.999984
it	O	O:0.999993
at	O	O:0.999998
least	O	O:0.999950
points	O	O:0.999938
you	O	O:0.999898
in	O	O:0.999997
the	O	O:0.999996
right	O	O:0.999772
direction	O	O:0.998756
.	O	O:0.999955
	
and	O	O:0.999925
use	O	O:0.999946
the	O	O:0.999685
information	O	O:0.999614
on	O	O:0.999987
the	O	O:0.999993
size	O	O:0.999969
inclued	O	O:0.998957
in	O	O:0.999994
the	O	O:0.999992
filename	O	O:0.999989
to	O	O:0.999987
restore	O	O:0.999956
the	O	O:0.999987
initial	O	O:0.998913
shape	O	O:0.999626
	
Hmm	O	O:0.999748
I	O	O:0.999991
added	O	O:0.999921
for	O	O:0.999937
first	O	O:0.999608
example	O	O:0.999376
,	O	O:0.999980
did	O	O:0.999969
you	O	O:0.999989
know	O	O:0.999972
how	O	O:0.999995
to	O	O:0.999998
copy	O	O:0.999939
from	O	O:0.999962
IDE	O	O:0.999857
exactly	O	O:0.999977
with	O	O:0.999893
commas	O	O:0.998283
and	O	O:0.999997
everything	O	O:0.999905
..?	O	O:0.997267
	
@USER	O	O:0.995182
:	O	O:0.999968
Your	O	O:0.999915
answer	O	O:0.999887
will	O	O:0.999950
give	O	O:0.999968
false	O	O:0.999982
positives	O	O:0.999655
in	O	O:0.999984
the	O	O:0.999982
event	O	O:0.999933
that	O	O:0.999980
one	O	O:0.999996
or	O	O:0.999997
more	O	O:0.993200
(	O	O:0.999894
but	O	O:0.999975
not	O	O:0.999992
all	O	O:0.999998
)	O	O:0.999997
of	O	O:0.999983
the	O	O:0.999993
elements	O	O:0.999918
in	O	O:0.999963
B	O	O:0.999987
matches	O	O:0.999915
with	O	O:0.999987
one	O	O:0.999992
of	O	O:0.999999
the	O	O:0.999999
rows	O	O:0.999724
in	O	O:0.999879
A	O	O:0.999990
.	O	O:0.999938
	
I	O	O:0.999936
would	O	O:0.999997
like	O	O:0.999966
to	O	O:0.999999
average	O	O:0.999989
the	O	O:0.999968
2	O	O:0.999962
different	O	O:0.999884
arrays	O	O:0.999862
contained	O	O:0.999658
within	O	O:0.999450
`	O	O:0.999980
record	O	O:0.942045
`	O	O:0.999984
.	O	O:0.999525
	
I	O	O:0.999989
need	O	O:0.999973
to	O	O:0.999965
constrained	O	O:0.999995
minimization	O	O:0.999981
of	O	O:0.999999
some	O	O:0.999957
data	O	O:0.999885
(	O	O:0.999992
ie	O	O:0.999997
so	O	O:0.999998
that	O	O:0.999984
I	O	O:0.999999
get	O	O:0.999994
the	O	O:0.999979
minimum	O	O:0.999850
value	O	O:0.999930
within	O	O:0.999964
a	O	O:0.999995
certain	O	O:0.998164
range	O	O:0.999908
)	O	O:0.999949
.	O	O:0.999685
	
In	O	O:0.999983
this	O	O:0.999964
case	O	O:0.999983
,	O	O:0.999997
I	O	O:0.999986
would	O	O:0.999997
like	O	O:0.999932
to	O	O:0.999999
return	O	O:0.999817
the	O	O:0.999970
index	O	O:0.999511
2	O	O:0.999403
(	O	O:0.999994
2nd	O	O:0.999957
row	O	O:0.999833
)	O	O:0.999951
.	O	O:0.999836
	
a	O	O:0.999960
32	O	O:0.999905
bits	O	O:0.999889
process	O	O:0.999441
can	O	O:0.999998
only	O	O:0.999999
access	O	O:0.999910
around	O	O:0.999915
4	O	O:0.999937
GB	O	O:0.999932
of	O	O:0.999942
memory	O	O:0.999040
.	O	O:0.999926
	
How	O	O:0.999931
do	O	O:0.999937
I	O	O:0.999998
find	O	O:0.999905
out	O	O:0.999911
,	O	O:0.999995
if	O	O:0.999989
the	O	O:0.999987
numpy	O	O:0.999880
BLAS	O	O:0.999795
libraries	O	O:0.999384
are	O	O:0.999995
availalbe	O	O:0.999898
as	O	O:0.999987
dynamically-loadable	O	O:0.997960
?	O	O:0.999937
	
(	O	O:0.999976
they	O	O:0.999956
are	O	O:0.999994
at	O	O:0.999998
same	O	O:0.999977
scale	O	O:0.999114
)	O	O:0.999970
	
Now	O	O:0.999980
simply	O	O:0.999984
create	O	O:0.999958
a	O	O:0.999995
new	O	O:0.999585
array	O	O:0.999814
and	O	O:0.999961
multiply	O	O:0.984874
:	O	O:0.999763
#CODE	O	O:0.999740
	
Take	O	O:0.999911
a	O	O:0.999994
look	O	O:0.997842
at	O	O:0.999998
this	O	O:0.999747
Project	O	O:0.999395
Euler	O	O:0.999553
problem	O	O:0.997887
:	O	O:0.999931
#URL	O	O:0.999549
	
Python	O	O:0.996444
:	O	O:0.999986
how	O	O:0.999984
to	O	O:0.999999
store	O	O:0.999995
a	O	O:0.999994
numpy	O	O:0.999772
multidimensional	O	O:0.999815
array	O	O:0.999838
in	O	O:0.999945
PyTables	O	O:0.998995
?	O	O:0.999937
	
How	O	O:0.999760
can	O	O:0.999815
i	O	O:0.999999
load	O	O:0.999896
all	O	O:0.999930
24	O	O:0.999964
joblib	O	O:0.999823
files	O	O:0.999380
in	O	O:0.999981
one	O	O:0.999983
program	O	O:0.999927
without	O	O:0.999931
any	O	O:0.999919
errors	O	O:0.998065
?	O	O:0.999879
	
Where	O	O:0.999774
I'm	O	O:0.999974
stuck	O	O:0.998052
is	O	O:0.999993
what	O	O:0.999871
the	O	O:0.999980
wrapper	O	O:0.999897
code	O	O:0.999479
should	O	O:0.999991
then	O	O:0.999975
look	O	O:0.999998
like	O	O:0.999980
to	O	O:0.999999
pass	O	O:0.999978
a	O	O:0.999989
MxN	O	O:0.999888
numpy	O	O:0.999925
array	O	O:0.999890
to	O	O:0.999981
the	O	O:0.999991
**	O	O:0.999974
coords1	O	O:0.996488
and	O	O:0.999971
**	O	O:0.999993
coords2	O	O:0.994785
arguments	O	O:0.999436
.	O	O:0.999697
	
I	O	O:0.999990
have	O	O:0.999984
created	O	O:0.999799
a	O	O:0.999997
numpy	O	O:0.999085
2d	O	O:0.999980
array	O	O:0.999895
of	O	O:0.999980
type	O	O:0.998171
string	O	O:0.999958
called	O	O:0.998389
'	O	O:0.999994
minutes_array	O	O:0.998020
'	O	O:0.999981
with	O	O:0.999955
the	O	O:0.999992
first	O	O:0.999968
column	O	O:0.999910
as	O	O:0.999997
unix	O	O:0.999079
timestamps	O	O:0.999451
rounded	O	O:0.999584
to	O	O:0.999992
the	O	O:0.999999
nearest	O	O:0.999181
minute	O	O:0.999546
covering	O	O:0.999961
every	O	O:0.999921
minute	O	O:0.999444
from	O	O:0.999970
the	O	O:0.999997
start	O	O:0.999896
of	O	O:0.999996
the	O	O:0.999967
sensor	O	O:0.999974
timeseries	O	O:0.999748
to	O	O:0.999995
the	O	O:1.000000
end	O	O:0.999885
with	O	O:0.999971
three	O	O:0.999980
empty	O	O:0.999969
columns	O	O:0.999916
to	O	O:0.999991
be	O	O:1.000000
filled	O	O:0.999946
with	O	O:0.999983
data	O	O:0.999986
from	O	O:0.999998
each	O	O:0.999948
of	O	O:0.999998
the	O	O:0.999977
3	O	O:0.999970
sensors	O	O:0.999852
where	O	O:0.999955
available	O	O:0.999802
.	O	O:0.999920
	
Which	O	O:0.999758
can	O	O:0.999947
be	O	O:1.000000
done	O	O:0.999976
in	O	O:0.999822
O	O	O:0.995117
(	O	O:0.999989
n	O	O:0.999799
)	O	O:0.999968
,	O	O:0.999966
but	O	O:0.999999
your	O	O:0.999714
answer	O	O:0.999950
requires	O	O:0.999014
O	O	O:0.991499
(	O	O:0.999987
mn	O	O:0.999712
)	O	O:0.999990
,	O	O:0.999996
where	O	O:0.999966
m	O	O:0.999519
is	O	O:0.999998
size	O	O:0.999785
of	O	O:0.999441
window	O	O:0.999386
.	O	O:0.999903
	
Somehow	O	O:0.999034
I	O	O:0.999995
always	O	O:0.999981
thought	O	O:0.999627
you	O	O:0.999926
can	O	O:0.999986
load	O	O:0.999985
the	O	O:0.999995
shared	O	O:0.999422
library	O	O:0.999910
compiled	O	O:0.999440
with	O	O:0.999979
any	O	O:0.999816
compiler	O	O:0.999617
.	O	O:0.999762
	
`	O	O:0.999955
array	O	O:0.999270
=[	O	O:0.999948
'	O	O:0.999897
NaN	O	O:0.995553
'	O	O:0.999973
,	O	O:0.999975
'	O	O:0.999972
20	O	O:0.999750
'	O	O:0.999972
,	O	O:0.999956
'	O	O:0.999988
383.333	O	O:0.996848
'	O	O:0.999979
,	O	O:0.999981
'	O	O:0.999977
NaN	O	O:0.996844
'	O	O:0.999979
,	O	O:0.999977
'	O	O:0.999977
NaN	O	O:0.996845
'	O	O:0.999979
,	O	O:0.999977
'	O	O:0.999977
NaN	O	O:0.996787
'	O	O:0.999979
,	O	O:0.999983
'	O	O:0.999977
5	O	O:0.999816
'	O	O:0.999979
,	O	O:0.999977
'	O	O:0.999972
100	O	O:0.999488
'	O	O:0.999973
,	O	O:0.999969
'	O	O:0.999973
129	O	O:0.999471
'	O	O:0.999975
,	O	O:0.999948
'	O	O:0.999988
122.5	O	O:0.996878
'	O	O:0.999979
,	O	O:0.999979
'	O	O:0.999977
NaN	O	O:0.996844
'	O	O:0.999979
,	O	O:0.999977
'	O	O:0.999970
NaN	O	O:0.998811
']`	O	O:0.999779
	
array	O	O:0.999637
,	O	O:0.999967
and	O	O:0.999999
then	O	O:0.999813
use	O	O:0.999975
`	O	O:0.999992
view	O	O:0.901119
`	O	O:0.999998
to	O	O:0.999965
turn	O	O:0.999963
it	O	O:0.999997
into	O	O:0.999928
a	O	O:0.999995
structured	O	O:0.996578
array	O	O:0.999870
,	O	O:0.999970
and	O	O:0.999999
then	O	O:0.999619
use	O	O:0.999932
	
and	O	O:0.999976
so	O	O:0.999994
all	O	O:0.999948
we	O	O:0.999998
need	O	O:0.999954
to	O	O:0.999996
do	O	O:0.999977
is	O	O:0.999894
:	O	O:0.999861
#CODE	O	O:0.999867
	
Any	O	O:0.999925
clue	O	O:0.999626
to	O	O:0.999975
why	O	O:1.000000
this	O	O:0.999676
is	O	O:0.999995
happening	O	O:0.999062
?	O	O:0.999922
	
I	O	O:0.999979
think	O	O:0.999947
the	O	O:0.999878
definition	O	O:0.999887
used	O	O:0.999711
in	O	O:0.999984
the	O	O:0.999997
field	O	O:0.999961
of	O	O:0.999990
statistics	O	O:0.993557
is	O	O:0.999998
the	O	O:0.999994
value	O	O:0.999820
in	O	O:0.999973
the	O	O:0.999998
middle	O	O:0.999908
of	O	O:0.999999
your	O	O:0.999966
data	O	O:0.999991
array	O	O:0.999945
after	O	O:0.999878
it	O	O:0.999756
has	O	O:0.999931
been	O	O:0.999235
sorted	O	O:0.999638
.	O	O:0.999842
	
Dense	O	O:0.999657
covariance	O	O:0.999937
matrices	O	O:0.999912
of	O	O:0.999995
that	O	O:0.999942
size	O	O:0.999993
suggest	O	O:0.999834
operations	O	O:0.999971
that	O	O:0.999940
run	O	O:0.999915
forever	O	O:0.999653
!	O	O:0.999819
	
In	O	O:0.999983
this	O	O:0.999965
case	O	O:0.999953
,	O	O:0.999996
I'd	O	O:0.999992
like	O	O:0.999954
it	O	O:0.999995
to	O	O:0.999997
return	O	O:0.999991
a	O	O:0.999983
density	O	O:0.997950
that's	O	O:0.999929
essentially	O	O:0.999866
peaked	O	O:0.999979
completely	O	O:0.999860
at	O	O:0.999998
a	O	O:0.999995
difference	O	O:0.999945
of	O	O:0.999974
0	O	O:0.999871
,	O	O:0.999996
with	O	O:0.999848
no	O	O:0.999981
mass	O	O:0.999984
everywhere	O	O:0.999979
else	O	O:0.999858
.	O	O:0.999917
	
If	O	O:0.999958
the	O	O:0.999978
array	O	O:0.999765
is	O	O:0.999957
doubles	O	O:0.995836
(	O	O:0.999979
remember	O	O:0.999837
python	O	O:0.999537
floats	O	O:0.999809
are	O	O:0.999985
C	O	O:0.999977
doubles	O	O:0.999904
by	O	O:0.999976
default	O	O:0.999883
)	O	O:0.999994
then	O	O:0.999813
you	O	O:1.000000
have	O	O:0.999992
to	O	O:0.999999
think	O	O:0.999999
a	O	O:0.999997
bit	O	O:0.999790
harder	O	O:0.999878
as	O	O:0.999915
==	O	O:0.996195
is	O	O:0.999960
not	O	O:0.999927
really	O	O:0.999986
safe	O	O:0.999475
or	O	O:0.999996
what	O	O:0.999912
you	O	O:0.999997
want	O	O:0.999972
for	O	O:0.999992
floating	O	O:0.999869
point	O	O:0.999307
values	O	O:0.998694
.	O	O:0.999867
	
They	O	O:0.999854
all	O	O:0.999984
have	O	O:0.999987
their	O	O:0.999780
strengths	O	O:0.999595
and	O	O:0.999973
weaknesses	O	O:0.999213
.	O	O:0.999226
	
numpy	O	O:0.999878
array	O	O:0.999975
of	O	O:0.999990
chars	O	O:0.999461
to	O	O:0.999991
string	O	O:0.999961
	
matrix	O	O:0.999296
rank	O	O:0.987751
:	O	O:0.999979
#CODE	O	O:0.999789
	
This	O	O:0.999913
slows	O	O:0.999889
down	O	O:0.999521
for	O	O:0.999994
large	O	O:0.999279
sigma	O	O:0.996352
,	O	O:0.999990
at	O	O:0.999978
which	O	O:0.999921
point	O	O:0.999929
using	O	O:0.999908
FFT-based	O	O:0.996317
smoothing	O	O:0.995710
might	O	O:0.999862
be	O	O:0.999971
faster	O	O:0.999774
.	O	O:0.999554
	
What	O	O:0.998562
is	O	O:0.999989
the	O	O:0.999972
fastest	O	O:0.999514
way	O	O:0.999966
to	O	O:0.999986
iterate	O	O:0.999992
through	O	O:0.999866
all	O	O:0.999962
one	O	O:0.999991
dimensional	O	O:0.999821
sub-arrays	O	O:0.999934
of	O	O:0.999991
an	O	O:0.999970
n	O	O:0.999987
dimensional	O	O:0.999760
array	O	O:0.999805
in	O	O:0.999921
python	O	O:0.999125
.	O	O:0.999933
	
This	O	O:0.999258
works	O	O:0.999543
,	O	O:0.999976
but	O	O:0.999886
it's	O	O:0.999905
really	O	O:0.999868
slow	O	O:0.999094
.	O	O:0.999836
	
If	O	O:0.999979
I	O	O:0.999997
create	O	O:0.999965
a	O	O:0.999988
simple	O	O:0.999654
array	O	O:0.999970
like	O	O:0.999983
this	O	O:0.999920
in	O	O:0.999985
Python	O	O:0.999564
I'm	O	O:0.999998
able	O	O:0.999931
to	O	O:0.999997
read	O	O:0.999988
the	O	O:0.999997
values	O	O:0.999550
in	O	O:0.999992
the	O	O:0.999992
C	O	O:0.999676
code	O	O:0.998348
:	O	O:0.999950
	
In	O	O:0.999946
an	O	O:0.999989
ideal	O	O:0.999718
world	O	O:0.999886
,	O	O:0.999994
the	O	O:0.999975
function	O	O:0.999773
or	O	O:0.999992
class	O	O:0.999936
would	O	O:0.999990
support	O	O:0.999903
overlap	O	O:0.999723
between	O	O:0.999849
the	O	O:0.999994
divisions	O	O:0.998863
in	O	O:0.999985
the	O	O:0.999990
input	O	O:0.999754
matrix	O	O:0.999709
too	O	O:0.999629
.	O	O:0.999960
	
My	O	O:0.999937
problem	O	O:0.998188
is	O	O:0.999993
different	O	O:0.999833
because	O	O:0.999933
I	O	O:0.999996
need	O	O:0.999991
to	O	O:0.999985
find	O	O:0.999989
**	O	O:0.999997
all	O	O:0.999926
**	O	O:0.999998
the	O	O:0.999995
roots	O	O:0.999756
of	O	O:0.999993
my	O	O:0.999874
function	O	O:0.999983
,	O	O:0.999997
on	O	O:0.999998
a	O	O:0.999991
given	O	O:0.996905
interval	O	O:0.999838
.	O	O:0.999879
	
How	O	O:0.999900
can	O	O:0.999968
I	O	O:1.000000
create	O	O:0.999974
a	O	O:0.999985
PyArrayObject	O	O:0.998182
from	O	O:0.999977
this	O	O:0.999945
structure	O	O:0.999981
,	O	O:0.999998
specially	O	O:0.999981
how	O	O:0.999986
I	O	O:0.999997
can	O	O:0.999999
create	O	O:0.999980
a	O	O:0.999999
numpy	O	O:0.999697
array	O	O:0.999981
that	O	O:0.999975
hold	O	O:0.999464
3	O	O:0.999870
object	O	O:0.999375
(	O	O:0.999991
off	O	O:0.999988
course	O	O:0.999822
3	O	O:0.999897
is	O	O:0.999984
an	O	O:0.999982
example	O	O:0.999964
here	O	O:0.999419
)	O	O:0.999945
(	O	O:0.999997
each	O	O:0.999861
of	O	O:0.999998
them	O	O:0.998749
is	O	O:0.999998
an	O	O:0.999984
array	O	O:0.999918
)	O	O:0.999907
	
x	O	O:0.999329
:	O	O:0.999994
a	O	O:0.999998
numpy	O	O:0.999613
2d	O	O:0.999892
array	O	O:0.999682
	
Thanks	O	O:0.998775
for	O	O:0.999947
the	O	O:0.999837
info	O	O:0.996649
.	O	O:0.999880
	
How	O	O:0.999796
would	O	O:0.999951
you	O	O:0.999994
avoid	O	O:0.999973
the	O	O:0.999996
loop	O	O:0.999304
in	O	O:0.999989
the	O	O:0.999992
case	O	O:0.999977
that	O	O:0.999993
all	O	O:0.999999
entries	O	O:0.999901
in	O	O:0.999881
`	O	O:0.999996
repl	O	O:0.996448
`	O	O:0.999994
are	O	O:0.999967
the	O	O:0.999996
same	O	O:0.999695
?	O	O:0.999947
	
Pulling	O	O:0.999746
data	O	O:0.999958
from	O	O:0.999990
a	O	O:0.999998
numpy	O	O:0.999559
array	O	O:0.999804
	
There's	O	O:0.999808
no	O	O:0.999984
effective	O	O:0.999855
difference	O	O:0.999213
(	O	O:0.999986
they	O	O:0.999967
both	O	O:0.999983
return	O	O:0.999716
views	O	O:0.999714
into	O	O:0.999713
the	O	O:0.999993
original	O	O:0.999111
array	O	O:0.999904
)	O	O:0.999956
.	O	O:0.999789
	
Thanks	O	O:0.999446
for	O	O:0.999972
all	O	O:0.999943
the	O	O:0.999974
tips	O	O:0.996415
!	O	O:0.999906
	
remove	O	O:0.998818
zero	O	O:0.999610
lines	O	O:0.999656
2-D	O	O:0.999902
numpy	O	O:0.999822
array	O	O:0.999658
	
Instead	O	O:0.999925
of	O	O:0.999994
using	O	O:0.999511
`	O	O:0.999973
PyInt_AsLong	O	O:0.869966
`	O	O:0.999995
,	O	O:0.999904
use	O	O:0.999980
the	O	O:0.999356
`	O	O:0.999959
PyArray_*	O	O:0.991278
`	O	O:0.999994
functions	O	O:0.999844
provided	O	O:0.999908
by	O	O:0.999989
Numpy's	O	O:0.999699
C	O	O:0.998804
API	O	O:0.999986
to	O	O:0.999982
access	O	O:0.999993
the	O	O:0.999998
data	O	O:0.999895
;	O	O:0.999991
in	O	O:0.999995
particular	O	O:0.999979
,	O	O:0.999995
see	O	O:0.999808
section	O	O:0.999736
Array	O	O:0.999838
API	O	O:0.999885
.	O	O:0.999801
	
Well	O	O:0.999680
,	O	O:0.999986
I	O	O:0.999989
tried	O	O:0.999986
dividing	O	O:0.999444
by	O	O:0.999929
the	O	O:0.999988
largest	O	O:0.999623
place	O	O:0.999578
value	O	O:0.999908
.	O	O:0.999916
	
All	O	O:0.999902
of	O	O:0.999992
those	O	O:0.999846
numpys	O	O:0.999851
are	O	O:0.999971
linked	O	O:0.999762
to	O	O:0.999988
the	O	O:0.999998
system	O	O:0.999684
Accelerate	O	O:0.997785
framework	O	O:0.999561
:	O	O:0.999960
#CODE	O	O:0.999853
	
and	O	O:0.999970
I	O	O:0.999997
wish	O	O:0.999961
to	O	O:0.999988
create	O	O:0.999996
a	O	O:0.999999
third	O	O:0.999830
array	O	O:0.999983
with	O	O:0.999935
each	O	O:0.999689
element	O	O:0.999976
from	O	O:0.999849
`	O	O:0.999992
b	O	O:0.999647
`	O	O:0.999997
appearing	O	O:0.996002
`	O	O:0.999997
a	O	O:0.999836
`	O	O:0.999994
times	O	O:0.998494
in	O	O:0.999997
the	O	O:0.999992
new	O	O:0.999833
array	O	O:0.999954
,	O	O:0.999979
as	O	O:0.999893
:	O	O:0.999814
#CODE	O	O:0.999826
	
I	O	O:0.999951
can	O	O:0.999988
imagine	O	O:0.999995
a	O	O:0.999999
number	O	O:0.999856
of	O	O:0.999992
approaches	O	O:0.999945
to	O	O:0.999986
storing	O	O:0.999995
both	O	O:0.999737
of	O	O:0.999998
these	O	O:0.999987
data	O	O:0.999991
formats	O	O:0.999929
,	O	O:0.999998
ranging	O	O:0.999858
from	O	O:0.999918
storing	O	O:0.999766
the	O	O:0.999989
metadata	O	O:0.999778
with	O	O:0.999942
the	O	O:0.999973
`	O	O:0.999991
AttributeSet	O	O:0.988483
`	O	O:0.999998
class	O	O:0.999753
for	O	O:0.999997
each	O	O:0.997673
`	O	O:0.999945
Array	O	O:0.998697
`	O	O:0.999979
/	O	O:0.999311
`	O	O:0.999986
CArray	O	O:0.912150
`	O	O:0.999996
to	O	O:0.999986
using	O	O:1.000000
a	O	O:0.999852
`	O	O:0.999651
Table	O	O:0.991438
`	O	O:0.999990
for	O	O:0.999981
all	O	O:0.999982
of	O	O:0.999972
the	O	O:0.999900
metadata	O	O:0.999588
.	O	O:0.999796
	
I	O	O:0.999992
want	O	O:0.999990
to	O	O:0.999944
calculate	O	O:0.999992
the	O	O:0.999999
average	O	O:0.999649
of	O	O:0.999998
four	O	O:0.999899
neighbors	O	O:0.999941
in	O	O:0.999992
a	O	O:0.999998
huge	O	O:0.998140
array	O	O:0.999716
.	O	O:0.999743
	
Suppress	O	O:0.998576
Scientific	O	O:0.999352
Notation	O	O:0.999359
in	O	O:0.999946
Numpy	O	O:0.999122
When	O	O:0.999307
Creating	O	O:0.999196
Array	O	O:0.999556
From	O	O:0.998985
Nested	O	O:0.998732
List	O	O:0.998996
	
I	O	O:0.999992
want	O	O:0.999975
to	O	O:0.999957
find	O	O:0.999995
the	O	O:0.999978
vector	O	O:0.999903
x	O	O:0.999896
'	O	O:0.999993
such	O	O:0.999989
that	O	O:0.999930
Ax	O	O:0.999613
'	O	O:0.999964
is	O	O:0.999992
as	O	O:0.999994
close	O	O:0.999817
as	O	O:0.999998
possible	O	O:0.999431
to	O	O:0.999951
	
And	O	O:0.999959
the	O	O:0.999988
dataset	O	O:0.999847
in	O	O:0.999962
question	O	O:0.998907
is	O	O:0.999984
beyond	O	O:0.999391
doubt	O	O:0.999204
particular	O	O:0.997793
:	O	O:0.999928
There	O	O:0.999979
certainly	O	O:0.999801
is	O	O:0.999996
an	O	O:0.999929
upper	O	O:0.999622
bound	O	O:0.997758
and	O	O:0.999995
a	O	O:0.999969
precision	O	O:0.991989
.	O	O:0.999886
	
Only	O	O:0.999864
integers	O	O:0.999662
can	O	O:0.999953
be	O	O:1.000000
used	O	O:0.999978
as	O	O:0.999983
array	O	O:0.999502
or	O	O:0.999963
matrix	O	O:0.999541
indices	O	O:0.999136
.	O	O:0.999884
	
I	O	O:0.999920
can't	O	O:0.999949
find	O	O:0.999623
it	O	O:0.999997
online	O	O:0.999891
anywhere	O	O:0.999897
.	O	O:0.999898
	
I	O	O:0.999964
will	O	O:0.999919
try	O	O:0.999992
your	O	O:0.999969
code	O	O:0.999330
,	O	O:0.999997
but	O	O:0.999983
I	O	O:0.999987
am	O	O:0.999999
also	O	O:0.999917
going	O	O:0.999949
to	O	O:0.999951
try	O	O:0.999997
writing	O	O:0.999924
a	O	O:0.999994
simple	O	O:0.998823
C	O	O:0.999816
extension	O	O:0.999956
to	O	O:0.999996
simply	O	O:0.999997
do	O	O:0.999987
the	O	O:0.999993
reading	O	O:0.997476
,	O	O:0.999970
math	O	O:0.999738
,	O	O:0.999968
and	O	O:0.999996
drawing	O	O:0.999865
all	O	O:0.999545
in	O	O:0.999994
one	O	O:0.999987
place	O	O:0.999729
.	O	O:0.999966
	
Are	O	O:0.999960
there	O	O:0.999959
any	O	O:0.999985
good	O	O:0.999818
greedy	O	O:0.999749
implementations	O	O:0.999799
to	O	O:0.999946
solve	O	O:0.999997
this	O	O:0.999938
or	O	O:0.999998
am	O	O:0.999996
I	O	O:0.999998
on	O	O:0.999998
my	O	O:0.999934
own	O	O:0.999979
to	O	O:0.999979
implement	O	O:0.999989
this	O	O:0.999837
?	O	O:0.999977
	
The	O	O:0.999917
problem	O	O:0.997978
is	O	O:0.999997
that	O	O:0.999726
for	O	O:0.999997
the	O	O:0.999974
array	O	O:0.999800
input	O	O:0.999817
,	O	O:0.999991
SWIG	O	O:0.999562
complains	O	O:0.999770
that	O	O:0.999979
there	O	O:0.999852
is	O	O:0.999992
no	O	O:0.999849
typemap	O	O:0.999367
.	O	O:0.999885
	
Is	O	O:0.999783
`	O	O:0.999990
column_array_to_add	O	O:0.989261
`	O	O:0.999998
another	O	O:0.999306
2D	O	O:0.999957
array	O	O:0.999857
,	O	O:0.999976
or	O	O:0.999926
is	O	O:0.999987
it	O	O:0.999997
a	O	O:0.999996
1D	O	O:0.999883
column	O	O:0.999881
array	O	O:0.999987
,	O	O:0.999995
as	O	O:0.999992
the	O	O:0.999932
name	O	O:0.999606
implies	O	O:0.999229
?	O	O:0.999966
	
the	O	O:0.999983
sum	O	O:0.999818
of	O	O:0.999997
a	O	O:0.999983
triple-product	O	O:0.991398
(	O	O:0.999988
element-wise	O	O:0.999192
)	O	O:0.999921
.	O	O:0.999764
	
I	O	O:0.999964
ran	O	O:0.999958
a	O	O:0.999982
simple	O	O:0.998460
speed	O	O:0.999626
test	O	O:0.999239
comparing	O	O:0.999924
numpy	O	O:0.999117
and	O	O:0.999959
python	O	O:0.999843
list	O	O:0.997027
comprehension	O	O:0.999074
,	O	O:0.999988
and	O	O:0.999968
apparently	O	O:0.999942
list	O	O:0.994646
comprehension	O	O:0.999011
was	O	O:0.999874
faster	O	O:0.998818
.	O	O:0.999815
	
That	O	O:0.998763
is	O	O:0.999988
why	O	O:0.999992
your	O	O:0.999909
sample	O	O:0.999510
loop	O	O:0.999583
has	O	O:0.999927
been	O	O:0.999796
collapsed	O	O:0.999872
to	O	O:0.999998
read	O	O:0.999837
in	O	O:0.999989
the	O	O:0.999995
full	O	O:0.999875
sample	O	O:0.999571
for	O	O:0.999990
the	O	O:0.999918
receiver	O	O:0.987285
and	O	O:0.999980
channel	O	O:0.999606
in	O	O:0.999958
one	O	O:0.999969
large	O	O:0.999797
read	O	O:0.988771
.	O	O:0.999760
	
Something	O	O:0.999872
like	O	O:0.999852
the	O	O:0.999991
following	O	O:0.998993
iterator	O	O:0.999755
should	O	O:0.999910
get	O	O:0.999903
around	O	O:0.999993
both	O	O:0.999860
of	O	O:0.999988
these	O	O:0.999588
problems	O	O:0.998889
:	O	O:0.999952
#CODE	O	O:0.999840
	
I	O	O:0.999956
appreciate	O	O:0.999971
any	O	O:0.999939
input	O	O:0.999842
on	O	O:0.999977
this	O	O:0.999876
...	O	O:0.999900
	
Do	O	O:0.999962
you	O	O:0.999987
really	O	O:0.999984
need	O	O:0.999976
to	O	O:0.999999
find	O	O:0.999999
such	O	O:0.999993
a	O	O:0.999996
weird	O	O:0.995793
thing	O	O:0.999789
?	O	O:0.999896
	
Any	O	O:0.999928
particular	O	O:0.999752
reason	O	O:0.999810
you	O	O:0.999972
don't	O	O:0.999993
want	O	O:0.999989
to	O	O:0.999992
use	O	O:1.000000
a	O	O:0.999977
straightforward	O	O:0.996392
approach	O	O:0.999906
?	O	O:0.999899
	
The	O	O:0.999972
advantage	O	O:0.999953
of	O	O:0.999991
numpy	O	O:0.997943
is	O	O:0.999995
the	O	O:0.999985
support	O	O:0.999182
of	O	O:0.999984
slicing	O	O:0.999323
at	O	O:0.999998
different	O	O:0.999755
levels	O	O:0.999307
.	O	O:0.999789
	
An	O	O:0.999835
implementation	O	O:0.999781
,	O	O:0.999995
however	O	O:0.999823
,	O	O:0.999861
is	O	O:0.999991
not	O	O:0.999954
really	O	O:0.999979
open	O	O:0.998787
to	O	O:0.999961
interpretation	O	O:0.999978
.	O	O:0.999895
	
Python	O	O:0.999276
numpy	O	O:0.999833
masked	O	O:0.999220
array	O	O:0.999774
initialization	O	O:0.999277
	
You	O	O:0.999948
can	O	O:0.999948
further	O	O:0.999991
optimize	O	O:0.999930
by	O	O:0.999983
exploiting	O	O:0.999798
array-order	O	O:0.998577
alignment	O	O:0.999942
to	O	O:0.999973
reduce	O	O:0.999936
excess	O	O:0.999387
memory	O	O:0.999849
consumption	O	O:0.999934
caused	O	O:0.999946
by	O	O:0.999992
copying	O	O:0.998931
the	O	O:0.999956
original	O	O:0.997751
arrays	O	O:0.999494
.	O	O:0.999837
	
For	O	O:0.999919
example	O	O:0.999582
,	O	O:0.999995
any	O	O:0.999960
vector	O	O:0.999566
(	O	O:0.999980
of	O	O:0.999997
the	O	O:0.999990
appropriate	O	O:0.999990
dimension	O	O:0.999916
)	O	O:0.999995
can	O	O:0.999981
be	O	O:1.000000
an	O	O:0.999999
eigenvector	O	O:0.999907
of	O	O:0.999976
the	O	O:0.999869
identity	O	O:0.999757
matrix	O	O:0.999281
.	O	O:0.999823
	
The	O	O:0.999940
normal	O	O:0.999365
64-bit	O	O:0.999726
double-precision	O	O:0.999456
floating	O	O:0.999248
point	O	O:0.999513
has	O	O:0.999955
least	O	O:0.999888
positive	O	O:0.999897
normal	O	O:0.998831
value	O	O:0.999969
2.2E-308	O	O:0.996808
;	O	O:0.999995
storing	O	O:0.999468
logs	O	O:0.999701
gives	O	O:0.999927
you	O	O:0.999992
an	O	O:0.999998
effective	O	O:0.999969
least	O	O:0.999859
positive	O	O:0.999863
normal	O	O:0.997682
1E-	O	O:0.997550
(	O	O:0.999985
1.7E308	O	O:0.995294
)	O	O:0.999952
.	O	O:0.999763
	
index	O	O:0.999834
set	O	O:0.999805
for	O	O:0.999998
each	O	O:0.999594
position	O	O:0.999519
in	O	O:0.999922
the	O	O:0.999982
index	O	O:0.999776
arrays	O	O:0.999535
.	O	O:0.999930
	
I	O	O:0.999955
am	O	O:0.999996
wondering	O	O:0.998700
if	O	O:0.999978
reassigning	O	O:0.999859
temp	O	O:0.992532
[	O	O:0.999991
]	O	O:0.999985
to	O	O:0.999985
a	O	O:1.000000
1-element	O	O:0.997780
shorter	O	O:0.999563
vector	O	O:0.999951
each	O	O:0.999847
time	O	O:0.999817
is	O	O:0.999993
slow	O	O:0.998648
,	O	O:0.999975
would	O	O:0.999954
it	O	O:0.999998
be	O	O:0.999998
faster	O	O:0.999933
to	O	O:0.999974
pre-allocate	O	O:0.999982
a	O	O:0.999994
96-3	O	O:0.996216
length	O	O:0.999911
list	O	O:0.999191
of	O	O:0.999997
vectors	O	O:0.999655
of	O	O:0.999991
length	O	O:0.998835
96	O	O:0.999876
,	O	O:0.999975
95	O	O:0.999920
,	O	O:0.999874
94	O	O:0.999951
...	O	O:0.999925
to	O	O:0.999967
3	O	O:0.999993
?	O	O:0.999950
	
What	O	O:0.999527
would	O	O:0.999966
we	O	O:0.999999
do	O	O:0.999994
,	O	O:0.999999
if	O	O:0.999981
we	O	O:0.999991
wanted	O	O:0.999974
to	O	O:0.999998
change	O	O:0.999994
values	O	O:0.999883
at	O	O:0.999990
indexes	O	O:0.999591
which	O	O:0.999808
are	O	O:0.999999
multiple	O	O:0.999961
of	O	O:0.999992
given	O	O:0.998834
n	O	O:0.999985
,	O	O:0.999999
like	O	O:0.999984
a	O	O:0.999992
[	O	O:0.999919
2	O	O:0.999968
]	O	O:0.999959
,	O	O:0.999993
a	O	O:0.999985
[	O	O:0.999886
4	O	O:0.999964
]	O	O:0.999978
,	O	O:0.999993
a	O	O:0.999987
[	O	O:0.999896
6	O	O:0.999959
]	O	O:0.999977
,	O	O:0.999995
a	O	O:0.999982
[8	O	O:0.998253
]	O	O:0.999979
.....	O	O:0.997972
for	O	O:0.999937
n=2	O	O:0.998850
?	O	O:0.999815
	
Thanks	O	O:0.999451
for	O	O:0.999973
all	O	O:0.999924
the	O	O:0.999955
python	O	O:0.999160
guidance	O	O:0.999489
!	O	O:0.999867
	
I'm	O	O:0.999840
not	O	O:0.999979
really	O	O:0.999847
pro	O	O:0.999952
Matlab	O	O:0.999192
,	O	O:0.999983
but	O	O:0.999956
surely	O	O:0.999808
Stata	O	O:0.999849
can't	O	O:0.999870
be	O	O:0.999996
so	O	O:0.999996
bad	O	O:0.999946
as	O	O:0.999996
to	O	O:0.999973
require	O	O:0.999959
`	O	O:0.999993
adoedit	O	O:0.987647
`	O	O:0.999999
just	O	O:0.999495
to	O	O:0.999998
know	O	O:0.999989
what	O	O:0.999915
algorithm	O	O:0.999890
it	O	O:0.999985
is	O	O:0.999992
using	O	O:0.999698
?	O	O:0.999615
	
This	O	O:0.999776
can	O	O:0.999966
be	O	O:0.999999
found	O	O:0.999966
relatively	O	O:0.999753
easily	O	O:0.999850
by	O	O:0.999981
just	O	O:0.999899
looking	O	O:0.999950
at	O	O:0.999991
points	O	O:0.999765
where	O	O:0.999949
the	O	O:0.999991
potential	O	O:0.999677
exceeds	O	O:0.999929
a	O	O:0.999977
certain	O	O:0.995392
threshold	O	O:0.999920
.	O	O:0.999893
	
Negative	O	O:0.999297
indices	O	O:0.997793
are	O	O:0.999983
interpreted	O	O:0.999954
as	O	O:0.999997
counting	O	O:0.999677
from	O	O:0.999946
the	O	O:0.999998
end	O	O:0.999961
of	O	O:0.999989
the	O	O:0.999943
array	O	O:0.999888
	
I	O	O:0.999909
was	O	O:0.999979
using	O	O:0.999330
unsigned	O	O:0.996596
int	O	O:0.996555
indices	O	O:0.999230
to	O	O:0.999986
speed	O	O:0.999992
up	O	O:0.999976
access	O	O:0.999808
according	O	O:0.999356
to	O	O:0.999809
:	O	O:0.999993
#URL	O	O:0.999656
	
I've	O	O:0.999496
tried	O	O:0.999698
to	O	O:0.999961
vectorise	O	O:0.999961
it	O	O:0.999991
using	O	O:0.999924
numpy	O	O:0.996892
but	O	O:0.998628
I'm	O	O:0.999934
not	O	O:0.999985
really	O	O:0.999971
sure	O	O:0.999854
how	O	O:0.999971
to	O	O:0.999991
do	O	O:0.999999
it	O	O:0.999997
given	O	O:0.999758
that	O	O:0.999964
the	O	O:0.999992
matrix	O	O:0.999532
/	O	O:0.999951
2D	O	O:0.999794
array	O	O:0.999949
gets	O	O:0.999720
changed	O	O:0.999691
on	O	O:0.999993
each	O	O:0.999197
iteration	O	O:0.999866
.	O	O:0.999914
	
Numpy	O	O:0.998425
slicing	O	O:0.999365
x	O	O:0.999789
,	O	O:0.999992
y	O	O:0.999962
,	O	O:0.999986
z	O	O:0.999981
array	O	O:0.999905
for	O	O:0.999985
variable	O	O:0.999720
z	O	O:0.999523
	
I	O	O:0.999936
would	O	O:0.999995
like	O	O:0.999933
to	O	O:0.999998
convert	O	O:0.999051
(	O	O:0.999997
a	O	O:0.999998
more	O	O:0.999218
complicated	O	O:0.999966
form	O	O:0.999994
of	O	O:0.999980
)	O	O:0.999992
the	O	O:0.999981
follwing	O	O:0.999343
Matlab	O	O:0.999321
code	O	O:0.999273
#CODE	O	O:0.999776
	
I	O	O:0.999992
have	O	O:0.999991
a	O	O:0.999983
NumPy	O	O:0.999661
array	O	O:0.999232
'	O	O:0.999968
boolarr	O	O:0.999521
'	O	O:0.999973
of	O	O:0.999956
boolean	O	O:0.998184
type	O	O:0.999222
.	O	O:0.999840
	
If	O	O:0.999969
you	O	O:0.999992
have	O	O:0.999996
only	O	O:0.999982
integers	O	O:0.999975
that	O	O:0.999919
are	O	O:0.999997
between	O	O:0.999308
0	O	O:0.999829
and	O	O:0.999958
n	O	O:0.998888
(	O	O:0.999869
if	O	O:0.999986
not	O	O:0.999988
its	O	O:0.999981
no	O	O:0.999992
problem	O	O:0.999755
to	O	O:0.999996
generalize	O	O:0.999976
to	O	O:0.999994
any	O	O:0.999999
integer	O	O:0.999469
range	O	O:0.999850
unless	O	O:0.999823
its	O	O:0.999954
very	O	O:0.999937
sparse	O	O:0.999736
)	O	O:0.999973
,	O	O:0.999984
the	O	O:0.999996
most	O	O:0.999697
efficient	O	O:0.999906
way	O	O:0.999895
is	O	O:0.999995
the	O	O:0.999981
use	O	O:0.999945
of	O	O:0.999971
take	O	O:0.997709
/	O	O:0.999989
fancy	O	O:0.993940
indexing	O	O:0.992717
:	O	O:0.999735
#CODE	O	O:0.999643
	
Instead	O	O:0.999859
of	O	O:0.999985
2D	O	O:0.999937
coordinates	O	O:0.999719
,	O	O:0.999995
I	O	O:0.999953
use	O	O:0.999970
index	O	O:0.995575
for	O	O:0.999994
every	O	O:0.999953
elements	O	O:0.999123
in	O	O:0.999953
the	O	O:0.999963
matrix	O	O:0.999171
.	O	O:0.999806
	
I	O	O:0.999944
already	O	O:0.999949
tried	O	O:0.999584
converting	O	O:0.998898
the	O	O:0.999966
cols	O	O:0.997887
to	O	O:0.999952
int	O	O:0.999720
but	O	O:0.999979
that	O	O:0.999639
didn't	O	O:0.999946
solve	O	O:0.999600
it	O	O:0.999952
.	O	O:0.999912
	
Although	O	O:0.999584
I'm	O	O:0.999981
sure	O	O:0.999927
there	O	O:0.999939
are	O	O:0.999993
methods	O	O:0.999828
for	O	O:0.999982
applying	O	O:0.999234
RK	O	O:0.999794
to	O	O:0.999981
an	O	O:0.999999
equation	O	O:0.999987
such	O	O:0.999957
as	O	O:0.999999
this	O	O:0.999560
,	O	O:0.999990
I	O	O:0.999980
didn't	O	O:0.999916
find	O	O:0.999668
any	O	O:0.999997
evidence	O	O:0.999925
of	O	O:0.999998
them	O	O:0.999108
in	O	O:0.999993
_Numerical	O	O:0.997513
Recipes_	O	O:0.999232
,	O	O:0.999992
which	O	O:0.999949
I	O	O:0.999993
think	O	O:0.999939
qualifies	O	O:0.999487
that	O	O:0.999910
topic	O	O:0.999972
as	O	O:0.999998
relatively	O	O:0.999362
obscure	O	O:0.999083
;-)	O	O:0.999396
	
When	O	O:0.999610
facing	O	O:0.999935
a	O	O:0.999982
big	O	O:0.997133
computation	O	O:0.999279
,	O	O:0.999986
it	O	O:0.999990
will	O	O:0.999894
run	O	O:0.999979
tests	O	O:0.999952
using	O	O:0.999955
several	O	O:0.999028
implementations	O	O:0.998840
to	O	O:0.999992
find	O	O:0.999993
out	O	O:0.999970
which	O	O:0.999814
is	O	O:0.999992
the	O	O:0.999973
fastest	O	O:0.999823
one	O	O:0.999985
on	O	O:0.999994
our	O	O:0.999982
computer	O	O:0.999775
at	O	O:0.999998
this	O	O:0.999792
moment	O	O:0.999879
.	O	O:0.999908
	
Use	O	O:0.999903
an	O	O:0.999990
array	O	O:0.999971
of	O	O:0.999987
floating	O	O:0.999589
point	O	O:0.999877
numbers	O	O:0.998215
instead	O	O:0.999908
.	O	O:0.999963
	
`	O	O:0.999979
numpy	O	O:0.995998
`	O	O:0.999995
slicing	O	O:0.998919
operations	O	O:0.999937
probably	O	O:0.999650
involve	O	O:0.999712
`	O	O:0.999972
for	O	O:0.999313
`	O	O:0.999996
loops	O	O:0.998554
at	O	O:0.999999
some	O	O:0.999919
level	O	O:0.998808
,	O	O:0.999951
but	O	O:0.999910
they're	O	O:0.999939
implemented	O	O:0.999705
in	O	O:0.999984
c	O	O:0.999658
,	O	O:0.999988
and	O	O:0.999993
provide	O	O:0.999842
a	O	O:0.999954
linear	O	O:0.997808
time	O	O:0.999913
solution	O	O:0.999308
for	O	O:0.999995
this	O	O:0.999394
.	O	O:0.999859
	
I	O	O:0.999988
have	O	O:0.999987
one	O	O:0.999860
question	O	O:0.999410
:	O	O:0.999985
Is	O	O:0.999997
there	O	O:0.999995
only	O	O:0.999979
one	O	O:0.999997
way	O	O:0.999984
to	O	O:0.999993
do	O	O:1.000000
addition	O	O:0.999982
of	O	O:0.999983
two	O	O:0.999598
matrix	O	O:0.999889
?	O	O:0.999915
	
@USER	O	O:0.998569
It	O	O:0.999929
is	O	O:0.999984
now	O	O:0.999904
supported	O	O:0.999947
,	O	O:0.999996
at	O	O:0.999997
least	O	O:0.999677
in	O	O:0.999996
my	O	O:0.999849
version	O	O:0.997962
(	O	O:0.999987
1.7.1	O	O:0.998878
)	O	O:0.999940
.	O	O:0.999825
	
I	O	O:0.999990
know	O	O:0.999913
I	O	O:0.999979
could	O	O:0.999978
start	O	O:0.999979
a	O	O:0.999999
number	O	O:0.999863
of	O	O:0.999995
times	O	O:0.999884
at	O	O:0.999999
random	O	O:0.998767
locations	O	O:0.998989
but	O	O:0.999701
I'm	O	O:0.999967
not	O	O:0.999997
able	O	O:0.999993
to	O	O:0.999995
do	O	O:0.999999
that	O	O:0.999949
with	O	O:0.999994
what	O	O:0.999964
I	O	O:0.999996
am	O	O:0.999998
currently	O	O:0.999805
working	O	O:0.999848
on	O	O:0.999933
and	O	O:0.999999
have	O	O:0.999990
to	O	O:0.999985
use	O	O:1.000000
on	O	O:0.999933
of	O	O:0.999985
these	O	O:0.999992
minimisers	O	O:0.999968
out	O	O:0.999976
of	O	O:0.999985
the	O	O:0.999711
box	O	O:0.999852
.	O	O:0.999805
	
For	O	O:0.999948
small	O	O:0.999879
displacements	O	O:0.999823
of	O	O:0.999928
around	O	O:0.999790
4-5	O	O:0.999929
pixels	O	O:0.999197
,	O	O:0.999995
the	O	O:0.999998
direction	O	O:0.999274
of	O	O:0.999985
vector	O	O:0.999858
calculated	O	O:0.999913
seems	O	O:0.999954
to	O	O:0.999988
be	O	O:1.000000
fine	O	O:0.999814
,	O	O:0.999977
but	O	O:0.999991
the	O	O:0.999995
magnitude	O	O:0.999929
of	O	O:0.999981
the	O	O:0.999969
vector	O	O:0.999574
is	O	O:0.999953
too	O	O:0.999786
small	O	O:0.997004
(	O	O:0.999912
that's	O	O:0.999929
why	O	O:0.999972
I	O	O:0.999989
had	O	O:0.999983
to	O	O:0.999981
multiply	O	O:0.999964
u	O	O:0.999950
,	O	O:0.999996
v	O	O:0.999994
by	O	O:0.999930
3	O	O:0.999758
before	O	O:0.999698
plotting	O	O:0.999979
them	O	O:0.998542
)	O	O:0.999982
.	O	O:0.999806
	
However	O	O:0.999853
,	O	O:0.999987
I	O	O:0.999996
will	O	O:0.999987
need	O	O:0.999971
to	O	O:0.999999
access	O	O:0.999993
all	O	O:0.999992
waveforms	O	O:0.999727
at	O	O:0.999995
some	O	O:0.999861
point	O	O:0.999664
.	O	O:0.999864
	
I've	O	O:0.999404
find	O	O:0.999663
this	O	O:0.999591
:	O	O:0.999955
#URL	O	O:0.999777
but	O	O:0.999996
when	O	O:0.999810
I	O	O:0.999998
try	O	O:0.999997
to	O	O:0.999841
install	O	O:0.999992
this	O	O:0.999952
I	O	O:0.999996
get	O	O:0.999996
an	O	O:0.999904
error	O	O:0.998729
:	O	O:0.999924
#CODE	O	O:0.999727
	
yes	O	O:0.999704
,	O	O:0.999994
I	O	O:0.999993
can	O	O:0.999991
assume	O	O:0.999986
either	O	O:0.999997
that	O	O:0.999921
I	O	O:1.000000
have	O	O:0.999996
g	O	O:0.999976
explicitly	O	O:0.999843
or	O	O:0.999998
that	O	O:0.999944
I	O	O:0.999998
can	O	O:0.999993
sample	O	O:0.999941
x	O	O:0.999984
according	O	O:0.999751
to	O	O:0.999969
g	O	O:0.999970
.	O	O:0.999868
	
`	O	O:0.999966
example	O	O:0.995523
`	O	O:0.999988
is	O	O:0.999987
a	O	O:0.999992
structured	O	O:0.997892
array	O	O:0.999983
consisting	O	O:0.999597
of	O	O:0.999988
two	O	O:0.999947
elements	O	O:0.999504
(	O	O:0.999858
`	O	O:0.999966
(	O	O:0.999892
1	O	O:0.999986
,	O	O:0.999969
2	O	O:0.999928
,	O	O:0.999971
3	O	O:0.999930
)`	O	O:0.999668
and	O	O:0.999921
`	O	O:0.999950
(	O	O:0.999603
4	O	O:0.999975
,	O	O:0.999973
5	O	O:0.999932
,	O	O:0.999983
6	O	O:0.999959
)`)	O	O:0.999668
,	O	O:0.999991
each	O	O:0.999372
element	O	O:0.999214
(	O	O:0.999988
or	O	O:0.999987
'	O	O:0.999988
record	O	O:0.999521
')	O	O:0.999983
having	O	O:0.998975
3	O	O:0.999779
fields	O	O:0.998871
.	O	O:0.999873
	
If	O	O:0.999941
i	O	O:0.999971
have	O	O:0.999990
two	O	O:0.999991
variables	O	O:0.999785
-	O	O:0.999994
where	O	O:0.999992
they	O	O:0.999924
either	O	O:0.999990
are	O	O:0.999995
a	O	O:0.999992
1d	O	O:0.999898
array	O	O:0.999983
of	O	O:0.999988
values	O	O:0.999291
length	O	O:0.999834
n	O	O:0.999954
,	O	O:0.999992
or	O	O:0.999995
are	O	O:0.999997
a	O	O:1.000000
single	O	O:0.999654
value	O	O:0.999951
,	O	O:0.999989
how	O	O:0.999979
do	O	O:0.999947
i	O	O:0.999995
loop	O	O:0.999932
through	O	O:0.999985
them	O	O:0.999796
so	O	O:0.999998
that	O	O:0.999978
I	O	O:0.999999
get	O	O:0.999996
n	O	O:0.999884
values	O	O:0.999842
returned	O	O:0.999100
.	O	O:0.999919
	
For	O	O:0.999956
each	O	O:0.999719
point	O	O:0.999770
in	O	O:0.999989
array	O	O:0.999902
A	O	O:0.999993
,	O	O:0.999993
I	O	O:0.999996
need	O	O:0.999977
to	O	O:0.999989
find	O	O:0.999988
how	O	O:0.999995
many	O	O:0.999978
points	O	O:0.999739
in	O	O:0.999993
array	O	O:0.999955
B	O	O:0.999910
are	O	O:0.999975
within	O	O:0.999915
a	O	O:0.999989
certain	O	O:0.998747
distance	O	O:0.999945
of	O	O:0.999974
it	O	O:0.999931
.	O	O:0.999967
	
It	O	O:0.999961
does	O	O:0.998488
,	O	O:0.999998
but	O	O:0.999986
somehow	O	O:0.999888
it	O	O:0.999980
is	O	O:0.999995
8	O	O:0.999961
times	O	O:0.999746
slower	O	O:0.999854
than	O	O:0.999931
copying	O	O:0.999268
to	O	O:0.999991
numpy	O	O:0.999980
array	O	O:0.999959
:(	O	O:0.999983
I	O	O:0.999994
suppose	O	O:0.999983
the	O	O:0.999931
regular	O	O:0.998908
python	O	O:0.999486
overhead	O	O:0.999960
slows	O	O:0.999846
things	O	O:0.999942
down	O	O:0.999680
much	O	O:0.999947
more	O	O:0.999949
than	O	O:0.999964
a	O	O:0.999995
copy	O	O:0.966775
...	O	O:0.999756
	
It	O	O:0.999969
all	O	O:0.999986
depends	O	O:0.999811
on	O	O:0.999993
its	O	O:0.999896
dependencies	O	O:0.999709
.	O	O:0.999818
	
Is	O	O:0.999986
there	O	O:0.999986
a	O	O:0.999995
way	O	O:0.999861
to	O	O:0.999996
make	O	O:0.999994
an	O	O:0.999998
array	O	O:0.999995
of	O	O:0.999997
such	O	O:0.999724
strings	O	O:0.999789
?	O	O:0.999714
	
`	O	O:0.999904
grid	O	O:0.999085
[	O	O:0.999993
1	O	O:0.999966
]`	O	O:0.999931
can	O	O:0.999884
be	O	O:1.000000
used	O	O:0.999989
as	O	O:0.999992
a	O	O:0.999995
proxy	O	O:0.997501
for	O	O:0.999882
the	O	O:0.999904
index	O	O:0.999426
`	O	O:0.999985
j	O	O:0.998337
`	O	O:0.999990
.	O	O:0.999291
	
After	O	O:0.999856
doing	O	O:0.999866
so	O	O:0.999974
,	O	O:0.999975
I	O	O:0.999989
discovered	O	O:0.999957
that	O	O:0.999892
if	O	O:0.999995
I	O	O:0.999998
tried	O	O:0.999939
to	O	O:0.999951
open	O	O:0.999886
the	O	O:0.999986
IPython	O	O:0.999434
HTML	O	O:0.999783
Notebook	O	O:0.999902
I	O	O:0.999950
got	O	O:0.999987
the	O	O:0.999925
error	O	O:0.998804
message	O	O:0.995602
:	O	O:0.999946
#CODE	O	O:0.999818
	
(	O	O:0.999964
the	O	O:0.999974
new	O	O:0.999562
matrix	O	O:0.999635
would	O	O:0.999979
have	O	O:0.999995
n-2	O	O:0.999999
rows	O	O:0.999811
m-2	O	O:0.999965
columns	O	O:0.999910
)	O	O:0.999981
.	O	O:0.999880
	
and	O	O:0.999777
duplicate	O	O:0.999973
index	O	O:0.999929
values	O	O:0.999872
at	O	O:0.999993
the	O	O:0.999998
correpsonding	O	O:0.998751
sites	O	O:0.999195
within	O	O:0.998811
	
I	O	O:0.999949
found	O	O:0.999939
that	O	O:0.999576
the	O	O:0.999997
best	O	O:0.999756
way	O	O:0.999982
to	O	O:0.999987
produce	O	O:0.999995
small	O	O:0.999896
pdf	O	O:0.999958
files	O	O:0.998929
is	O	O:0.999975
to	O	O:0.999997
save	O	O:0.999976
as	O	O:0.999995
eps	O	O:0.999493
in	O	O:0.999975
matplotlib	O	O:0.999322
and	O	O:0.999998
then	O	O:0.999878
use	O	O:0.999942
epstopdf	O	O:0.929530
.	O	O:0.999556
	
You	O	O:0.999934
could	O	O:0.999941
rearrange	O	O:0.999865
the	O	O:0.999991
image	O	O:0.999908
to	O	O:0.999987
put	O	O:0.999975
the	O	O:0.999965
(	O	O:0.999956
0	O	O:0.999977
,	O	O:0.999994
0	O	O:0.999959
)	O	O:0.999980
in	O	O:0.999962
the	O	O:0.999993
middle	O	O:0.999793
with	O	O:0.999890
some	O	O:0.999657
matrix	O	O:0.999844
manipulation	O	O:0.999669
.	O	O:0.999924
	
Please	O	O:0.999638
,	O	O:0.999986
see	O	O:0.999968
the	O	O:0.999993
next	O	O:0.999129
example	O	O:0.999379
:	O	O:0.999955
	
A	O	O:0.999668
function	O	O:0.999901
that	O	O:0.999854
broadcasts	O	O:0.999991
a	O	O:0.999997
scalar	O	O:0.999256
operation	O	O:0.999962
over	O	O:0.999841
an	O	O:0.999980
array	O	O:0.999657
is	O	O:0.999980
called	O	O:0.999287
a	O	O:0.999997
universal	O	O:0.919215
function	O	O:0.999910
,	O	O:0.999972
or	O	O:0.999993
ufunc	O	O:0.991936
.	O	O:0.999893
	
may	O	O:0.999919
not	O	O:0.999992
exist	O	O:0.999978
until	O	O:0.999959
the	O	O:0.999990
datasets	O	O:0.999895
get	O	O:0.999871
quite	O	O:0.999916
big	O	O:0.999524
(	O	O:0.999973
maybe	O	O:0.999882
you'll	O	O:0.999970
need	O	O:0.999980
at	O	O:0.999999
least	O	O:0.999957
10,000	O	O:0.999983
rows	O	O:0.999606
per	O	O:0.999983
data	O	O:0.999989
set	O	O:0.999842
)	O	O:0.999989
.	O	O:0.999754
	
Magic	O	O:0.999602
answers	O	O:0.999798
like	O	O:0.999936
this	O	O:0.999835
are	O	O:0.999990
not	O	O:0.999989
really	O	O:0.999911
helpful	O	O:0.999514
because	O	O:0.999981
they	O	O:0.999914
don't	O	O:0.999985
solve	O	O:0.999814
the	O	O:0.999975
problem	O	O:0.998622
.	O	O:0.999842
	
I	O	O:0.999962
think	O	O:0.999978
what	O	O:0.999187
I	O	O:0.999969
was	O	O:0.999990
missing	O	O:0.988925
is	O	O:0.999994
that	O	O:0.999722
I	O	O:0.999999
really	O	O:0.999992
have	O	O:0.999954
a	O	O:0.999976
3	O	O:0.999904
dimensional	O	O:0.999541
array	O	O:0.999865
,	O	O:0.999972
48x365x3	O	O:0.996733
.	O	O:0.999787
	
I	O	O:0.999987
load	O	O:0.999907
a	O	O:0.999989
some	O	O:0.999328
machine	O	O:0.999986
learning	O	O:0.999916
data	O	O:0.999975
from	O	O:0.999977
a	O	O:0.999995
csv	O	O:0.999757
file	O	O:0.999760
.	O	O:0.999857
	
So	O	O:0.999946
I	O	O:0.999996
have	O	O:0.999968
it	O	O:0.999904
running	O	O:0.999219
(	O	O:0.999986
or	O	O:0.999997
at	O	O:0.999993
least	O	O:0.999950
that	O	O:0.999907
assignment	O	O:0.999215
isn't	O	O:0.999950
throwing	O	O:0.999644
an	O	O:0.999967
error	O	O:0.998937
and	O	O:0.999956
it's	O	O:0.999892
compiling	O	O:0.998235
)	O	O:0.999918
!	O	O:0.999588
	
@USER	O	O:0.998637
The	O	O:0.999983
first	O	O:0.998456
function	O	O:0.999639
is	O	O:0.999978
taking	O	O:0.999825
chunks	O	O:0.999690
of	O	O:0.999988
200	O	O:0.999948
items	O	O:0.999955
from	O	O:0.999979
your	O	O:0.999961
huge	O	O:0.999725
array	O	O:0.999912
,	O	O:0.999945
and	O	O:0.999992
copying	O	O:0.999653
those	O	O:0.999796
chunks	O	O:0.999777
to	O	O:0.999998
a	O	O:1.000000
new	O	O:0.999606
,	O	O:0.999996
even	O	O:0.999918
more	O	O:0.999959
ginormous	O	O:0.999739
array	O	O:0.999836
.	O	O:0.999733
	
@USER	O	O:0.994870
:	O	O:0.999944
With	O	O:0.999821
`	O	O:0.999996
where	O	O:0.998226
`	O	O:0.999987
it	O	O:0.999942
looks	O	O:0.999967
definitely	O	O:0.999925
nice	O	O:0.999067
,	O	O:0.999983
but	O	O:0.999995
have	O	O:0.999970
you	O	O:0.999994
consider	O	O:0.999989
also	O	O:0.999988
the	O	O:0.999999
implications	O	O:0.999233
to	O	O:0.999990
performance	O	O:0.999998
when	O	O:0.999887
implementing	O	O:0.999954
with	O	O:0.999928
`	O	O:0.999993
where	O	O:0.998682
`	O	O:0.999990
?	O	O:0.999902
	
Anyone	O	O:0.999661
any	O	O:0.999934
idea	O	O:0.999434
what	O	O:0.999892
this	O	O:0.999933
means	O	O:0.999933
?!	O	O:0.999961
	
Assuming	O	O:0.999669
you	O	O:0.999954
are	O	O:0.999998
using	O	O:0.999975
g++	O	O:0.999368
to	O	O:0.999700
compile	O	O:0.999947
...	O	O:0.999971
have	O	O:0.999896
you	O	O:0.999976
had	O	O:0.999999
different	O	O:0.999970
results	O	O:0.999854
in	O	O:0.999995
any	O	O:0.999988
way	O	O:0.999982
when	O	O:0.999688
experimenting	O	O:0.999904
with	O	O:0.999944
compiler	O	O:0.999837
optimization	O	O:0.999943
flags	O	O:0.999441
?	O	O:0.999940
	
With	O	O:0.999805
the	O	O:0.999989
overhead	O	O:0.999915
of	O	O:0.999997
the	O	O:0.999998
data	O	O:0.999991
structure	O	O:0.999951
you	O	O:0.999992
could	O	O:0.999993
be	O	O:1.000000
looking	O	O:0.999948
at	O	O:0.999965
usage	O	O:0.999875
much	O	O:0.999156
higher	O	O:0.999794
than	O	O:0.999816
that	O	O:0.999911
--	O	O:0.999997
I	O	O:0.999988
can't	O	O:0.999985
say	O	O:0.999899
how	O	O:0.999989
much	O	O:0.999743
because	O	O:0.999981
I	O	O:0.999986
don't	O	O:0.999993
know	O	O:0.999451
the	O	O:0.999987
memory	O	O:0.999122
model	O	O:0.999241
behind	O	O:0.999844
SciPy	O	O:0.999250
/	O	O:0.999852
numpy	O	O:0.998754
.	O	O:0.999806
	
I	O	O:0.999990
have	O	O:0.999985
serious	O	O:0.999547
doubt	O	O:0.999870
that	O	O:0.999886
adding	O	O:0.999875
two	O	O:0.999966
numpy	O	O:0.999847
arrays	O	O:0.999402
is	O	O:0.999993
a	O	O:0.999975
bottleneck	O	O:0.999822
that	O	O:0.999963
you	O	O:0.999995
can	O	O:0.999995
solve	O	O:0.999995
rewriting	O	O:0.999965
things	O	O:0.999413
in	O	O:0.999961
C	O	O:0.999525
.	O	O:0.999870
	
Where	O	O:0.999928
exactly	O	O:0.999552
is	O	O:0.999996
the	O	O:0.999966
error	O	O:0.999677
occurring	O	O:0.998965
?	O	O:0.999866
	
I	O	O:0.999976
frequently	O	O:0.999936
convert	O	O:0.986889
16-bit	O	O:0.999482
grayscale	O	O:0.999820
image	O	O:0.999963
data	O	O:0.999929
to	O	O:0.999983
8-b	O	O:0.999983
it	O	O:0.999994
image	O	O:0.999993
data	O	O:0.999965
for	O	O:0.999985
display	O	O:0.997098
.	O	O:0.999531
	
Reduce	O	O:0.999376
it	O	O:0.999980
to	O	O:0.999999
a	O	O:0.999999
1	O	O:0.999618
/	O	O:0.999974
10	O	O:0.999884
resolution	O	O:0.999759
,	O	O:0.999995
find	O	O:0.999931
the	O	O:0.999995
one	O	O:0.999980
white	O	O:0.999879
pixel	O	O:0.999719
,	O	O:0.999988
and	O	O:0.999999
then	O	O:0.999912
you	O	O:0.999999
have	O	O:0.999999
a	O	O:0.999998
precise	O	O:0.999925
idea	O	O:0.999932
of	O	O:0.999995
where	O	O:0.999946
to	O	O:0.999997
search	O	O:0.999979
for	O	O:0.999990
the	O	O:0.999914
centroid	O	O:0.998471
.	O	O:0.999833
	
I	O	O:0.999965
ran	O	O:0.999954
a	O	O:0.999994
test	O	O:0.998351
to	O	O:0.999995
compare	O	O:0.999991
the	O	O:0.999992
times	O	O:0.999376
,	O	O:0.999985
and	O	O:0.999991
found	O	O:0.999910
that	O	O:0.998547
my	O	O:0.999983
method	O	O:0.999895
is	O	O:0.999991
faster	O	O:0.999881
by	O	O:0.999989
quite	O	O:0.999866
a	O	O:0.999969
bit	O	O:0.997128
,	O	O:0.999954
but	O	O:0.999947
Freddie	O	O:0.999777
Witherdon	O	O:0.999169
'	O	O:0.999990
s	O	O:0.999908
suggestion	O	O:0.999310
is	O	O:0.999996
even	O	O:0.998887
faster	O	O:0.999724
.	O	O:0.999826
	
I	O	O:0.999892
couldn't	O	O:0.999898
find	O	O:0.999767
it	O	O:0.999989
in	O	O:0.999994
the	O	O:0.999954
OLS	O	O:0.999322
recipe	O	O:0.998196
(	O	O:0.999968
#URL	O	O:0.999683
)	O	O:0.999941
.	O	O:0.999746
	
convert	O	O:0.996278
binary	O	O:0.999871
string	O	O:0.999793
to	O	O:0.999977
numpy	O	O:0.999989
array	O	O:0.999831
	
How	O	O:0.999876
to	O	O:0.999992
know	O	O:0.999994
where	O	O:0.999920
warning	O	O:0.999953
come	O	O:0.999952
from	O	O:0.999919
in	O	O:0.999958
Python	O	O:0.999538
	
	Performance by label (#match, #model, #ref) (precision, recall, F1):
	    O: (19098, 19148, 19155) (0.9974, 0.9970, 0.9972)
	    B-API: (285, 342, 335) (0.8333, 0.8507, 0.8419)
	Macro-average precision, recall, F1: (0.915361, 0.923885, 0.919578)
	Item accuracy: 19383 / 19490 (0.9945)
	Instance accuracy: 869 / 963 (0.9024)
	Elapsed time: 1.362642 [sec] (706.7 [instance/sec])
